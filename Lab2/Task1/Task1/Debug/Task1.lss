
Task1.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000007e0  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002800  80002800  00002c00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000001d0  80002a00  80002a00  00002e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000010  00000008  80002bd0  00003008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000f0  00000018  00000018  00000000  2**2
                  ALLOC
  8 .heap         0000eef8  00000108  00000108  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  00003018  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000390  00000000  00000000  00003048  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 000007b2  00000000  00000000  000033d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00006ca2  00000000  00000000  00003b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fd6  00000000  00000000  0000a82c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003e74  00000000  00000000  0000b802  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000072c  00000000  00000000  0000f678  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00001ad7  00000000  00000000  0000fda4  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    00001151  00000000  00000000  0001187b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 00681eda  00000000  00000000  000129cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000328  00000000  00000000  006948a8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf d9 cc 	sub	pc,pc,-9780

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf f9 d0 	sub	pc,pc,-1584

Disassembly of section .text:

80002008 <usart_set_async_baudrate>:
80002008:	d4 01       	pushm	lr
8000200a:	f6 08 15 04 	lsl	r8,r11,0x4
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8000200e:	14 38       	cp.w	r8,r10
80002010:	f9 b8 08 10 	movls	r8,16
80002014:	f9 b8 0b 08 	movhi	r8,8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
80002018:	f0 0b 02 4b 	mul	r11,r8,r11
8000201c:	f6 09 16 01 	lsr	r9,r11,0x1
80002020:	f2 0a 00 3a 	add	r10,r9,r10<<0x3
80002024:	f4 0b 0d 0a 	divu	r10,r10,r11
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
80002028:	f4 09 16 03 	lsr	r9,r10,0x3
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8000202c:	f2 cb 00 01 	sub	r11,r9,1
80002030:	e0 4b ff fe 	cp.w	r11,65534
80002034:	e0 88 00 03 	brls	8000203a <usart_set_async_baudrate+0x32>
80002038:	da 0a       	popm	pc,r12=1
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
8000203a:	78 1b       	ld.w	r11,r12[0x4]
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8000203c:	e8 6e 00 00 	mov	lr,524288
80002040:	59 08       	cp.w	r8,16
80002042:	fc 08 17 10 	movne	r8,lr
80002046:	f9 b8 00 00 	moveq	r8,0
8000204a:	e4 1b ff f7 	andh	r11,0xfff7
8000204e:	e0 1b fe cf 	andl	r11,0xfecf
80002052:	16 48       	or	r8,r11
80002054:	99 18       	st.w	r12[0x4],r8
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80002056:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
8000205a:	f3 ea 11 09 	or	r9,r9,r10<<0x10
8000205e:	99 89       	st.w	r12[0x20],r9
80002060:	d8 0a       	popm	pc,r12=0

80002062 <usart_write_char>:
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
80002062:	78 58       	ld.w	r8,r12[0x14]
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
  if (usart_tx_ready(usart))
80002064:	e2 18 00 02 	andl	r8,0x2,COH
80002068:	c0 31       	brne	8000206e <usart_write_char+0xc>
8000206a:	30 2c       	mov	r12,2
8000206c:	5e fc       	retal	r12
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
8000206e:	f7 db c0 09 	bfextu	r11,r11,0x0,0x9
80002072:	99 7b       	st.w	r12[0x1c],r11
80002074:	5e fd       	retal	0
80002076:	d7 03       	nop

80002078 <usart_putchar>:
    return USART_TX_BUSY;
}


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80002078:	eb cd 40 e0 	pushm	r5-r7,lr
8000207c:	18 96       	mov	r6,r12
8000207e:	16 95       	mov	r5,r11
80002080:	e0 67 27 0f 	mov	r7,9999
80002084:	c0 68       	rjmp	80002090 <usart_putchar+0x18>
  int timeout = USART_DEFAULT_TIMEOUT;

  do
  {
    if (!timeout--) return USART_FAILURE;
80002086:	58 07       	cp.w	r7,0
80002088:	c0 31       	brne	8000208e <usart_putchar+0x16>
8000208a:	e3 cf c0 e0 	ldm	sp++,r5-r7,pc,r12=-1
8000208e:	20 17       	sub	r7,1
  } while (usart_write_char(usart, c) != USART_SUCCESS);
80002090:	0a 9b       	mov	r11,r5
80002092:	0c 9c       	mov	r12,r6
80002094:	f0 1f 00 03 	mcall	800020a0 <usart_putchar+0x28>
80002098:	cf 71       	brne	80002086 <usart_putchar+0xe>

  return USART_SUCCESS;
}
8000209a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000209e:	00 00       	add	r0,r0
800020a0:	80 00       	ld.sh	r0,r0[0x0]
800020a2:	20 62       	sub	r2,6

800020a4 <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
800020a4:	eb cd 40 c0 	pushm	r6-r7,lr
800020a8:	18 96       	mov	r6,r12
800020aa:	16 97       	mov	r7,r11
  while (*string != '\0')
800020ac:	17 8b       	ld.ub	r11,r11[0x0]
800020ae:	58 0b       	cp.w	r11,0
800020b0:	c0 80       	breq	800020c0 <usart_write_line+0x1c>
    usart_putchar(usart, *string++);
800020b2:	2f f7       	sub	r7,-1
800020b4:	0c 9c       	mov	r12,r6
800020b6:	f0 1f 00 04 	mcall	800020c4 <usart_write_line+0x20>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
800020ba:	0f 8b       	ld.ub	r11,r7[0x0]
800020bc:	58 0b       	cp.w	r11,0
800020be:	cf a1       	brne	800020b2 <usart_write_line+0xe>
800020c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020c4:	80 00       	ld.sh	r0,r0[0x0]
800020c6:	20 78       	sub	r8,7

800020c8 <usart_reset>:
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
  bool global_interrupt_enabled = cpu_irq_is_enabled();
800020c8:	e1 b8 00 00 	mfsr	r8,0x0

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
800020cc:	e6 18 00 01 	andh	r8,0x1,COH
800020d0:	c0 71       	brne	800020de <usart_reset+0x16>
800020d2:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
800020d4:	3f f8       	mov	r8,-1
800020d6:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800020d8:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
800020da:	d5 03       	csrf	0x10
800020dc:	c0 48       	rjmp	800020e4 <usart_reset+0x1c>
  bool global_interrupt_enabled = cpu_irq_is_enabled();

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
  usart->idr = 0xFFFFFFFF;
800020de:	3f f8       	mov	r8,-1
800020e0:	99 38       	st.w	r12[0xc],r8
  usart->csr;
800020e2:	78 58       	ld.w	r8,r12[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
800020e4:	30 08       	mov	r8,0
800020e6:	99 18       	st.w	r12[0x4],r8
  usart->rtor = 0;
800020e8:	99 98       	st.w	r12[0x24],r8
  usart->ttgr = 0;
800020ea:	99 a8       	st.w	r12[0x28],r8

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800020ec:	ea 68 61 0c 	mov	r8,680204
800020f0:	99 08       	st.w	r12[0x0],r8
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
800020f2:	5e fc       	retal	r12

800020f4 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800020f4:	eb cd 40 e0 	pushm	r5-r7,lr
800020f8:	18 96       	mov	r6,r12
800020fa:	16 97       	mov	r7,r11
800020fc:	14 95       	mov	r5,r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800020fe:	f0 1f 00 2f 	mcall	800021b8 <usart_init_rs232+0xc4>

  // Check input values.
  if (!opt || // Null pointer.
80002102:	58 07       	cp.w	r7,0
80002104:	c5 80       	breq	800021b4 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
80002106:	0f c8       	ld.ub	r8,r7[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80002108:	30 49       	mov	r9,4
8000210a:	f2 08 18 00 	cp.b	r8,r9
8000210e:	e0 88 00 53 	brls	800021b4 <usart_init_rs232+0xc0>
80002112:	30 99       	mov	r9,9
80002114:	f2 08 18 00 	cp.b	r8,r9
80002118:	e0 8b 00 4e 	brhi	800021b4 <usart_init_rs232+0xc0>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8000211c:	0f d9       	ld.ub	r9,r7[0x5]
8000211e:	30 78       	mov	r8,7
80002120:	f0 09 18 00 	cp.b	r9,r8
80002124:	e0 8b 00 48 	brhi	800021b4 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
80002128:	8e 39       	ld.sh	r9,r7[0x6]
8000212a:	e0 68 01 01 	mov	r8,257
8000212e:	f0 09 19 00 	cp.h	r9,r8
80002132:	e0 8b 00 41 	brhi	800021b4 <usart_init_rs232+0xc0>
      opt->channelmode > 3 ||
80002136:	ef 39 00 08 	ld.ub	r9,r7[8]
8000213a:	30 38       	mov	r8,3
8000213c:	f0 09 18 00 	cp.b	r9,r8
80002140:	e0 8b 00 3a 	brhi	800021b4 <usart_init_rs232+0xc0>
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
80002144:	0a 9a       	mov	r10,r5
80002146:	6e 0b       	ld.w	r11,r7[0x0]
80002148:	0c 9c       	mov	r12,r6
8000214a:	f0 1f 00 1d 	mcall	800021bc <usart_init_rs232+0xc8>
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000214e:	58 1c       	cp.w	r12,1
80002150:	c3 20       	breq	800021b4 <usart_init_rs232+0xc0>
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;

  if (opt->charlength == 9)
80002152:	0f c8       	ld.ub	r8,r7[0x4]
80002154:	30 99       	mov	r9,9
80002156:	f2 08 18 00 	cp.b	r8,r9
8000215a:	c0 51       	brne	80002164 <usart_init_rs232+0x70>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8000215c:	6c 18       	ld.w	r8,r6[0x4]
8000215e:	b1 b8       	sbr	r8,0x11
80002160:	8d 18       	st.w	r6[0x4],r8
80002162:	c0 68       	rjmp	8000216e <usart_init_rs232+0x7a>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
80002164:	6c 19       	ld.w	r9,r6[0x4]
80002166:	20 58       	sub	r8,5
80002168:	f3 e8 10 68 	or	r8,r9,r8<<0x6
8000216c:	8d 18       	st.w	r6[0x4],r8
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8000216e:	6c 19       	ld.w	r9,r6[0x4]
80002170:	ef 3a 00 08 	ld.ub	r10,r7[8]
80002174:	0f d8       	ld.ub	r8,r7[0x5]
80002176:	a9 78       	lsl	r8,0x9
80002178:	f1 ea 10 e8 	or	r8,r8,r10<<0xe
8000217c:	12 48       	or	r8,r9
8000217e:	8d 18       	st.w	r6[0x4],r8
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
80002180:	8e 38       	ld.sh	r8,r7[0x6]
80002182:	30 29       	mov	r9,2
80002184:	f2 08 19 00 	cp.h	r8,r9
80002188:	e0 88 00 09 	brls	8000219a <usart_init_rs232+0xa6>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8000218c:	6c 18       	ld.w	r8,r6[0x4]
8000218e:	ad b8       	sbr	r8,0xd
80002190:	8d 18       	st.w	r6[0x4],r8
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
80002192:	8e b8       	ld.uh	r8,r7[0x6]
80002194:	20 28       	sub	r8,2
80002196:	8d a8       	st.w	r6[0x28],r8
80002198:	c0 68       	rjmp	800021a4 <usart_init_rs232+0xb0>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8000219a:	6c 19       	ld.w	r9,r6[0x4]
8000219c:	5c 78       	castu.h	r8
8000219e:	f3 e8 10 c8 	or	r8,r9,r8<<0xc
800021a2:	8d 18       	st.w	r6[0x4],r8

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
800021a4:	6c 18       	ld.w	r8,r6[0x4]
800021a6:	e0 18 ff f0 	andl	r8,0xfff0
800021aa:	8d 18       	st.w	r6[0x4],r8
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
800021ac:	35 08       	mov	r8,80
800021ae:	8d 08       	st.w	r6[0x0],r8
800021b0:	e3 cf 80 e0 	ldm	sp++,r5-r7,pc,r12=0
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
800021b4:	e3 cf 90 e0 	ldm	sp++,r5-r7,pc,r12=1
800021b8:	80 00       	ld.sh	r0,r0[0x0]
800021ba:	20 c8       	sub	r8,12
800021bc:	80 00       	ld.sh	r0,r0[0x0]
800021be:	20 08       	sub	r8,0

800021c0 <sysclk_init>:

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
800021c0:	5e fc       	retal	r12
800021c2:	d7 03       	nop

800021c4 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
800021c4:	d4 01       	pushm	lr
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800021c6:	30 3b       	mov	r11,3
800021c8:	33 bc       	mov	r12,59
800021ca:	f0 1f 00 2c 	mcall	80002278 <board_init+0xb4>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800021ce:	30 3b       	mov	r11,3
800021d0:	33 cc       	mov	r12,60
800021d2:	f0 1f 00 2a 	mcall	80002278 <board_init+0xb4>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800021d6:	30 3b       	mov	r11,3
800021d8:	33 dc       	mov	r12,61
800021da:	f0 1f 00 28 	mcall	80002278 <board_init+0xb4>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800021de:	30 3b       	mov	r11,3
800021e0:	33 ec       	mov	r12,62
800021e2:	f0 1f 00 26 	mcall	80002278 <board_init+0xb4>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800021e6:	30 3b       	mov	r11,3
800021e8:	33 3c       	mov	r12,51
800021ea:	f0 1f 00 24 	mcall	80002278 <board_init+0xb4>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800021ee:	30 3b       	mov	r11,3
800021f0:	33 4c       	mov	r12,52
800021f2:	f0 1f 00 22 	mcall	80002278 <board_init+0xb4>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800021f6:	30 3b       	mov	r11,3
800021f8:	33 5c       	mov	r12,53
800021fa:	f0 1f 00 20 	mcall	80002278 <board_init+0xb4>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800021fe:	30 3b       	mov	r11,3
80002200:	33 6c       	mov	r12,54
80002202:	f0 1f 00 1e 	mcall	80002278 <board_init+0xb4>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
80002206:	30 0b       	mov	r11,0
80002208:	35 8c       	mov	r12,88
8000220a:	f0 1f 00 1c 	mcall	80002278 <board_init+0xb4>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
8000220e:	30 0b       	mov	r11,0
80002210:	35 5c       	mov	r12,85
80002212:	f0 1f 00 1a 	mcall	80002278 <board_init+0xb4>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
80002216:	30 0b       	mov	r11,0
80002218:	35 2c       	mov	r12,82
8000221a:	f0 1f 00 18 	mcall	80002278 <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
8000221e:	30 0b       	mov	r11,0
80002220:	31 4c       	mov	r12,20
80002222:	f0 1f 00 16 	mcall	80002278 <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
80002226:	30 0b       	mov	r11,0
80002228:	31 9c       	mov	r12,25
8000222a:	f0 1f 00 14 	mcall	80002278 <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
8000222e:	30 0b       	mov	r11,0
80002230:	31 ac       	mov	r12,26
80002232:	f0 1f 00 12 	mcall	80002278 <board_init+0xb4>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
80002236:	30 0b       	mov	r11,0
80002238:	31 bc       	mov	r12,27
8000223a:	f0 1f 00 10 	mcall	80002278 <board_init+0xb4>
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
8000223e:	30 4b       	mov	r11,4
80002240:	48 fc       	lddpc	r12,8000227c <board_init+0xb8>
80002242:	f0 1f 00 10 	mcall	80002280 <board_init+0xbc>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
80002246:	30 4b       	mov	r11,4
80002248:	48 fc       	lddpc	r12,80002284 <board_init+0xc0>
8000224a:	f0 1f 00 0e 	mcall	80002280 <board_init+0xbc>

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
8000224e:	30 0b       	mov	r11,0
80002250:	30 2c       	mov	r12,2
80002252:	f0 1f 00 0a 	mcall	80002278 <board_init+0xb4>
80002256:	30 0b       	mov	r11,0
80002258:	30 7c       	mov	r12,7
8000225a:	f0 1f 00 08 	mcall	80002278 <board_init+0xb4>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
8000225e:	30 2b       	mov	r11,2
80002260:	48 ac       	lddpc	r12,80002288 <board_init+0xc4>
80002262:	f0 1f 00 08 	mcall	80002280 <board_init+0xbc>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION },
		{USART_TXD_PIN, USART_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
80002266:	30 2b       	mov	r11,2
80002268:	48 9c       	lddpc	r12,8000228c <board_init+0xc8>
8000226a:	f0 1f 00 06 	mcall	80002280 <board_init+0xbc>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT0_GPIO_MAP = {
		{USART0_RXD_PIN, USART0_RXD_FUNCTION },
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
8000226e:	30 2b       	mov	r11,2
80002270:	48 8c       	lddpc	r12,80002290 <board_init+0xcc>
80002272:	f0 1f 00 04 	mcall	80002280 <board_init+0xbc>
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
80002276:	d8 02       	popm	pc
80002278:	80 00       	ld.sh	r0,r0[0x0]
8000227a:	23 e4       	sub	r4,62
8000227c:	80 00       	ld.sh	r0,r0[0x0]
8000227e:	2a 50       	sub	r0,-91
80002280:	80 00       	ld.sh	r0,r0[0x0]
80002282:	23 9c       	sub	r12,57
80002284:	80 00       	ld.sh	r0,r0[0x0]
80002286:	2a 00       	sub	r0,-96
80002288:	80 00       	ld.sh	r0,r0[0x0]
8000228a:	2a 40       	sub	r0,-92
8000228c:	80 00       	ld.sh	r0,r0[0x0]
8000228e:	2a 30       	sub	r0,-93
80002290:	80 00       	ld.sh	r0,r0[0x0]
80002292:	2a 20       	sub	r0,-94

80002294 <LED_Test>:
}


bool LED_Test(U32 leds)
{
  return Tst_bits(LED_State, leds);
80002294:	48 38       	lddpc	r8,800022a0 <LED_Test+0xc>
80002296:	70 08       	ld.w	r8,r8[0x0]
80002298:	f9 e8 00 08 	and	r8,r12,r8
}
8000229c:	5f 1c       	srne	r12
8000229e:	5e fc       	retal	r12
800022a0:	00 00       	add	r0,r0
800022a2:	00 08       	add	r8,r0

800022a4 <LED_On>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800022a4:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
800022a8:	49 18       	lddpc	r8,800022ec <LED_On+0x48>
800022aa:	70 09       	ld.w	r9,r8[0x0]
800022ac:	f9 e9 10 09 	or	r9,r12,r9
800022b0:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800022b2:	58 0c       	cp.w	r12,0
800022b4:	5e 0c       	reteq	r12
800022b6:	48 f8       	lddpc	r8,800022f0 <LED_On+0x4c>
800022b8:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
800022ba:	18 9a       	mov	r10,r12
800022bc:	5c 9a       	brev	r10
800022be:	f4 0a 12 00 	clz	r10,r10
800022c2:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
800022c4:	f4 09 15 04 	lsl	r9,r10,0x4
800022c8:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800022ca:	70 09       	ld.w	r9,r8[0x0]
800022cc:	a9 69       	lsl	r9,0x8
800022ce:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800022d2:	70 1b       	ld.w	r11,r8[0x4]
800022d4:	f3 4b 00 58 	st.w	r9[88],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800022d8:	70 1b       	ld.w	r11,r8[0x4]
800022da:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800022de:	70 1b       	ld.w	r11,r8[0x4]
800022e0:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
800022e2:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800022e6:	ce a1       	brne	800022ba <LED_On+0x16>
800022e8:	5e fc       	retal	r12
800022ea:	00 00       	add	r0,r0
800022ec:	00 00       	add	r0,r0
800022ee:	00 08       	add	r8,r0
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	2a 70       	sub	r0,-89

800022f4 <LED_Off>:
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800022f4:	f9 dc c0 08 	bfextu	r12,r12,0x0,0x8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
800022f8:	49 28       	lddpc	r8,80002340 <LED_Off+0x4c>
800022fa:	70 09       	ld.w	r9,r8[0x0]
800022fc:	f8 0a 11 ff 	rsub	r10,r12,-1
80002300:	f5 e9 00 09 	and	r9,r10,r9
80002304:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80002306:	58 0c       	cp.w	r12,0
80002308:	5e 0c       	reteq	r12
8000230a:	48 f8       	lddpc	r8,80002344 <LED_Off+0x50>
8000230c:	21 08       	sub	r8,16
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
8000230e:	18 9a       	mov	r10,r12
80002310:	5c 9a       	brev	r10
80002312:	f4 0a 12 00 	clz	r10,r10
80002316:	2f fa       	sub	r10,-1
    led_descriptor += led_shift;
80002318:	f4 09 15 04 	lsl	r9,r10,0x4
8000231c:	12 08       	add	r8,r9
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000231e:	70 09       	ld.w	r9,r8[0x0]
80002320:	a9 69       	lsl	r9,0x8
80002322:	e0 29 f0 00 	sub	r9,61440
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80002326:	70 1b       	ld.w	r11,r8[0x4]
80002328:	f3 4b 00 54 	st.w	r9[84],r11
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8000232c:	70 1b       	ld.w	r11,r8[0x4]
8000232e:	f3 4b 00 44 	st.w	r9[68],r11
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80002332:	70 1b       	ld.w	r11,r8[0x4]
80002334:	93 1b       	st.w	r9[0x4],r11
    leds >>= led_shift;
80002336:	f8 0a 0a 4c 	lsr	r12,r12,r10

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
8000233a:	ce a1       	brne	8000230e <LED_Off+0x1a>
8000233c:	5e fc       	retal	r12
8000233e:	00 00       	add	r0,r0
80002340:	00 00       	add	r0,r0
80002342:	00 08       	add	r8,r0
80002344:	80 00       	ld.sh	r0,r0[0x0]
80002346:	2a 70       	sub	r0,-89

80002348 <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002348:	f8 08 16 05 	lsr	r8,r12,0x5
8000234c:	a9 68       	lsl	r8,0x8
8000234e:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
80002352:	58 1b       	cp.w	r11,1
80002354:	c0 d0       	breq	8000236e <gpio_enable_module_pin+0x26>
80002356:	c0 63       	brcs	80002362 <gpio_enable_module_pin+0x1a>
80002358:	58 2b       	cp.w	r11,2
8000235a:	c1 00       	breq	8000237a <gpio_enable_module_pin+0x32>
8000235c:	58 3b       	cp.w	r11,3
8000235e:	c1 40       	breq	80002386 <gpio_enable_module_pin+0x3e>
80002360:	5e ff       	retal	1
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80002362:	30 19       	mov	r9,1
80002364:	f2 0c 09 49 	lsl	r9,r9,r12
80002368:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000236a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000236c:	c1 28       	rjmp	80002390 <gpio_enable_module_pin+0x48>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000236e:	30 19       	mov	r9,1
80002370:	f2 0c 09 49 	lsl	r9,r9,r12
80002374:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80002376:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002378:	c0 c8       	rjmp	80002390 <gpio_enable_module_pin+0x48>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000237a:	30 19       	mov	r9,1
8000237c:	f2 0c 09 49 	lsl	r9,r9,r12
80002380:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80002382:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80002384:	c0 68       	rjmp	80002390 <gpio_enable_module_pin+0x48>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80002386:	30 19       	mov	r9,1
80002388:	f2 0c 09 49 	lsl	r9,r9,r12
8000238c:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
8000238e:	91 99       	st.w	r8[0x24],r9
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80002390:	30 19       	mov	r9,1
80002392:	f2 0c 09 4c 	lsl	r12,r9,r12
80002396:	91 2c       	st.w	r8[0x8],r12
80002398:	5e fd       	retal	0
8000239a:	d7 03       	nop

8000239c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000239c:	d4 21       	pushm	r4-r7,lr
8000239e:	18 97       	mov	r7,r12
800023a0:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800023a2:	58 0b       	cp.w	r11,0
800023a4:	c0 31       	brne	800023aa <gpio_enable_module+0xe>
800023a6:	30 05       	mov	r5,0
800023a8:	c0 d8       	rjmp	800023c2 <gpio_enable_module+0x26>
800023aa:	30 06       	mov	r6,0
800023ac:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800023ae:	6e 1b       	ld.w	r11,r7[0x4]
800023b0:	6e 0c       	ld.w	r12,r7[0x0]
800023b2:	f0 1f 00 06 	mcall	800023c8 <gpio_enable_module+0x2c>
800023b6:	18 45       	or	r5,r12
		gpiomap++;
800023b8:	2f 87       	sub	r7,-8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800023ba:	2f f6       	sub	r6,-1
800023bc:	0c 34       	cp.w	r4,r6
800023be:	fe 9b ff f8 	brhi	800023ae <gpio_enable_module+0x12>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
800023c2:	0a 9c       	mov	r12,r5
800023c4:	d8 22       	popm	r4-r7,pc
800023c6:	00 00       	add	r0,r0
800023c8:	80 00       	ld.sh	r0,r0[0x0]
800023ca:	23 48       	sub	r8,52

800023cc <gpio_enable_gpio_pin>:
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800023cc:	f8 08 16 05 	lsr	r8,r12,0x5
800023d0:	a9 68       	lsl	r8,0x8
800023d2:	e0 28 f0 00 	sub	r8,61440
	
	gpio_port->oderc = 1 << (pin & 0x1F);
800023d6:	30 19       	mov	r9,1
800023d8:	f2 0c 09 4c 	lsl	r12,r9,r12
800023dc:	f1 4c 00 48 	st.w	r8[72],r12
	gpio_port->gpers = 1 << (pin & 0x1F);
800023e0:	91 1c       	st.w	r8[0x4],r12
}
800023e2:	5e fc       	retal	r12

800023e4 <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800023e4:	f8 08 16 05 	lsr	r8,r12,0x5
800023e8:	a9 68       	lsl	r8,0x8
800023ea:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800023ee:	16 99       	mov	r9,r11
800023f0:	e2 19 00 04 	andl	r9,0x4,COH
800023f4:	c0 70       	breq	80002402 <gpio_configure_pin+0x1e>
		gpio_port->puers = 1 << (pin & 0x1F);
800023f6:	30 19       	mov	r9,1
800023f8:	f2 0c 09 49 	lsl	r9,r9,r12
800023fc:	f1 49 00 74 	st.w	r8[116],r9
80002400:	c0 68       	rjmp	8000240c <gpio_configure_pin+0x28>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002402:	30 19       	mov	r9,1
80002404:	f2 0c 09 49 	lsl	r9,r9,r12
80002408:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
8000240c:	16 99       	mov	r9,r11
8000240e:	e2 19 00 80 	andl	r9,0x80,COH
80002412:	c2 40       	breq	8000245a <gpio_configure_pin+0x76>
		if (flags & GPIO_BOTHEDGES) {
80002414:	16 99       	mov	r9,r11
80002416:	e2 19 01 80 	andl	r9,0x180,COH
8000241a:	c0 90       	breq	8000242c <gpio_configure_pin+0x48>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000241c:	30 19       	mov	r9,1
8000241e:	f2 0c 09 49 	lsl	r9,r9,r12
80002422:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002426:	f1 49 00 b8 	st.w	r8[184],r9
8000242a:	c1 88       	rjmp	8000245a <gpio_configure_pin+0x76>
		} else if (flags & GPIO_RISING) {
8000242c:	16 99       	mov	r9,r11
8000242e:	e2 19 02 80 	andl	r9,0x280,COH
80002432:	c0 90       	breq	80002444 <gpio_configure_pin+0x60>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002434:	30 19       	mov	r9,1
80002436:	f2 0c 09 49 	lsl	r9,r9,r12
8000243a:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
8000243e:	f1 49 00 b8 	st.w	r8[184],r9
80002442:	c0 c8       	rjmp	8000245a <gpio_configure_pin+0x76>
		} else if (flags & GPIO_FALLING) {
80002444:	16 99       	mov	r9,r11
80002446:	e2 19 03 80 	andl	r9,0x380,COH
8000244a:	c0 80       	breq	8000245a <gpio_configure_pin+0x76>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000244c:	30 19       	mov	r9,1
8000244e:	f2 0c 09 49 	lsl	r9,r9,r12
80002452:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80002456:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
8000245a:	f3 db c0 01 	bfextu	r9,r11,0x0,0x1
8000245e:	c1 50       	breq	80002488 <gpio_configure_pin+0xa4>
		if (flags & GPIO_INIT_HIGH) {
80002460:	e2 1b 00 02 	andl	r11,0x2,COH
80002464:	c0 70       	breq	80002472 <gpio_configure_pin+0x8e>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80002466:	30 19       	mov	r9,1
80002468:	f2 0c 09 49 	lsl	r9,r9,r12
8000246c:	f1 49 00 54 	st.w	r8[84],r9
80002470:	c0 68       	rjmp	8000247c <gpio_configure_pin+0x98>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80002472:	30 19       	mov	r9,1
80002474:	f2 0c 09 49 	lsl	r9,r9,r12
80002478:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
8000247c:	30 19       	mov	r9,1
8000247e:	f2 0c 09 49 	lsl	r9,r9,r12
80002482:	f1 49 00 44 	st.w	r8[68],r9
80002486:	c0 68       	rjmp	80002492 <gpio_configure_pin+0xae>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002488:	30 19       	mov	r9,1
8000248a:	f2 0c 09 49 	lsl	r9,r9,r12
8000248e:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002492:	30 19       	mov	r9,1
80002494:	f2 0c 09 4c 	lsl	r12,r9,r12
80002498:	91 1c       	st.w	r8[0x4],r12
}
8000249a:	5e fc       	retal	r12

8000249c <gpio_set_pin_low>:
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000249c:	f8 08 16 05 	lsr	r8,r12,0x5
800024a0:	a9 68       	lsl	r8,0x8
800024a2:	e0 28 f0 00 	sub	r8,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800024a6:	30 19       	mov	r9,1
800024a8:	f2 0c 09 4c 	lsl	r12,r9,r12
800024ac:	f1 4c 00 58 	st.w	r8[88],r12
}
800024b0:	5e fc       	retal	r12

800024b2 <gpio_enable_pin_interrupt>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024b2:	f8 08 16 05 	lsr	r8,r12,0x5
800024b6:	a9 68       	lsl	r8,0x8
800024b8:	e0 28 f0 00 	sub	r8,61440

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
800024bc:	30 19       	mov	r9,1
800024be:	f2 0c 09 4c 	lsl	r12,r9,r12
800024c2:	f1 4c 00 c4 	st.w	r8[196],r12
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Configure the edge detector. */
	switch (mode) {
800024c6:	12 3b       	cp.w	r11,r9
800024c8:	c0 a0       	breq	800024dc <gpio_enable_pin_interrupt+0x2a>
800024ca:	c0 43       	brcs	800024d2 <gpio_enable_pin_interrupt+0x20>
800024cc:	58 2b       	cp.w	r11,2
800024ce:	c1 11       	brne	800024f0 <gpio_enable_pin_interrupt+0x3e>
800024d0:	c0 b8       	rjmp	800024e6 <gpio_enable_pin_interrupt+0x34>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800024d2:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
800024d6:	f1 4c 00 b8 	st.w	r8[184],r12
800024da:	c0 c8       	rjmp	800024f2 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
800024dc:	f1 4c 00 a4 	st.w	r8[164],r12
		gpio_port->imr1c = 1 << (pin & 0x1F);
800024e0:	f1 4c 00 b8 	st.w	r8[184],r12
800024e4:	c0 78       	rjmp	800024f2 <gpio_enable_pin_interrupt+0x40>
		break;

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
800024e6:	f1 4c 00 a8 	st.w	r8[168],r12
		gpio_port->imr1s = 1 << (pin & 0x1F);
800024ea:	f1 4c 00 b4 	st.w	r8[180],r12
800024ee:	c0 28       	rjmp	800024f2 <gpio_enable_pin_interrupt+0x40>
800024f0:	5e ff       	retal	1
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
		return(GPIO_INVALID_ARGUMENT);
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
800024f2:	f1 4c 00 94 	st.w	r8[148],r12
800024f6:	5e fd       	retal	0

800024f8 <gpio_get_pin_interrupt_flag>:
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800024f8:	f8 08 16 05 	lsr	r8,r12,0x5
800024fc:	a9 68       	lsl	r8,0x8
800024fe:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80002502:	f0 f8 00 d0 	ld.w	r8,r8[208]
80002506:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
8000250a:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8000250e:	5e fc       	retal	r12

80002510 <gpio_clear_pin_interrupt_flag>:
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80002510:	f8 08 16 05 	lsr	r8,r12,0x5
80002514:	a9 68       	lsl	r8,0x8
80002516:	e0 28 f0 00 	sub	r8,61440
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
8000251a:	30 19       	mov	r9,1
8000251c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002520:	f1 4c 00 d8 	st.w	r8[216],r12
#endif
}
80002524:	5e fc       	retal	r12

80002526 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80002526:	c0 08       	rjmp	80002526 <_unhandled_interrupt>

80002528 <INTC_register_interrupt>:
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80002528:	f6 08 16 05 	lsr	r8,r11,0x5

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000252c:	49 99       	lddpc	r9,80002590 <INTC_register_interrupt+0x68>
8000252e:	f2 08 00 39 	add	r9,r9,r8<<0x3
80002532:	f7 db c0 05 	bfextu	r11,r11,0x0,0x5
80002536:	72 19       	ld.w	r9,r9[0x4]
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
80002538:	f2 0b 09 2c 	st.w	r9[r11<<0x2],r12
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
8000253c:	58 0a       	cp.w	r10,0
8000253e:	c0 91       	brne	80002550 <INTC_register_interrupt+0x28>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80002540:	49 59       	lddpc	r9,80002594 <INTC_register_interrupt+0x6c>
80002542:	49 6a       	lddpc	r10,80002598 <INTC_register_interrupt+0x70>
80002544:	12 1a       	sub	r10,r9
80002546:	fe 79 08 00 	mov	r9,-63488
8000254a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000254e:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT1) {
80002550:	58 1a       	cp.w	r10,1
80002552:	c0 a1       	brne	80002566 <INTC_register_interrupt+0x3e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
80002554:	49 09       	lddpc	r9,80002594 <INTC_register_interrupt+0x6c>
80002556:	49 2a       	lddpc	r10,8000259c <INTC_register_interrupt+0x74>
80002558:	12 1a       	sub	r10,r9
8000255a:	bf aa       	sbr	r10,0x1e
8000255c:	fe 79 08 00 	mov	r9,-63488
80002560:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
80002564:	5e fc       	retal	r12
	} else if (int_level == AVR32_INTC_INT2) {
80002566:	58 2a       	cp.w	r10,2
80002568:	c0 a1       	brne	8000257c <INTC_register_interrupt+0x54>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000256a:	48 b9       	lddpc	r9,80002594 <INTC_register_interrupt+0x6c>
8000256c:	48 da       	lddpc	r10,800025a0 <INTC_register_interrupt+0x78>
8000256e:	12 1a       	sub	r10,r9
80002570:	bf ba       	sbr	r10,0x1f
80002572:	fe 79 08 00 	mov	r9,-63488
80002576:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000257a:	5e fc       	retal	r12
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000257c:	48 69       	lddpc	r9,80002594 <INTC_register_interrupt+0x6c>
8000257e:	48 aa       	lddpc	r10,800025a4 <INTC_register_interrupt+0x7c>
80002580:	12 1a       	sub	r10,r9
80002582:	ea 1a c0 00 	orh	r10,0xc000
80002586:	fe 79 08 00 	mov	r9,-63488
8000258a:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
8000258e:	5e fc       	retal	r12
80002590:	80 00       	ld.sh	r0,r0[0x0]
80002592:	2a f0       	sub	r0,-81
80002594:	80 00       	ld.sh	r0,r0[0x0]
80002596:	28 00       	sub	r0,-128
80002598:	80 00       	ld.sh	r0,r0[0x0]
8000259a:	29 04       	sub	r4,-112
8000259c:	80 00       	ld.sh	r0,r0[0x0]
8000259e:	29 10       	sub	r0,-111
800025a0:	80 00       	ld.sh	r0,r0[0x0]
800025a2:	29 1c       	sub	r12,-111
800025a4:	80 00       	ld.sh	r0,r0[0x0]
800025a6:	29 28       	sub	r8,-110

800025a8 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800025a8:	d4 21       	pushm	r4-r7,lr
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800025aa:	49 18       	lddpc	r8,800025ec <INTC_init_interrupts+0x44>
800025ac:	e3 b8 00 01 	mtsr	0x4,r8
800025b0:	49 0e       	lddpc	lr,800025f0 <INTC_init_interrupts+0x48>
800025b2:	30 07       	mov	r7,0
800025b4:	0e 94       	mov	r4,r7
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800025b6:	49 0c       	lddpc	r12,800025f4 <INTC_init_interrupts+0x4c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800025b8:	49 05       	lddpc	r5,800025f8 <INTC_init_interrupts+0x50>
800025ba:	10 15       	sub	r5,r8
800025bc:	fe 76 08 00 	mov	r6,-63488
800025c0:	c1 08       	rjmp	800025e0 <INTC_init_interrupts+0x38>
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800025c2:	08 98       	mov	r8,r4
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
800025c4:	7c 1b       	ld.w	r11,lr[0x4]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800025c6:	7c 0a       	ld.w	r10,lr[0x0]
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
800025c8:	f6 08 09 2c 	st.w	r11[r8<<0x2],r12
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
800025cc:	2f f8       	sub	r8,-1

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800025ce:	10 3a       	cp.w	r10,r8
800025d0:	fe 9b ff fc 	brhi	800025c8 <INTC_init_interrupts+0x20>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800025d4:	ec 07 09 25 	st.w	r6[r7<<0x2],r5
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800025d8:	2f f7       	sub	r7,-1
800025da:	2f 8e       	sub	lr,-8
800025dc:	59 47       	cp.w	r7,20
800025de:	c0 50       	breq	800025e8 <INTC_init_interrupts+0x40>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800025e0:	7c 08       	ld.w	r8,lr[0x0]
800025e2:	58 08       	cp.w	r8,0
800025e4:	ce f1       	brne	800025c2 <INTC_init_interrupts+0x1a>
800025e6:	cf 7b       	rjmp	800025d4 <INTC_init_interrupts+0x2c>
800025e8:	d8 22       	popm	r4-r7,pc
800025ea:	00 00       	add	r0,r0
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	28 00       	sub	r0,-128
800025f0:	80 00       	ld.sh	r0,r0[0x0]
800025f2:	2a f0       	sub	r0,-81
800025f4:	80 00       	ld.sh	r0,r0[0x0]
800025f6:	25 26       	sub	r6,82
800025f8:	80 00       	ld.sh	r0,r0[0x0]
800025fa:	29 04       	sub	r4,-112

800025fc <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800025fc:	fe 78 08 00 	mov	r8,-63488
80002600:	e0 69 00 83 	mov	r9,131
80002604:	f2 0c 01 0c 	sub	r12,r9,r12
80002608:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
8000260c:	f2 ca ff c0 	sub	r10,r9,-64
80002610:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002614:	58 08       	cp.w	r8,0
80002616:	c0 21       	brne	8000261a <_get_interrupt_handler+0x1e>
80002618:	5e fd       	retal	0
		? _int_handler_table[int_grp]._int_line_handler_table[32
8000261a:	f0 08 12 00 	clz	r8,r8
8000261e:	48 5a       	lddpc	r10,80002630 <_get_interrupt_handler+0x34>
80002620:	f4 09 00 39 	add	r9,r10,r9<<0x3
80002624:	f0 08 11 1f 	rsub	r8,r8,31
80002628:	72 19       	ld.w	r9,r9[0x4]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
8000262a:	f2 08 03 2c 	ld.w	r12,r9[r8<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000262e:	5e fc       	retal	r12
80002630:	80 00       	ld.sh	r0,r0[0x0]
80002632:	2a f0       	sub	r0,-81

80002634 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002634:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80002638:	fe c0 fe 38 	sub	r0,pc,-456

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
8000263c:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002640:	d5 53       	csrf	0x15
  cp      r0, r1
80002642:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002644:	31 81       	mov	r1,24
  lda.w   r2, _data_lma
80002646:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
80002648:	c0 72       	brcc	80002656 <idata_load_loop_end>
  st.d    r0++, r4
8000264a:	fe c2 fa 7a 	sub	r2,pc,-1414

8000264e <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
8000264e:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002650:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
80002652:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002654:	cf d3       	brcs	8000264e <idata_load_loop>

80002656 <idata_load_loop_end>:
  brhs    udata_clear_loop_end
80002656:	31 80       	mov	r0,24
  mov     r2, 0
80002658:	e0 61 01 08 	mov	r1,264
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
8000265c:	02 30       	cp.w	r0,r1
  cp      r0, r1
8000265e:	c0 62       	brcc	8000266a <udata_clear_loop_end>
  brlo    udata_clear_loop
80002660:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80002662:	30 03       	mov	r3,0

80002664 <udata_clear_loop>:
80002664:	a1 22       	st.d	r0++,r2
80002666:	02 30       	cp.w	r0,r1
80002668:	cf e3       	brcs	80002664 <udata_clear_loop>

8000266a <udata_clear_loop_end>:
8000266a:	fe cf ff fa 	sub	pc,pc,-6
8000266e:	d7 03       	nop

80002670 <main>:
		gpio_clear_pin_interrupt_flag(GPIO_PUSH_BUTTON_0);
	}
}

int main (void)
{
80002670:	eb cd 40 f8 	pushm	r3-r7,lr
	
	// Set OSC0 as main CPU clock (12 MHz)
	sysclk_init();
80002674:	f0 1f 00 39 	mcall	80002758 <main+0xe8>
	
	// Initialize the EVK1100
	board_init();
80002678:	f0 1f 00 39 	mcall	8000275c <main+0xec>
	
	
	gpio_enable_gpio_pin(LED1_GPIO);
8000267c:	33 cc       	mov	r12,60
8000267e:	f0 1f 00 39 	mcall	80002760 <main+0xf0>
	gpio_configure_pin(LED1_GPIO, GPIO_DIR_OUTPUT);
80002682:	30 1b       	mov	r11,1
80002684:	33 cc       	mov	r12,60
80002686:	f0 1f 00 38 	mcall	80002764 <main+0xf4>
	
	
	
	// Initialize interrupt vector table support.
	irq_initialize_vectors();
8000268a:	f0 1f 00 38 	mcall	80002768 <main+0xf8>

	//Enable pin interrupts
	gpio_enable_pin_interrupt(GPIO_PUSH_BUTTON_0, GPIO_RISING_EDGE);
8000268e:	30 1b       	mov	r11,1
80002690:	35 8c       	mov	r12,88
80002692:	f0 1f 00 37 	mcall	8000276c <main+0xfc>

	//Initialize interrupt controller
	INTC_init_interrupts ();
80002696:	f0 1f 00 35 	mcall	80002768 <main+0xf8>

	//Set interrupt handler
	INTC_register_interrupt(&int_handler,(AVR32_GPIO_IRQ_0+88/8), AVR32_INTC_INT0);
8000269a:	30 0a       	mov	r10,0
8000269c:	34 bb       	mov	r11,75
8000269e:	4b 5c       	lddpc	r12,80002770 <main+0x100>
800026a0:	f0 1f 00 35 	mcall	80002774 <main+0x104>

	// Enable global interrupts
	cpu_irq_enable();
800026a4:	d5 03       	csrf	0x10
		.stopbits		= USART_1_STOPBIT,
		.channelmode	= USART_NORMAL_CHMODE
	};
	
	// Assign GPIO
	gpio_enable_module(	USART_GPIO_MAP,
800026a6:	30 2b       	mov	r11,2
800026a8:	4b 4c       	lddpc	r12,80002778 <main+0x108>
800026aa:	f0 1f 00 35 	mcall	8000277c <main+0x10c>
	sizeof(USART_GPIO_MAP) / sizeof(USART_GPIO_MAP[0]) );
	
	// Initialize USART
	usart_init_rs232(USART, &usart_options, sysclk_get_pba_hz());
800026ae:	e0 7a c2 00 	mov	r10,115200
800026b2:	4b 4b       	lddpc	r11,80002780 <main+0x110>
800026b4:	fe 7c 18 00 	mov	r12,-59392
800026b8:	f0 1f 00 33 	mcall	80002784 <main+0x114>
	gpio_set_pin_low(LED1_GPIO);
800026bc:	33 cc       	mov	r12,60
800026be:	f0 1f 00 33 	mcall	80002788 <main+0x118>
	
	
	//Initial state
	LED_On(LED0);
800026c2:	30 1c       	mov	r12,1
800026c4:	f0 1f 00 32 	mcall	8000278c <main+0x11c>
	LED_Off(LED1);
800026c8:	30 2c       	mov	r12,2
800026ca:	f0 1f 00 32 	mcall	80002790 <main+0x120>
	
	while(true){
		if (LED_Test(LED1))
800026ce:	30 26       	mov	r6,2
		usart_write_line(USART, "LED2 is on\n");
800026d0:	4b 14       	lddpc	r4,80002794 <main+0x124>
800026d2:	fe 75 18 00 	mov	r5,-59392
		delay_ms(500);
		if (LED_Test(LED0))
800026d6:	30 17       	mov	r7,1
		usart_write_line(USART, "LED1 is on\n");
800026d8:	4b 03       	lddpc	r3,80002798 <main+0x128>
	//Initial state
	LED_On(LED0);
	LED_Off(LED1);
	
	while(true){
		if (LED_Test(LED1))
800026da:	0c 9c       	mov	r12,r6
800026dc:	f0 1f 00 30 	mcall	8000279c <main+0x12c>
800026e0:	c0 50       	breq	800026ea <main+0x7a>
		usart_write_line(USART, "LED2 is on\n");
800026e2:	08 9b       	mov	r11,r4
800026e4:	0a 9c       	mov	r12,r5
800026e6:	f0 1f 00 2f 	mcall	800027a0 <main+0x130>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800026ea:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800026ee:	e0 69 e1 00 	mov	r9,57600
800026f2:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800026f6:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800026fa:	14 38       	cp.w	r8,r10
800026fc:	e0 88 00 08 	brls	8000270c <main+0x9c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002700:	12 38       	cp.w	r8,r9
80002702:	fe 98 ff fa 	brls	800026f6 <main+0x86>
80002706:	12 3a       	cp.w	r10,r9
80002708:	c2 33       	brcs	8000274e <main+0xde>
8000270a:	cf 6b       	rjmp	800026f6 <main+0x86>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000270c:	12 38       	cp.w	r8,r9
8000270e:	e0 8b 00 20 	brhi	8000274e <main+0xde>
80002712:	12 3a       	cp.w	r10,r9
80002714:	c1 d3       	brcs	8000274e <main+0xde>
80002716:	cf 0b       	rjmp	800026f6 <main+0x86>
		delay_ms(500);
		if (LED_Test(LED0))
		usart_write_line(USART, "LED1 is on\n");
80002718:	06 9b       	mov	r11,r3
8000271a:	0a 9c       	mov	r12,r5
8000271c:	f0 1f 00 21 	mcall	800027a0 <main+0x130>
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002720:	e1 b8 00 42 	mfsr	r8,0x108
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002724:	e0 69 e1 00 	mov	r9,57600
80002728:	f0 09 00 0a 	add	r10,r8,r9
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000272c:	e1 b9 00 42 	mfsr	r9,0x108
  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
    return true;

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002730:	14 38       	cp.w	r8,r10
80002732:	e0 88 00 08 	brls	80002742 <main+0xd2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002736:	12 38       	cp.w	r8,r9
80002738:	fe 98 ff fa 	brls	8000272c <main+0xbc>
8000273c:	12 3a       	cp.w	r10,r9
8000273e:	cc e3       	brcs	800026da <main+0x6a>
80002740:	cf 6b       	rjmp	8000272c <main+0xbc>
    }
    return false;
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002742:	12 38       	cp.w	r8,r9
80002744:	fe 9b ff cb 	brhi	800026da <main+0x6a>
80002748:	12 3a       	cp.w	r10,r9
8000274a:	cc 83       	brcs	800026da <main+0x6a>
8000274c:	cf 0b       	rjmp	8000272c <main+0xbc>
	
	while(true){
		if (LED_Test(LED1))
		usart_write_line(USART, "LED2 is on\n");
		delay_ms(500);
		if (LED_Test(LED0))
8000274e:	0e 9c       	mov	r12,r7
80002750:	f0 1f 00 13 	mcall	8000279c <main+0x12c>
80002754:	ce 60       	breq	80002720 <main+0xb0>
80002756:	ce 1b       	rjmp	80002718 <main+0xa8>
80002758:	80 00       	ld.sh	r0,r0[0x0]
8000275a:	21 c0       	sub	r0,28
8000275c:	80 00       	ld.sh	r0,r0[0x0]
8000275e:	21 c4       	sub	r4,28
80002760:	80 00       	ld.sh	r0,r0[0x0]
80002762:	23 cc       	sub	r12,60
80002764:	80 00       	ld.sh	r0,r0[0x0]
80002766:	23 e4       	sub	r4,62
80002768:	80 00       	ld.sh	r0,r0[0x0]
8000276a:	25 a8       	sub	r8,90
8000276c:	80 00       	ld.sh	r0,r0[0x0]
8000276e:	24 b2       	sub	r2,75
80002770:	80 00       	ld.sh	r0,r0[0x0]
80002772:	27 a4       	sub	r4,122
80002774:	80 00       	ld.sh	r0,r0[0x0]
80002776:	25 28       	sub	r8,82
80002778:	80 00       	ld.sh	r0,r0[0x0]
8000277a:	2b c0       	sub	r0,-68
8000277c:	80 00       	ld.sh	r0,r0[0x0]
8000277e:	23 9c       	sub	r12,57
80002780:	00 00       	add	r0,r0
80002782:	00 0c       	add	r12,r0
80002784:	80 00       	ld.sh	r0,r0[0x0]
80002786:	20 f4       	sub	r4,15
80002788:	80 00       	ld.sh	r0,r0[0x0]
8000278a:	24 9c       	sub	r12,73
8000278c:	80 00       	ld.sh	r0,r0[0x0]
8000278e:	22 a4       	sub	r4,42
80002790:	80 00       	ld.sh	r0,r0[0x0]
80002792:	22 f4       	sub	r4,47
80002794:	80 00       	ld.sh	r0,r0[0x0]
80002796:	2b 90       	sub	r0,-71
80002798:	80 00       	ld.sh	r0,r0[0x0]
8000279a:	2b 9c       	sub	r12,-71
8000279c:	80 00       	ld.sh	r0,r0[0x0]
8000279e:	22 94       	sub	r4,41
800027a0:	80 00       	ld.sh	r0,r0[0x0]
800027a2:	20 a4       	sub	r4,10

800027a4 <int_handler>:

//Interrupt routine for switch PB0

__attribute__((__interrupt__))
static void int_handler (void)
{
800027a4:	d4 01       	pushm	lr
	if(gpio_get_pin_interrupt_flag(GPIO_PUSH_BUTTON_0))
800027a6:	35 8c       	mov	r12,88
800027a8:	f0 1f 00 0a 	mcall	800027d0 <int_handler+0x2c>
800027ac:	c0 f0       	breq	800027ca <int_handler+0x26>
	{
		LED_On(LED1);
800027ae:	30 2c       	mov	r12,2
800027b0:	f0 1f 00 09 	mcall	800027d4 <int_handler+0x30>
		LED_Off(LED0);
800027b4:	30 1c       	mov	r12,1
800027b6:	f0 1f 00 09 	mcall	800027d8 <int_handler+0x34>
		usart_write_line(USART, "This is PB0 interrupt \n");
800027ba:	48 9b       	lddpc	r11,800027dc <int_handler+0x38>
800027bc:	fe 7c 18 00 	mov	r12,-59392
800027c0:	f0 1f 00 08 	mcall	800027e0 <int_handler+0x3c>
		gpio_clear_pin_interrupt_flag(GPIO_PUSH_BUTTON_0);
800027c4:	35 8c       	mov	r12,88
800027c6:	f0 1f 00 08 	mcall	800027e4 <int_handler+0x40>
	}
}
800027ca:	d4 02       	popm	lr
800027cc:	d6 03       	rete
800027ce:	00 00       	add	r0,r0
800027d0:	80 00       	ld.sh	r0,r0[0x0]
800027d2:	24 f8       	sub	r8,79
800027d4:	80 00       	ld.sh	r0,r0[0x0]
800027d6:	22 a4       	sub	r4,42
800027d8:	80 00       	ld.sh	r0,r0[0x0]
800027da:	22 f4       	sub	r4,47
800027dc:	80 00       	ld.sh	r0,r0[0x0]
800027de:	2b a8       	sub	r8,-70
800027e0:	80 00       	ld.sh	r0,r0[0x0]
800027e2:	20 a4       	sub	r4,10
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	25 10       	sub	r0,81

Disassembly of section .exception:

80002800 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002800:	c0 08       	rjmp	80002800 <_evba>
	...

80002804 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002804:	c0 08       	rjmp	80002804 <_handle_TLB_Multiple_Hit>
	...

80002808 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002808:	c0 08       	rjmp	80002808 <_handle_Bus_Error_Data_Fetch>
	...

8000280c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000280c:	c0 08       	rjmp	8000280c <_handle_Bus_Error_Instruction_Fetch>
	...

80002810 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002810:	c0 08       	rjmp	80002810 <_handle_NMI>
	...

80002814 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002814:	c0 08       	rjmp	80002814 <_handle_Instruction_Address>
	...

80002818 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002818:	c0 08       	rjmp	80002818 <_handle_ITLB_Protection>
	...

8000281c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000281c:	c0 08       	rjmp	8000281c <_handle_Breakpoint>
	...

80002820 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002820:	c0 08       	rjmp	80002820 <_handle_Illegal_Opcode>
	...

80002824 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002824:	c0 08       	rjmp	80002824 <_handle_Unimplemented_Instruction>
	...

80002828 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002828:	c0 08       	rjmp	80002828 <_handle_Privilege_Violation>
	...

8000282c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000282c:	c0 08       	rjmp	8000282c <_handle_Floating_Point>
	...

80002830 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002830:	c0 08       	rjmp	80002830 <_handle_Coprocessor_Absent>
	...

80002834 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002834:	c0 08       	rjmp	80002834 <_handle_Data_Address_Read>
	...

80002838 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002838:	c0 08       	rjmp	80002838 <_handle_Data_Address_Write>
	...

8000283c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000283c:	c0 08       	rjmp	8000283c <_handle_DTLB_Protection_Read>
	...

80002840 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002840:	c0 08       	rjmp	80002840 <_handle_DTLB_Protection_Write>
	...

80002844 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002844:	c0 08       	rjmp	80002844 <_handle_DTLB_Modified>
	...

80002850 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002850:	c0 08       	rjmp	80002850 <_handle_ITLB_Miss>
	...

80002860 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002860:	c0 08       	rjmp	80002860 <_handle_DTLB_Miss_Read>
	...

80002870 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002870:	c0 08       	rjmp	80002870 <_handle_DTLB_Miss_Write>
	...

80002900 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002900:	c0 08       	rjmp	80002900 <_handle_Supervisor_Call>
80002902:	d7 03       	nop

80002904 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002904:	30 0c       	mov	r12,0
80002906:	c7 be       	rcall	800025fc <_get_interrupt_handler>
80002908:	58 0c       	cp.w	r12,0
8000290a:	f8 0f 17 10 	movne	pc,r12
8000290e:	d6 03       	rete

80002910 <_int1>:
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002910:	30 1c       	mov	r12,1
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002912:	c7 5e       	rcall	800025fc <_get_interrupt_handler>
80002914:	58 0c       	cp.w	r12,0
80002916:	f8 0f 17 10 	movne	pc,r12
8000291a:	d6 03       	rete

8000291c <_int2>:
8000291c:	30 2c       	mov	r12,2
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000291e:	c6 fe       	rcall	800025fc <_get_interrupt_handler>
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002920:	58 0c       	cp.w	r12,0
80002922:	f8 0f 17 10 	movne	pc,r12
80002926:	d6 03       	rete

80002928 <_int3>:
80002928:	30 3c       	mov	r12,3
8000292a:	c6 9e       	rcall	800025fc <_get_interrupt_handler>
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000292c:	58 0c       	cp.w	r12,0
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000292e:	f8 0f 17 10 	movne	pc,r12
80002932:	d6 03       	rete
80002934:	d7 03       	nop
80002936:	d7 03       	nop
80002938:	d7 03       	nop
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000293a:	d7 03       	nop
8000293c:	d7 03       	nop
8000293e:	d7 03       	nop
80002940:	d7 03       	nop
80002942:	d7 03       	nop
80002944:	d7 03       	nop
80002946:	d7 03       	nop
80002948:	d7 03       	nop
8000294a:	d7 03       	nop
8000294c:	d7 03       	nop
8000294e:	d7 03       	nop
80002950:	d7 03       	nop
80002952:	d7 03       	nop
80002954:	d7 03       	nop
80002956:	d7 03       	nop
80002958:	d7 03       	nop
8000295a:	d7 03       	nop
8000295c:	d7 03       	nop
8000295e:	d7 03       	nop
80002960:	d7 03       	nop
80002962:	d7 03       	nop
80002964:	d7 03       	nop
80002966:	d7 03       	nop
80002968:	d7 03       	nop
8000296a:	d7 03       	nop
8000296c:	d7 03       	nop
8000296e:	d7 03       	nop
80002970:	d7 03       	nop
80002972:	d7 03       	nop
80002974:	d7 03       	nop
80002976:	d7 03       	nop
80002978:	d7 03       	nop
8000297a:	d7 03       	nop
8000297c:	d7 03       	nop
8000297e:	d7 03       	nop
80002980:	d7 03       	nop
80002982:	d7 03       	nop
80002984:	d7 03       	nop
80002986:	d7 03       	nop
80002988:	d7 03       	nop
8000298a:	d7 03       	nop
8000298c:	d7 03       	nop
8000298e:	d7 03       	nop
80002990:	d7 03       	nop
80002992:	d7 03       	nop
80002994:	d7 03       	nop
80002996:	d7 03       	nop
80002998:	d7 03       	nop
8000299a:	d7 03       	nop
8000299c:	d7 03       	nop
8000299e:	d7 03       	nop
800029a0:	d7 03       	nop
800029a2:	d7 03       	nop
800029a4:	d7 03       	nop
800029a6:	d7 03       	nop
800029a8:	d7 03       	nop
800029aa:	d7 03       	nop
800029ac:	d7 03       	nop
800029ae:	d7 03       	nop
800029b0:	d7 03       	nop
800029b2:	d7 03       	nop
800029b4:	d7 03       	nop
800029b6:	d7 03       	nop
800029b8:	d7 03       	nop
800029ba:	d7 03       	nop
800029bc:	d7 03       	nop
800029be:	d7 03       	nop
800029c0:	d7 03       	nop
800029c2:	d7 03       	nop
800029c4:	d7 03       	nop
800029c6:	d7 03       	nop
800029c8:	d7 03       	nop
800029ca:	d7 03       	nop
800029cc:	d7 03       	nop
800029ce:	d7 03       	nop
800029d0:	d7 03       	nop
800029d2:	d7 03       	nop
800029d4:	d7 03       	nop
800029d6:	d7 03       	nop
800029d8:	d7 03       	nop
800029da:	d7 03       	nop
800029dc:	d7 03       	nop
800029de:	d7 03       	nop
800029e0:	d7 03       	nop
800029e2:	d7 03       	nop
800029e4:	d7 03       	nop
800029e6:	d7 03       	nop
800029e8:	d7 03       	nop
800029ea:	d7 03       	nop
800029ec:	d7 03       	nop
800029ee:	d7 03       	nop
800029f0:	d7 03       	nop
800029f2:	d7 03       	nop
800029f4:	d7 03       	nop
800029f6:	d7 03       	nop
800029f8:	d7 03       	nop
800029fa:	d7 03       	nop
800029fc:	d7 03       	nop
800029fe:	d7 03       	nop
