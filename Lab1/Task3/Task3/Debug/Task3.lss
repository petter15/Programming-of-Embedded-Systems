
Task3.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000079e8  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80009a00  80009a00  00009e00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       000006c8  80009c00  80009c00  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         00000508  00000008  8000a2c8  0000a808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000150  00000510  00000510  00000000  2**2
                  ALLOC
  8 .heap         0000e9a0  00000660  00000660  00000000  2**0
                  ALLOC
  9 .comment      00000030  00000000  00000000  0000ad10  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00000c08  00000000  00000000  0000ad40  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubnames 00001513  00000000  00000000  0000b948  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   0001c383  00000000  00000000  0000ce5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004937  00000000  00000000  000291de  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ccd2  00000000  00000000  0002db15  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001f20  00000000  00000000  0003a7e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003ab3  00000000  00000000  0003c708  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000091d7  00000000  00000000  000401bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macinfo 0076def5  00000000  00000000  00049392  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 20 .debug_ranges 00000cb0  00000000  00000000  007b7288  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf c3 ac 	sub	pc,pc,-15444

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf e3 b0 	sub	pc,pc,-7248

Disassembly of section .text:

80002008 <dip204_init>:
80002008:	eb cd 40 8f 	pushm	r0-r3,r7,lr


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
8000200c:	1a 97       	mov	r7,sp
8000200e:	fa cd 01 ac 	sub	sp,sp,428
80002012:	ef 4c fe b8 	st.w	r7[-328],r12
80002016:	16 98       	mov	r8,r11
80002018:	ef 68 fe b4 	st.b	r7[-332],r8
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
8000201c:	ee f8 fe b8 	ld.w	r8,r7[-328]
80002020:	58 18       	cp.w	r8,1
80002022:	c6 41       	brne	800020ea <dip204_init+0xe2>
  {
    channel_id = DIP204_PWM_CHANNEL;
80002024:	fe f9 0a 94 	ld.w	r9,pc[2708]
80002028:	30 68       	mov	r8,6
8000202a:	93 08       	st.w	r9[0x0],r8
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
8000202c:	30 2b       	mov	r11,2
8000202e:	33 2c       	mov	r12,50
80002030:	f0 1f 02 a3 	mcall	80002abc <dip204_init+0xab4>

    // PWM controller configuration
    pwm_opt.diva=0;
80002034:	30 08       	mov	r8,0
80002036:	ef 48 ff 14 	st.w	r7[-236],r8
    pwm_opt.divb=0;
8000203a:	30 08       	mov	r8,0
8000203c:	ef 48 ff 10 	st.w	r7[-240],r8
    pwm_opt.prea=0;
80002040:	30 08       	mov	r8,0
80002042:	ef 48 ff 1c 	st.w	r7[-228],r8
    pwm_opt.preb=0;
80002046:	30 08       	mov	r8,0
80002048:	ef 48 ff 18 	st.w	r7[-232],r8

    pwm_init(&pwm_opt);
8000204c:	ee c8 00 f0 	sub	r8,r7,240
80002050:	10 9c       	mov	r12,r8
80002052:	f0 1f 02 9c 	mcall	80002ac0 <dip204_init+0xab8>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
80002056:	ef 39 fe b4 	ld.ub	r9,r7[-332]
8000205a:	30 08       	mov	r8,0
8000205c:	f0 09 18 00 	cp.b	r9,r8
80002060:	c0 30       	breq	80002066 <dip204_init+0x5e>
80002062:	33 18       	mov	r8,49
80002064:	c0 28       	rjmp	80002068 <dip204_init+0x60>
80002066:	30 18       	mov	r8,1
80002068:	fe f9 0a 5c 	ld.w	r9,pc[2652]
8000206c:	b2 08       	st.h	r9[0x0],r8
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
8000206e:	fe fa 0a 5a 	ld.w	r10,pc[2650]
80002072:	74 08       	ld.w	r8,r10[0x0]
80002074:	30 09       	mov	r9,0
80002076:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
8000207a:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
8000207c:	fe fa 0a 4c 	ld.w	r10,pc[2636]
80002080:	74 08       	ld.w	r8,r10[0x0]
80002082:	30 09       	mov	r9,0
80002084:	f1 d9 d1 21 	bfins	r8,r9,0x9,0x1
80002088:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
8000208a:	fe fa 0a 3e 	ld.w	r10,pc[2622]
8000208e:	74 08       	ld.w	r8,r10[0x0]
80002090:	30 19       	mov	r9,1
80002092:	f1 d9 d1 41 	bfins	r8,r9,0xa,0x1
80002096:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
80002098:	fe fa 0a 30 	ld.w	r10,pc[2608]
8000209c:	74 08       	ld.w	r8,r10[0x0]
8000209e:	30 89       	mov	r9,8
800020a0:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
800020a4:	95 08       	st.w	r10[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
800020a6:	fe f8 0a 1e 	ld.w	r8,pc[2590]
800020aa:	90 08       	ld.sh	r8,r8[0x0]
800020ac:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800020b0:	fe f8 0a 18 	ld.w	r8,pc[2584]
800020b4:	91 19       	st.w	r8[0x4],r9
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
800020b6:	fe f9 0a 12 	ld.w	r9,pc[2578]
800020ba:	33 28       	mov	r8,50
800020bc:	93 28       	st.w	r9[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
800020be:	fe f9 0a 0a 	ld.w	r9,pc[2570]
800020c2:	30 08       	mov	r8,0
800020c4:	93 48       	st.w	r9[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
800020c6:	fe f8 09 f2 	ld.w	r8,pc[2546]
800020ca:	70 08       	ld.w	r8,r8[0x0]
800020cc:	fe fb 09 fc 	ld.w	r11,pc[2556]
800020d0:	10 9c       	mov	r12,r8
800020d2:	f0 1f 02 7f 	mcall	80002acc <dip204_init+0xac4>
    // start PWM
    pwm_start_channels(1 << channel_id);
800020d6:	fe f8 09 e2 	ld.w	r8,pc[2530]
800020da:	70 09       	ld.w	r9,r8[0x0]
800020dc:	30 18       	mov	r8,1
800020de:	f0 09 09 48 	lsl	r8,r8,r9
800020e2:	10 9c       	mov	r12,r8
800020e4:	f0 1f 02 7b 	mcall	80002ad0 <dip204_init+0xac8>
800020e8:	c0 e8       	rjmp	80002104 <dip204_init+0xfc>
  }
  else
  {
    if (backlight_on)
800020ea:	ef 39 fe b4 	ld.ub	r9,r7[-332]
800020ee:	30 08       	mov	r8,0
800020f0:	f0 09 18 00 	cp.b	r9,r8
800020f4:	c0 50       	breq	800020fe <dip204_init+0xf6>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
800020f6:	33 2c       	mov	r12,50
800020f8:	f0 1f 02 77 	mcall	80002ad4 <dip204_init+0xacc>
800020fc:	c0 48       	rjmp	80002104 <dip204_init+0xfc>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
800020fe:	33 2c       	mov	r12,50
80002100:	f0 1f 02 76 	mcall	80002ad8 <dip204_init+0xad0>
80002104:	31 48       	mov	r8,20
80002106:	ef 48 ff 24 	st.w	r7[-220],r8
8000210a:	e0 68 1b 00 	mov	r8,6912
8000210e:	ea 18 00 b7 	orh	r8,0xb7
80002112:	ef 48 ff 20 	st.w	r7[-224],r8
80002116:	ee f8 ff 24 	ld.w	r8,r7[-220]
8000211a:	ef 48 ff 2c 	st.w	r7[-212],r8
8000211e:	ee f8 ff 20 	ld.w	r8,r7[-224]
80002122:	ef 48 ff 28 	st.w	r7[-216],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002126:	ee f0 ff 2c 	ld.w	r0,r7[-212]
8000212a:	30 01       	mov	r1,0
8000212c:	ee f2 ff 28 	ld.w	r2,r7[-216]
80002130:	30 03       	mov	r3,0
80002132:	e2 02 02 49 	mul	r9,r1,r2
80002136:	e6 00 02 48 	mul	r8,r3,r0
8000213a:	10 09       	add	r9,r8
8000213c:	e0 02 06 4a 	mulu.d	r10,r0,r2
80002140:	16 09       	add	r9,r11
80002142:	12 9b       	mov	r11,r9
80002144:	e0 68 03 e7 	mov	r8,999
80002148:	30 09       	mov	r9,0
8000214a:	10 0a       	add	r10,r8
8000214c:	f6 09 00 4b 	adc	r11,r11,r9
80002150:	e0 68 03 e8 	mov	r8,1000
80002154:	30 09       	mov	r9,0
80002156:	f0 1f 02 62 	mcall	80002adc <dip204_init+0xad4>
8000215a:	14 98       	mov	r8,r10
8000215c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000215e:	ef 48 ff 34 	st.w	r7[-204],r8
80002162:	ee c8 01 44 	sub	r8,r7,324
80002166:	ef 48 ff 30 	st.w	r7[-208],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000216a:	e1 b8 00 42 	mfsr	r8,0x108
8000216e:	10 99       	mov	r9,r8
80002170:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002174:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002176:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000217a:	70 09       	ld.w	r9,r8[0x0]
8000217c:	ee f8 ff 34 	ld.w	r8,r7[-204]
80002180:	10 09       	add	r9,r8
80002182:	ee f8 ff 30 	ld.w	r8,r7[-208]
80002186:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002188:	ee f9 ff 30 	ld.w	r9,r7[-208]
8000218c:	30 08       	mov	r8,0
8000218e:	f3 68 00 08 	st.b	r9[8],r8
80002192:	ee c8 01 44 	sub	r8,r7,324
80002196:	ef 48 ff 38 	st.w	r7[-200],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000219a:	e1 b8 00 42 	mfsr	r8,0x108
8000219e:	ef 48 ff 3c 	st.w	r7[-196],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800021a2:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021a6:	f1 39 00 08 	ld.ub	r9,r8[8]
800021aa:	30 28       	mov	r8,2
800021ac:	f0 09 18 00 	cp.b	r9,r8
800021b0:	c0 31       	brne	800021b6 <dip204_init+0x1ae>
    return false;
800021b2:	30 08       	mov	r8,0
800021b4:	c4 38       	rjmp	8000223a <dip204_init+0x232>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800021b6:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021ba:	f1 39 00 08 	ld.ub	r9,r8[8]
800021be:	30 18       	mov	r8,1
800021c0:	f0 09 18 00 	cp.b	r9,r8
800021c4:	c0 31       	brne	800021ca <dip204_init+0x1c2>
    return true;
800021c6:	30 18       	mov	r8,1
800021c8:	c3 98       	rjmp	8000223a <dip204_init+0x232>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800021ca:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021ce:	70 09       	ld.w	r9,r8[0x0]
800021d0:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021d4:	70 18       	ld.w	r8,r8[0x4]
800021d6:	10 39       	cp.w	r9,r8
800021d8:	e0 88 00 1a 	brls	8000220c <dip204_init+0x204>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800021dc:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021e0:	70 09       	ld.w	r9,r8[0x0]
800021e2:	ee f8 ff 3c 	ld.w	r8,r7[-196]
800021e6:	12 38       	cp.w	r8,r9
800021e8:	c1 02       	brcc	80002208 <dip204_init+0x200>
800021ea:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021ee:	70 19       	ld.w	r9,r8[0x4]
800021f0:	ee f8 ff 3c 	ld.w	r8,r7[-196]
800021f4:	12 38       	cp.w	r8,r9
800021f6:	e0 88 00 09 	brls	80002208 <dip204_init+0x200>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800021fa:	ee f9 ff 38 	ld.w	r9,r7[-200]
800021fe:	30 18       	mov	r8,1
80002200:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002204:	30 18       	mov	r8,1
80002206:	c1 a8       	rjmp	8000223a <dip204_init+0x232>
    }
    return false;
80002208:	30 08       	mov	r8,0
8000220a:	c1 88       	rjmp	8000223a <dip204_init+0x232>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000220c:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002210:	70 09       	ld.w	r9,r8[0x0]
80002212:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002216:	12 38       	cp.w	r8,r9
80002218:	c0 93       	brcs	8000222a <dip204_init+0x222>
8000221a:	ee f8 ff 38 	ld.w	r8,r7[-200]
8000221e:	70 19       	ld.w	r9,r8[0x4]
80002220:	ee f8 ff 3c 	ld.w	r8,r7[-196]
80002224:	12 38       	cp.w	r8,r9
80002226:	e0 88 00 09 	brls	80002238 <dip204_init+0x230>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000222a:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000222e:	30 18       	mov	r8,1
80002230:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002234:	30 18       	mov	r8,1
80002236:	c0 28       	rjmp	8000223a <dip204_init+0x232>
    }
    return false;
80002238:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000223a:	58 08       	cp.w	r8,0
8000223c:	ca b0       	breq	80002192 <dip204_init+0x18a>
    }
  }
  // delay for power on
  delay_ms(20);
  // select the LCD chip
  dip204_select();
8000223e:	f0 1f 02 29 	mcall	80002ae0 <dip204_init+0xad8>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002242:	e0 6c 00 f8 	mov	r12,248
80002246:	f0 1f 02 28 	mcall	80002ae4 <dip204_init+0xadc>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
8000224a:	33 4c       	mov	r12,52
8000224c:	f0 1f 02 26 	mcall	80002ae4 <dip204_init+0xadc>
80002250:	30 18       	mov	r8,1
80002252:	ef 48 ff 44 	st.w	r7[-188],r8
80002256:	e0 68 1b 00 	mov	r8,6912
8000225a:	ea 18 00 b7 	orh	r8,0xb7
8000225e:	ef 48 ff 40 	st.w	r7[-192],r8
80002262:	ee f8 ff 44 	ld.w	r8,r7[-188]
80002266:	ef 48 ff 4c 	st.w	r7[-180],r8
8000226a:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000226e:	ef 48 ff 48 	st.w	r7[-184],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002272:	ee fc ff 4c 	ld.w	r12,r7[-180]
80002276:	ef 4c fe 60 	st.w	r7[-416],r12
8000227a:	30 0b       	mov	r11,0
8000227c:	ef 4b fe 5c 	st.w	r7[-420],r11
80002280:	ee fa ff 48 	ld.w	r10,r7[-184]
80002284:	ef 4a fe 58 	st.w	r7[-424],r10
80002288:	30 09       	mov	r9,0
8000228a:	ef 49 fe 54 	st.w	r7[-428],r9
8000228e:	ee f9 fe 5c 	ld.w	r9,r7[-420]
80002292:	ee f8 fe 58 	ld.w	r8,r7[-424]
80002296:	b1 39       	mul	r9,r8
80002298:	ee f8 fe 54 	ld.w	r8,r7[-428]
8000229c:	ee fc fe 60 	ld.w	r12,r7[-416]
800022a0:	b9 38       	mul	r8,r12
800022a2:	10 09       	add	r9,r8
800022a4:	ee f8 fe 60 	ld.w	r8,r7[-416]
800022a8:	ee fc fe 58 	ld.w	r12,r7[-424]
800022ac:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800022b0:	16 09       	add	r9,r11
800022b2:	12 9b       	mov	r11,r9
800022b4:	e0 68 03 e7 	mov	r8,999
800022b8:	30 09       	mov	r9,0
800022ba:	10 0a       	add	r10,r8
800022bc:	f6 09 00 4b 	adc	r11,r11,r9
800022c0:	e0 68 03 e8 	mov	r8,1000
800022c4:	30 09       	mov	r9,0
800022c6:	f0 1f 02 06 	mcall	80002adc <dip204_init+0xad4>
800022ca:	14 98       	mov	r8,r10
800022cc:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800022ce:	ef 48 ff 54 	st.w	r7[-172],r8
800022d2:	ee c8 01 38 	sub	r8,r7,312
800022d6:	ef 48 ff 50 	st.w	r7[-176],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022da:	e1 b8 00 42 	mfsr	r8,0x108
800022de:	10 99       	mov	r9,r8
800022e0:	ee f8 ff 50 	ld.w	r8,r7[-176]
800022e4:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800022e6:	ee f8 ff 50 	ld.w	r8,r7[-176]
800022ea:	70 09       	ld.w	r9,r8[0x0]
800022ec:	ee f8 ff 54 	ld.w	r8,r7[-172]
800022f0:	10 09       	add	r9,r8
800022f2:	ee f8 ff 50 	ld.w	r8,r7[-176]
800022f6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800022f8:	ee f9 ff 50 	ld.w	r9,r7[-176]
800022fc:	30 08       	mov	r8,0
800022fe:	f3 68 00 08 	st.b	r9[8],r8
80002302:	ee c8 01 38 	sub	r8,r7,312
80002306:	ef 48 ff 58 	st.w	r7[-168],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000230a:	e1 b8 00 42 	mfsr	r8,0x108
8000230e:	ef 48 ff 5c 	st.w	r7[-164],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002312:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002316:	f1 39 00 08 	ld.ub	r9,r8[8]
8000231a:	30 28       	mov	r8,2
8000231c:	f0 09 18 00 	cp.b	r9,r8
80002320:	c0 31       	brne	80002326 <dip204_init+0x31e>
    return false;
80002322:	30 08       	mov	r8,0
80002324:	c4 38       	rjmp	800023aa <dip204_init+0x3a2>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002326:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000232a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000232e:	30 18       	mov	r8,1
80002330:	f0 09 18 00 	cp.b	r9,r8
80002334:	c0 31       	brne	8000233a <dip204_init+0x332>
    return true;
80002336:	30 18       	mov	r8,1
80002338:	c3 98       	rjmp	800023aa <dip204_init+0x3a2>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000233a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000233e:	70 09       	ld.w	r9,r8[0x0]
80002340:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002344:	70 18       	ld.w	r8,r8[0x4]
80002346:	10 39       	cp.w	r9,r8
80002348:	e0 88 00 1a 	brls	8000237c <dip204_init+0x374>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000234c:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002350:	70 09       	ld.w	r9,r8[0x0]
80002352:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002356:	12 38       	cp.w	r8,r9
80002358:	c1 02       	brcc	80002378 <dip204_init+0x370>
8000235a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000235e:	70 19       	ld.w	r9,r8[0x4]
80002360:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002364:	12 38       	cp.w	r8,r9
80002366:	e0 88 00 09 	brls	80002378 <dip204_init+0x370>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000236a:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000236e:	30 18       	mov	r8,1
80002370:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002374:	30 18       	mov	r8,1
80002376:	c1 a8       	rjmp	800023aa <dip204_init+0x3a2>
    }
    return false;
80002378:	30 08       	mov	r8,0
8000237a:	c1 88       	rjmp	800023aa <dip204_init+0x3a2>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000237c:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002380:	70 09       	ld.w	r9,r8[0x0]
80002382:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002386:	12 38       	cp.w	r8,r9
80002388:	c0 93       	brcs	8000239a <dip204_init+0x392>
8000238a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000238e:	70 19       	ld.w	r9,r8[0x4]
80002390:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002394:	12 38       	cp.w	r8,r9
80002396:	e0 88 00 09 	brls	800023a8 <dip204_init+0x3a0>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000239a:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000239e:	30 18       	mov	r8,1
800023a0:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800023a4:	30 18       	mov	r8,1
800023a6:	c0 28       	rjmp	800023aa <dip204_init+0x3a2>
    }
    return false;
800023a8:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800023aa:	58 08       	cp.w	r8,0
800023ac:	ca b0       	breq	80002302 <dip204_init+0x2fa>
  // Wait for command execution
  delay_ms(1);
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
800023ae:	30 9c       	mov	r12,9
800023b0:	f0 1f 01 cd 	mcall	80002ae4 <dip204_init+0xadc>
800023b4:	30 18       	mov	r8,1
800023b6:	ef 48 ff 64 	st.w	r7[-156],r8
800023ba:	e0 68 1b 00 	mov	r8,6912
800023be:	ea 18 00 b7 	orh	r8,0xb7
800023c2:	ef 48 ff 60 	st.w	r7[-160],r8
800023c6:	ee f8 ff 64 	ld.w	r8,r7[-156]
800023ca:	ef 48 ff 6c 	st.w	r7[-148],r8
800023ce:	ee f8 ff 60 	ld.w	r8,r7[-160]
800023d2:	ef 48 ff 68 	st.w	r7[-152],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800023d6:	ee fb ff 6c 	ld.w	r11,r7[-148]
800023da:	ef 4b fe 70 	st.w	r7[-400],r11
800023de:	30 0a       	mov	r10,0
800023e0:	ef 4a fe 6c 	st.w	r7[-404],r10
800023e4:	ee f9 ff 68 	ld.w	r9,r7[-152]
800023e8:	ef 49 fe 68 	st.w	r7[-408],r9
800023ec:	30 08       	mov	r8,0
800023ee:	ef 48 fe 64 	st.w	r7[-412],r8
800023f2:	ee f9 fe 6c 	ld.w	r9,r7[-404]
800023f6:	ee fc fe 68 	ld.w	r12,r7[-408]
800023fa:	b9 39       	mul	r9,r12
800023fc:	ee f8 fe 64 	ld.w	r8,r7[-412]
80002400:	ee fb fe 70 	ld.w	r11,r7[-400]
80002404:	b7 38       	mul	r8,r11
80002406:	10 09       	add	r9,r8
80002408:	ee f8 fe 70 	ld.w	r8,r7[-400]
8000240c:	ee fc fe 68 	ld.w	r12,r7[-408]
80002410:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80002414:	16 09       	add	r9,r11
80002416:	12 9b       	mov	r11,r9
80002418:	e0 68 03 e7 	mov	r8,999
8000241c:	30 09       	mov	r9,0
8000241e:	10 0a       	add	r10,r8
80002420:	f6 09 00 4b 	adc	r11,r11,r9
80002424:	e0 68 03 e8 	mov	r8,1000
80002428:	30 09       	mov	r9,0
8000242a:	f0 1f 01 ad 	mcall	80002adc <dip204_init+0xad4>
8000242e:	14 98       	mov	r8,r10
80002430:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002432:	ef 48 ff 74 	st.w	r7[-140],r8
80002436:	ee c8 01 2c 	sub	r8,r7,300
8000243a:	ef 48 ff 70 	st.w	r7[-144],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000243e:	e1 b8 00 42 	mfsr	r8,0x108
80002442:	10 99       	mov	r9,r8
80002444:	ee f8 ff 70 	ld.w	r8,r7[-144]
80002448:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000244a:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000244e:	70 09       	ld.w	r9,r8[0x0]
80002450:	ee f8 ff 74 	ld.w	r8,r7[-140]
80002454:	10 09       	add	r9,r8
80002456:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000245a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000245c:	ee f9 ff 70 	ld.w	r9,r7[-144]
80002460:	30 08       	mov	r8,0
80002462:	f3 68 00 08 	st.b	r9[8],r8
80002466:	ee c8 01 2c 	sub	r8,r7,300
8000246a:	ef 48 ff 78 	st.w	r7[-136],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000246e:	e1 b8 00 42 	mfsr	r8,0x108
80002472:	ef 48 ff 7c 	st.w	r7[-132],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002476:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000247a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000247e:	30 28       	mov	r8,2
80002480:	f0 09 18 00 	cp.b	r9,r8
80002484:	c0 31       	brne	8000248a <dip204_init+0x482>
    return false;
80002486:	30 08       	mov	r8,0
80002488:	c4 38       	rjmp	8000250e <dip204_init+0x506>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000248a:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000248e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002492:	30 18       	mov	r8,1
80002494:	f0 09 18 00 	cp.b	r9,r8
80002498:	c0 31       	brne	8000249e <dip204_init+0x496>
    return true;
8000249a:	30 18       	mov	r8,1
8000249c:	c3 98       	rjmp	8000250e <dip204_init+0x506>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000249e:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024a2:	70 09       	ld.w	r9,r8[0x0]
800024a4:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024a8:	70 18       	ld.w	r8,r8[0x4]
800024aa:	10 39       	cp.w	r9,r8
800024ac:	e0 88 00 1a 	brls	800024e0 <dip204_init+0x4d8>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800024b0:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024b4:	70 09       	ld.w	r9,r8[0x0]
800024b6:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800024ba:	12 38       	cp.w	r8,r9
800024bc:	c1 02       	brcc	800024dc <dip204_init+0x4d4>
800024be:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024c2:	70 19       	ld.w	r9,r8[0x4]
800024c4:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800024c8:	12 38       	cp.w	r8,r9
800024ca:	e0 88 00 09 	brls	800024dc <dip204_init+0x4d4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024ce:	ee f9 ff 78 	ld.w	r9,r7[-136]
800024d2:	30 18       	mov	r8,1
800024d4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024d8:	30 18       	mov	r8,1
800024da:	c1 a8       	rjmp	8000250e <dip204_init+0x506>
    }
    return false;
800024dc:	30 08       	mov	r8,0
800024de:	c1 88       	rjmp	8000250e <dip204_init+0x506>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800024e0:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024e4:	70 09       	ld.w	r9,r8[0x0]
800024e6:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800024ea:	12 38       	cp.w	r8,r9
800024ec:	c0 93       	brcs	800024fe <dip204_init+0x4f6>
800024ee:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024f2:	70 19       	ld.w	r9,r8[0x4]
800024f4:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800024f8:	12 38       	cp.w	r8,r9
800024fa:	e0 88 00 09 	brls	8000250c <dip204_init+0x504>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024fe:	ee f9 ff 78 	ld.w	r9,r7[-136]
80002502:	30 18       	mov	r8,1
80002504:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002508:	30 18       	mov	r8,1
8000250a:	c0 28       	rjmp	8000250e <dip204_init+0x506>
    }
    return false;
8000250c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000250e:	58 08       	cp.w	r8,0
80002510:	ca b0       	breq	80002466 <dip204_init+0x45e>
  // Wait for command execution
  delay_ms(1);
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002512:	33 0c       	mov	r12,48
80002514:	f0 1f 01 74 	mcall	80002ae4 <dip204_init+0xadc>
80002518:	30 18       	mov	r8,1
8000251a:	ef 48 ff 84 	st.w	r7[-124],r8
8000251e:	e0 68 1b 00 	mov	r8,6912
80002522:	ea 18 00 b7 	orh	r8,0xb7
80002526:	ef 48 ff 80 	st.w	r7[-128],r8
8000252a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000252e:	ef 48 ff 8c 	st.w	r7[-116],r8
80002532:	ee f8 ff 80 	ld.w	r8,r7[-128]
80002536:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000253a:	ee fb ff 8c 	ld.w	r11,r7[-116]
8000253e:	ef 4b fe 80 	st.w	r7[-384],r11
80002542:	30 0a       	mov	r10,0
80002544:	ef 4a fe 7c 	st.w	r7[-388],r10
80002548:	ee f9 ff 88 	ld.w	r9,r7[-120]
8000254c:	ef 49 fe 78 	st.w	r7[-392],r9
80002550:	30 08       	mov	r8,0
80002552:	ef 48 fe 74 	st.w	r7[-396],r8
80002556:	ee f9 fe 7c 	ld.w	r9,r7[-388]
8000255a:	ee fc fe 78 	ld.w	r12,r7[-392]
8000255e:	b9 39       	mul	r9,r12
80002560:	ee f8 fe 74 	ld.w	r8,r7[-396]
80002564:	ee fb fe 80 	ld.w	r11,r7[-384]
80002568:	b7 38       	mul	r8,r11
8000256a:	10 09       	add	r9,r8
8000256c:	ee f8 fe 80 	ld.w	r8,r7[-384]
80002570:	ee fc fe 78 	ld.w	r12,r7[-392]
80002574:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80002578:	16 09       	add	r9,r11
8000257a:	12 9b       	mov	r11,r9
8000257c:	e0 68 03 e7 	mov	r8,999
80002580:	30 09       	mov	r9,0
80002582:	10 0a       	add	r10,r8
80002584:	f6 09 00 4b 	adc	r11,r11,r9
80002588:	e0 68 03 e8 	mov	r8,1000
8000258c:	30 09       	mov	r9,0
8000258e:	f0 1f 01 54 	mcall	80002adc <dip204_init+0xad4>
80002592:	14 98       	mov	r8,r10
80002594:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002596:	ef 48 ff 94 	st.w	r7[-108],r8
8000259a:	ee c8 01 20 	sub	r8,r7,288
8000259e:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800025a2:	e1 b8 00 42 	mfsr	r8,0x108
800025a6:	10 99       	mov	r9,r8
800025a8:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025ac:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025ae:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025b2:	70 09       	ld.w	r9,r8[0x0]
800025b4:	ee f8 ff 94 	ld.w	r8,r7[-108]
800025b8:	10 09       	add	r9,r8
800025ba:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025be:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800025c0:	ee f9 ff 90 	ld.w	r9,r7[-112]
800025c4:	30 08       	mov	r8,0
800025c6:	f3 68 00 08 	st.b	r9[8],r8
800025ca:	ee c8 01 20 	sub	r8,r7,288
800025ce:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025d2:	e1 b8 00 42 	mfsr	r8,0x108
800025d6:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800025da:	ee f8 ff 98 	ld.w	r8,r7[-104]
800025de:	f1 39 00 08 	ld.ub	r9,r8[8]
800025e2:	30 28       	mov	r8,2
800025e4:	f0 09 18 00 	cp.b	r9,r8
800025e8:	c0 31       	brne	800025ee <dip204_init+0x5e6>
    return false;
800025ea:	30 08       	mov	r8,0
800025ec:	c4 38       	rjmp	80002672 <dip204_init+0x66a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800025ee:	ee f8 ff 98 	ld.w	r8,r7[-104]
800025f2:	f1 39 00 08 	ld.ub	r9,r8[8]
800025f6:	30 18       	mov	r8,1
800025f8:	f0 09 18 00 	cp.b	r9,r8
800025fc:	c0 31       	brne	80002602 <dip204_init+0x5fa>
    return true;
800025fe:	30 18       	mov	r8,1
80002600:	c3 98       	rjmp	80002672 <dip204_init+0x66a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002602:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002606:	70 09       	ld.w	r9,r8[0x0]
80002608:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000260c:	70 18       	ld.w	r8,r8[0x4]
8000260e:	10 39       	cp.w	r9,r8
80002610:	e0 88 00 1a 	brls	80002644 <dip204_init+0x63c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002614:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002618:	70 08       	ld.w	r8,r8[0x0]
8000261a:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000261e:	10 39       	cp.w	r9,r8
80002620:	c1 02       	brcc	80002640 <dip204_init+0x638>
80002622:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002626:	70 18       	ld.w	r8,r8[0x4]
80002628:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000262c:	10 39       	cp.w	r9,r8
8000262e:	e0 88 00 09 	brls	80002640 <dip204_init+0x638>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002632:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002636:	30 18       	mov	r8,1
80002638:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000263c:	30 18       	mov	r8,1
8000263e:	c1 a8       	rjmp	80002672 <dip204_init+0x66a>
    }
    return false;
80002640:	30 08       	mov	r8,0
80002642:	c1 88       	rjmp	80002672 <dip204_init+0x66a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002644:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002648:	70 08       	ld.w	r8,r8[0x0]
8000264a:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000264e:	10 39       	cp.w	r9,r8
80002650:	c0 93       	brcs	80002662 <dip204_init+0x65a>
80002652:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002656:	70 18       	ld.w	r8,r8[0x4]
80002658:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000265c:	10 39       	cp.w	r9,r8
8000265e:	e0 88 00 09 	brls	80002670 <dip204_init+0x668>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002662:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002666:	30 18       	mov	r8,1
80002668:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000266c:	30 18       	mov	r8,1
8000266e:	c0 28       	rjmp	80002672 <dip204_init+0x66a>
    }
    return false;
80002670:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002672:	58 08       	cp.w	r8,0
80002674:	ca b0       	breq	800025ca <dip204_init+0x5c2>
  // Wait for command execution
  delay_ms(1);
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
80002676:	30 fc       	mov	r12,15
80002678:	f0 1f 01 1b 	mcall	80002ae4 <dip204_init+0xadc>
8000267c:	30 18       	mov	r8,1
8000267e:	ef 48 ff a4 	st.w	r7[-92],r8
80002682:	e0 68 1b 00 	mov	r8,6912
80002686:	ea 18 00 b7 	orh	r8,0xb7
8000268a:	ef 48 ff a0 	st.w	r7[-96],r8
8000268e:	ee f8 ff a4 	ld.w	r8,r7[-92]
80002692:	ef 48 ff ac 	st.w	r7[-84],r8
80002696:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000269a:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000269e:	ee fb ff ac 	ld.w	r11,r7[-84]
800026a2:	ef 4b fe 90 	st.w	r7[-368],r11
800026a6:	30 0a       	mov	r10,0
800026a8:	ef 4a fe 8c 	st.w	r7[-372],r10
800026ac:	ee f9 ff a8 	ld.w	r9,r7[-88]
800026b0:	ef 49 fe 88 	st.w	r7[-376],r9
800026b4:	30 08       	mov	r8,0
800026b6:	ef 48 fe 84 	st.w	r7[-380],r8
800026ba:	ee fa fe 8c 	ld.w	r10,r7[-372]
800026be:	ee fc fe 88 	ld.w	r12,r7[-376]
800026c2:	b9 3a       	mul	r10,r12
800026c4:	ee f8 fe 84 	ld.w	r8,r7[-380]
800026c8:	ee fb fe 90 	ld.w	r11,r7[-368]
800026cc:	b7 38       	mul	r8,r11
800026ce:	10 0a       	add	r10,r8
800026d0:	ee fc fe 90 	ld.w	r12,r7[-368]
800026d4:	ee fb fe 88 	ld.w	r11,r7[-376]
800026d8:	f8 0b 06 48 	mulu.d	r8,r12,r11
800026dc:	12 0a       	add	r10,r9
800026de:	14 99       	mov	r9,r10
800026e0:	e0 6a 03 e7 	mov	r10,999
800026e4:	30 0b       	mov	r11,0
800026e6:	f0 0a 00 0a 	add	r10,r8,r10
800026ea:	f2 0b 00 4b 	adc	r11,r9,r11
800026ee:	e0 68 03 e8 	mov	r8,1000
800026f2:	30 09       	mov	r9,0
800026f4:	f0 1f 00 fa 	mcall	80002adc <dip204_init+0xad4>
800026f8:	14 98       	mov	r8,r10
800026fa:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800026fc:	ef 48 ff b4 	st.w	r7[-76],r8
80002700:	ee c8 01 14 	sub	r8,r7,276
80002704:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002708:	e1 b8 00 42 	mfsr	r8,0x108
8000270c:	10 99       	mov	r9,r8
8000270e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002712:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002714:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002718:	70 09       	ld.w	r9,r8[0x0]
8000271a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000271e:	10 09       	add	r9,r8
80002720:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002724:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002726:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000272a:	30 08       	mov	r8,0
8000272c:	f3 68 00 08 	st.b	r9[8],r8
80002730:	ee c8 01 14 	sub	r8,r7,276
80002734:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002738:	e1 b8 00 42 	mfsr	r8,0x108
8000273c:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002740:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002744:	f1 39 00 08 	ld.ub	r9,r8[8]
80002748:	30 28       	mov	r8,2
8000274a:	f0 09 18 00 	cp.b	r9,r8
8000274e:	c0 31       	brne	80002754 <dip204_init+0x74c>
    return false;
80002750:	30 08       	mov	r8,0
80002752:	c4 38       	rjmp	800027d8 <dip204_init+0x7d0>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002754:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002758:	f1 39 00 08 	ld.ub	r9,r8[8]
8000275c:	30 18       	mov	r8,1
8000275e:	f0 09 18 00 	cp.b	r9,r8
80002762:	c0 31       	brne	80002768 <dip204_init+0x760>
    return true;
80002764:	30 18       	mov	r8,1
80002766:	c3 98       	rjmp	800027d8 <dip204_init+0x7d0>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002768:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000276c:	70 09       	ld.w	r9,r8[0x0]
8000276e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002772:	70 18       	ld.w	r8,r8[0x4]
80002774:	10 39       	cp.w	r9,r8
80002776:	e0 88 00 1a 	brls	800027aa <dip204_init+0x7a2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000277a:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000277e:	70 08       	ld.w	r8,r8[0x0]
80002780:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002784:	10 39       	cp.w	r9,r8
80002786:	c1 02       	brcc	800027a6 <dip204_init+0x79e>
80002788:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000278c:	70 18       	ld.w	r8,r8[0x4]
8000278e:	ee f9 ff bc 	ld.w	r9,r7[-68]
80002792:	10 39       	cp.w	r9,r8
80002794:	e0 88 00 09 	brls	800027a6 <dip204_init+0x79e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002798:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000279c:	30 18       	mov	r8,1
8000279e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800027a2:	30 18       	mov	r8,1
800027a4:	c1 a8       	rjmp	800027d8 <dip204_init+0x7d0>
    }
    return false;
800027a6:	30 08       	mov	r8,0
800027a8:	c1 88       	rjmp	800027d8 <dip204_init+0x7d0>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800027aa:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027ae:	70 08       	ld.w	r8,r8[0x0]
800027b0:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027b4:	10 39       	cp.w	r9,r8
800027b6:	c0 93       	brcs	800027c8 <dip204_init+0x7c0>
800027b8:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027bc:	70 18       	ld.w	r8,r8[0x4]
800027be:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027c2:	10 39       	cp.w	r9,r8
800027c4:	e0 88 00 09 	brls	800027d6 <dip204_init+0x7ce>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800027c8:	ee f9 ff b8 	ld.w	r9,r7[-72]
800027cc:	30 18       	mov	r8,1
800027ce:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800027d2:	30 18       	mov	r8,1
800027d4:	c0 28       	rjmp	800027d8 <dip204_init+0x7d0>
    }
    return false;
800027d6:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800027d8:	58 08       	cp.w	r8,0
800027da:	ca b0       	breq	80002730 <dip204_init+0x728>
  // Wait for command execution
  delay_ms(1);
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
800027dc:	30 1c       	mov	r12,1
800027de:	f0 1f 00 c2 	mcall	80002ae4 <dip204_init+0xadc>
800027e2:	30 58       	mov	r8,5
800027e4:	ef 48 ff c4 	st.w	r7[-60],r8
800027e8:	e0 68 1b 00 	mov	r8,6912
800027ec:	ea 18 00 b7 	orh	r8,0xb7
800027f0:	ef 48 ff c0 	st.w	r7[-64],r8
800027f4:	ee f8 ff c4 	ld.w	r8,r7[-60]
800027f8:	ef 48 ff cc 	st.w	r7[-52],r8
800027fc:	ee f8 ff c0 	ld.w	r8,r7[-64]
80002800:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002804:	ee fa ff cc 	ld.w	r10,r7[-52]
80002808:	ef 4a fe a0 	st.w	r7[-352],r10
8000280c:	30 09       	mov	r9,0
8000280e:	ef 49 fe 9c 	st.w	r7[-356],r9
80002812:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002816:	ef 48 fe 98 	st.w	r7[-360],r8
8000281a:	30 0c       	mov	r12,0
8000281c:	ef 4c fe 94 	st.w	r7[-364],r12
80002820:	ee fa fe 9c 	ld.w	r10,r7[-356]
80002824:	ee fb fe 98 	ld.w	r11,r7[-360]
80002828:	b7 3a       	mul	r10,r11
8000282a:	ee f8 fe 94 	ld.w	r8,r7[-364]
8000282e:	ee f9 fe a0 	ld.w	r9,r7[-352]
80002832:	b3 38       	mul	r8,r9
80002834:	10 0a       	add	r10,r8
80002836:	ee fc fe a0 	ld.w	r12,r7[-352]
8000283a:	ee fb fe 98 	ld.w	r11,r7[-360]
8000283e:	f8 0b 06 48 	mulu.d	r8,r12,r11
80002842:	12 0a       	add	r10,r9
80002844:	14 99       	mov	r9,r10
80002846:	e0 6a 03 e7 	mov	r10,999
8000284a:	30 0b       	mov	r11,0
8000284c:	f0 0a 00 0a 	add	r10,r8,r10
80002850:	f2 0b 00 4b 	adc	r11,r9,r11
80002854:	e0 68 03 e8 	mov	r8,1000
80002858:	30 09       	mov	r9,0
8000285a:	f0 1f 00 a1 	mcall	80002adc <dip204_init+0xad4>
8000285e:	14 98       	mov	r8,r10
80002860:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002862:	ef 48 ff d4 	st.w	r7[-44],r8
80002866:	ee c8 01 08 	sub	r8,r7,264
8000286a:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000286e:	e1 b8 00 42 	mfsr	r8,0x108
80002872:	10 99       	mov	r9,r8
80002874:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002878:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000287a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000287e:	70 09       	ld.w	r9,r8[0x0]
80002880:	ee f8 ff d4 	ld.w	r8,r7[-44]
80002884:	10 09       	add	r9,r8
80002886:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000288a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000288c:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002890:	30 08       	mov	r8,0
80002892:	f3 68 00 08 	st.b	r9[8],r8
80002896:	ee c8 01 08 	sub	r8,r7,264
8000289a:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000289e:	e1 b8 00 42 	mfsr	r8,0x108
800028a2:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800028a6:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028aa:	f1 39 00 08 	ld.ub	r9,r8[8]
800028ae:	30 28       	mov	r8,2
800028b0:	f0 09 18 00 	cp.b	r9,r8
800028b4:	c0 31       	brne	800028ba <dip204_init+0x8b2>
    return false;
800028b6:	30 08       	mov	r8,0
800028b8:	c4 38       	rjmp	8000293e <dip204_init+0x936>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800028ba:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028be:	f1 39 00 08 	ld.ub	r9,r8[8]
800028c2:	30 18       	mov	r8,1
800028c4:	f0 09 18 00 	cp.b	r9,r8
800028c8:	c0 31       	brne	800028ce <dip204_init+0x8c6>
    return true;
800028ca:	30 18       	mov	r8,1
800028cc:	c3 98       	rjmp	8000293e <dip204_init+0x936>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800028ce:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028d2:	70 09       	ld.w	r9,r8[0x0]
800028d4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028d8:	70 18       	ld.w	r8,r8[0x4]
800028da:	10 39       	cp.w	r9,r8
800028dc:	e0 88 00 1a 	brls	80002910 <dip204_init+0x908>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800028e0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028e4:	70 08       	ld.w	r8,r8[0x0]
800028e6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800028ea:	10 39       	cp.w	r9,r8
800028ec:	c1 02       	brcc	8000290c <dip204_init+0x904>
800028ee:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028f2:	70 18       	ld.w	r8,r8[0x4]
800028f4:	ee f9 ff dc 	ld.w	r9,r7[-36]
800028f8:	10 39       	cp.w	r9,r8
800028fa:	e0 88 00 09 	brls	8000290c <dip204_init+0x904>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800028fe:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002902:	30 18       	mov	r8,1
80002904:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002908:	30 18       	mov	r8,1
8000290a:	c1 a8       	rjmp	8000293e <dip204_init+0x936>
    }
    return false;
8000290c:	30 08       	mov	r8,0
8000290e:	c1 88       	rjmp	8000293e <dip204_init+0x936>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002910:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002914:	70 08       	ld.w	r8,r8[0x0]
80002916:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000291a:	10 39       	cp.w	r9,r8
8000291c:	c0 93       	brcs	8000292e <dip204_init+0x926>
8000291e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002922:	70 18       	ld.w	r8,r8[0x4]
80002924:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002928:	10 39       	cp.w	r9,r8
8000292a:	e0 88 00 09 	brls	8000293c <dip204_init+0x934>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000292e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80002932:	30 18       	mov	r8,1
80002934:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002938:	30 18       	mov	r8,1
8000293a:	c0 28       	rjmp	8000293e <dip204_init+0x936>
    }
    return false;
8000293c:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000293e:	58 08       	cp.w	r8,0
80002940:	ca b0       	breq	80002896 <dip204_init+0x88e>
  // Wait for command execution
  delay_ms(5);
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
80002942:	30 6c       	mov	r12,6
80002944:	f0 1f 00 68 	mcall	80002ae4 <dip204_init+0xadc>
80002948:	30 18       	mov	r8,1
8000294a:	ef 48 ff e4 	st.w	r7[-28],r8
8000294e:	e0 68 1b 00 	mov	r8,6912
80002952:	ea 18 00 b7 	orh	r8,0xb7
80002956:	ef 48 ff e0 	st.w	r7[-32],r8
8000295a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000295e:	ef 48 ff ec 	st.w	r7[-20],r8
80002962:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002966:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000296a:	ee fa ff ec 	ld.w	r10,r7[-20]
8000296e:	ef 4a fe b0 	st.w	r7[-336],r10
80002972:	30 09       	mov	r9,0
80002974:	ef 49 fe ac 	st.w	r7[-340],r9
80002978:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000297c:	ef 48 fe a8 	st.w	r7[-344],r8
80002980:	30 0c       	mov	r12,0
80002982:	ef 4c fe a4 	st.w	r7[-348],r12
80002986:	ee fa fe ac 	ld.w	r10,r7[-340]
8000298a:	ee fb fe a8 	ld.w	r11,r7[-344]
8000298e:	b7 3a       	mul	r10,r11
80002990:	ee f8 fe a4 	ld.w	r8,r7[-348]
80002994:	ee f9 fe b0 	ld.w	r9,r7[-336]
80002998:	b3 38       	mul	r8,r9
8000299a:	10 0a       	add	r10,r8
8000299c:	ee fc fe b0 	ld.w	r12,r7[-336]
800029a0:	ee fb fe a8 	ld.w	r11,r7[-344]
800029a4:	f8 0b 06 48 	mulu.d	r8,r12,r11
800029a8:	12 0a       	add	r10,r9
800029aa:	14 99       	mov	r9,r10
800029ac:	e0 6a 03 e7 	mov	r10,999
800029b0:	30 0b       	mov	r11,0
800029b2:	f0 0a 00 0a 	add	r10,r8,r10
800029b6:	f2 0b 00 4b 	adc	r11,r9,r11
800029ba:	e0 68 03 e8 	mov	r8,1000
800029be:	30 09       	mov	r9,0
800029c0:	f0 1f 00 47 	mcall	80002adc <dip204_init+0xad4>
800029c4:	14 98       	mov	r8,r10
800029c6:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800029c8:	ef 48 ff f4 	st.w	r7[-12],r8
800029cc:	ee c8 00 fc 	sub	r8,r7,252
800029d0:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800029d4:	e1 b8 00 42 	mfsr	r8,0x108
800029d8:	10 99       	mov	r9,r8
800029da:	ee f8 ff f0 	ld.w	r8,r7[-16]
800029de:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800029e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800029e4:	70 09       	ld.w	r9,r8[0x0]
800029e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800029ea:	10 09       	add	r9,r8
800029ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800029f0:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800029f2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800029f6:	30 08       	mov	r8,0
800029f8:	f3 68 00 08 	st.b	r9[8],r8
800029fc:	ee c8 00 fc 	sub	r8,r7,252
80002a00:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a04:	e1 b8 00 42 	mfsr	r8,0x108
80002a08:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002a0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a10:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a14:	30 28       	mov	r8,2
80002a16:	f0 09 18 00 	cp.b	r9,r8
80002a1a:	c0 31       	brne	80002a20 <dip204_init+0xa18>
    return false;
80002a1c:	30 08       	mov	r8,0
80002a1e:	c4 38       	rjmp	80002aa4 <dip204_init+0xa9c>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002a20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a24:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a28:	30 18       	mov	r8,1
80002a2a:	f0 09 18 00 	cp.b	r9,r8
80002a2e:	c0 31       	brne	80002a34 <dip204_init+0xa2c>
    return true;
80002a30:	30 18       	mov	r8,1
80002a32:	c3 98       	rjmp	80002aa4 <dip204_init+0xa9c>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002a34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a38:	70 09       	ld.w	r9,r8[0x0]
80002a3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a3e:	70 18       	ld.w	r8,r8[0x4]
80002a40:	10 39       	cp.w	r9,r8
80002a42:	e0 88 00 1a 	brls	80002a76 <dip204_init+0xa6e>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002a46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a4a:	70 08       	ld.w	r8,r8[0x0]
80002a4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a50:	10 39       	cp.w	r9,r8
80002a52:	c1 02       	brcc	80002a72 <dip204_init+0xa6a>
80002a54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a58:	70 18       	ld.w	r8,r8[0x4]
80002a5a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a5e:	10 39       	cp.w	r9,r8
80002a60:	e0 88 00 09 	brls	80002a72 <dip204_init+0xa6a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002a64:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a68:	30 18       	mov	r8,1
80002a6a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002a6e:	30 18       	mov	r8,1
80002a70:	c1 a8       	rjmp	80002aa4 <dip204_init+0xa9c>
    }
    return false;
80002a72:	30 08       	mov	r8,0
80002a74:	c1 88       	rjmp	80002aa4 <dip204_init+0xa9c>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002a76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a7a:	70 08       	ld.w	r8,r8[0x0]
80002a7c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a80:	10 39       	cp.w	r9,r8
80002a82:	c0 93       	brcs	80002a94 <dip204_init+0xa8c>
80002a84:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a88:	70 18       	ld.w	r8,r8[0x4]
80002a8a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a8e:	10 39       	cp.w	r9,r8
80002a90:	e0 88 00 09 	brls	80002aa2 <dip204_init+0xa9a>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002a94:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a98:	30 18       	mov	r8,1
80002a9a:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002a9e:	30 18       	mov	r8,1
80002aa0:	c0 28       	rjmp	80002aa4 <dip204_init+0xa9c>
    }
    return false;
80002aa2:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002aa4:	58 08       	cp.w	r8,0
80002aa6:	ca b0       	breq	800029fc <dip204_init+0x9f4>
  // Wait for command execution
  delay_ms(1);
  dip204_wait_busy();
80002aa8:	f0 1f 00 10 	mcall	80002ae8 <dip204_init+0xae0>
  // unselect chip
  dip204_unselect();
80002aac:	f0 1f 00 10 	mcall	80002aec <dip204_init+0xae4>
}
80002ab0:	29 5d       	sub	sp,-428
80002ab2:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002ab6:	00 00       	add	r0,r0
80002ab8:	00 00       	add	r0,r0
80002aba:	00 08       	add	r8,r0
80002abc:	80 00       	ld.sh	r0,r0[0x0]
80002abe:	38 54       	mov	r4,-123
80002ac0:	80 00       	ld.sh	r0,r0[0x0]
80002ac2:	30 f4       	mov	r4,15
80002ac4:	00 00       	add	r0,r0
80002ac6:	05 10       	ld.sh	r0,r2++
80002ac8:	00 00       	add	r0,r0
80002aca:	05 14       	ld.sh	r4,r2++
80002acc:	80 00       	ld.sh	r0,r0[0x0]
80002ace:	31 88       	mov	r8,24
80002ad0:	80 00       	ld.sh	r0,r0[0x0]
80002ad2:	32 10       	mov	r0,33
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	3b 7a       	mov	r10,-73
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	3b 12       	mov	r2,-79
80002adc:	80 00       	ld.sh	r0,r0[0x0]
80002ade:	41 1a       	lddsp	r10,sp[0x44]
80002ae0:	80 00       	ld.sh	r0,r0[0x0]
80002ae2:	2d 94       	sub	r4,-39
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	2d c4       	sub	r4,-36
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	2e a8       	sub	r8,-22
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	2d ac       	sub	r12,-38

80002af0 <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002af0:	eb cd 40 80 	pushm	r7,lr
80002af4:	1a 97       	mov	r7,sp
  /* select the LCD chip */
  dip204_select();
80002af6:	f0 1f 00 08 	mcall	80002b14 <dip204_hide_cursor+0x24>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002afa:	e0 6c 00 f8 	mov	r12,248
80002afe:	f0 1f 00 07 	mcall	80002b18 <dip204_hide_cursor+0x28>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002b02:	30 cc       	mov	r12,12
80002b04:	f0 1f 00 05 	mcall	80002b18 <dip204_hide_cursor+0x28>
  dip204_wait_busy();
80002b08:	f0 1f 00 05 	mcall	80002b1c <dip204_hide_cursor+0x2c>
  /* unselect chip */
  dip204_unselect();
80002b0c:	f0 1f 00 05 	mcall	80002b20 <dip204_hide_cursor+0x30>
}
80002b10:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b14:	80 00       	ld.sh	r0,r0[0x0]
80002b16:	2d 94       	sub	r4,-39
80002b18:	80 00       	ld.sh	r0,r0[0x0]
80002b1a:	2d c4       	sub	r4,-36
80002b1c:	80 00       	ld.sh	r0,r0[0x0]
80002b1e:	2e a8       	sub	r8,-22
80002b20:	80 00       	ld.sh	r0,r0[0x0]
80002b22:	2d ac       	sub	r12,-38

80002b24 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002b24:	eb cd 40 80 	pushm	r7,lr
80002b28:	1a 97       	mov	r7,sp
80002b2a:	20 3d       	sub	sp,12
80002b2c:	18 99       	mov	r9,r12
80002b2e:	16 98       	mov	r8,r11
80002b30:	ef 69 ff f8 	st.b	r7[-8],r9
80002b34:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char address = 0;
80002b38:	30 08       	mov	r8,0
80002b3a:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002b3e:	f0 1f 00 18 	mcall	80002b9c <dip204_set_cursor_position+0x78>
  if ((column <= 20) && (line <= 4))
80002b42:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002b46:	31 48       	mov	r8,20
80002b48:	f0 09 18 00 	cp.b	r9,r8
80002b4c:	e0 8b 00 17 	brhi	80002b7a <dip204_set_cursor_position+0x56>
80002b50:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002b54:	30 48       	mov	r8,4
80002b56:	f0 09 18 00 	cp.b	r9,r8
80002b5a:	e0 8b 00 10 	brhi	80002b7a <dip204_set_cursor_position+0x56>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002b5e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002b62:	20 18       	sub	r8,1
80002b64:	5c 58       	castu.b	r8
80002b66:	a5 78       	lsl	r8,0x5
80002b68:	5c 58       	castu.b	r8
80002b6a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002b6e:	f2 08 00 08 	add	r8,r9,r8
80002b72:	5c 58       	castu.b	r8
80002b74:	28 18       	sub	r8,-127
80002b76:	ef 68 ff ff 	st.b	r7[-1],r8
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002b7a:	e0 6c 00 f8 	mov	r12,248
80002b7e:	f0 1f 00 09 	mcall	80002ba0 <dip204_set_cursor_position+0x7c>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002b82:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002b86:	10 9c       	mov	r12,r8
80002b88:	f0 1f 00 06 	mcall	80002ba0 <dip204_set_cursor_position+0x7c>
  dip204_wait_busy();
80002b8c:	f0 1f 00 06 	mcall	80002ba4 <dip204_set_cursor_position+0x80>
  dip204_unselect();
80002b90:	f0 1f 00 06 	mcall	80002ba8 <dip204_set_cursor_position+0x84>
}
80002b94:	2f dd       	sub	sp,-12
80002b96:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b9a:	00 00       	add	r0,r0
80002b9c:	80 00       	ld.sh	r0,r0[0x0]
80002b9e:	2d 94       	sub	r4,-39
80002ba0:	80 00       	ld.sh	r0,r0[0x0]
80002ba2:	2d c4       	sub	r4,-36
80002ba4:	80 00       	ld.sh	r0,r0[0x0]
80002ba6:	2e a8       	sub	r8,-22
80002ba8:	80 00       	ld.sh	r0,r0[0x0]
80002baa:	2d ac       	sub	r12,-38

80002bac <dip204_clear_display>:


void dip204_clear_display(void)
{
80002bac:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002bb0:	1a 97       	mov	r7,sp
80002bb2:	20 bd       	sub	sp,44
  dip204_select();
80002bb4:	f0 1f 00 57 	mcall	80002d10 <dip204_clear_display+0x164>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002bb8:	e0 6c 00 f8 	mov	r12,248
80002bbc:	f0 1f 00 56 	mcall	80002d14 <dip204_clear_display+0x168>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002bc0:	30 1c       	mov	r12,1
80002bc2:	f0 1f 00 55 	mcall	80002d14 <dip204_clear_display+0x168>
80002bc6:	30 48       	mov	r8,4
80002bc8:	ef 48 ff e4 	st.w	r7[-28],r8
80002bcc:	e0 68 1b 00 	mov	r8,6912
80002bd0:	ea 18 00 b7 	orh	r8,0xb7
80002bd4:	ef 48 ff e0 	st.w	r7[-32],r8
80002bd8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002bdc:	ef 48 ff ec 	st.w	r7[-20],r8
80002be0:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002be4:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002be8:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002bec:	30 01       	mov	r1,0
80002bee:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002bf2:	30 03       	mov	r3,0
80002bf4:	e2 02 02 4a 	mul	r10,r1,r2
80002bf8:	e6 00 02 48 	mul	r8,r3,r0
80002bfc:	10 0a       	add	r10,r8
80002bfe:	e0 02 06 48 	mulu.d	r8,r0,r2
80002c02:	12 0a       	add	r10,r9
80002c04:	14 99       	mov	r9,r10
80002c06:	e0 6a 03 e7 	mov	r10,999
80002c0a:	30 0b       	mov	r11,0
80002c0c:	f0 0a 00 0a 	add	r10,r8,r10
80002c10:	f2 0b 00 4b 	adc	r11,r9,r11
80002c14:	e0 68 03 e8 	mov	r8,1000
80002c18:	30 09       	mov	r9,0
80002c1a:	f0 1f 00 40 	mcall	80002d18 <dip204_clear_display+0x16c>
80002c1e:	14 98       	mov	r8,r10
80002c20:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002c22:	ef 48 ff f4 	st.w	r7[-12],r8
80002c26:	ee c8 00 2c 	sub	r8,r7,44
80002c2a:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002c2e:	e1 b8 00 42 	mfsr	r8,0x108
80002c32:	10 99       	mov	r9,r8
80002c34:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c38:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002c3a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c3e:	70 09       	ld.w	r9,r8[0x0]
80002c40:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002c44:	10 09       	add	r9,r8
80002c46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c4a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002c4c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002c50:	30 08       	mov	r8,0
80002c52:	f3 68 00 08 	st.b	r9[8],r8
80002c56:	ee c8 00 2c 	sub	r8,r7,44
80002c5a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c5e:	e1 b8 00 42 	mfsr	r8,0x108
80002c62:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002c66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c6a:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c6e:	30 28       	mov	r8,2
80002c70:	f0 09 18 00 	cp.b	r9,r8
80002c74:	c0 31       	brne	80002c7a <dip204_clear_display+0xce>
    return false;
80002c76:	30 08       	mov	r8,0
80002c78:	c4 38       	rjmp	80002cfe <dip204_clear_display+0x152>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002c7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c7e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c82:	30 18       	mov	r8,1
80002c84:	f0 09 18 00 	cp.b	r9,r8
80002c88:	c0 31       	brne	80002c8e <dip204_clear_display+0xe2>
    return true;
80002c8a:	30 18       	mov	r8,1
80002c8c:	c3 98       	rjmp	80002cfe <dip204_clear_display+0x152>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002c8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c92:	70 09       	ld.w	r9,r8[0x0]
80002c94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c98:	70 18       	ld.w	r8,r8[0x4]
80002c9a:	10 39       	cp.w	r9,r8
80002c9c:	e0 88 00 1a 	brls	80002cd0 <dip204_clear_display+0x124>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002ca0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ca4:	70 08       	ld.w	r8,r8[0x0]
80002ca6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002caa:	10 39       	cp.w	r9,r8
80002cac:	c1 02       	brcc	80002ccc <dip204_clear_display+0x120>
80002cae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cb2:	70 18       	ld.w	r8,r8[0x4]
80002cb4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002cb8:	10 39       	cp.w	r9,r8
80002cba:	e0 88 00 09 	brls	80002ccc <dip204_clear_display+0x120>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002cbe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002cc2:	30 18       	mov	r8,1
80002cc4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002cc8:	30 18       	mov	r8,1
80002cca:	c1 a8       	rjmp	80002cfe <dip204_clear_display+0x152>
    }
    return false;
80002ccc:	30 08       	mov	r8,0
80002cce:	c1 88       	rjmp	80002cfe <dip204_clear_display+0x152>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002cd0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cd4:	70 08       	ld.w	r8,r8[0x0]
80002cd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002cda:	10 39       	cp.w	r9,r8
80002cdc:	c0 93       	brcs	80002cee <dip204_clear_display+0x142>
80002cde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ce2:	70 18       	ld.w	r8,r8[0x4]
80002ce4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002ce8:	10 39       	cp.w	r9,r8
80002cea:	e0 88 00 09 	brls	80002cfc <dip204_clear_display+0x150>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002cee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002cf2:	30 18       	mov	r8,1
80002cf4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002cf8:	30 18       	mov	r8,1
80002cfa:	c0 28       	rjmp	80002cfe <dip204_clear_display+0x152>
    }
    return false;
80002cfc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002cfe:	58 08       	cp.w	r8,0
80002d00:	ca b0       	breq	80002c56 <dip204_clear_display+0xaa>
  /* Wait for command execution */
  delay_ms(4);
  dip204_wait_busy();
80002d02:	f0 1f 00 07 	mcall	80002d1c <dip204_clear_display+0x170>
  dip204_unselect();
80002d06:	f0 1f 00 07 	mcall	80002d20 <dip204_clear_display+0x174>
}
80002d0a:	2f 5d       	sub	sp,-44
80002d0c:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002d10:	80 00       	ld.sh	r0,r0[0x0]
80002d12:	2d 94       	sub	r4,-39
80002d14:	80 00       	ld.sh	r0,r0[0x0]
80002d16:	2d c4       	sub	r4,-36
80002d18:	80 00       	ld.sh	r0,r0[0x0]
80002d1a:	41 1a       	lddsp	r10,sp[0x44]
80002d1c:	80 00       	ld.sh	r0,r0[0x0]
80002d1e:	2e a8       	sub	r8,-22
80002d20:	80 00       	ld.sh	r0,r0[0x0]
80002d22:	2d ac       	sub	r12,-38

80002d24 <dip204_write_string>:


void dip204_write_string(const char *string)
{
80002d24:	eb cd 40 80 	pushm	r7,lr
80002d28:	1a 97       	mov	r7,sp
80002d2a:	20 2d       	sub	sp,8
80002d2c:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned char i=0;
80002d30:	30 08       	mov	r8,0
80002d32:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002d36:	f0 1f 00 14 	mcall	80002d84 <dip204_write_string+0x60>
  /* for all chars in string */
  while(string[i]!=0)
80002d3a:	c1 68       	rjmp	80002d66 <dip204_write_string+0x42>
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002d3c:	e0 6c 00 fa 	mov	r12,250
80002d40:	f0 1f 00 12 	mcall	80002d88 <dip204_write_string+0x64>
    /* Send byte */
    dip204_write_byte(string[i]);
80002d44:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002d48:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d4c:	f2 08 00 08 	add	r8,r9,r8
80002d50:	11 88       	ld.ub	r8,r8[0x0]
80002d52:	10 9c       	mov	r12,r8
80002d54:	f0 1f 00 0d 	mcall	80002d88 <dip204_write_string+0x64>
    /* go to next char */
    i++;
80002d58:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002d5c:	2f f8       	sub	r8,-1
80002d5e:	ef 68 ff ff 	st.b	r7[-1],r8
    dip204_wait_busy();
80002d62:	f0 1f 00 0b 	mcall	80002d8c <dip204_write_string+0x68>
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
80002d66:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002d6a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d6e:	f2 08 00 08 	add	r8,r9,r8
80002d72:	11 88       	ld.ub	r8,r8[0x0]
80002d74:	58 08       	cp.w	r8,0
80002d76:	ce 31       	brne	80002d3c <dip204_write_string+0x18>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002d78:	f0 1f 00 06 	mcall	80002d90 <dip204_write_string+0x6c>
}
80002d7c:	2f ed       	sub	sp,-8
80002d7e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d82:	00 00       	add	r0,r0
80002d84:	80 00       	ld.sh	r0,r0[0x0]
80002d86:	2d 94       	sub	r4,-39
80002d88:	80 00       	ld.sh	r0,r0[0x0]
80002d8a:	2d c4       	sub	r4,-36
80002d8c:	80 00       	ld.sh	r0,r0[0x0]
80002d8e:	2e a8       	sub	r8,-22
80002d90:	80 00       	ld.sh	r0,r0[0x0]
80002d92:	2d ac       	sub	r12,-38

80002d94 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002d94:	eb cd 40 80 	pushm	r7,lr
80002d98:	1a 97       	mov	r7,sp
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002d9a:	30 2b       	mov	r11,2
80002d9c:	fe 7c 28 00 	mov	r12,-55296
80002da0:	f0 1f 00 02 	mcall	80002da8 <dip204_select+0x14>
}
80002da4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002da8:	80 00       	ld.sh	r0,r0[0x0]
80002daa:	33 b6       	mov	r6,59

80002dac <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002dac:	eb cd 40 80 	pushm	r7,lr
80002db0:	1a 97       	mov	r7,sp
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002db2:	30 2b       	mov	r11,2
80002db4:	fe 7c 28 00 	mov	r12,-55296
80002db8:	f0 1f 00 02 	mcall	80002dc0 <dip204_unselect+0x14>
  Assert( SPI_OK==spi_status );
}
80002dbc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002dc0:	80 00       	ld.sh	r0,r0[0x0]
80002dc2:	34 4e       	mov	lr,68

80002dc4 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002dc4:	eb cd 40 80 	pushm	r7,lr
80002dc8:	1a 97       	mov	r7,sp
80002dca:	20 3d       	sub	sp,12
80002dcc:	18 98       	mov	r8,r12
80002dce:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char reverse;

  switch (byte)
80002dd2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002dd6:	f0 c8 00 f8 	sub	r8,r8,248
80002dda:	58 68       	cp.w	r8,6
80002ddc:	e0 8b 00 10 	brhi	80002dfc <dip204_write_byte+0x38>
80002de0:	30 19       	mov	r9,1
80002de2:	f2 08 09 48 	lsl	r8,r9,r8
80002de6:	e2 18 00 55 	andl	r8,0x55,COH
80002dea:	c0 90       	breq	80002dfc <dip204_write_byte+0x38>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002dec:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002df0:	10 9b       	mov	r11,r8
80002df2:	fe 7c 28 00 	mov	r12,-55296
80002df6:	f0 1f 00 15 	mcall	80002e48 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
80002dfa:	c2 48       	rjmp	80002e42 <dip204_write_byte+0x7e>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002dfc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e00:	ef 48 ff fc 	st.w	r7[-4],r8
80002e04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e08:	5c 98       	brev	r8
80002e0a:	ef 48 ff fc 	st.w	r7[-4],r8
80002e0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e12:	b9 88       	lsr	r8,0x18
80002e14:	ef 68 ff fb 	st.b	r7[-5],r8
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002e18:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e1c:	e2 18 00 f0 	andl	r8,0xf0,COH
80002e20:	10 9b       	mov	r11,r8
80002e22:	fe 7c 28 00 	mov	r12,-55296
80002e26:	f0 1f 00 09 	mcall	80002e48 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002e2a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e2e:	a5 68       	lsl	r8,0x4
80002e30:	5c 88       	casts.h	r8
80002e32:	5c 78       	castu.h	r8
80002e34:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80002e38:	10 9b       	mov	r11,r8
80002e3a:	fe 7c 28 00 	mov	r12,-55296
80002e3e:	f0 1f 00 03 	mcall	80002e48 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
    }
  }
}
80002e42:	2f dd       	sub	sp,-12
80002e44:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e48:	80 00       	ld.sh	r0,r0[0x0]
80002e4a:	36 56       	mov	r6,101

80002e4c <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002e4c:	eb cd 40 80 	pushm	r7,lr
80002e50:	1a 97       	mov	r7,sp
80002e52:	20 3d       	sub	sp,12
80002e54:	ef 4c ff f4 	st.w	r7[-12],r12
  unsigned short reverse = 0x00;
80002e58:	30 08       	mov	r8,0
80002e5a:	ef 58 ff fa 	st.h	r7[-6],r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002e5e:	30 0b       	mov	r11,0
80002e60:	fe 7c 28 00 	mov	r12,-55296
80002e64:	f0 1f 00 0f 	mcall	80002ea0 <dip204_read_byte+0x54>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002e68:	ee c8 00 06 	sub	r8,r7,6
80002e6c:	10 9b       	mov	r11,r8
80002e6e:	fe 7c 28 00 	mov	r12,-55296
80002e72:	f0 1f 00 0d 	mcall	80002ea4 <dip204_read_byte+0x58>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002e76:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80002e7a:	5c 58       	castu.b	r8
80002e7c:	ef 48 ff fc 	st.w	r7[-4],r8
80002e80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e84:	5c 98       	brev	r8
80002e86:	ef 48 ff fc 	st.w	r7[-4],r8
80002e8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e8e:	b9 88       	lsr	r8,0x18
80002e90:	5c 58       	castu.b	r8
80002e92:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002e96:	b2 88       	st.b	r9[0x0],r8
}
80002e98:	2f dd       	sub	sp,-12
80002e9a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e9e:	00 00       	add	r0,r0
80002ea0:	80 00       	ld.sh	r0,r0[0x0]
80002ea2:	36 56       	mov	r6,101
80002ea4:	80 00       	ld.sh	r0,r0[0x0]
80002ea6:	36 ae       	mov	lr,106

80002ea8 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002ea8:	eb cd 40 80 	pushm	r7,lr
80002eac:	1a 97       	mov	r7,sp
80002eae:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002eb0:	30 08       	mov	r8,0
80002eb2:	ef 68 ff ff 	st.b	r7[-1],r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002eb6:	e0 6c 00 fc 	mov	r12,252
80002eba:	f0 1f 00 09 	mcall	80002edc <dip204_wait_busy+0x34>
  /* read next byte */
  do {
  dip204_read_byte(&status);
80002ebe:	ee c8 00 01 	sub	r8,r7,1
80002ec2:	10 9c       	mov	r12,r8
80002ec4:	f0 1f 00 07 	mcall	80002ee0 <dip204_wait_busy+0x38>
  /* keep D7 to know status */
  }while (status & 0x80);
80002ec8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002ecc:	10 99       	mov	r9,r8
80002ece:	30 08       	mov	r8,0
80002ed0:	f0 09 18 00 	cp.b	r9,r8
80002ed4:	cf 55       	brlt	80002ebe <dip204_wait_busy+0x16>
}
80002ed6:	2f fd       	sub	sp,-4
80002ed8:	e3 cd 80 80 	ldm	sp++,r7,pc
80002edc:	80 00       	ld.sh	r0,r0[0x0]
80002ede:	2d c4       	sub	r4,-36
80002ee0:	80 00       	ld.sh	r0,r0[0x0]
80002ee2:	2e 4c       	sub	r12,-28

80002ee4 <pm_set_osc0_mode>:
 *
 * \param pm Base address of the Power Manager (i.e. &AVR32_PM).
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
80002ee4:	eb cd 40 80 	pushm	r7,lr
80002ee8:	1a 97       	mov	r7,sp
80002eea:	20 3d       	sub	sp,12
80002eec:	ef 4c ff f8 	st.w	r7[-8],r12
80002ef0:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002ef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ef8:	70 a8       	ld.w	r8,r8[0x28]
80002efa:	30 09       	mov	r9,0
80002efc:	ef 49 ff fc 	st.w	r7[-4],r9
80002f00:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002f04:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002f08:	5c 58       	castu.b	r8
80002f0a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002f0e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002f12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f16:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80002f1a:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002f1e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002f22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f26:	91 a9       	st.w	r8[0x28],r9
}
80002f28:	2f dd       	sub	sp,-12
80002f2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f2e:	d7 03       	nop

80002f30 <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
80002f30:	eb cd 40 80 	pushm	r7,lr
80002f34:	1a 97       	mov	r7,sp
80002f36:	20 2d       	sub	sp,8
80002f38:	ef 4c ff fc 	st.w	r7[-4],r12
80002f3c:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002f40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f44:	ec 58 bb 9f 	cp.w	r8,899999
80002f48:	e0 88 00 1a 	brls	80002f7c <pm_enable_osc0_crystal+0x4c>
80002f4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f50:	e0 69 c6 bf 	mov	r9,50879
80002f54:	ea 19 00 2d 	orh	r9,0x2d
80002f58:	12 38       	cp.w	r8,r9
80002f5a:	e0 88 00 0f 	brls	80002f78 <pm_enable_osc0_crystal+0x48>
80002f5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002f62:	e0 69 11 ff 	mov	r9,4607
80002f66:	ea 19 00 7a 	orh	r9,0x7a
80002f6a:	12 38       	cp.w	r8,r9
80002f6c:	e0 8b 00 04 	brhi	80002f74 <pm_enable_osc0_crystal+0x44>
80002f70:	30 68       	mov	r8,6
80002f72:	c0 28       	rjmp	80002f76 <pm_enable_osc0_crystal+0x46>
80002f74:	30 78       	mov	r8,7
80002f76:	c0 28       	rjmp	80002f7a <pm_enable_osc0_crystal+0x4a>
80002f78:	30 58       	mov	r8,5
80002f7a:	c0 28       	rjmp	80002f7e <pm_enable_osc0_crystal+0x4e>
80002f7c:	30 48       	mov	r8,4
80002f7e:	10 9b       	mov	r11,r8
80002f80:	ee fc ff fc 	ld.w	r12,r7[-4]
80002f84:	f0 1f 00 03 	mcall	80002f90 <pm_enable_osc0_crystal+0x60>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
80002f88:	2f ed       	sub	sp,-8
80002f8a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f8e:	00 00       	add	r0,r0
80002f90:	80 00       	ld.sh	r0,r0[0x0]
80002f92:	2e e4       	sub	r4,-18

80002f94 <pm_enable_clk0>:


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
80002f94:	eb cd 40 80 	pushm	r7,lr
80002f98:	1a 97       	mov	r7,sp
80002f9a:	20 2d       	sub	sp,8
80002f9c:	ef 4c ff fc 	st.w	r7[-4],r12
80002fa0:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_enable_clk0_no_wait(pm, startup);
80002fa4:	ee fb ff f8 	ld.w	r11,r7[-8]
80002fa8:	ee fc ff fc 	ld.w	r12,r7[-4]
80002fac:	f0 1f 00 05 	mcall	80002fc0 <pm_enable_clk0+0x2c>
  pm_wait_for_clk0_ready(pm);
80002fb0:	ee fc ff fc 	ld.w	r12,r7[-4]
80002fb4:	f0 1f 00 04 	mcall	80002fc4 <pm_enable_clk0+0x30>
}
80002fb8:	2f ed       	sub	sp,-8
80002fba:	e3 cd 80 80 	ldm	sp++,r7,pc
80002fbe:	00 00       	add	r0,r0
80002fc0:	80 00       	ld.sh	r0,r0[0x0]
80002fc2:	2f c8       	sub	r8,-4
80002fc4:	80 00       	ld.sh	r0,r0[0x0]
80002fc6:	30 22       	mov	r2,2

80002fc8 <pm_enable_clk0_no_wait>:
  pm->mcctrl &= ~AVR32_PM_MCCTRL_OSC0EN_MASK;
}


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
80002fc8:	eb cd 40 80 	pushm	r7,lr
80002fcc:	1a 97       	mov	r7,sp
80002fce:	20 3d       	sub	sp,12
80002fd0:	ef 4c ff f8 	st.w	r7[-8],r12
80002fd4:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002fd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002fdc:	70 a8       	ld.w	r8,r8[0x28]
80002fde:	30 09       	mov	r9,0
80002fe0:	ef 49 ff fc 	st.w	r7[-4],r9
80002fe4:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002fe8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002fec:	5c 58       	castu.b	r8
80002fee:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80002ff2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002ff6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ffa:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
80002ffe:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80003002:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003006:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000300a:	91 a9       	st.w	r8[0x28],r9

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
8000300c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003010:	70 08       	ld.w	r8,r8[0x0]
80003012:	10 99       	mov	r9,r8
80003014:	a3 a9       	sbr	r9,0x2
80003016:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000301a:	91 09       	st.w	r8[0x0],r9
}
8000301c:	2f dd       	sub	sp,-12
8000301e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003022 <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
80003022:	eb cd 40 80 	pushm	r7,lr
80003026:	1a 97       	mov	r7,sp
80003028:	20 1d       	sub	sp,4
8000302a:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
8000302e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003032:	71 58       	ld.w	r8,r8[0x54]
80003034:	e2 18 00 80 	andl	r8,0x80,COH
80003038:	cf b0       	breq	8000302e <pm_wait_for_clk0_ready+0xc>
}
8000303a:	2f fd       	sub	sp,-4
8000303c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003040 <pm_switch_to_clock>:
  return u_avr32_pm_mcctrl.MCCTRL.mcsel;
}


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
80003040:	eb cd 40 80 	pushm	r7,lr
80003044:	1a 97       	mov	r7,sp
80003046:	20 3d       	sub	sp,12
80003048:	ef 4c ff f8 	st.w	r7[-8],r12
8000304c:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80003050:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003054:	70 08       	ld.w	r8,r8[0x0]
80003056:	30 09       	mov	r9,0
80003058:	ef 49 ff fc 	st.w	r7[-4],r9
8000305c:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80003060:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003064:	5c 58       	castu.b	r8
80003066:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000306a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000306e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003072:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
80003076:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000307a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000307e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003082:	91 09       	st.w	r8[0x0],r9
}
80003084:	2f dd       	sub	sp,-12
80003086:	e3 cd 80 80 	ldm	sp++,r7,pc
8000308a:	d7 03       	nop

8000308c <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
8000308c:	eb cd 40 80 	pushm	r7,lr
80003090:	1a 97       	mov	r7,sp
80003092:	20 3d       	sub	sp,12
80003094:	ef 4c ff fc 	st.w	r7[-4],r12
80003098:	ef 4b ff f8 	st.w	r7[-8],r11
8000309c:	ef 4a ff f4 	st.w	r7[-12],r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
800030a0:	ee fb ff f8 	ld.w	r11,r7[-8]
800030a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800030a8:	f0 1f 00 08 	mcall	800030c8 <pm_switch_to_osc0+0x3c>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
800030ac:	ee fb ff f4 	ld.w	r11,r7[-12]
800030b0:	ee fc ff fc 	ld.w	r12,r7[-4]
800030b4:	f0 1f 00 06 	mcall	800030cc <pm_switch_to_osc0+0x40>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
800030b8:	30 1b       	mov	r11,1
800030ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800030be:	f0 1f 00 05 	mcall	800030d0 <pm_switch_to_osc0+0x44>
}
800030c2:	2f dd       	sub	sp,-12
800030c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800030c8:	80 00       	ld.sh	r0,r0[0x0]
800030ca:	2f 30       	sub	r0,-13
800030cc:	80 00       	ld.sh	r0,r0[0x0]
800030ce:	2f 94       	sub	r4,-7
800030d0:	80 00       	ld.sh	r0,r0[0x0]
800030d2:	30 40       	mov	r0,4

800030d4 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800030d4:	eb cd 40 80 	pushm	r7,lr
800030d8:	1a 97       	mov	r7,sp
800030da:	20 1d       	sub	sp,4
800030dc:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800030e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030e4:	e6 18 00 01 	andh	r8,0x1,COH
800030e8:	5f 08       	sreq	r8
800030ea:	5c 58       	castu.b	r8
}
800030ec:	10 9c       	mov	r12,r8
800030ee:	2f fd       	sub	sp,-4
800030f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800030f4 <pwm_init>:
#include "compiler.h"
#include "pwm.h"


int pwm_init(const pwm_opt_t *opt)
{
800030f4:	eb cd 40 80 	pushm	r7,lr
800030f8:	1a 97       	mov	r7,sp
800030fa:	20 3d       	sub	sp,12
800030fc:	ef 4c ff f4 	st.w	r7[-12],r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
80003100:	fe 78 30 00 	mov	r8,-53248
80003104:	ef 48 ff f8 	st.w	r7[-8],r8
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003108:	e1 b8 00 00 	mfsr	r8,0x0
8000310c:	10 9c       	mov	r12,r8
8000310e:	f0 1f 00 1e 	mcall	80003184 <pwm_init+0x90>
80003112:	18 98       	mov	r8,r12
80003114:	ef 68 ff ff 	st.b	r7[-1],r8

  if (opt == 0 ) // Null pointer.
80003118:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000311c:	58 08       	cp.w	r8,0
8000311e:	c0 31       	brne	80003124 <pwm_init+0x30>
    return PWM_INVALID_INPUT;
80003120:	30 18       	mov	r8,1
80003122:	c2 c8       	rjmp	8000317a <pwm_init+0x86>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
80003124:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003128:	30 08       	mov	r8,0
8000312a:	f0 09 18 00 	cp.b	r9,r8
8000312e:	c0 20       	breq	80003132 <pwm_init+0x3e>
80003130:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
80003132:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003136:	37 f9       	mov	r9,127
80003138:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
8000313a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000313e:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80003140:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003144:	30 08       	mov	r8,0
80003146:	f0 09 18 00 	cp.b	r9,r8
8000314a:	c0 20       	breq	8000314e <pwm_init+0x5a>
8000314c:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
8000314e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003152:	70 19       	ld.w	r9,r8[0x4]
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
80003154:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003158:	70 08       	ld.w	r8,r8[0x0]
8000315a:	b1 68       	lsl	r8,0x10
8000315c:	10 49       	or	r9,r8
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
8000315e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003162:	70 38       	ld.w	r8,r8[0xc]
80003164:	a9 68       	lsl	r8,0x8
80003166:	10 49       	or	r9,r8
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
80003168:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000316c:	70 28       	ld.w	r8,r8[0x8]
8000316e:	b9 68       	lsl	r8,0x18
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80003170:	10 49       	or	r9,r8
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
80003172:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003176:	91 09       	st.w	r8[0x0],r9
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
    ;

  return PWM_SUCCESS;
80003178:	30 08       	mov	r8,0
}
8000317a:	10 9c       	mov	r12,r8
8000317c:	2f dd       	sub	sp,-12
8000317e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003182:	00 00       	add	r0,r0
80003184:	80 00       	ld.sh	r0,r0[0x0]
80003186:	30 d4       	mov	r4,13

80003188 <pwm_channel_init>:


int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
80003188:	eb cd 40 80 	pushm	r7,lr
8000318c:	1a 97       	mov	r7,sp
8000318e:	20 3d       	sub	sp,12
80003190:	ef 4c ff f8 	st.w	r7[-8],r12
80003194:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
80003198:	fe 78 30 00 	mov	r8,-53248
8000319c:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pwm_channel == 0) // Null pointer.
800031a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800031a4:	58 08       	cp.w	r8,0
800031a6:	c0 31       	brne	800031ac <pwm_channel_init+0x24>
    return PWM_INVALID_ARGUMENT;
800031a8:	30 18       	mov	r8,1
800031aa:	c2 f8       	rjmp	80003208 <pwm_channel_init+0x80>
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
800031ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031b0:	58 68       	cp.w	r8,6
800031b2:	e0 88 00 04 	brls	800031ba <pwm_channel_init+0x32>
    return PWM_INVALID_INPUT;
800031b6:	30 18       	mov	r8,1
800031b8:	c2 88       	rjmp	80003208 <pwm_channel_init+0x80>

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
800031ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800031c2:	72 09       	ld.w	r9,r9[0x0]
800031c4:	ee fa ff fc 	ld.w	r10,r7[-4]
800031c8:	2f 08       	sub	r8,-16
800031ca:	a5 78       	lsl	r8,0x5
800031cc:	f4 08 00 08 	add	r8,r10,r8
800031d0:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
800031d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800031da:	72 19       	ld.w	r9,r9[0x4]
800031dc:	ee fa ff fc 	ld.w	r10,r7[-4]
800031e0:	a5 78       	lsl	r8,0x5
800031e2:	f4 08 00 08 	add	r8,r10,r8
800031e6:	f0 c8 fd fc 	sub	r8,r8,-516
800031ea:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
800031ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800031f0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800031f4:	72 29       	ld.w	r9,r9[0x8]
800031f6:	ee fa ff fc 	ld.w	r10,r7[-4]
800031fa:	a5 78       	lsl	r8,0x5
800031fc:	f4 08 00 08 	add	r8,r10,r8
80003200:	f0 c8 fd f8 	sub	r8,r8,-520
80003204:	91 09       	st.w	r8[0x0],r9

  return PWM_SUCCESS;
80003206:	30 08       	mov	r8,0
}
80003208:	10 9c       	mov	r12,r8
8000320a:	2f dd       	sub	sp,-12
8000320c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003210 <pwm_start_channels>:


int pwm_start_channels(unsigned long channels_bitmask)
{
80003210:	eb cd 40 80 	pushm	r7,lr
80003214:	1a 97       	mov	r7,sp
80003216:	20 1d       	sub	sp,4
80003218:	ef 4c ff fc 	st.w	r7[-4],r12
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
8000321c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003220:	e0 18 ff 80 	andl	r8,0xff80
80003224:	c0 30       	breq	8000322a <pwm_start_channels+0x1a>
    return PWM_INVALID_INPUT;
80003226:	30 18       	mov	r8,1
80003228:	c0 78       	rjmp	80003236 <pwm_start_channels+0x26>

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
8000322a:	fe 78 30 00 	mov	r8,-53248
8000322e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003232:	91 19       	st.w	r8[0x4],r9

  return PWM_SUCCESS;
80003234:	30 08       	mov	r8,0
}
80003236:	10 9c       	mov	r12,r8
80003238:	2f fd       	sub	sp,-4
8000323a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000323e <getBaudDiv>:
/** The SPI mutex. */
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
8000323e:	eb cd 40 80 	pushm	r7,lr
80003242:	1a 97       	mov	r7,sp
80003244:	20 3d       	sub	sp,12
80003246:	ef 4c ff f8 	st.w	r7[-8],r12
8000324a:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
8000324e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003252:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003256:	f2 08 00 08 	add	r8,r9,r8
8000325a:	20 18       	sub	r8,1
8000325c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003260:	f0 09 0d 08 	divu	r8,r8,r9
80003264:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv <= 0 || baudDiv > 255) {
80003268:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000326c:	58 08       	cp.w	r8,0
8000326e:	c0 70       	breq	8000327c <getBaudDiv+0x3e>
80003270:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003274:	e0 48 00 ff 	cp.w	r8,255
80003278:	e0 88 00 04 	brls	80003280 <getBaudDiv+0x42>
		return -1;
8000327c:	3f f8       	mov	r8,-1
8000327e:	c0 48       	rjmp	80003286 <getBaudDiv+0x48>
	}

	return baudDiv;
80003280:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003284:	5c 88       	casts.h	r8
}
80003286:	10 9c       	mov	r12,r8
80003288:	2f dd       	sub	sp,-12
8000328a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000328e <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
8000328e:	eb cd 40 80 	pushm	r7,lr
80003292:	1a 97       	mov	r7,sp
80003294:	20 3d       	sub	sp,12
80003296:	ef 4c ff f8 	st.w	r7[-8],r12
8000329a:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
8000329e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800032a2:	f1 39 00 0d 	ld.ub	r9,r8[13]
800032a6:	30 18       	mov	r8,1
800032a8:	f0 09 18 00 	cp.b	r9,r8
800032ac:	e0 88 00 04 	brls	800032b4 <spi_initMaster+0x26>
		return SPI_ERROR_ARGUMENT;
800032b0:	30 28       	mov	r8,2
800032b2:	c3 48       	rjmp	8000331a <spi_initMaster+0x8c>
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800032b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032b8:	e0 69 00 80 	mov	r9,128
800032bc:	91 09       	st.w	r8[0x0],r9

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800032be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032c2:	70 18       	ld.w	r8,r8[0x4]
800032c4:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.mstr = 1;
800032c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032cc:	30 19       	mov	r9,1
800032ce:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800032d2:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800032d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800032da:	f1 38 00 0d 	ld.ub	r8,r8[13]
800032de:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800032e2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800032e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032ea:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800032ee:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.llb = 0;
800032f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032f6:	30 09       	mov	r9,0
800032f8:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800032fc:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80003300:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003304:	30 f9       	mov	r9,15
80003306:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
8000330a:	ef 48 ff fc 	st.w	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
8000330e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003312:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003316:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
80003318:	30 08       	mov	r8,0
}
8000331a:	10 9c       	mov	r12,r8
8000331c:	2f dd       	sub	sp,-12
8000331e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003322 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003322:	eb cd 40 80 	pushm	r7,lr
80003326:	1a 97       	mov	r7,sp
80003328:	20 5d       	sub	sp,20
8000332a:	ef 4c ff f8 	st.w	r7[-8],r12
8000332e:	12 98       	mov	r8,r9
80003330:	16 99       	mov	r9,r11
80003332:	ef 69 ff f4 	st.b	r7[-12],r9
80003336:	14 99       	mov	r9,r10
80003338:	ef 69 ff f0 	st.b	r7[-16],r9
8000333c:	ef 68 ff ec 	st.b	r7[-20],r8
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80003340:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003344:	30 18       	mov	r8,1
80003346:	f0 09 18 00 	cp.b	r9,r8
8000334a:	e0 8b 00 09 	brhi	8000335c <spi_selectionMode+0x3a>
8000334e:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003352:	30 18       	mov	r8,1
80003354:	f0 09 18 00 	cp.b	r9,r8
80003358:	e0 88 00 04 	brls	80003360 <spi_selectionMode+0x3e>
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
8000335c:	30 28       	mov	r8,2
8000335e:	c2 88       	rjmp	800033ae <spi_selectionMode+0x8c>
	}

	u_avr32_spi_mr.mr = spi->mr;
80003360:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003364:	70 18       	ld.w	r8,r8[0x4]
80003366:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.ps = variable_ps;
8000336a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000336e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003372:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003376:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000337a:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8000337e:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003382:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003386:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000338a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000338e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003392:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80003396:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.dlybcs = delay;
8000339a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000339e:	ef 68 ff fc 	st.b	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
800033a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800033a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033aa:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
800033ac:	30 08       	mov	r8,0
}
800033ae:	10 9c       	mov	r12,r8
800033b0:	2f bd       	sub	sp,-20
800033b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800033b6 <spi_selectChip>:

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
800033b6:	eb cd 40 80 	pushm	r7,lr
800033ba:	1a 97       	mov	r7,sp
800033bc:	20 2d       	sub	sp,8
800033be:	ef 4c ff fc 	st.w	r7[-4],r12
800033c2:	16 98       	mov	r8,r11
800033c4:	ef 68 ff f8 	st.b	r7[-8],r8
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800033c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033cc:	70 18       	ld.w	r8,r8[0x4]
800033ce:	10 99       	mov	r9,r8
800033d0:	ea 19 00 0f 	orh	r9,0xf
800033d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033d8:	91 19       	st.w	r8[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800033da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033de:	70 18       	ld.w	r8,r8[0x4]
800033e0:	e2 18 00 04 	andl	r8,0x4,COH
800033e4:	c1 90       	breq	80003416 <spi_selectChip+0x60>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800033e6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800033ea:	30 e8       	mov	r8,14
800033ec:	f0 09 18 00 	cp.b	r9,r8
800033f0:	e0 88 00 04 	brls	800033f8 <spi_selectChip+0x42>
			return SPI_ERROR_ARGUMENT;
800033f4:	30 28       	mov	r8,2
800033f6:	c2 88       	rjmp	80003446 <spi_selectChip+0x90>
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800033f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033fc:	70 19       	ld.w	r9,r8[0x4]
				(chip << AVR32_SPI_MR_PCS_OFFSET);
800033fe:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003402:	b1 68       	lsl	r8,0x10
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003404:	ea 18 ff f0 	orh	r8,0xfff0
80003408:	e8 18 ff ff 	orl	r8,0xffff
8000340c:	10 69       	and	r9,r8
8000340e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003412:	91 19       	st.w	r8[0x4],r9
80003414:	c1 88       	rjmp	80003444 <spi_selectChip+0x8e>
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80003416:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000341a:	30 38       	mov	r8,3
8000341c:	f0 09 18 00 	cp.b	r9,r8
80003420:	e0 88 00 04 	brls	80003428 <spi_selectChip+0x72>
			return SPI_ERROR_ARGUMENT;
80003424:	30 28       	mov	r8,2
80003426:	c1 08       	rjmp	80003446 <spi_selectChip+0x90>
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003428:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000342c:	70 19       	ld.w	r9,r8[0x4]
8000342e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003432:	2f 08       	sub	r8,-16
80003434:	30 1a       	mov	r10,1
80003436:	f4 08 09 48 	lsl	r8,r10,r8
8000343a:	5c d8       	com	r8
8000343c:	10 69       	and	r9,r8
8000343e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003442:	91 19       	st.w	r8[0x4],r9
	}

	return SPI_OK;
80003444:	30 08       	mov	r8,0
}
80003446:	10 9c       	mov	r12,r8
80003448:	2f ed       	sub	sp,-8
8000344a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000344e <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000344e:	eb cd 40 80 	pushm	r7,lr
80003452:	1a 97       	mov	r7,sp
80003454:	20 3d       	sub	sp,12
80003456:	ef 4c ff f8 	st.w	r7[-8],r12
8000345a:	16 98       	mov	r8,r11
8000345c:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
80003460:	e0 68 3a 98 	mov	r8,15000
80003464:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003468:	c0 f8       	rjmp	80003486 <spi_unselectChip+0x38>
		if (!timeout--) {
8000346a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000346e:	58 08       	cp.w	r8,0
80003470:	5f 08       	sreq	r8
80003472:	5c 58       	castu.b	r8
80003474:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003478:	20 19       	sub	r9,1
8000347a:	ef 49 ff fc 	st.w	r7[-4],r9
8000347e:	58 08       	cp.w	r8,0
80003480:	c0 30       	breq	80003486 <spi_unselectChip+0x38>
			return SPI_ERROR_TIMEOUT;
80003482:	30 18       	mov	r8,1
80003484:	c1 68       	rjmp	800034b0 <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003486:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000348a:	70 48       	ld.w	r8,r8[0x10]
8000348c:	e2 18 02 00 	andl	r8,0x200,COH
80003490:	ce d0       	breq	8000346a <spi_unselectChip+0x1c>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003492:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003496:	70 18       	ld.w	r8,r8[0x4]
80003498:	10 99       	mov	r9,r8
8000349a:	ea 19 00 0f 	orh	r9,0xf
8000349e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034a2:	91 19       	st.w	r8[0x4],r9

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
800034a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034a8:	fc 19 01 00 	movh	r9,0x100
800034ac:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
	xSemaphoreGive(xSPIMutex);
#endif

	return SPI_OK;
800034ae:	30 08       	mov	r8,0
}
800034b0:	10 9c       	mov	r12,r8
800034b2:	2f dd       	sub	sp,-12
800034b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800034b8 <spi_setupChipReg>:

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800034b8:	eb cd 40 80 	pushm	r7,lr
800034bc:	1a 97       	mov	r7,sp
800034be:	20 5d       	sub	sp,20
800034c0:	ef 4c ff f4 	st.w	r7[-12],r12
800034c4:	ef 4b ff f0 	st.w	r7[-16],r11
800034c8:	ef 4a ff ec 	st.w	r7[-20],r10
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800034cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800034d0:	f1 39 00 0c 	ld.ub	r9,r8[12]
800034d4:	30 38       	mov	r8,3
800034d6:	f0 09 18 00 	cp.b	r9,r8
800034da:	e0 8b 00 1d 	brhi	80003514 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
800034de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800034e2:	f1 39 00 0b 	ld.ub	r9,r8[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800034e6:	30 18       	mov	r8,1
800034e8:	f0 09 18 00 	cp.b	r9,r8
800034ec:	e0 8b 00 14 	brhi	80003514 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800034f0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800034f4:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800034f8:	30 78       	mov	r8,7
800034fa:	f0 09 18 00 	cp.b	r9,r8
800034fe:	e0 88 00 0b 	brls	80003514 <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003502:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003506:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
8000350a:	31 08       	mov	r8,16
8000350c:	f0 09 18 00 	cp.b	r9,r8
80003510:	e0 88 00 04 	brls	80003518 <spi_setupChipReg+0x60>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
80003514:	30 28       	mov	r8,2
80003516:	c8 d8       	rjmp	80003630 <spi_setupChipReg+0x178>
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003518:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000351c:	70 18       	ld.w	r8,r8[0x4]
8000351e:	ee fb ff ec 	ld.w	r11,r7[-20]
80003522:	10 9c       	mov	r12,r8
80003524:	f0 1f 00 45 	mcall	80003638 <spi_setupChipReg+0x180>
80003528:	18 98       	mov	r8,r12
8000352a:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv < 0) {
8000352e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003532:	58 08       	cp.w	r8,0
80003534:	c0 34       	brge	8000353a <spi_setupChipReg+0x82>
		return SPI_ERROR_ARGUMENT;
80003536:	30 28       	mov	r8,2
80003538:	c7 c8       	rjmp	80003630 <spi_setupChipReg+0x178>
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
8000353a:	30 08       	mov	r8,0
8000353c:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003540:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003544:	f1 38 00 0c 	ld.ub	r8,r8[12]
80003548:	a1 98       	lsr	r8,0x1
8000354a:	5c 58       	castu.b	r8
8000354c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003550:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003554:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003558:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
8000355c:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003560:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003564:	f1 38 00 0c 	ld.ub	r8,r8[12]
80003568:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000356c:	5f 08       	sreq	r8
8000356e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003572:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003576:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
8000357a:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
8000357e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003582:	f1 38 00 0b 	ld.ub	r8,r8[11]
80003586:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000358a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000358e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003592:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80003596:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
8000359a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000359e:	f1 38 00 08 	ld.ub	r8,r8[8]
800035a2:	20 88       	sub	r8,8
800035a4:	5c 58       	castu.b	r8
800035a6:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800035aa:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800035ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035b2:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
800035b6:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800035ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800035be:	5c 58       	castu.b	r8
800035c0:	ef 68 ff fa 	st.b	r7[-6],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800035c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035c8:	f1 38 00 09 	ld.ub	r8,r8[9]
800035cc:	ef 68 ff f9 	st.b	r7[-7],r8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800035d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035d4:	f1 38 00 0a 	ld.ub	r8,r8[10]
800035d8:	ef 68 ff f8 	st.b	r7[-8],r8

	switch (options->reg) {
800035dc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035e0:	11 88       	ld.ub	r8,r8[0x0]
800035e2:	58 18       	cp.w	r8,1
800035e4:	c1 10       	breq	80003606 <spi_setupChipReg+0x14e>
800035e6:	e0 89 00 05 	brgt	800035f0 <spi_setupChipReg+0x138>
800035ea:	58 08       	cp.w	r8,0
800035ec:	c0 70       	breq	800035fa <spi_setupChipReg+0x142>
800035ee:	c1 e8       	rjmp	8000362a <spi_setupChipReg+0x172>
800035f0:	58 28       	cp.w	r8,2
800035f2:	c1 00       	breq	80003612 <spi_setupChipReg+0x15a>
800035f4:	58 38       	cp.w	r8,3
800035f6:	c1 40       	breq	8000361e <spi_setupChipReg+0x166>
800035f8:	c1 98       	rjmp	8000362a <spi_setupChipReg+0x172>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800035fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800035fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003602:	91 c9       	st.w	r8[0x30],r9
		break;
80003604:	c1 58       	rjmp	8000362e <spi_setupChipReg+0x176>

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003606:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000360a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000360e:	91 d9       	st.w	r8[0x34],r9
		break;
80003610:	c0 f8       	rjmp	8000362e <spi_setupChipReg+0x176>

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003612:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003616:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000361a:	91 e9       	st.w	r8[0x38],r9
		break;
8000361c:	c0 98       	rjmp	8000362e <spi_setupChipReg+0x176>

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
8000361e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003622:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003626:	91 f9       	st.w	r8[0x3c],r9
		break;
80003628:	c0 38       	rjmp	8000362e <spi_setupChipReg+0x176>

	default:
		return SPI_ERROR_ARGUMENT;
8000362a:	30 28       	mov	r8,2
8000362c:	c0 28       	rjmp	80003630 <spi_setupChipReg+0x178>
			}
		}
	}
#endif

	return SPI_OK;
8000362e:	30 08       	mov	r8,0
}
80003630:	10 9c       	mov	r12,r8
80003632:	2f bd       	sub	sp,-20
80003634:	e3 cd 80 80 	ldm	sp++,r7,pc
80003638:	80 00       	ld.sh	r0,r0[0x0]
8000363a:	32 3e       	mov	lr,35

8000363c <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
8000363c:	eb cd 40 80 	pushm	r7,lr
80003640:	1a 97       	mov	r7,sp
80003642:	20 1d       	sub	sp,4
80003644:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000364c:	30 19       	mov	r9,1
8000364e:	91 09       	st.w	r8[0x0],r9
}
80003650:	2f fd       	sub	sp,-4
80003652:	e3 cd 80 80 	ldm	sp++,r7,pc

80003656 <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003656:	eb cd 40 80 	pushm	r7,lr
8000365a:	1a 97       	mov	r7,sp
8000365c:	20 3d       	sub	sp,12
8000365e:	ef 4c ff f8 	st.w	r7[-8],r12
80003662:	16 98       	mov	r8,r11
80003664:	ef 58 ff f4 	st.h	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
80003668:	e0 68 3a 98 	mov	r8,15000
8000366c:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003670:	c0 f8       	rjmp	8000368e <spi_write+0x38>
		if (!timeout--) {
80003672:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003676:	58 08       	cp.w	r8,0
80003678:	5f 08       	sreq	r8
8000367a:	5c 58       	castu.b	r8
8000367c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003680:	20 19       	sub	r9,1
80003682:	ef 49 ff fc 	st.w	r7[-4],r9
80003686:	58 08       	cp.w	r8,0
80003688:	c0 30       	breq	8000368e <spi_write+0x38>
			return SPI_ERROR_TIMEOUT;
8000368a:	30 18       	mov	r8,1
8000368c:	c0 d8       	rjmp	800036a6 <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
8000368e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003692:	70 48       	ld.w	r8,r8[0x10]
80003694:	e2 18 00 02 	andl	r8,0x2,COH
80003698:	ce d0       	breq	80003672 <spi_write+0x1c>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8000369a:	ef 19 ff f4 	ld.uh	r9,r7[-12]
8000369e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036a2:	91 39       	st.w	r8[0xc],r9

	return SPI_OK;
800036a4:	30 08       	mov	r8,0
}
800036a6:	10 9c       	mov	r12,r8
800036a8:	2f dd       	sub	sp,-12
800036aa:	e3 cd 80 80 	ldm	sp++,r7,pc

800036ae <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
800036ae:	eb cd 40 80 	pushm	r7,lr
800036b2:	1a 97       	mov	r7,sp
800036b4:	20 3d       	sub	sp,12
800036b6:	ef 4c ff f8 	st.w	r7[-8],r12
800036ba:	ef 4b ff f4 	st.w	r7[-12],r11
	unsigned int timeout = SPI_TIMEOUT;
800036be:	e0 68 3a 98 	mov	r8,15000
800036c2:	ef 48 ff fc 	st.w	r7[-4],r8

	while ((spi->sr &
800036c6:	c0 f8       	rjmp	800036e4 <spi_read+0x36>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
800036c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800036cc:	58 08       	cp.w	r8,0
800036ce:	5f 08       	sreq	r8
800036d0:	5c 58       	castu.b	r8
800036d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800036d6:	20 19       	sub	r9,1
800036d8:	ef 49 ff fc 	st.w	r7[-4],r9
800036dc:	58 08       	cp.w	r8,0
800036de:	c0 30       	breq	800036e4 <spi_read+0x36>
			return SPI_ERROR_TIMEOUT;
800036e0:	30 18       	mov	r8,1
800036e2:	c1 18       	rjmp	80003704 <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800036e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036e8:	70 48       	ld.w	r8,r8[0x10]
800036ea:	e2 18 02 01 	andl	r8,0x201,COH
800036ee:	e0 48 02 01 	cp.w	r8,513
800036f2:	ce b1       	brne	800036c8 <spi_read+0x1a>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800036f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036f8:	70 28       	ld.w	r8,r8[0x8]
800036fa:	5c 88       	casts.h	r8
800036fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003700:	b2 08       	st.h	r9[0x0],r8

	return SPI_OK;
80003702:	30 08       	mov	r8,0
}
80003704:	10 9c       	mov	r12,r8
80003706:	2f dd       	sub	sp,-12
80003708:	e3 cd 80 80 	ldm	sp++,r7,pc

8000370c <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
8000370c:	eb cd 40 80 	pushm	r7,lr
80003710:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80003712:	30 3b       	mov	r11,3
80003714:	33 bc       	mov	r12,59
80003716:	f0 1f 00 2d 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000371a:	30 3b       	mov	r11,3
8000371c:	33 cc       	mov	r12,60
8000371e:	f0 1f 00 2b 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80003722:	30 3b       	mov	r11,3
80003724:	33 dc       	mov	r12,61
80003726:	f0 1f 00 29 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000372a:	30 3b       	mov	r11,3
8000372c:	33 ec       	mov	r12,62
8000372e:	f0 1f 00 27 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80003732:	30 3b       	mov	r11,3
80003734:	33 3c       	mov	r12,51
80003736:	f0 1f 00 25 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000373a:	30 3b       	mov	r11,3
8000373c:	33 4c       	mov	r12,52
8000373e:	f0 1f 00 23 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80003742:	30 3b       	mov	r11,3
80003744:	33 5c       	mov	r12,53
80003746:	f0 1f 00 21 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000374a:	30 3b       	mov	r11,3
8000374c:	33 6c       	mov	r12,54
8000374e:	f0 1f 00 1f 	mcall	800037c8 <board_init+0xbc>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
80003752:	30 0b       	mov	r11,0
80003754:	35 8c       	mov	r12,88
80003756:	f0 1f 00 1d 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
8000375a:	30 0b       	mov	r11,0
8000375c:	35 5c       	mov	r12,85
8000375e:	f0 1f 00 1b 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
80003762:	30 0b       	mov	r11,0
80003764:	35 2c       	mov	r12,82
80003766:	f0 1f 00 19 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
8000376a:	30 0b       	mov	r11,0
8000376c:	31 4c       	mov	r12,20
8000376e:	f0 1f 00 17 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
80003772:	30 0b       	mov	r11,0
80003774:	31 9c       	mov	r12,25
80003776:	f0 1f 00 15 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
8000377a:	30 0b       	mov	r11,0
8000377c:	31 ac       	mov	r12,26
8000377e:	f0 1f 00 13 	mcall	800037c8 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
80003782:	30 0b       	mov	r11,0
80003784:	31 bc       	mov	r12,27
80003786:	f0 1f 00 11 	mcall	800037c8 <board_init+0xbc>
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
8000378a:	30 4b       	mov	r11,4
8000378c:	49 0c       	lddpc	r12,800037cc <board_init+0xc0>
8000378e:	f0 1f 00 11 	mcall	800037d0 <board_init+0xc4>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
80003792:	30 4b       	mov	r11,4
80003794:	49 0c       	lddpc	r12,800037d4 <board_init+0xc8>
80003796:	f0 1f 00 0f 	mcall	800037d0 <board_init+0xc4>

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
8000379a:	30 0b       	mov	r11,0
8000379c:	30 2c       	mov	r12,2
8000379e:	f0 1f 00 0b 	mcall	800037c8 <board_init+0xbc>
800037a2:	30 0b       	mov	r11,0
800037a4:	30 7c       	mov	r12,7
800037a6:	f0 1f 00 09 	mcall	800037c8 <board_init+0xbc>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
800037aa:	30 2b       	mov	r11,2
800037ac:	48 bc       	lddpc	r12,800037d8 <board_init+0xcc>
800037ae:	f0 1f 00 09 	mcall	800037d0 <board_init+0xc4>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION },
		{USART_TXD_PIN, USART_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
800037b2:	30 2b       	mov	r11,2
800037b4:	48 ac       	lddpc	r12,800037dc <board_init+0xd0>
800037b6:	f0 1f 00 07 	mcall	800037d0 <board_init+0xc4>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT0_GPIO_MAP = {
		{USART0_RXD_PIN, USART0_RXD_FUNCTION },
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
800037ba:	30 2b       	mov	r11,2
800037bc:	48 9c       	lddpc	r12,800037e0 <board_init+0xd4>
800037be:	f0 1f 00 05 	mcall	800037d0 <board_init+0xc4>
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
800037c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800037c6:	00 00       	add	r0,r0
800037c8:	80 00       	ld.sh	r0,r0[0x0]
800037ca:	39 64       	mov	r4,-106
800037cc:	80 00       	ld.sh	r0,r0[0x0]
800037ce:	9c 00       	ld.sh	r0,lr[0x0]
800037d0:	80 00       	ld.sh	r0,r0[0x0]
800037d2:	37 e4       	mov	r4,126
800037d4:	80 00       	ld.sh	r0,r0[0x0]
800037d6:	9c 20       	ld.sh	r0,lr[0x4]
800037d8:	80 00       	ld.sh	r0,r0[0x0]
800037da:	9c 40       	ld.sh	r0,lr[0x8]
800037dc:	80 00       	ld.sh	r0,r0[0x0]
800037de:	9c 50       	ld.sh	r0,lr[0xa]
800037e0:	80 00       	ld.sh	r0,r0[0x0]
800037e2:	9c 60       	ld.sh	r0,lr[0xc]

800037e4 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800037e4:	eb cd 40 80 	pushm	r7,lr
800037e8:	1a 97       	mov	r7,sp
800037ea:	20 4d       	sub	sp,16
800037ec:	ef 4c ff f4 	st.w	r7[-12],r12
800037f0:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
800037f4:	30 08       	mov	r8,0
800037f6:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
800037fa:	30 08       	mov	r8,0
800037fc:	ef 48 ff fc 	st.w	r7[-4],r8
80003800:	c1 c8       	rjmp	80003838 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80003802:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003806:	70 19       	ld.w	r9,r8[0x4]
80003808:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000380c:	70 08       	ld.w	r8,r8[0x0]
8000380e:	12 9b       	mov	r11,r9
80003810:	10 9c       	mov	r12,r8
80003812:	f0 1f 00 10 	mcall	80003850 <gpio_enable_module+0x6c>
80003816:	18 98       	mov	r8,r12
80003818:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000381c:	f3 e8 10 08 	or	r8,r9,r8
80003820:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
80003824:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003828:	2f 88       	sub	r8,-8
8000382a:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
8000382e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003832:	2f f8       	sub	r8,-1
80003834:	ef 48 ff fc 	st.w	r7[-4],r8
80003838:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000383c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003840:	10 39       	cp.w	r9,r8
80003842:	ce 03       	brcs	80003802 <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
80003844:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80003848:	10 9c       	mov	r12,r8
8000384a:	2f cd       	sub	sp,-16
8000384c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003850:	80 00       	ld.sh	r0,r0[0x0]
80003852:	38 54       	mov	r4,-123

80003854 <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80003854:	eb cd 40 80 	pushm	r7,lr
80003858:	1a 97       	mov	r7,sp
8000385a:	20 3d       	sub	sp,12
8000385c:	ef 4c ff f8 	st.w	r7[-8],r12
80003860:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003864:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003868:	a5 98       	lsr	r8,0x5
8000386a:	a9 68       	lsl	r8,0x8
8000386c:	e0 28 f0 00 	sub	r8,61440
80003870:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
80003874:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003878:	58 18       	cp.w	r8,1
8000387a:	c1 e0       	breq	800038b6 <gpio_enable_module_pin+0x62>
8000387c:	c0 63       	brcs	80003888 <gpio_enable_module_pin+0x34>
8000387e:	58 28       	cp.w	r8,2
80003880:	c3 20       	breq	800038e4 <gpio_enable_module_pin+0x90>
80003882:	58 38       	cp.w	r8,3
80003884:	c4 70       	breq	80003912 <gpio_enable_module_pin+0xbe>
80003886:	c5 d8       	rjmp	80003940 <gpio_enable_module_pin+0xec>
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80003888:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000388c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003890:	30 19       	mov	r9,1
80003892:	f2 08 09 48 	lsl	r8,r9,r8
80003896:	10 99       	mov	r9,r8
80003898:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000389c:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
8000389e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038a2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800038a6:	30 19       	mov	r9,1
800038a8:	f2 08 09 48 	lsl	r8,r9,r8
800038ac:	10 99       	mov	r9,r8
800038ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800038b2:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800038b4:	c4 88       	rjmp	80003944 <gpio_enable_module_pin+0xf0>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800038b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800038be:	30 19       	mov	r9,1
800038c0:	f2 08 09 48 	lsl	r8,r9,r8
800038c4:	10 99       	mov	r9,r8
800038c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800038ca:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800038cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038d0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800038d4:	30 19       	mov	r9,1
800038d6:	f2 08 09 48 	lsl	r8,r9,r8
800038da:	10 99       	mov	r9,r8
800038dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800038e0:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800038e2:	c3 18       	rjmp	80003944 <gpio_enable_module_pin+0xf0>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800038e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800038ec:	30 19       	mov	r9,1
800038ee:	f2 08 09 48 	lsl	r8,r9,r8
800038f2:	10 99       	mov	r9,r8
800038f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800038f8:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800038fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038fe:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003902:	30 19       	mov	r9,1
80003904:	f2 08 09 48 	lsl	r8,r9,r8
80003908:	10 99       	mov	r9,r8
8000390a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000390e:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80003910:	c1 a8       	rjmp	80003944 <gpio_enable_module_pin+0xf0>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80003912:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003916:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000391a:	30 19       	mov	r9,1
8000391c:	f2 08 09 48 	lsl	r8,r9,r8
80003920:	10 99       	mov	r9,r8
80003922:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003926:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80003928:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000392c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003930:	30 19       	mov	r9,1
80003932:	f2 08 09 48 	lsl	r8,r9,r8
80003936:	10 99       	mov	r9,r8
80003938:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000393c:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000393e:	c0 38       	rjmp	80003944 <gpio_enable_module_pin+0xf0>
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
80003940:	30 18       	mov	r8,1
80003942:	c0 d8       	rjmp	8000395c <gpio_enable_module_pin+0x108>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80003944:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003948:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000394c:	30 19       	mov	r9,1
8000394e:	f2 08 09 48 	lsl	r8,r9,r8
80003952:	10 99       	mov	r9,r8
80003954:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003958:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
8000395a:	30 08       	mov	r8,0
}
8000395c:	10 9c       	mov	r12,r8
8000395e:	2f dd       	sub	sp,-12
80003960:	e3 cd 80 80 	ldm	sp++,r7,pc

80003964 <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80003964:	eb cd 40 80 	pushm	r7,lr
80003968:	1a 97       	mov	r7,sp
8000396a:	20 3d       	sub	sp,12
8000396c:	ef 4c ff f8 	st.w	r7[-8],r12
80003970:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003974:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003978:	a5 98       	lsr	r8,0x5
8000397a:	a9 68       	lsl	r8,0x8
8000397c:	e0 28 f0 00 	sub	r8,61440
80003980:	ef 48 ff fc 	st.w	r7[-4],r8
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
80003984:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003988:	e2 18 00 04 	andl	r8,0x4,COH
8000398c:	c0 e0       	breq	800039a8 <gpio_configure_pin+0x44>
		gpio_port->puers = 1 << (pin & 0x1F);
8000398e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003992:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003996:	30 19       	mov	r9,1
80003998:	f2 08 09 48 	lsl	r8,r9,r8
8000399c:	10 99       	mov	r9,r8
8000399e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039a2:	f1 49 00 74 	st.w	r8[116],r9
800039a6:	c0 d8       	rjmp	800039c0 <gpio_configure_pin+0x5c>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800039a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039ac:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800039b0:	30 19       	mov	r9,1
800039b2:	f2 08 09 48 	lsl	r8,r9,r8
800039b6:	10 99       	mov	r9,r8
800039b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039bc:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
800039c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039c4:	e2 18 00 80 	andl	r8,0x80,COH
800039c8:	c5 a0       	breq	80003a7c <gpio_configure_pin+0x118>
		if (flags & GPIO_BOTHEDGES) {
800039ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039ce:	e2 18 01 80 	andl	r8,0x180,COH
800039d2:	c1 a0       	breq	80003a06 <gpio_configure_pin+0xa2>
			gpio_port->imr0c = 1 << (pin & 0x1F);
800039d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800039dc:	30 19       	mov	r9,1
800039de:	f2 08 09 48 	lsl	r8,r9,r8
800039e2:	10 99       	mov	r9,r8
800039e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039e8:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
800039ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039f0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800039f4:	30 19       	mov	r9,1
800039f6:	f2 08 09 48 	lsl	r8,r9,r8
800039fa:	10 99       	mov	r9,r8
800039fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a00:	f1 49 00 b8 	st.w	r8[184],r9
80003a04:	c3 c8       	rjmp	80003a7c <gpio_configure_pin+0x118>
		} else if (flags & GPIO_RISING) {
80003a06:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a0a:	e2 18 02 80 	andl	r8,0x280,COH
80003a0e:	c1 a0       	breq	80003a42 <gpio_configure_pin+0xde>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80003a10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a14:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a18:	30 19       	mov	r9,1
80003a1a:	f2 08 09 48 	lsl	r8,r9,r8
80003a1e:	10 99       	mov	r9,r8
80003a20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a24:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80003a28:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a2c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a30:	30 19       	mov	r9,1
80003a32:	f2 08 09 48 	lsl	r8,r9,r8
80003a36:	10 99       	mov	r9,r8
80003a38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a3c:	f1 49 00 b8 	st.w	r8[184],r9
80003a40:	c1 e8       	rjmp	80003a7c <gpio_configure_pin+0x118>
		} else if (flags & GPIO_FALLING) {
80003a42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a46:	e2 18 03 80 	andl	r8,0x380,COH
80003a4a:	c1 90       	breq	80003a7c <gpio_configure_pin+0x118>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80003a4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a50:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a54:	30 19       	mov	r9,1
80003a56:	f2 08 09 48 	lsl	r8,r9,r8
80003a5a:	10 99       	mov	r9,r8
80003a5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a60:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80003a64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a68:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a6c:	30 19       	mov	r9,1
80003a6e:	f2 08 09 48 	lsl	r8,r9,r8
80003a72:	10 99       	mov	r9,r8
80003a74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a78:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80003a7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a80:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003a84:	5c 58       	castu.b	r8
80003a86:	c2 c0       	breq	80003ade <gpio_configure_pin+0x17a>
		if (flags & GPIO_INIT_HIGH) {
80003a88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003a8c:	e2 18 00 02 	andl	r8,0x2,COH
80003a90:	c0 e0       	breq	80003aac <gpio_configure_pin+0x148>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80003a92:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a96:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003a9a:	30 19       	mov	r9,1
80003a9c:	f2 08 09 48 	lsl	r8,r9,r8
80003aa0:	10 99       	mov	r9,r8
80003aa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003aa6:	f1 49 00 54 	st.w	r8[84],r9
80003aaa:	c0 d8       	rjmp	80003ac4 <gpio_configure_pin+0x160>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80003aac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ab0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003ab4:	30 19       	mov	r9,1
80003ab6:	f2 08 09 48 	lsl	r8,r9,r8
80003aba:	10 99       	mov	r9,r8
80003abc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ac0:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80003ac4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ac8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003acc:	30 19       	mov	r9,1
80003ace:	f2 08 09 48 	lsl	r8,r9,r8
80003ad2:	10 99       	mov	r9,r8
80003ad4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ad8:	f1 49 00 44 	st.w	r8[68],r9
80003adc:	c0 d8       	rjmp	80003af6 <gpio_configure_pin+0x192>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80003ade:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ae2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003ae6:	30 19       	mov	r9,1
80003ae8:	f2 08 09 48 	lsl	r8,r9,r8
80003aec:	10 99       	mov	r9,r8
80003aee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003af2:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003af6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003afa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003afe:	30 19       	mov	r9,1
80003b00:	f2 08 09 48 	lsl	r8,r9,r8
80003b04:	10 99       	mov	r9,r8
80003b06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b0a:	91 19       	st.w	r8[0x4],r9
}
80003b0c:	2f dd       	sub	sp,-12
80003b0e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b12 <gpio_set_gpio_pin>:
/** \brief Drives a GPIO pin to 1.
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
80003b12:	eb cd 40 80 	pushm	r7,lr
80003b16:	1a 97       	mov	r7,sp
80003b18:	20 2d       	sub	sp,8
80003b1a:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003b1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b22:	a5 98       	lsr	r8,0x5
80003b24:	a9 68       	lsl	r8,0x8
80003b26:	e0 28 f0 00 	sub	r8,61440
80003b2a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80003b2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b32:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003b36:	30 19       	mov	r9,1
80003b38:	f2 08 09 48 	lsl	r8,r9,r8
80003b3c:	10 99       	mov	r9,r8
80003b3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b42:	f1 49 00 54 	st.w	r8[84],r9
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80003b46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003b4e:	30 19       	mov	r9,1
80003b50:	f2 08 09 48 	lsl	r8,r9,r8
80003b54:	10 99       	mov	r9,r8
80003b56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b5a:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003b5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b62:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003b66:	30 19       	mov	r9,1
80003b68:	f2 08 09 48 	lsl	r8,r9,r8
80003b6c:	10 99       	mov	r9,r8
80003b6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b72:	91 19       	st.w	r8[0x4],r9
}
80003b74:	2f ed       	sub	sp,-8
80003b76:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b7a <gpio_clr_gpio_pin>:
/** \brief Drives a GPIO pin to 0.
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
80003b7a:	eb cd 40 80 	pushm	r7,lr
80003b7e:	1a 97       	mov	r7,sp
80003b80:	20 2d       	sub	sp,8
80003b82:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80003b86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b8a:	a5 98       	lsr	r8,0x5
80003b8c:	a9 68       	lsl	r8,0x8
80003b8e:	e0 28 f0 00 	sub	r8,61440
80003b92:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80003b96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b9a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003b9e:	30 19       	mov	r9,1
80003ba0:	f2 08 09 48 	lsl	r8,r9,r8
80003ba4:	10 99       	mov	r9,r8
80003ba6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003baa:	f1 49 00 58 	st.w	r8[88],r9
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80003bae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bb2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003bb6:	30 19       	mov	r9,1
80003bb8:	f2 08 09 48 	lsl	r8,r9,r8
80003bbc:	10 99       	mov	r9,r8
80003bbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003bc2:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80003bc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bca:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80003bce:	30 19       	mov	r9,1
80003bd0:	f2 08 09 48 	lsl	r8,r9,r8
80003bd4:	10 99       	mov	r9,r8
80003bd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003bda:	91 19       	st.w	r8[0x4],r9
}
80003bdc:	2f ed       	sub	sp,-8
80003bde:	e3 cd 80 80 	ldm	sp++,r7,pc
80003be2:	d7 03       	nop

80003be4 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80003be4:	eb cd 40 80 	pushm	r7,lr
80003be8:	1a 97       	mov	r7,sp
80003bea:	20 3d       	sub	sp,12
80003bec:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80003bf0:	fe 78 08 00 	mov	r8,-63488
80003bf4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003bf8:	f2 09 11 03 	rsub	r9,r9,3
80003bfc:	28 09       	sub	r9,-128
80003bfe:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003c02:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80003c06:	fe 78 08 00 	mov	r8,-63488
80003c0a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c0e:	2c 09       	sub	r9,-64
80003c10:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003c14:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003c18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c1c:	58 08       	cp.w	r8,0
80003c1e:	c1 30       	breq	80003c44 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003c20:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003c24:	48 b8       	lddpc	r8,80003c50 <_get_interrupt_handler+0x6c>
80003c26:	a1 79       	lsl	r9,0x1
80003c28:	2f f9       	sub	r9,-1
80003c2a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003c2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c32:	f0 08 12 00 	clz	r8,r8
80003c36:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80003c3a:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80003c3c:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80003c40:	70 08       	ld.w	r8,r8[0x0]
80003c42:	c0 28       	rjmp	80003c46 <_get_interrupt_handler+0x62>
80003c44:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80003c46:	10 9c       	mov	r12,r8
80003c48:	2f dd       	sub	sp,-12
80003c4a:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c4e:	00 00       	add	r0,r0
80003c50:	80 00       	ld.sh	r0,r0[0x0]
80003c52:	9c 70       	ld.sh	r0,lr[0xe]

80003c54 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80003c54:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
80003c58:	fe c0 a2 58 	sub	r0,pc,-23976

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80003c5c:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80003c60:	d5 53       	csrf	0x15
  cp      r0, r1
80003c62:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80003c64:	e0 61 05 10 	mov	r1,1296
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
80003c68:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
80003c6a:	c0 72       	brcc	80003c78 <idata_load_loop_end>
  cp      r0, r1
80003c6c:	fe c2 99 a4 	sub	r2,pc,-26204

80003c70 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80003c70:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
80003c72:	a1 24       	st.d	r0++,r4
  cp      r0, r1
80003c74:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
80003c76:	cf d3       	brcs	80003c70 <idata_load_loop>

80003c78 <idata_load_loop_end>:
  mov     r2, 0
80003c78:	e0 60 05 10 	mov	r0,1296
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
80003c7c:	e0 61 06 60 	mov	r1,1632
  cp      r0, r1
  brlo    udata_clear_loop
80003c80:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
80003c82:	c0 62       	brcc	80003c8e <udata_clear_loop_end>
80003c84:	30 02       	mov	r2,0
80003c86:	30 03       	mov	r3,0

80003c88 <udata_clear_loop>:
80003c88:	a1 22       	st.d	r0++,r2
80003c8a:	02 30       	cp.w	r0,r1
80003c8c:	cf e3       	brcs	80003c88 <udata_clear_loop>

80003c8e <udata_clear_loop_end>:
80003c8e:	fe cf ff 3a 	sub	pc,pc,-198
80003c92:	d7 03       	nop
80003c94:	25 66       	sub	r6,86
80003c96:	00 00       	add	r0,r0
80003c98:	25 6c       	sub	r12,86
80003c9a:	75 00       	ld.w	r0,r10[0x40]
80003c9c:	78 2a       	ld.w	r10,r12[0x8]
80003c9e:	79 3d       	ld.w	sp,r12[0x4c]
80003ca0:	7a 00       	ld.w	r0,sp[0x0]
80003ca2:	00 00       	add	r0,r0
80003ca4:	54 69       	stdsp	sp[0x118],r9
80003ca6:	6d 65       	ld.w	r5,r6[0x58]
80003ca8:	3a 00       	mov	r0,-96
80003caa:	00 00       	add	r0,r0
80003cac:	43 79       	lddsp	r9,sp[0xdc]
80003cae:	63 6c       	ld.w	r12,r1[0x58]
80003cb0:	65 73       	ld.w	r3,r2[0x5c]
80003cb2:	3a 00       	mov	r0,-96
80003cb4:	61 2a       	ld.w	r10,r0[0x48]
80003cb6:	62 3d       	ld.w	sp,r1[0xc]
80003cb8:	63 00       	ld.w	r0,r1[0x40]
	...

80003cbc <init_disp>:

void init_disp (void);

//Initialize LCD display
void init_disp (void)
{
80003cbc:	eb cd 40 80 	pushm	r7,lr
80003cc0:	1a 97       	mov	r7,sp
80003cc2:	20 4d       	sub	sp,16
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	};
80003cc4:	49 b8       	lddpc	r8,80003d30 <init_disp+0x74>
80003cc6:	ee ca 00 10 	sub	r10,r7,16
80003cca:	10 9b       	mov	r11,r8
80003ccc:	f6 e8 00 00 	ld.d	r8,r11[0]
80003cd0:	f4 e9 00 00 	st.d	r10[0],r8
80003cd4:	f6 e8 00 08 	ld.d	r8,r11[8]
80003cd8:	f4 e9 00 08 	st.d	r10[8],r8

	// Assign I/Os to SPI
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
80003cdc:	30 4b       	mov	r11,4
80003cde:	49 6c       	lddpc	r12,80003d34 <init_disp+0x78>
80003ce0:	f0 1f 00 16 	mcall	80003d38 <init_disp+0x7c>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));

	// Initialize as master
	spi_initMaster(DIP204_SPI, &spiOptions);
80003ce4:	ee c8 00 10 	sub	r8,r7,16
80003ce8:	10 9b       	mov	r11,r8
80003cea:	fe 7c 28 00 	mov	r12,-55296
80003cee:	f0 1f 00 14 	mcall	80003d3c <init_disp+0x80>

	// Set selection mode: variable_ps, pcs_decode, delay
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
80003cf2:	30 09       	mov	r9,0
80003cf4:	30 0a       	mov	r10,0
80003cf6:	30 0b       	mov	r11,0
80003cf8:	fe 7c 28 00 	mov	r12,-55296
80003cfc:	f0 1f 00 11 	mcall	80003d40 <init_disp+0x84>

	// Enable SPI
	spi_enable(DIP204_SPI);
80003d00:	fe 7c 28 00 	mov	r12,-55296
80003d04:	f0 1f 00 10 	mcall	80003d44 <init_disp+0x88>

	// setup chip registers
	spi_setupChipReg(DIP204_SPI, &spiOptions, FOSC0);
80003d08:	ee c8 00 10 	sub	r8,r7,16
80003d0c:	e0 6a 1b 00 	mov	r10,6912
80003d10:	ea 1a 00 b7 	orh	r10,0xb7
80003d14:	10 9b       	mov	r11,r8
80003d16:	fe 7c 28 00 	mov	r12,-55296
80003d1a:	f0 1f 00 0c 	mcall	80003d48 <init_disp+0x8c>
	
	// initialize LCD
	dip204_init(backlight_IO, true);
80003d1e:	30 1b       	mov	r11,1
80003d20:	30 0c       	mov	r12,0
80003d22:	f0 1f 00 0b 	mcall	80003d4c <init_disp+0x90>
	
	dip204_hide_cursor();
80003d26:	f0 1f 00 0b 	mcall	80003d50 <init_disp+0x94>
}
80003d2a:	2f cd       	sub	sp,-16
80003d2c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d30:	80 00       	ld.sh	r0,r0[0x0]
80003d32:	9d 10       	st.w	lr[0x4],r0
80003d34:	80 00       	ld.sh	r0,r0[0x0]
80003d36:	9d 20       	st.w	lr[0x8],r0
80003d38:	80 00       	ld.sh	r0,r0[0x0]
80003d3a:	37 e4       	mov	r4,126
80003d3c:	80 00       	ld.sh	r0,r0[0x0]
80003d3e:	32 8e       	mov	lr,40
80003d40:	80 00       	ld.sh	r0,r0[0x0]
80003d42:	33 22       	mov	r2,50
80003d44:	80 00       	ld.sh	r0,r0[0x0]
80003d46:	36 3c       	mov	r12,99
80003d48:	80 00       	ld.sh	r0,r0[0x0]
80003d4a:	34 b8       	mov	r8,75
80003d4c:	80 00       	ld.sh	r0,r0[0x0]
80003d4e:	20 08       	sub	r8,0
80003d50:	80 00       	ld.sh	r0,r0[0x0]
80003d52:	2a f0       	sub	r0,-81

80003d54 <main>:


int main (void)
{		
80003d54:	eb cd 40 80 	pushm	r7,lr
80003d58:	1a 97       	mov	r7,sp
80003d5a:	21 fd       	sub	sp,124
	// Switch the CPU main clock to oscillator 0
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);	
80003d5c:	30 3a       	mov	r10,3
80003d5e:	e0 6b 1b 00 	mov	r11,6912
80003d62:	ea 1b 00 b7 	orh	r11,0xb7
80003d66:	fe 7c 0c 00 	mov	r12,-62464
80003d6a:	f0 1f 00 8d 	mcall	80003f9c <main+0x248>
	
	board_init();
80003d6e:	f0 1f 00 8d 	mcall	80003fa0 <main+0x24c>
	init_disp(); 
80003d72:	f0 1f 00 8d 	mcall	80003fa4 <main+0x250>


	U32 x = 12345678;
80003d76:	e0 68 61 4e 	mov	r8,24910
80003d7a:	ea 18 00 bc 	orh	r8,0xbc
80003d7e:	ef 48 ff c8 	st.w	r7[-56],r8
	U32 y = 87654321;
80003d82:	e0 68 7f b1 	mov	r8,32689
80003d86:	ea 18 05 39 	orh	r8,0x539
80003d8a:	ef 48 ff cc 	st.w	r7[-52],r8
	U64 z =0;
80003d8e:	30 08       	mov	r8,0
80003d90:	30 09       	mov	r9,0
80003d92:	ee e9 ff d0 	st.d	r7[-48],r8
	
	F32 a = 1234.5678;
80003d96:	e0 68 52 2b 	mov	r8,21035
80003d9a:	ea 18 44 9a 	orh	r8,0x449a
80003d9e:	ef 48 ff d8 	st.w	r7[-40],r8
	F32 b = 8765.4321;
80003da2:	e0 68 f5 ba 	mov	r8,62906
80003da6:	ea 18 46 08 	orh	r8,0x4608
80003daa:	ef 48 ff dc 	st.w	r7[-36],r8
	F32 c = 0;
80003dae:	30 08       	mov	r8,0
80003db0:	ef 48 ff e0 	st.w	r7[-32],r8
	
	U32 calc_time_z = 0;
80003db4:	30 08       	mov	r8,0
80003db6:	ef 48 ff e4 	st.w	r7[-28],r8
	U32 calc_time_c = 0;
80003dba:	30 08       	mov	r8,0
80003dbc:	ef 48 ff e8 	st.w	r7[-24],r8
	
	U32 cnt_1 = 0;
80003dc0:	30 08       	mov	r8,0
80003dc2:	ef 48 ff ec 	st.w	r7[-20],r8
	U32 cnt_2 = 0;
80003dc6:	30 08       	mov	r8,0
80003dc8:	ef 48 ff f0 	st.w	r7[-16],r8
	U32 cnt_3 = 0;
80003dcc:	30 08       	mov	r8,0
80003dce:	ef 48 ff f4 	st.w	r7[-12],r8
	U32 cnt_res_z = 0; 
80003dd2:	30 08       	mov	r8,0
80003dd4:	ef 48 ff f8 	st.w	r7[-8],r8
	U32 cnt_res_c = 0; 
80003dd8:	30 08       	mov	r8,0
80003dda:	ef 48 ff fc 	st.w	r7[-4],r8
	char cycl_z[9];
	
	//Calculation:
	
	//Cycle count 1
	cnt_1 = Get_sys_count();
80003dde:	e1 b8 00 42 	mfsr	r8,0x108
80003de2:	ef 48 ff ec 	st.w	r7[-20],r8
	
	//Calculation part 1:
	z = x*y;
80003de6:	ee f9 ff c8 	ld.w	r9,r7[-56]
80003dea:	ee f8 ff cc 	ld.w	r8,r7[-52]
80003dee:	f2 08 02 48 	mul	r8,r9,r8
80003df2:	ef 48 ff d4 	st.w	r7[-44],r8
80003df6:	30 08       	mov	r8,0
80003df8:	ef 48 ff d0 	st.w	r7[-48],r8
	
	//Cycle count 2
	cnt_2 = Get_sys_count();
80003dfc:	e1 b8 00 42 	mfsr	r8,0x108
80003e00:	ef 48 ff f0 	st.w	r7[-16],r8
	
	//Calculation part 2:
	c = a*b;
80003e04:	ee fb ff dc 	ld.w	r11,r7[-36]
80003e08:	ee fc ff d8 	ld.w	r12,r7[-40]
80003e0c:	f0 1f 00 67 	mcall	80003fa8 <main+0x254>
80003e10:	18 98       	mov	r8,r12
80003e12:	ef 48 ff e0 	st.w	r7[-32],r8
	
	//Cycle count 3
	cnt_3 = Get_sys_count();
80003e16:	e1 b8 00 42 	mfsr	r8,0x108
80003e1a:	ef 48 ff f4 	st.w	r7[-12],r8
	
	//Cycle count result
	cnt_res_z = cnt_2 - cnt_1 ;
80003e1e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80003e22:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003e26:	f2 08 01 08 	sub	r8,r9,r8
80003e2a:	ef 48 ff f8 	st.w	r7[-8],r8
	cnt_res_c = cnt_3 - cnt_2 ;
80003e2e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003e32:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e36:	f2 08 01 08 	sub	r8,r9,r8
80003e3a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	//Use cycle count result to find calculation time
	calc_time_c = (cnt_res_c * 1000000 + FOSC0 - 1) / FOSC0;
80003e3e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003e42:	ee 78 42 40 	mov	r8,1000000
80003e46:	b1 39       	mul	r9,r8
80003e48:	e0 68 1a ff 	mov	r8,6911
80003e4c:	ea 18 00 b7 	orh	r8,0xb7
80003e50:	10 09       	add	r9,r8
80003e52:	e0 68 9f 81 	mov	r8,40833
80003e56:	ea 18 16 5e 	orh	r8,0x165e
80003e5a:	f2 08 06 48 	mulu.d	r8,r9,r8
80003e5e:	f2 08 16 14 	lsr	r8,r9,0x14
80003e62:	ef 48 ff e8 	st.w	r7[-24],r8
	calc_time_z = (cnt_res_z * 1000000 + FOSC0 - 1) / FOSC0;
80003e66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003e6a:	ee 78 42 40 	mov	r8,1000000
80003e6e:	b1 39       	mul	r9,r8
80003e70:	e0 68 1a ff 	mov	r8,6911
80003e74:	ea 18 00 b7 	orh	r8,0xb7
80003e78:	10 09       	add	r9,r8
80003e7a:	e0 68 9f 81 	mov	r8,40833
80003e7e:	ea 18 16 5e 	orh	r8,0x165e
80003e82:	f2 08 06 48 	mulu.d	r8,r9,r8
80003e86:	f2 08 16 14 	lsr	r8,r9,0x14
80003e8a:	ef 48 ff e4 	st.w	r7[-28],r8
	
	//Compose strings for display output
	sprintf(result, "%f", c);
80003e8e:	ee fc ff e0 	ld.w	r12,r7[-32]
80003e92:	f0 1f 00 47 	mcall	80003fac <main+0x258>
80003e96:	14 98       	mov	r8,r10
80003e98:	16 99       	mov	r9,r11
80003e9a:	ee ca 00 64 	sub	r10,r7,100
80003e9e:	bb 29       	st.d	--sp,r8
80003ea0:	4c 4b       	lddpc	r11,80003fb0 <main+0x25c>
80003ea2:	14 9c       	mov	r12,r10
80003ea4:	f0 1f 00 44 	mcall	80003fb4 <main+0x260>
80003ea8:	2f ed       	sub	sp,-8
	sprintf(cycl_str_z, "%lu", calc_time_z);
80003eaa:	ee c8 00 44 	sub	r8,r7,68
80003eae:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003eb2:	1a d9       	st.w	--sp,r9
80003eb4:	4c 1b       	lddpc	r11,80003fb8 <main+0x264>
80003eb6:	10 9c       	mov	r12,r8
80003eb8:	f0 1f 00 3f 	mcall	80003fb4 <main+0x260>
80003ebc:	2f fd       	sub	sp,-4
	sprintf(cycl_str_c, "%lu", calc_time_c);
80003ebe:	ee c8 00 50 	sub	r8,r7,80
80003ec2:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003ec6:	1a d9       	st.w	--sp,r9
80003ec8:	4b cb       	lddpc	r11,80003fb8 <main+0x264>
80003eca:	10 9c       	mov	r12,r8
80003ecc:	f0 1f 00 3a 	mcall	80003fb4 <main+0x260>
80003ed0:	2f fd       	sub	sp,-4
	sprintf(cycl_c, "%lu", cnt_res_c);
80003ed2:	ee c8 00 70 	sub	r8,r7,112
80003ed6:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003eda:	1a d9       	st.w	--sp,r9
80003edc:	4b 7b       	lddpc	r11,80003fb8 <main+0x264>
80003ede:	10 9c       	mov	r12,r8
80003ee0:	f0 1f 00 35 	mcall	80003fb4 <main+0x260>
80003ee4:	2f fd       	sub	sp,-4
	sprintf(cycl_z, "%lu", cnt_res_z);
80003ee6:	ee c8 00 7c 	sub	r8,r7,124
80003eea:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003eee:	1a d9       	st.w	--sp,r9
80003ef0:	4b 2b       	lddpc	r11,80003fb8 <main+0x264>
80003ef2:	10 9c       	mov	r12,r8
80003ef4:	f0 1f 00 30 	mcall	80003fb4 <main+0x260>
80003ef8:	2f fd       	sub	sp,-4
	
	//Display calculation time, cycles and multiplication result on monitor
	dip204_clear_display();
80003efa:	f0 1f 00 31 	mcall	80003fbc <main+0x268>

	dip204_set_cursor_position(1,1);
80003efe:	30 1b       	mov	r11,1
80003f00:	30 1c       	mov	r12,1
80003f02:	f0 1f 00 30 	mcall	80003fc0 <main+0x26c>
	dip204_write_string("x*y=z");
80003f06:	4b 0c       	lddpc	r12,80003fc4 <main+0x270>
80003f08:	f0 1f 00 30 	mcall	80003fc8 <main+0x274>
	dip204_set_cursor_position(1,2);
80003f0c:	30 2b       	mov	r11,2
80003f0e:	30 1c       	mov	r12,1
80003f10:	f0 1f 00 2c 	mcall	80003fc0 <main+0x26c>
	dip204_write_string("Time:");
80003f14:	4a ec       	lddpc	r12,80003fcc <main+0x278>
80003f16:	f0 1f 00 2d 	mcall	80003fc8 <main+0x274>
	dip204_set_cursor_position(7,2);
80003f1a:	30 2b       	mov	r11,2
80003f1c:	30 7c       	mov	r12,7
80003f1e:	f0 1f 00 29 	mcall	80003fc0 <main+0x26c>
	dip204_write_string(cycl_str_z);
80003f22:	ee c8 00 44 	sub	r8,r7,68
80003f26:	10 9c       	mov	r12,r8
80003f28:	f0 1f 00 28 	mcall	80003fc8 <main+0x274>
	dip204_set_cursor_position(1,3);
80003f2c:	30 3b       	mov	r11,3
80003f2e:	30 1c       	mov	r12,1
80003f30:	f0 1f 00 24 	mcall	80003fc0 <main+0x26c>
	dip204_write_string("Cycles:");
80003f34:	4a 7c       	lddpc	r12,80003fd0 <main+0x27c>
80003f36:	f0 1f 00 25 	mcall	80003fc8 <main+0x274>
	dip204_set_cursor_position(9,3);
80003f3a:	30 3b       	mov	r11,3
80003f3c:	30 9c       	mov	r12,9
80003f3e:	f0 1f 00 21 	mcall	80003fc0 <main+0x26c>
	dip204_write_string(cycl_z);
80003f42:	ee c8 00 7c 	sub	r8,r7,124
80003f46:	10 9c       	mov	r12,r8
80003f48:	f0 1f 00 20 	mcall	80003fc8 <main+0x274>

	dip204_set_cursor_position(11,1);
80003f4c:	30 1b       	mov	r11,1
80003f4e:	30 bc       	mov	r12,11
80003f50:	f0 1f 00 1c 	mcall	80003fc0 <main+0x26c>
	dip204_write_string("a*b=c");
80003f54:	4a 0c       	lddpc	r12,80003fd4 <main+0x280>
80003f56:	f0 1f 00 1d 	mcall	80003fc8 <main+0x274>
	dip204_set_cursor_position(11,2);
80003f5a:	30 2b       	mov	r11,2
80003f5c:	30 bc       	mov	r12,11
80003f5e:	f0 1f 00 19 	mcall	80003fc0 <main+0x26c>
	dip204_write_string("Time:");
80003f62:	49 bc       	lddpc	r12,80003fcc <main+0x278>
80003f64:	f0 1f 00 19 	mcall	80003fc8 <main+0x274>
	dip204_set_cursor_position(17,2);
80003f68:	30 2b       	mov	r11,2
80003f6a:	31 1c       	mov	r12,17
80003f6c:	f0 1f 00 15 	mcall	80003fc0 <main+0x26c>
	dip204_write_string(cycl_str_c);
80003f70:	ee c8 00 50 	sub	r8,r7,80
80003f74:	10 9c       	mov	r12,r8
80003f76:	f0 1f 00 15 	mcall	80003fc8 <main+0x274>
	dip204_set_cursor_position(11,3);
80003f7a:	30 3b       	mov	r11,3
80003f7c:	30 bc       	mov	r12,11
80003f7e:	f0 1f 00 11 	mcall	80003fc0 <main+0x26c>
	dip204_write_string("Cycles:");
80003f82:	49 4c       	lddpc	r12,80003fd0 <main+0x27c>
80003f84:	f0 1f 00 11 	mcall	80003fc8 <main+0x274>
	dip204_set_cursor_position(19,3);
80003f88:	30 3b       	mov	r11,3
80003f8a:	31 3c       	mov	r12,19
80003f8c:	f0 1f 00 0d 	mcall	80003fc0 <main+0x26c>
	dip204_write_string(cycl_c);
80003f90:	ee c8 00 70 	sub	r8,r7,112
80003f94:	10 9c       	mov	r12,r8
80003f96:	f0 1f 00 0d 	mcall	80003fc8 <main+0x274>

	while (1)
	{
		
	}
80003f9a:	c0 08       	rjmp	80003f9a <main+0x246>
80003f9c:	80 00       	ld.sh	r0,r0[0x0]
80003f9e:	30 8c       	mov	r12,8
80003fa0:	80 00       	ld.sh	r0,r0[0x0]
80003fa2:	37 0c       	mov	r12,112
80003fa4:	80 00       	ld.sh	r0,r0[0x0]
80003fa6:	3c bc       	mov	r12,-53
80003fa8:	80 00       	ld.sh	r0,r0[0x0]
80003faa:	3f d8       	mov	r8,-3
80003fac:	80 00       	ld.sh	r0,r0[0x0]
80003fae:	40 ba       	lddsp	r10,sp[0x2c]
80003fb0:	80 00       	ld.sh	r0,r0[0x0]
80003fb2:	3c 94       	mov	r4,-55
80003fb4:	80 00       	ld.sh	r0,r0[0x0]
80003fb6:	44 c8       	lddsp	r8,sp[0x130]
80003fb8:	80 00       	ld.sh	r0,r0[0x0]
80003fba:	3c 98       	mov	r8,-55
80003fbc:	80 00       	ld.sh	r0,r0[0x0]
80003fbe:	2b ac       	sub	r12,-70
80003fc0:	80 00       	ld.sh	r0,r0[0x0]
80003fc2:	2b 24       	sub	r4,-78
80003fc4:	80 00       	ld.sh	r0,r0[0x0]
80003fc6:	3c 9c       	mov	r12,-55
80003fc8:	80 00       	ld.sh	r0,r0[0x0]
80003fca:	2d 24       	sub	r4,-46
80003fcc:	80 00       	ld.sh	r0,r0[0x0]
80003fce:	3c a4       	mov	r4,-54
80003fd0:	80 00       	ld.sh	r0,r0[0x0]
80003fd2:	3c ac       	mov	r12,-54
80003fd4:	80 00       	ld.sh	r0,r0[0x0]
80003fd6:	3c b4       	mov	r4,-53

80003fd8 <__avr32_f32_mul>:
80003fd8:	18 98       	mov	r8,r12
80003fda:	16 5c       	eor	r12,r11
80003fdc:	e6 1c 80 00 	andh	r12,0x8000,COH
80003fe0:	bf d8       	cbr	r8,0x1f
80003fe2:	c6 60       	breq	800040ae <__avr32_f32_mul_op1_zero>
80003fe4:	bf db       	cbr	r11,0x1f
80003fe6:	f0 0b 0c 4a 	max	r10,r8,r11
80003fea:	f0 0b 0d 49 	min	r9,r8,r11
80003fee:	f4 08 15 08 	lsl	r8,r10,0x8
80003ff2:	bf b8       	sbr	r8,0x1f
80003ff4:	b7 9a       	lsr	r10,0x17
80003ff6:	e0 4a 00 ff 	cp.w	r10,255
80003ffa:	c3 d0       	breq	80004074 <__avr32_f32_mul_op1_nan_or_inf>
80003ffc:	f2 0b 15 08 	lsl	r11,r9,0x8
80004000:	bf bb       	sbr	r11,0x1f
80004002:	b7 99       	lsr	r9,0x17
80004004:	c2 40       	breq	8000404c <__avr32_f32_mul_op2_subnormal>
80004006:	14 09       	add	r9,r10
80004008:	f0 0b 06 4a 	mulu.d	r10,r8,r11
8000400c:	f6 08 15 01 	lsl	r8,r11,0x1
80004010:	f0 0b 17 20 	movhs	r11,r8
80004014:	f7 b9 02 01 	subhs	r9,1
80004018:	a9 8a       	lsr	r10,0x8
8000401a:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
8000401e:	27 e9       	sub	r9,126
80004020:	e0 8a 00 39 	brle	80004092 <__avr32_f32_mul_res_subnormal>
80004024:	e0 49 00 ff 	cp.w	r9,255
80004028:	c0 f4       	brge	80004046 <__avr32_f32_mul_round+0x14>
8000402a:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
8000402e:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

80004032 <__avr32_f32_mul_round>:
80004032:	fc 18 80 00 	movh	r8,0x8000
80004036:	ed bc 00 00 	bld	r12,0x0
8000403a:	f7 b8 01 ff 	subne	r8,-1
8000403e:	10 3a       	cp.w	r10,r8
80004040:	f7 bc 02 ff 	subhs	r12,-1
80004044:	5e fc       	retal	r12
80004046:	ea 1c 7f 80 	orh	r12,0x7f80
8000404a:	5e fc       	retal	r12

8000404c <__avr32_f32_mul_op2_subnormal>:
8000404c:	bf db       	cbr	r11,0x1f
8000404e:	f6 09 12 00 	clz	r9,r11
80004052:	5e 3d       	retlo	0
80004054:	20 89       	sub	r9,8
80004056:	f6 09 09 4b 	lsl	r11,r11,r9
8000405a:	f2 09 11 01 	rsub	r9,r9,1
8000405e:	14 7a       	tst	r10,r10
80004060:	cd 31       	brne	80004006 <__avr32_f32_mul+0x2e>
80004062:	bf d8       	cbr	r8,0x1f
80004064:	f6 0a 12 00 	clz	r10,r11
80004068:	5e 3d       	retlo	0
8000406a:	f0 0a 09 48 	lsl	r8,r8,r10
8000406e:	f4 0a 11 01 	rsub	r10,r10,1
80004072:	cc ab       	rjmp	80004006 <__avr32_f32_mul+0x2e>

80004074 <__avr32_f32_mul_op1_nan_or_inf>:
80004074:	f0 0b 15 01 	lsl	r11,r8,0x1
80004078:	5e 1e       	retne	-1
8000407a:	12 79       	tst	r9,r9
8000407c:	5e 0e       	reteq	-1
8000407e:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
80004082:	f2 0b 16 17 	lsr	r11,r9,0x17
80004086:	e0 4b 00 ff 	cp.w	r11,255
8000408a:	5e 1c       	retne	r12
8000408c:	a9 79       	lsl	r9,0x9
8000408e:	5e 0c       	reteq	r12
80004090:	5e fe       	retal	-1

80004092 <__avr32_f32_mul_res_subnormal>:
80004092:	f2 09 11 09 	rsub	r9,r9,9
80004096:	f2 08 11 20 	rsub	r8,r9,32
8000409a:	5e 3d       	retlo	0
8000409c:	f6 09 0a 49 	lsr	r9,r11,r9
800040a0:	12 4c       	or	r12,r9
800040a2:	f6 08 09 4b 	lsl	r11,r11,r8
800040a6:	e4 1a 00 ff 	andh	r10,0xff
800040aa:	16 4a       	or	r10,r11
800040ac:	cc 3b       	rjmp	80004032 <__avr32_f32_mul_round>

800040ae <__avr32_f32_mul_op1_zero>:
800040ae:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
800040b2:	e0 4a 00 ff 	cp.w	r10,255
800040b6:	5e 1c       	retne	r12
800040b8:	5e 0e       	reteq	-1

800040ba <__avr32_f32_to_f64>:
800040ba:	f8 0b 15 01 	lsl	r11,r12,0x1
800040be:	f9 ba 00 00 	moveq	r10,0
800040c2:	5e 0b       	reteq	r11
800040c4:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
800040c8:	e0 49 00 ff 	cp.w	r9,255
800040cc:	c1 e0       	breq	80004108 <__extendsfdf_return_op1+0x6>
800040ce:	a7 7b       	lsl	r11,0x7
800040d0:	30 0a       	mov	r10,0
800040d2:	58 09       	cp.w	r9,0
800040d4:	f7 b9 00 ff 	subeq	r9,-1
800040d8:	5f 18       	srne	r8
800040da:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
800040de:	fe 39 fc 80 	sub	r9,-896
800040e2:	f6 08 12 00 	clz	r8,r11
800040e6:	10 19       	sub	r9,r8
800040e8:	f6 08 09 4b 	lsl	r11,r11,r8
800040ec:	ed bb 00 1f 	bld	r11,0x1f
800040f0:	f7 b9 01 01 	subne	r9,1
800040f4:	ab 9a       	lsr	r10,0xb
800040f6:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800040fa:	a1 7b       	lsl	r11,0x1
800040fc:	ab 9b       	lsr	r11,0xb
800040fe:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80004102 <__extendsfdf_return_op1>:
80004102:	a1 7c       	lsl	r12,0x1
80004104:	5d 0b       	ror	r11
80004106:	5e fb       	retal	r11
80004108:	fc 1a ff e0 	movh	r10,0xffe0
8000410c:	a9 6b       	lsl	r11,0x8
8000410e:	f9 bb 01 ff 	movne	r11,-1
80004112:	f4 0b 17 00 	moveq	r11,r10
80004116:	30 0a       	mov	r10,0
80004118:	cf 5b       	rjmp	80004102 <__extendsfdf_return_op1>

8000411a <__avr32_udiv64>:
8000411a:	d4 31       	pushm	r0-r7,lr
8000411c:	1a 97       	mov	r7,sp
8000411e:	20 3d       	sub	sp,12
80004120:	10 9c       	mov	r12,r8
80004122:	12 9e       	mov	lr,r9
80004124:	14 93       	mov	r3,r10
80004126:	58 09       	cp.w	r9,0
80004128:	e0 81 00 bd 	brne	800042a2 <__avr32_udiv64+0x188>
8000412c:	16 38       	cp.w	r8,r11
8000412e:	e0 88 00 40 	brls	800041ae <__avr32_udiv64+0x94>
80004132:	f0 08 12 00 	clz	r8,r8
80004136:	c0 d0       	breq	80004150 <__avr32_udiv64+0x36>
80004138:	f6 08 09 4b 	lsl	r11,r11,r8
8000413c:	f0 09 11 20 	rsub	r9,r8,32
80004140:	f8 08 09 4c 	lsl	r12,r12,r8
80004144:	f4 09 0a 49 	lsr	r9,r10,r9
80004148:	f4 08 09 43 	lsl	r3,r10,r8
8000414c:	f3 eb 10 0b 	or	r11,r9,r11
80004150:	f8 0e 16 10 	lsr	lr,r12,0x10
80004154:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80004158:	f6 0e 0d 00 	divu	r0,r11,lr
8000415c:	e6 0b 16 10 	lsr	r11,r3,0x10
80004160:	00 99       	mov	r9,r0
80004162:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004166:	e0 0a 02 48 	mul	r8,r0,r10
8000416a:	10 3b       	cp.w	r11,r8
8000416c:	c0 a2       	brcc	80004180 <__avr32_udiv64+0x66>
8000416e:	20 19       	sub	r9,1
80004170:	18 0b       	add	r11,r12
80004172:	18 3b       	cp.w	r11,r12
80004174:	c0 63       	brcs	80004180 <__avr32_udiv64+0x66>
80004176:	10 3b       	cp.w	r11,r8
80004178:	f7 b9 03 01 	sublo	r9,1
8000417c:	f7 dc e3 0b 	addcs	r11,r11,r12
80004180:	f6 08 01 01 	sub	r1,r11,r8
80004184:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80004188:	e2 0e 0d 00 	divu	r0,r1,lr
8000418c:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80004190:	00 98       	mov	r8,r0
80004192:	e0 0a 02 4a 	mul	r10,r0,r10
80004196:	14 33       	cp.w	r3,r10
80004198:	c0 82       	brcc	800041a8 <__avr32_udiv64+0x8e>
8000419a:	20 18       	sub	r8,1
8000419c:	18 03       	add	r3,r12
8000419e:	18 33       	cp.w	r3,r12
800041a0:	c0 43       	brcs	800041a8 <__avr32_udiv64+0x8e>
800041a2:	14 33       	cp.w	r3,r10
800041a4:	f7 b8 03 01 	sublo	r8,1
800041a8:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800041ac:	cd f8       	rjmp	8000436a <__avr32_udiv64+0x250>
800041ae:	58 08       	cp.w	r8,0
800041b0:	c0 51       	brne	800041ba <__avr32_udiv64+0xa0>
800041b2:	30 19       	mov	r9,1
800041b4:	f2 08 0d 08 	divu	r8,r9,r8
800041b8:	10 9c       	mov	r12,r8
800041ba:	f8 06 12 00 	clz	r6,r12
800041be:	c0 41       	brne	800041c6 <__avr32_udiv64+0xac>
800041c0:	18 1b       	sub	r11,r12
800041c2:	30 19       	mov	r9,1
800041c4:	c4 08       	rjmp	80004244 <__avr32_udiv64+0x12a>
800041c6:	ec 01 11 20 	rsub	r1,r6,32
800041ca:	f4 01 0a 49 	lsr	r9,r10,r1
800041ce:	f8 06 09 4c 	lsl	r12,r12,r6
800041d2:	f6 06 09 48 	lsl	r8,r11,r6
800041d6:	f6 01 0a 41 	lsr	r1,r11,r1
800041da:	f3 e8 10 08 	or	r8,r9,r8
800041de:	f8 03 16 10 	lsr	r3,r12,0x10
800041e2:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800041e6:	e2 03 0d 00 	divu	r0,r1,r3
800041ea:	f0 0b 16 10 	lsr	r11,r8,0x10
800041ee:	00 9e       	mov	lr,r0
800041f0:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800041f4:	e0 05 02 49 	mul	r9,r0,r5
800041f8:	12 3b       	cp.w	r11,r9
800041fa:	c0 a2       	brcc	8000420e <__avr32_udiv64+0xf4>
800041fc:	20 1e       	sub	lr,1
800041fe:	18 0b       	add	r11,r12
80004200:	18 3b       	cp.w	r11,r12
80004202:	c0 63       	brcs	8000420e <__avr32_udiv64+0xf4>
80004204:	12 3b       	cp.w	r11,r9
80004206:	f7 be 03 01 	sublo	lr,1
8000420a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000420e:	12 1b       	sub	r11,r9
80004210:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80004214:	f6 03 0d 02 	divu	r2,r11,r3
80004218:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000421c:	04 99       	mov	r9,r2
8000421e:	e4 05 02 4b 	mul	r11,r2,r5
80004222:	16 38       	cp.w	r8,r11
80004224:	c0 a2       	brcc	80004238 <__avr32_udiv64+0x11e>
80004226:	20 19       	sub	r9,1
80004228:	18 08       	add	r8,r12
8000422a:	18 38       	cp.w	r8,r12
8000422c:	c0 63       	brcs	80004238 <__avr32_udiv64+0x11e>
8000422e:	16 38       	cp.w	r8,r11
80004230:	f7 b9 03 01 	sublo	r9,1
80004234:	f1 dc e3 08 	addcs	r8,r8,r12
80004238:	f4 06 09 43 	lsl	r3,r10,r6
8000423c:	f0 0b 01 0b 	sub	r11,r8,r11
80004240:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80004244:	f8 06 16 10 	lsr	r6,r12,0x10
80004248:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000424c:	f6 06 0d 00 	divu	r0,r11,r6
80004250:	e6 0b 16 10 	lsr	r11,r3,0x10
80004254:	00 9a       	mov	r10,r0
80004256:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000425a:	e0 0e 02 48 	mul	r8,r0,lr
8000425e:	10 3b       	cp.w	r11,r8
80004260:	c0 a2       	brcc	80004274 <__avr32_udiv64+0x15a>
80004262:	20 1a       	sub	r10,1
80004264:	18 0b       	add	r11,r12
80004266:	18 3b       	cp.w	r11,r12
80004268:	c0 63       	brcs	80004274 <__avr32_udiv64+0x15a>
8000426a:	10 3b       	cp.w	r11,r8
8000426c:	f7 ba 03 01 	sublo	r10,1
80004270:	f7 dc e3 0b 	addcs	r11,r11,r12
80004274:	f6 08 01 01 	sub	r1,r11,r8
80004278:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000427c:	e2 06 0d 00 	divu	r0,r1,r6
80004280:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80004284:	00 98       	mov	r8,r0
80004286:	e0 0e 02 4b 	mul	r11,r0,lr
8000428a:	16 33       	cp.w	r3,r11
8000428c:	c0 82       	brcc	8000429c <__avr32_udiv64+0x182>
8000428e:	20 18       	sub	r8,1
80004290:	18 03       	add	r3,r12
80004292:	18 33       	cp.w	r3,r12
80004294:	c0 43       	brcs	8000429c <__avr32_udiv64+0x182>
80004296:	16 33       	cp.w	r3,r11
80004298:	f7 b8 03 01 	sublo	r8,1
8000429c:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800042a0:	c6 98       	rjmp	80004372 <__avr32_udiv64+0x258>
800042a2:	16 39       	cp.w	r9,r11
800042a4:	e0 8b 00 65 	brhi	8000436e <__avr32_udiv64+0x254>
800042a8:	f2 09 12 00 	clz	r9,r9
800042ac:	c0 b1       	brne	800042c2 <__avr32_udiv64+0x1a8>
800042ae:	10 3a       	cp.w	r10,r8
800042b0:	5f 2a       	srhs	r10
800042b2:	1c 3b       	cp.w	r11,lr
800042b4:	5f b8       	srhi	r8
800042b6:	10 4a       	or	r10,r8
800042b8:	f2 0a 18 00 	cp.b	r10,r9
800042bc:	c5 90       	breq	8000436e <__avr32_udiv64+0x254>
800042be:	30 18       	mov	r8,1
800042c0:	c5 98       	rjmp	80004372 <__avr32_udiv64+0x258>
800042c2:	f0 09 09 46 	lsl	r6,r8,r9
800042c6:	f2 03 11 20 	rsub	r3,r9,32
800042ca:	fc 09 09 4e 	lsl	lr,lr,r9
800042ce:	f0 03 0a 48 	lsr	r8,r8,r3
800042d2:	f6 09 09 4c 	lsl	r12,r11,r9
800042d6:	f4 03 0a 42 	lsr	r2,r10,r3
800042da:	ef 46 ff f4 	st.w	r7[-12],r6
800042de:	f6 03 0a 43 	lsr	r3,r11,r3
800042e2:	18 42       	or	r2,r12
800042e4:	f1 ee 10 0c 	or	r12,r8,lr
800042e8:	f8 01 16 10 	lsr	r1,r12,0x10
800042ec:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800042f0:	e6 01 0d 04 	divu	r4,r3,r1
800042f4:	e4 03 16 10 	lsr	r3,r2,0x10
800042f8:	08 9e       	mov	lr,r4
800042fa:	e7 e5 11 03 	or	r3,r3,r5<<0x10
800042fe:	e8 06 02 48 	mul	r8,r4,r6
80004302:	10 33       	cp.w	r3,r8
80004304:	c0 a2       	brcc	80004318 <__avr32_udiv64+0x1fe>
80004306:	20 1e       	sub	lr,1
80004308:	18 03       	add	r3,r12
8000430a:	18 33       	cp.w	r3,r12
8000430c:	c0 63       	brcs	80004318 <__avr32_udiv64+0x1fe>
8000430e:	10 33       	cp.w	r3,r8
80004310:	f7 be 03 01 	sublo	lr,1
80004314:	e7 dc e3 03 	addcs	r3,r3,r12
80004318:	10 13       	sub	r3,r8
8000431a:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000431e:	e6 01 0d 00 	divu	r0,r3,r1
80004322:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80004326:	00 98       	mov	r8,r0
80004328:	e0 06 02 46 	mul	r6,r0,r6
8000432c:	0c 3b       	cp.w	r11,r6
8000432e:	c0 a2       	brcc	80004342 <__avr32_udiv64+0x228>
80004330:	20 18       	sub	r8,1
80004332:	18 0b       	add	r11,r12
80004334:	18 3b       	cp.w	r11,r12
80004336:	c0 63       	brcs	80004342 <__avr32_udiv64+0x228>
80004338:	0c 3b       	cp.w	r11,r6
8000433a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000433e:	f7 b8 03 01 	sublo	r8,1
80004342:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80004346:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000434a:	0c 1b       	sub	r11,r6
8000434c:	f0 04 06 42 	mulu.d	r2,r8,r4
80004350:	06 95       	mov	r5,r3
80004352:	16 35       	cp.w	r5,r11
80004354:	e0 8b 00 0a 	brhi	80004368 <__avr32_udiv64+0x24e>
80004358:	5f 0b       	sreq	r11
8000435a:	f4 09 09 49 	lsl	r9,r10,r9
8000435e:	12 32       	cp.w	r2,r9
80004360:	5f b9       	srhi	r9
80004362:	f7 e9 00 09 	and	r9,r11,r9
80004366:	c0 60       	breq	80004372 <__avr32_udiv64+0x258>
80004368:	20 18       	sub	r8,1
8000436a:	30 09       	mov	r9,0
8000436c:	c0 38       	rjmp	80004372 <__avr32_udiv64+0x258>
8000436e:	30 09       	mov	r9,0
80004370:	12 98       	mov	r8,r9
80004372:	10 9a       	mov	r10,r8
80004374:	12 93       	mov	r3,r9
80004376:	10 92       	mov	r2,r8
80004378:	12 9b       	mov	r11,r9
8000437a:	2f dd       	sub	sp,-12
8000437c:	d8 32       	popm	r0-r7,pc

8000437e <memcpy>:
8000437e:	58 8a       	cp.w	r10,8
80004380:	c2 f5       	brlt	800043de <memcpy+0x60>
80004382:	f9 eb 10 09 	or	r9,r12,r11
80004386:	e2 19 00 03 	andl	r9,0x3,COH
8000438a:	e0 81 00 97 	brne	800044b8 <memcpy+0x13a>
8000438e:	e0 4a 00 20 	cp.w	r10,32
80004392:	c3 b4       	brge	80004408 <memcpy+0x8a>
80004394:	f4 08 14 02 	asr	r8,r10,0x2
80004398:	f0 09 11 08 	rsub	r9,r8,8
8000439c:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800043a0:	76 69       	ld.w	r9,r11[0x18]
800043a2:	99 69       	st.w	r12[0x18],r9
800043a4:	76 59       	ld.w	r9,r11[0x14]
800043a6:	99 59       	st.w	r12[0x14],r9
800043a8:	76 49       	ld.w	r9,r11[0x10]
800043aa:	99 49       	st.w	r12[0x10],r9
800043ac:	76 39       	ld.w	r9,r11[0xc]
800043ae:	99 39       	st.w	r12[0xc],r9
800043b0:	76 29       	ld.w	r9,r11[0x8]
800043b2:	99 29       	st.w	r12[0x8],r9
800043b4:	76 19       	ld.w	r9,r11[0x4]
800043b6:	99 19       	st.w	r12[0x4],r9
800043b8:	76 09       	ld.w	r9,r11[0x0]
800043ba:	99 09       	st.w	r12[0x0],r9
800043bc:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800043c0:	f8 08 00 28 	add	r8,r12,r8<<0x2
800043c4:	e0 1a 00 03 	andl	r10,0x3
800043c8:	f4 0a 11 04 	rsub	r10,r10,4
800043cc:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800043d0:	17 a9       	ld.ub	r9,r11[0x2]
800043d2:	b0 a9       	st.b	r8[0x2],r9
800043d4:	17 99       	ld.ub	r9,r11[0x1]
800043d6:	b0 99       	st.b	r8[0x1],r9
800043d8:	17 89       	ld.ub	r9,r11[0x0]
800043da:	b0 89       	st.b	r8[0x0],r9
800043dc:	5e fc       	retal	r12
800043de:	f4 0a 11 09 	rsub	r10,r10,9
800043e2:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800043e6:	17 f9       	ld.ub	r9,r11[0x7]
800043e8:	b8 f9       	st.b	r12[0x7],r9
800043ea:	17 e9       	ld.ub	r9,r11[0x6]
800043ec:	b8 e9       	st.b	r12[0x6],r9
800043ee:	17 d9       	ld.ub	r9,r11[0x5]
800043f0:	b8 d9       	st.b	r12[0x5],r9
800043f2:	17 c9       	ld.ub	r9,r11[0x4]
800043f4:	b8 c9       	st.b	r12[0x4],r9
800043f6:	17 b9       	ld.ub	r9,r11[0x3]
800043f8:	b8 b9       	st.b	r12[0x3],r9
800043fa:	17 a9       	ld.ub	r9,r11[0x2]
800043fc:	b8 a9       	st.b	r12[0x2],r9
800043fe:	17 99       	ld.ub	r9,r11[0x1]
80004400:	b8 99       	st.b	r12[0x1],r9
80004402:	17 89       	ld.ub	r9,r11[0x0]
80004404:	b8 89       	st.b	r12[0x0],r9
80004406:	5e fc       	retal	r12
80004408:	eb cd 40 c0 	pushm	r6-r7,lr
8000440c:	18 99       	mov	r9,r12
8000440e:	22 0a       	sub	r10,32
80004410:	b7 07       	ld.d	r6,r11++
80004412:	b3 26       	st.d	r9++,r6
80004414:	b7 07       	ld.d	r6,r11++
80004416:	b3 26       	st.d	r9++,r6
80004418:	b7 07       	ld.d	r6,r11++
8000441a:	b3 26       	st.d	r9++,r6
8000441c:	b7 07       	ld.d	r6,r11++
8000441e:	b3 26       	st.d	r9++,r6
80004420:	22 0a       	sub	r10,32
80004422:	cf 74       	brge	80004410 <memcpy+0x92>
80004424:	2f 0a       	sub	r10,-16
80004426:	c0 65       	brlt	80004432 <memcpy+0xb4>
80004428:	b7 07       	ld.d	r6,r11++
8000442a:	b3 26       	st.d	r9++,r6
8000442c:	b7 07       	ld.d	r6,r11++
8000442e:	b3 26       	st.d	r9++,r6
80004430:	21 0a       	sub	r10,16
80004432:	5c 3a       	neg	r10
80004434:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80004438:	d7 03       	nop
8000443a:	d7 03       	nop
8000443c:	f7 36 00 0e 	ld.ub	r6,r11[14]
80004440:	f3 66 00 0e 	st.b	r9[14],r6
80004444:	f7 36 00 0d 	ld.ub	r6,r11[13]
80004448:	f3 66 00 0d 	st.b	r9[13],r6
8000444c:	f7 36 00 0c 	ld.ub	r6,r11[12]
80004450:	f3 66 00 0c 	st.b	r9[12],r6
80004454:	f7 36 00 0b 	ld.ub	r6,r11[11]
80004458:	f3 66 00 0b 	st.b	r9[11],r6
8000445c:	f7 36 00 0a 	ld.ub	r6,r11[10]
80004460:	f3 66 00 0a 	st.b	r9[10],r6
80004464:	f7 36 00 09 	ld.ub	r6,r11[9]
80004468:	f3 66 00 09 	st.b	r9[9],r6
8000446c:	f7 36 00 08 	ld.ub	r6,r11[8]
80004470:	f3 66 00 08 	st.b	r9[8],r6
80004474:	f7 36 00 07 	ld.ub	r6,r11[7]
80004478:	f3 66 00 07 	st.b	r9[7],r6
8000447c:	f7 36 00 06 	ld.ub	r6,r11[6]
80004480:	f3 66 00 06 	st.b	r9[6],r6
80004484:	f7 36 00 05 	ld.ub	r6,r11[5]
80004488:	f3 66 00 05 	st.b	r9[5],r6
8000448c:	f7 36 00 04 	ld.ub	r6,r11[4]
80004490:	f3 66 00 04 	st.b	r9[4],r6
80004494:	f7 36 00 03 	ld.ub	r6,r11[3]
80004498:	f3 66 00 03 	st.b	r9[3],r6
8000449c:	f7 36 00 02 	ld.ub	r6,r11[2]
800044a0:	f3 66 00 02 	st.b	r9[2],r6
800044a4:	f7 36 00 01 	ld.ub	r6,r11[1]
800044a8:	f3 66 00 01 	st.b	r9[1],r6
800044ac:	f7 36 00 00 	ld.ub	r6,r11[0]
800044b0:	f3 66 00 00 	st.b	r9[0],r6
800044b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800044b8:	20 1a       	sub	r10,1
800044ba:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800044be:	f8 0a 0b 09 	st.b	r12[r10],r9
800044c2:	cf b1       	brne	800044b8 <memcpy+0x13a>
800044c4:	5e fc       	retal	r12
800044c6:	d7 03       	nop

800044c8 <sprintf>:
800044c8:	d4 01       	pushm	lr
800044ca:	21 7d       	sub	sp,92
800044cc:	e0 68 ff ff 	mov	r8,65535
800044d0:	ea 18 7f ff 	orh	r8,0x7fff
800044d4:	50 58       	stdsp	sp[0x14],r8
800044d6:	50 28       	stdsp	sp[0x8],r8
800044d8:	e0 68 02 08 	mov	r8,520
800044dc:	ba 68       	st.h	sp[0xc],r8
800044de:	3f f8       	mov	r8,-1
800044e0:	ba 78       	st.h	sp[0xe],r8
800044e2:	e0 68 00 fc 	mov	r8,252
800044e6:	50 4c       	stdsp	sp[0x10],r12
800044e8:	16 9a       	mov	r10,r11
800044ea:	50 0c       	stdsp	sp[0x0],r12
800044ec:	fa c9 ff a0 	sub	r9,sp,-96
800044f0:	70 0c       	ld.w	r12,r8[0x0]
800044f2:	1a 9b       	mov	r11,sp
800044f4:	c9 ed       	rcall	80004830 <_vfprintf_r>
800044f6:	30 09       	mov	r9,0
800044f8:	40 08       	lddsp	r8,sp[0x0]
800044fa:	b0 89       	st.b	r8[0x0],r9
800044fc:	2e 9d       	sub	sp,-92
800044fe:	d8 02       	popm	pc

80004500 <get_arg>:
80004500:	d4 31       	pushm	r0-r7,lr
80004502:	20 8d       	sub	sp,32
80004504:	fa c4 ff bc 	sub	r4,sp,-68
80004508:	50 4b       	stdsp	sp[0x10],r11
8000450a:	68 2e       	ld.w	lr,r4[0x8]
8000450c:	50 58       	stdsp	sp[0x14],r8
8000450e:	12 96       	mov	r6,r9
80004510:	7c 0b       	ld.w	r11,lr[0x0]
80004512:	70 05       	ld.w	r5,r8[0x0]
80004514:	50 6e       	stdsp	sp[0x18],lr
80004516:	58 0b       	cp.w	r11,0
80004518:	f4 0b 17 00 	moveq	r11,r10
8000451c:	68 03       	ld.w	r3,r4[0x0]
8000451e:	68 11       	ld.w	r1,r4[0x4]
80004520:	40 49       	lddsp	r9,sp[0x10]
80004522:	30 08       	mov	r8,0
80004524:	c2 89       	rjmp	80004774 <get_arg+0x274>
80004526:	2f fb       	sub	r11,-1
80004528:	32 5c       	mov	r12,37
8000452a:	17 8a       	ld.ub	r10,r11[0x0]
8000452c:	f8 0a 18 00 	cp.b	r10,r12
80004530:	5f 1e       	srne	lr
80004532:	f0 0a 18 00 	cp.b	r10,r8
80004536:	5f 1c       	srne	r12
80004538:	fd ec 00 0c 	and	r12,lr,r12
8000453c:	f0 0c 18 00 	cp.b	r12,r8
80004540:	cf 31       	brne	80004526 <get_arg+0x26>
80004542:	58 0a       	cp.w	r10,0
80004544:	e0 80 01 25 	breq	8000478e <get_arg+0x28e>
80004548:	30 0c       	mov	r12,0
8000454a:	3f fa       	mov	r10,-1
8000454c:	18 90       	mov	r0,r12
8000454e:	50 3a       	stdsp	sp[0xc],r10
80004550:	18 94       	mov	r4,r12
80004552:	18 92       	mov	r2,r12
80004554:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
80004558:	16 97       	mov	r7,r11
8000455a:	50 7c       	stdsp	sp[0x1c],r12
8000455c:	fe cc a5 48 	sub	r12,pc,-23224
80004560:	0f 3a       	ld.ub	r10,r7++
80004562:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
80004566:	40 7c       	lddsp	r12,sp[0x1c]
80004568:	1c 0c       	add	r12,lr
8000456a:	fe ce a6 1e 	sub	lr,pc,-23010
8000456e:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80004572:	20 1e       	sub	lr,1
80004574:	50 0e       	stdsp	sp[0x0],lr
80004576:	fe ce a6 96 	sub	lr,pc,-22890
8000457a:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000457e:	50 7c       	stdsp	sp[0x1c],r12
80004580:	40 0c       	lddsp	r12,sp[0x0]
80004582:	58 7c       	cp.w	r12,7
80004584:	e0 8b 00 f1 	brhi	80004766 <get_arg+0x266>
80004588:	fe ce a8 48 	sub	lr,pc,-22456
8000458c:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80004590:	36 8b       	mov	r11,104
80004592:	f6 0a 18 00 	cp.b	r10,r11
80004596:	e0 80 00 e8 	breq	80004766 <get_arg+0x266>
8000459a:	37 1b       	mov	r11,113
8000459c:	f6 0a 18 00 	cp.b	r10,r11
800045a0:	c0 70       	breq	800045ae <get_arg+0xae>
800045a2:	34 cb       	mov	r11,76
800045a4:	f6 0a 18 00 	cp.b	r10,r11
800045a8:	c0 51       	brne	800045b2 <get_arg+0xb2>
800045aa:	a3 b4       	sbr	r4,0x3
800045ac:	cd d8       	rjmp	80004766 <get_arg+0x266>
800045ae:	a5 b4       	sbr	r4,0x5
800045b0:	cd b8       	rjmp	80004766 <get_arg+0x266>
800045b2:	08 9a       	mov	r10,r4
800045b4:	0e 9b       	mov	r11,r7
800045b6:	a5 aa       	sbr	r10,0x4
800045b8:	17 3c       	ld.ub	r12,r11++
800045ba:	a5 b4       	sbr	r4,0x5
800045bc:	36 ce       	mov	lr,108
800045be:	fc 0c 18 00 	cp.b	r12,lr
800045c2:	e0 80 00 d3 	breq	80004768 <get_arg+0x268>
800045c6:	14 94       	mov	r4,r10
800045c8:	cc f8       	rjmp	80004766 <get_arg+0x266>
800045ca:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800045ce:	36 7c       	mov	r12,103
800045d0:	f8 0a 18 00 	cp.b	r10,r12
800045d4:	e0 8b 00 27 	brhi	80004622 <get_arg+0x122>
800045d8:	36 5b       	mov	r11,101
800045da:	f6 0a 18 00 	cp.b	r10,r11
800045de:	c4 82       	brcc	8000466e <get_arg+0x16e>
800045e0:	34 fb       	mov	r11,79
800045e2:	f6 0a 18 00 	cp.b	r10,r11
800045e6:	c4 80       	breq	80004676 <get_arg+0x176>
800045e8:	e0 8b 00 0c 	brhi	80004600 <get_arg+0x100>
800045ec:	34 5b       	mov	r11,69
800045ee:	f6 0a 18 00 	cp.b	r10,r11
800045f2:	c3 e0       	breq	8000466e <get_arg+0x16e>
800045f4:	34 7b       	mov	r11,71
800045f6:	f6 0a 18 00 	cp.b	r10,r11
800045fa:	c3 a0       	breq	8000466e <get_arg+0x16e>
800045fc:	34 4b       	mov	r11,68
800045fe:	c0 88       	rjmp	8000460e <get_arg+0x10e>
80004600:	35 8b       	mov	r11,88
80004602:	f6 0a 18 00 	cp.b	r10,r11
80004606:	c2 c0       	breq	8000465e <get_arg+0x15e>
80004608:	e0 8b 00 07 	brhi	80004616 <get_arg+0x116>
8000460c:	35 5b       	mov	r11,85
8000460e:	f6 0a 18 00 	cp.b	r10,r11
80004612:	c3 51       	brne	8000467c <get_arg+0x17c>
80004614:	c3 18       	rjmp	80004676 <get_arg+0x176>
80004616:	36 3b       	mov	r11,99
80004618:	f6 0a 18 00 	cp.b	r10,r11
8000461c:	c2 f0       	breq	8000467a <get_arg+0x17a>
8000461e:	36 4b       	mov	r11,100
80004620:	c0 e8       	rjmp	8000463c <get_arg+0x13c>
80004622:	37 0b       	mov	r11,112
80004624:	f6 0a 18 00 	cp.b	r10,r11
80004628:	c2 50       	breq	80004672 <get_arg+0x172>
8000462a:	e0 8b 00 0d 	brhi	80004644 <get_arg+0x144>
8000462e:	36 eb       	mov	r11,110
80004630:	f6 0a 18 00 	cp.b	r10,r11
80004634:	c1 f0       	breq	80004672 <get_arg+0x172>
80004636:	e0 8b 00 14 	brhi	8000465e <get_arg+0x15e>
8000463a:	36 9b       	mov	r11,105
8000463c:	f6 0a 18 00 	cp.b	r10,r11
80004640:	c1 e1       	brne	8000467c <get_arg+0x17c>
80004642:	c0 e8       	rjmp	8000465e <get_arg+0x15e>
80004644:	37 5b       	mov	r11,117
80004646:	f6 0a 18 00 	cp.b	r10,r11
8000464a:	c0 a0       	breq	8000465e <get_arg+0x15e>
8000464c:	37 8b       	mov	r11,120
8000464e:	f6 0a 18 00 	cp.b	r10,r11
80004652:	c0 60       	breq	8000465e <get_arg+0x15e>
80004654:	37 3b       	mov	r11,115
80004656:	f6 0a 18 00 	cp.b	r10,r11
8000465a:	c1 11       	brne	8000467c <get_arg+0x17c>
8000465c:	c0 b8       	rjmp	80004672 <get_arg+0x172>
8000465e:	ed b4 00 04 	bld	r4,0x4
80004662:	c0 a0       	breq	80004676 <get_arg+0x176>
80004664:	ed b4 00 05 	bld	r4,0x5
80004668:	c0 91       	brne	8000467a <get_arg+0x17a>
8000466a:	30 20       	mov	r0,2
8000466c:	c0 88       	rjmp	8000467c <get_arg+0x17c>
8000466e:	30 40       	mov	r0,4
80004670:	c0 68       	rjmp	8000467c <get_arg+0x17c>
80004672:	30 30       	mov	r0,3
80004674:	c0 48       	rjmp	8000467c <get_arg+0x17c>
80004676:	30 10       	mov	r0,1
80004678:	c0 28       	rjmp	8000467c <get_arg+0x17c>
8000467a:	30 00       	mov	r0,0
8000467c:	40 3b       	lddsp	r11,sp[0xc]
8000467e:	5b fb       	cp.w	r11,-1
80004680:	c0 40       	breq	80004688 <get_arg+0x188>
80004682:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80004686:	c7 08       	rjmp	80004766 <get_arg+0x266>
80004688:	58 60       	cp.w	r0,6
8000468a:	e0 8b 00 6e 	brhi	80004766 <get_arg+0x266>
8000468e:	6c 0a       	ld.w	r10,r6[0x0]
80004690:	ea cc ff ff 	sub	r12,r5,-1
80004694:	fe ce a9 34 	sub	lr,pc,-22220
80004698:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000469c:	f4 cb ff f8 	sub	r11,r10,-8
800046a0:	8d 0b       	st.w	r6[0x0],r11
800046a2:	f4 ea 00 00 	ld.d	r10,r10[0]
800046a6:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800046aa:	c0 f8       	rjmp	800046c8 <get_arg+0x1c8>
800046ac:	f4 cb ff fc 	sub	r11,r10,-4
800046b0:	8d 0b       	st.w	r6[0x0],r11
800046b2:	74 0a       	ld.w	r10,r10[0x0]
800046b4:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
800046b8:	c0 88       	rjmp	800046c8 <get_arg+0x1c8>
800046ba:	f4 cb ff f8 	sub	r11,r10,-8
800046be:	8d 0b       	st.w	r6[0x0],r11
800046c0:	f4 ea 00 00 	ld.d	r10,r10[0]
800046c4:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
800046c8:	0e 9b       	mov	r11,r7
800046ca:	18 95       	mov	r5,r12
800046cc:	c4 e8       	rjmp	80004768 <get_arg+0x268>
800046ce:	62 0a       	ld.w	r10,r1[0x0]
800046d0:	5b fa       	cp.w	r10,-1
800046d2:	c0 b1       	brne	800046e8 <get_arg+0x1e8>
800046d4:	50 19       	stdsp	sp[0x4],r9
800046d6:	50 28       	stdsp	sp[0x8],r8
800046d8:	e0 6a 00 80 	mov	r10,128
800046dc:	30 0b       	mov	r11,0
800046de:	02 9c       	mov	r12,r1
800046e0:	e0 a0 1d 78 	rcall	800081d0 <memset>
800046e4:	40 28       	lddsp	r8,sp[0x8]
800046e6:	40 19       	lddsp	r9,sp[0x4]
800046e8:	e4 cc 00 01 	sub	r12,r2,1
800046ec:	0e 9b       	mov	r11,r7
800046ee:	50 3c       	stdsp	sp[0xc],r12
800046f0:	f2 0c 0c 49 	max	r9,r9,r12
800046f4:	c3 a8       	rjmp	80004768 <get_arg+0x268>
800046f6:	62 0a       	ld.w	r10,r1[0x0]
800046f8:	5b fa       	cp.w	r10,-1
800046fa:	c0 b1       	brne	80004710 <get_arg+0x210>
800046fc:	50 19       	stdsp	sp[0x4],r9
800046fe:	50 28       	stdsp	sp[0x8],r8
80004700:	e0 6a 00 80 	mov	r10,128
80004704:	30 0b       	mov	r11,0
80004706:	02 9c       	mov	r12,r1
80004708:	e0 a0 1d 64 	rcall	800081d0 <memset>
8000470c:	40 28       	lddsp	r8,sp[0x8]
8000470e:	40 19       	lddsp	r9,sp[0x4]
80004710:	20 12       	sub	r2,1
80004712:	30 0a       	mov	r10,0
80004714:	0e 9b       	mov	r11,r7
80004716:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000471a:	f2 02 0c 49 	max	r9,r9,r2
8000471e:	c2 58       	rjmp	80004768 <get_arg+0x268>
80004720:	16 97       	mov	r7,r11
80004722:	6c 0a       	ld.w	r10,r6[0x0]
80004724:	f4 cb ff fc 	sub	r11,r10,-4
80004728:	8d 0b       	st.w	r6[0x0],r11
8000472a:	74 0a       	ld.w	r10,r10[0x0]
8000472c:	0e 9b       	mov	r11,r7
8000472e:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80004732:	2f f5       	sub	r5,-1
80004734:	c1 a8       	rjmp	80004768 <get_arg+0x268>
80004736:	f4 c2 00 30 	sub	r2,r10,48
8000473a:	c0 68       	rjmp	80004746 <get_arg+0x246>
8000473c:	e4 02 00 22 	add	r2,r2,r2<<0x2
80004740:	2f f7       	sub	r7,-1
80004742:	f4 02 00 12 	add	r2,r10,r2<<0x1
80004746:	0f 8a       	ld.ub	r10,r7[0x0]
80004748:	58 0a       	cp.w	r10,0
8000474a:	c0 e0       	breq	80004766 <get_arg+0x266>
8000474c:	23 0a       	sub	r10,48
8000474e:	58 9a       	cp.w	r10,9
80004750:	fe 98 ff f6 	brls	8000473c <get_arg+0x23c>
80004754:	c0 98       	rjmp	80004766 <get_arg+0x266>
80004756:	2f f7       	sub	r7,-1
80004758:	0f 8a       	ld.ub	r10,r7[0x0]
8000475a:	58 0a       	cp.w	r10,0
8000475c:	c0 50       	breq	80004766 <get_arg+0x266>
8000475e:	23 0a       	sub	r10,48
80004760:	58 9a       	cp.w	r10,9
80004762:	fe 98 ff fa 	brls	80004756 <get_arg+0x256>
80004766:	0e 9b       	mov	r11,r7
80004768:	40 7c       	lddsp	r12,sp[0x1c]
8000476a:	30 ba       	mov	r10,11
8000476c:	f4 0c 18 00 	cp.b	r12,r10
80004770:	fe 91 fe f2 	brne	80004554 <get_arg+0x54>
80004774:	40 42       	lddsp	r2,sp[0x10]
80004776:	17 8c       	ld.ub	r12,r11[0x0]
80004778:	0a 32       	cp.w	r2,r5
8000477a:	5f 4a       	srge	r10
8000477c:	f0 0c 18 00 	cp.b	r12,r8
80004780:	5f 1c       	srne	r12
80004782:	f9 ea 00 0a 	and	r10,r12,r10
80004786:	f0 0a 18 00 	cp.b	r10,r8
8000478a:	fe 91 fe cf 	brne	80004528 <get_arg+0x28>
8000478e:	30 08       	mov	r8,0
80004790:	40 4e       	lddsp	lr,sp[0x10]
80004792:	17 8a       	ld.ub	r10,r11[0x0]
80004794:	e2 05 00 21 	add	r1,r1,r5<<0x2
80004798:	f0 0a 18 00 	cp.b	r10,r8
8000479c:	fc 09 17 10 	movne	r9,lr
800047a0:	e6 05 00 38 	add	r8,r3,r5<<0x3
800047a4:	06 9e       	mov	lr,r3
800047a6:	c2 a8       	rjmp	800047fa <get_arg+0x2fa>
800047a8:	62 0a       	ld.w	r10,r1[0x0]
800047aa:	58 3a       	cp.w	r10,3
800047ac:	c1 e0       	breq	800047e8 <get_arg+0x2e8>
800047ae:	e0 89 00 07 	brgt	800047bc <get_arg+0x2bc>
800047b2:	58 1a       	cp.w	r10,1
800047b4:	c1 a0       	breq	800047e8 <get_arg+0x2e8>
800047b6:	58 2a       	cp.w	r10,2
800047b8:	c1 81       	brne	800047e8 <get_arg+0x2e8>
800047ba:	c0 58       	rjmp	800047c4 <get_arg+0x2c4>
800047bc:	58 5a       	cp.w	r10,5
800047be:	c0 c0       	breq	800047d6 <get_arg+0x2d6>
800047c0:	c0 b5       	brlt	800047d6 <get_arg+0x2d6>
800047c2:	c1 38       	rjmp	800047e8 <get_arg+0x2e8>
800047c4:	6c 0a       	ld.w	r10,r6[0x0]
800047c6:	f4 cc ff f8 	sub	r12,r10,-8
800047ca:	8d 0c       	st.w	r6[0x0],r12
800047cc:	f4 e2 00 00 	ld.d	r2,r10[0]
800047d0:	f0 e3 00 00 	st.d	r8[0],r2
800047d4:	c1 08       	rjmp	800047f4 <get_arg+0x2f4>
800047d6:	6c 0a       	ld.w	r10,r6[0x0]
800047d8:	f4 cc ff f8 	sub	r12,r10,-8
800047dc:	8d 0c       	st.w	r6[0x0],r12
800047de:	f4 e2 00 00 	ld.d	r2,r10[0]
800047e2:	f0 e3 00 00 	st.d	r8[0],r2
800047e6:	c0 78       	rjmp	800047f4 <get_arg+0x2f4>
800047e8:	6c 0a       	ld.w	r10,r6[0x0]
800047ea:	f4 cc ff fc 	sub	r12,r10,-4
800047ee:	8d 0c       	st.w	r6[0x0],r12
800047f0:	74 0a       	ld.w	r10,r10[0x0]
800047f2:	91 0a       	st.w	r8[0x0],r10
800047f4:	2f f5       	sub	r5,-1
800047f6:	2f 88       	sub	r8,-8
800047f8:	2f c1       	sub	r1,-4
800047fa:	12 35       	cp.w	r5,r9
800047fc:	fe 9a ff d6 	brle	800047a8 <get_arg+0x2a8>
80004800:	1c 93       	mov	r3,lr
80004802:	40 52       	lddsp	r2,sp[0x14]
80004804:	40 6e       	lddsp	lr,sp[0x18]
80004806:	85 05       	st.w	r2[0x0],r5
80004808:	9d 0b       	st.w	lr[0x0],r11
8000480a:	40 4b       	lddsp	r11,sp[0x10]
8000480c:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80004810:	2f 8d       	sub	sp,-32
80004812:	d8 32       	popm	r0-r7,pc

80004814 <__sprint_r>:
80004814:	d4 21       	pushm	r4-r7,lr
80004816:	14 97       	mov	r7,r10
80004818:	74 28       	ld.w	r8,r10[0x8]
8000481a:	58 08       	cp.w	r8,0
8000481c:	c0 41       	brne	80004824 <__sprint_r+0x10>
8000481e:	95 18       	st.w	r10[0x4],r8
80004820:	10 9c       	mov	r12,r8
80004822:	d8 22       	popm	r4-r7,pc
80004824:	e0 a0 18 b4 	rcall	8000798c <__sfvwrite_r>
80004828:	30 08       	mov	r8,0
8000482a:	8f 18       	st.w	r7[0x4],r8
8000482c:	8f 28       	st.w	r7[0x8],r8
8000482e:	d8 22       	popm	r4-r7,pc

80004830 <_vfprintf_r>:
80004830:	d4 31       	pushm	r0-r7,lr
80004832:	fa cd 06 bc 	sub	sp,sp,1724
80004836:	51 09       	stdsp	sp[0x40],r9
80004838:	16 91       	mov	r1,r11
8000483a:	14 97       	mov	r7,r10
8000483c:	18 95       	mov	r5,r12
8000483e:	e0 a0 1a 1d 	rcall	80007c78 <_localeconv_r>
80004842:	78 0c       	ld.w	r12,r12[0x0]
80004844:	50 cc       	stdsp	sp[0x30],r12
80004846:	58 05       	cp.w	r5,0
80004848:	c0 70       	breq	80004856 <_vfprintf_r+0x26>
8000484a:	6a 68       	ld.w	r8,r5[0x18]
8000484c:	58 08       	cp.w	r8,0
8000484e:	c0 41       	brne	80004856 <_vfprintf_r+0x26>
80004850:	0a 9c       	mov	r12,r5
80004852:	e0 a0 17 3d 	rcall	800076cc <__sinit>
80004856:	fe c8 a7 32 	sub	r8,pc,-22734
8000485a:	10 31       	cp.w	r1,r8
8000485c:	c0 31       	brne	80004862 <_vfprintf_r+0x32>
8000485e:	6a 01       	ld.w	r1,r5[0x0]
80004860:	c0 c8       	rjmp	80004878 <_vfprintf_r+0x48>
80004862:	fe c8 a7 1e 	sub	r8,pc,-22754
80004866:	10 31       	cp.w	r1,r8
80004868:	c0 31       	brne	8000486e <_vfprintf_r+0x3e>
8000486a:	6a 11       	ld.w	r1,r5[0x4]
8000486c:	c0 68       	rjmp	80004878 <_vfprintf_r+0x48>
8000486e:	fe c8 a7 0a 	sub	r8,pc,-22774
80004872:	10 31       	cp.w	r1,r8
80004874:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80004878:	82 68       	ld.sh	r8,r1[0xc]
8000487a:	ed b8 00 03 	bld	r8,0x3
8000487e:	c0 41       	brne	80004886 <_vfprintf_r+0x56>
80004880:	62 48       	ld.w	r8,r1[0x10]
80004882:	58 08       	cp.w	r8,0
80004884:	c0 71       	brne	80004892 <_vfprintf_r+0x62>
80004886:	02 9b       	mov	r11,r1
80004888:	0a 9c       	mov	r12,r5
8000488a:	e0 a0 0f 5d 	rcall	80006744 <__swsetup_r>
8000488e:	e0 81 0f 54 	brne	80006736 <_vfprintf_r+0x1f06>
80004892:	82 68       	ld.sh	r8,r1[0xc]
80004894:	10 99       	mov	r9,r8
80004896:	e2 19 00 1a 	andl	r9,0x1a,COH
8000489a:	58 a9       	cp.w	r9,10
8000489c:	c3 c1       	brne	80004914 <_vfprintf_r+0xe4>
8000489e:	82 79       	ld.sh	r9,r1[0xe]
800048a0:	30 0a       	mov	r10,0
800048a2:	f4 09 19 00 	cp.h	r9,r10
800048a6:	c3 75       	brlt	80004914 <_vfprintf_r+0xe4>
800048a8:	a1 d8       	cbr	r8,0x1
800048aa:	fb 58 05 d0 	st.h	sp[1488],r8
800048ae:	62 88       	ld.w	r8,r1[0x20]
800048b0:	fb 48 05 e4 	st.w	sp[1508],r8
800048b4:	62 a8       	ld.w	r8,r1[0x28]
800048b6:	fb 48 05 ec 	st.w	sp[1516],r8
800048ba:	fa c8 ff bc 	sub	r8,sp,-68
800048be:	fb 48 05 d4 	st.w	sp[1492],r8
800048c2:	fb 48 05 c4 	st.w	sp[1476],r8
800048c6:	e0 68 04 00 	mov	r8,1024
800048ca:	fb 48 05 d8 	st.w	sp[1496],r8
800048ce:	fb 48 05 cc 	st.w	sp[1484],r8
800048d2:	30 08       	mov	r8,0
800048d4:	fb 59 05 d2 	st.h	sp[1490],r9
800048d8:	0e 9a       	mov	r10,r7
800048da:	41 09       	lddsp	r9,sp[0x40]
800048dc:	fa c7 fa 3c 	sub	r7,sp,-1476
800048e0:	fb 48 05 dc 	st.w	sp[1500],r8
800048e4:	0a 9c       	mov	r12,r5
800048e6:	0e 9b       	mov	r11,r7
800048e8:	ca 4f       	rcall	80004830 <_vfprintf_r>
800048ea:	50 bc       	stdsp	sp[0x2c],r12
800048ec:	c0 95       	brlt	800048fe <_vfprintf_r+0xce>
800048ee:	0e 9b       	mov	r11,r7
800048f0:	0a 9c       	mov	r12,r5
800048f2:	e0 a0 16 15 	rcall	8000751c <_fflush_r>
800048f6:	40 be       	lddsp	lr,sp[0x2c]
800048f8:	f9 be 01 ff 	movne	lr,-1
800048fc:	50 be       	stdsp	sp[0x2c],lr
800048fe:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80004902:	ed b8 00 06 	bld	r8,0x6
80004906:	e0 81 0f 1a 	brne	8000673a <_vfprintf_r+0x1f0a>
8000490a:	82 68       	ld.sh	r8,r1[0xc]
8000490c:	a7 a8       	sbr	r8,0x6
8000490e:	a2 68       	st.h	r1[0xc],r8
80004910:	e0 8f 0f 15 	bral	8000673a <_vfprintf_r+0x1f0a>
80004914:	30 08       	mov	r8,0
80004916:	fb 48 06 b4 	st.w	sp[1716],r8
8000491a:	fb 48 06 90 	st.w	sp[1680],r8
8000491e:	fb 48 06 8c 	st.w	sp[1676],r8
80004922:	fb 48 06 b0 	st.w	sp[1712],r8
80004926:	30 08       	mov	r8,0
80004928:	30 09       	mov	r9,0
8000492a:	50 a7       	stdsp	sp[0x28],r7
8000492c:	50 78       	stdsp	sp[0x1c],r8
8000492e:	fa c3 f9 e0 	sub	r3,sp,-1568
80004932:	3f f8       	mov	r8,-1
80004934:	50 59       	stdsp	sp[0x14],r9
80004936:	fb 43 06 88 	st.w	sp[1672],r3
8000493a:	fb 48 05 44 	st.w	sp[1348],r8
8000493e:	12 9c       	mov	r12,r9
80004940:	50 69       	stdsp	sp[0x18],r9
80004942:	50 d9       	stdsp	sp[0x34],r9
80004944:	50 e9       	stdsp	sp[0x38],r9
80004946:	50 b9       	stdsp	sp[0x2c],r9
80004948:	12 97       	mov	r7,r9
8000494a:	0a 94       	mov	r4,r5
8000494c:	40 a2       	lddsp	r2,sp[0x28]
8000494e:	32 5a       	mov	r10,37
80004950:	30 08       	mov	r8,0
80004952:	c0 28       	rjmp	80004956 <_vfprintf_r+0x126>
80004954:	2f f2       	sub	r2,-1
80004956:	05 89       	ld.ub	r9,r2[0x0]
80004958:	f0 09 18 00 	cp.b	r9,r8
8000495c:	5f 1b       	srne	r11
8000495e:	f4 09 18 00 	cp.b	r9,r10
80004962:	5f 19       	srne	r9
80004964:	f3 eb 00 0b 	and	r11,r9,r11
80004968:	f0 0b 18 00 	cp.b	r11,r8
8000496c:	cf 41       	brne	80004954 <_vfprintf_r+0x124>
8000496e:	40 ab       	lddsp	r11,sp[0x28]
80004970:	e4 0b 01 06 	sub	r6,r2,r11
80004974:	c1 e0       	breq	800049b0 <_vfprintf_r+0x180>
80004976:	fa f8 06 90 	ld.w	r8,sp[1680]
8000497a:	0c 08       	add	r8,r6
8000497c:	87 0b       	st.w	r3[0x0],r11
8000497e:	fb 48 06 90 	st.w	sp[1680],r8
80004982:	87 16       	st.w	r3[0x4],r6
80004984:	fa f8 06 8c 	ld.w	r8,sp[1676]
80004988:	2f f8       	sub	r8,-1
8000498a:	fb 48 06 8c 	st.w	sp[1676],r8
8000498e:	58 78       	cp.w	r8,7
80004990:	e0 89 00 04 	brgt	80004998 <_vfprintf_r+0x168>
80004994:	2f 83       	sub	r3,-8
80004996:	c0 a8       	rjmp	800049aa <_vfprintf_r+0x17a>
80004998:	fa ca f9 78 	sub	r10,sp,-1672
8000499c:	02 9b       	mov	r11,r1
8000499e:	08 9c       	mov	r12,r4
800049a0:	c3 af       	rcall	80004814 <__sprint_r>
800049a2:	e0 81 0e c6 	brne	8000672e <_vfprintf_r+0x1efe>
800049a6:	fa c3 f9 e0 	sub	r3,sp,-1568
800049aa:	40 ba       	lddsp	r10,sp[0x2c]
800049ac:	0c 0a       	add	r10,r6
800049ae:	50 ba       	stdsp	sp[0x2c],r10
800049b0:	05 89       	ld.ub	r9,r2[0x0]
800049b2:	30 08       	mov	r8,0
800049b4:	f0 09 18 00 	cp.b	r9,r8
800049b8:	e0 80 0e aa 	breq	8000670c <_vfprintf_r+0x1edc>
800049bc:	30 09       	mov	r9,0
800049be:	fb 68 06 bb 	st.b	sp[1723],r8
800049c2:	0e 96       	mov	r6,r7
800049c4:	e4 c8 ff ff 	sub	r8,r2,-1
800049c8:	3f fe       	mov	lr,-1
800049ca:	50 93       	stdsp	sp[0x24],r3
800049cc:	50 41       	stdsp	sp[0x10],r1
800049ce:	0e 93       	mov	r3,r7
800049d0:	04 91       	mov	r1,r2
800049d2:	50 89       	stdsp	sp[0x20],r9
800049d4:	50 a8       	stdsp	sp[0x28],r8
800049d6:	50 2e       	stdsp	sp[0x8],lr
800049d8:	50 39       	stdsp	sp[0xc],r9
800049da:	12 95       	mov	r5,r9
800049dc:	12 90       	mov	r0,r9
800049de:	10 97       	mov	r7,r8
800049e0:	08 92       	mov	r2,r4
800049e2:	c0 78       	rjmp	800049f0 <_vfprintf_r+0x1c0>
800049e4:	3f fc       	mov	r12,-1
800049e6:	08 97       	mov	r7,r4
800049e8:	50 2c       	stdsp	sp[0x8],r12
800049ea:	c0 38       	rjmp	800049f0 <_vfprintf_r+0x1c0>
800049ec:	30 0b       	mov	r11,0
800049ee:	50 3b       	stdsp	sp[0xc],r11
800049f0:	0f 38       	ld.ub	r8,r7++
800049f2:	c0 28       	rjmp	800049f6 <_vfprintf_r+0x1c6>
800049f4:	12 90       	mov	r0,r9
800049f6:	f0 c9 00 20 	sub	r9,r8,32
800049fa:	e0 49 00 58 	cp.w	r9,88
800049fe:	e0 8b 0a 30 	brhi	80005e5e <_vfprintf_r+0x162e>
80004a02:	fe ca ac 86 	sub	r10,pc,-21370
80004a06:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80004a0a:	50 a7       	stdsp	sp[0x28],r7
80004a0c:	50 80       	stdsp	sp[0x20],r0
80004a0e:	0c 97       	mov	r7,r6
80004a10:	04 94       	mov	r4,r2
80004a12:	06 96       	mov	r6,r3
80004a14:	02 92       	mov	r2,r1
80004a16:	fe c9 aa 5e 	sub	r9,pc,-21922
80004a1a:	40 93       	lddsp	r3,sp[0x24]
80004a1c:	10 90       	mov	r0,r8
80004a1e:	40 41       	lddsp	r1,sp[0x10]
80004a20:	50 d9       	stdsp	sp[0x34],r9
80004a22:	e0 8f 08 8e 	bral	80005b3e <_vfprintf_r+0x130e>
80004a26:	30 08       	mov	r8,0
80004a28:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80004a2c:	f0 09 18 00 	cp.b	r9,r8
80004a30:	ce 01       	brne	800049f0 <_vfprintf_r+0x1c0>
80004a32:	32 08       	mov	r8,32
80004a34:	c6 e8       	rjmp	80004b10 <_vfprintf_r+0x2e0>
80004a36:	a1 a5       	sbr	r5,0x0
80004a38:	cd cb       	rjmp	800049f0 <_vfprintf_r+0x1c0>
80004a3a:	0f 89       	ld.ub	r9,r7[0x0]
80004a3c:	f2 c8 00 30 	sub	r8,r9,48
80004a40:	58 98       	cp.w	r8,9
80004a42:	e0 8b 00 1d 	brhi	80004a7c <_vfprintf_r+0x24c>
80004a46:	ee c8 ff ff 	sub	r8,r7,-1
80004a4a:	30 0b       	mov	r11,0
80004a4c:	23 09       	sub	r9,48
80004a4e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004a52:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80004a56:	11 39       	ld.ub	r9,r8++
80004a58:	f2 ca 00 30 	sub	r10,r9,48
80004a5c:	58 9a       	cp.w	r10,9
80004a5e:	fe 98 ff f7 	brls	80004a4c <_vfprintf_r+0x21c>
80004a62:	e0 49 00 24 	cp.w	r9,36
80004a66:	cc 31       	brne	800049ec <_vfprintf_r+0x1bc>
80004a68:	e0 4b 00 20 	cp.w	r11,32
80004a6c:	e0 89 0e 60 	brgt	8000672c <_vfprintf_r+0x1efc>
80004a70:	20 1b       	sub	r11,1
80004a72:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004a76:	12 3b       	cp.w	r11,r9
80004a78:	c0 95       	brlt	80004a8a <_vfprintf_r+0x25a>
80004a7a:	c1 08       	rjmp	80004a9a <_vfprintf_r+0x26a>
80004a7c:	fa f9 06 b4 	ld.w	r9,sp[1716]
80004a80:	ec ca ff ff 	sub	r10,r6,-1
80004a84:	12 36       	cp.w	r6,r9
80004a86:	c1 f5       	brlt	80004ac4 <_vfprintf_r+0x294>
80004a88:	c2 68       	rjmp	80004ad4 <_vfprintf_r+0x2a4>
80004a8a:	fa ce f9 44 	sub	lr,sp,-1724
80004a8e:	10 97       	mov	r7,r8
80004a90:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80004a94:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80004a98:	c3 58       	rjmp	80004b02 <_vfprintf_r+0x2d2>
80004a9a:	10 97       	mov	r7,r8
80004a9c:	fa c8 f9 50 	sub	r8,sp,-1712
80004aa0:	1a d8       	st.w	--sp,r8
80004aa2:	fa c8 fa b8 	sub	r8,sp,-1352
80004aa6:	1a d8       	st.w	--sp,r8
80004aa8:	fa c8 fb b4 	sub	r8,sp,-1100
80004aac:	02 9a       	mov	r10,r1
80004aae:	1a d8       	st.w	--sp,r8
80004ab0:	04 9c       	mov	r12,r2
80004ab2:	fa c8 f9 40 	sub	r8,sp,-1728
80004ab6:	fa c9 ff b4 	sub	r9,sp,-76
80004aba:	fe b0 fd 23 	rcall	80004500 <get_arg>
80004abe:	2f dd       	sub	sp,-12
80004ac0:	78 00       	ld.w	r0,r12[0x0]
80004ac2:	c2 08       	rjmp	80004b02 <_vfprintf_r+0x2d2>
80004ac4:	fa cc f9 44 	sub	r12,sp,-1724
80004ac8:	14 96       	mov	r6,r10
80004aca:	f8 03 00 38 	add	r8,r12,r3<<0x3
80004ace:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80004ad2:	c1 88       	rjmp	80004b02 <_vfprintf_r+0x2d2>
80004ad4:	41 08       	lddsp	r8,sp[0x40]
80004ad6:	59 f9       	cp.w	r9,31
80004ad8:	e0 89 00 11 	brgt	80004afa <_vfprintf_r+0x2ca>
80004adc:	f0 cb ff fc 	sub	r11,r8,-4
80004ae0:	51 0b       	stdsp	sp[0x40],r11
80004ae2:	70 00       	ld.w	r0,r8[0x0]
80004ae4:	fa cb f9 44 	sub	r11,sp,-1724
80004ae8:	f6 09 00 38 	add	r8,r11,r9<<0x3
80004aec:	f1 40 fd 88 	st.w	r8[-632],r0
80004af0:	2f f9       	sub	r9,-1
80004af2:	14 96       	mov	r6,r10
80004af4:	fb 49 06 b4 	st.w	sp[1716],r9
80004af8:	c0 58       	rjmp	80004b02 <_vfprintf_r+0x2d2>
80004afa:	70 00       	ld.w	r0,r8[0x0]
80004afc:	14 96       	mov	r6,r10
80004afe:	2f c8       	sub	r8,-4
80004b00:	51 08       	stdsp	sp[0x40],r8
80004b02:	58 00       	cp.w	r0,0
80004b04:	fe 94 ff 76 	brge	800049f0 <_vfprintf_r+0x1c0>
80004b08:	5c 30       	neg	r0
80004b0a:	a3 a5       	sbr	r5,0x2
80004b0c:	c7 2b       	rjmp	800049f0 <_vfprintf_r+0x1c0>
80004b0e:	32 b8       	mov	r8,43
80004b10:	fb 68 06 bb 	st.b	sp[1723],r8
80004b14:	c6 eb       	rjmp	800049f0 <_vfprintf_r+0x1c0>
80004b16:	0f 38       	ld.ub	r8,r7++
80004b18:	e0 48 00 2a 	cp.w	r8,42
80004b1c:	c0 30       	breq	80004b22 <_vfprintf_r+0x2f2>
80004b1e:	30 09       	mov	r9,0
80004b20:	c7 98       	rjmp	80004c12 <_vfprintf_r+0x3e2>
80004b22:	0f 88       	ld.ub	r8,r7[0x0]
80004b24:	f0 c9 00 30 	sub	r9,r8,48
80004b28:	58 99       	cp.w	r9,9
80004b2a:	e0 8b 00 1f 	brhi	80004b68 <_vfprintf_r+0x338>
80004b2e:	ee c4 ff ff 	sub	r4,r7,-1
80004b32:	30 0b       	mov	r11,0
80004b34:	23 08       	sub	r8,48
80004b36:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80004b3a:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80004b3e:	09 38       	ld.ub	r8,r4++
80004b40:	f0 c9 00 30 	sub	r9,r8,48
80004b44:	58 99       	cp.w	r9,9
80004b46:	fe 98 ff f7 	brls	80004b34 <_vfprintf_r+0x304>
80004b4a:	e0 48 00 24 	cp.w	r8,36
80004b4e:	fe 91 ff 4f 	brne	800049ec <_vfprintf_r+0x1bc>
80004b52:	e0 4b 00 20 	cp.w	r11,32
80004b56:	e0 89 0d eb 	brgt	8000672c <_vfprintf_r+0x1efc>
80004b5a:	20 1b       	sub	r11,1
80004b5c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004b60:	10 3b       	cp.w	r11,r8
80004b62:	c0 a5       	brlt	80004b76 <_vfprintf_r+0x346>
80004b64:	c1 18       	rjmp	80004b86 <_vfprintf_r+0x356>
80004b66:	d7 03       	nop
80004b68:	fa fa 06 b4 	ld.w	r10,sp[1716]
80004b6c:	ec c9 ff ff 	sub	r9,r6,-1
80004b70:	14 36       	cp.w	r6,r10
80004b72:	c1 f5       	brlt	80004bb0 <_vfprintf_r+0x380>
80004b74:	c2 88       	rjmp	80004bc4 <_vfprintf_r+0x394>
80004b76:	fa ca f9 44 	sub	r10,sp,-1724
80004b7a:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80004b7e:	f6 fb fd 88 	ld.w	r11,r11[-632]
80004b82:	50 2b       	stdsp	sp[0x8],r11
80004b84:	c3 c8       	rjmp	80004bfc <_vfprintf_r+0x3cc>
80004b86:	fa c8 f9 50 	sub	r8,sp,-1712
80004b8a:	1a d8       	st.w	--sp,r8
80004b8c:	fa c8 fa b8 	sub	r8,sp,-1352
80004b90:	1a d8       	st.w	--sp,r8
80004b92:	fa c8 fb b4 	sub	r8,sp,-1100
80004b96:	02 9a       	mov	r10,r1
80004b98:	1a d8       	st.w	--sp,r8
80004b9a:	04 9c       	mov	r12,r2
80004b9c:	fa c8 f9 40 	sub	r8,sp,-1728
80004ba0:	fa c9 ff b4 	sub	r9,sp,-76
80004ba4:	fe b0 fc ae 	rcall	80004500 <get_arg>
80004ba8:	2f dd       	sub	sp,-12
80004baa:	78 0c       	ld.w	r12,r12[0x0]
80004bac:	50 2c       	stdsp	sp[0x8],r12
80004bae:	c2 78       	rjmp	80004bfc <_vfprintf_r+0x3cc>
80004bb0:	12 96       	mov	r6,r9
80004bb2:	0e 94       	mov	r4,r7
80004bb4:	fa c9 f9 44 	sub	r9,sp,-1724
80004bb8:	f2 03 00 38 	add	r8,r9,r3<<0x3
80004bbc:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80004bc0:	50 28       	stdsp	sp[0x8],r8
80004bc2:	c1 d8       	rjmp	80004bfc <_vfprintf_r+0x3cc>
80004bc4:	41 08       	lddsp	r8,sp[0x40]
80004bc6:	59 fa       	cp.w	r10,31
80004bc8:	e0 89 00 14 	brgt	80004bf0 <_vfprintf_r+0x3c0>
80004bcc:	f0 cb ff fc 	sub	r11,r8,-4
80004bd0:	70 08       	ld.w	r8,r8[0x0]
80004bd2:	51 0b       	stdsp	sp[0x40],r11
80004bd4:	50 28       	stdsp	sp[0x8],r8
80004bd6:	fa c6 f9 44 	sub	r6,sp,-1724
80004bda:	40 2e       	lddsp	lr,sp[0x8]
80004bdc:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80004be0:	f1 4e fd 88 	st.w	r8[-632],lr
80004be4:	2f fa       	sub	r10,-1
80004be6:	0e 94       	mov	r4,r7
80004be8:	fb 4a 06 b4 	st.w	sp[1716],r10
80004bec:	12 96       	mov	r6,r9
80004bee:	c0 78       	rjmp	80004bfc <_vfprintf_r+0x3cc>
80004bf0:	70 0c       	ld.w	r12,r8[0x0]
80004bf2:	0e 94       	mov	r4,r7
80004bf4:	2f c8       	sub	r8,-4
80004bf6:	50 2c       	stdsp	sp[0x8],r12
80004bf8:	12 96       	mov	r6,r9
80004bfa:	51 08       	stdsp	sp[0x40],r8
80004bfc:	40 2b       	lddsp	r11,sp[0x8]
80004bfe:	58 0b       	cp.w	r11,0
80004c00:	fe 95 fe f2 	brlt	800049e4 <_vfprintf_r+0x1b4>
80004c04:	08 97       	mov	r7,r4
80004c06:	cf 5a       	rjmp	800049f0 <_vfprintf_r+0x1c0>
80004c08:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004c0c:	0f 38       	ld.ub	r8,r7++
80004c0e:	f4 09 00 19 	add	r9,r10,r9<<0x1
80004c12:	f0 ca 00 30 	sub	r10,r8,48
80004c16:	58 9a       	cp.w	r10,9
80004c18:	fe 98 ff f8 	brls	80004c08 <_vfprintf_r+0x3d8>
80004c1c:	3f fa       	mov	r10,-1
80004c1e:	f2 0a 0c 49 	max	r9,r9,r10
80004c22:	50 29       	stdsp	sp[0x8],r9
80004c24:	ce 9a       	rjmp	800049f6 <_vfprintf_r+0x1c6>
80004c26:	a7 b5       	sbr	r5,0x7
80004c28:	ce 4a       	rjmp	800049f0 <_vfprintf_r+0x1c0>
80004c2a:	30 09       	mov	r9,0
80004c2c:	23 08       	sub	r8,48
80004c2e:	f2 09 00 29 	add	r9,r9,r9<<0x2
80004c32:	f0 09 00 19 	add	r9,r8,r9<<0x1
80004c36:	0f 38       	ld.ub	r8,r7++
80004c38:	f0 ca 00 30 	sub	r10,r8,48
80004c3c:	58 9a       	cp.w	r10,9
80004c3e:	fe 98 ff f7 	brls	80004c2c <_vfprintf_r+0x3fc>
80004c42:	e0 48 00 24 	cp.w	r8,36
80004c46:	fe 91 fe d7 	brne	800049f4 <_vfprintf_r+0x1c4>
80004c4a:	e0 49 00 20 	cp.w	r9,32
80004c4e:	e0 89 0d 6f 	brgt	8000672c <_vfprintf_r+0x1efc>
80004c52:	f2 c3 00 01 	sub	r3,r9,1
80004c56:	30 19       	mov	r9,1
80004c58:	50 39       	stdsp	sp[0xc],r9
80004c5a:	cc ba       	rjmp	800049f0 <_vfprintf_r+0x1c0>
80004c5c:	a3 b5       	sbr	r5,0x3
80004c5e:	cc 9a       	rjmp	800049f0 <_vfprintf_r+0x1c0>
80004c60:	a7 a5       	sbr	r5,0x6
80004c62:	cc 7a       	rjmp	800049f0 <_vfprintf_r+0x1c0>
80004c64:	0a 98       	mov	r8,r5
80004c66:	a5 b5       	sbr	r5,0x5
80004c68:	a5 a8       	sbr	r8,0x4
80004c6a:	0f 89       	ld.ub	r9,r7[0x0]
80004c6c:	36 ce       	mov	lr,108
80004c6e:	fc 09 18 00 	cp.b	r9,lr
80004c72:	f7 b7 00 ff 	subeq	r7,-1
80004c76:	f0 05 17 10 	movne	r5,r8
80004c7a:	cb ba       	rjmp	800049f0 <_vfprintf_r+0x1c0>
80004c7c:	a5 b5       	sbr	r5,0x5
80004c7e:	cb 9a       	rjmp	800049f0 <_vfprintf_r+0x1c0>
80004c80:	50 a7       	stdsp	sp[0x28],r7
80004c82:	50 80       	stdsp	sp[0x20],r0
80004c84:	0c 97       	mov	r7,r6
80004c86:	10 90       	mov	r0,r8
80004c88:	06 96       	mov	r6,r3
80004c8a:	04 94       	mov	r4,r2
80004c8c:	40 93       	lddsp	r3,sp[0x24]
80004c8e:	02 92       	mov	r2,r1
80004c90:	0e 99       	mov	r9,r7
80004c92:	40 41       	lddsp	r1,sp[0x10]
80004c94:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004c98:	40 3c       	lddsp	r12,sp[0xc]
80004c9a:	58 0c       	cp.w	r12,0
80004c9c:	c1 d0       	breq	80004cd6 <_vfprintf_r+0x4a6>
80004c9e:	10 36       	cp.w	r6,r8
80004ca0:	c0 64       	brge	80004cac <_vfprintf_r+0x47c>
80004ca2:	fa cb f9 44 	sub	r11,sp,-1724
80004ca6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004caa:	c1 d8       	rjmp	80004ce4 <_vfprintf_r+0x4b4>
80004cac:	fa c8 f9 50 	sub	r8,sp,-1712
80004cb0:	1a d8       	st.w	--sp,r8
80004cb2:	fa c8 fa b8 	sub	r8,sp,-1352
80004cb6:	1a d8       	st.w	--sp,r8
80004cb8:	fa c8 fb b4 	sub	r8,sp,-1100
80004cbc:	1a d8       	st.w	--sp,r8
80004cbe:	fa c8 f9 40 	sub	r8,sp,-1728
80004cc2:	fa c9 ff b4 	sub	r9,sp,-76
80004cc6:	04 9a       	mov	r10,r2
80004cc8:	0c 9b       	mov	r11,r6
80004cca:	08 9c       	mov	r12,r4
80004ccc:	fe b0 fc 1a 	rcall	80004500 <get_arg>
80004cd0:	2f dd       	sub	sp,-12
80004cd2:	19 b8       	ld.ub	r8,r12[0x3]
80004cd4:	c2 28       	rjmp	80004d18 <_vfprintf_r+0x4e8>
80004cd6:	2f f7       	sub	r7,-1
80004cd8:	10 39       	cp.w	r9,r8
80004cda:	c0 84       	brge	80004cea <_vfprintf_r+0x4ba>
80004cdc:	fa ca f9 44 	sub	r10,sp,-1724
80004ce0:	f4 06 00 36 	add	r6,r10,r6<<0x3
80004ce4:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
80004ce8:	c1 88       	rjmp	80004d18 <_vfprintf_r+0x4e8>
80004cea:	41 09       	lddsp	r9,sp[0x40]
80004cec:	59 f8       	cp.w	r8,31
80004cee:	e0 89 00 12 	brgt	80004d12 <_vfprintf_r+0x4e2>
80004cf2:	f2 ca ff fc 	sub	r10,r9,-4
80004cf6:	51 0a       	stdsp	sp[0x40],r10
80004cf8:	72 09       	ld.w	r9,r9[0x0]
80004cfa:	fa c6 f9 44 	sub	r6,sp,-1724
80004cfe:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80004d02:	2f f8       	sub	r8,-1
80004d04:	f5 49 fd 88 	st.w	r10[-632],r9
80004d08:	fb 48 06 b4 	st.w	sp[1716],r8
80004d0c:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80004d10:	c0 48       	rjmp	80004d18 <_vfprintf_r+0x4e8>
80004d12:	13 b8       	ld.ub	r8,r9[0x3]
80004d14:	2f c9       	sub	r9,-4
80004d16:	51 09       	stdsp	sp[0x40],r9
80004d18:	fb 68 06 60 	st.b	sp[1632],r8
80004d1c:	30 0e       	mov	lr,0
80004d1e:	30 08       	mov	r8,0
80004d20:	30 12       	mov	r2,1
80004d22:	fb 68 06 bb 	st.b	sp[1723],r8
80004d26:	50 2e       	stdsp	sp[0x8],lr
80004d28:	e0 8f 08 ad 	bral	80005e82 <_vfprintf_r+0x1652>
80004d2c:	50 a7       	stdsp	sp[0x28],r7
80004d2e:	50 80       	stdsp	sp[0x20],r0
80004d30:	0c 97       	mov	r7,r6
80004d32:	04 94       	mov	r4,r2
80004d34:	06 96       	mov	r6,r3
80004d36:	02 92       	mov	r2,r1
80004d38:	40 93       	lddsp	r3,sp[0x24]
80004d3a:	10 90       	mov	r0,r8
80004d3c:	40 41       	lddsp	r1,sp[0x10]
80004d3e:	a5 a5       	sbr	r5,0x4
80004d40:	c0 a8       	rjmp	80004d54 <_vfprintf_r+0x524>
80004d42:	50 a7       	stdsp	sp[0x28],r7
80004d44:	50 80       	stdsp	sp[0x20],r0
80004d46:	0c 97       	mov	r7,r6
80004d48:	04 94       	mov	r4,r2
80004d4a:	06 96       	mov	r6,r3
80004d4c:	02 92       	mov	r2,r1
80004d4e:	40 93       	lddsp	r3,sp[0x24]
80004d50:	10 90       	mov	r0,r8
80004d52:	40 41       	lddsp	r1,sp[0x10]
80004d54:	ed b5 00 05 	bld	r5,0x5
80004d58:	c5 11       	brne	80004dfa <_vfprintf_r+0x5ca>
80004d5a:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004d5e:	40 3c       	lddsp	r12,sp[0xc]
80004d60:	58 0c       	cp.w	r12,0
80004d62:	c1 e0       	breq	80004d9e <_vfprintf_r+0x56e>
80004d64:	10 36       	cp.w	r6,r8
80004d66:	c0 64       	brge	80004d72 <_vfprintf_r+0x542>
80004d68:	fa cb f9 44 	sub	r11,sp,-1724
80004d6c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004d70:	c2 08       	rjmp	80004db0 <_vfprintf_r+0x580>
80004d72:	fa c8 f9 50 	sub	r8,sp,-1712
80004d76:	1a d8       	st.w	--sp,r8
80004d78:	fa c8 fa b8 	sub	r8,sp,-1352
80004d7c:	0c 9b       	mov	r11,r6
80004d7e:	1a d8       	st.w	--sp,r8
80004d80:	fa c8 fb b4 	sub	r8,sp,-1100
80004d84:	1a d8       	st.w	--sp,r8
80004d86:	fa c9 ff b4 	sub	r9,sp,-76
80004d8a:	fa c8 f9 40 	sub	r8,sp,-1728
80004d8e:	04 9a       	mov	r10,r2
80004d90:	08 9c       	mov	r12,r4
80004d92:	fe b0 fb b7 	rcall	80004500 <get_arg>
80004d96:	2f dd       	sub	sp,-12
80004d98:	78 1b       	ld.w	r11,r12[0x4]
80004d9a:	78 09       	ld.w	r9,r12[0x0]
80004d9c:	c2 b8       	rjmp	80004df2 <_vfprintf_r+0x5c2>
80004d9e:	ee ca ff ff 	sub	r10,r7,-1
80004da2:	10 37       	cp.w	r7,r8
80004da4:	c0 b4       	brge	80004dba <_vfprintf_r+0x58a>
80004da6:	fa c9 f9 44 	sub	r9,sp,-1724
80004daa:	14 97       	mov	r7,r10
80004dac:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004db0:	ec fb fd 8c 	ld.w	r11,r6[-628]
80004db4:	ec f9 fd 88 	ld.w	r9,r6[-632]
80004db8:	c1 d8       	rjmp	80004df2 <_vfprintf_r+0x5c2>
80004dba:	41 09       	lddsp	r9,sp[0x40]
80004dbc:	59 f8       	cp.w	r8,31
80004dbe:	e0 89 00 14 	brgt	80004de6 <_vfprintf_r+0x5b6>
80004dc2:	f2 cb ff f8 	sub	r11,r9,-8
80004dc6:	51 0b       	stdsp	sp[0x40],r11
80004dc8:	fa c6 f9 44 	sub	r6,sp,-1724
80004dcc:	72 1b       	ld.w	r11,r9[0x4]
80004dce:	ec 08 00 3c 	add	r12,r6,r8<<0x3
80004dd2:	72 09       	ld.w	r9,r9[0x0]
80004dd4:	f9 4b fd 8c 	st.w	r12[-628],r11
80004dd8:	f9 49 fd 88 	st.w	r12[-632],r9
80004ddc:	2f f8       	sub	r8,-1
80004dde:	14 97       	mov	r7,r10
80004de0:	fb 48 06 b4 	st.w	sp[1716],r8
80004de4:	c0 78       	rjmp	80004df2 <_vfprintf_r+0x5c2>
80004de6:	f2 c8 ff f8 	sub	r8,r9,-8
80004dea:	72 1b       	ld.w	r11,r9[0x4]
80004dec:	14 97       	mov	r7,r10
80004dee:	51 08       	stdsp	sp[0x40],r8
80004df0:	72 09       	ld.w	r9,r9[0x0]
80004df2:	16 98       	mov	r8,r11
80004df4:	fa e9 00 00 	st.d	sp[0],r8
80004df8:	ca e8       	rjmp	80004f54 <_vfprintf_r+0x724>
80004dfa:	ed b5 00 04 	bld	r5,0x4
80004dfe:	c1 71       	brne	80004e2c <_vfprintf_r+0x5fc>
80004e00:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e04:	40 3e       	lddsp	lr,sp[0xc]
80004e06:	58 0e       	cp.w	lr,0
80004e08:	c0 80       	breq	80004e18 <_vfprintf_r+0x5e8>
80004e0a:	10 36       	cp.w	r6,r8
80004e0c:	c6 94       	brge	80004ede <_vfprintf_r+0x6ae>
80004e0e:	fa cc f9 44 	sub	r12,sp,-1724
80004e12:	f8 06 00 36 	add	r6,r12,r6<<0x3
80004e16:	c8 28       	rjmp	80004f1a <_vfprintf_r+0x6ea>
80004e18:	ee ca ff ff 	sub	r10,r7,-1
80004e1c:	10 37       	cp.w	r7,r8
80004e1e:	e0 84 00 81 	brge	80004f20 <_vfprintf_r+0x6f0>
80004e22:	fa cb f9 44 	sub	r11,sp,-1724
80004e26:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004e2a:	c7 78       	rjmp	80004f18 <_vfprintf_r+0x6e8>
80004e2c:	ed b5 00 06 	bld	r5,0x6
80004e30:	c4 b1       	brne	80004ec6 <_vfprintf_r+0x696>
80004e32:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004e36:	40 3c       	lddsp	r12,sp[0xc]
80004e38:	58 0c       	cp.w	r12,0
80004e3a:	c1 d0       	breq	80004e74 <_vfprintf_r+0x644>
80004e3c:	10 36       	cp.w	r6,r8
80004e3e:	c0 64       	brge	80004e4a <_vfprintf_r+0x61a>
80004e40:	fa cb f9 44 	sub	r11,sp,-1724
80004e44:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004e48:	c1 f8       	rjmp	80004e86 <_vfprintf_r+0x656>
80004e4a:	fa c8 f9 50 	sub	r8,sp,-1712
80004e4e:	1a d8       	st.w	--sp,r8
80004e50:	fa c8 fa b8 	sub	r8,sp,-1352
80004e54:	1a d8       	st.w	--sp,r8
80004e56:	fa c8 fb b4 	sub	r8,sp,-1100
80004e5a:	1a d8       	st.w	--sp,r8
80004e5c:	fa c8 f9 40 	sub	r8,sp,-1728
80004e60:	fa c9 ff b4 	sub	r9,sp,-76
80004e64:	04 9a       	mov	r10,r2
80004e66:	0c 9b       	mov	r11,r6
80004e68:	08 9c       	mov	r12,r4
80004e6a:	fe b0 fb 4b 	rcall	80004500 <get_arg>
80004e6e:	2f dd       	sub	sp,-12
80004e70:	98 18       	ld.sh	r8,r12[0x2]
80004e72:	c2 68       	rjmp	80004ebe <_vfprintf_r+0x68e>
80004e74:	ee ca ff ff 	sub	r10,r7,-1
80004e78:	10 37       	cp.w	r7,r8
80004e7a:	c0 94       	brge	80004e8c <_vfprintf_r+0x65c>
80004e7c:	fa c9 f9 44 	sub	r9,sp,-1724
80004e80:	14 97       	mov	r7,r10
80004e82:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004e86:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80004e8a:	c1 a8       	rjmp	80004ebe <_vfprintf_r+0x68e>
80004e8c:	41 09       	lddsp	r9,sp[0x40]
80004e8e:	59 f8       	cp.w	r8,31
80004e90:	e0 89 00 13 	brgt	80004eb6 <_vfprintf_r+0x686>
80004e94:	f2 cb ff fc 	sub	r11,r9,-4
80004e98:	51 0b       	stdsp	sp[0x40],r11
80004e9a:	72 09       	ld.w	r9,r9[0x0]
80004e9c:	fa c6 f9 44 	sub	r6,sp,-1724
80004ea0:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80004ea4:	2f f8       	sub	r8,-1
80004ea6:	f7 49 fd 88 	st.w	r11[-632],r9
80004eaa:	fb 48 06 b4 	st.w	sp[1716],r8
80004eae:	14 97       	mov	r7,r10
80004eb0:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80004eb4:	c0 58       	rjmp	80004ebe <_vfprintf_r+0x68e>
80004eb6:	92 18       	ld.sh	r8,r9[0x2]
80004eb8:	14 97       	mov	r7,r10
80004eba:	2f c9       	sub	r9,-4
80004ebc:	51 09       	stdsp	sp[0x40],r9
80004ebe:	50 18       	stdsp	sp[0x4],r8
80004ec0:	bf 58       	asr	r8,0x1f
80004ec2:	50 08       	stdsp	sp[0x0],r8
80004ec4:	c4 88       	rjmp	80004f54 <_vfprintf_r+0x724>
80004ec6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004eca:	40 3c       	lddsp	r12,sp[0xc]
80004ecc:	58 0c       	cp.w	r12,0
80004ece:	c1 d0       	breq	80004f08 <_vfprintf_r+0x6d8>
80004ed0:	10 36       	cp.w	r6,r8
80004ed2:	c0 64       	brge	80004ede <_vfprintf_r+0x6ae>
80004ed4:	fa cb f9 44 	sub	r11,sp,-1724
80004ed8:	f6 06 00 36 	add	r6,r11,r6<<0x3
80004edc:	c1 f8       	rjmp	80004f1a <_vfprintf_r+0x6ea>
80004ede:	fa c8 f9 50 	sub	r8,sp,-1712
80004ee2:	1a d8       	st.w	--sp,r8
80004ee4:	fa c8 fa b8 	sub	r8,sp,-1352
80004ee8:	0c 9b       	mov	r11,r6
80004eea:	1a d8       	st.w	--sp,r8
80004eec:	fa c8 fb b4 	sub	r8,sp,-1100
80004ef0:	04 9a       	mov	r10,r2
80004ef2:	1a d8       	st.w	--sp,r8
80004ef4:	08 9c       	mov	r12,r4
80004ef6:	fa c8 f9 40 	sub	r8,sp,-1728
80004efa:	fa c9 ff b4 	sub	r9,sp,-76
80004efe:	fe b0 fb 01 	rcall	80004500 <get_arg>
80004f02:	2f dd       	sub	sp,-12
80004f04:	78 0b       	ld.w	r11,r12[0x0]
80004f06:	c2 48       	rjmp	80004f4e <_vfprintf_r+0x71e>
80004f08:	ee ca ff ff 	sub	r10,r7,-1
80004f0c:	10 37       	cp.w	r7,r8
80004f0e:	c0 94       	brge	80004f20 <_vfprintf_r+0x6f0>
80004f10:	fa c9 f9 44 	sub	r9,sp,-1724
80004f14:	f2 06 00 36 	add	r6,r9,r6<<0x3
80004f18:	14 97       	mov	r7,r10
80004f1a:	ec fb fd 88 	ld.w	r11,r6[-632]
80004f1e:	c1 88       	rjmp	80004f4e <_vfprintf_r+0x71e>
80004f20:	41 09       	lddsp	r9,sp[0x40]
80004f22:	59 f8       	cp.w	r8,31
80004f24:	e0 89 00 11 	brgt	80004f46 <_vfprintf_r+0x716>
80004f28:	f2 cb ff fc 	sub	r11,r9,-4
80004f2c:	51 0b       	stdsp	sp[0x40],r11
80004f2e:	fa c6 f9 44 	sub	r6,sp,-1724
80004f32:	72 0b       	ld.w	r11,r9[0x0]
80004f34:	ec 08 00 39 	add	r9,r6,r8<<0x3
80004f38:	f3 4b fd 88 	st.w	r9[-632],r11
80004f3c:	2f f8       	sub	r8,-1
80004f3e:	14 97       	mov	r7,r10
80004f40:	fb 48 06 b4 	st.w	sp[1716],r8
80004f44:	c0 58       	rjmp	80004f4e <_vfprintf_r+0x71e>
80004f46:	72 0b       	ld.w	r11,r9[0x0]
80004f48:	14 97       	mov	r7,r10
80004f4a:	2f c9       	sub	r9,-4
80004f4c:	51 09       	stdsp	sp[0x40],r9
80004f4e:	50 1b       	stdsp	sp[0x4],r11
80004f50:	bf 5b       	asr	r11,0x1f
80004f52:	50 0b       	stdsp	sp[0x0],r11
80004f54:	fa ea 00 00 	ld.d	r10,sp[0]
80004f58:	58 0a       	cp.w	r10,0
80004f5a:	5c 2b       	cpc	r11
80004f5c:	c0 e4       	brge	80004f78 <_vfprintf_r+0x748>
80004f5e:	30 08       	mov	r8,0
80004f60:	fa ea 00 00 	ld.d	r10,sp[0]
80004f64:	30 09       	mov	r9,0
80004f66:	f0 0a 01 0a 	sub	r10,r8,r10
80004f6a:	f2 0b 01 4b 	sbc	r11,r9,r11
80004f6e:	32 d8       	mov	r8,45
80004f70:	fa eb 00 00 	st.d	sp[0],r10
80004f74:	fb 68 06 bb 	st.b	sp[1723],r8
80004f78:	30 18       	mov	r8,1
80004f7a:	e0 8f 06 fa 	bral	80005d6e <_vfprintf_r+0x153e>
80004f7e:	50 a7       	stdsp	sp[0x28],r7
80004f80:	50 80       	stdsp	sp[0x20],r0
80004f82:	0c 97       	mov	r7,r6
80004f84:	04 94       	mov	r4,r2
80004f86:	06 96       	mov	r6,r3
80004f88:	02 92       	mov	r2,r1
80004f8a:	40 93       	lddsp	r3,sp[0x24]
80004f8c:	10 90       	mov	r0,r8
80004f8e:	40 41       	lddsp	r1,sp[0x10]
80004f90:	0e 99       	mov	r9,r7
80004f92:	ed b5 00 03 	bld	r5,0x3
80004f96:	c4 11       	brne	80005018 <_vfprintf_r+0x7e8>
80004f98:	fa f8 06 b4 	ld.w	r8,sp[1716]
80004f9c:	40 3a       	lddsp	r10,sp[0xc]
80004f9e:	58 0a       	cp.w	r10,0
80004fa0:	c1 90       	breq	80004fd2 <_vfprintf_r+0x7a2>
80004fa2:	10 36       	cp.w	r6,r8
80004fa4:	c6 45       	brlt	8000506c <_vfprintf_r+0x83c>
80004fa6:	fa c8 f9 50 	sub	r8,sp,-1712
80004faa:	1a d8       	st.w	--sp,r8
80004fac:	fa c8 fa b8 	sub	r8,sp,-1352
80004fb0:	1a d8       	st.w	--sp,r8
80004fb2:	fa c8 fb b4 	sub	r8,sp,-1100
80004fb6:	0c 9b       	mov	r11,r6
80004fb8:	1a d8       	st.w	--sp,r8
80004fba:	04 9a       	mov	r10,r2
80004fbc:	fa c8 f9 40 	sub	r8,sp,-1728
80004fc0:	fa c9 ff b4 	sub	r9,sp,-76
80004fc4:	08 9c       	mov	r12,r4
80004fc6:	fe b0 fa 9d 	rcall	80004500 <get_arg>
80004fca:	2f dd       	sub	sp,-12
80004fcc:	78 16       	ld.w	r6,r12[0x4]
80004fce:	50 76       	stdsp	sp[0x1c],r6
80004fd0:	c4 88       	rjmp	80005060 <_vfprintf_r+0x830>
80004fd2:	2f f7       	sub	r7,-1
80004fd4:	10 39       	cp.w	r9,r8
80004fd6:	c0 c4       	brge	80004fee <_vfprintf_r+0x7be>
80004fd8:	fa ce f9 44 	sub	lr,sp,-1724
80004fdc:	fc 06 00 36 	add	r6,lr,r6<<0x3
80004fe0:	ec fc fd 8c 	ld.w	r12,r6[-628]
80004fe4:	50 7c       	stdsp	sp[0x1c],r12
80004fe6:	ec f6 fd 88 	ld.w	r6,r6[-632]
80004fea:	50 56       	stdsp	sp[0x14],r6
80004fec:	c6 68       	rjmp	800050b8 <_vfprintf_r+0x888>
80004fee:	41 09       	lddsp	r9,sp[0x40]
80004ff0:	59 f8       	cp.w	r8,31
80004ff2:	e0 89 00 10 	brgt	80005012 <_vfprintf_r+0x7e2>
80004ff6:	f2 ca ff f8 	sub	r10,r9,-8
80004ffa:	72 1b       	ld.w	r11,r9[0x4]
80004ffc:	51 0a       	stdsp	sp[0x40],r10
80004ffe:	72 09       	ld.w	r9,r9[0x0]
80005000:	fa ca f9 44 	sub	r10,sp,-1724
80005004:	50 7b       	stdsp	sp[0x1c],r11
80005006:	50 59       	stdsp	sp[0x14],r9
80005008:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000500c:	40 5b       	lddsp	r11,sp[0x14]
8000500e:	40 7a       	lddsp	r10,sp[0x1c]
80005010:	c4 78       	rjmp	8000509e <_vfprintf_r+0x86e>
80005012:	72 18       	ld.w	r8,r9[0x4]
80005014:	50 78       	stdsp	sp[0x1c],r8
80005016:	c4 c8       	rjmp	800050ae <_vfprintf_r+0x87e>
80005018:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000501c:	40 3e       	lddsp	lr,sp[0xc]
8000501e:	58 0e       	cp.w	lr,0
80005020:	c2 30       	breq	80005066 <_vfprintf_r+0x836>
80005022:	10 36       	cp.w	r6,r8
80005024:	c0 94       	brge	80005036 <_vfprintf_r+0x806>
80005026:	fa cc f9 44 	sub	r12,sp,-1724
8000502a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000502e:	ec fb fd 8c 	ld.w	r11,r6[-628]
80005032:	50 7b       	stdsp	sp[0x1c],r11
80005034:	cd 9b       	rjmp	80004fe6 <_vfprintf_r+0x7b6>
80005036:	fa c8 f9 50 	sub	r8,sp,-1712
8000503a:	1a d8       	st.w	--sp,r8
8000503c:	fa c8 fa b8 	sub	r8,sp,-1352
80005040:	04 9a       	mov	r10,r2
80005042:	1a d8       	st.w	--sp,r8
80005044:	fa c8 fb b4 	sub	r8,sp,-1100
80005048:	0c 9b       	mov	r11,r6
8000504a:	1a d8       	st.w	--sp,r8
8000504c:	08 9c       	mov	r12,r4
8000504e:	fa c8 f9 40 	sub	r8,sp,-1728
80005052:	fa c9 ff b4 	sub	r9,sp,-76
80005056:	fe b0 fa 55 	rcall	80004500 <get_arg>
8000505a:	2f dd       	sub	sp,-12
8000505c:	78 1a       	ld.w	r10,r12[0x4]
8000505e:	50 7a       	stdsp	sp[0x1c],r10
80005060:	78 0c       	ld.w	r12,r12[0x0]
80005062:	50 5c       	stdsp	sp[0x14],r12
80005064:	c2 a8       	rjmp	800050b8 <_vfprintf_r+0x888>
80005066:	2f f7       	sub	r7,-1
80005068:	10 39       	cp.w	r9,r8
8000506a:	c0 94       	brge	8000507c <_vfprintf_r+0x84c>
8000506c:	fa c9 f9 44 	sub	r9,sp,-1724
80005070:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005074:	ec f8 fd 8c 	ld.w	r8,r6[-628]
80005078:	50 78       	stdsp	sp[0x1c],r8
8000507a:	cb 6b       	rjmp	80004fe6 <_vfprintf_r+0x7b6>
8000507c:	41 09       	lddsp	r9,sp[0x40]
8000507e:	59 f8       	cp.w	r8,31
80005080:	e0 89 00 15 	brgt	800050aa <_vfprintf_r+0x87a>
80005084:	f2 ca ff f8 	sub	r10,r9,-8
80005088:	72 16       	ld.w	r6,r9[0x4]
8000508a:	72 09       	ld.w	r9,r9[0x0]
8000508c:	51 0a       	stdsp	sp[0x40],r10
8000508e:	50 59       	stdsp	sp[0x14],r9
80005090:	fa ce f9 44 	sub	lr,sp,-1724
80005094:	50 76       	stdsp	sp[0x1c],r6
80005096:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000509a:	40 5b       	lddsp	r11,sp[0x14]
8000509c:	0c 9a       	mov	r10,r6
8000509e:	f2 eb fd 88 	st.d	r9[-632],r10
800050a2:	2f f8       	sub	r8,-1
800050a4:	fb 48 06 b4 	st.w	sp[1716],r8
800050a8:	c0 88       	rjmp	800050b8 <_vfprintf_r+0x888>
800050aa:	72 1c       	ld.w	r12,r9[0x4]
800050ac:	50 7c       	stdsp	sp[0x1c],r12
800050ae:	f2 c8 ff f8 	sub	r8,r9,-8
800050b2:	51 08       	stdsp	sp[0x40],r8
800050b4:	72 09       	ld.w	r9,r9[0x0]
800050b6:	50 59       	stdsp	sp[0x14],r9
800050b8:	40 5b       	lddsp	r11,sp[0x14]
800050ba:	40 7a       	lddsp	r10,sp[0x1c]
800050bc:	e0 a0 1c de 	rcall	80008a78 <__isinfd>
800050c0:	18 96       	mov	r6,r12
800050c2:	c1 70       	breq	800050f0 <_vfprintf_r+0x8c0>
800050c4:	30 08       	mov	r8,0
800050c6:	30 09       	mov	r9,0
800050c8:	40 5b       	lddsp	r11,sp[0x14]
800050ca:	40 7a       	lddsp	r10,sp[0x1c]
800050cc:	e0 a0 21 cc 	rcall	80009464 <__avr32_f64_cmp_lt>
800050d0:	c0 40       	breq	800050d8 <_vfprintf_r+0x8a8>
800050d2:	32 d8       	mov	r8,45
800050d4:	fb 68 06 bb 	st.b	sp[1723],r8
800050d8:	fe c8 b1 0c 	sub	r8,pc,-20212
800050dc:	fe c6 b1 0c 	sub	r6,pc,-20212
800050e0:	a7 d5       	cbr	r5,0x7
800050e2:	e0 40 00 47 	cp.w	r0,71
800050e6:	f0 06 17 a0 	movle	r6,r8
800050ea:	30 32       	mov	r2,3
800050ec:	e0 8f 06 ce 	bral	80005e88 <_vfprintf_r+0x1658>
800050f0:	40 5b       	lddsp	r11,sp[0x14]
800050f2:	40 7a       	lddsp	r10,sp[0x1c]
800050f4:	e0 a0 1c d7 	rcall	80008aa2 <__isnand>
800050f8:	c0 e0       	breq	80005114 <_vfprintf_r+0x8e4>
800050fa:	50 26       	stdsp	sp[0x8],r6
800050fc:	fe c8 b1 28 	sub	r8,pc,-20184
80005100:	fe c6 b1 28 	sub	r6,pc,-20184
80005104:	a7 d5       	cbr	r5,0x7
80005106:	e0 40 00 47 	cp.w	r0,71
8000510a:	f0 06 17 a0 	movle	r6,r8
8000510e:	30 32       	mov	r2,3
80005110:	e0 8f 06 c2 	bral	80005e94 <_vfprintf_r+0x1664>
80005114:	40 2a       	lddsp	r10,sp[0x8]
80005116:	5b fa       	cp.w	r10,-1
80005118:	c0 41       	brne	80005120 <_vfprintf_r+0x8f0>
8000511a:	30 69       	mov	r9,6
8000511c:	50 29       	stdsp	sp[0x8],r9
8000511e:	c1 18       	rjmp	80005140 <_vfprintf_r+0x910>
80005120:	e0 40 00 47 	cp.w	r0,71
80005124:	5f 09       	sreq	r9
80005126:	e0 40 00 67 	cp.w	r0,103
8000512a:	5f 08       	sreq	r8
8000512c:	f3 e8 10 08 	or	r8,r9,r8
80005130:	f8 08 18 00 	cp.b	r8,r12
80005134:	c0 60       	breq	80005140 <_vfprintf_r+0x910>
80005136:	40 28       	lddsp	r8,sp[0x8]
80005138:	58 08       	cp.w	r8,0
8000513a:	f9 b8 00 01 	moveq	r8,1
8000513e:	50 28       	stdsp	sp[0x8],r8
80005140:	40 78       	lddsp	r8,sp[0x1c]
80005142:	40 59       	lddsp	r9,sp[0x14]
80005144:	fa e9 06 94 	st.d	sp[1684],r8
80005148:	a9 a5       	sbr	r5,0x8
8000514a:	fa f8 06 94 	ld.w	r8,sp[1684]
8000514e:	58 08       	cp.w	r8,0
80005150:	c0 65       	brlt	8000515c <_vfprintf_r+0x92c>
80005152:	40 5e       	lddsp	lr,sp[0x14]
80005154:	30 0c       	mov	r12,0
80005156:	50 6e       	stdsp	sp[0x18],lr
80005158:	50 9c       	stdsp	sp[0x24],r12
8000515a:	c0 78       	rjmp	80005168 <_vfprintf_r+0x938>
8000515c:	40 5b       	lddsp	r11,sp[0x14]
8000515e:	32 da       	mov	r10,45
80005160:	ee 1b 80 00 	eorh	r11,0x8000
80005164:	50 9a       	stdsp	sp[0x24],r10
80005166:	50 6b       	stdsp	sp[0x18],r11
80005168:	e0 40 00 46 	cp.w	r0,70
8000516c:	5f 09       	sreq	r9
8000516e:	e0 40 00 66 	cp.w	r0,102
80005172:	5f 08       	sreq	r8
80005174:	f3 e8 10 08 	or	r8,r9,r8
80005178:	50 48       	stdsp	sp[0x10],r8
8000517a:	c0 40       	breq	80005182 <_vfprintf_r+0x952>
8000517c:	40 22       	lddsp	r2,sp[0x8]
8000517e:	30 39       	mov	r9,3
80005180:	c1 08       	rjmp	800051a0 <_vfprintf_r+0x970>
80005182:	e0 40 00 45 	cp.w	r0,69
80005186:	5f 09       	sreq	r9
80005188:	e0 40 00 65 	cp.w	r0,101
8000518c:	5f 08       	sreq	r8
8000518e:	40 22       	lddsp	r2,sp[0x8]
80005190:	10 49       	or	r9,r8
80005192:	2f f2       	sub	r2,-1
80005194:	40 46       	lddsp	r6,sp[0x10]
80005196:	ec 09 18 00 	cp.b	r9,r6
8000519a:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000519e:	30 29       	mov	r9,2
800051a0:	fa c8 f9 5c 	sub	r8,sp,-1700
800051a4:	1a d8       	st.w	--sp,r8
800051a6:	fa c8 f9 54 	sub	r8,sp,-1708
800051aa:	1a d8       	st.w	--sp,r8
800051ac:	fa c8 f9 4c 	sub	r8,sp,-1716
800051b0:	08 9c       	mov	r12,r4
800051b2:	1a d8       	st.w	--sp,r8
800051b4:	04 98       	mov	r8,r2
800051b6:	40 9b       	lddsp	r11,sp[0x24]
800051b8:	40 aa       	lddsp	r10,sp[0x28]
800051ba:	e0 a0 0b c3 	rcall	80006940 <_dtoa_r>
800051be:	e0 40 00 47 	cp.w	r0,71
800051c2:	5f 19       	srne	r9
800051c4:	e0 40 00 67 	cp.w	r0,103
800051c8:	5f 18       	srne	r8
800051ca:	18 96       	mov	r6,r12
800051cc:	2f dd       	sub	sp,-12
800051ce:	f3 e8 00 08 	and	r8,r9,r8
800051d2:	c0 41       	brne	800051da <_vfprintf_r+0x9aa>
800051d4:	ed b5 00 00 	bld	r5,0x0
800051d8:	c3 01       	brne	80005238 <_vfprintf_r+0xa08>
800051da:	ec 02 00 0e 	add	lr,r6,r2
800051de:	50 3e       	stdsp	sp[0xc],lr
800051e0:	40 4c       	lddsp	r12,sp[0x10]
800051e2:	58 0c       	cp.w	r12,0
800051e4:	c1 50       	breq	8000520e <_vfprintf_r+0x9de>
800051e6:	0d 89       	ld.ub	r9,r6[0x0]
800051e8:	33 08       	mov	r8,48
800051ea:	f0 09 18 00 	cp.b	r9,r8
800051ee:	c0 b1       	brne	80005204 <_vfprintf_r+0x9d4>
800051f0:	30 08       	mov	r8,0
800051f2:	30 09       	mov	r9,0
800051f4:	40 6b       	lddsp	r11,sp[0x18]
800051f6:	40 7a       	lddsp	r10,sp[0x1c]
800051f8:	e0 a0 20 ef 	rcall	800093d6 <__avr32_f64_cmp_eq>
800051fc:	fb b2 00 01 	rsubeq	r2,1
80005200:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80005204:	40 3b       	lddsp	r11,sp[0xc]
80005206:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000520a:	10 0b       	add	r11,r8
8000520c:	50 3b       	stdsp	sp[0xc],r11
8000520e:	40 6b       	lddsp	r11,sp[0x18]
80005210:	30 08       	mov	r8,0
80005212:	30 09       	mov	r9,0
80005214:	40 7a       	lddsp	r10,sp[0x1c]
80005216:	e0 a0 20 e0 	rcall	800093d6 <__avr32_f64_cmp_eq>
8000521a:	c0 90       	breq	8000522c <_vfprintf_r+0x9fc>
8000521c:	40 3a       	lddsp	r10,sp[0xc]
8000521e:	fb 4a 06 a4 	st.w	sp[1700],r10
80005222:	c0 58       	rjmp	8000522c <_vfprintf_r+0x9fc>
80005224:	10 c9       	st.b	r8++,r9
80005226:	fb 48 06 a4 	st.w	sp[1700],r8
8000522a:	c0 28       	rjmp	8000522e <_vfprintf_r+0x9fe>
8000522c:	33 09       	mov	r9,48
8000522e:	fa f8 06 a4 	ld.w	r8,sp[1700]
80005232:	40 3e       	lddsp	lr,sp[0xc]
80005234:	1c 38       	cp.w	r8,lr
80005236:	cf 73       	brcs	80005224 <_vfprintf_r+0x9f4>
80005238:	e0 40 00 47 	cp.w	r0,71
8000523c:	5f 09       	sreq	r9
8000523e:	e0 40 00 67 	cp.w	r0,103
80005242:	5f 08       	sreq	r8
80005244:	f3 e8 10 08 	or	r8,r9,r8
80005248:	fa f9 06 a4 	ld.w	r9,sp[1700]
8000524c:	0c 19       	sub	r9,r6
8000524e:	50 69       	stdsp	sp[0x18],r9
80005250:	58 08       	cp.w	r8,0
80005252:	c0 b0       	breq	80005268 <_vfprintf_r+0xa38>
80005254:	fa f8 06 ac 	ld.w	r8,sp[1708]
80005258:	5b d8       	cp.w	r8,-3
8000525a:	c0 55       	brlt	80005264 <_vfprintf_r+0xa34>
8000525c:	40 2c       	lddsp	r12,sp[0x8]
8000525e:	18 38       	cp.w	r8,r12
80005260:	e0 8a 00 6a 	brle	80005334 <_vfprintf_r+0xb04>
80005264:	20 20       	sub	r0,2
80005266:	c0 58       	rjmp	80005270 <_vfprintf_r+0xa40>
80005268:	e0 40 00 65 	cp.w	r0,101
8000526c:	e0 89 00 46 	brgt	800052f8 <_vfprintf_r+0xac8>
80005270:	fa fb 06 ac 	ld.w	r11,sp[1708]
80005274:	fb 60 06 9c 	st.b	sp[1692],r0
80005278:	20 1b       	sub	r11,1
8000527a:	fb 4b 06 ac 	st.w	sp[1708],r11
8000527e:	c0 47       	brpl	80005286 <_vfprintf_r+0xa56>
80005280:	5c 3b       	neg	r11
80005282:	32 d8       	mov	r8,45
80005284:	c0 28       	rjmp	80005288 <_vfprintf_r+0xa58>
80005286:	32 b8       	mov	r8,43
80005288:	fb 68 06 9d 	st.b	sp[1693],r8
8000528c:	58 9b       	cp.w	r11,9
8000528e:	e0 8a 00 1d 	brle	800052c8 <_vfprintf_r+0xa98>
80005292:	fa c9 fa 35 	sub	r9,sp,-1483
80005296:	30 aa       	mov	r10,10
80005298:	12 98       	mov	r8,r9
8000529a:	0e 9c       	mov	r12,r7
8000529c:	0c 92       	mov	r2,r6
8000529e:	f6 0a 0c 06 	divs	r6,r11,r10
800052a2:	0e 9b       	mov	r11,r7
800052a4:	2d 0b       	sub	r11,-48
800052a6:	10 fb       	st.b	--r8,r11
800052a8:	0c 9b       	mov	r11,r6
800052aa:	58 96       	cp.w	r6,9
800052ac:	fe 99 ff f9 	brgt	8000529e <_vfprintf_r+0xa6e>
800052b0:	2d 0b       	sub	r11,-48
800052b2:	18 97       	mov	r7,r12
800052b4:	04 96       	mov	r6,r2
800052b6:	10 fb       	st.b	--r8,r11
800052b8:	fa ca f9 62 	sub	r10,sp,-1694
800052bc:	c0 38       	rjmp	800052c2 <_vfprintf_r+0xa92>
800052be:	11 3b       	ld.ub	r11,r8++
800052c0:	14 cb       	st.b	r10++,r11
800052c2:	12 38       	cp.w	r8,r9
800052c4:	cf d3       	brcs	800052be <_vfprintf_r+0xa8e>
800052c6:	c0 98       	rjmp	800052d8 <_vfprintf_r+0xaa8>
800052c8:	2d 0b       	sub	r11,-48
800052ca:	33 08       	mov	r8,48
800052cc:	fb 6b 06 9f 	st.b	sp[1695],r11
800052d0:	fb 68 06 9e 	st.b	sp[1694],r8
800052d4:	fa ca f9 60 	sub	r10,sp,-1696
800052d8:	fa c8 f9 64 	sub	r8,sp,-1692
800052dc:	f4 08 01 08 	sub	r8,r10,r8
800052e0:	50 e8       	stdsp	sp[0x38],r8
800052e2:	10 92       	mov	r2,r8
800052e4:	40 6b       	lddsp	r11,sp[0x18]
800052e6:	16 02       	add	r2,r11
800052e8:	58 1b       	cp.w	r11,1
800052ea:	e0 89 00 05 	brgt	800052f4 <_vfprintf_r+0xac4>
800052ee:	ed b5 00 00 	bld	r5,0x0
800052f2:	c3 51       	brne	8000535c <_vfprintf_r+0xb2c>
800052f4:	2f f2       	sub	r2,-1
800052f6:	c3 38       	rjmp	8000535c <_vfprintf_r+0xb2c>
800052f8:	e0 40 00 66 	cp.w	r0,102
800052fc:	c1 c1       	brne	80005334 <_vfprintf_r+0xb04>
800052fe:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005302:	58 02       	cp.w	r2,0
80005304:	e0 8a 00 0c 	brle	8000531c <_vfprintf_r+0xaec>
80005308:	40 2a       	lddsp	r10,sp[0x8]
8000530a:	58 0a       	cp.w	r10,0
8000530c:	c0 41       	brne	80005314 <_vfprintf_r+0xae4>
8000530e:	ed b5 00 00 	bld	r5,0x0
80005312:	c2 51       	brne	8000535c <_vfprintf_r+0xb2c>
80005314:	2f f2       	sub	r2,-1
80005316:	40 29       	lddsp	r9,sp[0x8]
80005318:	12 02       	add	r2,r9
8000531a:	c0 b8       	rjmp	80005330 <_vfprintf_r+0xb00>
8000531c:	40 28       	lddsp	r8,sp[0x8]
8000531e:	58 08       	cp.w	r8,0
80005320:	c0 61       	brne	8000532c <_vfprintf_r+0xafc>
80005322:	ed b5 00 00 	bld	r5,0x0
80005326:	c0 30       	breq	8000532c <_vfprintf_r+0xafc>
80005328:	30 12       	mov	r2,1
8000532a:	c1 98       	rjmp	8000535c <_vfprintf_r+0xb2c>
8000532c:	40 22       	lddsp	r2,sp[0x8]
8000532e:	2f e2       	sub	r2,-2
80005330:	36 60       	mov	r0,102
80005332:	c1 58       	rjmp	8000535c <_vfprintf_r+0xb2c>
80005334:	fa f2 06 ac 	ld.w	r2,sp[1708]
80005338:	40 6e       	lddsp	lr,sp[0x18]
8000533a:	1c 32       	cp.w	r2,lr
8000533c:	c0 65       	brlt	80005348 <_vfprintf_r+0xb18>
8000533e:	ed b5 00 00 	bld	r5,0x0
80005342:	f7 b2 00 ff 	subeq	r2,-1
80005346:	c0 a8       	rjmp	8000535a <_vfprintf_r+0xb2a>
80005348:	e4 08 11 02 	rsub	r8,r2,2
8000534c:	40 6c       	lddsp	r12,sp[0x18]
8000534e:	58 02       	cp.w	r2,0
80005350:	f0 02 17 a0 	movle	r2,r8
80005354:	f9 b2 09 01 	movgt	r2,1
80005358:	18 02       	add	r2,r12
8000535a:	36 70       	mov	r0,103
8000535c:	40 9b       	lddsp	r11,sp[0x24]
8000535e:	58 0b       	cp.w	r11,0
80005360:	e0 80 05 94 	breq	80005e88 <_vfprintf_r+0x1658>
80005364:	32 d8       	mov	r8,45
80005366:	fb 68 06 bb 	st.b	sp[1723],r8
8000536a:	e0 8f 05 93 	bral	80005e90 <_vfprintf_r+0x1660>
8000536e:	50 a7       	stdsp	sp[0x28],r7
80005370:	04 94       	mov	r4,r2
80005372:	0c 97       	mov	r7,r6
80005374:	02 92       	mov	r2,r1
80005376:	06 96       	mov	r6,r3
80005378:	40 41       	lddsp	r1,sp[0x10]
8000537a:	40 93       	lddsp	r3,sp[0x24]
8000537c:	0e 99       	mov	r9,r7
8000537e:	ed b5 00 05 	bld	r5,0x5
80005382:	c4 81       	brne	80005412 <_vfprintf_r+0xbe2>
80005384:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005388:	40 3e       	lddsp	lr,sp[0xc]
8000538a:	58 0e       	cp.w	lr,0
8000538c:	c1 d0       	breq	800053c6 <_vfprintf_r+0xb96>
8000538e:	10 36       	cp.w	r6,r8
80005390:	c0 64       	brge	8000539c <_vfprintf_r+0xb6c>
80005392:	fa cc f9 44 	sub	r12,sp,-1724
80005396:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000539a:	c1 d8       	rjmp	800053d4 <_vfprintf_r+0xba4>
8000539c:	fa c8 f9 50 	sub	r8,sp,-1712
800053a0:	1a d8       	st.w	--sp,r8
800053a2:	fa c8 fa b8 	sub	r8,sp,-1352
800053a6:	04 9a       	mov	r10,r2
800053a8:	1a d8       	st.w	--sp,r8
800053aa:	fa c8 fb b4 	sub	r8,sp,-1100
800053ae:	0c 9b       	mov	r11,r6
800053b0:	1a d8       	st.w	--sp,r8
800053b2:	08 9c       	mov	r12,r4
800053b4:	fa c8 f9 40 	sub	r8,sp,-1728
800053b8:	fa c9 ff b4 	sub	r9,sp,-76
800053bc:	fe b0 f8 a2 	rcall	80004500 <get_arg>
800053c0:	2f dd       	sub	sp,-12
800053c2:	78 0a       	ld.w	r10,r12[0x0]
800053c4:	c2 08       	rjmp	80005404 <_vfprintf_r+0xbd4>
800053c6:	2f f7       	sub	r7,-1
800053c8:	10 39       	cp.w	r9,r8
800053ca:	c0 84       	brge	800053da <_vfprintf_r+0xbaa>
800053cc:	fa cb f9 44 	sub	r11,sp,-1724
800053d0:	f6 06 00 36 	add	r6,r11,r6<<0x3
800053d4:	ec fa fd 88 	ld.w	r10,r6[-632]
800053d8:	c1 68       	rjmp	80005404 <_vfprintf_r+0xbd4>
800053da:	41 09       	lddsp	r9,sp[0x40]
800053dc:	59 f8       	cp.w	r8,31
800053de:	e0 89 00 10 	brgt	800053fe <_vfprintf_r+0xbce>
800053e2:	f2 ca ff fc 	sub	r10,r9,-4
800053e6:	51 0a       	stdsp	sp[0x40],r10
800053e8:	fa c6 f9 44 	sub	r6,sp,-1724
800053ec:	72 0a       	ld.w	r10,r9[0x0]
800053ee:	ec 08 00 39 	add	r9,r6,r8<<0x3
800053f2:	f3 4a fd 88 	st.w	r9[-632],r10
800053f6:	2f f8       	sub	r8,-1
800053f8:	fb 48 06 b4 	st.w	sp[1716],r8
800053fc:	c0 48       	rjmp	80005404 <_vfprintf_r+0xbd4>
800053fe:	72 0a       	ld.w	r10,r9[0x0]
80005400:	2f c9       	sub	r9,-4
80005402:	51 09       	stdsp	sp[0x40],r9
80005404:	40 be       	lddsp	lr,sp[0x2c]
80005406:	1c 98       	mov	r8,lr
80005408:	95 1e       	st.w	r10[0x4],lr
8000540a:	bf 58       	asr	r8,0x1f
8000540c:	95 08       	st.w	r10[0x0],r8
8000540e:	fe 9f fa 9f 	bral	8000494c <_vfprintf_r+0x11c>
80005412:	ed b5 00 04 	bld	r5,0x4
80005416:	c4 80       	breq	800054a6 <_vfprintf_r+0xc76>
80005418:	e2 15 00 40 	andl	r5,0x40,COH
8000541c:	c4 50       	breq	800054a6 <_vfprintf_r+0xc76>
8000541e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005422:	40 3c       	lddsp	r12,sp[0xc]
80005424:	58 0c       	cp.w	r12,0
80005426:	c1 d0       	breq	80005460 <_vfprintf_r+0xc30>
80005428:	10 36       	cp.w	r6,r8
8000542a:	c0 64       	brge	80005436 <_vfprintf_r+0xc06>
8000542c:	fa cb f9 44 	sub	r11,sp,-1724
80005430:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005434:	c1 d8       	rjmp	8000546e <_vfprintf_r+0xc3e>
80005436:	fa c8 f9 50 	sub	r8,sp,-1712
8000543a:	1a d8       	st.w	--sp,r8
8000543c:	fa c8 fa b8 	sub	r8,sp,-1352
80005440:	04 9a       	mov	r10,r2
80005442:	1a d8       	st.w	--sp,r8
80005444:	fa c8 fb b4 	sub	r8,sp,-1100
80005448:	0c 9b       	mov	r11,r6
8000544a:	1a d8       	st.w	--sp,r8
8000544c:	08 9c       	mov	r12,r4
8000544e:	fa c8 f9 40 	sub	r8,sp,-1728
80005452:	fa c9 ff b4 	sub	r9,sp,-76
80005456:	fe b0 f8 55 	rcall	80004500 <get_arg>
8000545a:	2f dd       	sub	sp,-12
8000545c:	78 0a       	ld.w	r10,r12[0x0]
8000545e:	c2 08       	rjmp	8000549e <_vfprintf_r+0xc6e>
80005460:	2f f7       	sub	r7,-1
80005462:	10 39       	cp.w	r9,r8
80005464:	c0 84       	brge	80005474 <_vfprintf_r+0xc44>
80005466:	fa ca f9 44 	sub	r10,sp,-1724
8000546a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000546e:	ec fa fd 88 	ld.w	r10,r6[-632]
80005472:	c1 68       	rjmp	8000549e <_vfprintf_r+0xc6e>
80005474:	41 09       	lddsp	r9,sp[0x40]
80005476:	59 f8       	cp.w	r8,31
80005478:	e0 89 00 10 	brgt	80005498 <_vfprintf_r+0xc68>
8000547c:	f2 ca ff fc 	sub	r10,r9,-4
80005480:	51 0a       	stdsp	sp[0x40],r10
80005482:	fa c6 f9 44 	sub	r6,sp,-1724
80005486:	72 0a       	ld.w	r10,r9[0x0]
80005488:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000548c:	f3 4a fd 88 	st.w	r9[-632],r10
80005490:	2f f8       	sub	r8,-1
80005492:	fb 48 06 b4 	st.w	sp[1716],r8
80005496:	c0 48       	rjmp	8000549e <_vfprintf_r+0xc6e>
80005498:	72 0a       	ld.w	r10,r9[0x0]
8000549a:	2f c9       	sub	r9,-4
8000549c:	51 09       	stdsp	sp[0x40],r9
8000549e:	40 be       	lddsp	lr,sp[0x2c]
800054a0:	b4 0e       	st.h	r10[0x0],lr
800054a2:	fe 9f fa 55 	bral	8000494c <_vfprintf_r+0x11c>
800054a6:	fa f8 06 b4 	ld.w	r8,sp[1716]
800054aa:	40 3c       	lddsp	r12,sp[0xc]
800054ac:	58 0c       	cp.w	r12,0
800054ae:	c1 d0       	breq	800054e8 <_vfprintf_r+0xcb8>
800054b0:	10 36       	cp.w	r6,r8
800054b2:	c0 64       	brge	800054be <_vfprintf_r+0xc8e>
800054b4:	fa cb f9 44 	sub	r11,sp,-1724
800054b8:	f6 06 00 36 	add	r6,r11,r6<<0x3
800054bc:	c1 d8       	rjmp	800054f6 <_vfprintf_r+0xcc6>
800054be:	fa c8 f9 50 	sub	r8,sp,-1712
800054c2:	1a d8       	st.w	--sp,r8
800054c4:	fa c8 fa b8 	sub	r8,sp,-1352
800054c8:	04 9a       	mov	r10,r2
800054ca:	1a d8       	st.w	--sp,r8
800054cc:	fa c8 fb b4 	sub	r8,sp,-1100
800054d0:	0c 9b       	mov	r11,r6
800054d2:	1a d8       	st.w	--sp,r8
800054d4:	08 9c       	mov	r12,r4
800054d6:	fa c8 f9 40 	sub	r8,sp,-1728
800054da:	fa c9 ff b4 	sub	r9,sp,-76
800054de:	fe b0 f8 11 	rcall	80004500 <get_arg>
800054e2:	2f dd       	sub	sp,-12
800054e4:	78 0a       	ld.w	r10,r12[0x0]
800054e6:	c2 08       	rjmp	80005526 <_vfprintf_r+0xcf6>
800054e8:	2f f7       	sub	r7,-1
800054ea:	10 39       	cp.w	r9,r8
800054ec:	c0 84       	brge	800054fc <_vfprintf_r+0xccc>
800054ee:	fa ca f9 44 	sub	r10,sp,-1724
800054f2:	f4 06 00 36 	add	r6,r10,r6<<0x3
800054f6:	ec fa fd 88 	ld.w	r10,r6[-632]
800054fa:	c1 68       	rjmp	80005526 <_vfprintf_r+0xcf6>
800054fc:	41 09       	lddsp	r9,sp[0x40]
800054fe:	59 f8       	cp.w	r8,31
80005500:	e0 89 00 10 	brgt	80005520 <_vfprintf_r+0xcf0>
80005504:	f2 ca ff fc 	sub	r10,r9,-4
80005508:	51 0a       	stdsp	sp[0x40],r10
8000550a:	fa c6 f9 44 	sub	r6,sp,-1724
8000550e:	72 0a       	ld.w	r10,r9[0x0]
80005510:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005514:	f3 4a fd 88 	st.w	r9[-632],r10
80005518:	2f f8       	sub	r8,-1
8000551a:	fb 48 06 b4 	st.w	sp[1716],r8
8000551e:	c0 48       	rjmp	80005526 <_vfprintf_r+0xcf6>
80005520:	72 0a       	ld.w	r10,r9[0x0]
80005522:	2f c9       	sub	r9,-4
80005524:	51 09       	stdsp	sp[0x40],r9
80005526:	40 be       	lddsp	lr,sp[0x2c]
80005528:	95 0e       	st.w	r10[0x0],lr
8000552a:	fe 9f fa 11 	bral	8000494c <_vfprintf_r+0x11c>
8000552e:	50 a7       	stdsp	sp[0x28],r7
80005530:	50 80       	stdsp	sp[0x20],r0
80005532:	0c 97       	mov	r7,r6
80005534:	04 94       	mov	r4,r2
80005536:	06 96       	mov	r6,r3
80005538:	02 92       	mov	r2,r1
8000553a:	40 93       	lddsp	r3,sp[0x24]
8000553c:	10 90       	mov	r0,r8
8000553e:	40 41       	lddsp	r1,sp[0x10]
80005540:	a5 a5       	sbr	r5,0x4
80005542:	c0 a8       	rjmp	80005556 <_vfprintf_r+0xd26>
80005544:	50 a7       	stdsp	sp[0x28],r7
80005546:	50 80       	stdsp	sp[0x20],r0
80005548:	0c 97       	mov	r7,r6
8000554a:	04 94       	mov	r4,r2
8000554c:	06 96       	mov	r6,r3
8000554e:	02 92       	mov	r2,r1
80005550:	40 93       	lddsp	r3,sp[0x24]
80005552:	10 90       	mov	r0,r8
80005554:	40 41       	lddsp	r1,sp[0x10]
80005556:	ed b5 00 05 	bld	r5,0x5
8000555a:	c5 d1       	brne	80005614 <_vfprintf_r+0xde4>
8000555c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005560:	40 3c       	lddsp	r12,sp[0xc]
80005562:	58 0c       	cp.w	r12,0
80005564:	c2 60       	breq	800055b0 <_vfprintf_r+0xd80>
80005566:	10 36       	cp.w	r6,r8
80005568:	c0 a4       	brge	8000557c <_vfprintf_r+0xd4c>
8000556a:	fa cb f9 44 	sub	r11,sp,-1724
8000556e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005572:	ec e8 fd 88 	ld.d	r8,r6[-632]
80005576:	fa e9 00 00 	st.d	sp[0],r8
8000557a:	c1 88       	rjmp	800055aa <_vfprintf_r+0xd7a>
8000557c:	fa c8 f9 50 	sub	r8,sp,-1712
80005580:	1a d8       	st.w	--sp,r8
80005582:	fa c8 fa b8 	sub	r8,sp,-1352
80005586:	04 9a       	mov	r10,r2
80005588:	1a d8       	st.w	--sp,r8
8000558a:	0c 9b       	mov	r11,r6
8000558c:	fa c8 fb b4 	sub	r8,sp,-1100
80005590:	08 9c       	mov	r12,r4
80005592:	1a d8       	st.w	--sp,r8
80005594:	fa c8 f9 40 	sub	r8,sp,-1728
80005598:	fa c9 ff b4 	sub	r9,sp,-76
8000559c:	fe b0 f7 b2 	rcall	80004500 <get_arg>
800055a0:	2f dd       	sub	sp,-12
800055a2:	f8 ea 00 00 	ld.d	r10,r12[0]
800055a6:	fa eb 00 00 	st.d	sp[0],r10
800055aa:	30 08       	mov	r8,0
800055ac:	e0 8f 03 de 	bral	80005d68 <_vfprintf_r+0x1538>
800055b0:	ee ca ff ff 	sub	r10,r7,-1
800055b4:	10 37       	cp.w	r7,r8
800055b6:	c0 b4       	brge	800055cc <_vfprintf_r+0xd9c>
800055b8:	fa c9 f9 44 	sub	r9,sp,-1724
800055bc:	14 97       	mov	r7,r10
800055be:	f2 06 00 36 	add	r6,r9,r6<<0x3
800055c2:	ec ea fd 88 	ld.d	r10,r6[-632]
800055c6:	fa eb 00 00 	st.d	sp[0],r10
800055ca:	c1 88       	rjmp	800055fa <_vfprintf_r+0xdca>
800055cc:	41 09       	lddsp	r9,sp[0x40]
800055ce:	59 f8       	cp.w	r8,31
800055d0:	e0 89 00 18 	brgt	80005600 <_vfprintf_r+0xdd0>
800055d4:	f2 e6 00 00 	ld.d	r6,r9[0]
800055d8:	f2 cb ff f8 	sub	r11,r9,-8
800055dc:	fa e7 00 00 	st.d	sp[0],r6
800055e0:	51 0b       	stdsp	sp[0x40],r11
800055e2:	fa c6 f9 44 	sub	r6,sp,-1724
800055e6:	ec 08 00 39 	add	r9,r6,r8<<0x3
800055ea:	fa e6 00 00 	ld.d	r6,sp[0]
800055ee:	f2 e7 fd 88 	st.d	r9[-632],r6
800055f2:	2f f8       	sub	r8,-1
800055f4:	14 97       	mov	r7,r10
800055f6:	fb 48 06 b4 	st.w	sp[1716],r8
800055fa:	40 38       	lddsp	r8,sp[0xc]
800055fc:	e0 8f 03 b6 	bral	80005d68 <_vfprintf_r+0x1538>
80005600:	f2 e6 00 00 	ld.d	r6,r9[0]
80005604:	40 38       	lddsp	r8,sp[0xc]
80005606:	fa e7 00 00 	st.d	sp[0],r6
8000560a:	2f 89       	sub	r9,-8
8000560c:	14 97       	mov	r7,r10
8000560e:	51 09       	stdsp	sp[0x40],r9
80005610:	e0 8f 03 ac 	bral	80005d68 <_vfprintf_r+0x1538>
80005614:	ed b5 00 04 	bld	r5,0x4
80005618:	c1 61       	brne	80005644 <_vfprintf_r+0xe14>
8000561a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000561e:	40 3e       	lddsp	lr,sp[0xc]
80005620:	58 0e       	cp.w	lr,0
80005622:	c0 80       	breq	80005632 <_vfprintf_r+0xe02>
80005624:	10 36       	cp.w	r6,r8
80005626:	c6 74       	brge	800056f4 <_vfprintf_r+0xec4>
80005628:	fa cc f9 44 	sub	r12,sp,-1724
8000562c:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005630:	c8 08       	rjmp	80005730 <_vfprintf_r+0xf00>
80005632:	ee ca ff ff 	sub	r10,r7,-1
80005636:	10 37       	cp.w	r7,r8
80005638:	c7 f4       	brge	80005736 <_vfprintf_r+0xf06>
8000563a:	fa cb f9 44 	sub	r11,sp,-1724
8000563e:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005642:	c7 68       	rjmp	8000572e <_vfprintf_r+0xefe>
80005644:	ed b5 00 06 	bld	r5,0x6
80005648:	c4 a1       	brne	800056dc <_vfprintf_r+0xeac>
8000564a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000564e:	40 3c       	lddsp	r12,sp[0xc]
80005650:	58 0c       	cp.w	r12,0
80005652:	c1 d0       	breq	8000568c <_vfprintf_r+0xe5c>
80005654:	10 36       	cp.w	r6,r8
80005656:	c0 64       	brge	80005662 <_vfprintf_r+0xe32>
80005658:	fa cb f9 44 	sub	r11,sp,-1724
8000565c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005660:	c1 f8       	rjmp	8000569e <_vfprintf_r+0xe6e>
80005662:	fa c8 f9 50 	sub	r8,sp,-1712
80005666:	1a d8       	st.w	--sp,r8
80005668:	fa c8 fa b8 	sub	r8,sp,-1352
8000566c:	1a d8       	st.w	--sp,r8
8000566e:	fa c8 fb b4 	sub	r8,sp,-1100
80005672:	1a d8       	st.w	--sp,r8
80005674:	fa c8 f9 40 	sub	r8,sp,-1728
80005678:	fa c9 ff b4 	sub	r9,sp,-76
8000567c:	04 9a       	mov	r10,r2
8000567e:	0c 9b       	mov	r11,r6
80005680:	08 9c       	mov	r12,r4
80005682:	fe b0 f7 3f 	rcall	80004500 <get_arg>
80005686:	2f dd       	sub	sp,-12
80005688:	98 18       	ld.sh	r8,r12[0x2]
8000568a:	c2 68       	rjmp	800056d6 <_vfprintf_r+0xea6>
8000568c:	ee ca ff ff 	sub	r10,r7,-1
80005690:	10 37       	cp.w	r7,r8
80005692:	c0 94       	brge	800056a4 <_vfprintf_r+0xe74>
80005694:	fa c9 f9 44 	sub	r9,sp,-1724
80005698:	14 97       	mov	r7,r10
8000569a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000569e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
800056a2:	c1 a8       	rjmp	800056d6 <_vfprintf_r+0xea6>
800056a4:	41 09       	lddsp	r9,sp[0x40]
800056a6:	59 f8       	cp.w	r8,31
800056a8:	e0 89 00 13 	brgt	800056ce <_vfprintf_r+0xe9e>
800056ac:	f2 cb ff fc 	sub	r11,r9,-4
800056b0:	51 0b       	stdsp	sp[0x40],r11
800056b2:	72 09       	ld.w	r9,r9[0x0]
800056b4:	fa c6 f9 44 	sub	r6,sp,-1724
800056b8:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800056bc:	2f f8       	sub	r8,-1
800056be:	f7 49 fd 88 	st.w	r11[-632],r9
800056c2:	fb 48 06 b4 	st.w	sp[1716],r8
800056c6:	14 97       	mov	r7,r10
800056c8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800056cc:	c0 58       	rjmp	800056d6 <_vfprintf_r+0xea6>
800056ce:	92 18       	ld.sh	r8,r9[0x2]
800056d0:	14 97       	mov	r7,r10
800056d2:	2f c9       	sub	r9,-4
800056d4:	51 09       	stdsp	sp[0x40],r9
800056d6:	5c 78       	castu.h	r8
800056d8:	50 18       	stdsp	sp[0x4],r8
800056da:	c4 68       	rjmp	80005766 <_vfprintf_r+0xf36>
800056dc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800056e0:	40 3c       	lddsp	r12,sp[0xc]
800056e2:	58 0c       	cp.w	r12,0
800056e4:	c1 d0       	breq	8000571e <_vfprintf_r+0xeee>
800056e6:	10 36       	cp.w	r6,r8
800056e8:	c0 64       	brge	800056f4 <_vfprintf_r+0xec4>
800056ea:	fa cb f9 44 	sub	r11,sp,-1724
800056ee:	f6 06 00 36 	add	r6,r11,r6<<0x3
800056f2:	c1 f8       	rjmp	80005730 <_vfprintf_r+0xf00>
800056f4:	fa c8 f9 50 	sub	r8,sp,-1712
800056f8:	1a d8       	st.w	--sp,r8
800056fa:	fa c8 fa b8 	sub	r8,sp,-1352
800056fe:	0c 9b       	mov	r11,r6
80005700:	1a d8       	st.w	--sp,r8
80005702:	fa c8 fb b4 	sub	r8,sp,-1100
80005706:	04 9a       	mov	r10,r2
80005708:	1a d8       	st.w	--sp,r8
8000570a:	08 9c       	mov	r12,r4
8000570c:	fa c8 f9 40 	sub	r8,sp,-1728
80005710:	fa c9 ff b4 	sub	r9,sp,-76
80005714:	fe b0 f6 f6 	rcall	80004500 <get_arg>
80005718:	2f dd       	sub	sp,-12
8000571a:	78 0b       	ld.w	r11,r12[0x0]
8000571c:	c2 48       	rjmp	80005764 <_vfprintf_r+0xf34>
8000571e:	ee ca ff ff 	sub	r10,r7,-1
80005722:	10 37       	cp.w	r7,r8
80005724:	c0 94       	brge	80005736 <_vfprintf_r+0xf06>
80005726:	fa c9 f9 44 	sub	r9,sp,-1724
8000572a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000572e:	14 97       	mov	r7,r10
80005730:	ec fb fd 88 	ld.w	r11,r6[-632]
80005734:	c1 88       	rjmp	80005764 <_vfprintf_r+0xf34>
80005736:	41 09       	lddsp	r9,sp[0x40]
80005738:	59 f8       	cp.w	r8,31
8000573a:	e0 89 00 11 	brgt	8000575c <_vfprintf_r+0xf2c>
8000573e:	f2 cb ff fc 	sub	r11,r9,-4
80005742:	51 0b       	stdsp	sp[0x40],r11
80005744:	fa c6 f9 44 	sub	r6,sp,-1724
80005748:	72 0b       	ld.w	r11,r9[0x0]
8000574a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000574e:	f3 4b fd 88 	st.w	r9[-632],r11
80005752:	2f f8       	sub	r8,-1
80005754:	14 97       	mov	r7,r10
80005756:	fb 48 06 b4 	st.w	sp[1716],r8
8000575a:	c0 58       	rjmp	80005764 <_vfprintf_r+0xf34>
8000575c:	72 0b       	ld.w	r11,r9[0x0]
8000575e:	14 97       	mov	r7,r10
80005760:	2f c9       	sub	r9,-4
80005762:	51 09       	stdsp	sp[0x40],r9
80005764:	50 1b       	stdsp	sp[0x4],r11
80005766:	30 0e       	mov	lr,0
80005768:	50 0e       	stdsp	sp[0x0],lr
8000576a:	1c 98       	mov	r8,lr
8000576c:	e0 8f 02 fe 	bral	80005d68 <_vfprintf_r+0x1538>
80005770:	50 a7       	stdsp	sp[0x28],r7
80005772:	50 80       	stdsp	sp[0x20],r0
80005774:	0c 97       	mov	r7,r6
80005776:	04 94       	mov	r4,r2
80005778:	06 96       	mov	r6,r3
8000577a:	02 92       	mov	r2,r1
8000577c:	40 93       	lddsp	r3,sp[0x24]
8000577e:	40 41       	lddsp	r1,sp[0x10]
80005780:	0e 99       	mov	r9,r7
80005782:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005786:	40 3c       	lddsp	r12,sp[0xc]
80005788:	58 0c       	cp.w	r12,0
8000578a:	c1 d0       	breq	800057c4 <_vfprintf_r+0xf94>
8000578c:	10 36       	cp.w	r6,r8
8000578e:	c0 64       	brge	8000579a <_vfprintf_r+0xf6a>
80005790:	fa cb f9 44 	sub	r11,sp,-1724
80005794:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005798:	c1 d8       	rjmp	800057d2 <_vfprintf_r+0xfa2>
8000579a:	fa c8 f9 50 	sub	r8,sp,-1712
8000579e:	1a d8       	st.w	--sp,r8
800057a0:	fa c8 fa b8 	sub	r8,sp,-1352
800057a4:	1a d8       	st.w	--sp,r8
800057a6:	fa c8 fb b4 	sub	r8,sp,-1100
800057aa:	1a d8       	st.w	--sp,r8
800057ac:	fa c9 ff b4 	sub	r9,sp,-76
800057b0:	fa c8 f9 40 	sub	r8,sp,-1728
800057b4:	04 9a       	mov	r10,r2
800057b6:	0c 9b       	mov	r11,r6
800057b8:	08 9c       	mov	r12,r4
800057ba:	fe b0 f6 a3 	rcall	80004500 <get_arg>
800057be:	2f dd       	sub	sp,-12
800057c0:	78 09       	ld.w	r9,r12[0x0]
800057c2:	c2 18       	rjmp	80005804 <_vfprintf_r+0xfd4>
800057c4:	2f f7       	sub	r7,-1
800057c6:	10 39       	cp.w	r9,r8
800057c8:	c0 84       	brge	800057d8 <_vfprintf_r+0xfa8>
800057ca:	fa ca f9 44 	sub	r10,sp,-1724
800057ce:	f4 06 00 36 	add	r6,r10,r6<<0x3
800057d2:	ec f9 fd 88 	ld.w	r9,r6[-632]
800057d6:	c1 78       	rjmp	80005804 <_vfprintf_r+0xfd4>
800057d8:	41 09       	lddsp	r9,sp[0x40]
800057da:	59 f8       	cp.w	r8,31
800057dc:	e0 89 00 10 	brgt	800057fc <_vfprintf_r+0xfcc>
800057e0:	f2 ca ff fc 	sub	r10,r9,-4
800057e4:	51 0a       	stdsp	sp[0x40],r10
800057e6:	fa c6 f9 44 	sub	r6,sp,-1724
800057ea:	72 09       	ld.w	r9,r9[0x0]
800057ec:	ec 08 00 3a 	add	r10,r6,r8<<0x3
800057f0:	f5 49 fd 88 	st.w	r10[-632],r9
800057f4:	2f f8       	sub	r8,-1
800057f6:	fb 48 06 b4 	st.w	sp[1716],r8
800057fa:	c0 58       	rjmp	80005804 <_vfprintf_r+0xfd4>
800057fc:	f2 c8 ff fc 	sub	r8,r9,-4
80005800:	51 08       	stdsp	sp[0x40],r8
80005802:	72 09       	ld.w	r9,r9[0x0]
80005804:	33 08       	mov	r8,48
80005806:	fb 68 06 b8 	st.b	sp[1720],r8
8000580a:	37 88       	mov	r8,120
8000580c:	30 0e       	mov	lr,0
8000580e:	fb 68 06 b9 	st.b	sp[1721],r8
80005812:	fe cc b8 36 	sub	r12,pc,-18378
80005816:	50 19       	stdsp	sp[0x4],r9
80005818:	a1 b5       	sbr	r5,0x1
8000581a:	50 0e       	stdsp	sp[0x0],lr
8000581c:	50 dc       	stdsp	sp[0x34],r12
8000581e:	30 28       	mov	r8,2
80005820:	37 80       	mov	r0,120
80005822:	e0 8f 02 a3 	bral	80005d68 <_vfprintf_r+0x1538>
80005826:	50 a7       	stdsp	sp[0x28],r7
80005828:	50 80       	stdsp	sp[0x20],r0
8000582a:	10 90       	mov	r0,r8
8000582c:	30 08       	mov	r8,0
8000582e:	fb 68 06 bb 	st.b	sp[1723],r8
80005832:	0c 97       	mov	r7,r6
80005834:	04 94       	mov	r4,r2
80005836:	06 96       	mov	r6,r3
80005838:	02 92       	mov	r2,r1
8000583a:	40 93       	lddsp	r3,sp[0x24]
8000583c:	40 41       	lddsp	r1,sp[0x10]
8000583e:	0e 99       	mov	r9,r7
80005840:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005844:	40 3b       	lddsp	r11,sp[0xc]
80005846:	58 0b       	cp.w	r11,0
80005848:	c1 d0       	breq	80005882 <_vfprintf_r+0x1052>
8000584a:	10 36       	cp.w	r6,r8
8000584c:	c0 64       	brge	80005858 <_vfprintf_r+0x1028>
8000584e:	fa ca f9 44 	sub	r10,sp,-1724
80005852:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005856:	c1 d8       	rjmp	80005890 <_vfprintf_r+0x1060>
80005858:	fa c8 f9 50 	sub	r8,sp,-1712
8000585c:	1a d8       	st.w	--sp,r8
8000585e:	fa c8 fa b8 	sub	r8,sp,-1352
80005862:	1a d8       	st.w	--sp,r8
80005864:	fa c8 fb b4 	sub	r8,sp,-1100
80005868:	0c 9b       	mov	r11,r6
8000586a:	1a d8       	st.w	--sp,r8
8000586c:	04 9a       	mov	r10,r2
8000586e:	fa c8 f9 40 	sub	r8,sp,-1728
80005872:	fa c9 ff b4 	sub	r9,sp,-76
80005876:	08 9c       	mov	r12,r4
80005878:	fe b0 f6 44 	rcall	80004500 <get_arg>
8000587c:	2f dd       	sub	sp,-12
8000587e:	78 06       	ld.w	r6,r12[0x0]
80005880:	c2 08       	rjmp	800058c0 <_vfprintf_r+0x1090>
80005882:	2f f7       	sub	r7,-1
80005884:	10 39       	cp.w	r9,r8
80005886:	c0 84       	brge	80005896 <_vfprintf_r+0x1066>
80005888:	fa c9 f9 44 	sub	r9,sp,-1724
8000588c:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005890:	ec f6 fd 88 	ld.w	r6,r6[-632]
80005894:	c1 68       	rjmp	800058c0 <_vfprintf_r+0x1090>
80005896:	41 09       	lddsp	r9,sp[0x40]
80005898:	59 f8       	cp.w	r8,31
8000589a:	e0 89 00 10 	brgt	800058ba <_vfprintf_r+0x108a>
8000589e:	f2 ca ff fc 	sub	r10,r9,-4
800058a2:	51 0a       	stdsp	sp[0x40],r10
800058a4:	72 06       	ld.w	r6,r9[0x0]
800058a6:	fa ce f9 44 	sub	lr,sp,-1724
800058aa:	fc 08 00 39 	add	r9,lr,r8<<0x3
800058ae:	f3 46 fd 88 	st.w	r9[-632],r6
800058b2:	2f f8       	sub	r8,-1
800058b4:	fb 48 06 b4 	st.w	sp[1716],r8
800058b8:	c0 48       	rjmp	800058c0 <_vfprintf_r+0x1090>
800058ba:	72 06       	ld.w	r6,r9[0x0]
800058bc:	2f c9       	sub	r9,-4
800058be:	51 09       	stdsp	sp[0x40],r9
800058c0:	40 2c       	lddsp	r12,sp[0x8]
800058c2:	58 0c       	cp.w	r12,0
800058c4:	c1 05       	brlt	800058e4 <_vfprintf_r+0x10b4>
800058c6:	18 9a       	mov	r10,r12
800058c8:	30 0b       	mov	r11,0
800058ca:	0c 9c       	mov	r12,r6
800058cc:	e0 a0 14 58 	rcall	8000817c <memchr>
800058d0:	e0 80 02 df 	breq	80005e8e <_vfprintf_r+0x165e>
800058d4:	f8 06 01 02 	sub	r2,r12,r6
800058d8:	40 2b       	lddsp	r11,sp[0x8]
800058da:	16 32       	cp.w	r2,r11
800058dc:	e0 89 02 d9 	brgt	80005e8e <_vfprintf_r+0x165e>
800058e0:	e0 8f 02 d4 	bral	80005e88 <_vfprintf_r+0x1658>
800058e4:	30 0a       	mov	r10,0
800058e6:	0c 9c       	mov	r12,r6
800058e8:	50 2a       	stdsp	sp[0x8],r10
800058ea:	e0 a0 19 33 	rcall	80008b50 <strlen>
800058ee:	18 92       	mov	r2,r12
800058f0:	e0 8f 02 d2 	bral	80005e94 <_vfprintf_r+0x1664>
800058f4:	50 a7       	stdsp	sp[0x28],r7
800058f6:	50 80       	stdsp	sp[0x20],r0
800058f8:	0c 97       	mov	r7,r6
800058fa:	04 94       	mov	r4,r2
800058fc:	06 96       	mov	r6,r3
800058fe:	02 92       	mov	r2,r1
80005900:	40 93       	lddsp	r3,sp[0x24]
80005902:	10 90       	mov	r0,r8
80005904:	40 41       	lddsp	r1,sp[0x10]
80005906:	a5 a5       	sbr	r5,0x4
80005908:	c0 a8       	rjmp	8000591c <_vfprintf_r+0x10ec>
8000590a:	50 a7       	stdsp	sp[0x28],r7
8000590c:	50 80       	stdsp	sp[0x20],r0
8000590e:	0c 97       	mov	r7,r6
80005910:	04 94       	mov	r4,r2
80005912:	06 96       	mov	r6,r3
80005914:	02 92       	mov	r2,r1
80005916:	40 93       	lddsp	r3,sp[0x24]
80005918:	10 90       	mov	r0,r8
8000591a:	40 41       	lddsp	r1,sp[0x10]
8000591c:	ed b5 00 05 	bld	r5,0x5
80005920:	c5 61       	brne	800059cc <_vfprintf_r+0x119c>
80005922:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005926:	40 39       	lddsp	r9,sp[0xc]
80005928:	58 09       	cp.w	r9,0
8000592a:	c2 10       	breq	8000596c <_vfprintf_r+0x113c>
8000592c:	10 36       	cp.w	r6,r8
8000592e:	c0 74       	brge	8000593c <_vfprintf_r+0x110c>
80005930:	fa c8 f9 44 	sub	r8,sp,-1724
80005934:	f0 06 00 36 	add	r6,r8,r6<<0x3
80005938:	c2 38       	rjmp	8000597e <_vfprintf_r+0x114e>
8000593a:	d7 03       	nop
8000593c:	fa c8 f9 50 	sub	r8,sp,-1712
80005940:	1a d8       	st.w	--sp,r8
80005942:	fa c8 fa b8 	sub	r8,sp,-1352
80005946:	1a d8       	st.w	--sp,r8
80005948:	fa c8 fb b4 	sub	r8,sp,-1100
8000594c:	1a d8       	st.w	--sp,r8
8000594e:	fa c8 f9 40 	sub	r8,sp,-1728
80005952:	fa c9 ff b4 	sub	r9,sp,-76
80005956:	04 9a       	mov	r10,r2
80005958:	0c 9b       	mov	r11,r6
8000595a:	08 9c       	mov	r12,r4
8000595c:	fe b0 f5 d2 	rcall	80004500 <get_arg>
80005960:	2f dd       	sub	sp,-12
80005962:	f8 e8 00 00 	ld.d	r8,r12[0]
80005966:	fa e9 00 00 	st.d	sp[0],r8
8000596a:	c2 e8       	rjmp	800059c6 <_vfprintf_r+0x1196>
8000596c:	ee ca ff ff 	sub	r10,r7,-1
80005970:	10 37       	cp.w	r7,r8
80005972:	c0 b4       	brge	80005988 <_vfprintf_r+0x1158>
80005974:	fa c8 f9 44 	sub	r8,sp,-1724
80005978:	14 97       	mov	r7,r10
8000597a:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000597e:	ec ea fd 88 	ld.d	r10,r6[-632]
80005982:	fa eb 00 00 	st.d	sp[0],r10
80005986:	c2 08       	rjmp	800059c6 <_vfprintf_r+0x1196>
80005988:	41 09       	lddsp	r9,sp[0x40]
8000598a:	59 f8       	cp.w	r8,31
8000598c:	e0 89 00 16 	brgt	800059b8 <_vfprintf_r+0x1188>
80005990:	f2 e6 00 00 	ld.d	r6,r9[0]
80005994:	f2 cb ff f8 	sub	r11,r9,-8
80005998:	fa e7 00 00 	st.d	sp[0],r6
8000599c:	51 0b       	stdsp	sp[0x40],r11
8000599e:	fa c6 f9 44 	sub	r6,sp,-1724
800059a2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800059a6:	fa e6 00 00 	ld.d	r6,sp[0]
800059aa:	f2 e7 fd 88 	st.d	r9[-632],r6
800059ae:	2f f8       	sub	r8,-1
800059b0:	14 97       	mov	r7,r10
800059b2:	fb 48 06 b4 	st.w	sp[1716],r8
800059b6:	c0 88       	rjmp	800059c6 <_vfprintf_r+0x1196>
800059b8:	f2 e6 00 00 	ld.d	r6,r9[0]
800059bc:	2f 89       	sub	r9,-8
800059be:	fa e7 00 00 	st.d	sp[0],r6
800059c2:	51 09       	stdsp	sp[0x40],r9
800059c4:	14 97       	mov	r7,r10
800059c6:	30 18       	mov	r8,1
800059c8:	e0 8f 01 d0 	bral	80005d68 <_vfprintf_r+0x1538>
800059cc:	ed b5 00 04 	bld	r5,0x4
800059d0:	c1 61       	brne	800059fc <_vfprintf_r+0x11cc>
800059d2:	fa f8 06 b4 	ld.w	r8,sp[1716]
800059d6:	40 3e       	lddsp	lr,sp[0xc]
800059d8:	58 0e       	cp.w	lr,0
800059da:	c0 80       	breq	800059ea <_vfprintf_r+0x11ba>
800059dc:	10 36       	cp.w	r6,r8
800059de:	c6 74       	brge	80005aac <_vfprintf_r+0x127c>
800059e0:	fa cc f9 44 	sub	r12,sp,-1724
800059e4:	f8 06 00 36 	add	r6,r12,r6<<0x3
800059e8:	c8 08       	rjmp	80005ae8 <_vfprintf_r+0x12b8>
800059ea:	ee ca ff ff 	sub	r10,r7,-1
800059ee:	10 37       	cp.w	r7,r8
800059f0:	c7 f4       	brge	80005aee <_vfprintf_r+0x12be>
800059f2:	fa cb f9 44 	sub	r11,sp,-1724
800059f6:	f6 06 00 36 	add	r6,r11,r6<<0x3
800059fa:	c7 68       	rjmp	80005ae6 <_vfprintf_r+0x12b6>
800059fc:	ed b5 00 06 	bld	r5,0x6
80005a00:	c4 a1       	brne	80005a94 <_vfprintf_r+0x1264>
80005a02:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005a06:	40 3c       	lddsp	r12,sp[0xc]
80005a08:	58 0c       	cp.w	r12,0
80005a0a:	c1 d0       	breq	80005a44 <_vfprintf_r+0x1214>
80005a0c:	10 36       	cp.w	r6,r8
80005a0e:	c0 64       	brge	80005a1a <_vfprintf_r+0x11ea>
80005a10:	fa cb f9 44 	sub	r11,sp,-1724
80005a14:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005a18:	c1 f8       	rjmp	80005a56 <_vfprintf_r+0x1226>
80005a1a:	fa c8 f9 50 	sub	r8,sp,-1712
80005a1e:	1a d8       	st.w	--sp,r8
80005a20:	fa c8 fa b8 	sub	r8,sp,-1352
80005a24:	1a d8       	st.w	--sp,r8
80005a26:	fa c8 fb b4 	sub	r8,sp,-1100
80005a2a:	1a d8       	st.w	--sp,r8
80005a2c:	fa c8 f9 40 	sub	r8,sp,-1728
80005a30:	fa c9 ff b4 	sub	r9,sp,-76
80005a34:	04 9a       	mov	r10,r2
80005a36:	0c 9b       	mov	r11,r6
80005a38:	08 9c       	mov	r12,r4
80005a3a:	fe b0 f5 63 	rcall	80004500 <get_arg>
80005a3e:	2f dd       	sub	sp,-12
80005a40:	98 18       	ld.sh	r8,r12[0x2]
80005a42:	c2 68       	rjmp	80005a8e <_vfprintf_r+0x125e>
80005a44:	ee ca ff ff 	sub	r10,r7,-1
80005a48:	10 37       	cp.w	r7,r8
80005a4a:	c0 94       	brge	80005a5c <_vfprintf_r+0x122c>
80005a4c:	fa c9 f9 44 	sub	r9,sp,-1724
80005a50:	14 97       	mov	r7,r10
80005a52:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005a56:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005a5a:	c1 a8       	rjmp	80005a8e <_vfprintf_r+0x125e>
80005a5c:	41 09       	lddsp	r9,sp[0x40]
80005a5e:	59 f8       	cp.w	r8,31
80005a60:	e0 89 00 13 	brgt	80005a86 <_vfprintf_r+0x1256>
80005a64:	f2 cb ff fc 	sub	r11,r9,-4
80005a68:	51 0b       	stdsp	sp[0x40],r11
80005a6a:	72 09       	ld.w	r9,r9[0x0]
80005a6c:	fa c6 f9 44 	sub	r6,sp,-1724
80005a70:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005a74:	2f f8       	sub	r8,-1
80005a76:	f7 49 fd 88 	st.w	r11[-632],r9
80005a7a:	fb 48 06 b4 	st.w	sp[1716],r8
80005a7e:	14 97       	mov	r7,r10
80005a80:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005a84:	c0 58       	rjmp	80005a8e <_vfprintf_r+0x125e>
80005a86:	92 18       	ld.sh	r8,r9[0x2]
80005a88:	14 97       	mov	r7,r10
80005a8a:	2f c9       	sub	r9,-4
80005a8c:	51 09       	stdsp	sp[0x40],r9
80005a8e:	5c 78       	castu.h	r8
80005a90:	50 18       	stdsp	sp[0x4],r8
80005a92:	c4 68       	rjmp	80005b1e <_vfprintf_r+0x12ee>
80005a94:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005a98:	40 3c       	lddsp	r12,sp[0xc]
80005a9a:	58 0c       	cp.w	r12,0
80005a9c:	c1 d0       	breq	80005ad6 <_vfprintf_r+0x12a6>
80005a9e:	10 36       	cp.w	r6,r8
80005aa0:	c0 64       	brge	80005aac <_vfprintf_r+0x127c>
80005aa2:	fa cb f9 44 	sub	r11,sp,-1724
80005aa6:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005aaa:	c1 f8       	rjmp	80005ae8 <_vfprintf_r+0x12b8>
80005aac:	fa c8 f9 50 	sub	r8,sp,-1712
80005ab0:	1a d8       	st.w	--sp,r8
80005ab2:	fa c8 fa b8 	sub	r8,sp,-1352
80005ab6:	0c 9b       	mov	r11,r6
80005ab8:	1a d8       	st.w	--sp,r8
80005aba:	fa c8 fb b4 	sub	r8,sp,-1100
80005abe:	04 9a       	mov	r10,r2
80005ac0:	1a d8       	st.w	--sp,r8
80005ac2:	08 9c       	mov	r12,r4
80005ac4:	fa c8 f9 40 	sub	r8,sp,-1728
80005ac8:	fa c9 ff b4 	sub	r9,sp,-76
80005acc:	fe b0 f5 1a 	rcall	80004500 <get_arg>
80005ad0:	2f dd       	sub	sp,-12
80005ad2:	78 0b       	ld.w	r11,r12[0x0]
80005ad4:	c2 48       	rjmp	80005b1c <_vfprintf_r+0x12ec>
80005ad6:	ee ca ff ff 	sub	r10,r7,-1
80005ada:	10 37       	cp.w	r7,r8
80005adc:	c0 94       	brge	80005aee <_vfprintf_r+0x12be>
80005ade:	fa c9 f9 44 	sub	r9,sp,-1724
80005ae2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005ae6:	14 97       	mov	r7,r10
80005ae8:	ec fb fd 88 	ld.w	r11,r6[-632]
80005aec:	c1 88       	rjmp	80005b1c <_vfprintf_r+0x12ec>
80005aee:	41 09       	lddsp	r9,sp[0x40]
80005af0:	59 f8       	cp.w	r8,31
80005af2:	e0 89 00 11 	brgt	80005b14 <_vfprintf_r+0x12e4>
80005af6:	f2 cb ff fc 	sub	r11,r9,-4
80005afa:	51 0b       	stdsp	sp[0x40],r11
80005afc:	fa c6 f9 44 	sub	r6,sp,-1724
80005b00:	72 0b       	ld.w	r11,r9[0x0]
80005b02:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005b06:	f3 4b fd 88 	st.w	r9[-632],r11
80005b0a:	2f f8       	sub	r8,-1
80005b0c:	14 97       	mov	r7,r10
80005b0e:	fb 48 06 b4 	st.w	sp[1716],r8
80005b12:	c0 58       	rjmp	80005b1c <_vfprintf_r+0x12ec>
80005b14:	72 0b       	ld.w	r11,r9[0x0]
80005b16:	14 97       	mov	r7,r10
80005b18:	2f c9       	sub	r9,-4
80005b1a:	51 09       	stdsp	sp[0x40],r9
80005b1c:	50 1b       	stdsp	sp[0x4],r11
80005b1e:	30 0e       	mov	lr,0
80005b20:	30 18       	mov	r8,1
80005b22:	50 0e       	stdsp	sp[0x0],lr
80005b24:	c2 29       	rjmp	80005d68 <_vfprintf_r+0x1538>
80005b26:	50 a7       	stdsp	sp[0x28],r7
80005b28:	50 80       	stdsp	sp[0x20],r0
80005b2a:	0c 97       	mov	r7,r6
80005b2c:	04 94       	mov	r4,r2
80005b2e:	06 96       	mov	r6,r3
80005b30:	02 92       	mov	r2,r1
80005b32:	fe cc bb 56 	sub	r12,pc,-17578
80005b36:	40 93       	lddsp	r3,sp[0x24]
80005b38:	10 90       	mov	r0,r8
80005b3a:	40 41       	lddsp	r1,sp[0x10]
80005b3c:	50 dc       	stdsp	sp[0x34],r12
80005b3e:	ed b5 00 05 	bld	r5,0x5
80005b42:	c5 51       	brne	80005bec <_vfprintf_r+0x13bc>
80005b44:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005b48:	40 3b       	lddsp	r11,sp[0xc]
80005b4a:	58 0b       	cp.w	r11,0
80005b4c:	c2 20       	breq	80005b90 <_vfprintf_r+0x1360>
80005b4e:	10 36       	cp.w	r6,r8
80005b50:	c0 a4       	brge	80005b64 <_vfprintf_r+0x1334>
80005b52:	fa ca f9 44 	sub	r10,sp,-1724
80005b56:	f4 06 00 36 	add	r6,r10,r6<<0x3
80005b5a:	ec e8 fd 88 	ld.d	r8,r6[-632]
80005b5e:	fa e9 00 00 	st.d	sp[0],r8
80005b62:	cf 28       	rjmp	80005d46 <_vfprintf_r+0x1516>
80005b64:	fa c8 f9 50 	sub	r8,sp,-1712
80005b68:	1a d8       	st.w	--sp,r8
80005b6a:	fa c8 fa b8 	sub	r8,sp,-1352
80005b6e:	04 9a       	mov	r10,r2
80005b70:	1a d8       	st.w	--sp,r8
80005b72:	0c 9b       	mov	r11,r6
80005b74:	fa c8 fb b4 	sub	r8,sp,-1100
80005b78:	08 9c       	mov	r12,r4
80005b7a:	1a d8       	st.w	--sp,r8
80005b7c:	fa c8 f9 40 	sub	r8,sp,-1728
80005b80:	fa c9 ff b4 	sub	r9,sp,-76
80005b84:	fe b0 f4 be 	rcall	80004500 <get_arg>
80005b88:	2f dd       	sub	sp,-12
80005b8a:	f8 ea 00 00 	ld.d	r10,r12[0]
80005b8e:	c0 c8       	rjmp	80005ba6 <_vfprintf_r+0x1376>
80005b90:	ee ca ff ff 	sub	r10,r7,-1
80005b94:	10 37       	cp.w	r7,r8
80005b96:	c0 b4       	brge	80005bac <_vfprintf_r+0x137c>
80005b98:	fa c9 f9 44 	sub	r9,sp,-1724
80005b9c:	14 97       	mov	r7,r10
80005b9e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005ba2:	ec ea fd 88 	ld.d	r10,r6[-632]
80005ba6:	fa eb 00 00 	st.d	sp[0],r10
80005baa:	cc e8       	rjmp	80005d46 <_vfprintf_r+0x1516>
80005bac:	41 09       	lddsp	r9,sp[0x40]
80005bae:	59 f8       	cp.w	r8,31
80005bb0:	e0 89 00 16 	brgt	80005bdc <_vfprintf_r+0x13ac>
80005bb4:	f2 e6 00 00 	ld.d	r6,r9[0]
80005bb8:	f2 cb ff f8 	sub	r11,r9,-8
80005bbc:	fa e7 00 00 	st.d	sp[0],r6
80005bc0:	51 0b       	stdsp	sp[0x40],r11
80005bc2:	fa c6 f9 44 	sub	r6,sp,-1724
80005bc6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005bca:	fa e6 00 00 	ld.d	r6,sp[0]
80005bce:	f2 e7 fd 88 	st.d	r9[-632],r6
80005bd2:	2f f8       	sub	r8,-1
80005bd4:	14 97       	mov	r7,r10
80005bd6:	fb 48 06 b4 	st.w	sp[1716],r8
80005bda:	cb 68       	rjmp	80005d46 <_vfprintf_r+0x1516>
80005bdc:	f2 e6 00 00 	ld.d	r6,r9[0]
80005be0:	2f 89       	sub	r9,-8
80005be2:	fa e7 00 00 	st.d	sp[0],r6
80005be6:	51 09       	stdsp	sp[0x40],r9
80005be8:	14 97       	mov	r7,r10
80005bea:	ca e8       	rjmp	80005d46 <_vfprintf_r+0x1516>
80005bec:	ed b5 00 04 	bld	r5,0x4
80005bf0:	c1 71       	brne	80005c1e <_vfprintf_r+0x13ee>
80005bf2:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005bf6:	40 3e       	lddsp	lr,sp[0xc]
80005bf8:	58 0e       	cp.w	lr,0
80005bfa:	c0 80       	breq	80005c0a <_vfprintf_r+0x13da>
80005bfc:	10 36       	cp.w	r6,r8
80005bfe:	c6 94       	brge	80005cd0 <_vfprintf_r+0x14a0>
80005c00:	fa cc f9 44 	sub	r12,sp,-1724
80005c04:	f8 06 00 36 	add	r6,r12,r6<<0x3
80005c08:	c8 28       	rjmp	80005d0c <_vfprintf_r+0x14dc>
80005c0a:	ee ca ff ff 	sub	r10,r7,-1
80005c0e:	10 37       	cp.w	r7,r8
80005c10:	e0 84 00 81 	brge	80005d12 <_vfprintf_r+0x14e2>
80005c14:	fa cb f9 44 	sub	r11,sp,-1724
80005c18:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005c1c:	c7 78       	rjmp	80005d0a <_vfprintf_r+0x14da>
80005c1e:	ed b5 00 06 	bld	r5,0x6
80005c22:	c4 b1       	brne	80005cb8 <_vfprintf_r+0x1488>
80005c24:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005c28:	40 3c       	lddsp	r12,sp[0xc]
80005c2a:	58 0c       	cp.w	r12,0
80005c2c:	c1 d0       	breq	80005c66 <_vfprintf_r+0x1436>
80005c2e:	10 36       	cp.w	r6,r8
80005c30:	c0 64       	brge	80005c3c <_vfprintf_r+0x140c>
80005c32:	fa cb f9 44 	sub	r11,sp,-1724
80005c36:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005c3a:	c1 f8       	rjmp	80005c78 <_vfprintf_r+0x1448>
80005c3c:	fa c8 f9 50 	sub	r8,sp,-1712
80005c40:	1a d8       	st.w	--sp,r8
80005c42:	fa c8 fa b8 	sub	r8,sp,-1352
80005c46:	1a d8       	st.w	--sp,r8
80005c48:	fa c8 fb b4 	sub	r8,sp,-1100
80005c4c:	1a d8       	st.w	--sp,r8
80005c4e:	fa c8 f9 40 	sub	r8,sp,-1728
80005c52:	fa c9 ff b4 	sub	r9,sp,-76
80005c56:	04 9a       	mov	r10,r2
80005c58:	0c 9b       	mov	r11,r6
80005c5a:	08 9c       	mov	r12,r4
80005c5c:	fe b0 f4 52 	rcall	80004500 <get_arg>
80005c60:	2f dd       	sub	sp,-12
80005c62:	98 18       	ld.sh	r8,r12[0x2]
80005c64:	c2 78       	rjmp	80005cb2 <_vfprintf_r+0x1482>
80005c66:	ee ca ff ff 	sub	r10,r7,-1
80005c6a:	10 37       	cp.w	r7,r8
80005c6c:	c0 a4       	brge	80005c80 <_vfprintf_r+0x1450>
80005c6e:	fa c9 f9 44 	sub	r9,sp,-1724
80005c72:	14 97       	mov	r7,r10
80005c74:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005c78:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80005c7c:	c1 b8       	rjmp	80005cb2 <_vfprintf_r+0x1482>
80005c7e:	d7 03       	nop
80005c80:	41 09       	lddsp	r9,sp[0x40]
80005c82:	59 f8       	cp.w	r8,31
80005c84:	e0 89 00 13 	brgt	80005caa <_vfprintf_r+0x147a>
80005c88:	f2 cb ff fc 	sub	r11,r9,-4
80005c8c:	51 0b       	stdsp	sp[0x40],r11
80005c8e:	72 09       	ld.w	r9,r9[0x0]
80005c90:	fa c6 f9 44 	sub	r6,sp,-1724
80005c94:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80005c98:	2f f8       	sub	r8,-1
80005c9a:	f7 49 fd 88 	st.w	r11[-632],r9
80005c9e:	fb 48 06 b4 	st.w	sp[1716],r8
80005ca2:	14 97       	mov	r7,r10
80005ca4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80005ca8:	c0 58       	rjmp	80005cb2 <_vfprintf_r+0x1482>
80005caa:	92 18       	ld.sh	r8,r9[0x2]
80005cac:	14 97       	mov	r7,r10
80005cae:	2f c9       	sub	r9,-4
80005cb0:	51 09       	stdsp	sp[0x40],r9
80005cb2:	5c 78       	castu.h	r8
80005cb4:	50 18       	stdsp	sp[0x4],r8
80005cb6:	c4 68       	rjmp	80005d42 <_vfprintf_r+0x1512>
80005cb8:	fa f8 06 b4 	ld.w	r8,sp[1716]
80005cbc:	40 3c       	lddsp	r12,sp[0xc]
80005cbe:	58 0c       	cp.w	r12,0
80005cc0:	c1 d0       	breq	80005cfa <_vfprintf_r+0x14ca>
80005cc2:	10 36       	cp.w	r6,r8
80005cc4:	c0 64       	brge	80005cd0 <_vfprintf_r+0x14a0>
80005cc6:	fa cb f9 44 	sub	r11,sp,-1724
80005cca:	f6 06 00 36 	add	r6,r11,r6<<0x3
80005cce:	c1 f8       	rjmp	80005d0c <_vfprintf_r+0x14dc>
80005cd0:	fa c8 f9 50 	sub	r8,sp,-1712
80005cd4:	1a d8       	st.w	--sp,r8
80005cd6:	fa c8 fa b8 	sub	r8,sp,-1352
80005cda:	0c 9b       	mov	r11,r6
80005cdc:	1a d8       	st.w	--sp,r8
80005cde:	fa c8 fb b4 	sub	r8,sp,-1100
80005ce2:	04 9a       	mov	r10,r2
80005ce4:	1a d8       	st.w	--sp,r8
80005ce6:	08 9c       	mov	r12,r4
80005ce8:	fa c8 f9 40 	sub	r8,sp,-1728
80005cec:	fa c9 ff b4 	sub	r9,sp,-76
80005cf0:	fe b0 f4 08 	rcall	80004500 <get_arg>
80005cf4:	2f dd       	sub	sp,-12
80005cf6:	78 0b       	ld.w	r11,r12[0x0]
80005cf8:	c2 48       	rjmp	80005d40 <_vfprintf_r+0x1510>
80005cfa:	ee ca ff ff 	sub	r10,r7,-1
80005cfe:	10 37       	cp.w	r7,r8
80005d00:	c0 94       	brge	80005d12 <_vfprintf_r+0x14e2>
80005d02:	fa c9 f9 44 	sub	r9,sp,-1724
80005d06:	f2 06 00 36 	add	r6,r9,r6<<0x3
80005d0a:	14 97       	mov	r7,r10
80005d0c:	ec fb fd 88 	ld.w	r11,r6[-632]
80005d10:	c1 88       	rjmp	80005d40 <_vfprintf_r+0x1510>
80005d12:	41 09       	lddsp	r9,sp[0x40]
80005d14:	59 f8       	cp.w	r8,31
80005d16:	e0 89 00 11 	brgt	80005d38 <_vfprintf_r+0x1508>
80005d1a:	f2 cb ff fc 	sub	r11,r9,-4
80005d1e:	51 0b       	stdsp	sp[0x40],r11
80005d20:	fa c6 f9 44 	sub	r6,sp,-1724
80005d24:	72 0b       	ld.w	r11,r9[0x0]
80005d26:	ec 08 00 39 	add	r9,r6,r8<<0x3
80005d2a:	f3 4b fd 88 	st.w	r9[-632],r11
80005d2e:	2f f8       	sub	r8,-1
80005d30:	14 97       	mov	r7,r10
80005d32:	fb 48 06 b4 	st.w	sp[1716],r8
80005d36:	c0 58       	rjmp	80005d40 <_vfprintf_r+0x1510>
80005d38:	72 0b       	ld.w	r11,r9[0x0]
80005d3a:	14 97       	mov	r7,r10
80005d3c:	2f c9       	sub	r9,-4
80005d3e:	51 09       	stdsp	sp[0x40],r9
80005d40:	50 1b       	stdsp	sp[0x4],r11
80005d42:	30 0e       	mov	lr,0
80005d44:	50 0e       	stdsp	sp[0x0],lr
80005d46:	40 08       	lddsp	r8,sp[0x0]
80005d48:	40 1c       	lddsp	r12,sp[0x4]
80005d4a:	18 48       	or	r8,r12
80005d4c:	5f 19       	srne	r9
80005d4e:	0a 98       	mov	r8,r5
80005d50:	eb e9 00 09 	and	r9,r5,r9
80005d54:	a1 b8       	sbr	r8,0x1
80005d56:	58 09       	cp.w	r9,0
80005d58:	c0 70       	breq	80005d66 <_vfprintf_r+0x1536>
80005d5a:	10 95       	mov	r5,r8
80005d5c:	fb 60 06 b9 	st.b	sp[1721],r0
80005d60:	33 08       	mov	r8,48
80005d62:	fb 68 06 b8 	st.b	sp[1720],r8
80005d66:	30 28       	mov	r8,2
80005d68:	30 09       	mov	r9,0
80005d6a:	fb 69 06 bb 	st.b	sp[1723],r9
80005d6e:	0a 99       	mov	r9,r5
80005d70:	a7 d9       	cbr	r9,0x7
80005d72:	40 2b       	lddsp	r11,sp[0x8]
80005d74:	40 16       	lddsp	r6,sp[0x4]
80005d76:	58 0b       	cp.w	r11,0
80005d78:	5f 1a       	srne	r10
80005d7a:	f2 05 17 40 	movge	r5,r9
80005d7e:	fa c2 f9 78 	sub	r2,sp,-1672
80005d82:	40 09       	lddsp	r9,sp[0x0]
80005d84:	0c 49       	or	r9,r6
80005d86:	5f 19       	srne	r9
80005d88:	f5 e9 10 09 	or	r9,r10,r9
80005d8c:	c5 c0       	breq	80005e44 <_vfprintf_r+0x1614>
80005d8e:	30 19       	mov	r9,1
80005d90:	f2 08 18 00 	cp.b	r8,r9
80005d94:	c0 60       	breq	80005da0 <_vfprintf_r+0x1570>
80005d96:	30 29       	mov	r9,2
80005d98:	f2 08 18 00 	cp.b	r8,r9
80005d9c:	c0 41       	brne	80005da4 <_vfprintf_r+0x1574>
80005d9e:	c3 c8       	rjmp	80005e16 <_vfprintf_r+0x15e6>
80005da0:	04 96       	mov	r6,r2
80005da2:	c3 08       	rjmp	80005e02 <_vfprintf_r+0x15d2>
80005da4:	04 96       	mov	r6,r2
80005da6:	fa e8 00 00 	ld.d	r8,sp[0]
80005daa:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
80005dae:	2d 0a       	sub	r10,-48
80005db0:	0c fa       	st.b	--r6,r10
80005db2:	f0 0b 16 03 	lsr	r11,r8,0x3
80005db6:	f2 0c 16 03 	lsr	r12,r9,0x3
80005dba:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
80005dbe:	18 99       	mov	r9,r12
80005dc0:	16 98       	mov	r8,r11
80005dc2:	58 08       	cp.w	r8,0
80005dc4:	5c 29       	cpc	r9
80005dc6:	cf 21       	brne	80005daa <_vfprintf_r+0x157a>
80005dc8:	fa e9 00 00 	st.d	sp[0],r8
80005dcc:	ed b5 00 00 	bld	r5,0x0
80005dd0:	c4 51       	brne	80005e5a <_vfprintf_r+0x162a>
80005dd2:	33 09       	mov	r9,48
80005dd4:	f2 0a 18 00 	cp.b	r10,r9
80005dd8:	c4 10       	breq	80005e5a <_vfprintf_r+0x162a>
80005dda:	0c f9       	st.b	--r6,r9
80005ddc:	c3 f8       	rjmp	80005e5a <_vfprintf_r+0x162a>
80005dde:	fa ea 00 00 	ld.d	r10,sp[0]
80005de2:	30 a8       	mov	r8,10
80005de4:	30 09       	mov	r9,0
80005de6:	e0 a0 1c ff 	rcall	800097e4 <__avr32_umod64>
80005dea:	30 a8       	mov	r8,10
80005dec:	2d 0a       	sub	r10,-48
80005dee:	30 09       	mov	r9,0
80005df0:	ac 8a       	st.b	r6[0x0],r10
80005df2:	fa ea 00 00 	ld.d	r10,sp[0]
80005df6:	fe b0 f1 92 	rcall	8000411a <__avr32_udiv64>
80005dfa:	16 99       	mov	r9,r11
80005dfc:	14 98       	mov	r8,r10
80005dfe:	fa e9 00 00 	st.d	sp[0],r8
80005e02:	20 16       	sub	r6,1
80005e04:	fa ea 00 00 	ld.d	r10,sp[0]
80005e08:	58 9a       	cp.w	r10,9
80005e0a:	5c 2b       	cpc	r11
80005e0c:	fe 9b ff e9 	brhi	80005dde <_vfprintf_r+0x15ae>
80005e10:	1b f8       	ld.ub	r8,sp[0x7]
80005e12:	2d 08       	sub	r8,-48
80005e14:	c2 08       	rjmp	80005e54 <_vfprintf_r+0x1624>
80005e16:	04 96       	mov	r6,r2
80005e18:	fa e8 00 00 	ld.d	r8,sp[0]
80005e1c:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80005e20:	40 de       	lddsp	lr,sp[0x34]
80005e22:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
80005e26:	0c fa       	st.b	--r6,r10
80005e28:	f2 0b 16 04 	lsr	r11,r9,0x4
80005e2c:	f0 0a 16 04 	lsr	r10,r8,0x4
80005e30:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80005e34:	16 99       	mov	r9,r11
80005e36:	14 98       	mov	r8,r10
80005e38:	58 08       	cp.w	r8,0
80005e3a:	5c 29       	cpc	r9
80005e3c:	cf 01       	brne	80005e1c <_vfprintf_r+0x15ec>
80005e3e:	fa e9 00 00 	st.d	sp[0],r8
80005e42:	c0 c8       	rjmp	80005e5a <_vfprintf_r+0x162a>
80005e44:	58 08       	cp.w	r8,0
80005e46:	c0 91       	brne	80005e58 <_vfprintf_r+0x1628>
80005e48:	ed b5 00 00 	bld	r5,0x0
80005e4c:	c0 61       	brne	80005e58 <_vfprintf_r+0x1628>
80005e4e:	fa c6 f9 79 	sub	r6,sp,-1671
80005e52:	33 08       	mov	r8,48
80005e54:	ac 88       	st.b	r6[0x0],r8
80005e56:	c0 28       	rjmp	80005e5a <_vfprintf_r+0x162a>
80005e58:	04 96       	mov	r6,r2
80005e5a:	0c 12       	sub	r2,r6
80005e5c:	c1 c8       	rjmp	80005e94 <_vfprintf_r+0x1664>
80005e5e:	50 a7       	stdsp	sp[0x28],r7
80005e60:	50 80       	stdsp	sp[0x20],r0
80005e62:	40 93       	lddsp	r3,sp[0x24]
80005e64:	0c 97       	mov	r7,r6
80005e66:	10 90       	mov	r0,r8
80005e68:	04 94       	mov	r4,r2
80005e6a:	40 41       	lddsp	r1,sp[0x10]
80005e6c:	58 08       	cp.w	r8,0
80005e6e:	e0 80 04 4f 	breq	8000670c <_vfprintf_r+0x1edc>
80005e72:	fb 68 06 60 	st.b	sp[1632],r8
80005e76:	30 0c       	mov	r12,0
80005e78:	30 08       	mov	r8,0
80005e7a:	30 12       	mov	r2,1
80005e7c:	fb 68 06 bb 	st.b	sp[1723],r8
80005e80:	50 2c       	stdsp	sp[0x8],r12
80005e82:	fa c6 f9 a0 	sub	r6,sp,-1632
80005e86:	c0 78       	rjmp	80005e94 <_vfprintf_r+0x1664>
80005e88:	30 0b       	mov	r11,0
80005e8a:	50 2b       	stdsp	sp[0x8],r11
80005e8c:	c0 48       	rjmp	80005e94 <_vfprintf_r+0x1664>
80005e8e:	40 22       	lddsp	r2,sp[0x8]
80005e90:	30 0a       	mov	r10,0
80005e92:	50 2a       	stdsp	sp[0x8],r10
80005e94:	40 29       	lddsp	r9,sp[0x8]
80005e96:	e4 09 0c 49 	max	r9,r2,r9
80005e9a:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005e9e:	50 39       	stdsp	sp[0xc],r9
80005ea0:	0a 9e       	mov	lr,r5
80005ea2:	30 09       	mov	r9,0
80005ea4:	e2 1e 00 02 	andl	lr,0x2,COH
80005ea8:	f2 08 18 00 	cp.b	r8,r9
80005eac:	fb f8 10 03 	ld.wne	r8,sp[0xc]
80005eb0:	f7 b8 01 ff 	subne	r8,-1
80005eb4:	fb f8 1a 03 	st.wne	sp[0xc],r8
80005eb8:	0a 9b       	mov	r11,r5
80005eba:	58 0e       	cp.w	lr,0
80005ebc:	fb fc 10 03 	ld.wne	r12,sp[0xc]
80005ec0:	f7 bc 01 fe 	subne	r12,-2
80005ec4:	fb fc 1a 03 	st.wne	sp[0xc],r12
80005ec8:	e2 1b 00 84 	andl	r11,0x84,COH
80005ecc:	50 fe       	stdsp	sp[0x3c],lr
80005ece:	50 9b       	stdsp	sp[0x24],r11
80005ed0:	c4 71       	brne	80005f5e <_vfprintf_r+0x172e>
80005ed2:	40 8a       	lddsp	r10,sp[0x20]
80005ed4:	40 39       	lddsp	r9,sp[0xc]
80005ed6:	12 1a       	sub	r10,r9
80005ed8:	50 4a       	stdsp	sp[0x10],r10
80005eda:	58 0a       	cp.w	r10,0
80005edc:	e0 89 00 20 	brgt	80005f1c <_vfprintf_r+0x16ec>
80005ee0:	c3 f8       	rjmp	80005f5e <_vfprintf_r+0x172e>
80005ee2:	2f 09       	sub	r9,-16
80005ee4:	2f f8       	sub	r8,-1
80005ee6:	fe ce be f2 	sub	lr,pc,-16654
80005eea:	31 0c       	mov	r12,16
80005eec:	fb 49 06 90 	st.w	sp[1680],r9
80005ef0:	87 0e       	st.w	r3[0x0],lr
80005ef2:	87 1c       	st.w	r3[0x4],r12
80005ef4:	fb 48 06 8c 	st.w	sp[1676],r8
80005ef8:	58 78       	cp.w	r8,7
80005efa:	e0 89 00 04 	brgt	80005f02 <_vfprintf_r+0x16d2>
80005efe:	2f 83       	sub	r3,-8
80005f00:	c0 b8       	rjmp	80005f16 <_vfprintf_r+0x16e6>
80005f02:	fa ca f9 78 	sub	r10,sp,-1672
80005f06:	02 9b       	mov	r11,r1
80005f08:	08 9c       	mov	r12,r4
80005f0a:	fe b0 f4 85 	rcall	80004814 <__sprint_r>
80005f0e:	e0 81 04 10 	brne	8000672e <_vfprintf_r+0x1efe>
80005f12:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f16:	40 4b       	lddsp	r11,sp[0x10]
80005f18:	21 0b       	sub	r11,16
80005f1a:	50 4b       	stdsp	sp[0x10],r11
80005f1c:	fa f9 06 90 	ld.w	r9,sp[1680]
80005f20:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f24:	fe ca bf 30 	sub	r10,pc,-16592
80005f28:	40 4e       	lddsp	lr,sp[0x10]
80005f2a:	59 0e       	cp.w	lr,16
80005f2c:	fe 99 ff db 	brgt	80005ee2 <_vfprintf_r+0x16b2>
80005f30:	1c 09       	add	r9,lr
80005f32:	2f f8       	sub	r8,-1
80005f34:	87 0a       	st.w	r3[0x0],r10
80005f36:	fb 49 06 90 	st.w	sp[1680],r9
80005f3a:	87 1e       	st.w	r3[0x4],lr
80005f3c:	fb 48 06 8c 	st.w	sp[1676],r8
80005f40:	58 78       	cp.w	r8,7
80005f42:	e0 89 00 04 	brgt	80005f4a <_vfprintf_r+0x171a>
80005f46:	2f 83       	sub	r3,-8
80005f48:	c0 b8       	rjmp	80005f5e <_vfprintf_r+0x172e>
80005f4a:	fa ca f9 78 	sub	r10,sp,-1672
80005f4e:	02 9b       	mov	r11,r1
80005f50:	08 9c       	mov	r12,r4
80005f52:	fe b0 f4 61 	rcall	80004814 <__sprint_r>
80005f56:	e0 81 03 ec 	brne	8000672e <_vfprintf_r+0x1efe>
80005f5a:	fa c3 f9 e0 	sub	r3,sp,-1568
80005f5e:	30 09       	mov	r9,0
80005f60:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80005f64:	f2 08 18 00 	cp.b	r8,r9
80005f68:	c1 f0       	breq	80005fa6 <_vfprintf_r+0x1776>
80005f6a:	fa f8 06 90 	ld.w	r8,sp[1680]
80005f6e:	fa c9 f9 45 	sub	r9,sp,-1723
80005f72:	2f f8       	sub	r8,-1
80005f74:	87 09       	st.w	r3[0x0],r9
80005f76:	fb 48 06 90 	st.w	sp[1680],r8
80005f7a:	30 19       	mov	r9,1
80005f7c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005f80:	87 19       	st.w	r3[0x4],r9
80005f82:	2f f8       	sub	r8,-1
80005f84:	fb 48 06 8c 	st.w	sp[1676],r8
80005f88:	58 78       	cp.w	r8,7
80005f8a:	e0 89 00 04 	brgt	80005f92 <_vfprintf_r+0x1762>
80005f8e:	2f 83       	sub	r3,-8
80005f90:	c0 b8       	rjmp	80005fa6 <_vfprintf_r+0x1776>
80005f92:	fa ca f9 78 	sub	r10,sp,-1672
80005f96:	02 9b       	mov	r11,r1
80005f98:	08 9c       	mov	r12,r4
80005f9a:	fe b0 f4 3d 	rcall	80004814 <__sprint_r>
80005f9e:	e0 81 03 c8 	brne	8000672e <_vfprintf_r+0x1efe>
80005fa2:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fa6:	40 fc       	lddsp	r12,sp[0x3c]
80005fa8:	58 0c       	cp.w	r12,0
80005faa:	c1 f0       	breq	80005fe8 <_vfprintf_r+0x17b8>
80005fac:	fa f8 06 90 	ld.w	r8,sp[1680]
80005fb0:	fa c9 f9 48 	sub	r9,sp,-1720
80005fb4:	2f e8       	sub	r8,-2
80005fb6:	87 09       	st.w	r3[0x0],r9
80005fb8:	fb 48 06 90 	st.w	sp[1680],r8
80005fbc:	30 29       	mov	r9,2
80005fbe:	fa f8 06 8c 	ld.w	r8,sp[1676]
80005fc2:	87 19       	st.w	r3[0x4],r9
80005fc4:	2f f8       	sub	r8,-1
80005fc6:	fb 48 06 8c 	st.w	sp[1676],r8
80005fca:	58 78       	cp.w	r8,7
80005fcc:	e0 89 00 04 	brgt	80005fd4 <_vfprintf_r+0x17a4>
80005fd0:	2f 83       	sub	r3,-8
80005fd2:	c0 b8       	rjmp	80005fe8 <_vfprintf_r+0x17b8>
80005fd4:	fa ca f9 78 	sub	r10,sp,-1672
80005fd8:	02 9b       	mov	r11,r1
80005fda:	08 9c       	mov	r12,r4
80005fdc:	fe b0 f4 1c 	rcall	80004814 <__sprint_r>
80005fe0:	e0 81 03 a7 	brne	8000672e <_vfprintf_r+0x1efe>
80005fe4:	fa c3 f9 e0 	sub	r3,sp,-1568
80005fe8:	40 9b       	lddsp	r11,sp[0x24]
80005fea:	e0 4b 00 80 	cp.w	r11,128
80005fee:	c4 71       	brne	8000607c <_vfprintf_r+0x184c>
80005ff0:	40 8a       	lddsp	r10,sp[0x20]
80005ff2:	40 39       	lddsp	r9,sp[0xc]
80005ff4:	12 1a       	sub	r10,r9
80005ff6:	50 4a       	stdsp	sp[0x10],r10
80005ff8:	58 0a       	cp.w	r10,0
80005ffa:	e0 89 00 20 	brgt	8000603a <_vfprintf_r+0x180a>
80005ffe:	c3 f8       	rjmp	8000607c <_vfprintf_r+0x184c>
80006000:	2f 09       	sub	r9,-16
80006002:	2f f8       	sub	r8,-1
80006004:	fe ce c0 00 	sub	lr,pc,-16384
80006008:	31 0c       	mov	r12,16
8000600a:	fb 49 06 90 	st.w	sp[1680],r9
8000600e:	87 0e       	st.w	r3[0x0],lr
80006010:	87 1c       	st.w	r3[0x4],r12
80006012:	fb 48 06 8c 	st.w	sp[1676],r8
80006016:	58 78       	cp.w	r8,7
80006018:	e0 89 00 04 	brgt	80006020 <_vfprintf_r+0x17f0>
8000601c:	2f 83       	sub	r3,-8
8000601e:	c0 b8       	rjmp	80006034 <_vfprintf_r+0x1804>
80006020:	fa ca f9 78 	sub	r10,sp,-1672
80006024:	02 9b       	mov	r11,r1
80006026:	08 9c       	mov	r12,r4
80006028:	fe b0 f3 f6 	rcall	80004814 <__sprint_r>
8000602c:	e0 81 03 81 	brne	8000672e <_vfprintf_r+0x1efe>
80006030:	fa c3 f9 e0 	sub	r3,sp,-1568
80006034:	40 4b       	lddsp	r11,sp[0x10]
80006036:	21 0b       	sub	r11,16
80006038:	50 4b       	stdsp	sp[0x10],r11
8000603a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000603e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006042:	fe ca c0 3e 	sub	r10,pc,-16322
80006046:	40 4e       	lddsp	lr,sp[0x10]
80006048:	59 0e       	cp.w	lr,16
8000604a:	fe 99 ff db 	brgt	80006000 <_vfprintf_r+0x17d0>
8000604e:	1c 09       	add	r9,lr
80006050:	2f f8       	sub	r8,-1
80006052:	87 0a       	st.w	r3[0x0],r10
80006054:	fb 49 06 90 	st.w	sp[1680],r9
80006058:	87 1e       	st.w	r3[0x4],lr
8000605a:	fb 48 06 8c 	st.w	sp[1676],r8
8000605e:	58 78       	cp.w	r8,7
80006060:	e0 89 00 04 	brgt	80006068 <_vfprintf_r+0x1838>
80006064:	2f 83       	sub	r3,-8
80006066:	c0 b8       	rjmp	8000607c <_vfprintf_r+0x184c>
80006068:	fa ca f9 78 	sub	r10,sp,-1672
8000606c:	02 9b       	mov	r11,r1
8000606e:	08 9c       	mov	r12,r4
80006070:	fe b0 f3 d2 	rcall	80004814 <__sprint_r>
80006074:	e0 81 03 5d 	brne	8000672e <_vfprintf_r+0x1efe>
80006078:	fa c3 f9 e0 	sub	r3,sp,-1568
8000607c:	40 2c       	lddsp	r12,sp[0x8]
8000607e:	04 1c       	sub	r12,r2
80006080:	50 2c       	stdsp	sp[0x8],r12
80006082:	58 0c       	cp.w	r12,0
80006084:	e0 89 00 20 	brgt	800060c4 <_vfprintf_r+0x1894>
80006088:	c3 f8       	rjmp	80006106 <_vfprintf_r+0x18d6>
8000608a:	2f 09       	sub	r9,-16
8000608c:	2f f8       	sub	r8,-1
8000608e:	fe cb c0 8a 	sub	r11,pc,-16246
80006092:	31 0a       	mov	r10,16
80006094:	fb 49 06 90 	st.w	sp[1680],r9
80006098:	87 0b       	st.w	r3[0x0],r11
8000609a:	87 1a       	st.w	r3[0x4],r10
8000609c:	fb 48 06 8c 	st.w	sp[1676],r8
800060a0:	58 78       	cp.w	r8,7
800060a2:	e0 89 00 04 	brgt	800060aa <_vfprintf_r+0x187a>
800060a6:	2f 83       	sub	r3,-8
800060a8:	c0 b8       	rjmp	800060be <_vfprintf_r+0x188e>
800060aa:	fa ca f9 78 	sub	r10,sp,-1672
800060ae:	02 9b       	mov	r11,r1
800060b0:	08 9c       	mov	r12,r4
800060b2:	fe b0 f3 b1 	rcall	80004814 <__sprint_r>
800060b6:	e0 81 03 3c 	brne	8000672e <_vfprintf_r+0x1efe>
800060ba:	fa c3 f9 e0 	sub	r3,sp,-1568
800060be:	40 29       	lddsp	r9,sp[0x8]
800060c0:	21 09       	sub	r9,16
800060c2:	50 29       	stdsp	sp[0x8],r9
800060c4:	fa f9 06 90 	ld.w	r9,sp[1680]
800060c8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800060cc:	fe ca c0 c8 	sub	r10,pc,-16184
800060d0:	40 2e       	lddsp	lr,sp[0x8]
800060d2:	59 0e       	cp.w	lr,16
800060d4:	fe 99 ff db 	brgt	8000608a <_vfprintf_r+0x185a>
800060d8:	1c 09       	add	r9,lr
800060da:	2f f8       	sub	r8,-1
800060dc:	87 0a       	st.w	r3[0x0],r10
800060de:	fb 49 06 90 	st.w	sp[1680],r9
800060e2:	87 1e       	st.w	r3[0x4],lr
800060e4:	fb 48 06 8c 	st.w	sp[1676],r8
800060e8:	58 78       	cp.w	r8,7
800060ea:	e0 89 00 04 	brgt	800060f2 <_vfprintf_r+0x18c2>
800060ee:	2f 83       	sub	r3,-8
800060f0:	c0 b8       	rjmp	80006106 <_vfprintf_r+0x18d6>
800060f2:	fa ca f9 78 	sub	r10,sp,-1672
800060f6:	02 9b       	mov	r11,r1
800060f8:	08 9c       	mov	r12,r4
800060fa:	fe b0 f3 8d 	rcall	80004814 <__sprint_r>
800060fe:	e0 81 03 18 	brne	8000672e <_vfprintf_r+0x1efe>
80006102:	fa c3 f9 e0 	sub	r3,sp,-1568
80006106:	ed b5 00 08 	bld	r5,0x8
8000610a:	c0 b0       	breq	80006120 <_vfprintf_r+0x18f0>
8000610c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006110:	87 12       	st.w	r3[0x4],r2
80006112:	87 06       	st.w	r3[0x0],r6
80006114:	f0 02 00 02 	add	r2,r8,r2
80006118:	fb 42 06 90 	st.w	sp[1680],r2
8000611c:	e0 8f 01 d4 	bral	800064c4 <_vfprintf_r+0x1c94>
80006120:	e0 40 00 65 	cp.w	r0,101
80006124:	e0 8a 01 d6 	brle	800064d0 <_vfprintf_r+0x1ca0>
80006128:	30 08       	mov	r8,0
8000612a:	30 09       	mov	r9,0
8000612c:	40 5b       	lddsp	r11,sp[0x14]
8000612e:	40 7a       	lddsp	r10,sp[0x1c]
80006130:	e0 a0 19 53 	rcall	800093d6 <__avr32_f64_cmp_eq>
80006134:	c7 90       	breq	80006226 <_vfprintf_r+0x19f6>
80006136:	fa f8 06 90 	ld.w	r8,sp[1680]
8000613a:	fe c9 c1 4a 	sub	r9,pc,-16054
8000613e:	2f f8       	sub	r8,-1
80006140:	87 09       	st.w	r3[0x0],r9
80006142:	fb 48 06 90 	st.w	sp[1680],r8
80006146:	30 19       	mov	r9,1
80006148:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000614c:	87 19       	st.w	r3[0x4],r9
8000614e:	2f f8       	sub	r8,-1
80006150:	fb 48 06 8c 	st.w	sp[1676],r8
80006154:	58 78       	cp.w	r8,7
80006156:	e0 89 00 05 	brgt	80006160 <_vfprintf_r+0x1930>
8000615a:	2f 83       	sub	r3,-8
8000615c:	c0 c8       	rjmp	80006174 <_vfprintf_r+0x1944>
8000615e:	d7 03       	nop
80006160:	fa ca f9 78 	sub	r10,sp,-1672
80006164:	02 9b       	mov	r11,r1
80006166:	08 9c       	mov	r12,r4
80006168:	fe b0 f3 56 	rcall	80004814 <__sprint_r>
8000616c:	e0 81 02 e1 	brne	8000672e <_vfprintf_r+0x1efe>
80006170:	fa c3 f9 e0 	sub	r3,sp,-1568
80006174:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006178:	40 6c       	lddsp	r12,sp[0x18]
8000617a:	18 38       	cp.w	r8,r12
8000617c:	c0 55       	brlt	80006186 <_vfprintf_r+0x1956>
8000617e:	ed b5 00 00 	bld	r5,0x0
80006182:	e0 81 02 6b 	brne	80006658 <_vfprintf_r+0x1e28>
80006186:	fa f8 06 90 	ld.w	r8,sp[1680]
8000618a:	2f f8       	sub	r8,-1
8000618c:	40 cb       	lddsp	r11,sp[0x30]
8000618e:	fb 48 06 90 	st.w	sp[1680],r8
80006192:	30 19       	mov	r9,1
80006194:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006198:	87 0b       	st.w	r3[0x0],r11
8000619a:	2f f8       	sub	r8,-1
8000619c:	87 19       	st.w	r3[0x4],r9
8000619e:	fb 48 06 8c 	st.w	sp[1676],r8
800061a2:	58 78       	cp.w	r8,7
800061a4:	e0 89 00 04 	brgt	800061ac <_vfprintf_r+0x197c>
800061a8:	2f 83       	sub	r3,-8
800061aa:	c0 b8       	rjmp	800061c0 <_vfprintf_r+0x1990>
800061ac:	fa ca f9 78 	sub	r10,sp,-1672
800061b0:	02 9b       	mov	r11,r1
800061b2:	08 9c       	mov	r12,r4
800061b4:	fe b0 f3 30 	rcall	80004814 <__sprint_r>
800061b8:	e0 81 02 bb 	brne	8000672e <_vfprintf_r+0x1efe>
800061bc:	fa c3 f9 e0 	sub	r3,sp,-1568
800061c0:	40 66       	lddsp	r6,sp[0x18]
800061c2:	20 16       	sub	r6,1
800061c4:	58 06       	cp.w	r6,0
800061c6:	e0 89 00 1d 	brgt	80006200 <_vfprintf_r+0x19d0>
800061ca:	e0 8f 02 47 	bral	80006658 <_vfprintf_r+0x1e28>
800061ce:	2f 09       	sub	r9,-16
800061d0:	2f f8       	sub	r8,-1
800061d2:	fb 49 06 90 	st.w	sp[1680],r9
800061d6:	87 02       	st.w	r3[0x0],r2
800061d8:	87 10       	st.w	r3[0x4],r0
800061da:	fb 48 06 8c 	st.w	sp[1676],r8
800061de:	58 78       	cp.w	r8,7
800061e0:	e0 89 00 04 	brgt	800061e8 <_vfprintf_r+0x19b8>
800061e4:	2f 83       	sub	r3,-8
800061e6:	c0 b8       	rjmp	800061fc <_vfprintf_r+0x19cc>
800061e8:	fa ca f9 78 	sub	r10,sp,-1672
800061ec:	02 9b       	mov	r11,r1
800061ee:	08 9c       	mov	r12,r4
800061f0:	fe b0 f3 12 	rcall	80004814 <__sprint_r>
800061f4:	e0 81 02 9d 	brne	8000672e <_vfprintf_r+0x1efe>
800061f8:	fa c3 f9 e0 	sub	r3,sp,-1568
800061fc:	21 06       	sub	r6,16
800061fe:	c0 48       	rjmp	80006206 <_vfprintf_r+0x19d6>
80006200:	fe c2 c1 fc 	sub	r2,pc,-15876
80006204:	31 00       	mov	r0,16
80006206:	fa f9 06 90 	ld.w	r9,sp[1680]
8000620a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000620e:	fe ca c2 0a 	sub	r10,pc,-15862
80006212:	59 06       	cp.w	r6,16
80006214:	fe 99 ff dd 	brgt	800061ce <_vfprintf_r+0x199e>
80006218:	0c 09       	add	r9,r6
8000621a:	87 0a       	st.w	r3[0x0],r10
8000621c:	fb 49 06 90 	st.w	sp[1680],r9
80006220:	2f f8       	sub	r8,-1
80006222:	87 16       	st.w	r3[0x4],r6
80006224:	c5 39       	rjmp	800064ca <_vfprintf_r+0x1c9a>
80006226:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000622a:	58 0a       	cp.w	r10,0
8000622c:	e0 89 00 92 	brgt	80006350 <_vfprintf_r+0x1b20>
80006230:	fa f8 06 90 	ld.w	r8,sp[1680]
80006234:	fe c9 c2 44 	sub	r9,pc,-15804
80006238:	2f f8       	sub	r8,-1
8000623a:	87 09       	st.w	r3[0x0],r9
8000623c:	fb 48 06 90 	st.w	sp[1680],r8
80006240:	30 19       	mov	r9,1
80006242:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006246:	87 19       	st.w	r3[0x4],r9
80006248:	2f f8       	sub	r8,-1
8000624a:	fb 48 06 8c 	st.w	sp[1676],r8
8000624e:	58 78       	cp.w	r8,7
80006250:	e0 89 00 04 	brgt	80006258 <_vfprintf_r+0x1a28>
80006254:	2f 83       	sub	r3,-8
80006256:	c0 b8       	rjmp	8000626c <_vfprintf_r+0x1a3c>
80006258:	fa ca f9 78 	sub	r10,sp,-1672
8000625c:	02 9b       	mov	r11,r1
8000625e:	08 9c       	mov	r12,r4
80006260:	fe b0 f2 da 	rcall	80004814 <__sprint_r>
80006264:	e0 81 02 65 	brne	8000672e <_vfprintf_r+0x1efe>
80006268:	fa c3 f9 e0 	sub	r3,sp,-1568
8000626c:	fa f8 06 ac 	ld.w	r8,sp[1708]
80006270:	58 08       	cp.w	r8,0
80006272:	c0 81       	brne	80006282 <_vfprintf_r+0x1a52>
80006274:	40 6a       	lddsp	r10,sp[0x18]
80006276:	58 0a       	cp.w	r10,0
80006278:	c0 51       	brne	80006282 <_vfprintf_r+0x1a52>
8000627a:	ed b5 00 00 	bld	r5,0x0
8000627e:	e0 81 01 ed 	brne	80006658 <_vfprintf_r+0x1e28>
80006282:	40 c9       	lddsp	r9,sp[0x30]
80006284:	fa f8 06 90 	ld.w	r8,sp[1680]
80006288:	2f f8       	sub	r8,-1
8000628a:	87 09       	st.w	r3[0x0],r9
8000628c:	fb 48 06 90 	st.w	sp[1680],r8
80006290:	30 19       	mov	r9,1
80006292:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006296:	87 19       	st.w	r3[0x4],r9
80006298:	2f f8       	sub	r8,-1
8000629a:	fb 48 06 8c 	st.w	sp[1676],r8
8000629e:	58 78       	cp.w	r8,7
800062a0:	e0 89 00 04 	brgt	800062a8 <_vfprintf_r+0x1a78>
800062a4:	2f 83       	sub	r3,-8
800062a6:	c0 b8       	rjmp	800062bc <_vfprintf_r+0x1a8c>
800062a8:	fa ca f9 78 	sub	r10,sp,-1672
800062ac:	02 9b       	mov	r11,r1
800062ae:	08 9c       	mov	r12,r4
800062b0:	fe b0 f2 b2 	rcall	80004814 <__sprint_r>
800062b4:	e0 81 02 3d 	brne	8000672e <_vfprintf_r+0x1efe>
800062b8:	fa c3 f9 e0 	sub	r3,sp,-1568
800062bc:	fa f2 06 ac 	ld.w	r2,sp[1708]
800062c0:	5c 32       	neg	r2
800062c2:	58 02       	cp.w	r2,0
800062c4:	e0 89 00 1d 	brgt	800062fe <_vfprintf_r+0x1ace>
800062c8:	c3 d8       	rjmp	80006342 <_vfprintf_r+0x1b12>
800062ca:	2f 09       	sub	r9,-16
800062cc:	2f f8       	sub	r8,-1
800062ce:	31 0e       	mov	lr,16
800062d0:	fb 49 06 90 	st.w	sp[1680],r9
800062d4:	87 00       	st.w	r3[0x0],r0
800062d6:	87 1e       	st.w	r3[0x4],lr
800062d8:	fb 48 06 8c 	st.w	sp[1676],r8
800062dc:	58 78       	cp.w	r8,7
800062de:	e0 89 00 04 	brgt	800062e6 <_vfprintf_r+0x1ab6>
800062e2:	2f 83       	sub	r3,-8
800062e4:	c0 b8       	rjmp	800062fa <_vfprintf_r+0x1aca>
800062e6:	fa ca f9 78 	sub	r10,sp,-1672
800062ea:	02 9b       	mov	r11,r1
800062ec:	08 9c       	mov	r12,r4
800062ee:	fe b0 f2 93 	rcall	80004814 <__sprint_r>
800062f2:	e0 81 02 1e 	brne	8000672e <_vfprintf_r+0x1efe>
800062f6:	fa c3 f9 e0 	sub	r3,sp,-1568
800062fa:	21 02       	sub	r2,16
800062fc:	c0 38       	rjmp	80006302 <_vfprintf_r+0x1ad2>
800062fe:	fe c0 c2 fa 	sub	r0,pc,-15622
80006302:	fa f9 06 90 	ld.w	r9,sp[1680]
80006306:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000630a:	fe ca c3 06 	sub	r10,pc,-15610
8000630e:	59 02       	cp.w	r2,16
80006310:	fe 99 ff dd 	brgt	800062ca <_vfprintf_r+0x1a9a>
80006314:	04 09       	add	r9,r2
80006316:	2f f8       	sub	r8,-1
80006318:	87 0a       	st.w	r3[0x0],r10
8000631a:	fb 49 06 90 	st.w	sp[1680],r9
8000631e:	87 12       	st.w	r3[0x4],r2
80006320:	fb 48 06 8c 	st.w	sp[1676],r8
80006324:	58 78       	cp.w	r8,7
80006326:	e0 89 00 04 	brgt	8000632e <_vfprintf_r+0x1afe>
8000632a:	2f 83       	sub	r3,-8
8000632c:	c0 b8       	rjmp	80006342 <_vfprintf_r+0x1b12>
8000632e:	fa ca f9 78 	sub	r10,sp,-1672
80006332:	02 9b       	mov	r11,r1
80006334:	08 9c       	mov	r12,r4
80006336:	fe b0 f2 6f 	rcall	80004814 <__sprint_r>
8000633a:	e0 81 01 fa 	brne	8000672e <_vfprintf_r+0x1efe>
8000633e:	fa c3 f9 e0 	sub	r3,sp,-1568
80006342:	40 6c       	lddsp	r12,sp[0x18]
80006344:	fa f8 06 90 	ld.w	r8,sp[1680]
80006348:	87 06       	st.w	r3[0x0],r6
8000634a:	87 1c       	st.w	r3[0x4],r12
8000634c:	18 08       	add	r8,r12
8000634e:	cb 98       	rjmp	800064c0 <_vfprintf_r+0x1c90>
80006350:	fa f9 06 90 	ld.w	r9,sp[1680]
80006354:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006358:	40 6b       	lddsp	r11,sp[0x18]
8000635a:	16 3a       	cp.w	r10,r11
8000635c:	c6 f5       	brlt	8000643a <_vfprintf_r+0x1c0a>
8000635e:	16 09       	add	r9,r11
80006360:	2f f8       	sub	r8,-1
80006362:	87 06       	st.w	r3[0x0],r6
80006364:	fb 49 06 90 	st.w	sp[1680],r9
80006368:	87 1b       	st.w	r3[0x4],r11
8000636a:	fb 48 06 8c 	st.w	sp[1676],r8
8000636e:	58 78       	cp.w	r8,7
80006370:	e0 89 00 04 	brgt	80006378 <_vfprintf_r+0x1b48>
80006374:	2f 83       	sub	r3,-8
80006376:	c0 b8       	rjmp	8000638c <_vfprintf_r+0x1b5c>
80006378:	fa ca f9 78 	sub	r10,sp,-1672
8000637c:	02 9b       	mov	r11,r1
8000637e:	08 9c       	mov	r12,r4
80006380:	fe b0 f2 4a 	rcall	80004814 <__sprint_r>
80006384:	e0 81 01 d5 	brne	8000672e <_vfprintf_r+0x1efe>
80006388:	fa c3 f9 e0 	sub	r3,sp,-1568
8000638c:	fa f6 06 ac 	ld.w	r6,sp[1708]
80006390:	40 6a       	lddsp	r10,sp[0x18]
80006392:	14 16       	sub	r6,r10
80006394:	58 06       	cp.w	r6,0
80006396:	e0 89 00 1c 	brgt	800063ce <_vfprintf_r+0x1b9e>
8000639a:	c3 d8       	rjmp	80006414 <_vfprintf_r+0x1be4>
8000639c:	2f 09       	sub	r9,-16
8000639e:	2f f8       	sub	r8,-1
800063a0:	fb 49 06 90 	st.w	sp[1680],r9
800063a4:	87 02       	st.w	r3[0x0],r2
800063a6:	87 10       	st.w	r3[0x4],r0
800063a8:	fb 48 06 8c 	st.w	sp[1676],r8
800063ac:	58 78       	cp.w	r8,7
800063ae:	e0 89 00 04 	brgt	800063b6 <_vfprintf_r+0x1b86>
800063b2:	2f 83       	sub	r3,-8
800063b4:	c0 b8       	rjmp	800063ca <_vfprintf_r+0x1b9a>
800063b6:	fa ca f9 78 	sub	r10,sp,-1672
800063ba:	02 9b       	mov	r11,r1
800063bc:	08 9c       	mov	r12,r4
800063be:	fe b0 f2 2b 	rcall	80004814 <__sprint_r>
800063c2:	e0 81 01 b6 	brne	8000672e <_vfprintf_r+0x1efe>
800063c6:	fa c3 f9 e0 	sub	r3,sp,-1568
800063ca:	21 06       	sub	r6,16
800063cc:	c0 48       	rjmp	800063d4 <_vfprintf_r+0x1ba4>
800063ce:	fe c2 c3 ca 	sub	r2,pc,-15414
800063d2:	31 00       	mov	r0,16
800063d4:	fa f9 06 90 	ld.w	r9,sp[1680]
800063d8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800063dc:	fe ca c3 d8 	sub	r10,pc,-15400
800063e0:	59 06       	cp.w	r6,16
800063e2:	fe 99 ff dd 	brgt	8000639c <_vfprintf_r+0x1b6c>
800063e6:	0c 09       	add	r9,r6
800063e8:	2f f8       	sub	r8,-1
800063ea:	87 0a       	st.w	r3[0x0],r10
800063ec:	fb 49 06 90 	st.w	sp[1680],r9
800063f0:	87 16       	st.w	r3[0x4],r6
800063f2:	fb 48 06 8c 	st.w	sp[1676],r8
800063f6:	58 78       	cp.w	r8,7
800063f8:	e0 89 00 04 	brgt	80006400 <_vfprintf_r+0x1bd0>
800063fc:	2f 83       	sub	r3,-8
800063fe:	c0 b8       	rjmp	80006414 <_vfprintf_r+0x1be4>
80006400:	fa ca f9 78 	sub	r10,sp,-1672
80006404:	02 9b       	mov	r11,r1
80006406:	08 9c       	mov	r12,r4
80006408:	fe b0 f2 06 	rcall	80004814 <__sprint_r>
8000640c:	e0 81 01 91 	brne	8000672e <_vfprintf_r+0x1efe>
80006410:	fa c3 f9 e0 	sub	r3,sp,-1568
80006414:	ed b5 00 00 	bld	r5,0x0
80006418:	e0 81 01 20 	brne	80006658 <_vfprintf_r+0x1e28>
8000641c:	40 c9       	lddsp	r9,sp[0x30]
8000641e:	fa f8 06 90 	ld.w	r8,sp[1680]
80006422:	2f f8       	sub	r8,-1
80006424:	87 09       	st.w	r3[0x0],r9
80006426:	fb 48 06 90 	st.w	sp[1680],r8
8000642a:	30 19       	mov	r9,1
8000642c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006430:	87 19       	st.w	r3[0x4],r9
80006432:	2f f8       	sub	r8,-1
80006434:	fb 48 06 8c 	st.w	sp[1676],r8
80006438:	c0 29       	rjmp	8000663c <_vfprintf_r+0x1e0c>
8000643a:	14 09       	add	r9,r10
8000643c:	2f f8       	sub	r8,-1
8000643e:	fb 49 06 90 	st.w	sp[1680],r9
80006442:	87 06       	st.w	r3[0x0],r6
80006444:	87 1a       	st.w	r3[0x4],r10
80006446:	fb 48 06 8c 	st.w	sp[1676],r8
8000644a:	58 78       	cp.w	r8,7
8000644c:	e0 89 00 04 	brgt	80006454 <_vfprintf_r+0x1c24>
80006450:	2f 83       	sub	r3,-8
80006452:	c0 b8       	rjmp	80006468 <_vfprintf_r+0x1c38>
80006454:	fa ca f9 78 	sub	r10,sp,-1672
80006458:	02 9b       	mov	r11,r1
8000645a:	08 9c       	mov	r12,r4
8000645c:	fe b0 f1 dc 	rcall	80004814 <__sprint_r>
80006460:	e0 81 01 67 	brne	8000672e <_vfprintf_r+0x1efe>
80006464:	fa c3 f9 e0 	sub	r3,sp,-1568
80006468:	40 c8       	lddsp	r8,sp[0x30]
8000646a:	87 08       	st.w	r3[0x0],r8
8000646c:	fa f8 06 90 	ld.w	r8,sp[1680]
80006470:	2f f8       	sub	r8,-1
80006472:	30 19       	mov	r9,1
80006474:	fb 48 06 90 	st.w	sp[1680],r8
80006478:	87 19       	st.w	r3[0x4],r9
8000647a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000647e:	2f f8       	sub	r8,-1
80006480:	fb 48 06 8c 	st.w	sp[1676],r8
80006484:	fa f2 06 ac 	ld.w	r2,sp[1708]
80006488:	58 78       	cp.w	r8,7
8000648a:	e0 89 00 04 	brgt	80006492 <_vfprintf_r+0x1c62>
8000648e:	2f 83       	sub	r3,-8
80006490:	c0 b8       	rjmp	800064a6 <_vfprintf_r+0x1c76>
80006492:	fa ca f9 78 	sub	r10,sp,-1672
80006496:	02 9b       	mov	r11,r1
80006498:	08 9c       	mov	r12,r4
8000649a:	fe b0 f1 bd 	rcall	80004814 <__sprint_r>
8000649e:	e0 81 01 48 	brne	8000672e <_vfprintf_r+0x1efe>
800064a2:	fa c3 f9 e0 	sub	r3,sp,-1568
800064a6:	04 06       	add	r6,r2
800064a8:	fa f8 06 ac 	ld.w	r8,sp[1708]
800064ac:	87 06       	st.w	r3[0x0],r6
800064ae:	fa f9 06 90 	ld.w	r9,sp[1680]
800064b2:	40 66       	lddsp	r6,sp[0x18]
800064b4:	40 6e       	lddsp	lr,sp[0x18]
800064b6:	10 16       	sub	r6,r8
800064b8:	f2 08 01 08 	sub	r8,r9,r8
800064bc:	87 16       	st.w	r3[0x4],r6
800064be:	1c 08       	add	r8,lr
800064c0:	fb 48 06 90 	st.w	sp[1680],r8
800064c4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800064c8:	2f f8       	sub	r8,-1
800064ca:	fb 48 06 8c 	st.w	sp[1676],r8
800064ce:	cb 78       	rjmp	8000663c <_vfprintf_r+0x1e0c>
800064d0:	40 6c       	lddsp	r12,sp[0x18]
800064d2:	58 1c       	cp.w	r12,1
800064d4:	e0 89 00 06 	brgt	800064e0 <_vfprintf_r+0x1cb0>
800064d8:	ed b5 00 00 	bld	r5,0x0
800064dc:	e0 81 00 85 	brne	800065e6 <_vfprintf_r+0x1db6>
800064e0:	fa f8 06 90 	ld.w	r8,sp[1680]
800064e4:	2f f8       	sub	r8,-1
800064e6:	30 19       	mov	r9,1
800064e8:	fb 48 06 90 	st.w	sp[1680],r8
800064ec:	87 06       	st.w	r3[0x0],r6
800064ee:	fa f8 06 8c 	ld.w	r8,sp[1676]
800064f2:	87 19       	st.w	r3[0x4],r9
800064f4:	2f f8       	sub	r8,-1
800064f6:	fb 48 06 8c 	st.w	sp[1676],r8
800064fa:	58 78       	cp.w	r8,7
800064fc:	e0 89 00 04 	brgt	80006504 <_vfprintf_r+0x1cd4>
80006500:	2f 83       	sub	r3,-8
80006502:	c0 b8       	rjmp	80006518 <_vfprintf_r+0x1ce8>
80006504:	fa ca f9 78 	sub	r10,sp,-1672
80006508:	02 9b       	mov	r11,r1
8000650a:	08 9c       	mov	r12,r4
8000650c:	fe b0 f1 84 	rcall	80004814 <__sprint_r>
80006510:	e0 81 01 0f 	brne	8000672e <_vfprintf_r+0x1efe>
80006514:	fa c3 f9 e0 	sub	r3,sp,-1568
80006518:	fa f8 06 90 	ld.w	r8,sp[1680]
8000651c:	2f f8       	sub	r8,-1
8000651e:	40 cb       	lddsp	r11,sp[0x30]
80006520:	fb 48 06 90 	st.w	sp[1680],r8
80006524:	30 19       	mov	r9,1
80006526:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000652a:	87 0b       	st.w	r3[0x0],r11
8000652c:	2f f8       	sub	r8,-1
8000652e:	87 19       	st.w	r3[0x4],r9
80006530:	fb 48 06 8c 	st.w	sp[1676],r8
80006534:	58 78       	cp.w	r8,7
80006536:	e0 89 00 05 	brgt	80006540 <_vfprintf_r+0x1d10>
8000653a:	2f 83       	sub	r3,-8
8000653c:	c0 c8       	rjmp	80006554 <_vfprintf_r+0x1d24>
8000653e:	d7 03       	nop
80006540:	fa ca f9 78 	sub	r10,sp,-1672
80006544:	02 9b       	mov	r11,r1
80006546:	08 9c       	mov	r12,r4
80006548:	fe b0 f1 66 	rcall	80004814 <__sprint_r>
8000654c:	e0 81 00 f1 	brne	8000672e <_vfprintf_r+0x1efe>
80006550:	fa c3 f9 e0 	sub	r3,sp,-1568
80006554:	30 08       	mov	r8,0
80006556:	30 09       	mov	r9,0
80006558:	40 5b       	lddsp	r11,sp[0x14]
8000655a:	40 7a       	lddsp	r10,sp[0x1c]
8000655c:	e0 a0 17 3d 	rcall	800093d6 <__avr32_f64_cmp_eq>
80006560:	40 68       	lddsp	r8,sp[0x18]
80006562:	20 18       	sub	r8,1
80006564:	58 0c       	cp.w	r12,0
80006566:	c0 d1       	brne	80006580 <_vfprintf_r+0x1d50>
80006568:	2f f6       	sub	r6,-1
8000656a:	87 18       	st.w	r3[0x4],r8
8000656c:	87 06       	st.w	r3[0x0],r6
8000656e:	fa f6 06 90 	ld.w	r6,sp[1680]
80006572:	10 06       	add	r6,r8
80006574:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006578:	fb 46 06 90 	st.w	sp[1680],r6
8000657c:	2f f8       	sub	r8,-1
8000657e:	c3 18       	rjmp	800065e0 <_vfprintf_r+0x1db0>
80006580:	10 96       	mov	r6,r8
80006582:	58 08       	cp.w	r8,0
80006584:	e0 89 00 1c 	brgt	800065bc <_vfprintf_r+0x1d8c>
80006588:	c4 b8       	rjmp	8000661e <_vfprintf_r+0x1dee>
8000658a:	2f 09       	sub	r9,-16
8000658c:	2f f8       	sub	r8,-1
8000658e:	fb 49 06 90 	st.w	sp[1680],r9
80006592:	87 02       	st.w	r3[0x0],r2
80006594:	87 10       	st.w	r3[0x4],r0
80006596:	fb 48 06 8c 	st.w	sp[1676],r8
8000659a:	58 78       	cp.w	r8,7
8000659c:	e0 89 00 04 	brgt	800065a4 <_vfprintf_r+0x1d74>
800065a0:	2f 83       	sub	r3,-8
800065a2:	c0 b8       	rjmp	800065b8 <_vfprintf_r+0x1d88>
800065a4:	fa ca f9 78 	sub	r10,sp,-1672
800065a8:	02 9b       	mov	r11,r1
800065aa:	08 9c       	mov	r12,r4
800065ac:	fe b0 f1 34 	rcall	80004814 <__sprint_r>
800065b0:	e0 81 00 bf 	brne	8000672e <_vfprintf_r+0x1efe>
800065b4:	fa c3 f9 e0 	sub	r3,sp,-1568
800065b8:	21 06       	sub	r6,16
800065ba:	c0 48       	rjmp	800065c2 <_vfprintf_r+0x1d92>
800065bc:	fe c2 c5 b8 	sub	r2,pc,-14920
800065c0:	31 00       	mov	r0,16
800065c2:	fa f9 06 90 	ld.w	r9,sp[1680]
800065c6:	fa f8 06 8c 	ld.w	r8,sp[1676]
800065ca:	fe ca c5 c6 	sub	r10,pc,-14906
800065ce:	59 06       	cp.w	r6,16
800065d0:	fe 99 ff dd 	brgt	8000658a <_vfprintf_r+0x1d5a>
800065d4:	0c 09       	add	r9,r6
800065d6:	87 0a       	st.w	r3[0x0],r10
800065d8:	fb 49 06 90 	st.w	sp[1680],r9
800065dc:	2f f8       	sub	r8,-1
800065de:	87 16       	st.w	r3[0x4],r6
800065e0:	fb 48 06 8c 	st.w	sp[1676],r8
800065e4:	c0 e8       	rjmp	80006600 <_vfprintf_r+0x1dd0>
800065e6:	fa f8 06 90 	ld.w	r8,sp[1680]
800065ea:	2f f8       	sub	r8,-1
800065ec:	30 19       	mov	r9,1
800065ee:	fb 48 06 90 	st.w	sp[1680],r8
800065f2:	87 06       	st.w	r3[0x0],r6
800065f4:	fa f8 06 8c 	ld.w	r8,sp[1676]
800065f8:	87 19       	st.w	r3[0x4],r9
800065fa:	2f f8       	sub	r8,-1
800065fc:	fb 48 06 8c 	st.w	sp[1676],r8
80006600:	58 78       	cp.w	r8,7
80006602:	e0 89 00 04 	brgt	8000660a <_vfprintf_r+0x1dda>
80006606:	2f 83       	sub	r3,-8
80006608:	c0 b8       	rjmp	8000661e <_vfprintf_r+0x1dee>
8000660a:	fa ca f9 78 	sub	r10,sp,-1672
8000660e:	02 9b       	mov	r11,r1
80006610:	08 9c       	mov	r12,r4
80006612:	fe b0 f1 01 	rcall	80004814 <__sprint_r>
80006616:	e0 81 00 8c 	brne	8000672e <_vfprintf_r+0x1efe>
8000661a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000661e:	40 ea       	lddsp	r10,sp[0x38]
80006620:	fa f8 06 90 	ld.w	r8,sp[1680]
80006624:	14 08       	add	r8,r10
80006626:	fa c9 f9 64 	sub	r9,sp,-1692
8000662a:	fb 48 06 90 	st.w	sp[1680],r8
8000662e:	87 1a       	st.w	r3[0x4],r10
80006630:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006634:	87 09       	st.w	r3[0x0],r9
80006636:	2f f8       	sub	r8,-1
80006638:	fb 48 06 8c 	st.w	sp[1676],r8
8000663c:	58 78       	cp.w	r8,7
8000663e:	e0 89 00 04 	brgt	80006646 <_vfprintf_r+0x1e16>
80006642:	2f 83       	sub	r3,-8
80006644:	c0 a8       	rjmp	80006658 <_vfprintf_r+0x1e28>
80006646:	fa ca f9 78 	sub	r10,sp,-1672
8000664a:	02 9b       	mov	r11,r1
8000664c:	08 9c       	mov	r12,r4
8000664e:	fe b0 f0 e3 	rcall	80004814 <__sprint_r>
80006652:	c6 e1       	brne	8000672e <_vfprintf_r+0x1efe>
80006654:	fa c3 f9 e0 	sub	r3,sp,-1568
80006658:	e2 15 00 04 	andl	r5,0x4,COH
8000665c:	c3 f0       	breq	800066da <_vfprintf_r+0x1eaa>
8000665e:	40 86       	lddsp	r6,sp[0x20]
80006660:	40 39       	lddsp	r9,sp[0xc]
80006662:	12 16       	sub	r6,r9
80006664:	58 06       	cp.w	r6,0
80006666:	e0 89 00 1a 	brgt	8000669a <_vfprintf_r+0x1e6a>
8000666a:	c3 88       	rjmp	800066da <_vfprintf_r+0x1eaa>
8000666c:	2f 09       	sub	r9,-16
8000666e:	2f f8       	sub	r8,-1
80006670:	fb 49 06 90 	st.w	sp[1680],r9
80006674:	87 05       	st.w	r3[0x0],r5
80006676:	87 12       	st.w	r3[0x4],r2
80006678:	fb 48 06 8c 	st.w	sp[1676],r8
8000667c:	58 78       	cp.w	r8,7
8000667e:	e0 89 00 04 	brgt	80006686 <_vfprintf_r+0x1e56>
80006682:	2f 83       	sub	r3,-8
80006684:	c0 98       	rjmp	80006696 <_vfprintf_r+0x1e66>
80006686:	00 9a       	mov	r10,r0
80006688:	02 9b       	mov	r11,r1
8000668a:	08 9c       	mov	r12,r4
8000668c:	fe b0 f0 c4 	rcall	80004814 <__sprint_r>
80006690:	c4 f1       	brne	8000672e <_vfprintf_r+0x1efe>
80006692:	fa c3 f9 e0 	sub	r3,sp,-1568
80006696:	21 06       	sub	r6,16
80006698:	c0 68       	rjmp	800066a4 <_vfprintf_r+0x1e74>
8000669a:	fe c5 c6 a6 	sub	r5,pc,-14682
8000669e:	31 02       	mov	r2,16
800066a0:	fa c0 f9 78 	sub	r0,sp,-1672
800066a4:	fa f9 06 90 	ld.w	r9,sp[1680]
800066a8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800066ac:	fe ca c6 b8 	sub	r10,pc,-14664
800066b0:	59 06       	cp.w	r6,16
800066b2:	fe 99 ff dd 	brgt	8000666c <_vfprintf_r+0x1e3c>
800066b6:	0c 09       	add	r9,r6
800066b8:	2f f8       	sub	r8,-1
800066ba:	87 0a       	st.w	r3[0x0],r10
800066bc:	87 16       	st.w	r3[0x4],r6
800066be:	fb 49 06 90 	st.w	sp[1680],r9
800066c2:	fb 48 06 8c 	st.w	sp[1676],r8
800066c6:	58 78       	cp.w	r8,7
800066c8:	e0 8a 00 09 	brle	800066da <_vfprintf_r+0x1eaa>
800066cc:	fa ca f9 78 	sub	r10,sp,-1672
800066d0:	02 9b       	mov	r11,r1
800066d2:	08 9c       	mov	r12,r4
800066d4:	fe b0 f0 a0 	rcall	80004814 <__sprint_r>
800066d8:	c2 b1       	brne	8000672e <_vfprintf_r+0x1efe>
800066da:	40 bc       	lddsp	r12,sp[0x2c]
800066dc:	40 36       	lddsp	r6,sp[0xc]
800066de:	40 8e       	lddsp	lr,sp[0x20]
800066e0:	ec 0e 0c 48 	max	r8,r6,lr
800066e4:	10 0c       	add	r12,r8
800066e6:	50 bc       	stdsp	sp[0x2c],r12
800066e8:	fa f8 06 90 	ld.w	r8,sp[1680]
800066ec:	58 08       	cp.w	r8,0
800066ee:	c0 80       	breq	800066fe <_vfprintf_r+0x1ece>
800066f0:	fa ca f9 78 	sub	r10,sp,-1672
800066f4:	02 9b       	mov	r11,r1
800066f6:	08 9c       	mov	r12,r4
800066f8:	fe b0 f0 8e 	rcall	80004814 <__sprint_r>
800066fc:	c1 91       	brne	8000672e <_vfprintf_r+0x1efe>
800066fe:	30 0b       	mov	r11,0
80006700:	fa c3 f9 e0 	sub	r3,sp,-1568
80006704:	fb 4b 06 8c 	st.w	sp[1676],r11
80006708:	fe 9f f1 22 	bral	8000494c <_vfprintf_r+0x11c>
8000670c:	08 95       	mov	r5,r4
8000670e:	fa f8 06 90 	ld.w	r8,sp[1680]
80006712:	58 08       	cp.w	r8,0
80006714:	c0 80       	breq	80006724 <_vfprintf_r+0x1ef4>
80006716:	08 9c       	mov	r12,r4
80006718:	fa ca f9 78 	sub	r10,sp,-1672
8000671c:	02 9b       	mov	r11,r1
8000671e:	fe b0 f0 7b 	rcall	80004814 <__sprint_r>
80006722:	c0 61       	brne	8000672e <_vfprintf_r+0x1efe>
80006724:	30 08       	mov	r8,0
80006726:	fb 48 06 8c 	st.w	sp[1676],r8
8000672a:	c0 28       	rjmp	8000672e <_vfprintf_r+0x1efe>
8000672c:	40 41       	lddsp	r1,sp[0x10]
8000672e:	82 68       	ld.sh	r8,r1[0xc]
80006730:	ed b8 00 06 	bld	r8,0x6
80006734:	c0 31       	brne	8000673a <_vfprintf_r+0x1f0a>
80006736:	3f fa       	mov	r10,-1
80006738:	50 ba       	stdsp	sp[0x2c],r10
8000673a:	40 bc       	lddsp	r12,sp[0x2c]
8000673c:	fe 3d f9 44 	sub	sp,-1724
80006740:	d8 32       	popm	r0-r7,pc
80006742:	d7 03       	nop

80006744 <__swsetup_r>:
80006744:	d4 21       	pushm	r4-r7,lr
80006746:	e0 68 00 fc 	mov	r8,252
8000674a:	18 96       	mov	r6,r12
8000674c:	16 97       	mov	r7,r11
8000674e:	70 0c       	ld.w	r12,r8[0x0]
80006750:	58 0c       	cp.w	r12,0
80006752:	c0 60       	breq	8000675e <__swsetup_r+0x1a>
80006754:	78 68       	ld.w	r8,r12[0x18]
80006756:	58 08       	cp.w	r8,0
80006758:	c0 31       	brne	8000675e <__swsetup_r+0x1a>
8000675a:	e0 a0 07 b9 	rcall	800076cc <__sinit>
8000675e:	fe c8 c6 3a 	sub	r8,pc,-14790
80006762:	10 37       	cp.w	r7,r8
80006764:	c0 61       	brne	80006770 <__swsetup_r+0x2c>
80006766:	e0 68 00 fc 	mov	r8,252
8000676a:	70 08       	ld.w	r8,r8[0x0]
8000676c:	70 07       	ld.w	r7,r8[0x0]
8000676e:	c1 28       	rjmp	80006792 <__swsetup_r+0x4e>
80006770:	fe c8 c6 2c 	sub	r8,pc,-14804
80006774:	10 37       	cp.w	r7,r8
80006776:	c0 61       	brne	80006782 <__swsetup_r+0x3e>
80006778:	e0 68 00 fc 	mov	r8,252
8000677c:	70 08       	ld.w	r8,r8[0x0]
8000677e:	70 17       	ld.w	r7,r8[0x4]
80006780:	c0 98       	rjmp	80006792 <__swsetup_r+0x4e>
80006782:	fe c8 c6 1e 	sub	r8,pc,-14818
80006786:	10 37       	cp.w	r7,r8
80006788:	c0 51       	brne	80006792 <__swsetup_r+0x4e>
8000678a:	e0 68 00 fc 	mov	r8,252
8000678e:	70 08       	ld.w	r8,r8[0x0]
80006790:	70 27       	ld.w	r7,r8[0x8]
80006792:	8e 68       	ld.sh	r8,r7[0xc]
80006794:	ed b8 00 03 	bld	r8,0x3
80006798:	c1 e0       	breq	800067d4 <__swsetup_r+0x90>
8000679a:	ed b8 00 04 	bld	r8,0x4
8000679e:	c3 e1       	brne	8000681a <__swsetup_r+0xd6>
800067a0:	ed b8 00 02 	bld	r8,0x2
800067a4:	c1 51       	brne	800067ce <__swsetup_r+0x8a>
800067a6:	6e db       	ld.w	r11,r7[0x34]
800067a8:	58 0b       	cp.w	r11,0
800067aa:	c0 a0       	breq	800067be <__swsetup_r+0x7a>
800067ac:	ee c8 ff bc 	sub	r8,r7,-68
800067b0:	10 3b       	cp.w	r11,r8
800067b2:	c0 40       	breq	800067ba <__swsetup_r+0x76>
800067b4:	0c 9c       	mov	r12,r6
800067b6:	e0 a0 08 25 	rcall	80007800 <_free_r>
800067ba:	30 08       	mov	r8,0
800067bc:	8f d8       	st.w	r7[0x34],r8
800067be:	8e 68       	ld.sh	r8,r7[0xc]
800067c0:	e0 18 ff db 	andl	r8,0xffdb
800067c4:	ae 68       	st.h	r7[0xc],r8
800067c6:	30 08       	mov	r8,0
800067c8:	8f 18       	st.w	r7[0x4],r8
800067ca:	6e 48       	ld.w	r8,r7[0x10]
800067cc:	8f 08       	st.w	r7[0x0],r8
800067ce:	8e 68       	ld.sh	r8,r7[0xc]
800067d0:	a3 b8       	sbr	r8,0x3
800067d2:	ae 68       	st.h	r7[0xc],r8
800067d4:	6e 48       	ld.w	r8,r7[0x10]
800067d6:	58 08       	cp.w	r8,0
800067d8:	c0 b1       	brne	800067ee <__swsetup_r+0xaa>
800067da:	8e 68       	ld.sh	r8,r7[0xc]
800067dc:	e2 18 02 80 	andl	r8,0x280,COH
800067e0:	e0 48 02 00 	cp.w	r8,512
800067e4:	c0 50       	breq	800067ee <__swsetup_r+0xaa>
800067e6:	0c 9c       	mov	r12,r6
800067e8:	0e 9b       	mov	r11,r7
800067ea:	e0 a0 0a 4b 	rcall	80007c80 <__smakebuf_r>
800067ee:	8e 69       	ld.sh	r9,r7[0xc]
800067f0:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
800067f4:	c0 70       	breq	80006802 <__swsetup_r+0xbe>
800067f6:	30 08       	mov	r8,0
800067f8:	8f 28       	st.w	r7[0x8],r8
800067fa:	6e 58       	ld.w	r8,r7[0x14]
800067fc:	5c 38       	neg	r8
800067fe:	8f 68       	st.w	r7[0x18],r8
80006800:	c0 68       	rjmp	8000680c <__swsetup_r+0xc8>
80006802:	ed b9 00 01 	bld	r9,0x1
80006806:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000680a:	8f 28       	st.w	r7[0x8],r8
8000680c:	6e 48       	ld.w	r8,r7[0x10]
8000680e:	58 08       	cp.w	r8,0
80006810:	c0 61       	brne	8000681c <__swsetup_r+0xd8>
80006812:	8e 68       	ld.sh	r8,r7[0xc]
80006814:	ed b8 00 07 	bld	r8,0x7
80006818:	c0 21       	brne	8000681c <__swsetup_r+0xd8>
8000681a:	dc 2a       	popm	r4-r7,pc,r12=-1
8000681c:	d8 2a       	popm	r4-r7,pc,r12=0
8000681e:	d7 03       	nop

80006820 <quorem>:
80006820:	d4 31       	pushm	r0-r7,lr
80006822:	20 2d       	sub	sp,8
80006824:	18 97       	mov	r7,r12
80006826:	78 48       	ld.w	r8,r12[0x10]
80006828:	76 46       	ld.w	r6,r11[0x10]
8000682a:	0c 38       	cp.w	r8,r6
8000682c:	c0 34       	brge	80006832 <quorem+0x12>
8000682e:	30 0c       	mov	r12,0
80006830:	c8 58       	rjmp	8000693a <quorem+0x11a>
80006832:	ec c2 ff fc 	sub	r2,r6,-4
80006836:	f6 c3 ff ec 	sub	r3,r11,-20
8000683a:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8000683e:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80006842:	2f f9       	sub	r9,-1
80006844:	20 16       	sub	r6,1
80006846:	f8 09 0d 08 	divu	r8,r12,r9
8000684a:	f6 02 00 22 	add	r2,r11,r2<<0x2
8000684e:	ee c4 ff ec 	sub	r4,r7,-20
80006852:	10 95       	mov	r5,r8
80006854:	58 08       	cp.w	r8,0
80006856:	c4 10       	breq	800068d8 <quorem+0xb8>
80006858:	30 09       	mov	r9,0
8000685a:	06 9a       	mov	r10,r3
8000685c:	08 98       	mov	r8,r4
8000685e:	12 91       	mov	r1,r9
80006860:	50 0b       	stdsp	sp[0x0],r11
80006862:	70 0e       	ld.w	lr,r8[0x0]
80006864:	b1 8e       	lsr	lr,0x10
80006866:	50 1e       	stdsp	sp[0x4],lr
80006868:	15 0e       	ld.w	lr,r10++
8000686a:	fc 00 16 10 	lsr	r0,lr,0x10
8000686e:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80006872:	ea 0e 03 41 	mac	r1,r5,lr
80006876:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8000687a:	b1 81       	lsr	r1,0x10
8000687c:	40 1b       	lddsp	r11,sp[0x4]
8000687e:	ea 00 02 40 	mul	r0,r5,r0
80006882:	e2 00 00 00 	add	r0,r1,r0
80006886:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8000688a:	02 1b       	sub	r11,r1
8000688c:	50 1b       	stdsp	sp[0x4],r11
8000688e:	70 0b       	ld.w	r11,r8[0x0]
80006890:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80006894:	02 09       	add	r9,r1
80006896:	f2 0e 01 0e 	sub	lr,r9,lr
8000689a:	b0 1e       	st.h	r8[0x2],lr
8000689c:	fc 09 14 10 	asr	r9,lr,0x10
800068a0:	40 1e       	lddsp	lr,sp[0x4]
800068a2:	fc 09 00 09 	add	r9,lr,r9
800068a6:	b0 09       	st.h	r8[0x0],r9
800068a8:	e0 01 16 10 	lsr	r1,r0,0x10
800068ac:	2f c8       	sub	r8,-4
800068ae:	b1 49       	asr	r9,0x10
800068b0:	04 3a       	cp.w	r10,r2
800068b2:	fe 98 ff d8 	brls	80006862 <quorem+0x42>
800068b6:	40 0b       	lddsp	r11,sp[0x0]
800068b8:	58 0c       	cp.w	r12,0
800068ba:	c0 f1       	brne	800068d8 <quorem+0xb8>
800068bc:	ec c8 ff fb 	sub	r8,r6,-5
800068c0:	ee 08 00 28 	add	r8,r7,r8<<0x2
800068c4:	c0 28       	rjmp	800068c8 <quorem+0xa8>
800068c6:	20 16       	sub	r6,1
800068c8:	20 48       	sub	r8,4
800068ca:	08 38       	cp.w	r8,r4
800068cc:	e0 88 00 05 	brls	800068d6 <quorem+0xb6>
800068d0:	70 09       	ld.w	r9,r8[0x0]
800068d2:	58 09       	cp.w	r9,0
800068d4:	cf 90       	breq	800068c6 <quorem+0xa6>
800068d6:	8f 46       	st.w	r7[0x10],r6
800068d8:	0e 9c       	mov	r12,r7
800068da:	e0 a0 0c fb 	rcall	800082d0 <__mcmp>
800068de:	c2 d5       	brlt	80006938 <quorem+0x118>
800068e0:	2f f5       	sub	r5,-1
800068e2:	08 98       	mov	r8,r4
800068e4:	30 09       	mov	r9,0
800068e6:	07 0b       	ld.w	r11,r3++
800068e8:	f6 0a 16 10 	lsr	r10,r11,0x10
800068ec:	70 0c       	ld.w	r12,r8[0x0]
800068ee:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800068f2:	f8 0e 16 10 	lsr	lr,r12,0x10
800068f6:	14 1e       	sub	lr,r10
800068f8:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800068fc:	16 1a       	sub	r10,r11
800068fe:	12 0a       	add	r10,r9
80006900:	b0 1a       	st.h	r8[0x2],r10
80006902:	b1 4a       	asr	r10,0x10
80006904:	fc 0a 00 09 	add	r9,lr,r10
80006908:	b0 09       	st.h	r8[0x0],r9
8000690a:	2f c8       	sub	r8,-4
8000690c:	b1 49       	asr	r9,0x10
8000690e:	04 33       	cp.w	r3,r2
80006910:	fe 98 ff eb 	brls	800068e6 <quorem+0xc6>
80006914:	ec c8 ff fb 	sub	r8,r6,-5
80006918:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
8000691c:	58 09       	cp.w	r9,0
8000691e:	c0 d1       	brne	80006938 <quorem+0x118>
80006920:	ee 08 00 28 	add	r8,r7,r8<<0x2
80006924:	c0 28       	rjmp	80006928 <quorem+0x108>
80006926:	20 16       	sub	r6,1
80006928:	20 48       	sub	r8,4
8000692a:	08 38       	cp.w	r8,r4
8000692c:	e0 88 00 05 	brls	80006936 <quorem+0x116>
80006930:	70 09       	ld.w	r9,r8[0x0]
80006932:	58 09       	cp.w	r9,0
80006934:	cf 90       	breq	80006926 <quorem+0x106>
80006936:	8f 46       	st.w	r7[0x10],r6
80006938:	0a 9c       	mov	r12,r5
8000693a:	2f ed       	sub	sp,-8
8000693c:	d8 32       	popm	r0-r7,pc
8000693e:	d7 03       	nop

80006940 <_dtoa_r>:
80006940:	d4 31       	pushm	r0-r7,lr
80006942:	21 ad       	sub	sp,104
80006944:	fa c4 ff 74 	sub	r4,sp,-140
80006948:	18 97       	mov	r7,r12
8000694a:	16 95       	mov	r5,r11
8000694c:	68 2c       	ld.w	r12,r4[0x8]
8000694e:	50 c9       	stdsp	sp[0x30],r9
80006950:	68 16       	ld.w	r6,r4[0x4]
80006952:	68 09       	ld.w	r9,r4[0x0]
80006954:	50 e8       	stdsp	sp[0x38],r8
80006956:	14 94       	mov	r4,r10
80006958:	51 2c       	stdsp	sp[0x48],r12
8000695a:	fa e5 00 08 	st.d	sp[8],r4
8000695e:	51 59       	stdsp	sp[0x54],r9
80006960:	6e 95       	ld.w	r5,r7[0x24]
80006962:	58 05       	cp.w	r5,0
80006964:	c0 91       	brne	80006976 <_dtoa_r+0x36>
80006966:	31 0c       	mov	r12,16
80006968:	e0 a0 09 ea 	rcall	80007d3c <malloc>
8000696c:	99 35       	st.w	r12[0xc],r5
8000696e:	8f 9c       	st.w	r7[0x24],r12
80006970:	99 15       	st.w	r12[0x4],r5
80006972:	99 25       	st.w	r12[0x8],r5
80006974:	99 05       	st.w	r12[0x0],r5
80006976:	6e 99       	ld.w	r9,r7[0x24]
80006978:	72 08       	ld.w	r8,r9[0x0]
8000697a:	58 08       	cp.w	r8,0
8000697c:	c0 f0       	breq	8000699a <_dtoa_r+0x5a>
8000697e:	72 1a       	ld.w	r10,r9[0x4]
80006980:	91 1a       	st.w	r8[0x4],r10
80006982:	30 1a       	mov	r10,1
80006984:	72 19       	ld.w	r9,r9[0x4]
80006986:	f4 09 09 49 	lsl	r9,r10,r9
8000698a:	10 9b       	mov	r11,r8
8000698c:	91 29       	st.w	r8[0x8],r9
8000698e:	0e 9c       	mov	r12,r7
80006990:	e0 a0 0c ba 	rcall	80008304 <_Bfree>
80006994:	6e 98       	ld.w	r8,r7[0x24]
80006996:	30 09       	mov	r9,0
80006998:	91 09       	st.w	r8[0x0],r9
8000699a:	40 28       	lddsp	r8,sp[0x8]
8000699c:	10 94       	mov	r4,r8
8000699e:	58 08       	cp.w	r8,0
800069a0:	c0 64       	brge	800069ac <_dtoa_r+0x6c>
800069a2:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
800069a6:	50 28       	stdsp	sp[0x8],r8
800069a8:	30 18       	mov	r8,1
800069aa:	c0 28       	rjmp	800069ae <_dtoa_r+0x6e>
800069ac:	30 08       	mov	r8,0
800069ae:	8d 08       	st.w	r6[0x0],r8
800069b0:	fc 1c 7f f0 	movh	r12,0x7ff0
800069b4:	40 26       	lddsp	r6,sp[0x8]
800069b6:	0c 98       	mov	r8,r6
800069b8:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800069bc:	18 38       	cp.w	r8,r12
800069be:	c2 01       	brne	800069fe <_dtoa_r+0xbe>
800069c0:	e0 68 27 0f 	mov	r8,9999
800069c4:	41 5b       	lddsp	r11,sp[0x54]
800069c6:	97 08       	st.w	r11[0x0],r8
800069c8:	40 3a       	lddsp	r10,sp[0xc]
800069ca:	58 0a       	cp.w	r10,0
800069cc:	c0 71       	brne	800069da <_dtoa_r+0x9a>
800069ce:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
800069d2:	c0 41       	brne	800069da <_dtoa_r+0x9a>
800069d4:	fe cc c8 c0 	sub	r12,pc,-14144
800069d8:	c0 38       	rjmp	800069de <_dtoa_r+0x9e>
800069da:	fe cc c8 ba 	sub	r12,pc,-14150
800069de:	41 29       	lddsp	r9,sp[0x48]
800069e0:	58 09       	cp.w	r9,0
800069e2:	e0 80 05 9a 	breq	80007516 <_dtoa_r+0xbd6>
800069e6:	f8 c8 ff fd 	sub	r8,r12,-3
800069ea:	f8 c9 ff f8 	sub	r9,r12,-8
800069ee:	11 8b       	ld.ub	r11,r8[0x0]
800069f0:	30 0a       	mov	r10,0
800069f2:	41 25       	lddsp	r5,sp[0x48]
800069f4:	f4 0b 18 00 	cp.b	r11,r10
800069f8:	f2 08 17 10 	movne	r8,r9
800069fc:	c1 68       	rjmp	80006a28 <_dtoa_r+0xe8>
800069fe:	fa ea 00 08 	ld.d	r10,sp[8]
80006a02:	30 08       	mov	r8,0
80006a04:	fa eb 00 3c 	st.d	sp[60],r10
80006a08:	30 09       	mov	r9,0
80006a0a:	e0 a0 14 e6 	rcall	800093d6 <__avr32_f64_cmp_eq>
80006a0e:	c1 00       	breq	80006a2e <_dtoa_r+0xee>
80006a10:	30 18       	mov	r8,1
80006a12:	41 5a       	lddsp	r10,sp[0x54]
80006a14:	95 08       	st.w	r10[0x0],r8
80006a16:	fe cc ca 26 	sub	r12,pc,-13786
80006a1a:	41 29       	lddsp	r9,sp[0x48]
80006a1c:	f8 08 00 08 	add	r8,r12,r8
80006a20:	58 09       	cp.w	r9,0
80006a22:	e0 80 05 7a 	breq	80007516 <_dtoa_r+0xbd6>
80006a26:	12 95       	mov	r5,r9
80006a28:	8b 08       	st.w	r5[0x0],r8
80006a2a:	e0 8f 05 76 	bral	80007516 <_dtoa_r+0xbd6>
80006a2e:	fa c8 ff 9c 	sub	r8,sp,-100
80006a32:	fa c9 ff a0 	sub	r9,sp,-96
80006a36:	fa ea 00 3c 	ld.d	r10,sp[60]
80006a3a:	0e 9c       	mov	r12,r7
80006a3c:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80006a40:	e0 a0 0c b4 	rcall	800083a8 <__d2b>
80006a44:	18 93       	mov	r3,r12
80006a46:	58 05       	cp.w	r5,0
80006a48:	c0 d0       	breq	80006a62 <_dtoa_r+0x122>
80006a4a:	fa ea 00 3c 	ld.d	r10,sp[60]
80006a4e:	30 04       	mov	r4,0
80006a50:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80006a54:	ea c5 03 ff 	sub	r5,r5,1023
80006a58:	10 9b       	mov	r11,r8
80006a5a:	51 74       	stdsp	sp[0x5c],r4
80006a5c:	ea 1b 3f f0 	orh	r11,0x3ff0
80006a60:	c2 58       	rjmp	80006aaa <_dtoa_r+0x16a>
80006a62:	41 88       	lddsp	r8,sp[0x60]
80006a64:	41 9c       	lddsp	r12,sp[0x64]
80006a66:	10 0c       	add	r12,r8
80006a68:	f8 c5 fb ce 	sub	r5,r12,-1074
80006a6c:	e0 45 00 20 	cp.w	r5,32
80006a70:	e0 8a 00 0e 	brle	80006a8c <_dtoa_r+0x14c>
80006a74:	f8 cc fb ee 	sub	r12,r12,-1042
80006a78:	40 3b       	lddsp	r11,sp[0xc]
80006a7a:	ea 08 11 40 	rsub	r8,r5,64
80006a7e:	f6 0c 0a 4c 	lsr	r12,r11,r12
80006a82:	ec 08 09 46 	lsl	r6,r6,r8
80006a86:	0c 4c       	or	r12,r6
80006a88:	c0 78       	rjmp	80006a96 <_dtoa_r+0x156>
80006a8a:	d7 03       	nop
80006a8c:	ea 0c 11 20 	rsub	r12,r5,32
80006a90:	40 3a       	lddsp	r10,sp[0xc]
80006a92:	f4 0c 09 4c 	lsl	r12,r10,r12
80006a96:	e0 a0 14 2c 	rcall	800092ee <__avr32_u32_to_f64>
80006a9a:	fc 18 fe 10 	movh	r8,0xfe10
80006a9e:	30 19       	mov	r9,1
80006aa0:	ea c5 04 33 	sub	r5,r5,1075
80006aa4:	f0 0b 00 0b 	add	r11,r8,r11
80006aa8:	51 79       	stdsp	sp[0x5c],r9
80006aaa:	30 08       	mov	r8,0
80006aac:	fc 19 3f f8 	movh	r9,0x3ff8
80006ab0:	e0 a0 12 b4 	rcall	80009018 <__avr32_f64_sub>
80006ab4:	e0 68 43 61 	mov	r8,17249
80006ab8:	ea 18 63 6f 	orh	r8,0x636f
80006abc:	e0 69 87 a7 	mov	r9,34727
80006ac0:	ea 19 3f d2 	orh	r9,0x3fd2
80006ac4:	e0 a0 11 be 	rcall	80008e40 <__avr32_f64_mul>
80006ac8:	e0 68 c8 b3 	mov	r8,51379
80006acc:	ea 18 8b 60 	orh	r8,0x8b60
80006ad0:	e0 69 8a 28 	mov	r9,35368
80006ad4:	ea 19 3f c6 	orh	r9,0x3fc6
80006ad8:	e0 a0 13 6e 	rcall	800091b4 <__avr32_f64_add>
80006adc:	0a 9c       	mov	r12,r5
80006ade:	14 90       	mov	r0,r10
80006ae0:	16 91       	mov	r1,r11
80006ae2:	e0 a0 14 0a 	rcall	800092f6 <__avr32_s32_to_f64>
80006ae6:	e0 68 79 fb 	mov	r8,31227
80006aea:	ea 18 50 9f 	orh	r8,0x509f
80006aee:	e0 69 44 13 	mov	r9,17427
80006af2:	ea 19 3f d3 	orh	r9,0x3fd3
80006af6:	e0 a0 11 a5 	rcall	80008e40 <__avr32_f64_mul>
80006afa:	14 98       	mov	r8,r10
80006afc:	16 99       	mov	r9,r11
80006afe:	00 9a       	mov	r10,r0
80006b00:	02 9b       	mov	r11,r1
80006b02:	e0 a0 13 59 	rcall	800091b4 <__avr32_f64_add>
80006b06:	14 90       	mov	r0,r10
80006b08:	16 91       	mov	r1,r11
80006b0a:	e0 a0 13 df 	rcall	800092c8 <__avr32_f64_to_s32>
80006b0e:	30 08       	mov	r8,0
80006b10:	18 96       	mov	r6,r12
80006b12:	30 09       	mov	r9,0
80006b14:	00 9a       	mov	r10,r0
80006b16:	02 9b       	mov	r11,r1
80006b18:	e0 a0 14 a6 	rcall	80009464 <__avr32_f64_cmp_lt>
80006b1c:	c0 c0       	breq	80006b34 <_dtoa_r+0x1f4>
80006b1e:	0c 9c       	mov	r12,r6
80006b20:	e0 a0 13 eb 	rcall	800092f6 <__avr32_s32_to_f64>
80006b24:	14 98       	mov	r8,r10
80006b26:	16 99       	mov	r9,r11
80006b28:	00 9a       	mov	r10,r0
80006b2a:	02 9b       	mov	r11,r1
80006b2c:	e0 a0 14 55 	rcall	800093d6 <__avr32_f64_cmp_eq>
80006b30:	f7 b6 00 01 	subeq	r6,1
80006b34:	59 66       	cp.w	r6,22
80006b36:	e0 88 00 05 	brls	80006b40 <_dtoa_r+0x200>
80006b3a:	30 18       	mov	r8,1
80006b3c:	51 48       	stdsp	sp[0x50],r8
80006b3e:	c1 38       	rjmp	80006b64 <_dtoa_r+0x224>
80006b40:	fe c8 c9 68 	sub	r8,pc,-13976
80006b44:	fa ea 00 3c 	ld.d	r10,sp[60]
80006b48:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80006b4c:	e0 a0 14 8c 	rcall	80009464 <__avr32_f64_cmp_lt>
80006b50:	f9 b4 00 00 	moveq	r4,0
80006b54:	fb f4 0a 14 	st.weq	sp[0x50],r4
80006b58:	f7 b6 01 01 	subne	r6,1
80006b5c:	f9 bc 01 00 	movne	r12,0
80006b60:	fb fc 1a 14 	st.wne	sp[0x50],r12
80006b64:	41 90       	lddsp	r0,sp[0x64]
80006b66:	20 10       	sub	r0,1
80006b68:	0a 10       	sub	r0,r5
80006b6a:	c0 46       	brmi	80006b72 <_dtoa_r+0x232>
80006b6c:	50 40       	stdsp	sp[0x10],r0
80006b6e:	30 00       	mov	r0,0
80006b70:	c0 48       	rjmp	80006b78 <_dtoa_r+0x238>
80006b72:	30 0b       	mov	r11,0
80006b74:	5c 30       	neg	r0
80006b76:	50 4b       	stdsp	sp[0x10],r11
80006b78:	ec 02 11 00 	rsub	r2,r6,0
80006b7c:	58 06       	cp.w	r6,0
80006b7e:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80006b82:	f5 d6 e4 0a 	addge	r10,r10,r6
80006b86:	fb fa 4a 04 	st.wge	sp[0x10],r10
80006b8a:	fb f6 4a 11 	st.wge	sp[0x44],r6
80006b8e:	f9 b2 04 00 	movge	r2,0
80006b92:	e1 d6 e5 10 	sublt	r0,r0,r6
80006b96:	f9 b9 05 00 	movlt	r9,0
80006b9a:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80006b9e:	40 c8       	lddsp	r8,sp[0x30]
80006ba0:	58 98       	cp.w	r8,9
80006ba2:	e0 8b 00 20 	brhi	80006be2 <_dtoa_r+0x2a2>
80006ba6:	58 58       	cp.w	r8,5
80006ba8:	f9 b4 0a 01 	movle	r4,1
80006bac:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80006bb0:	f7 b5 09 04 	subgt	r5,4
80006bb4:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80006bb8:	f9 b4 09 00 	movgt	r4,0
80006bbc:	40 cc       	lddsp	r12,sp[0x30]
80006bbe:	58 3c       	cp.w	r12,3
80006bc0:	c2 d0       	breq	80006c1a <_dtoa_r+0x2da>
80006bc2:	e0 89 00 05 	brgt	80006bcc <_dtoa_r+0x28c>
80006bc6:	58 2c       	cp.w	r12,2
80006bc8:	c1 01       	brne	80006be8 <_dtoa_r+0x2a8>
80006bca:	c1 88       	rjmp	80006bfa <_dtoa_r+0x2ba>
80006bcc:	40 cb       	lddsp	r11,sp[0x30]
80006bce:	58 4b       	cp.w	r11,4
80006bd0:	c0 60       	breq	80006bdc <_dtoa_r+0x29c>
80006bd2:	58 5b       	cp.w	r11,5
80006bd4:	c0 a1       	brne	80006be8 <_dtoa_r+0x2a8>
80006bd6:	30 1a       	mov	r10,1
80006bd8:	50 da       	stdsp	sp[0x34],r10
80006bda:	c2 28       	rjmp	80006c1e <_dtoa_r+0x2de>
80006bdc:	30 19       	mov	r9,1
80006bde:	50 d9       	stdsp	sp[0x34],r9
80006be0:	c0 f8       	rjmp	80006bfe <_dtoa_r+0x2be>
80006be2:	30 08       	mov	r8,0
80006be4:	30 14       	mov	r4,1
80006be6:	50 c8       	stdsp	sp[0x30],r8
80006be8:	3f f5       	mov	r5,-1
80006bea:	30 1c       	mov	r12,1
80006bec:	30 0b       	mov	r11,0
80006bee:	50 95       	stdsp	sp[0x24],r5
80006bf0:	50 dc       	stdsp	sp[0x34],r12
80006bf2:	0a 91       	mov	r1,r5
80006bf4:	31 28       	mov	r8,18
80006bf6:	50 eb       	stdsp	sp[0x38],r11
80006bf8:	c2 08       	rjmp	80006c38 <_dtoa_r+0x2f8>
80006bfa:	30 0a       	mov	r10,0
80006bfc:	50 da       	stdsp	sp[0x34],r10
80006bfe:	40 e9       	lddsp	r9,sp[0x38]
80006c00:	58 09       	cp.w	r9,0
80006c02:	e0 89 00 07 	brgt	80006c10 <_dtoa_r+0x2d0>
80006c06:	30 18       	mov	r8,1
80006c08:	50 98       	stdsp	sp[0x24],r8
80006c0a:	10 91       	mov	r1,r8
80006c0c:	50 e8       	stdsp	sp[0x38],r8
80006c0e:	c1 58       	rjmp	80006c38 <_dtoa_r+0x2f8>
80006c10:	40 e5       	lddsp	r5,sp[0x38]
80006c12:	50 95       	stdsp	sp[0x24],r5
80006c14:	0a 91       	mov	r1,r5
80006c16:	0a 98       	mov	r8,r5
80006c18:	c1 08       	rjmp	80006c38 <_dtoa_r+0x2f8>
80006c1a:	30 0c       	mov	r12,0
80006c1c:	50 dc       	stdsp	sp[0x34],r12
80006c1e:	40 eb       	lddsp	r11,sp[0x38]
80006c20:	ec 0b 00 0b 	add	r11,r6,r11
80006c24:	50 9b       	stdsp	sp[0x24],r11
80006c26:	16 98       	mov	r8,r11
80006c28:	2f f8       	sub	r8,-1
80006c2a:	58 08       	cp.w	r8,0
80006c2c:	e0 89 00 05 	brgt	80006c36 <_dtoa_r+0x2f6>
80006c30:	10 91       	mov	r1,r8
80006c32:	30 18       	mov	r8,1
80006c34:	c0 28       	rjmp	80006c38 <_dtoa_r+0x2f8>
80006c36:	10 91       	mov	r1,r8
80006c38:	30 09       	mov	r9,0
80006c3a:	6e 9a       	ld.w	r10,r7[0x24]
80006c3c:	95 19       	st.w	r10[0x4],r9
80006c3e:	30 49       	mov	r9,4
80006c40:	c0 68       	rjmp	80006c4c <_dtoa_r+0x30c>
80006c42:	d7 03       	nop
80006c44:	6a 1a       	ld.w	r10,r5[0x4]
80006c46:	a1 79       	lsl	r9,0x1
80006c48:	2f fa       	sub	r10,-1
80006c4a:	8b 1a       	st.w	r5[0x4],r10
80006c4c:	6e 95       	ld.w	r5,r7[0x24]
80006c4e:	f2 ca ff ec 	sub	r10,r9,-20
80006c52:	10 3a       	cp.w	r10,r8
80006c54:	fe 98 ff f8 	brls	80006c44 <_dtoa_r+0x304>
80006c58:	6a 1b       	ld.w	r11,r5[0x4]
80006c5a:	0e 9c       	mov	r12,r7
80006c5c:	e0 a0 0b 6e 	rcall	80008338 <_Balloc>
80006c60:	58 e1       	cp.w	r1,14
80006c62:	5f 88       	srls	r8
80006c64:	8b 0c       	st.w	r5[0x0],r12
80006c66:	f1 e4 00 04 	and	r4,r8,r4
80006c6a:	6e 98       	ld.w	r8,r7[0x24]
80006c6c:	70 08       	ld.w	r8,r8[0x0]
80006c6e:	50 88       	stdsp	sp[0x20],r8
80006c70:	e0 80 01 82 	breq	80006f74 <_dtoa_r+0x634>
80006c74:	58 06       	cp.w	r6,0
80006c76:	e0 8a 00 43 	brle	80006cfc <_dtoa_r+0x3bc>
80006c7a:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80006c7e:	fe c8 ca a6 	sub	r8,pc,-13658
80006c82:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80006c86:	fa e5 00 18 	st.d	sp[24],r4
80006c8a:	ec 04 14 04 	asr	r4,r6,0x4
80006c8e:	ed b4 00 04 	bld	r4,0x4
80006c92:	c0 30       	breq	80006c98 <_dtoa_r+0x358>
80006c94:	30 25       	mov	r5,2
80006c96:	c1 08       	rjmp	80006cb6 <_dtoa_r+0x376>
80006c98:	fe c8 c9 f8 	sub	r8,pc,-13832
80006c9c:	f0 e8 00 20 	ld.d	r8,r8[32]
80006ca0:	fa ea 00 3c 	ld.d	r10,sp[60]
80006ca4:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80006ca8:	e0 a0 14 12 	rcall	800094cc <__avr32_f64_div>
80006cac:	30 35       	mov	r5,3
80006cae:	14 98       	mov	r8,r10
80006cb0:	16 99       	mov	r9,r11
80006cb2:	fa e9 00 08 	st.d	sp[8],r8
80006cb6:	fe cc ca 16 	sub	r12,pc,-13802
80006cba:	50 a3       	stdsp	sp[0x28],r3
80006cbc:	0c 93       	mov	r3,r6
80006cbe:	18 96       	mov	r6,r12
80006cc0:	c0 f8       	rjmp	80006cde <_dtoa_r+0x39e>
80006cc2:	fa ea 00 18 	ld.d	r10,sp[24]
80006cc6:	ed b4 00 00 	bld	r4,0x0
80006cca:	c0 81       	brne	80006cda <_dtoa_r+0x39a>
80006ccc:	ec e8 00 00 	ld.d	r8,r6[0]
80006cd0:	2f f5       	sub	r5,-1
80006cd2:	e0 a0 10 b7 	rcall	80008e40 <__avr32_f64_mul>
80006cd6:	fa eb 00 18 	st.d	sp[24],r10
80006cda:	a1 54       	asr	r4,0x1
80006cdc:	2f 86       	sub	r6,-8
80006cde:	58 04       	cp.w	r4,0
80006ce0:	cf 11       	brne	80006cc2 <_dtoa_r+0x382>
80006ce2:	fa e8 00 18 	ld.d	r8,sp[24]
80006ce6:	fa ea 00 08 	ld.d	r10,sp[8]
80006cea:	06 96       	mov	r6,r3
80006cec:	e0 a0 13 f0 	rcall	800094cc <__avr32_f64_div>
80006cf0:	40 a3       	lddsp	r3,sp[0x28]
80006cf2:	14 98       	mov	r8,r10
80006cf4:	16 99       	mov	r9,r11
80006cf6:	fa e9 00 08 	st.d	sp[8],r8
80006cfa:	c2 f8       	rjmp	80006d58 <_dtoa_r+0x418>
80006cfc:	ec 08 11 00 	rsub	r8,r6,0
80006d00:	c0 31       	brne	80006d06 <_dtoa_r+0x3c6>
80006d02:	30 25       	mov	r5,2
80006d04:	c2 a8       	rjmp	80006d58 <_dtoa_r+0x418>
80006d06:	fe cc ca 66 	sub	r12,pc,-13722
80006d0a:	f0 04 14 04 	asr	r4,r8,0x4
80006d0e:	50 1c       	stdsp	sp[0x4],r12
80006d10:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80006d14:	fe c9 cb 3c 	sub	r9,pc,-13508
80006d18:	fa ea 00 3c 	ld.d	r10,sp[60]
80006d1c:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006d20:	e0 a0 10 90 	rcall	80008e40 <__avr32_f64_mul>
80006d24:	40 1c       	lddsp	r12,sp[0x4]
80006d26:	50 63       	stdsp	sp[0x18],r3
80006d28:	30 25       	mov	r5,2
80006d2a:	0c 93       	mov	r3,r6
80006d2c:	fa eb 00 08 	st.d	sp[8],r10
80006d30:	18 96       	mov	r6,r12
80006d32:	c0 f8       	rjmp	80006d50 <_dtoa_r+0x410>
80006d34:	fa ea 00 08 	ld.d	r10,sp[8]
80006d38:	ed b4 00 00 	bld	r4,0x0
80006d3c:	c0 81       	brne	80006d4c <_dtoa_r+0x40c>
80006d3e:	ec e8 00 00 	ld.d	r8,r6[0]
80006d42:	2f f5       	sub	r5,-1
80006d44:	e0 a0 10 7e 	rcall	80008e40 <__avr32_f64_mul>
80006d48:	fa eb 00 08 	st.d	sp[8],r10
80006d4c:	a1 54       	asr	r4,0x1
80006d4e:	2f 86       	sub	r6,-8
80006d50:	58 04       	cp.w	r4,0
80006d52:	cf 11       	brne	80006d34 <_dtoa_r+0x3f4>
80006d54:	06 96       	mov	r6,r3
80006d56:	40 63       	lddsp	r3,sp[0x18]
80006d58:	41 4a       	lddsp	r10,sp[0x50]
80006d5a:	58 0a       	cp.w	r10,0
80006d5c:	c2 a0       	breq	80006db0 <_dtoa_r+0x470>
80006d5e:	fa e8 00 08 	ld.d	r8,sp[8]
80006d62:	58 01       	cp.w	r1,0
80006d64:	5f 94       	srgt	r4
80006d66:	fa e9 00 18 	st.d	sp[24],r8
80006d6a:	30 08       	mov	r8,0
80006d6c:	fc 19 3f f0 	movh	r9,0x3ff0
80006d70:	fa ea 00 18 	ld.d	r10,sp[24]
80006d74:	e0 a0 13 78 	rcall	80009464 <__avr32_f64_cmp_lt>
80006d78:	f9 bc 00 00 	moveq	r12,0
80006d7c:	f9 bc 01 01 	movne	r12,1
80006d80:	e9 ec 00 0c 	and	r12,r4,r12
80006d84:	c1 60       	breq	80006db0 <_dtoa_r+0x470>
80006d86:	40 98       	lddsp	r8,sp[0x24]
80006d88:	58 08       	cp.w	r8,0
80006d8a:	e0 8a 00 f1 	brle	80006f6c <_dtoa_r+0x62c>
80006d8e:	30 08       	mov	r8,0
80006d90:	fc 19 40 24 	movh	r9,0x4024
80006d94:	ec c4 00 01 	sub	r4,r6,1
80006d98:	fa ea 00 18 	ld.d	r10,sp[24]
80006d9c:	2f f5       	sub	r5,-1
80006d9e:	50 64       	stdsp	sp[0x18],r4
80006da0:	e0 a0 10 50 	rcall	80008e40 <__avr32_f64_mul>
80006da4:	40 94       	lddsp	r4,sp[0x24]
80006da6:	14 98       	mov	r8,r10
80006da8:	16 99       	mov	r9,r11
80006daa:	fa e9 00 08 	st.d	sp[8],r8
80006dae:	c0 38       	rjmp	80006db4 <_dtoa_r+0x474>
80006db0:	50 66       	stdsp	sp[0x18],r6
80006db2:	02 94       	mov	r4,r1
80006db4:	0a 9c       	mov	r12,r5
80006db6:	e0 a0 12 a0 	rcall	800092f6 <__avr32_s32_to_f64>
80006dba:	fa e8 00 08 	ld.d	r8,sp[8]
80006dbe:	e0 a0 10 41 	rcall	80008e40 <__avr32_f64_mul>
80006dc2:	30 08       	mov	r8,0
80006dc4:	fc 19 40 1c 	movh	r9,0x401c
80006dc8:	e0 a0 11 f6 	rcall	800091b4 <__avr32_f64_add>
80006dcc:	14 98       	mov	r8,r10
80006dce:	16 99       	mov	r9,r11
80006dd0:	fa e9 00 28 	st.d	sp[40],r8
80006dd4:	fc 18 fc c0 	movh	r8,0xfcc0
80006dd8:	40 a5       	lddsp	r5,sp[0x28]
80006dda:	10 05       	add	r5,r8
80006ddc:	50 a5       	stdsp	sp[0x28],r5
80006dde:	58 04       	cp.w	r4,0
80006de0:	c2 11       	brne	80006e22 <_dtoa_r+0x4e2>
80006de2:	fa ea 00 08 	ld.d	r10,sp[8]
80006de6:	30 08       	mov	r8,0
80006de8:	fc 19 40 14 	movh	r9,0x4014
80006dec:	e0 a0 11 16 	rcall	80009018 <__avr32_f64_sub>
80006df0:	40 bc       	lddsp	r12,sp[0x2c]
80006df2:	fa eb 00 08 	st.d	sp[8],r10
80006df6:	14 98       	mov	r8,r10
80006df8:	16 99       	mov	r9,r11
80006dfa:	18 9a       	mov	r10,r12
80006dfc:	0a 9b       	mov	r11,r5
80006dfe:	e0 a0 13 33 	rcall	80009464 <__avr32_f64_cmp_lt>
80006e02:	e0 81 02 54 	brne	800072aa <_dtoa_r+0x96a>
80006e06:	0a 98       	mov	r8,r5
80006e08:	40 b9       	lddsp	r9,sp[0x2c]
80006e0a:	ee 18 80 00 	eorh	r8,0x8000
80006e0e:	fa ea 00 08 	ld.d	r10,sp[8]
80006e12:	10 95       	mov	r5,r8
80006e14:	12 98       	mov	r8,r9
80006e16:	0a 99       	mov	r9,r5
80006e18:	e0 a0 13 26 	rcall	80009464 <__avr32_f64_cmp_lt>
80006e1c:	e0 81 02 3e 	brne	80007298 <_dtoa_r+0x958>
80006e20:	ca 68       	rjmp	80006f6c <_dtoa_r+0x62c>
80006e22:	fe c9 cc 4a 	sub	r9,pc,-13238
80006e26:	e8 c8 00 01 	sub	r8,r4,1
80006e2a:	40 d5       	lddsp	r5,sp[0x34]
80006e2c:	58 05       	cp.w	r5,0
80006e2e:	c4 f0       	breq	80006ecc <_dtoa_r+0x58c>
80006e30:	30 0c       	mov	r12,0
80006e32:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80006e36:	51 3c       	stdsp	sp[0x4c],r12
80006e38:	30 0a       	mov	r10,0
80006e3a:	fc 1b 3f e0 	movh	r11,0x3fe0
80006e3e:	e0 a0 13 47 	rcall	800094cc <__avr32_f64_div>
80006e42:	fa e8 00 28 	ld.d	r8,sp[40]
80006e46:	40 85       	lddsp	r5,sp[0x20]
80006e48:	e0 a0 10 e8 	rcall	80009018 <__avr32_f64_sub>
80006e4c:	fa eb 00 28 	st.d	sp[40],r10
80006e50:	fa ea 00 08 	ld.d	r10,sp[8]
80006e54:	e0 a0 12 3a 	rcall	800092c8 <__avr32_f64_to_s32>
80006e58:	51 6c       	stdsp	sp[0x58],r12
80006e5a:	e0 a0 12 4e 	rcall	800092f6 <__avr32_s32_to_f64>
80006e5e:	14 98       	mov	r8,r10
80006e60:	16 99       	mov	r9,r11
80006e62:	fa ea 00 08 	ld.d	r10,sp[8]
80006e66:	e0 a0 10 d9 	rcall	80009018 <__avr32_f64_sub>
80006e6a:	fa eb 00 08 	st.d	sp[8],r10
80006e6e:	41 68       	lddsp	r8,sp[0x58]
80006e70:	2d 08       	sub	r8,-48
80006e72:	0a c8       	st.b	r5++,r8
80006e74:	41 39       	lddsp	r9,sp[0x4c]
80006e76:	2f f9       	sub	r9,-1
80006e78:	51 39       	stdsp	sp[0x4c],r9
80006e7a:	fa e8 00 28 	ld.d	r8,sp[40]
80006e7e:	e0 a0 12 f3 	rcall	80009464 <__avr32_f64_cmp_lt>
80006e82:	e0 81 03 39 	brne	800074f4 <_dtoa_r+0xbb4>
80006e86:	fa e8 00 08 	ld.d	r8,sp[8]
80006e8a:	30 0a       	mov	r10,0
80006e8c:	fc 1b 3f f0 	movh	r11,0x3ff0
80006e90:	e0 a0 10 c4 	rcall	80009018 <__avr32_f64_sub>
80006e94:	fa e8 00 28 	ld.d	r8,sp[40]
80006e98:	e0 a0 12 e6 	rcall	80009464 <__avr32_f64_cmp_lt>
80006e9c:	fa ea 00 28 	ld.d	r10,sp[40]
80006ea0:	30 08       	mov	r8,0
80006ea2:	fc 19 40 24 	movh	r9,0x4024
80006ea6:	e0 81 00 da 	brne	8000705a <_dtoa_r+0x71a>
80006eaa:	41 3c       	lddsp	r12,sp[0x4c]
80006eac:	08 3c       	cp.w	r12,r4
80006eae:	c5 f4       	brge	80006f6c <_dtoa_r+0x62c>
80006eb0:	e0 a0 0f c8 	rcall	80008e40 <__avr32_f64_mul>
80006eb4:	30 08       	mov	r8,0
80006eb6:	fa eb 00 28 	st.d	sp[40],r10
80006eba:	fc 19 40 24 	movh	r9,0x4024
80006ebe:	fa ea 00 08 	ld.d	r10,sp[8]
80006ec2:	e0 a0 0f bf 	rcall	80008e40 <__avr32_f64_mul>
80006ec6:	fa eb 00 08 	st.d	sp[8],r10
80006eca:	cc 3b       	rjmp	80006e50 <_dtoa_r+0x510>
80006ecc:	40 85       	lddsp	r5,sp[0x20]
80006ece:	08 05       	add	r5,r4
80006ed0:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
80006ed4:	51 35       	stdsp	sp[0x4c],r5
80006ed6:	fa e8 00 28 	ld.d	r8,sp[40]
80006eda:	40 85       	lddsp	r5,sp[0x20]
80006edc:	e0 a0 0f b2 	rcall	80008e40 <__avr32_f64_mul>
80006ee0:	fa eb 00 28 	st.d	sp[40],r10
80006ee4:	fa ea 00 08 	ld.d	r10,sp[8]
80006ee8:	e0 a0 11 f0 	rcall	800092c8 <__avr32_f64_to_s32>
80006eec:	51 6c       	stdsp	sp[0x58],r12
80006eee:	e0 a0 12 04 	rcall	800092f6 <__avr32_s32_to_f64>
80006ef2:	14 98       	mov	r8,r10
80006ef4:	16 99       	mov	r9,r11
80006ef6:	fa ea 00 08 	ld.d	r10,sp[8]
80006efa:	e0 a0 10 8f 	rcall	80009018 <__avr32_f64_sub>
80006efe:	fa eb 00 08 	st.d	sp[8],r10
80006f02:	41 68       	lddsp	r8,sp[0x58]
80006f04:	2d 08       	sub	r8,-48
80006f06:	0a c8       	st.b	r5++,r8
80006f08:	41 3c       	lddsp	r12,sp[0x4c]
80006f0a:	18 35       	cp.w	r5,r12
80006f0c:	c2 81       	brne	80006f5c <_dtoa_r+0x61c>
80006f0e:	30 08       	mov	r8,0
80006f10:	fc 19 3f e0 	movh	r9,0x3fe0
80006f14:	fa ea 00 28 	ld.d	r10,sp[40]
80006f18:	e0 a0 11 4e 	rcall	800091b4 <__avr32_f64_add>
80006f1c:	40 85       	lddsp	r5,sp[0x20]
80006f1e:	fa e8 00 08 	ld.d	r8,sp[8]
80006f22:	08 05       	add	r5,r4
80006f24:	e0 a0 12 a0 	rcall	80009464 <__avr32_f64_cmp_lt>
80006f28:	e0 81 00 99 	brne	8000705a <_dtoa_r+0x71a>
80006f2c:	fa e8 00 28 	ld.d	r8,sp[40]
80006f30:	30 0a       	mov	r10,0
80006f32:	fc 1b 3f e0 	movh	r11,0x3fe0
80006f36:	e0 a0 10 71 	rcall	80009018 <__avr32_f64_sub>
80006f3a:	14 98       	mov	r8,r10
80006f3c:	16 99       	mov	r9,r11
80006f3e:	fa ea 00 08 	ld.d	r10,sp[8]
80006f42:	e0 a0 12 91 	rcall	80009464 <__avr32_f64_cmp_lt>
80006f46:	c1 30       	breq	80006f6c <_dtoa_r+0x62c>
80006f48:	33 09       	mov	r9,48
80006f4a:	0a 98       	mov	r8,r5
80006f4c:	11 7a       	ld.ub	r10,--r8
80006f4e:	f2 0a 18 00 	cp.b	r10,r9
80006f52:	e0 81 02 d1 	brne	800074f4 <_dtoa_r+0xbb4>
80006f56:	10 95       	mov	r5,r8
80006f58:	cf 9b       	rjmp	80006f4a <_dtoa_r+0x60a>
80006f5a:	d7 03       	nop
80006f5c:	30 08       	mov	r8,0
80006f5e:	fc 19 40 24 	movh	r9,0x4024
80006f62:	e0 a0 0f 6f 	rcall	80008e40 <__avr32_f64_mul>
80006f66:	fa eb 00 08 	st.d	sp[8],r10
80006f6a:	cb db       	rjmp	80006ee4 <_dtoa_r+0x5a4>
80006f6c:	fa ea 00 3c 	ld.d	r10,sp[60]
80006f70:	fa eb 00 08 	st.d	sp[8],r10
80006f74:	58 e6       	cp.w	r6,14
80006f76:	5f ab       	srle	r11
80006f78:	41 8a       	lddsp	r10,sp[0x60]
80006f7a:	30 08       	mov	r8,0
80006f7c:	f4 09 11 ff 	rsub	r9,r10,-1
80006f80:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80006f84:	f0 09 18 00 	cp.b	r9,r8
80006f88:	e0 80 00 82 	breq	8000708c <_dtoa_r+0x74c>
80006f8c:	40 ea       	lddsp	r10,sp[0x38]
80006f8e:	58 01       	cp.w	r1,0
80006f90:	5f a9       	srle	r9
80006f92:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80006f96:	fe ca cd be 	sub	r10,pc,-12866
80006f9a:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
80006f9e:	fa e5 00 10 	st.d	sp[16],r4
80006fa2:	f0 09 18 00 	cp.b	r9,r8
80006fa6:	c1 40       	breq	80006fce <_dtoa_r+0x68e>
80006fa8:	58 01       	cp.w	r1,0
80006faa:	e0 81 01 77 	brne	80007298 <_dtoa_r+0x958>
80006fae:	30 08       	mov	r8,0
80006fb0:	fc 19 40 14 	movh	r9,0x4014
80006fb4:	08 9a       	mov	r10,r4
80006fb6:	0a 9b       	mov	r11,r5
80006fb8:	e0 a0 0f 44 	rcall	80008e40 <__avr32_f64_mul>
80006fbc:	fa e8 00 08 	ld.d	r8,sp[8]
80006fc0:	e0 a0 12 1e 	rcall	800093fc <__avr32_f64_cmp_ge>
80006fc4:	e0 81 01 6a 	brne	80007298 <_dtoa_r+0x958>
80006fc8:	02 92       	mov	r2,r1
80006fca:	e0 8f 01 72 	bral	800072ae <_dtoa_r+0x96e>
80006fce:	40 85       	lddsp	r5,sp[0x20]
80006fd0:	30 14       	mov	r4,1
80006fd2:	fa e8 00 10 	ld.d	r8,sp[16]
80006fd6:	fa ea 00 08 	ld.d	r10,sp[8]
80006fda:	e0 a0 12 79 	rcall	800094cc <__avr32_f64_div>
80006fde:	e0 a0 11 75 	rcall	800092c8 <__avr32_f64_to_s32>
80006fe2:	18 92       	mov	r2,r12
80006fe4:	e0 a0 11 89 	rcall	800092f6 <__avr32_s32_to_f64>
80006fe8:	fa e8 00 10 	ld.d	r8,sp[16]
80006fec:	e0 a0 0f 2a 	rcall	80008e40 <__avr32_f64_mul>
80006ff0:	14 98       	mov	r8,r10
80006ff2:	16 99       	mov	r9,r11
80006ff4:	fa ea 00 08 	ld.d	r10,sp[8]
80006ff8:	e0 a0 10 10 	rcall	80009018 <__avr32_f64_sub>
80006ffc:	fa eb 00 08 	st.d	sp[8],r10
80007000:	e4 c8 ff d0 	sub	r8,r2,-48
80007004:	0a c8       	st.b	r5++,r8
80007006:	fc 19 40 24 	movh	r9,0x4024
8000700a:	30 08       	mov	r8,0
8000700c:	02 34       	cp.w	r4,r1
8000700e:	c3 31       	brne	80007074 <_dtoa_r+0x734>
80007010:	fa e8 00 08 	ld.d	r8,sp[8]
80007014:	e0 a0 10 d0 	rcall	800091b4 <__avr32_f64_add>
80007018:	16 91       	mov	r1,r11
8000701a:	14 90       	mov	r0,r10
8000701c:	14 98       	mov	r8,r10
8000701e:	02 99       	mov	r9,r1
80007020:	fa ea 00 10 	ld.d	r10,sp[16]
80007024:	e0 a0 12 20 	rcall	80009464 <__avr32_f64_cmp_lt>
80007028:	c1 a1       	brne	8000705c <_dtoa_r+0x71c>
8000702a:	fa e8 00 10 	ld.d	r8,sp[16]
8000702e:	00 9a       	mov	r10,r0
80007030:	02 9b       	mov	r11,r1
80007032:	e0 a0 11 d2 	rcall	800093d6 <__avr32_f64_cmp_eq>
80007036:	e0 80 02 5e 	breq	800074f2 <_dtoa_r+0xbb2>
8000703a:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8000703e:	c0 f1       	brne	8000705c <_dtoa_r+0x71c>
80007040:	e0 8f 02 59 	bral	800074f2 <_dtoa_r+0xbb2>
80007044:	40 8a       	lddsp	r10,sp[0x20]
80007046:	14 38       	cp.w	r8,r10
80007048:	c0 30       	breq	8000704e <_dtoa_r+0x70e>
8000704a:	10 95       	mov	r5,r8
8000704c:	c0 98       	rjmp	8000705e <_dtoa_r+0x71e>
8000704e:	33 08       	mov	r8,48
80007050:	40 89       	lddsp	r9,sp[0x20]
80007052:	2f f6       	sub	r6,-1
80007054:	b2 88       	st.b	r9[0x0],r8
80007056:	40 88       	lddsp	r8,sp[0x20]
80007058:	c0 88       	rjmp	80007068 <_dtoa_r+0x728>
8000705a:	40 66       	lddsp	r6,sp[0x18]
8000705c:	33 99       	mov	r9,57
8000705e:	0a 98       	mov	r8,r5
80007060:	11 7a       	ld.ub	r10,--r8
80007062:	f2 0a 18 00 	cp.b	r10,r9
80007066:	ce f0       	breq	80007044 <_dtoa_r+0x704>
80007068:	50 66       	stdsp	sp[0x18],r6
8000706a:	11 89       	ld.ub	r9,r8[0x0]
8000706c:	2f f9       	sub	r9,-1
8000706e:	b0 89       	st.b	r8[0x0],r9
80007070:	e0 8f 02 42 	bral	800074f4 <_dtoa_r+0xbb4>
80007074:	e0 a0 0e e6 	rcall	80008e40 <__avr32_f64_mul>
80007078:	2f f4       	sub	r4,-1
8000707a:	fa eb 00 08 	st.d	sp[8],r10
8000707e:	30 08       	mov	r8,0
80007080:	30 09       	mov	r9,0
80007082:	e0 a0 11 aa 	rcall	800093d6 <__avr32_f64_cmp_eq>
80007086:	ca 60       	breq	80006fd2 <_dtoa_r+0x692>
80007088:	e0 8f 02 35 	bral	800074f2 <_dtoa_r+0xbb2>
8000708c:	40 d8       	lddsp	r8,sp[0x34]
8000708e:	58 08       	cp.w	r8,0
80007090:	c0 51       	brne	8000709a <_dtoa_r+0x75a>
80007092:	04 98       	mov	r8,r2
80007094:	00 95       	mov	r5,r0
80007096:	40 d4       	lddsp	r4,sp[0x34]
80007098:	c3 78       	rjmp	80007106 <_dtoa_r+0x7c6>
8000709a:	40 c5       	lddsp	r5,sp[0x30]
8000709c:	58 15       	cp.w	r5,1
8000709e:	e0 89 00 0f 	brgt	800070bc <_dtoa_r+0x77c>
800070a2:	41 74       	lddsp	r4,sp[0x5c]
800070a4:	58 04       	cp.w	r4,0
800070a6:	c0 40       	breq	800070ae <_dtoa_r+0x76e>
800070a8:	f4 c9 fb cd 	sub	r9,r10,-1075
800070ac:	c0 48       	rjmp	800070b4 <_dtoa_r+0x774>
800070ae:	41 99       	lddsp	r9,sp[0x64]
800070b0:	f2 09 11 36 	rsub	r9,r9,54
800070b4:	04 98       	mov	r8,r2
800070b6:	00 95       	mov	r5,r0
800070b8:	c1 c8       	rjmp	800070f0 <_dtoa_r+0x7b0>
800070ba:	d7 03       	nop
800070bc:	e2 c8 00 01 	sub	r8,r1,1
800070c0:	58 01       	cp.w	r1,0
800070c2:	e0 05 17 40 	movge	r5,r0
800070c6:	e2 09 17 40 	movge	r9,r1
800070ca:	e1 d1 e5 15 	sublt	r5,r0,r1
800070ce:	f9 b9 05 00 	movlt	r9,0
800070d2:	10 32       	cp.w	r2,r8
800070d4:	e5 d8 e4 18 	subge	r8,r2,r8
800070d8:	f1 d2 e5 18 	sublt	r8,r8,r2
800070dc:	e5 d8 e5 02 	addlt	r2,r2,r8
800070e0:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
800070e4:	f9 d8 e5 0c 	addlt	r12,r12,r8
800070e8:	fb fc 5a 11 	st.wlt	sp[0x44],r12
800070ec:	f9 b8 05 00 	movlt	r8,0
800070f0:	40 4b       	lddsp	r11,sp[0x10]
800070f2:	12 0b       	add	r11,r9
800070f4:	50 08       	stdsp	sp[0x0],r8
800070f6:	50 4b       	stdsp	sp[0x10],r11
800070f8:	12 00       	add	r0,r9
800070fa:	30 1b       	mov	r11,1
800070fc:	0e 9c       	mov	r12,r7
800070fe:	e0 a0 0a d1 	rcall	800086a0 <__i2b>
80007102:	40 08       	lddsp	r8,sp[0x0]
80007104:	18 94       	mov	r4,r12
80007106:	40 4a       	lddsp	r10,sp[0x10]
80007108:	58 05       	cp.w	r5,0
8000710a:	5f 99       	srgt	r9
8000710c:	58 0a       	cp.w	r10,0
8000710e:	5f 9a       	srgt	r10
80007110:	f5 e9 00 09 	and	r9,r10,r9
80007114:	c0 80       	breq	80007124 <_dtoa_r+0x7e4>
80007116:	40 4c       	lddsp	r12,sp[0x10]
80007118:	f8 05 0d 49 	min	r9,r12,r5
8000711c:	12 1c       	sub	r12,r9
8000711e:	12 10       	sub	r0,r9
80007120:	50 4c       	stdsp	sp[0x10],r12
80007122:	12 15       	sub	r5,r9
80007124:	58 02       	cp.w	r2,0
80007126:	e0 8a 00 27 	brle	80007174 <_dtoa_r+0x834>
8000712a:	40 db       	lddsp	r11,sp[0x34]
8000712c:	58 0b       	cp.w	r11,0
8000712e:	c1 d0       	breq	80007168 <_dtoa_r+0x828>
80007130:	58 08       	cp.w	r8,0
80007132:	e0 8a 00 17 	brle	80007160 <_dtoa_r+0x820>
80007136:	10 9a       	mov	r10,r8
80007138:	50 08       	stdsp	sp[0x0],r8
8000713a:	08 9b       	mov	r11,r4
8000713c:	0e 9c       	mov	r12,r7
8000713e:	e0 a0 0a f7 	rcall	8000872c <__pow5mult>
80007142:	06 9a       	mov	r10,r3
80007144:	18 9b       	mov	r11,r12
80007146:	18 94       	mov	r4,r12
80007148:	0e 9c       	mov	r12,r7
8000714a:	e0 a0 0a 2b 	rcall	800085a0 <__multiply>
8000714e:	18 99       	mov	r9,r12
80007150:	06 9b       	mov	r11,r3
80007152:	50 19       	stdsp	sp[0x4],r9
80007154:	0e 9c       	mov	r12,r7
80007156:	e0 a0 08 d7 	rcall	80008304 <_Bfree>
8000715a:	40 19       	lddsp	r9,sp[0x4]
8000715c:	40 08       	lddsp	r8,sp[0x0]
8000715e:	12 93       	mov	r3,r9
80007160:	e4 08 01 0a 	sub	r10,r2,r8
80007164:	c0 80       	breq	80007174 <_dtoa_r+0x834>
80007166:	c0 28       	rjmp	8000716a <_dtoa_r+0x82a>
80007168:	04 9a       	mov	r10,r2
8000716a:	06 9b       	mov	r11,r3
8000716c:	0e 9c       	mov	r12,r7
8000716e:	e0 a0 0a df 	rcall	8000872c <__pow5mult>
80007172:	18 93       	mov	r3,r12
80007174:	30 1b       	mov	r11,1
80007176:	0e 9c       	mov	r12,r7
80007178:	e0 a0 0a 94 	rcall	800086a0 <__i2b>
8000717c:	41 1a       	lddsp	r10,sp[0x44]
8000717e:	18 92       	mov	r2,r12
80007180:	58 0a       	cp.w	r10,0
80007182:	e0 8a 00 07 	brle	80007190 <_dtoa_r+0x850>
80007186:	18 9b       	mov	r11,r12
80007188:	0e 9c       	mov	r12,r7
8000718a:	e0 a0 0a d1 	rcall	8000872c <__pow5mult>
8000718e:	18 92       	mov	r2,r12
80007190:	40 c9       	lddsp	r9,sp[0x30]
80007192:	58 19       	cp.w	r9,1
80007194:	e0 89 00 14 	brgt	800071bc <_dtoa_r+0x87c>
80007198:	40 38       	lddsp	r8,sp[0xc]
8000719a:	58 08       	cp.w	r8,0
8000719c:	c1 01       	brne	800071bc <_dtoa_r+0x87c>
8000719e:	40 29       	lddsp	r9,sp[0x8]
800071a0:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
800071a4:	c0 c1       	brne	800071bc <_dtoa_r+0x87c>
800071a6:	12 98       	mov	r8,r9
800071a8:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800071ac:	c0 80       	breq	800071bc <_dtoa_r+0x87c>
800071ae:	40 4c       	lddsp	r12,sp[0x10]
800071b0:	30 1b       	mov	r11,1
800071b2:	2f fc       	sub	r12,-1
800071b4:	2f f0       	sub	r0,-1
800071b6:	50 4c       	stdsp	sp[0x10],r12
800071b8:	50 6b       	stdsp	sp[0x18],r11
800071ba:	c0 38       	rjmp	800071c0 <_dtoa_r+0x880>
800071bc:	30 0a       	mov	r10,0
800071be:	50 6a       	stdsp	sp[0x18],r10
800071c0:	41 19       	lddsp	r9,sp[0x44]
800071c2:	58 09       	cp.w	r9,0
800071c4:	c0 31       	brne	800071ca <_dtoa_r+0x88a>
800071c6:	30 1c       	mov	r12,1
800071c8:	c0 98       	rjmp	800071da <_dtoa_r+0x89a>
800071ca:	64 48       	ld.w	r8,r2[0x10]
800071cc:	2f c8       	sub	r8,-4
800071ce:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
800071d2:	e0 a0 08 08 	rcall	800081e2 <__hi0bits>
800071d6:	f8 0c 11 20 	rsub	r12,r12,32
800071da:	40 4b       	lddsp	r11,sp[0x10]
800071dc:	f8 0b 00 08 	add	r8,r12,r11
800071e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800071e4:	c0 c0       	breq	800071fc <_dtoa_r+0x8bc>
800071e6:	f0 08 11 20 	rsub	r8,r8,32
800071ea:	58 48       	cp.w	r8,4
800071ec:	e0 8a 00 06 	brle	800071f8 <_dtoa_r+0x8b8>
800071f0:	20 48       	sub	r8,4
800071f2:	10 0b       	add	r11,r8
800071f4:	50 4b       	stdsp	sp[0x10],r11
800071f6:	c0 78       	rjmp	80007204 <_dtoa_r+0x8c4>
800071f8:	58 48       	cp.w	r8,4
800071fa:	c0 70       	breq	80007208 <_dtoa_r+0x8c8>
800071fc:	40 4a       	lddsp	r10,sp[0x10]
800071fe:	2e 48       	sub	r8,-28
80007200:	10 0a       	add	r10,r8
80007202:	50 4a       	stdsp	sp[0x10],r10
80007204:	10 00       	add	r0,r8
80007206:	10 05       	add	r5,r8
80007208:	58 00       	cp.w	r0,0
8000720a:	e0 8a 00 08 	brle	8000721a <_dtoa_r+0x8da>
8000720e:	06 9b       	mov	r11,r3
80007210:	00 9a       	mov	r10,r0
80007212:	0e 9c       	mov	r12,r7
80007214:	e0 a0 09 82 	rcall	80008518 <__lshift>
80007218:	18 93       	mov	r3,r12
8000721a:	40 49       	lddsp	r9,sp[0x10]
8000721c:	58 09       	cp.w	r9,0
8000721e:	e0 8a 00 08 	brle	8000722e <_dtoa_r+0x8ee>
80007222:	04 9b       	mov	r11,r2
80007224:	12 9a       	mov	r10,r9
80007226:	0e 9c       	mov	r12,r7
80007228:	e0 a0 09 78 	rcall	80008518 <__lshift>
8000722c:	18 92       	mov	r2,r12
8000722e:	41 48       	lddsp	r8,sp[0x50]
80007230:	58 08       	cp.w	r8,0
80007232:	c1 b0       	breq	80007268 <_dtoa_r+0x928>
80007234:	04 9b       	mov	r11,r2
80007236:	06 9c       	mov	r12,r3
80007238:	e0 a0 08 4c 	rcall	800082d0 <__mcmp>
8000723c:	c1 64       	brge	80007268 <_dtoa_r+0x928>
8000723e:	06 9b       	mov	r11,r3
80007240:	30 09       	mov	r9,0
80007242:	30 aa       	mov	r10,10
80007244:	0e 9c       	mov	r12,r7
80007246:	e0 a0 0a 35 	rcall	800086b0 <__multadd>
8000724a:	20 16       	sub	r6,1
8000724c:	18 93       	mov	r3,r12
8000724e:	40 dc       	lddsp	r12,sp[0x34]
80007250:	58 0c       	cp.w	r12,0
80007252:	c0 31       	brne	80007258 <_dtoa_r+0x918>
80007254:	40 91       	lddsp	r1,sp[0x24]
80007256:	c0 98       	rjmp	80007268 <_dtoa_r+0x928>
80007258:	08 9b       	mov	r11,r4
8000725a:	40 91       	lddsp	r1,sp[0x24]
8000725c:	30 09       	mov	r9,0
8000725e:	30 aa       	mov	r10,10
80007260:	0e 9c       	mov	r12,r7
80007262:	e0 a0 0a 27 	rcall	800086b0 <__multadd>
80007266:	18 94       	mov	r4,r12
80007268:	58 01       	cp.w	r1,0
8000726a:	5f a9       	srle	r9
8000726c:	40 cb       	lddsp	r11,sp[0x30]
8000726e:	58 2b       	cp.w	r11,2
80007270:	5f 98       	srgt	r8
80007272:	f3 e8 00 08 	and	r8,r9,r8
80007276:	c2 50       	breq	800072c0 <_dtoa_r+0x980>
80007278:	58 01       	cp.w	r1,0
8000727a:	c1 11       	brne	8000729c <_dtoa_r+0x95c>
8000727c:	04 9b       	mov	r11,r2
8000727e:	02 99       	mov	r9,r1
80007280:	30 5a       	mov	r10,5
80007282:	0e 9c       	mov	r12,r7
80007284:	e0 a0 0a 16 	rcall	800086b0 <__multadd>
80007288:	18 92       	mov	r2,r12
8000728a:	18 9b       	mov	r11,r12
8000728c:	06 9c       	mov	r12,r3
8000728e:	e0 a0 08 21 	rcall	800082d0 <__mcmp>
80007292:	e0 89 00 0f 	brgt	800072b0 <_dtoa_r+0x970>
80007296:	c0 38       	rjmp	8000729c <_dtoa_r+0x95c>
80007298:	30 02       	mov	r2,0
8000729a:	04 94       	mov	r4,r2
8000729c:	40 ea       	lddsp	r10,sp[0x38]
8000729e:	30 09       	mov	r9,0
800072a0:	5c da       	com	r10
800072a2:	40 85       	lddsp	r5,sp[0x20]
800072a4:	50 6a       	stdsp	sp[0x18],r10
800072a6:	50 49       	stdsp	sp[0x10],r9
800072a8:	c0 f9       	rjmp	800074c6 <_dtoa_r+0xb86>
800072aa:	08 92       	mov	r2,r4
800072ac:	40 66       	lddsp	r6,sp[0x18]
800072ae:	04 94       	mov	r4,r2
800072b0:	2f f6       	sub	r6,-1
800072b2:	50 66       	stdsp	sp[0x18],r6
800072b4:	33 18       	mov	r8,49
800072b6:	40 85       	lddsp	r5,sp[0x20]
800072b8:	0a c8       	st.b	r5++,r8
800072ba:	30 08       	mov	r8,0
800072bc:	50 48       	stdsp	sp[0x10],r8
800072be:	c0 49       	rjmp	800074c6 <_dtoa_r+0xb86>
800072c0:	40 dc       	lddsp	r12,sp[0x34]
800072c2:	58 0c       	cp.w	r12,0
800072c4:	e0 80 00 b5 	breq	8000742e <_dtoa_r+0xaee>
800072c8:	58 05       	cp.w	r5,0
800072ca:	e0 8a 00 08 	brle	800072da <_dtoa_r+0x99a>
800072ce:	08 9b       	mov	r11,r4
800072d0:	0a 9a       	mov	r10,r5
800072d2:	0e 9c       	mov	r12,r7
800072d4:	e0 a0 09 22 	rcall	80008518 <__lshift>
800072d8:	18 94       	mov	r4,r12
800072da:	40 6b       	lddsp	r11,sp[0x18]
800072dc:	58 0b       	cp.w	r11,0
800072de:	c0 31       	brne	800072e4 <_dtoa_r+0x9a4>
800072e0:	08 9c       	mov	r12,r4
800072e2:	c1 38       	rjmp	80007308 <_dtoa_r+0x9c8>
800072e4:	68 1b       	ld.w	r11,r4[0x4]
800072e6:	0e 9c       	mov	r12,r7
800072e8:	e0 a0 08 28 	rcall	80008338 <_Balloc>
800072ec:	68 4a       	ld.w	r10,r4[0x10]
800072ee:	18 95       	mov	r5,r12
800072f0:	e8 cb ff f4 	sub	r11,r4,-12
800072f4:	2f ea       	sub	r10,-2
800072f6:	2f 4c       	sub	r12,-12
800072f8:	a3 6a       	lsl	r10,0x2
800072fa:	fe b0 e8 42 	rcall	8000437e <memcpy>
800072fe:	0a 9b       	mov	r11,r5
80007300:	30 1a       	mov	r10,1
80007302:	0e 9c       	mov	r12,r7
80007304:	e0 a0 09 0a 	rcall	80008518 <__lshift>
80007308:	50 44       	stdsp	sp[0x10],r4
8000730a:	40 3a       	lddsp	r10,sp[0xc]
8000730c:	30 19       	mov	r9,1
8000730e:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80007312:	18 94       	mov	r4,r12
80007314:	50 da       	stdsp	sp[0x34],r10
80007316:	40 85       	lddsp	r5,sp[0x20]
80007318:	50 99       	stdsp	sp[0x24],r9
8000731a:	50 26       	stdsp	sp[0x8],r6
8000731c:	50 e1       	stdsp	sp[0x38],r1
8000731e:	04 9b       	mov	r11,r2
80007320:	06 9c       	mov	r12,r3
80007322:	fe b0 fa 7f 	rcall	80006820 <quorem>
80007326:	40 4b       	lddsp	r11,sp[0x10]
80007328:	f8 c0 ff d0 	sub	r0,r12,-48
8000732c:	06 9c       	mov	r12,r3
8000732e:	e0 a0 07 d1 	rcall	800082d0 <__mcmp>
80007332:	08 9a       	mov	r10,r4
80007334:	50 6c       	stdsp	sp[0x18],r12
80007336:	04 9b       	mov	r11,r2
80007338:	0e 9c       	mov	r12,r7
8000733a:	e0 a0 08 87 	rcall	80008448 <__mdiff>
8000733e:	18 91       	mov	r1,r12
80007340:	78 38       	ld.w	r8,r12[0xc]
80007342:	58 08       	cp.w	r8,0
80007344:	c0 30       	breq	8000734a <_dtoa_r+0xa0a>
80007346:	30 16       	mov	r6,1
80007348:	c0 68       	rjmp	80007354 <_dtoa_r+0xa14>
8000734a:	18 9b       	mov	r11,r12
8000734c:	06 9c       	mov	r12,r3
8000734e:	e0 a0 07 c1 	rcall	800082d0 <__mcmp>
80007352:	18 96       	mov	r6,r12
80007354:	0e 9c       	mov	r12,r7
80007356:	02 9b       	mov	r11,r1
80007358:	e0 a0 07 d6 	rcall	80008304 <_Bfree>
8000735c:	40 cc       	lddsp	r12,sp[0x30]
8000735e:	ed ec 10 08 	or	r8,r6,r12
80007362:	c0 d1       	brne	8000737c <_dtoa_r+0xa3c>
80007364:	40 db       	lddsp	r11,sp[0x34]
80007366:	58 0b       	cp.w	r11,0
80007368:	c0 a1       	brne	8000737c <_dtoa_r+0xa3c>
8000736a:	40 26       	lddsp	r6,sp[0x8]
8000736c:	e0 40 00 39 	cp.w	r0,57
80007370:	c3 00       	breq	800073d0 <_dtoa_r+0xa90>
80007372:	40 6a       	lddsp	r10,sp[0x18]
80007374:	58 0a       	cp.w	r10,0
80007376:	e0 89 00 24 	brgt	800073be <_dtoa_r+0xa7e>
8000737a:	c2 f8       	rjmp	800073d8 <_dtoa_r+0xa98>
8000737c:	40 69       	lddsp	r9,sp[0x18]
8000737e:	58 09       	cp.w	r9,0
80007380:	c0 85       	brlt	80007390 <_dtoa_r+0xa50>
80007382:	12 98       	mov	r8,r9
80007384:	40 cc       	lddsp	r12,sp[0x30]
80007386:	18 48       	or	r8,r12
80007388:	c1 d1       	brne	800073c2 <_dtoa_r+0xa82>
8000738a:	40 db       	lddsp	r11,sp[0x34]
8000738c:	58 0b       	cp.w	r11,0
8000738e:	c1 a1       	brne	800073c2 <_dtoa_r+0xa82>
80007390:	0c 99       	mov	r9,r6
80007392:	40 26       	lddsp	r6,sp[0x8]
80007394:	58 09       	cp.w	r9,0
80007396:	e0 8a 00 21 	brle	800073d8 <_dtoa_r+0xa98>
8000739a:	06 9b       	mov	r11,r3
8000739c:	30 1a       	mov	r10,1
8000739e:	0e 9c       	mov	r12,r7
800073a0:	e0 a0 08 bc 	rcall	80008518 <__lshift>
800073a4:	04 9b       	mov	r11,r2
800073a6:	18 93       	mov	r3,r12
800073a8:	e0 a0 07 94 	rcall	800082d0 <__mcmp>
800073ac:	e0 89 00 06 	brgt	800073b8 <_dtoa_r+0xa78>
800073b0:	c1 41       	brne	800073d8 <_dtoa_r+0xa98>
800073b2:	ed b0 00 00 	bld	r0,0x0
800073b6:	c1 11       	brne	800073d8 <_dtoa_r+0xa98>
800073b8:	e0 40 00 39 	cp.w	r0,57
800073bc:	c0 a0       	breq	800073d0 <_dtoa_r+0xa90>
800073be:	2f f0       	sub	r0,-1
800073c0:	c0 c8       	rjmp	800073d8 <_dtoa_r+0xa98>
800073c2:	58 06       	cp.w	r6,0
800073c4:	e0 8a 00 0c 	brle	800073dc <_dtoa_r+0xa9c>
800073c8:	40 26       	lddsp	r6,sp[0x8]
800073ca:	e0 40 00 39 	cp.w	r0,57
800073ce:	c0 41       	brne	800073d6 <_dtoa_r+0xa96>
800073d0:	33 98       	mov	r8,57
800073d2:	0a c8       	st.b	r5++,r8
800073d4:	c6 78       	rjmp	800074a2 <_dtoa_r+0xb62>
800073d6:	2f f0       	sub	r0,-1
800073d8:	0a c0       	st.b	r5++,r0
800073da:	c7 58       	rjmp	800074c4 <_dtoa_r+0xb84>
800073dc:	0a c0       	st.b	r5++,r0
800073de:	40 9a       	lddsp	r10,sp[0x24]
800073e0:	40 e9       	lddsp	r9,sp[0x38]
800073e2:	12 3a       	cp.w	r10,r9
800073e4:	c4 30       	breq	8000746a <_dtoa_r+0xb2a>
800073e6:	06 9b       	mov	r11,r3
800073e8:	30 09       	mov	r9,0
800073ea:	30 aa       	mov	r10,10
800073ec:	0e 9c       	mov	r12,r7
800073ee:	e0 a0 09 61 	rcall	800086b0 <__multadd>
800073f2:	40 48       	lddsp	r8,sp[0x10]
800073f4:	18 93       	mov	r3,r12
800073f6:	08 38       	cp.w	r8,r4
800073f8:	c0 91       	brne	8000740a <_dtoa_r+0xaca>
800073fa:	10 9b       	mov	r11,r8
800073fc:	30 09       	mov	r9,0
800073fe:	30 aa       	mov	r10,10
80007400:	0e 9c       	mov	r12,r7
80007402:	e0 a0 09 57 	rcall	800086b0 <__multadd>
80007406:	50 4c       	stdsp	sp[0x10],r12
80007408:	c0 e8       	rjmp	80007424 <_dtoa_r+0xae4>
8000740a:	40 4b       	lddsp	r11,sp[0x10]
8000740c:	30 09       	mov	r9,0
8000740e:	30 aa       	mov	r10,10
80007410:	0e 9c       	mov	r12,r7
80007412:	e0 a0 09 4f 	rcall	800086b0 <__multadd>
80007416:	08 9b       	mov	r11,r4
80007418:	50 4c       	stdsp	sp[0x10],r12
8000741a:	30 09       	mov	r9,0
8000741c:	30 aa       	mov	r10,10
8000741e:	0e 9c       	mov	r12,r7
80007420:	e0 a0 09 48 	rcall	800086b0 <__multadd>
80007424:	18 94       	mov	r4,r12
80007426:	40 9c       	lddsp	r12,sp[0x24]
80007428:	2f fc       	sub	r12,-1
8000742a:	50 9c       	stdsp	sp[0x24],r12
8000742c:	c7 9b       	rjmp	8000731e <_dtoa_r+0x9de>
8000742e:	30 18       	mov	r8,1
80007430:	06 90       	mov	r0,r3
80007432:	40 85       	lddsp	r5,sp[0x20]
80007434:	08 93       	mov	r3,r4
80007436:	0c 94       	mov	r4,r6
80007438:	10 96       	mov	r6,r8
8000743a:	04 9b       	mov	r11,r2
8000743c:	00 9c       	mov	r12,r0
8000743e:	fe b0 f9 f1 	rcall	80006820 <quorem>
80007442:	2d 0c       	sub	r12,-48
80007444:	0a cc       	st.b	r5++,r12
80007446:	02 36       	cp.w	r6,r1
80007448:	c0 a4       	brge	8000745c <_dtoa_r+0xb1c>
8000744a:	00 9b       	mov	r11,r0
8000744c:	30 09       	mov	r9,0
8000744e:	30 aa       	mov	r10,10
80007450:	0e 9c       	mov	r12,r7
80007452:	2f f6       	sub	r6,-1
80007454:	e0 a0 09 2e 	rcall	800086b0 <__multadd>
80007458:	18 90       	mov	r0,r12
8000745a:	cf 0b       	rjmp	8000743a <_dtoa_r+0xafa>
8000745c:	08 96       	mov	r6,r4
8000745e:	30 0b       	mov	r11,0
80007460:	06 94       	mov	r4,r3
80007462:	50 4b       	stdsp	sp[0x10],r11
80007464:	00 93       	mov	r3,r0
80007466:	18 90       	mov	r0,r12
80007468:	c0 28       	rjmp	8000746c <_dtoa_r+0xb2c>
8000746a:	40 26       	lddsp	r6,sp[0x8]
8000746c:	06 9b       	mov	r11,r3
8000746e:	30 1a       	mov	r10,1
80007470:	0e 9c       	mov	r12,r7
80007472:	e0 a0 08 53 	rcall	80008518 <__lshift>
80007476:	04 9b       	mov	r11,r2
80007478:	18 93       	mov	r3,r12
8000747a:	e0 a0 07 2b 	rcall	800082d0 <__mcmp>
8000747e:	e0 89 00 12 	brgt	800074a2 <_dtoa_r+0xb62>
80007482:	c1 b1       	brne	800074b8 <_dtoa_r+0xb78>
80007484:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80007488:	c0 d1       	brne	800074a2 <_dtoa_r+0xb62>
8000748a:	c1 78       	rjmp	800074b8 <_dtoa_r+0xb78>
8000748c:	40 89       	lddsp	r9,sp[0x20]
8000748e:	12 38       	cp.w	r8,r9
80007490:	c0 30       	breq	80007496 <_dtoa_r+0xb56>
80007492:	10 95       	mov	r5,r8
80007494:	c0 88       	rjmp	800074a4 <_dtoa_r+0xb64>
80007496:	2f f6       	sub	r6,-1
80007498:	50 66       	stdsp	sp[0x18],r6
8000749a:	33 18       	mov	r8,49
8000749c:	40 8c       	lddsp	r12,sp[0x20]
8000749e:	b8 88       	st.b	r12[0x0],r8
800074a0:	c1 38       	rjmp	800074c6 <_dtoa_r+0xb86>
800074a2:	33 9a       	mov	r10,57
800074a4:	0a 98       	mov	r8,r5
800074a6:	11 79       	ld.ub	r9,--r8
800074a8:	f4 09 18 00 	cp.b	r9,r10
800074ac:	cf 00       	breq	8000748c <_dtoa_r+0xb4c>
800074ae:	2f f9       	sub	r9,-1
800074b0:	b0 89       	st.b	r8[0x0],r9
800074b2:	c0 98       	rjmp	800074c4 <_dtoa_r+0xb84>
800074b4:	10 95       	mov	r5,r8
800074b6:	c0 28       	rjmp	800074ba <_dtoa_r+0xb7a>
800074b8:	33 09       	mov	r9,48
800074ba:	0a 98       	mov	r8,r5
800074bc:	11 7a       	ld.ub	r10,--r8
800074be:	f2 0a 18 00 	cp.b	r10,r9
800074c2:	cf 90       	breq	800074b4 <_dtoa_r+0xb74>
800074c4:	50 66       	stdsp	sp[0x18],r6
800074c6:	04 9b       	mov	r11,r2
800074c8:	0e 9c       	mov	r12,r7
800074ca:	e0 a0 07 1d 	rcall	80008304 <_Bfree>
800074ce:	58 04       	cp.w	r4,0
800074d0:	c1 20       	breq	800074f4 <_dtoa_r+0xbb4>
800074d2:	40 4b       	lddsp	r11,sp[0x10]
800074d4:	08 3b       	cp.w	r11,r4
800074d6:	5f 19       	srne	r9
800074d8:	58 0b       	cp.w	r11,0
800074da:	5f 18       	srne	r8
800074dc:	f3 e8 00 08 	and	r8,r9,r8
800074e0:	c0 40       	breq	800074e8 <_dtoa_r+0xba8>
800074e2:	0e 9c       	mov	r12,r7
800074e4:	e0 a0 07 10 	rcall	80008304 <_Bfree>
800074e8:	08 9b       	mov	r11,r4
800074ea:	0e 9c       	mov	r12,r7
800074ec:	e0 a0 07 0c 	rcall	80008304 <_Bfree>
800074f0:	c0 28       	rjmp	800074f4 <_dtoa_r+0xbb4>
800074f2:	50 66       	stdsp	sp[0x18],r6
800074f4:	0e 9c       	mov	r12,r7
800074f6:	06 9b       	mov	r11,r3
800074f8:	e0 a0 07 06 	rcall	80008304 <_Bfree>
800074fc:	30 08       	mov	r8,0
800074fe:	aa 88       	st.b	r5[0x0],r8
80007500:	40 68       	lddsp	r8,sp[0x18]
80007502:	41 5a       	lddsp	r10,sp[0x54]
80007504:	2f f8       	sub	r8,-1
80007506:	41 29       	lddsp	r9,sp[0x48]
80007508:	95 08       	st.w	r10[0x0],r8
8000750a:	40 8c       	lddsp	r12,sp[0x20]
8000750c:	58 09       	cp.w	r9,0
8000750e:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80007512:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80007516:	2e 6d       	sub	sp,-104
80007518:	d8 32       	popm	r0-r7,pc
8000751a:	d7 03       	nop

8000751c <_fflush_r>:
8000751c:	d4 21       	pushm	r4-r7,lr
8000751e:	16 97       	mov	r7,r11
80007520:	18 96       	mov	r6,r12
80007522:	76 48       	ld.w	r8,r11[0x10]
80007524:	58 08       	cp.w	r8,0
80007526:	c7 f0       	breq	80007624 <_fflush_r+0x108>
80007528:	58 0c       	cp.w	r12,0
8000752a:	c0 50       	breq	80007534 <_fflush_r+0x18>
8000752c:	78 68       	ld.w	r8,r12[0x18]
8000752e:	58 08       	cp.w	r8,0
80007530:	c0 21       	brne	80007534 <_fflush_r+0x18>
80007532:	cc dc       	rcall	800076cc <__sinit>
80007534:	fe c8 d4 10 	sub	r8,pc,-11248
80007538:	10 37       	cp.w	r7,r8
8000753a:	c0 31       	brne	80007540 <_fflush_r+0x24>
8000753c:	6c 07       	ld.w	r7,r6[0x0]
8000753e:	c0 c8       	rjmp	80007556 <_fflush_r+0x3a>
80007540:	fe c8 d3 fc 	sub	r8,pc,-11268
80007544:	10 37       	cp.w	r7,r8
80007546:	c0 31       	brne	8000754c <_fflush_r+0x30>
80007548:	6c 17       	ld.w	r7,r6[0x4]
8000754a:	c0 68       	rjmp	80007556 <_fflush_r+0x3a>
8000754c:	fe c8 d3 e8 	sub	r8,pc,-11288
80007550:	10 37       	cp.w	r7,r8
80007552:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80007556:	8e 6a       	ld.sh	r10,r7[0xc]
80007558:	14 98       	mov	r8,r10
8000755a:	ed ba 00 03 	bld	r10,0x3
8000755e:	c4 20       	breq	800075e2 <_fflush_r+0xc6>
80007560:	ab ba       	sbr	r10,0xb
80007562:	ae 6a       	st.h	r7[0xc],r10
80007564:	6e 18       	ld.w	r8,r7[0x4]
80007566:	58 08       	cp.w	r8,0
80007568:	e0 89 00 06 	brgt	80007574 <_fflush_r+0x58>
8000756c:	6f 08       	ld.w	r8,r7[0x40]
8000756e:	58 08       	cp.w	r8,0
80007570:	e0 8a 00 5a 	brle	80007624 <_fflush_r+0x108>
80007574:	6e b8       	ld.w	r8,r7[0x2c]
80007576:	58 08       	cp.w	r8,0
80007578:	c5 60       	breq	80007624 <_fflush_r+0x108>
8000757a:	e2 1a 10 00 	andl	r10,0x1000,COH
8000757e:	c0 30       	breq	80007584 <_fflush_r+0x68>
80007580:	6f 55       	ld.w	r5,r7[0x54]
80007582:	c0 f8       	rjmp	800075a0 <_fflush_r+0x84>
80007584:	30 19       	mov	r9,1
80007586:	6e 8b       	ld.w	r11,r7[0x20]
80007588:	0c 9c       	mov	r12,r6
8000758a:	5d 18       	icall	r8
8000758c:	18 95       	mov	r5,r12
8000758e:	5b fc       	cp.w	r12,-1
80007590:	c0 81       	brne	800075a0 <_fflush_r+0x84>
80007592:	6c 38       	ld.w	r8,r6[0xc]
80007594:	59 d8       	cp.w	r8,29
80007596:	c4 70       	breq	80007624 <_fflush_r+0x108>
80007598:	8e 68       	ld.sh	r8,r7[0xc]
8000759a:	a7 a8       	sbr	r8,0x6
8000759c:	ae 68       	st.h	r7[0xc],r8
8000759e:	d8 22       	popm	r4-r7,pc
800075a0:	8e 68       	ld.sh	r8,r7[0xc]
800075a2:	ed b8 00 02 	bld	r8,0x2
800075a6:	c0 91       	brne	800075b8 <_fflush_r+0x9c>
800075a8:	6e 18       	ld.w	r8,r7[0x4]
800075aa:	10 15       	sub	r5,r8
800075ac:	6e d8       	ld.w	r8,r7[0x34]
800075ae:	58 08       	cp.w	r8,0
800075b0:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800075b4:	eb d8 e1 15 	subne	r5,r5,r8
800075b8:	6e b8       	ld.w	r8,r7[0x2c]
800075ba:	0c 9c       	mov	r12,r6
800075bc:	30 09       	mov	r9,0
800075be:	0a 9a       	mov	r10,r5
800075c0:	6e 8b       	ld.w	r11,r7[0x20]
800075c2:	5d 18       	icall	r8
800075c4:	8e 68       	ld.sh	r8,r7[0xc]
800075c6:	0a 3c       	cp.w	r12,r5
800075c8:	c2 61       	brne	80007614 <_fflush_r+0xf8>
800075ca:	ab d8       	cbr	r8,0xb
800075cc:	30 0c       	mov	r12,0
800075ce:	6e 49       	ld.w	r9,r7[0x10]
800075d0:	ae 68       	st.h	r7[0xc],r8
800075d2:	8f 1c       	st.w	r7[0x4],r12
800075d4:	8f 09       	st.w	r7[0x0],r9
800075d6:	ed b8 00 0c 	bld	r8,0xc
800075da:	c2 51       	brne	80007624 <_fflush_r+0x108>
800075dc:	ef 45 00 54 	st.w	r7[84],r5
800075e0:	d8 22       	popm	r4-r7,pc
800075e2:	6e 45       	ld.w	r5,r7[0x10]
800075e4:	58 05       	cp.w	r5,0
800075e6:	c1 f0       	breq	80007624 <_fflush_r+0x108>
800075e8:	6e 04       	ld.w	r4,r7[0x0]
800075ea:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800075ee:	8f 05       	st.w	r7[0x0],r5
800075f0:	f9 b8 01 00 	movne	r8,0
800075f4:	ef f8 00 05 	ld.weq	r8,r7[0x14]
800075f8:	0a 14       	sub	r4,r5
800075fa:	8f 28       	st.w	r7[0x8],r8
800075fc:	c1 18       	rjmp	8000761e <_fflush_r+0x102>
800075fe:	08 99       	mov	r9,r4
80007600:	0a 9a       	mov	r10,r5
80007602:	6e a8       	ld.w	r8,r7[0x28]
80007604:	6e 8b       	ld.w	r11,r7[0x20]
80007606:	0c 9c       	mov	r12,r6
80007608:	5d 18       	icall	r8
8000760a:	18 14       	sub	r4,r12
8000760c:	58 0c       	cp.w	r12,0
8000760e:	e0 89 00 07 	brgt	8000761c <_fflush_r+0x100>
80007612:	8e 68       	ld.sh	r8,r7[0xc]
80007614:	a7 a8       	sbr	r8,0x6
80007616:	3f fc       	mov	r12,-1
80007618:	ae 68       	st.h	r7[0xc],r8
8000761a:	d8 22       	popm	r4-r7,pc
8000761c:	18 05       	add	r5,r12
8000761e:	58 04       	cp.w	r4,0
80007620:	fe 99 ff ef 	brgt	800075fe <_fflush_r+0xe2>
80007624:	d8 2a       	popm	r4-r7,pc,r12=0
80007626:	d7 03       	nop

80007628 <__sfp_lock_acquire>:
80007628:	5e fc       	retal	r12

8000762a <__sfp_lock_release>:
8000762a:	5e fc       	retal	r12

8000762c <_cleanup_r>:
8000762c:	d4 01       	pushm	lr
8000762e:	fe cb e8 6a 	sub	r11,pc,-6038
80007632:	e0 a0 02 fd 	rcall	80007c2c <_fwalk>
80007636:	d8 02       	popm	pc

80007638 <__sfmoreglue>:
80007638:	d4 21       	pushm	r4-r7,lr
8000763a:	16 95       	mov	r5,r11
8000763c:	f6 06 10 5c 	mul	r6,r11,92
80007640:	ec cb ff f4 	sub	r11,r6,-12
80007644:	e0 a0 03 84 	rcall	80007d4c <_malloc_r>
80007648:	18 97       	mov	r7,r12
8000764a:	c0 90       	breq	8000765c <__sfmoreglue+0x24>
8000764c:	99 15       	st.w	r12[0x4],r5
8000764e:	30 0b       	mov	r11,0
80007650:	2f 4c       	sub	r12,-12
80007652:	0c 9a       	mov	r10,r6
80007654:	8f 2c       	st.w	r7[0x8],r12
80007656:	8f 0b       	st.w	r7[0x0],r11
80007658:	e0 a0 05 bc 	rcall	800081d0 <memset>
8000765c:	0e 9c       	mov	r12,r7
8000765e:	d8 22       	popm	r4-r7,pc

80007660 <__sfp>:
80007660:	d4 21       	pushm	r4-r7,lr
80007662:	fe c8 d4 da 	sub	r8,pc,-11046
80007666:	18 96       	mov	r6,r12
80007668:	70 07       	ld.w	r7,r8[0x0]
8000766a:	6e 68       	ld.w	r8,r7[0x18]
8000766c:	58 08       	cp.w	r8,0
8000766e:	c0 31       	brne	80007674 <__sfp+0x14>
80007670:	0e 9c       	mov	r12,r7
80007672:	c2 dc       	rcall	800076cc <__sinit>
80007674:	ee c7 ff 28 	sub	r7,r7,-216
80007678:	30 05       	mov	r5,0
8000767a:	6e 2c       	ld.w	r12,r7[0x8]
8000767c:	6e 18       	ld.w	r8,r7[0x4]
8000767e:	c0 68       	rjmp	8000768a <__sfp+0x2a>
80007680:	98 69       	ld.sh	r9,r12[0xc]
80007682:	ea 09 19 00 	cp.h	r9,r5
80007686:	c1 10       	breq	800076a8 <__sfp+0x48>
80007688:	2a 4c       	sub	r12,-92
8000768a:	20 18       	sub	r8,1
8000768c:	cf a7       	brpl	80007680 <__sfp+0x20>
8000768e:	6e 08       	ld.w	r8,r7[0x0]
80007690:	58 08       	cp.w	r8,0
80007692:	c0 61       	brne	8000769e <__sfp+0x3e>
80007694:	30 4b       	mov	r11,4
80007696:	0c 9c       	mov	r12,r6
80007698:	cd 0f       	rcall	80007638 <__sfmoreglue>
8000769a:	8f 0c       	st.w	r7[0x0],r12
8000769c:	c0 30       	breq	800076a2 <__sfp+0x42>
8000769e:	6e 07       	ld.w	r7,r7[0x0]
800076a0:	ce db       	rjmp	8000767a <__sfp+0x1a>
800076a2:	30 c8       	mov	r8,12
800076a4:	8d 38       	st.w	r6[0xc],r8
800076a6:	d8 22       	popm	r4-r7,pc
800076a8:	30 08       	mov	r8,0
800076aa:	f9 48 00 4c 	st.w	r12[76],r8
800076ae:	99 08       	st.w	r12[0x0],r8
800076b0:	99 28       	st.w	r12[0x8],r8
800076b2:	99 18       	st.w	r12[0x4],r8
800076b4:	99 48       	st.w	r12[0x10],r8
800076b6:	99 58       	st.w	r12[0x14],r8
800076b8:	99 68       	st.w	r12[0x18],r8
800076ba:	99 d8       	st.w	r12[0x34],r8
800076bc:	99 e8       	st.w	r12[0x38],r8
800076be:	f9 48 00 48 	st.w	r12[72],r8
800076c2:	3f f8       	mov	r8,-1
800076c4:	b8 78       	st.h	r12[0xe],r8
800076c6:	30 18       	mov	r8,1
800076c8:	b8 68       	st.h	r12[0xc],r8
800076ca:	d8 22       	popm	r4-r7,pc

800076cc <__sinit>:
800076cc:	d4 21       	pushm	r4-r7,lr
800076ce:	18 96       	mov	r6,r12
800076d0:	78 67       	ld.w	r7,r12[0x18]
800076d2:	58 07       	cp.w	r7,0
800076d4:	c4 91       	brne	80007766 <__sinit+0x9a>
800076d6:	fe c8 00 aa 	sub	r8,pc,170
800076da:	30 15       	mov	r5,1
800076dc:	99 a8       	st.w	r12[0x28],r8
800076de:	f9 47 00 d8 	st.w	r12[216],r7
800076e2:	f9 47 00 dc 	st.w	r12[220],r7
800076e6:	f9 47 00 e0 	st.w	r12[224],r7
800076ea:	99 65       	st.w	r12[0x18],r5
800076ec:	cb af       	rcall	80007660 <__sfp>
800076ee:	8d 0c       	st.w	r6[0x0],r12
800076f0:	0c 9c       	mov	r12,r6
800076f2:	cb 7f       	rcall	80007660 <__sfp>
800076f4:	8d 1c       	st.w	r6[0x4],r12
800076f6:	0c 9c       	mov	r12,r6
800076f8:	cb 4f       	rcall	80007660 <__sfp>
800076fa:	6c 09       	ld.w	r9,r6[0x0]
800076fc:	30 48       	mov	r8,4
800076fe:	93 07       	st.w	r9[0x0],r7
80007700:	b2 68       	st.h	r9[0xc],r8
80007702:	93 17       	st.w	r9[0x4],r7
80007704:	93 27       	st.w	r9[0x8],r7
80007706:	6c 18       	ld.w	r8,r6[0x4]
80007708:	b2 77       	st.h	r9[0xe],r7
8000770a:	93 47       	st.w	r9[0x10],r7
8000770c:	93 57       	st.w	r9[0x14],r7
8000770e:	93 67       	st.w	r9[0x18],r7
80007710:	93 89       	st.w	r9[0x20],r9
80007712:	91 07       	st.w	r8[0x0],r7
80007714:	91 17       	st.w	r8[0x4],r7
80007716:	91 27       	st.w	r8[0x8],r7
80007718:	fe ce eb e4 	sub	lr,pc,-5148
8000771c:	fe cb ec 14 	sub	r11,pc,-5100
80007720:	93 9e       	st.w	r9[0x24],lr
80007722:	93 ab       	st.w	r9[0x28],r11
80007724:	fe ca ec 3c 	sub	r10,pc,-5060
80007728:	fe c4 ec 48 	sub	r4,pc,-5048
8000772c:	93 ba       	st.w	r9[0x2c],r10
8000772e:	93 c4       	st.w	r9[0x30],r4
80007730:	30 99       	mov	r9,9
80007732:	b0 69       	st.h	r8[0xc],r9
80007734:	b0 75       	st.h	r8[0xe],r5
80007736:	91 c4       	st.w	r8[0x30],r4
80007738:	91 47       	st.w	r8[0x10],r7
8000773a:	91 57       	st.w	r8[0x14],r7
8000773c:	91 67       	st.w	r8[0x18],r7
8000773e:	91 88       	st.w	r8[0x20],r8
80007740:	91 9e       	st.w	r8[0x24],lr
80007742:	91 ab       	st.w	r8[0x28],r11
80007744:	91 ba       	st.w	r8[0x2c],r10
80007746:	8d 2c       	st.w	r6[0x8],r12
80007748:	31 28       	mov	r8,18
8000774a:	99 07       	st.w	r12[0x0],r7
8000774c:	b8 68       	st.h	r12[0xc],r8
8000774e:	99 17       	st.w	r12[0x4],r7
80007750:	99 27       	st.w	r12[0x8],r7
80007752:	30 28       	mov	r8,2
80007754:	b8 78       	st.h	r12[0xe],r8
80007756:	99 c4       	st.w	r12[0x30],r4
80007758:	99 67       	st.w	r12[0x18],r7
8000775a:	99 9e       	st.w	r12[0x24],lr
8000775c:	99 ab       	st.w	r12[0x28],r11
8000775e:	99 ba       	st.w	r12[0x2c],r10
80007760:	99 47       	st.w	r12[0x10],r7
80007762:	99 57       	st.w	r12[0x14],r7
80007764:	99 8c       	st.w	r12[0x20],r12
80007766:	d8 22       	popm	r4-r7,pc

80007768 <_malloc_trim_r>:
80007768:	d4 21       	pushm	r4-r7,lr
8000776a:	16 95       	mov	r5,r11
8000776c:	18 97       	mov	r7,r12
8000776e:	e0 a0 05 38 	rcall	800081de <__malloc_lock>
80007772:	e0 64 01 00 	mov	r4,256
80007776:	68 28       	ld.w	r8,r4[0x8]
80007778:	70 16       	ld.w	r6,r8[0x4]
8000777a:	e0 16 ff fc 	andl	r6,0xfffc
8000777e:	ec c8 ff 91 	sub	r8,r6,-111
80007782:	f0 05 01 05 	sub	r5,r8,r5
80007786:	e0 15 ff 80 	andl	r5,0xff80
8000778a:	ea c5 00 80 	sub	r5,r5,128
8000778e:	e0 45 00 7f 	cp.w	r5,127
80007792:	e0 8a 00 25 	brle	800077dc <_malloc_trim_r+0x74>
80007796:	30 0b       	mov	r11,0
80007798:	0e 9c       	mov	r12,r7
8000779a:	e0 a0 09 93 	rcall	80008ac0 <_sbrk_r>
8000779e:	68 28       	ld.w	r8,r4[0x8]
800077a0:	0c 08       	add	r8,r6
800077a2:	10 3c       	cp.w	r12,r8
800077a4:	c1 c1       	brne	800077dc <_malloc_trim_r+0x74>
800077a6:	ea 0b 11 00 	rsub	r11,r5,0
800077aa:	0e 9c       	mov	r12,r7
800077ac:	e0 a0 09 8a 	rcall	80008ac0 <_sbrk_r>
800077b0:	5b fc       	cp.w	r12,-1
800077b2:	c1 91       	brne	800077e4 <_malloc_trim_r+0x7c>
800077b4:	30 0b       	mov	r11,0
800077b6:	0e 9c       	mov	r12,r7
800077b8:	e0 a0 09 84 	rcall	80008ac0 <_sbrk_r>
800077bc:	68 28       	ld.w	r8,r4[0x8]
800077be:	f8 08 01 09 	sub	r9,r12,r8
800077c2:	58 f9       	cp.w	r9,15
800077c4:	e0 8a 00 0c 	brle	800077dc <_malloc_trim_r+0x74>
800077c8:	a1 a9       	sbr	r9,0x0
800077ca:	91 19       	st.w	r8[0x4],r9
800077cc:	e0 68 05 0c 	mov	r8,1292
800077d0:	70 09       	ld.w	r9,r8[0x0]
800077d2:	e0 68 06 2c 	mov	r8,1580
800077d6:	f8 09 01 09 	sub	r9,r12,r9
800077da:	91 09       	st.w	r8[0x0],r9
800077dc:	0e 9c       	mov	r12,r7
800077de:	e0 a0 05 01 	rcall	800081e0 <__malloc_unlock>
800077e2:	d8 2a       	popm	r4-r7,pc,r12=0
800077e4:	68 28       	ld.w	r8,r4[0x8]
800077e6:	0a 16       	sub	r6,r5
800077e8:	a1 a6       	sbr	r6,0x0
800077ea:	91 16       	st.w	r8[0x4],r6
800077ec:	e0 68 06 2c 	mov	r8,1580
800077f0:	70 09       	ld.w	r9,r8[0x0]
800077f2:	0a 19       	sub	r9,r5
800077f4:	0e 9c       	mov	r12,r7
800077f6:	91 09       	st.w	r8[0x0],r9
800077f8:	e0 a0 04 f4 	rcall	800081e0 <__malloc_unlock>
800077fc:	da 2a       	popm	r4-r7,pc,r12=1
800077fe:	d7 03       	nop

80007800 <_free_r>:
80007800:	d4 21       	pushm	r4-r7,lr
80007802:	16 96       	mov	r6,r11
80007804:	18 97       	mov	r7,r12
80007806:	58 0b       	cp.w	r11,0
80007808:	e0 80 00 c0 	breq	80007988 <_free_r+0x188>
8000780c:	e0 a0 04 e9 	rcall	800081de <__malloc_lock>
80007810:	20 86       	sub	r6,8
80007812:	e0 6a 01 00 	mov	r10,256
80007816:	6c 18       	ld.w	r8,r6[0x4]
80007818:	74 2e       	ld.w	lr,r10[0x8]
8000781a:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
8000781e:	a1 c8       	cbr	r8,0x0
80007820:	ec 08 00 09 	add	r9,r6,r8
80007824:	72 1b       	ld.w	r11,r9[0x4]
80007826:	e0 1b ff fc 	andl	r11,0xfffc
8000782a:	1c 39       	cp.w	r9,lr
8000782c:	c1 e1       	brne	80007868 <_free_r+0x68>
8000782e:	f6 08 00 08 	add	r8,r11,r8
80007832:	58 0c       	cp.w	r12,0
80007834:	c0 81       	brne	80007844 <_free_r+0x44>
80007836:	6c 09       	ld.w	r9,r6[0x0]
80007838:	12 16       	sub	r6,r9
8000783a:	12 08       	add	r8,r9
8000783c:	6c 3b       	ld.w	r11,r6[0xc]
8000783e:	6c 29       	ld.w	r9,r6[0x8]
80007840:	97 29       	st.w	r11[0x8],r9
80007842:	93 3b       	st.w	r9[0xc],r11
80007844:	10 99       	mov	r9,r8
80007846:	95 26       	st.w	r10[0x8],r6
80007848:	a1 a9       	sbr	r9,0x0
8000784a:	8d 19       	st.w	r6[0x4],r9
8000784c:	e0 69 05 08 	mov	r9,1288
80007850:	72 09       	ld.w	r9,r9[0x0]
80007852:	12 38       	cp.w	r8,r9
80007854:	c0 63       	brcs	80007860 <_free_r+0x60>
80007856:	e0 68 06 28 	mov	r8,1576
8000785a:	0e 9c       	mov	r12,r7
8000785c:	70 0b       	ld.w	r11,r8[0x0]
8000785e:	c8 5f       	rcall	80007768 <_malloc_trim_r>
80007860:	0e 9c       	mov	r12,r7
80007862:	e0 a0 04 bf 	rcall	800081e0 <__malloc_unlock>
80007866:	d8 22       	popm	r4-r7,pc
80007868:	93 1b       	st.w	r9[0x4],r11
8000786a:	58 0c       	cp.w	r12,0
8000786c:	c0 30       	breq	80007872 <_free_r+0x72>
8000786e:	30 0c       	mov	r12,0
80007870:	c1 08       	rjmp	80007890 <_free_r+0x90>
80007872:	6c 0e       	ld.w	lr,r6[0x0]
80007874:	f4 c5 ff f8 	sub	r5,r10,-8
80007878:	1c 16       	sub	r6,lr
8000787a:	1c 08       	add	r8,lr
8000787c:	6c 2e       	ld.w	lr,r6[0x8]
8000787e:	0a 3e       	cp.w	lr,r5
80007880:	f9 bc 00 01 	moveq	r12,1
80007884:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80007888:	eb fe 1a 02 	st.wne	r5[0x8],lr
8000788c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80007890:	f2 0b 00 0e 	add	lr,r9,r11
80007894:	7c 1e       	ld.w	lr,lr[0x4]
80007896:	ed be 00 00 	bld	lr,0x0
8000789a:	c1 40       	breq	800078c2 <_free_r+0xc2>
8000789c:	16 08       	add	r8,r11
8000789e:	58 0c       	cp.w	r12,0
800078a0:	c0 d1       	brne	800078ba <_free_r+0xba>
800078a2:	e0 6e 01 00 	mov	lr,256
800078a6:	72 2b       	ld.w	r11,r9[0x8]
800078a8:	2f 8e       	sub	lr,-8
800078aa:	1c 3b       	cp.w	r11,lr
800078ac:	c0 71       	brne	800078ba <_free_r+0xba>
800078ae:	97 36       	st.w	r11[0xc],r6
800078b0:	97 26       	st.w	r11[0x8],r6
800078b2:	8d 2b       	st.w	r6[0x8],r11
800078b4:	8d 3b       	st.w	r6[0xc],r11
800078b6:	30 1c       	mov	r12,1
800078b8:	c0 58       	rjmp	800078c2 <_free_r+0xc2>
800078ba:	72 2b       	ld.w	r11,r9[0x8]
800078bc:	72 39       	ld.w	r9,r9[0xc]
800078be:	93 2b       	st.w	r9[0x8],r11
800078c0:	97 39       	st.w	r11[0xc],r9
800078c2:	10 99       	mov	r9,r8
800078c4:	ec 08 09 08 	st.w	r6[r8],r8
800078c8:	a1 a9       	sbr	r9,0x0
800078ca:	8d 19       	st.w	r6[0x4],r9
800078cc:	58 0c       	cp.w	r12,0
800078ce:	c5 a1       	brne	80007982 <_free_r+0x182>
800078d0:	e0 48 01 ff 	cp.w	r8,511
800078d4:	e0 8b 00 13 	brhi	800078fa <_free_r+0xfa>
800078d8:	a3 98       	lsr	r8,0x3
800078da:	f4 08 00 39 	add	r9,r10,r8<<0x3
800078de:	72 2b       	ld.w	r11,r9[0x8]
800078e0:	8d 39       	st.w	r6[0xc],r9
800078e2:	8d 2b       	st.w	r6[0x8],r11
800078e4:	97 36       	st.w	r11[0xc],r6
800078e6:	93 26       	st.w	r9[0x8],r6
800078e8:	a3 48       	asr	r8,0x2
800078ea:	74 19       	ld.w	r9,r10[0x4]
800078ec:	30 1b       	mov	r11,1
800078ee:	f6 08 09 48 	lsl	r8,r11,r8
800078f2:	f3 e8 10 08 	or	r8,r9,r8
800078f6:	95 18       	st.w	r10[0x4],r8
800078f8:	c4 58       	rjmp	80007982 <_free_r+0x182>
800078fa:	f0 0b 16 09 	lsr	r11,r8,0x9
800078fe:	58 4b       	cp.w	r11,4
80007900:	e0 8b 00 06 	brhi	8000790c <_free_r+0x10c>
80007904:	f0 0b 16 06 	lsr	r11,r8,0x6
80007908:	2c 8b       	sub	r11,-56
8000790a:	c2 08       	rjmp	8000794a <_free_r+0x14a>
8000790c:	59 4b       	cp.w	r11,20
8000790e:	e0 8b 00 04 	brhi	80007916 <_free_r+0x116>
80007912:	2a 5b       	sub	r11,-91
80007914:	c1 b8       	rjmp	8000794a <_free_r+0x14a>
80007916:	e0 4b 00 54 	cp.w	r11,84
8000791a:	e0 8b 00 06 	brhi	80007926 <_free_r+0x126>
8000791e:	f0 0b 16 0c 	lsr	r11,r8,0xc
80007922:	29 2b       	sub	r11,-110
80007924:	c1 38       	rjmp	8000794a <_free_r+0x14a>
80007926:	e0 4b 01 54 	cp.w	r11,340
8000792a:	e0 8b 00 06 	brhi	80007936 <_free_r+0x136>
8000792e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80007932:	28 9b       	sub	r11,-119
80007934:	c0 b8       	rjmp	8000794a <_free_r+0x14a>
80007936:	e0 4b 05 54 	cp.w	r11,1364
8000793a:	e0 88 00 05 	brls	80007944 <_free_r+0x144>
8000793e:	37 eb       	mov	r11,126
80007940:	c0 58       	rjmp	8000794a <_free_r+0x14a>
80007942:	d7 03       	nop
80007944:	f0 0b 16 12 	lsr	r11,r8,0x12
80007948:	28 4b       	sub	r11,-124
8000794a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8000794e:	78 29       	ld.w	r9,r12[0x8]
80007950:	18 39       	cp.w	r9,r12
80007952:	c0 e1       	brne	8000796e <_free_r+0x16e>
80007954:	74 18       	ld.w	r8,r10[0x4]
80007956:	a3 4b       	asr	r11,0x2
80007958:	30 1c       	mov	r12,1
8000795a:	f8 0b 09 4b 	lsl	r11,r12,r11
8000795e:	f1 eb 10 0b 	or	r11,r8,r11
80007962:	12 98       	mov	r8,r9
80007964:	95 1b       	st.w	r10[0x4],r11
80007966:	c0 a8       	rjmp	8000797a <_free_r+0x17a>
80007968:	72 29       	ld.w	r9,r9[0x8]
8000796a:	18 39       	cp.w	r9,r12
8000796c:	c0 60       	breq	80007978 <_free_r+0x178>
8000796e:	72 1a       	ld.w	r10,r9[0x4]
80007970:	e0 1a ff fc 	andl	r10,0xfffc
80007974:	14 38       	cp.w	r8,r10
80007976:	cf 93       	brcs	80007968 <_free_r+0x168>
80007978:	72 38       	ld.w	r8,r9[0xc]
8000797a:	8d 38       	st.w	r6[0xc],r8
8000797c:	8d 29       	st.w	r6[0x8],r9
8000797e:	93 36       	st.w	r9[0xc],r6
80007980:	91 26       	st.w	r8[0x8],r6
80007982:	0e 9c       	mov	r12,r7
80007984:	e0 a0 04 2e 	rcall	800081e0 <__malloc_unlock>
80007988:	d8 22       	popm	r4-r7,pc
8000798a:	d7 03       	nop

8000798c <__sfvwrite_r>:
8000798c:	d4 31       	pushm	r0-r7,lr
8000798e:	20 3d       	sub	sp,12
80007990:	14 94       	mov	r4,r10
80007992:	18 95       	mov	r5,r12
80007994:	16 97       	mov	r7,r11
80007996:	74 28       	ld.w	r8,r10[0x8]
80007998:	58 08       	cp.w	r8,0
8000799a:	e0 80 01 45 	breq	80007c24 <__sfvwrite_r+0x298>
8000799e:	96 68       	ld.sh	r8,r11[0xc]
800079a0:	ed b8 00 03 	bld	r8,0x3
800079a4:	c0 41       	brne	800079ac <__sfvwrite_r+0x20>
800079a6:	76 48       	ld.w	r8,r11[0x10]
800079a8:	58 08       	cp.w	r8,0
800079aa:	c0 c1       	brne	800079c2 <__sfvwrite_r+0x36>
800079ac:	0e 9b       	mov	r11,r7
800079ae:	0a 9c       	mov	r12,r5
800079b0:	fe b0 f6 ca 	rcall	80006744 <__swsetup_r>
800079b4:	c0 70       	breq	800079c2 <__sfvwrite_r+0x36>
800079b6:	8e 68       	ld.sh	r8,r7[0xc]
800079b8:	a7 a8       	sbr	r8,0x6
800079ba:	ae 68       	st.h	r7[0xc],r8
800079bc:	30 98       	mov	r8,9
800079be:	8b 38       	st.w	r5[0xc],r8
800079c0:	c3 09       	rjmp	80007c20 <__sfvwrite_r+0x294>
800079c2:	8e 63       	ld.sh	r3,r7[0xc]
800079c4:	68 00       	ld.w	r0,r4[0x0]
800079c6:	06 96       	mov	r6,r3
800079c8:	e2 16 00 02 	andl	r6,0x2,COH
800079cc:	c2 10       	breq	80007a0e <__sfvwrite_r+0x82>
800079ce:	30 03       	mov	r3,0
800079d0:	e0 62 04 00 	mov	r2,1024
800079d4:	06 96       	mov	r6,r3
800079d6:	c0 48       	rjmp	800079de <__sfvwrite_r+0x52>
800079d8:	60 03       	ld.w	r3,r0[0x0]
800079da:	60 16       	ld.w	r6,r0[0x4]
800079dc:	2f 80       	sub	r0,-8
800079de:	58 06       	cp.w	r6,0
800079e0:	cf c0       	breq	800079d8 <__sfvwrite_r+0x4c>
800079e2:	e0 46 04 00 	cp.w	r6,1024
800079e6:	ec 09 17 80 	movls	r9,r6
800079ea:	e4 09 17 b0 	movhi	r9,r2
800079ee:	06 9a       	mov	r10,r3
800079f0:	6e a8       	ld.w	r8,r7[0x28]
800079f2:	6e 8b       	ld.w	r11,r7[0x20]
800079f4:	0a 9c       	mov	r12,r5
800079f6:	5d 18       	icall	r8
800079f8:	18 16       	sub	r6,r12
800079fa:	58 0c       	cp.w	r12,0
800079fc:	e0 8a 01 0f 	brle	80007c1a <__sfvwrite_r+0x28e>
80007a00:	68 28       	ld.w	r8,r4[0x8]
80007a02:	18 18       	sub	r8,r12
80007a04:	89 28       	st.w	r4[0x8],r8
80007a06:	e0 80 01 0f 	breq	80007c24 <__sfvwrite_r+0x298>
80007a0a:	18 03       	add	r3,r12
80007a0c:	ce 9b       	rjmp	800079de <__sfvwrite_r+0x52>
80007a0e:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80007a12:	c0 70       	breq	80007a20 <__sfvwrite_r+0x94>
80007a14:	50 06       	stdsp	sp[0x0],r6
80007a16:	0c 93       	mov	r3,r6
80007a18:	0c 91       	mov	r1,r6
80007a1a:	50 15       	stdsp	sp[0x4],r5
80007a1c:	08 92       	mov	r2,r4
80007a1e:	c9 e8       	rjmp	80007b5a <__sfvwrite_r+0x1ce>
80007a20:	06 96       	mov	r6,r3
80007a22:	08 91       	mov	r1,r4
80007a24:	c0 48       	rjmp	80007a2c <__sfvwrite_r+0xa0>
80007a26:	60 03       	ld.w	r3,r0[0x0]
80007a28:	60 16       	ld.w	r6,r0[0x4]
80007a2a:	2f 80       	sub	r0,-8
80007a2c:	58 06       	cp.w	r6,0
80007a2e:	cf c0       	breq	80007a26 <__sfvwrite_r+0x9a>
80007a30:	8e 68       	ld.sh	r8,r7[0xc]
80007a32:	6e 24       	ld.w	r4,r7[0x8]
80007a34:	10 99       	mov	r9,r8
80007a36:	e2 19 02 00 	andl	r9,0x200,COH
80007a3a:	c5 50       	breq	80007ae4 <__sfvwrite_r+0x158>
80007a3c:	08 36       	cp.w	r6,r4
80007a3e:	c4 33       	brcs	80007ac4 <__sfvwrite_r+0x138>
80007a40:	10 99       	mov	r9,r8
80007a42:	e2 19 04 80 	andl	r9,0x480,COH
80007a46:	c3 f0       	breq	80007ac4 <__sfvwrite_r+0x138>
80007a48:	6e 4b       	ld.w	r11,r7[0x10]
80007a4a:	6e 09       	ld.w	r9,r7[0x0]
80007a4c:	16 19       	sub	r9,r11
80007a4e:	50 09       	stdsp	sp[0x0],r9
80007a50:	6e 59       	ld.w	r9,r7[0x14]
80007a52:	10 9c       	mov	r12,r8
80007a54:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80007a58:	30 28       	mov	r8,2
80007a5a:	f4 08 0c 08 	divs	r8,r10,r8
80007a5e:	fa e9 00 04 	st.d	sp[4],r8
80007a62:	10 94       	mov	r4,r8
80007a64:	40 09       	lddsp	r9,sp[0x0]
80007a66:	e2 1c 04 00 	andl	r12,0x400,COH
80007a6a:	2f f9       	sub	r9,-1
80007a6c:	0c 09       	add	r9,r6
80007a6e:	12 38       	cp.w	r8,r9
80007a70:	f2 04 17 30 	movlo	r4,r9
80007a74:	58 0c       	cp.w	r12,0
80007a76:	c1 00       	breq	80007a96 <__sfvwrite_r+0x10a>
80007a78:	08 9b       	mov	r11,r4
80007a7a:	0a 9c       	mov	r12,r5
80007a7c:	c6 8d       	rcall	80007d4c <_malloc_r>
80007a7e:	18 92       	mov	r2,r12
80007a80:	c1 40       	breq	80007aa8 <__sfvwrite_r+0x11c>
80007a82:	40 0a       	lddsp	r10,sp[0x0]
80007a84:	6e 4b       	ld.w	r11,r7[0x10]
80007a86:	fe b0 e4 7c 	rcall	8000437e <memcpy>
80007a8a:	8e 68       	ld.sh	r8,r7[0xc]
80007a8c:	e0 18 fb 7f 	andl	r8,0xfb7f
80007a90:	a7 b8       	sbr	r8,0x7
80007a92:	ae 68       	st.h	r7[0xc],r8
80007a94:	c0 d8       	rjmp	80007aae <__sfvwrite_r+0x122>
80007a96:	08 9a       	mov	r10,r4
80007a98:	0a 9c       	mov	r12,r5
80007a9a:	e0 a0 06 8f 	rcall	800087b8 <_realloc_r>
80007a9e:	18 92       	mov	r2,r12
80007aa0:	c0 71       	brne	80007aae <__sfvwrite_r+0x122>
80007aa2:	6e 4b       	ld.w	r11,r7[0x10]
80007aa4:	0a 9c       	mov	r12,r5
80007aa6:	ca de       	rcall	80007800 <_free_r>
80007aa8:	30 c8       	mov	r8,12
80007aaa:	8b 38       	st.w	r5[0xc],r8
80007aac:	cb 78       	rjmp	80007c1a <__sfvwrite_r+0x28e>
80007aae:	40 0a       	lddsp	r10,sp[0x0]
80007ab0:	40 09       	lddsp	r9,sp[0x0]
80007ab2:	e8 0a 01 0a 	sub	r10,r4,r10
80007ab6:	e4 09 00 08 	add	r8,r2,r9
80007aba:	8f 54       	st.w	r7[0x14],r4
80007abc:	8f 2a       	st.w	r7[0x8],r10
80007abe:	8f 08       	st.w	r7[0x0],r8
80007ac0:	8f 42       	st.w	r7[0x10],r2
80007ac2:	0c 94       	mov	r4,r6
80007ac4:	08 36       	cp.w	r6,r4
80007ac6:	ec 04 17 30 	movlo	r4,r6
80007aca:	06 9b       	mov	r11,r3
80007acc:	08 9a       	mov	r10,r4
80007ace:	6e 0c       	ld.w	r12,r7[0x0]
80007ad0:	e0 a0 03 61 	rcall	80008192 <memmove>
80007ad4:	6e 08       	ld.w	r8,r7[0x0]
80007ad6:	08 08       	add	r8,r4
80007ad8:	8f 08       	st.w	r7[0x0],r8
80007ada:	6e 28       	ld.w	r8,r7[0x8]
80007adc:	08 18       	sub	r8,r4
80007ade:	0c 94       	mov	r4,r6
80007ae0:	8f 28       	st.w	r7[0x8],r8
80007ae2:	c3 08       	rjmp	80007b42 <__sfvwrite_r+0x1b6>
80007ae4:	08 36       	cp.w	r6,r4
80007ae6:	5f ba       	srhi	r10
80007ae8:	6e 0c       	ld.w	r12,r7[0x0]
80007aea:	6e 48       	ld.w	r8,r7[0x10]
80007aec:	10 3c       	cp.w	r12,r8
80007aee:	5f b8       	srhi	r8
80007af0:	f5 e8 00 08 	and	r8,r10,r8
80007af4:	f2 08 18 00 	cp.b	r8,r9
80007af8:	c0 e0       	breq	80007b14 <__sfvwrite_r+0x188>
80007afa:	06 9b       	mov	r11,r3
80007afc:	08 9a       	mov	r10,r4
80007afe:	e0 a0 03 4a 	rcall	80008192 <memmove>
80007b02:	6e 08       	ld.w	r8,r7[0x0]
80007b04:	08 08       	add	r8,r4
80007b06:	0e 9b       	mov	r11,r7
80007b08:	8f 08       	st.w	r7[0x0],r8
80007b0a:	0a 9c       	mov	r12,r5
80007b0c:	fe b0 fd 08 	rcall	8000751c <_fflush_r>
80007b10:	c1 90       	breq	80007b42 <__sfvwrite_r+0x1b6>
80007b12:	c8 48       	rjmp	80007c1a <__sfvwrite_r+0x28e>
80007b14:	6e 59       	ld.w	r9,r7[0x14]
80007b16:	12 36       	cp.w	r6,r9
80007b18:	c0 a3       	brcs	80007b2c <__sfvwrite_r+0x1a0>
80007b1a:	6e a8       	ld.w	r8,r7[0x28]
80007b1c:	06 9a       	mov	r10,r3
80007b1e:	6e 8b       	ld.w	r11,r7[0x20]
80007b20:	0a 9c       	mov	r12,r5
80007b22:	5d 18       	icall	r8
80007b24:	18 94       	mov	r4,r12
80007b26:	e0 89 00 0e 	brgt	80007b42 <__sfvwrite_r+0x1b6>
80007b2a:	c7 88       	rjmp	80007c1a <__sfvwrite_r+0x28e>
80007b2c:	0c 9a       	mov	r10,r6
80007b2e:	06 9b       	mov	r11,r3
80007b30:	e0 a0 03 31 	rcall	80008192 <memmove>
80007b34:	6e 08       	ld.w	r8,r7[0x0]
80007b36:	0c 08       	add	r8,r6
80007b38:	0c 94       	mov	r4,r6
80007b3a:	8f 08       	st.w	r7[0x0],r8
80007b3c:	6e 28       	ld.w	r8,r7[0x8]
80007b3e:	0c 18       	sub	r8,r6
80007b40:	8f 28       	st.w	r7[0x8],r8
80007b42:	62 28       	ld.w	r8,r1[0x8]
80007b44:	08 18       	sub	r8,r4
80007b46:	83 28       	st.w	r1[0x8],r8
80007b48:	c6 e0       	breq	80007c24 <__sfvwrite_r+0x298>
80007b4a:	08 16       	sub	r6,r4
80007b4c:	08 03       	add	r3,r4
80007b4e:	c6 fb       	rjmp	80007a2c <__sfvwrite_r+0xa0>
80007b50:	60 03       	ld.w	r3,r0[0x0]
80007b52:	60 11       	ld.w	r1,r0[0x4]
80007b54:	30 08       	mov	r8,0
80007b56:	2f 80       	sub	r0,-8
80007b58:	50 08       	stdsp	sp[0x0],r8
80007b5a:	58 01       	cp.w	r1,0
80007b5c:	cf a0       	breq	80007b50 <__sfvwrite_r+0x1c4>
80007b5e:	40 0a       	lddsp	r10,sp[0x0]
80007b60:	58 0a       	cp.w	r10,0
80007b62:	c1 51       	brne	80007b8c <__sfvwrite_r+0x200>
80007b64:	e2 c6 ff ff 	sub	r6,r1,-1
80007b68:	02 9a       	mov	r10,r1
80007b6a:	30 ab       	mov	r11,10
80007b6c:	06 9c       	mov	r12,r3
80007b6e:	e0 a0 03 07 	rcall	8000817c <memchr>
80007b72:	f8 c8 ff ff 	sub	r8,r12,-1
80007b76:	58 0c       	cp.w	r12,0
80007b78:	f1 d3 e1 16 	subne	r6,r8,r3
80007b7c:	f9 b9 01 01 	movne	r9,1
80007b80:	fb f9 1a 00 	st.wne	sp[0x0],r9
80007b84:	f9 b8 00 01 	moveq	r8,1
80007b88:	fb f8 0a 00 	st.weq	sp[0x0],r8
80007b8c:	02 36       	cp.w	r6,r1
80007b8e:	ec 04 17 80 	movls	r4,r6
80007b92:	e2 04 17 b0 	movhi	r4,r1
80007b96:	6e 59       	ld.w	r9,r7[0x14]
80007b98:	6e 25       	ld.w	r5,r7[0x8]
80007b9a:	f2 05 00 05 	add	r5,r9,r5
80007b9e:	0a 34       	cp.w	r4,r5
80007ba0:	5f 9a       	srgt	r10
80007ba2:	6e 0c       	ld.w	r12,r7[0x0]
80007ba4:	6e 48       	ld.w	r8,r7[0x10]
80007ba6:	10 3c       	cp.w	r12,r8
80007ba8:	5f b8       	srhi	r8
80007baa:	f5 e8 00 08 	and	r8,r10,r8
80007bae:	30 0a       	mov	r10,0
80007bb0:	f4 08 18 00 	cp.b	r8,r10
80007bb4:	c0 e0       	breq	80007bd0 <__sfvwrite_r+0x244>
80007bb6:	06 9b       	mov	r11,r3
80007bb8:	0a 9a       	mov	r10,r5
80007bba:	e0 a0 02 ec 	rcall	80008192 <memmove>
80007bbe:	6e 08       	ld.w	r8,r7[0x0]
80007bc0:	0a 08       	add	r8,r5
80007bc2:	0e 9b       	mov	r11,r7
80007bc4:	8f 08       	st.w	r7[0x0],r8
80007bc6:	40 1c       	lddsp	r12,sp[0x4]
80007bc8:	fe b0 fc aa 	rcall	8000751c <_fflush_r>
80007bcc:	c1 80       	breq	80007bfc <__sfvwrite_r+0x270>
80007bce:	c2 68       	rjmp	80007c1a <__sfvwrite_r+0x28e>
80007bd0:	12 34       	cp.w	r4,r9
80007bd2:	c0 a5       	brlt	80007be6 <__sfvwrite_r+0x25a>
80007bd4:	6e a8       	ld.w	r8,r7[0x28]
80007bd6:	06 9a       	mov	r10,r3
80007bd8:	6e 8b       	ld.w	r11,r7[0x20]
80007bda:	40 1c       	lddsp	r12,sp[0x4]
80007bdc:	5d 18       	icall	r8
80007bde:	18 95       	mov	r5,r12
80007be0:	e0 89 00 0e 	brgt	80007bfc <__sfvwrite_r+0x270>
80007be4:	c1 b8       	rjmp	80007c1a <__sfvwrite_r+0x28e>
80007be6:	08 9a       	mov	r10,r4
80007be8:	06 9b       	mov	r11,r3
80007bea:	e0 a0 02 d4 	rcall	80008192 <memmove>
80007bee:	6e 08       	ld.w	r8,r7[0x0]
80007bf0:	08 08       	add	r8,r4
80007bf2:	08 95       	mov	r5,r4
80007bf4:	8f 08       	st.w	r7[0x0],r8
80007bf6:	6e 28       	ld.w	r8,r7[0x8]
80007bf8:	08 18       	sub	r8,r4
80007bfa:	8f 28       	st.w	r7[0x8],r8
80007bfc:	0a 16       	sub	r6,r5
80007bfe:	c0 71       	brne	80007c0c <__sfvwrite_r+0x280>
80007c00:	0e 9b       	mov	r11,r7
80007c02:	40 1c       	lddsp	r12,sp[0x4]
80007c04:	fe b0 fc 8c 	rcall	8000751c <_fflush_r>
80007c08:	c0 91       	brne	80007c1a <__sfvwrite_r+0x28e>
80007c0a:	50 06       	stdsp	sp[0x0],r6
80007c0c:	64 28       	ld.w	r8,r2[0x8]
80007c0e:	0a 18       	sub	r8,r5
80007c10:	85 28       	st.w	r2[0x8],r8
80007c12:	c0 90       	breq	80007c24 <__sfvwrite_r+0x298>
80007c14:	0a 11       	sub	r1,r5
80007c16:	0a 03       	add	r3,r5
80007c18:	ca 1b       	rjmp	80007b5a <__sfvwrite_r+0x1ce>
80007c1a:	8e 68       	ld.sh	r8,r7[0xc]
80007c1c:	a7 a8       	sbr	r8,0x6
80007c1e:	ae 68       	st.h	r7[0xc],r8
80007c20:	3f fc       	mov	r12,-1
80007c22:	c0 28       	rjmp	80007c26 <__sfvwrite_r+0x29a>
80007c24:	30 0c       	mov	r12,0
80007c26:	2f dd       	sub	sp,-12
80007c28:	d8 32       	popm	r0-r7,pc
80007c2a:	d7 03       	nop

80007c2c <_fwalk>:
80007c2c:	d4 31       	pushm	r0-r7,lr
80007c2e:	30 05       	mov	r5,0
80007c30:	16 91       	mov	r1,r11
80007c32:	f8 c7 ff 28 	sub	r7,r12,-216
80007c36:	0a 92       	mov	r2,r5
80007c38:	fe b0 fc f8 	rcall	80007628 <__sfp_lock_acquire>
80007c3c:	3f f3       	mov	r3,-1
80007c3e:	c1 68       	rjmp	80007c6a <_fwalk+0x3e>
80007c40:	6e 26       	ld.w	r6,r7[0x8]
80007c42:	6e 14       	ld.w	r4,r7[0x4]
80007c44:	2f 46       	sub	r6,-12
80007c46:	c0 c8       	rjmp	80007c5e <_fwalk+0x32>
80007c48:	8c 08       	ld.sh	r8,r6[0x0]
80007c4a:	e4 08 19 00 	cp.h	r8,r2
80007c4e:	c0 70       	breq	80007c5c <_fwalk+0x30>
80007c50:	8c 18       	ld.sh	r8,r6[0x2]
80007c52:	e6 08 19 00 	cp.h	r8,r3
80007c56:	c0 30       	breq	80007c5c <_fwalk+0x30>
80007c58:	5d 11       	icall	r1
80007c5a:	18 45       	or	r5,r12
80007c5c:	2a 46       	sub	r6,-92
80007c5e:	20 14       	sub	r4,1
80007c60:	ec cc 00 0c 	sub	r12,r6,12
80007c64:	58 04       	cp.w	r4,0
80007c66:	cf 14       	brge	80007c48 <_fwalk+0x1c>
80007c68:	6e 07       	ld.w	r7,r7[0x0]
80007c6a:	58 07       	cp.w	r7,0
80007c6c:	ce a1       	brne	80007c40 <_fwalk+0x14>
80007c6e:	fe b0 fc de 	rcall	8000762a <__sfp_lock_release>
80007c72:	0a 9c       	mov	r12,r5
80007c74:	d8 32       	popm	r0-r7,pc
80007c76:	d7 03       	nop

80007c78 <_localeconv_r>:
80007c78:	fe cc da ec 	sub	r12,pc,-9492
80007c7c:	5e fc       	retal	r12
80007c7e:	d7 03       	nop

80007c80 <__smakebuf_r>:
80007c80:	d4 21       	pushm	r4-r7,lr
80007c82:	20 fd       	sub	sp,60
80007c84:	96 68       	ld.sh	r8,r11[0xc]
80007c86:	16 97       	mov	r7,r11
80007c88:	18 96       	mov	r6,r12
80007c8a:	e2 18 00 02 	andl	r8,0x2,COH
80007c8e:	c3 c1       	brne	80007d06 <__smakebuf_r+0x86>
80007c90:	96 7b       	ld.sh	r11,r11[0xe]
80007c92:	f0 0b 19 00 	cp.h	r11,r8
80007c96:	c0 55       	brlt	80007ca0 <__smakebuf_r+0x20>
80007c98:	1a 9a       	mov	r10,sp
80007c9a:	e0 a0 08 9d 	rcall	80008dd4 <_fstat_r>
80007c9e:	c0 f4       	brge	80007cbc <__smakebuf_r+0x3c>
80007ca0:	8e 65       	ld.sh	r5,r7[0xc]
80007ca2:	0a 98       	mov	r8,r5
80007ca4:	ab b8       	sbr	r8,0xb
80007ca6:	e2 15 00 80 	andl	r5,0x80,COH
80007caa:	ae 68       	st.h	r7[0xc],r8
80007cac:	30 04       	mov	r4,0
80007cae:	e0 68 04 00 	mov	r8,1024
80007cb2:	f9 b5 01 40 	movne	r5,64
80007cb6:	f0 05 17 00 	moveq	r5,r8
80007cba:	c1 c8       	rjmp	80007cf2 <__smakebuf_r+0x72>
80007cbc:	40 18       	lddsp	r8,sp[0x4]
80007cbe:	e2 18 f0 00 	andl	r8,0xf000,COH
80007cc2:	e0 48 20 00 	cp.w	r8,8192
80007cc6:	5f 04       	sreq	r4
80007cc8:	e0 48 80 00 	cp.w	r8,32768
80007ccc:	c0 e1       	brne	80007ce8 <__smakebuf_r+0x68>
80007cce:	6e b9       	ld.w	r9,r7[0x2c]
80007cd0:	fe c8 f1 e8 	sub	r8,pc,-3608
80007cd4:	10 39       	cp.w	r9,r8
80007cd6:	c0 91       	brne	80007ce8 <__smakebuf_r+0x68>
80007cd8:	8e 68       	ld.sh	r8,r7[0xc]
80007cda:	e0 65 04 00 	mov	r5,1024
80007cde:	ab a8       	sbr	r8,0xa
80007ce0:	ef 45 00 50 	st.w	r7[80],r5
80007ce4:	ae 68       	st.h	r7[0xc],r8
80007ce6:	c0 68       	rjmp	80007cf2 <__smakebuf_r+0x72>
80007ce8:	8e 68       	ld.sh	r8,r7[0xc]
80007cea:	e0 65 04 00 	mov	r5,1024
80007cee:	ab b8       	sbr	r8,0xb
80007cf0:	ae 68       	st.h	r7[0xc],r8
80007cf2:	0a 9b       	mov	r11,r5
80007cf4:	0c 9c       	mov	r12,r6
80007cf6:	c2 bc       	rcall	80007d4c <_malloc_r>
80007cf8:	8e 68       	ld.sh	r8,r7[0xc]
80007cfa:	c0 d1       	brne	80007d14 <__smakebuf_r+0x94>
80007cfc:	ed b8 00 09 	bld	r8,0x9
80007d00:	c1 b0       	breq	80007d36 <__smakebuf_r+0xb6>
80007d02:	a1 b8       	sbr	r8,0x1
80007d04:	ae 68       	st.h	r7[0xc],r8
80007d06:	ee c8 ff b9 	sub	r8,r7,-71
80007d0a:	8f 48       	st.w	r7[0x10],r8
80007d0c:	8f 08       	st.w	r7[0x0],r8
80007d0e:	30 18       	mov	r8,1
80007d10:	8f 58       	st.w	r7[0x14],r8
80007d12:	c1 28       	rjmp	80007d36 <__smakebuf_r+0xb6>
80007d14:	a7 b8       	sbr	r8,0x7
80007d16:	8f 4c       	st.w	r7[0x10],r12
80007d18:	ae 68       	st.h	r7[0xc],r8
80007d1a:	8f 55       	st.w	r7[0x14],r5
80007d1c:	fe c8 06 f0 	sub	r8,pc,1776
80007d20:	8f 0c       	st.w	r7[0x0],r12
80007d22:	8d a8       	st.w	r6[0x28],r8
80007d24:	58 04       	cp.w	r4,0
80007d26:	c0 80       	breq	80007d36 <__smakebuf_r+0xb6>
80007d28:	8e 7c       	ld.sh	r12,r7[0xe]
80007d2a:	e0 a0 07 47 	rcall	80008bb8 <isatty>
80007d2e:	c0 40       	breq	80007d36 <__smakebuf_r+0xb6>
80007d30:	8e 68       	ld.sh	r8,r7[0xc]
80007d32:	a1 a8       	sbr	r8,0x0
80007d34:	ae 68       	st.h	r7[0xc],r8
80007d36:	2f 1d       	sub	sp,-60
80007d38:	d8 22       	popm	r4-r7,pc
80007d3a:	d7 03       	nop

80007d3c <malloc>:
80007d3c:	d4 01       	pushm	lr
80007d3e:	e0 68 00 fc 	mov	r8,252
80007d42:	18 9b       	mov	r11,r12
80007d44:	70 0c       	ld.w	r12,r8[0x0]
80007d46:	c0 3c       	rcall	80007d4c <_malloc_r>
80007d48:	d8 02       	popm	pc
80007d4a:	d7 03       	nop

80007d4c <_malloc_r>:
80007d4c:	d4 31       	pushm	r0-r7,lr
80007d4e:	f6 c8 ff f5 	sub	r8,r11,-11
80007d52:	18 95       	mov	r5,r12
80007d54:	10 97       	mov	r7,r8
80007d56:	e0 17 ff f8 	andl	r7,0xfff8
80007d5a:	59 68       	cp.w	r8,22
80007d5c:	f9 b7 08 10 	movls	r7,16
80007d60:	16 37       	cp.w	r7,r11
80007d62:	5f 38       	srlo	r8
80007d64:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80007d68:	c0 50       	breq	80007d72 <_malloc_r+0x26>
80007d6a:	30 c8       	mov	r8,12
80007d6c:	99 38       	st.w	r12[0xc],r8
80007d6e:	e0 8f 01 f7 	bral	8000815c <_malloc_r+0x410>
80007d72:	e0 a0 02 36 	rcall	800081de <__malloc_lock>
80007d76:	e0 47 01 f7 	cp.w	r7,503
80007d7a:	e0 8b 00 1d 	brhi	80007db4 <_malloc_r+0x68>
80007d7e:	ee 03 16 03 	lsr	r3,r7,0x3
80007d82:	e0 68 01 00 	mov	r8,256
80007d86:	f0 03 00 38 	add	r8,r8,r3<<0x3
80007d8a:	70 36       	ld.w	r6,r8[0xc]
80007d8c:	10 36       	cp.w	r6,r8
80007d8e:	c0 61       	brne	80007d9a <_malloc_r+0x4e>
80007d90:	ec c8 ff f8 	sub	r8,r6,-8
80007d94:	70 36       	ld.w	r6,r8[0xc]
80007d96:	10 36       	cp.w	r6,r8
80007d98:	c0 c0       	breq	80007db0 <_malloc_r+0x64>
80007d9a:	6c 18       	ld.w	r8,r6[0x4]
80007d9c:	e0 18 ff fc 	andl	r8,0xfffc
80007da0:	6c 3a       	ld.w	r10,r6[0xc]
80007da2:	ec 08 00 09 	add	r9,r6,r8
80007da6:	0a 9c       	mov	r12,r5
80007da8:	6c 28       	ld.w	r8,r6[0x8]
80007daa:	95 28       	st.w	r10[0x8],r8
80007dac:	91 3a       	st.w	r8[0xc],r10
80007dae:	c4 78       	rjmp	80007e3c <_malloc_r+0xf0>
80007db0:	2f e3       	sub	r3,-2
80007db2:	c4 d8       	rjmp	80007e4c <_malloc_r+0x100>
80007db4:	ee 03 16 09 	lsr	r3,r7,0x9
80007db8:	c0 41       	brne	80007dc0 <_malloc_r+0x74>
80007dba:	ee 03 16 03 	lsr	r3,r7,0x3
80007dbe:	c2 68       	rjmp	80007e0a <_malloc_r+0xbe>
80007dc0:	58 43       	cp.w	r3,4
80007dc2:	e0 8b 00 06 	brhi	80007dce <_malloc_r+0x82>
80007dc6:	ee 03 16 06 	lsr	r3,r7,0x6
80007dca:	2c 83       	sub	r3,-56
80007dcc:	c1 f8       	rjmp	80007e0a <_malloc_r+0xbe>
80007dce:	59 43       	cp.w	r3,20
80007dd0:	e0 8b 00 04 	brhi	80007dd8 <_malloc_r+0x8c>
80007dd4:	2a 53       	sub	r3,-91
80007dd6:	c1 a8       	rjmp	80007e0a <_malloc_r+0xbe>
80007dd8:	e0 43 00 54 	cp.w	r3,84
80007ddc:	e0 8b 00 06 	brhi	80007de8 <_malloc_r+0x9c>
80007de0:	ee 03 16 0c 	lsr	r3,r7,0xc
80007de4:	29 23       	sub	r3,-110
80007de6:	c1 28       	rjmp	80007e0a <_malloc_r+0xbe>
80007de8:	e0 43 01 54 	cp.w	r3,340
80007dec:	e0 8b 00 06 	brhi	80007df8 <_malloc_r+0xac>
80007df0:	ee 03 16 0f 	lsr	r3,r7,0xf
80007df4:	28 93       	sub	r3,-119
80007df6:	c0 a8       	rjmp	80007e0a <_malloc_r+0xbe>
80007df8:	e0 43 05 54 	cp.w	r3,1364
80007dfc:	e0 88 00 04 	brls	80007e04 <_malloc_r+0xb8>
80007e00:	37 e3       	mov	r3,126
80007e02:	c0 48       	rjmp	80007e0a <_malloc_r+0xbe>
80007e04:	ee 03 16 12 	lsr	r3,r7,0x12
80007e08:	28 43       	sub	r3,-124
80007e0a:	e0 6a 01 00 	mov	r10,256
80007e0e:	f4 03 00 3a 	add	r10,r10,r3<<0x3
80007e12:	74 36       	ld.w	r6,r10[0xc]
80007e14:	c1 98       	rjmp	80007e46 <_malloc_r+0xfa>
80007e16:	6c 19       	ld.w	r9,r6[0x4]
80007e18:	e0 19 ff fc 	andl	r9,0xfffc
80007e1c:	f2 07 01 0b 	sub	r11,r9,r7
80007e20:	58 fb       	cp.w	r11,15
80007e22:	e0 8a 00 04 	brle	80007e2a <_malloc_r+0xde>
80007e26:	20 13       	sub	r3,1
80007e28:	c1 18       	rjmp	80007e4a <_malloc_r+0xfe>
80007e2a:	6c 38       	ld.w	r8,r6[0xc]
80007e2c:	58 0b       	cp.w	r11,0
80007e2e:	c0 b5       	brlt	80007e44 <_malloc_r+0xf8>
80007e30:	6c 2a       	ld.w	r10,r6[0x8]
80007e32:	ec 09 00 09 	add	r9,r6,r9
80007e36:	0a 9c       	mov	r12,r5
80007e38:	91 2a       	st.w	r8[0x8],r10
80007e3a:	95 38       	st.w	r10[0xc],r8
80007e3c:	72 18       	ld.w	r8,r9[0x4]
80007e3e:	a1 a8       	sbr	r8,0x0
80007e40:	93 18       	st.w	r9[0x4],r8
80007e42:	cb c8       	rjmp	80007fba <_malloc_r+0x26e>
80007e44:	10 96       	mov	r6,r8
80007e46:	14 36       	cp.w	r6,r10
80007e48:	ce 71       	brne	80007e16 <_malloc_r+0xca>
80007e4a:	2f f3       	sub	r3,-1
80007e4c:	e0 6a 01 00 	mov	r10,256
80007e50:	f4 cc ff f8 	sub	r12,r10,-8
80007e54:	78 26       	ld.w	r6,r12[0x8]
80007e56:	18 36       	cp.w	r6,r12
80007e58:	c6 c0       	breq	80007f30 <_malloc_r+0x1e4>
80007e5a:	6c 19       	ld.w	r9,r6[0x4]
80007e5c:	e0 19 ff fc 	andl	r9,0xfffc
80007e60:	f2 07 01 08 	sub	r8,r9,r7
80007e64:	58 f8       	cp.w	r8,15
80007e66:	e0 89 00 8f 	brgt	80007f84 <_malloc_r+0x238>
80007e6a:	99 3c       	st.w	r12[0xc],r12
80007e6c:	99 2c       	st.w	r12[0x8],r12
80007e6e:	58 08       	cp.w	r8,0
80007e70:	c0 55       	brlt	80007e7a <_malloc_r+0x12e>
80007e72:	ec 09 00 09 	add	r9,r6,r9
80007e76:	0a 9c       	mov	r12,r5
80007e78:	ce 2b       	rjmp	80007e3c <_malloc_r+0xf0>
80007e7a:	e0 49 01 ff 	cp.w	r9,511
80007e7e:	e0 8b 00 13 	brhi	80007ea4 <_malloc_r+0x158>
80007e82:	a3 99       	lsr	r9,0x3
80007e84:	f4 09 00 38 	add	r8,r10,r9<<0x3
80007e88:	70 2b       	ld.w	r11,r8[0x8]
80007e8a:	8d 38       	st.w	r6[0xc],r8
80007e8c:	8d 2b       	st.w	r6[0x8],r11
80007e8e:	97 36       	st.w	r11[0xc],r6
80007e90:	91 26       	st.w	r8[0x8],r6
80007e92:	a3 49       	asr	r9,0x2
80007e94:	74 18       	ld.w	r8,r10[0x4]
80007e96:	30 1b       	mov	r11,1
80007e98:	f6 09 09 49 	lsl	r9,r11,r9
80007e9c:	f1 e9 10 09 	or	r9,r8,r9
80007ea0:	95 19       	st.w	r10[0x4],r9
80007ea2:	c4 78       	rjmp	80007f30 <_malloc_r+0x1e4>
80007ea4:	f2 0a 16 09 	lsr	r10,r9,0x9
80007ea8:	58 4a       	cp.w	r10,4
80007eaa:	e0 8b 00 07 	brhi	80007eb8 <_malloc_r+0x16c>
80007eae:	f2 0a 16 06 	lsr	r10,r9,0x6
80007eb2:	2c 8a       	sub	r10,-56
80007eb4:	c2 08       	rjmp	80007ef4 <_malloc_r+0x1a8>
80007eb6:	d7 03       	nop
80007eb8:	59 4a       	cp.w	r10,20
80007eba:	e0 8b 00 04 	brhi	80007ec2 <_malloc_r+0x176>
80007ebe:	2a 5a       	sub	r10,-91
80007ec0:	c1 a8       	rjmp	80007ef4 <_malloc_r+0x1a8>
80007ec2:	e0 4a 00 54 	cp.w	r10,84
80007ec6:	e0 8b 00 06 	brhi	80007ed2 <_malloc_r+0x186>
80007eca:	f2 0a 16 0c 	lsr	r10,r9,0xc
80007ece:	29 2a       	sub	r10,-110
80007ed0:	c1 28       	rjmp	80007ef4 <_malloc_r+0x1a8>
80007ed2:	e0 4a 01 54 	cp.w	r10,340
80007ed6:	e0 8b 00 06 	brhi	80007ee2 <_malloc_r+0x196>
80007eda:	f2 0a 16 0f 	lsr	r10,r9,0xf
80007ede:	28 9a       	sub	r10,-119
80007ee0:	c0 a8       	rjmp	80007ef4 <_malloc_r+0x1a8>
80007ee2:	e0 4a 05 54 	cp.w	r10,1364
80007ee6:	e0 88 00 04 	brls	80007eee <_malloc_r+0x1a2>
80007eea:	37 ea       	mov	r10,126
80007eec:	c0 48       	rjmp	80007ef4 <_malloc_r+0x1a8>
80007eee:	f2 0a 16 12 	lsr	r10,r9,0x12
80007ef2:	28 4a       	sub	r10,-124
80007ef4:	e0 6b 01 00 	mov	r11,256
80007ef8:	f6 0a 00 34 	add	r4,r11,r10<<0x3
80007efc:	68 28       	ld.w	r8,r4[0x8]
80007efe:	08 38       	cp.w	r8,r4
80007f00:	c0 e1       	brne	80007f1c <_malloc_r+0x1d0>
80007f02:	76 19       	ld.w	r9,r11[0x4]
80007f04:	a3 4a       	asr	r10,0x2
80007f06:	30 1e       	mov	lr,1
80007f08:	fc 0a 09 4a 	lsl	r10,lr,r10
80007f0c:	f3 ea 10 0a 	or	r10,r9,r10
80007f10:	10 99       	mov	r9,r8
80007f12:	97 1a       	st.w	r11[0x4],r10
80007f14:	c0 a8       	rjmp	80007f28 <_malloc_r+0x1dc>
80007f16:	70 28       	ld.w	r8,r8[0x8]
80007f18:	08 38       	cp.w	r8,r4
80007f1a:	c0 60       	breq	80007f26 <_malloc_r+0x1da>
80007f1c:	70 1a       	ld.w	r10,r8[0x4]
80007f1e:	e0 1a ff fc 	andl	r10,0xfffc
80007f22:	14 39       	cp.w	r9,r10
80007f24:	cf 93       	brcs	80007f16 <_malloc_r+0x1ca>
80007f26:	70 39       	ld.w	r9,r8[0xc]
80007f28:	8d 39       	st.w	r6[0xc],r9
80007f2a:	8d 28       	st.w	r6[0x8],r8
80007f2c:	91 36       	st.w	r8[0xc],r6
80007f2e:	93 26       	st.w	r9[0x8],r6
80007f30:	e6 08 14 02 	asr	r8,r3,0x2
80007f34:	30 1b       	mov	r11,1
80007f36:	e0 64 01 00 	mov	r4,256
80007f3a:	f6 08 09 4b 	lsl	r11,r11,r8
80007f3e:	68 18       	ld.w	r8,r4[0x4]
80007f40:	10 3b       	cp.w	r11,r8
80007f42:	e0 8b 00 69 	brhi	80008014 <_malloc_r+0x2c8>
80007f46:	f7 e8 00 09 	and	r9,r11,r8
80007f4a:	c0 b1       	brne	80007f60 <_malloc_r+0x214>
80007f4c:	e0 13 ff fc 	andl	r3,0xfffc
80007f50:	a1 7b       	lsl	r11,0x1
80007f52:	2f c3       	sub	r3,-4
80007f54:	c0 38       	rjmp	80007f5a <_malloc_r+0x20e>
80007f56:	2f c3       	sub	r3,-4
80007f58:	a1 7b       	lsl	r11,0x1
80007f5a:	f7 e8 00 09 	and	r9,r11,r8
80007f5e:	cf c0       	breq	80007f56 <_malloc_r+0x20a>
80007f60:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80007f64:	06 92       	mov	r2,r3
80007f66:	1c 91       	mov	r1,lr
80007f68:	62 36       	ld.w	r6,r1[0xc]
80007f6a:	c2 d8       	rjmp	80007fc4 <_malloc_r+0x278>
80007f6c:	6c 1a       	ld.w	r10,r6[0x4]
80007f6e:	e0 1a ff fc 	andl	r10,0xfffc
80007f72:	f4 07 01 08 	sub	r8,r10,r7
80007f76:	58 f8       	cp.w	r8,15
80007f78:	e0 8a 00 15 	brle	80007fa2 <_malloc_r+0x256>
80007f7c:	6c 3a       	ld.w	r10,r6[0xc]
80007f7e:	6c 29       	ld.w	r9,r6[0x8]
80007f80:	95 29       	st.w	r10[0x8],r9
80007f82:	93 3a       	st.w	r9[0xc],r10
80007f84:	0e 99       	mov	r9,r7
80007f86:	ec 07 00 07 	add	r7,r6,r7
80007f8a:	a1 a9       	sbr	r9,0x0
80007f8c:	99 37       	st.w	r12[0xc],r7
80007f8e:	99 27       	st.w	r12[0x8],r7
80007f90:	8d 19       	st.w	r6[0x4],r9
80007f92:	ee 08 09 08 	st.w	r7[r8],r8
80007f96:	8f 2c       	st.w	r7[0x8],r12
80007f98:	8f 3c       	st.w	r7[0xc],r12
80007f9a:	a1 a8       	sbr	r8,0x0
80007f9c:	0a 9c       	mov	r12,r5
80007f9e:	8f 18       	st.w	r7[0x4],r8
80007fa0:	c0 d8       	rjmp	80007fba <_malloc_r+0x26e>
80007fa2:	6c 39       	ld.w	r9,r6[0xc]
80007fa4:	58 08       	cp.w	r8,0
80007fa6:	c0 e5       	brlt	80007fc2 <_malloc_r+0x276>
80007fa8:	ec 0a 00 0a 	add	r10,r6,r10
80007fac:	74 18       	ld.w	r8,r10[0x4]
80007fae:	a1 a8       	sbr	r8,0x0
80007fb0:	0a 9c       	mov	r12,r5
80007fb2:	95 18       	st.w	r10[0x4],r8
80007fb4:	6c 28       	ld.w	r8,r6[0x8]
80007fb6:	93 28       	st.w	r9[0x8],r8
80007fb8:	91 39       	st.w	r8[0xc],r9
80007fba:	c1 3d       	rcall	800081e0 <__malloc_unlock>
80007fbc:	ec cc ff f8 	sub	r12,r6,-8
80007fc0:	d8 32       	popm	r0-r7,pc
80007fc2:	12 96       	mov	r6,r9
80007fc4:	02 36       	cp.w	r6,r1
80007fc6:	cd 31       	brne	80007f6c <_malloc_r+0x220>
80007fc8:	2f f2       	sub	r2,-1
80007fca:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
80007fce:	c0 30       	breq	80007fd4 <_malloc_r+0x288>
80007fd0:	2f 81       	sub	r1,-8
80007fd2:	cc bb       	rjmp	80007f68 <_malloc_r+0x21c>
80007fd4:	1c 98       	mov	r8,lr
80007fd6:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
80007fda:	c0 81       	brne	80007fea <_malloc_r+0x29e>
80007fdc:	68 19       	ld.w	r9,r4[0x4]
80007fde:	f6 08 11 ff 	rsub	r8,r11,-1
80007fe2:	f3 e8 00 08 	and	r8,r9,r8
80007fe6:	89 18       	st.w	r4[0x4],r8
80007fe8:	c0 78       	rjmp	80007ff6 <_malloc_r+0x2aa>
80007fea:	f0 c9 00 08 	sub	r9,r8,8
80007fee:	20 13       	sub	r3,1
80007ff0:	70 08       	ld.w	r8,r8[0x0]
80007ff2:	12 38       	cp.w	r8,r9
80007ff4:	cf 10       	breq	80007fd6 <_malloc_r+0x28a>
80007ff6:	a1 7b       	lsl	r11,0x1
80007ff8:	68 18       	ld.w	r8,r4[0x4]
80007ffa:	10 3b       	cp.w	r11,r8
80007ffc:	e0 8b 00 0c 	brhi	80008014 <_malloc_r+0x2c8>
80008000:	58 0b       	cp.w	r11,0
80008002:	c0 90       	breq	80008014 <_malloc_r+0x2c8>
80008004:	04 93       	mov	r3,r2
80008006:	c0 38       	rjmp	8000800c <_malloc_r+0x2c0>
80008008:	2f c3       	sub	r3,-4
8000800a:	a1 7b       	lsl	r11,0x1
8000800c:	f7 e8 00 09 	and	r9,r11,r8
80008010:	ca 81       	brne	80007f60 <_malloc_r+0x214>
80008012:	cf bb       	rjmp	80008008 <_malloc_r+0x2bc>
80008014:	68 23       	ld.w	r3,r4[0x8]
80008016:	66 12       	ld.w	r2,r3[0x4]
80008018:	e0 12 ff fc 	andl	r2,0xfffc
8000801c:	0e 32       	cp.w	r2,r7
8000801e:	5f 39       	srlo	r9
80008020:	e4 07 01 08 	sub	r8,r2,r7
80008024:	58 f8       	cp.w	r8,15
80008026:	5f aa       	srle	r10
80008028:	f5 e9 10 09 	or	r9,r10,r9
8000802c:	e0 80 00 9a 	breq	80008160 <_malloc_r+0x414>
80008030:	e0 68 06 28 	mov	r8,1576
80008034:	70 01       	ld.w	r1,r8[0x0]
80008036:	e0 68 05 0c 	mov	r8,1292
8000803a:	2f 01       	sub	r1,-16
8000803c:	70 08       	ld.w	r8,r8[0x0]
8000803e:	0e 01       	add	r1,r7
80008040:	5b f8       	cp.w	r8,-1
80008042:	c0 40       	breq	8000804a <_malloc_r+0x2fe>
80008044:	28 11       	sub	r1,-127
80008046:	e0 11 ff 80 	andl	r1,0xff80
8000804a:	02 9b       	mov	r11,r1
8000804c:	0a 9c       	mov	r12,r5
8000804e:	e0 a0 05 39 	rcall	80008ac0 <_sbrk_r>
80008052:	18 96       	mov	r6,r12
80008054:	5b fc       	cp.w	r12,-1
80008056:	c7 50       	breq	80008140 <_malloc_r+0x3f4>
80008058:	e6 02 00 08 	add	r8,r3,r2
8000805c:	10 3c       	cp.w	r12,r8
8000805e:	c0 32       	brcc	80008064 <_malloc_r+0x318>
80008060:	08 33       	cp.w	r3,r4
80008062:	c6 f1       	brne	80008140 <_malloc_r+0x3f4>
80008064:	e0 6a 06 2c 	mov	r10,1580
80008068:	74 09       	ld.w	r9,r10[0x0]
8000806a:	e2 09 00 09 	add	r9,r1,r9
8000806e:	95 09       	st.w	r10[0x0],r9
80008070:	10 36       	cp.w	r6,r8
80008072:	c0 a1       	brne	80008086 <_malloc_r+0x33a>
80008074:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80008078:	c0 71       	brne	80008086 <_malloc_r+0x33a>
8000807a:	e2 02 00 02 	add	r2,r1,r2
8000807e:	68 28       	ld.w	r8,r4[0x8]
80008080:	a1 a2       	sbr	r2,0x0
80008082:	91 12       	st.w	r8[0x4],r2
80008084:	c4 f8       	rjmp	80008122 <_malloc_r+0x3d6>
80008086:	e0 6a 05 0c 	mov	r10,1292
8000808a:	74 0b       	ld.w	r11,r10[0x0]
8000808c:	5b fb       	cp.w	r11,-1
8000808e:	c0 31       	brne	80008094 <_malloc_r+0x348>
80008090:	95 06       	st.w	r10[0x0],r6
80008092:	c0 78       	rjmp	800080a0 <_malloc_r+0x354>
80008094:	ec 09 00 09 	add	r9,r6,r9
80008098:	e0 6a 06 2c 	mov	r10,1580
8000809c:	10 19       	sub	r9,r8
8000809e:	95 09       	st.w	r10[0x0],r9
800080a0:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
800080a4:	f0 09 11 08 	rsub	r9,r8,8
800080a8:	58 08       	cp.w	r8,0
800080aa:	f2 08 17 10 	movne	r8,r9
800080ae:	ed d8 e1 06 	addne	r6,r6,r8
800080b2:	28 08       	sub	r8,-128
800080b4:	ec 01 00 01 	add	r1,r6,r1
800080b8:	0a 9c       	mov	r12,r5
800080ba:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
800080be:	f0 01 01 01 	sub	r1,r8,r1
800080c2:	02 9b       	mov	r11,r1
800080c4:	e0 a0 04 fe 	rcall	80008ac0 <_sbrk_r>
800080c8:	e0 68 06 2c 	mov	r8,1580
800080cc:	5b fc       	cp.w	r12,-1
800080ce:	ec 0c 17 00 	moveq	r12,r6
800080d2:	f9 b1 00 00 	moveq	r1,0
800080d6:	70 09       	ld.w	r9,r8[0x0]
800080d8:	0c 1c       	sub	r12,r6
800080da:	89 26       	st.w	r4[0x8],r6
800080dc:	02 0c       	add	r12,r1
800080de:	12 01       	add	r1,r9
800080e0:	a1 ac       	sbr	r12,0x0
800080e2:	91 01       	st.w	r8[0x0],r1
800080e4:	8d 1c       	st.w	r6[0x4],r12
800080e6:	08 33       	cp.w	r3,r4
800080e8:	c1 d0       	breq	80008122 <_malloc_r+0x3d6>
800080ea:	58 f2       	cp.w	r2,15
800080ec:	e0 8b 00 05 	brhi	800080f6 <_malloc_r+0x3aa>
800080f0:	30 18       	mov	r8,1
800080f2:	8d 18       	st.w	r6[0x4],r8
800080f4:	c2 68       	rjmp	80008140 <_malloc_r+0x3f4>
800080f6:	30 59       	mov	r9,5
800080f8:	20 c2       	sub	r2,12
800080fa:	e0 12 ff f8 	andl	r2,0xfff8
800080fe:	e6 02 00 08 	add	r8,r3,r2
80008102:	91 29       	st.w	r8[0x8],r9
80008104:	91 19       	st.w	r8[0x4],r9
80008106:	66 18       	ld.w	r8,r3[0x4]
80008108:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000810c:	e5 e8 10 08 	or	r8,r2,r8
80008110:	87 18       	st.w	r3[0x4],r8
80008112:	58 f2       	cp.w	r2,15
80008114:	e0 88 00 07 	brls	80008122 <_malloc_r+0x3d6>
80008118:	e6 cb ff f8 	sub	r11,r3,-8
8000811c:	0a 9c       	mov	r12,r5
8000811e:	fe b0 fb 71 	rcall	80007800 <_free_r>
80008122:	e0 69 06 24 	mov	r9,1572
80008126:	72 0a       	ld.w	r10,r9[0x0]
80008128:	e0 68 06 2c 	mov	r8,1580
8000812c:	70 08       	ld.w	r8,r8[0x0]
8000812e:	14 38       	cp.w	r8,r10
80008130:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80008134:	e0 69 06 20 	mov	r9,1568
80008138:	72 0a       	ld.w	r10,r9[0x0]
8000813a:	14 38       	cp.w	r8,r10
8000813c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80008140:	68 28       	ld.w	r8,r4[0x8]
80008142:	70 18       	ld.w	r8,r8[0x4]
80008144:	e0 18 ff fc 	andl	r8,0xfffc
80008148:	0e 38       	cp.w	r8,r7
8000814a:	5f 39       	srlo	r9
8000814c:	0e 18       	sub	r8,r7
8000814e:	58 f8       	cp.w	r8,15
80008150:	5f aa       	srle	r10
80008152:	f5 e9 10 09 	or	r9,r10,r9
80008156:	c0 50       	breq	80008160 <_malloc_r+0x414>
80008158:	0a 9c       	mov	r12,r5
8000815a:	c4 3c       	rcall	800081e0 <__malloc_unlock>
8000815c:	d8 3a       	popm	r0-r7,pc,r12=0
8000815e:	d7 03       	nop
80008160:	68 26       	ld.w	r6,r4[0x8]
80008162:	a1 a8       	sbr	r8,0x0
80008164:	0e 99       	mov	r9,r7
80008166:	a1 a9       	sbr	r9,0x0
80008168:	8d 19       	st.w	r6[0x4],r9
8000816a:	ec 07 00 07 	add	r7,r6,r7
8000816e:	0a 9c       	mov	r12,r5
80008170:	89 27       	st.w	r4[0x8],r7
80008172:	8f 18       	st.w	r7[0x4],r8
80008174:	c3 6c       	rcall	800081e0 <__malloc_unlock>
80008176:	ec cc ff f8 	sub	r12,r6,-8
8000817a:	d8 32       	popm	r0-r7,pc

8000817c <memchr>:
8000817c:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80008180:	c0 68       	rjmp	8000818c <memchr+0x10>
80008182:	20 1a       	sub	r10,1
80008184:	19 88       	ld.ub	r8,r12[0x0]
80008186:	16 38       	cp.w	r8,r11
80008188:	5e 0c       	reteq	r12
8000818a:	2f fc       	sub	r12,-1
8000818c:	58 0a       	cp.w	r10,0
8000818e:	cf a1       	brne	80008182 <memchr+0x6>
80008190:	5e fa       	retal	r10

80008192 <memmove>:
80008192:	d4 01       	pushm	lr
80008194:	18 3b       	cp.w	r11,r12
80008196:	c1 92       	brcc	800081c8 <memmove+0x36>
80008198:	f6 0a 00 09 	add	r9,r11,r10
8000819c:	12 3c       	cp.w	r12,r9
8000819e:	c1 52       	brcc	800081c8 <memmove+0x36>
800081a0:	f8 0a 00 0b 	add	r11,r12,r10
800081a4:	30 08       	mov	r8,0
800081a6:	c0 68       	rjmp	800081b2 <memmove+0x20>
800081a8:	f2 08 07 0e 	ld.ub	lr,r9[r8]
800081ac:	20 1a       	sub	r10,1
800081ae:	f6 08 0b 0e 	st.b	r11[r8],lr
800081b2:	20 18       	sub	r8,1
800081b4:	58 0a       	cp.w	r10,0
800081b6:	cf 91       	brne	800081a8 <memmove+0x16>
800081b8:	d8 02       	popm	pc
800081ba:	f6 08 07 09 	ld.ub	r9,r11[r8]
800081be:	20 1a       	sub	r10,1
800081c0:	f8 08 0b 09 	st.b	r12[r8],r9
800081c4:	2f f8       	sub	r8,-1
800081c6:	c0 28       	rjmp	800081ca <memmove+0x38>
800081c8:	30 08       	mov	r8,0
800081ca:	58 0a       	cp.w	r10,0
800081cc:	cf 71       	brne	800081ba <memmove+0x28>
800081ce:	d8 02       	popm	pc

800081d0 <memset>:
800081d0:	18 98       	mov	r8,r12
800081d2:	c0 38       	rjmp	800081d8 <memset+0x8>
800081d4:	10 cb       	st.b	r8++,r11
800081d6:	20 1a       	sub	r10,1
800081d8:	58 0a       	cp.w	r10,0
800081da:	cf d1       	brne	800081d4 <memset+0x4>
800081dc:	5e fc       	retal	r12

800081de <__malloc_lock>:
800081de:	5e fc       	retal	r12

800081e0 <__malloc_unlock>:
800081e0:	5e fc       	retal	r12

800081e2 <__hi0bits>:
800081e2:	18 98       	mov	r8,r12
800081e4:	e0 1c 00 00 	andl	r12,0x0
800081e8:	f0 09 15 10 	lsl	r9,r8,0x10
800081ec:	58 0c       	cp.w	r12,0
800081ee:	f2 08 17 00 	moveq	r8,r9
800081f2:	f9 bc 00 10 	moveq	r12,16
800081f6:	f9 bc 01 00 	movne	r12,0
800081fa:	10 9a       	mov	r10,r8
800081fc:	f0 09 15 08 	lsl	r9,r8,0x8
80008200:	e6 1a ff 00 	andh	r10,0xff00,COH
80008204:	f7 bc 00 f8 	subeq	r12,-8
80008208:	f2 08 17 00 	moveq	r8,r9
8000820c:	10 9a       	mov	r10,r8
8000820e:	f0 09 15 04 	lsl	r9,r8,0x4
80008212:	e6 1a f0 00 	andh	r10,0xf000,COH
80008216:	f7 bc 00 fc 	subeq	r12,-4
8000821a:	f2 08 17 00 	moveq	r8,r9
8000821e:	10 9a       	mov	r10,r8
80008220:	f0 09 15 02 	lsl	r9,r8,0x2
80008224:	e6 1a c0 00 	andh	r10,0xc000,COH
80008228:	f7 bc 00 fe 	subeq	r12,-2
8000822c:	f2 08 17 00 	moveq	r8,r9
80008230:	58 08       	cp.w	r8,0
80008232:	5e 5c       	retlt	r12
80008234:	ed b8 00 1e 	bld	r8,0x1e
80008238:	f9 bc 01 20 	movne	r12,32
8000823c:	f7 bc 00 ff 	subeq	r12,-1
80008240:	5e fc       	retal	r12

80008242 <__lo0bits>:
80008242:	18 99       	mov	r9,r12
80008244:	78 08       	ld.w	r8,r12[0x0]
80008246:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000824a:	c1 50       	breq	80008274 <__lo0bits+0x32>
8000824c:	ed b8 00 00 	bld	r8,0x0
80008250:	c0 21       	brne	80008254 <__lo0bits+0x12>
80008252:	5e fd       	retal	0
80008254:	10 9b       	mov	r11,r8
80008256:	f0 0a 16 01 	lsr	r10,r8,0x1
8000825a:	e2 1b 00 02 	andl	r11,0x2,COH
8000825e:	a3 88       	lsr	r8,0x2
80008260:	58 0b       	cp.w	r11,0
80008262:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80008266:	f9 bc 01 01 	movne	r12,1
8000826a:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000826e:	f9 bc 00 02 	moveq	r12,2
80008272:	5e fc       	retal	r12
80008274:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80008278:	f0 0b 16 10 	lsr	r11,r8,0x10
8000827c:	58 0a       	cp.w	r10,0
8000827e:	f6 08 17 00 	moveq	r8,r11
80008282:	f9 bc 00 10 	moveq	r12,16
80008286:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000828a:	f0 0a 16 08 	lsr	r10,r8,0x8
8000828e:	58 0b       	cp.w	r11,0
80008290:	f7 bc 00 f8 	subeq	r12,-8
80008294:	f4 08 17 00 	moveq	r8,r10
80008298:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000829c:	f0 0a 16 04 	lsr	r10,r8,0x4
800082a0:	58 0b       	cp.w	r11,0
800082a2:	f7 bc 00 fc 	subeq	r12,-4
800082a6:	f4 08 17 00 	moveq	r8,r10
800082aa:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
800082ae:	f0 0a 16 02 	lsr	r10,r8,0x2
800082b2:	58 0b       	cp.w	r11,0
800082b4:	f7 bc 00 fe 	subeq	r12,-2
800082b8:	f4 08 17 00 	moveq	r8,r10
800082bc:	ed b8 00 00 	bld	r8,0x0
800082c0:	c0 60       	breq	800082cc <__lo0bits+0x8a>
800082c2:	a1 98       	lsr	r8,0x1
800082c4:	c0 31       	brne	800082ca <__lo0bits+0x88>
800082c6:	32 0c       	mov	r12,32
800082c8:	5e fc       	retal	r12
800082ca:	2f fc       	sub	r12,-1
800082cc:	93 08       	st.w	r9[0x0],r8
800082ce:	5e fc       	retal	r12

800082d0 <__mcmp>:
800082d0:	d4 01       	pushm	lr
800082d2:	18 98       	mov	r8,r12
800082d4:	76 49       	ld.w	r9,r11[0x10]
800082d6:	78 4c       	ld.w	r12,r12[0x10]
800082d8:	12 1c       	sub	r12,r9
800082da:	c1 31       	brne	80008300 <__mcmp+0x30>
800082dc:	2f b9       	sub	r9,-5
800082de:	a3 69       	lsl	r9,0x2
800082e0:	12 0b       	add	r11,r9
800082e2:	f0 09 00 09 	add	r9,r8,r9
800082e6:	2e c8       	sub	r8,-20
800082e8:	13 4e       	ld.w	lr,--r9
800082ea:	17 4a       	ld.w	r10,--r11
800082ec:	14 3e       	cp.w	lr,r10
800082ee:	c0 60       	breq	800082fa <__mcmp+0x2a>
800082f0:	f9 bc 03 ff 	movlo	r12,-1
800082f4:	f9 bc 02 01 	movhs	r12,1
800082f8:	d8 02       	popm	pc
800082fa:	10 39       	cp.w	r9,r8
800082fc:	fe 9b ff f6 	brhi	800082e8 <__mcmp+0x18>
80008300:	d8 02       	popm	pc
80008302:	d7 03       	nop

80008304 <_Bfree>:
80008304:	d4 21       	pushm	r4-r7,lr
80008306:	18 97       	mov	r7,r12
80008308:	16 95       	mov	r5,r11
8000830a:	78 96       	ld.w	r6,r12[0x24]
8000830c:	58 06       	cp.w	r6,0
8000830e:	c0 91       	brne	80008320 <_Bfree+0x1c>
80008310:	31 0c       	mov	r12,16
80008312:	fe b0 fd 15 	rcall	80007d3c <malloc>
80008316:	99 36       	st.w	r12[0xc],r6
80008318:	8f 9c       	st.w	r7[0x24],r12
8000831a:	99 16       	st.w	r12[0x4],r6
8000831c:	99 26       	st.w	r12[0x8],r6
8000831e:	99 06       	st.w	r12[0x0],r6
80008320:	58 05       	cp.w	r5,0
80008322:	c0 90       	breq	80008334 <_Bfree+0x30>
80008324:	6a 19       	ld.w	r9,r5[0x4]
80008326:	6e 98       	ld.w	r8,r7[0x24]
80008328:	70 38       	ld.w	r8,r8[0xc]
8000832a:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000832e:	8b 0a       	st.w	r5[0x0],r10
80008330:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80008334:	d8 22       	popm	r4-r7,pc
80008336:	d7 03       	nop

80008338 <_Balloc>:
80008338:	d4 21       	pushm	r4-r7,lr
8000833a:	18 97       	mov	r7,r12
8000833c:	16 96       	mov	r6,r11
8000833e:	78 95       	ld.w	r5,r12[0x24]
80008340:	58 05       	cp.w	r5,0
80008342:	c0 91       	brne	80008354 <_Balloc+0x1c>
80008344:	31 0c       	mov	r12,16
80008346:	fe b0 fc fb 	rcall	80007d3c <malloc>
8000834a:	99 35       	st.w	r12[0xc],r5
8000834c:	8f 9c       	st.w	r7[0x24],r12
8000834e:	99 15       	st.w	r12[0x4],r5
80008350:	99 25       	st.w	r12[0x8],r5
80008352:	99 05       	st.w	r12[0x0],r5
80008354:	6e 95       	ld.w	r5,r7[0x24]
80008356:	6a 38       	ld.w	r8,r5[0xc]
80008358:	58 08       	cp.w	r8,0
8000835a:	c0 b1       	brne	80008370 <_Balloc+0x38>
8000835c:	31 0a       	mov	r10,16
8000835e:	30 4b       	mov	r11,4
80008360:	0e 9c       	mov	r12,r7
80008362:	e0 a0 04 93 	rcall	80008c88 <_calloc_r>
80008366:	8b 3c       	st.w	r5[0xc],r12
80008368:	6e 98       	ld.w	r8,r7[0x24]
8000836a:	70 3c       	ld.w	r12,r8[0xc]
8000836c:	58 0c       	cp.w	r12,0
8000836e:	c1 b0       	breq	800083a4 <_Balloc+0x6c>
80008370:	6e 98       	ld.w	r8,r7[0x24]
80008372:	70 38       	ld.w	r8,r8[0xc]
80008374:	f0 06 00 28 	add	r8,r8,r6<<0x2
80008378:	70 0c       	ld.w	r12,r8[0x0]
8000837a:	58 0c       	cp.w	r12,0
8000837c:	c0 40       	breq	80008384 <_Balloc+0x4c>
8000837e:	78 09       	ld.w	r9,r12[0x0]
80008380:	91 09       	st.w	r8[0x0],r9
80008382:	c0 e8       	rjmp	8000839e <_Balloc+0x66>
80008384:	0e 9c       	mov	r12,r7
80008386:	30 17       	mov	r7,1
80008388:	0e 9b       	mov	r11,r7
8000838a:	ee 06 09 47 	lsl	r7,r7,r6
8000838e:	ee ca ff fb 	sub	r10,r7,-5
80008392:	a3 6a       	lsl	r10,0x2
80008394:	e0 a0 04 7a 	rcall	80008c88 <_calloc_r>
80008398:	c0 60       	breq	800083a4 <_Balloc+0x6c>
8000839a:	99 16       	st.w	r12[0x4],r6
8000839c:	99 27       	st.w	r12[0x8],r7
8000839e:	30 08       	mov	r8,0
800083a0:	99 38       	st.w	r12[0xc],r8
800083a2:	99 48       	st.w	r12[0x10],r8
800083a4:	d8 22       	popm	r4-r7,pc
800083a6:	d7 03       	nop

800083a8 <__d2b>:
800083a8:	d4 31       	pushm	r0-r7,lr
800083aa:	20 2d       	sub	sp,8
800083ac:	16 93       	mov	r3,r11
800083ae:	12 96       	mov	r6,r9
800083b0:	10 95       	mov	r5,r8
800083b2:	14 92       	mov	r2,r10
800083b4:	30 1b       	mov	r11,1
800083b6:	cc 1f       	rcall	80008338 <_Balloc>
800083b8:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
800083bc:	50 09       	stdsp	sp[0x0],r9
800083be:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
800083c2:	b5 a9       	sbr	r9,0x14
800083c4:	f0 01 16 14 	lsr	r1,r8,0x14
800083c8:	fb f9 1a 00 	st.wne	sp[0x0],r9
800083cc:	18 94       	mov	r4,r12
800083ce:	58 02       	cp.w	r2,0
800083d0:	c1 d0       	breq	8000840a <__d2b+0x62>
800083d2:	fa cc ff f8 	sub	r12,sp,-8
800083d6:	18 d2       	st.w	--r12,r2
800083d8:	c3 5f       	rcall	80008242 <__lo0bits>
800083da:	40 18       	lddsp	r8,sp[0x4]
800083dc:	c0 d0       	breq	800083f6 <__d2b+0x4e>
800083de:	40 09       	lddsp	r9,sp[0x0]
800083e0:	f8 0a 11 20 	rsub	r10,r12,32
800083e4:	f2 0a 09 4a 	lsl	r10,r9,r10
800083e8:	f5 e8 10 08 	or	r8,r10,r8
800083ec:	89 58       	st.w	r4[0x14],r8
800083ee:	f2 0c 0a 49 	lsr	r9,r9,r12
800083f2:	50 09       	stdsp	sp[0x0],r9
800083f4:	c0 28       	rjmp	800083f8 <__d2b+0x50>
800083f6:	89 58       	st.w	r4[0x14],r8
800083f8:	40 08       	lddsp	r8,sp[0x0]
800083fa:	58 08       	cp.w	r8,0
800083fc:	f9 b3 01 02 	movne	r3,2
80008400:	f9 b3 00 01 	moveq	r3,1
80008404:	89 68       	st.w	r4[0x18],r8
80008406:	89 43       	st.w	r4[0x10],r3
80008408:	c0 88       	rjmp	80008418 <__d2b+0x70>
8000840a:	1a 9c       	mov	r12,sp
8000840c:	c1 bf       	rcall	80008242 <__lo0bits>
8000840e:	30 13       	mov	r3,1
80008410:	40 08       	lddsp	r8,sp[0x0]
80008412:	2e 0c       	sub	r12,-32
80008414:	89 43       	st.w	r4[0x10],r3
80008416:	89 58       	st.w	r4[0x14],r8
80008418:	58 01       	cp.w	r1,0
8000841a:	c0 90       	breq	8000842c <__d2b+0x84>
8000841c:	e2 c1 04 33 	sub	r1,r1,1075
80008420:	18 01       	add	r1,r12
80008422:	8d 01       	st.w	r6[0x0],r1
80008424:	f8 0c 11 35 	rsub	r12,r12,53
80008428:	8b 0c       	st.w	r5[0x0],r12
8000842a:	c0 c8       	rjmp	80008442 <__d2b+0x9a>
8000842c:	e6 c8 ff fc 	sub	r8,r3,-4
80008430:	f8 cc 04 32 	sub	r12,r12,1074
80008434:	a5 73       	lsl	r3,0x5
80008436:	8d 0c       	st.w	r6[0x0],r12
80008438:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000843c:	cd 3e       	rcall	800081e2 <__hi0bits>
8000843e:	18 13       	sub	r3,r12
80008440:	8b 03       	st.w	r5[0x0],r3
80008442:	08 9c       	mov	r12,r4
80008444:	2f ed       	sub	sp,-8
80008446:	d8 32       	popm	r0-r7,pc

80008448 <__mdiff>:
80008448:	d4 31       	pushm	r0-r7,lr
8000844a:	74 48       	ld.w	r8,r10[0x10]
8000844c:	76 45       	ld.w	r5,r11[0x10]
8000844e:	16 97       	mov	r7,r11
80008450:	14 96       	mov	r6,r10
80008452:	10 15       	sub	r5,r8
80008454:	c1 31       	brne	8000847a <__mdiff+0x32>
80008456:	2f b8       	sub	r8,-5
80008458:	ee ce ff ec 	sub	lr,r7,-20
8000845c:	a3 68       	lsl	r8,0x2
8000845e:	f4 08 00 0b 	add	r11,r10,r8
80008462:	ee 08 00 08 	add	r8,r7,r8
80008466:	11 4a       	ld.w	r10,--r8
80008468:	17 49       	ld.w	r9,--r11
8000846a:	12 3a       	cp.w	r10,r9
8000846c:	c0 30       	breq	80008472 <__mdiff+0x2a>
8000846e:	c0 e2       	brcc	8000848a <__mdiff+0x42>
80008470:	c0 78       	rjmp	8000847e <__mdiff+0x36>
80008472:	1c 38       	cp.w	r8,lr
80008474:	fe 9b ff f9 	brhi	80008466 <__mdiff+0x1e>
80008478:	c4 98       	rjmp	8000850a <__mdiff+0xc2>
8000847a:	58 05       	cp.w	r5,0
8000847c:	c0 64       	brge	80008488 <__mdiff+0x40>
8000847e:	0e 98       	mov	r8,r7
80008480:	30 15       	mov	r5,1
80008482:	0c 97       	mov	r7,r6
80008484:	10 96       	mov	r6,r8
80008486:	c0 28       	rjmp	8000848a <__mdiff+0x42>
80008488:	30 05       	mov	r5,0
8000848a:	6e 1b       	ld.w	r11,r7[0x4]
8000848c:	c5 6f       	rcall	80008338 <_Balloc>
8000848e:	6e 49       	ld.w	r9,r7[0x10]
80008490:	6c 44       	ld.w	r4,r6[0x10]
80008492:	99 35       	st.w	r12[0xc],r5
80008494:	2f b4       	sub	r4,-5
80008496:	f2 c5 ff fb 	sub	r5,r9,-5
8000849a:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000849e:	ee 05 00 25 	add	r5,r7,r5<<0x2
800084a2:	2e c6       	sub	r6,-20
800084a4:	2e c7       	sub	r7,-20
800084a6:	f8 c8 ff ec 	sub	r8,r12,-20
800084aa:	30 0a       	mov	r10,0
800084ac:	0f 0e       	ld.w	lr,r7++
800084ae:	0d 0b       	ld.w	r11,r6++
800084b0:	fc 02 16 10 	lsr	r2,lr,0x10
800084b4:	f6 03 16 10 	lsr	r3,r11,0x10
800084b8:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800084bc:	e4 03 01 03 	sub	r3,r2,r3
800084c0:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800084c4:	fc 0b 01 0b 	sub	r11,lr,r11
800084c8:	f6 0a 00 0a 	add	r10,r11,r10
800084cc:	b0 1a       	st.h	r8[0x2],r10
800084ce:	b1 4a       	asr	r10,0x10
800084d0:	e6 0a 00 0a 	add	r10,r3,r10
800084d4:	b0 0a       	st.h	r8[0x0],r10
800084d6:	2f c8       	sub	r8,-4
800084d8:	b1 4a       	asr	r10,0x10
800084da:	08 36       	cp.w	r6,r4
800084dc:	ce 83       	brcs	800084ac <__mdiff+0x64>
800084de:	c0 d8       	rjmp	800084f8 <__mdiff+0xb0>
800084e0:	0f 0b       	ld.w	r11,r7++
800084e2:	f6 0e 16 10 	lsr	lr,r11,0x10
800084e6:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800084ea:	16 0a       	add	r10,r11
800084ec:	b0 1a       	st.h	r8[0x2],r10
800084ee:	b1 4a       	asr	r10,0x10
800084f0:	1c 0a       	add	r10,lr
800084f2:	b0 0a       	st.h	r8[0x0],r10
800084f4:	2f c8       	sub	r8,-4
800084f6:	b1 4a       	asr	r10,0x10
800084f8:	0a 37       	cp.w	r7,r5
800084fa:	cf 33       	brcs	800084e0 <__mdiff+0x98>
800084fc:	c0 28       	rjmp	80008500 <__mdiff+0xb8>
800084fe:	20 19       	sub	r9,1
80008500:	11 4a       	ld.w	r10,--r8
80008502:	58 0a       	cp.w	r10,0
80008504:	cf d0       	breq	800084fe <__mdiff+0xb6>
80008506:	99 49       	st.w	r12[0x10],r9
80008508:	d8 32       	popm	r0-r7,pc
8000850a:	30 0b       	mov	r11,0
8000850c:	c1 6f       	rcall	80008338 <_Balloc>
8000850e:	30 18       	mov	r8,1
80008510:	99 48       	st.w	r12[0x10],r8
80008512:	30 08       	mov	r8,0
80008514:	99 58       	st.w	r12[0x14],r8
80008516:	d8 32       	popm	r0-r7,pc

80008518 <__lshift>:
80008518:	d4 31       	pushm	r0-r7,lr
8000851a:	16 97       	mov	r7,r11
8000851c:	76 46       	ld.w	r6,r11[0x10]
8000851e:	f4 02 14 05 	asr	r2,r10,0x5
80008522:	2f f6       	sub	r6,-1
80008524:	14 93       	mov	r3,r10
80008526:	18 94       	mov	r4,r12
80008528:	04 06       	add	r6,r2
8000852a:	76 1b       	ld.w	r11,r11[0x4]
8000852c:	6e 28       	ld.w	r8,r7[0x8]
8000852e:	c0 38       	rjmp	80008534 <__lshift+0x1c>
80008530:	2f fb       	sub	r11,-1
80008532:	a1 78       	lsl	r8,0x1
80008534:	10 36       	cp.w	r6,r8
80008536:	fe 99 ff fd 	brgt	80008530 <__lshift+0x18>
8000853a:	08 9c       	mov	r12,r4
8000853c:	cf ee       	rcall	80008338 <_Balloc>
8000853e:	30 09       	mov	r9,0
80008540:	18 95       	mov	r5,r12
80008542:	f8 c8 ff ec 	sub	r8,r12,-20
80008546:	12 9a       	mov	r10,r9
80008548:	c0 38       	rjmp	8000854e <__lshift+0x36>
8000854a:	10 aa       	st.w	r8++,r10
8000854c:	2f f9       	sub	r9,-1
8000854e:	04 39       	cp.w	r9,r2
80008550:	cf d5       	brlt	8000854a <__lshift+0x32>
80008552:	6e 4b       	ld.w	r11,r7[0x10]
80008554:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80008558:	2f bb       	sub	r11,-5
8000855a:	ee c9 ff ec 	sub	r9,r7,-20
8000855e:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80008562:	58 03       	cp.w	r3,0
80008564:	c1 30       	breq	8000858a <__lshift+0x72>
80008566:	e6 0c 11 20 	rsub	r12,r3,32
8000856a:	30 0a       	mov	r10,0
8000856c:	72 02       	ld.w	r2,r9[0x0]
8000856e:	e4 03 09 42 	lsl	r2,r2,r3
80008572:	04 4a       	or	r10,r2
80008574:	10 aa       	st.w	r8++,r10
80008576:	13 0a       	ld.w	r10,r9++
80008578:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000857c:	16 39       	cp.w	r9,r11
8000857e:	cf 73       	brcs	8000856c <__lshift+0x54>
80008580:	91 0a       	st.w	r8[0x0],r10
80008582:	58 0a       	cp.w	r10,0
80008584:	c0 70       	breq	80008592 <__lshift+0x7a>
80008586:	2f f6       	sub	r6,-1
80008588:	c0 58       	rjmp	80008592 <__lshift+0x7a>
8000858a:	13 0a       	ld.w	r10,r9++
8000858c:	10 aa       	st.w	r8++,r10
8000858e:	16 39       	cp.w	r9,r11
80008590:	cf d3       	brcs	8000858a <__lshift+0x72>
80008592:	08 9c       	mov	r12,r4
80008594:	20 16       	sub	r6,1
80008596:	0e 9b       	mov	r11,r7
80008598:	8b 46       	st.w	r5[0x10],r6
8000859a:	cb 5e       	rcall	80008304 <_Bfree>
8000859c:	0a 9c       	mov	r12,r5
8000859e:	d8 32       	popm	r0-r7,pc

800085a0 <__multiply>:
800085a0:	d4 31       	pushm	r0-r7,lr
800085a2:	20 2d       	sub	sp,8
800085a4:	76 49       	ld.w	r9,r11[0x10]
800085a6:	74 48       	ld.w	r8,r10[0x10]
800085a8:	16 96       	mov	r6,r11
800085aa:	14 95       	mov	r5,r10
800085ac:	10 39       	cp.w	r9,r8
800085ae:	ec 08 17 50 	movlt	r8,r6
800085b2:	ea 06 17 50 	movlt	r6,r5
800085b6:	f0 05 17 50 	movlt	r5,r8
800085ba:	6c 28       	ld.w	r8,r6[0x8]
800085bc:	76 43       	ld.w	r3,r11[0x10]
800085be:	74 42       	ld.w	r2,r10[0x10]
800085c0:	76 1b       	ld.w	r11,r11[0x4]
800085c2:	e4 03 00 07 	add	r7,r2,r3
800085c6:	10 37       	cp.w	r7,r8
800085c8:	f7 bb 09 ff 	subgt	r11,-1
800085cc:	cb 6e       	rcall	80008338 <_Balloc>
800085ce:	ee c4 ff fb 	sub	r4,r7,-5
800085d2:	f8 c9 ff ec 	sub	r9,r12,-20
800085d6:	f8 04 00 24 	add	r4,r12,r4<<0x2
800085da:	30 0a       	mov	r10,0
800085dc:	12 98       	mov	r8,r9
800085de:	c0 28       	rjmp	800085e2 <__multiply+0x42>
800085e0:	10 aa       	st.w	r8++,r10
800085e2:	08 38       	cp.w	r8,r4
800085e4:	cf e3       	brcs	800085e0 <__multiply+0x40>
800085e6:	2f b3       	sub	r3,-5
800085e8:	2f b2       	sub	r2,-5
800085ea:	ec 03 00 23 	add	r3,r6,r3<<0x2
800085ee:	ea 02 00 22 	add	r2,r5,r2<<0x2
800085f2:	ec cb ff ec 	sub	r11,r6,-20
800085f6:	50 12       	stdsp	sp[0x4],r2
800085f8:	ea ca ff ec 	sub	r10,r5,-20
800085fc:	c4 48       	rjmp	80008684 <__multiply+0xe4>
800085fe:	94 95       	ld.uh	r5,r10[0x2]
80008600:	58 05       	cp.w	r5,0
80008602:	c2 00       	breq	80008642 <__multiply+0xa2>
80008604:	12 98       	mov	r8,r9
80008606:	16 96       	mov	r6,r11
80008608:	30 0e       	mov	lr,0
8000860a:	50 09       	stdsp	sp[0x0],r9
8000860c:	0d 02       	ld.w	r2,r6++
8000860e:	e4 00 16 10 	lsr	r0,r2,0x10
80008612:	70 01       	ld.w	r1,r8[0x0]
80008614:	70 09       	ld.w	r9,r8[0x0]
80008616:	b1 81       	lsr	r1,0x10
80008618:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000861c:	e0 05 03 41 	mac	r1,r0,r5
80008620:	ab 32       	mul	r2,r5
80008622:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80008626:	00 02       	add	r2,r0
80008628:	e4 0e 00 0e 	add	lr,r2,lr
8000862c:	b0 1e       	st.h	r8[0x2],lr
8000862e:	b1 8e       	lsr	lr,0x10
80008630:	1c 01       	add	r1,lr
80008632:	b0 01       	st.h	r8[0x0],r1
80008634:	e2 0e 16 10 	lsr	lr,r1,0x10
80008638:	2f c8       	sub	r8,-4
8000863a:	06 36       	cp.w	r6,r3
8000863c:	ce 83       	brcs	8000860c <__multiply+0x6c>
8000863e:	40 09       	lddsp	r9,sp[0x0]
80008640:	91 0e       	st.w	r8[0x0],lr
80008642:	94 86       	ld.uh	r6,r10[0x0]
80008644:	58 06       	cp.w	r6,0
80008646:	c1 d0       	breq	80008680 <__multiply+0xe0>
80008648:	72 02       	ld.w	r2,r9[0x0]
8000864a:	12 98       	mov	r8,r9
8000864c:	16 9e       	mov	lr,r11
8000864e:	30 05       	mov	r5,0
80008650:	b0 12       	st.h	r8[0x2],r2
80008652:	1d 01       	ld.w	r1,lr++
80008654:	90 82       	ld.uh	r2,r8[0x0]
80008656:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000865a:	ad 30       	mul	r0,r6
8000865c:	e0 02 00 02 	add	r2,r0,r2
80008660:	e4 05 00 05 	add	r5,r2,r5
80008664:	b0 05       	st.h	r8[0x0],r5
80008666:	b1 85       	lsr	r5,0x10
80008668:	b1 81       	lsr	r1,0x10
8000866a:	2f c8       	sub	r8,-4
8000866c:	ad 31       	mul	r1,r6
8000866e:	90 92       	ld.uh	r2,r8[0x2]
80008670:	e2 02 00 02 	add	r2,r1,r2
80008674:	0a 02       	add	r2,r5
80008676:	e4 05 16 10 	lsr	r5,r2,0x10
8000867a:	06 3e       	cp.w	lr,r3
8000867c:	ce a3       	brcs	80008650 <__multiply+0xb0>
8000867e:	91 02       	st.w	r8[0x0],r2
80008680:	2f ca       	sub	r10,-4
80008682:	2f c9       	sub	r9,-4
80008684:	40 18       	lddsp	r8,sp[0x4]
80008686:	10 3a       	cp.w	r10,r8
80008688:	cb b3       	brcs	800085fe <__multiply+0x5e>
8000868a:	c0 28       	rjmp	8000868e <__multiply+0xee>
8000868c:	20 17       	sub	r7,1
8000868e:	58 07       	cp.w	r7,0
80008690:	e0 8a 00 05 	brle	8000869a <__multiply+0xfa>
80008694:	09 48       	ld.w	r8,--r4
80008696:	58 08       	cp.w	r8,0
80008698:	cf a0       	breq	8000868c <__multiply+0xec>
8000869a:	99 47       	st.w	r12[0x10],r7
8000869c:	2f ed       	sub	sp,-8
8000869e:	d8 32       	popm	r0-r7,pc

800086a0 <__i2b>:
800086a0:	d4 21       	pushm	r4-r7,lr
800086a2:	16 97       	mov	r7,r11
800086a4:	30 1b       	mov	r11,1
800086a6:	c4 9e       	rcall	80008338 <_Balloc>
800086a8:	30 19       	mov	r9,1
800086aa:	99 57       	st.w	r12[0x14],r7
800086ac:	99 49       	st.w	r12[0x10],r9
800086ae:	d8 22       	popm	r4-r7,pc

800086b0 <__multadd>:
800086b0:	d4 31       	pushm	r0-r7,lr
800086b2:	30 08       	mov	r8,0
800086b4:	12 95       	mov	r5,r9
800086b6:	16 97       	mov	r7,r11
800086b8:	18 96       	mov	r6,r12
800086ba:	76 44       	ld.w	r4,r11[0x10]
800086bc:	f6 c9 ff ec 	sub	r9,r11,-20
800086c0:	72 0b       	ld.w	r11,r9[0x0]
800086c2:	f6 0c 16 10 	lsr	r12,r11,0x10
800086c6:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800086ca:	f4 0c 02 4c 	mul	r12,r10,r12
800086ce:	f4 0b 03 45 	mac	r5,r10,r11
800086d2:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
800086d6:	b1 85       	lsr	r5,0x10
800086d8:	18 05       	add	r5,r12
800086da:	ea 0c 15 10 	lsl	r12,r5,0x10
800086de:	f8 0b 00 0b 	add	r11,r12,r11
800086e2:	12 ab       	st.w	r9++,r11
800086e4:	2f f8       	sub	r8,-1
800086e6:	b1 85       	lsr	r5,0x10
800086e8:	08 38       	cp.w	r8,r4
800086ea:	ce b5       	brlt	800086c0 <__multadd+0x10>
800086ec:	58 05       	cp.w	r5,0
800086ee:	c1 c0       	breq	80008726 <__multadd+0x76>
800086f0:	6e 28       	ld.w	r8,r7[0x8]
800086f2:	10 34       	cp.w	r4,r8
800086f4:	c1 35       	brlt	8000871a <__multadd+0x6a>
800086f6:	6e 1b       	ld.w	r11,r7[0x4]
800086f8:	0c 9c       	mov	r12,r6
800086fa:	2f fb       	sub	r11,-1
800086fc:	c1 ee       	rcall	80008338 <_Balloc>
800086fe:	6e 4a       	ld.w	r10,r7[0x10]
80008700:	ee cb ff f4 	sub	r11,r7,-12
80008704:	18 93       	mov	r3,r12
80008706:	2f ea       	sub	r10,-2
80008708:	2f 4c       	sub	r12,-12
8000870a:	a3 6a       	lsl	r10,0x2
8000870c:	fe b0 de 39 	rcall	8000437e <memcpy>
80008710:	0e 9b       	mov	r11,r7
80008712:	0c 9c       	mov	r12,r6
80008714:	fe b0 fd f8 	rcall	80008304 <_Bfree>
80008718:	06 97       	mov	r7,r3
8000871a:	e8 c8 ff ff 	sub	r8,r4,-1
8000871e:	2f b4       	sub	r4,-5
80008720:	8f 48       	st.w	r7[0x10],r8
80008722:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80008726:	0e 9c       	mov	r12,r7
80008728:	d8 32       	popm	r0-r7,pc
8000872a:	d7 03       	nop

8000872c <__pow5mult>:
8000872c:	d4 31       	pushm	r0-r7,lr
8000872e:	14 96       	mov	r6,r10
80008730:	18 97       	mov	r7,r12
80008732:	16 94       	mov	r4,r11
80008734:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80008738:	c0 90       	breq	8000874a <__pow5mult+0x1e>
8000873a:	20 18       	sub	r8,1
8000873c:	fe c9 e5 70 	sub	r9,pc,-6800
80008740:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80008744:	30 09       	mov	r9,0
80008746:	cb 5f       	rcall	800086b0 <__multadd>
80008748:	18 94       	mov	r4,r12
8000874a:	a3 46       	asr	r6,0x2
8000874c:	c3 40       	breq	800087b4 <__pow5mult+0x88>
8000874e:	6e 95       	ld.w	r5,r7[0x24]
80008750:	58 05       	cp.w	r5,0
80008752:	c0 91       	brne	80008764 <__pow5mult+0x38>
80008754:	31 0c       	mov	r12,16
80008756:	fe b0 fa f3 	rcall	80007d3c <malloc>
8000875a:	99 35       	st.w	r12[0xc],r5
8000875c:	8f 9c       	st.w	r7[0x24],r12
8000875e:	99 15       	st.w	r12[0x4],r5
80008760:	99 25       	st.w	r12[0x8],r5
80008762:	99 05       	st.w	r12[0x0],r5
80008764:	6e 93       	ld.w	r3,r7[0x24]
80008766:	66 25       	ld.w	r5,r3[0x8]
80008768:	58 05       	cp.w	r5,0
8000876a:	c0 c1       	brne	80008782 <__pow5mult+0x56>
8000876c:	e0 6b 02 71 	mov	r11,625
80008770:	0e 9c       	mov	r12,r7
80008772:	c9 7f       	rcall	800086a0 <__i2b>
80008774:	87 2c       	st.w	r3[0x8],r12
80008776:	30 08       	mov	r8,0
80008778:	18 95       	mov	r5,r12
8000877a:	99 08       	st.w	r12[0x0],r8
8000877c:	c0 38       	rjmp	80008782 <__pow5mult+0x56>
8000877e:	06 9c       	mov	r12,r3
80008780:	18 95       	mov	r5,r12
80008782:	ed b6 00 00 	bld	r6,0x0
80008786:	c0 b1       	brne	8000879c <__pow5mult+0x70>
80008788:	08 9b       	mov	r11,r4
8000878a:	0a 9a       	mov	r10,r5
8000878c:	0e 9c       	mov	r12,r7
8000878e:	c0 9f       	rcall	800085a0 <__multiply>
80008790:	08 9b       	mov	r11,r4
80008792:	18 93       	mov	r3,r12
80008794:	0e 9c       	mov	r12,r7
80008796:	06 94       	mov	r4,r3
80008798:	fe b0 fd b6 	rcall	80008304 <_Bfree>
8000879c:	a1 56       	asr	r6,0x1
8000879e:	c0 b0       	breq	800087b4 <__pow5mult+0x88>
800087a0:	6a 03       	ld.w	r3,r5[0x0]
800087a2:	58 03       	cp.w	r3,0
800087a4:	ce d1       	brne	8000877e <__pow5mult+0x52>
800087a6:	0a 9a       	mov	r10,r5
800087a8:	0a 9b       	mov	r11,r5
800087aa:	0e 9c       	mov	r12,r7
800087ac:	cf ae       	rcall	800085a0 <__multiply>
800087ae:	8b 0c       	st.w	r5[0x0],r12
800087b0:	99 03       	st.w	r12[0x0],r3
800087b2:	ce 7b       	rjmp	80008780 <__pow5mult+0x54>
800087b4:	08 9c       	mov	r12,r4
800087b6:	d8 32       	popm	r0-r7,pc

800087b8 <_realloc_r>:
800087b8:	d4 31       	pushm	r0-r7,lr
800087ba:	20 1d       	sub	sp,4
800087bc:	16 94       	mov	r4,r11
800087be:	18 92       	mov	r2,r12
800087c0:	14 9b       	mov	r11,r10
800087c2:	58 04       	cp.w	r4,0
800087c4:	c0 51       	brne	800087ce <_realloc_r+0x16>
800087c6:	fe b0 fa c3 	rcall	80007d4c <_malloc_r>
800087ca:	18 95       	mov	r5,r12
800087cc:	c5 39       	rjmp	80008a72 <_realloc_r+0x2ba>
800087ce:	50 0a       	stdsp	sp[0x0],r10
800087d0:	fe b0 fd 07 	rcall	800081de <__malloc_lock>
800087d4:	40 0b       	lddsp	r11,sp[0x0]
800087d6:	f6 c8 ff f5 	sub	r8,r11,-11
800087da:	e8 c1 00 08 	sub	r1,r4,8
800087de:	10 96       	mov	r6,r8
800087e0:	62 1c       	ld.w	r12,r1[0x4]
800087e2:	e0 16 ff f8 	andl	r6,0xfff8
800087e6:	59 68       	cp.w	r8,22
800087e8:	f9 b6 08 10 	movls	r6,16
800087ec:	16 36       	cp.w	r6,r11
800087ee:	5f 38       	srlo	r8
800087f0:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
800087f4:	c0 50       	breq	800087fe <_realloc_r+0x46>
800087f6:	30 c8       	mov	r8,12
800087f8:	30 05       	mov	r5,0
800087fa:	85 38       	st.w	r2[0xc],r8
800087fc:	c3 b9       	rjmp	80008a72 <_realloc_r+0x2ba>
800087fe:	18 90       	mov	r0,r12
80008800:	e0 10 ff fc 	andl	r0,0xfffc
80008804:	0c 30       	cp.w	r0,r6
80008806:	e0 84 01 0b 	brge	80008a1c <_realloc_r+0x264>
8000880a:	e0 68 01 00 	mov	r8,256
8000880e:	e2 00 00 09 	add	r9,r1,r0
80008812:	70 25       	ld.w	r5,r8[0x8]
80008814:	0a 39       	cp.w	r9,r5
80008816:	c0 90       	breq	80008828 <_realloc_r+0x70>
80008818:	72 1a       	ld.w	r10,r9[0x4]
8000881a:	a1 ca       	cbr	r10,0x0
8000881c:	f2 0a 00 0a 	add	r10,r9,r10
80008820:	74 1a       	ld.w	r10,r10[0x4]
80008822:	ed ba 00 00 	bld	r10,0x0
80008826:	c2 20       	breq	8000886a <_realloc_r+0xb2>
80008828:	72 1a       	ld.w	r10,r9[0x4]
8000882a:	e0 1a ff fc 	andl	r10,0xfffc
8000882e:	f4 00 00 03 	add	r3,r10,r0
80008832:	0a 39       	cp.w	r9,r5
80008834:	c1 31       	brne	8000885a <_realloc_r+0xa2>
80008836:	ec c7 ff f0 	sub	r7,r6,-16
8000883a:	0e 33       	cp.w	r3,r7
8000883c:	c1 95       	brlt	8000886e <_realloc_r+0xb6>
8000883e:	e2 06 00 09 	add	r9,r1,r6
80008842:	0c 13       	sub	r3,r6
80008844:	a1 a3       	sbr	r3,0x0
80008846:	93 13       	st.w	r9[0x4],r3
80008848:	91 29       	st.w	r8[0x8],r9
8000884a:	04 9c       	mov	r12,r2
8000884c:	62 18       	ld.w	r8,r1[0x4]
8000884e:	08 95       	mov	r5,r4
80008850:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008854:	10 46       	or	r6,r8
80008856:	83 16       	st.w	r1[0x4],r6
80008858:	c0 b9       	rjmp	80008a6e <_realloc_r+0x2b6>
8000885a:	0c 33       	cp.w	r3,r6
8000885c:	c0 95       	brlt	8000886e <_realloc_r+0xb6>
8000885e:	72 28       	ld.w	r8,r9[0x8]
80008860:	02 97       	mov	r7,r1
80008862:	72 39       	ld.w	r9,r9[0xc]
80008864:	93 28       	st.w	r9[0x8],r8
80008866:	91 39       	st.w	r8[0xc],r9
80008868:	cd c8       	rjmp	80008a20 <_realloc_r+0x268>
8000886a:	30 0a       	mov	r10,0
8000886c:	14 99       	mov	r9,r10
8000886e:	ed bc 00 00 	bld	r12,0x0
80008872:	e0 80 00 95 	breq	8000899c <_realloc_r+0x1e4>
80008876:	62 07       	ld.w	r7,r1[0x0]
80008878:	e2 07 01 07 	sub	r7,r1,r7
8000887c:	6e 1c       	ld.w	r12,r7[0x4]
8000887e:	e0 1c ff fc 	andl	r12,0xfffc
80008882:	58 09       	cp.w	r9,0
80008884:	c5 60       	breq	80008930 <_realloc_r+0x178>
80008886:	f8 00 00 03 	add	r3,r12,r0
8000888a:	0a 39       	cp.w	r9,r5
8000888c:	c4 81       	brne	8000891c <_realloc_r+0x164>
8000888e:	14 03       	add	r3,r10
80008890:	ec c9 ff f0 	sub	r9,r6,-16
80008894:	12 33       	cp.w	r3,r9
80008896:	c4 d5       	brlt	80008930 <_realloc_r+0x178>
80008898:	6e 3a       	ld.w	r10,r7[0xc]
8000889a:	6e 29       	ld.w	r9,r7[0x8]
8000889c:	95 29       	st.w	r10[0x8],r9
8000889e:	93 3a       	st.w	r9[0xc],r10
800088a0:	ee c5 ff f8 	sub	r5,r7,-8
800088a4:	e0 ca 00 04 	sub	r10,r0,4
800088a8:	e0 4a 00 24 	cp.w	r10,36
800088ac:	e0 8b 00 25 	brhi	800088f6 <_realloc_r+0x13e>
800088b0:	0a 99       	mov	r9,r5
800088b2:	59 3a       	cp.w	r10,19
800088b4:	e0 88 00 1a 	brls	800088e8 <_realloc_r+0x130>
800088b8:	09 09       	ld.w	r9,r4++
800088ba:	8b 09       	st.w	r5[0x0],r9
800088bc:	09 09       	ld.w	r9,r4++
800088be:	8f 39       	st.w	r7[0xc],r9
800088c0:	ee c9 ff f0 	sub	r9,r7,-16
800088c4:	59 ba       	cp.w	r10,27
800088c6:	e0 88 00 11 	brls	800088e8 <_realloc_r+0x130>
800088ca:	09 0b       	ld.w	r11,r4++
800088cc:	93 0b       	st.w	r9[0x0],r11
800088ce:	09 09       	ld.w	r9,r4++
800088d0:	8f 59       	st.w	r7[0x14],r9
800088d2:	ee c9 ff e8 	sub	r9,r7,-24
800088d6:	e0 4a 00 24 	cp.w	r10,36
800088da:	c0 71       	brne	800088e8 <_realloc_r+0x130>
800088dc:	09 0a       	ld.w	r10,r4++
800088de:	93 0a       	st.w	r9[0x0],r10
800088e0:	ee c9 ff e0 	sub	r9,r7,-32
800088e4:	09 0a       	ld.w	r10,r4++
800088e6:	8f 7a       	st.w	r7[0x1c],r10
800088e8:	09 0a       	ld.w	r10,r4++
800088ea:	12 aa       	st.w	r9++,r10
800088ec:	68 0a       	ld.w	r10,r4[0x0]
800088ee:	93 0a       	st.w	r9[0x0],r10
800088f0:	68 1a       	ld.w	r10,r4[0x4]
800088f2:	93 1a       	st.w	r9[0x4],r10
800088f4:	c0 78       	rjmp	80008902 <_realloc_r+0x14a>
800088f6:	50 08       	stdsp	sp[0x0],r8
800088f8:	08 9b       	mov	r11,r4
800088fa:	0a 9c       	mov	r12,r5
800088fc:	fe b0 fc 4b 	rcall	80008192 <memmove>
80008900:	40 08       	lddsp	r8,sp[0x0]
80008902:	ee 06 00 09 	add	r9,r7,r6
80008906:	0c 13       	sub	r3,r6
80008908:	a1 a3       	sbr	r3,0x0
8000890a:	93 13       	st.w	r9[0x4],r3
8000890c:	91 29       	st.w	r8[0x8],r9
8000890e:	04 9c       	mov	r12,r2
80008910:	6e 18       	ld.w	r8,r7[0x4]
80008912:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008916:	10 46       	or	r6,r8
80008918:	8f 16       	st.w	r7[0x4],r6
8000891a:	ca a8       	rjmp	80008a6e <_realloc_r+0x2b6>
8000891c:	14 03       	add	r3,r10
8000891e:	0c 33       	cp.w	r3,r6
80008920:	c0 85       	brlt	80008930 <_realloc_r+0x178>
80008922:	72 28       	ld.w	r8,r9[0x8]
80008924:	72 39       	ld.w	r9,r9[0xc]
80008926:	93 28       	st.w	r9[0x8],r8
80008928:	91 39       	st.w	r8[0xc],r9
8000892a:	6e 28       	ld.w	r8,r7[0x8]
8000892c:	6e 39       	ld.w	r9,r7[0xc]
8000892e:	c0 78       	rjmp	8000893c <_realloc_r+0x184>
80008930:	f8 00 00 03 	add	r3,r12,r0
80008934:	0c 33       	cp.w	r3,r6
80008936:	c3 35       	brlt	8000899c <_realloc_r+0x1e4>
80008938:	6e 39       	ld.w	r9,r7[0xc]
8000893a:	6e 28       	ld.w	r8,r7[0x8]
8000893c:	93 28       	st.w	r9[0x8],r8
8000893e:	91 39       	st.w	r8[0xc],r9
80008940:	e0 ca 00 04 	sub	r10,r0,4
80008944:	ee cc ff f8 	sub	r12,r7,-8
80008948:	e0 4a 00 24 	cp.w	r10,36
8000894c:	e0 8b 00 24 	brhi	80008994 <_realloc_r+0x1dc>
80008950:	59 3a       	cp.w	r10,19
80008952:	e0 88 00 1a 	brls	80008986 <_realloc_r+0x1ce>
80008956:	09 08       	ld.w	r8,r4++
80008958:	99 08       	st.w	r12[0x0],r8
8000895a:	09 08       	ld.w	r8,r4++
8000895c:	8f 38       	st.w	r7[0xc],r8
8000895e:	ee cc ff f0 	sub	r12,r7,-16
80008962:	59 ba       	cp.w	r10,27
80008964:	e0 88 00 11 	brls	80008986 <_realloc_r+0x1ce>
80008968:	09 08       	ld.w	r8,r4++
8000896a:	99 08       	st.w	r12[0x0],r8
8000896c:	09 08       	ld.w	r8,r4++
8000896e:	8f 58       	st.w	r7[0x14],r8
80008970:	ee cc ff e8 	sub	r12,r7,-24
80008974:	e0 4a 00 24 	cp.w	r10,36
80008978:	c0 71       	brne	80008986 <_realloc_r+0x1ce>
8000897a:	09 08       	ld.w	r8,r4++
8000897c:	99 08       	st.w	r12[0x0],r8
8000897e:	ee cc ff e0 	sub	r12,r7,-32
80008982:	09 08       	ld.w	r8,r4++
80008984:	8f 78       	st.w	r7[0x1c],r8
80008986:	09 08       	ld.w	r8,r4++
80008988:	18 a8       	st.w	r12++,r8
8000898a:	68 08       	ld.w	r8,r4[0x0]
8000898c:	99 08       	st.w	r12[0x0],r8
8000898e:	68 18       	ld.w	r8,r4[0x4]
80008990:	99 18       	st.w	r12[0x4],r8
80008992:	c4 78       	rjmp	80008a20 <_realloc_r+0x268>
80008994:	08 9b       	mov	r11,r4
80008996:	fe b0 fb fe 	rcall	80008192 <memmove>
8000899a:	c4 38       	rjmp	80008a20 <_realloc_r+0x268>
8000899c:	04 9c       	mov	r12,r2
8000899e:	fe b0 f9 d7 	rcall	80007d4c <_malloc_r>
800089a2:	18 95       	mov	r5,r12
800089a4:	c3 a0       	breq	80008a18 <_realloc_r+0x260>
800089a6:	62 18       	ld.w	r8,r1[0x4]
800089a8:	f8 c9 00 08 	sub	r9,r12,8
800089ac:	a1 c8       	cbr	r8,0x0
800089ae:	e2 08 00 08 	add	r8,r1,r8
800089b2:	10 39       	cp.w	r9,r8
800089b4:	c0 71       	brne	800089c2 <_realloc_r+0x20a>
800089b6:	72 13       	ld.w	r3,r9[0x4]
800089b8:	02 97       	mov	r7,r1
800089ba:	e0 13 ff fc 	andl	r3,0xfffc
800089be:	00 03       	add	r3,r0
800089c0:	c3 08       	rjmp	80008a20 <_realloc_r+0x268>
800089c2:	e0 ca 00 04 	sub	r10,r0,4
800089c6:	e0 4a 00 24 	cp.w	r10,36
800089ca:	e0 8b 00 20 	brhi	80008a0a <_realloc_r+0x252>
800089ce:	08 99       	mov	r9,r4
800089d0:	18 98       	mov	r8,r12
800089d2:	59 3a       	cp.w	r10,19
800089d4:	e0 88 00 14 	brls	800089fc <_realloc_r+0x244>
800089d8:	13 0b       	ld.w	r11,r9++
800089da:	10 ab       	st.w	r8++,r11
800089dc:	13 0b       	ld.w	r11,r9++
800089de:	10 ab       	st.w	r8++,r11
800089e0:	59 ba       	cp.w	r10,27
800089e2:	e0 88 00 0d 	brls	800089fc <_realloc_r+0x244>
800089e6:	13 0b       	ld.w	r11,r9++
800089e8:	10 ab       	st.w	r8++,r11
800089ea:	13 0b       	ld.w	r11,r9++
800089ec:	10 ab       	st.w	r8++,r11
800089ee:	e0 4a 00 24 	cp.w	r10,36
800089f2:	c0 51       	brne	800089fc <_realloc_r+0x244>
800089f4:	13 0a       	ld.w	r10,r9++
800089f6:	10 aa       	st.w	r8++,r10
800089f8:	13 0a       	ld.w	r10,r9++
800089fa:	10 aa       	st.w	r8++,r10
800089fc:	13 0a       	ld.w	r10,r9++
800089fe:	10 aa       	st.w	r8++,r10
80008a00:	72 0a       	ld.w	r10,r9[0x0]
80008a02:	91 0a       	st.w	r8[0x0],r10
80008a04:	72 19       	ld.w	r9,r9[0x4]
80008a06:	91 19       	st.w	r8[0x4],r9
80008a08:	c0 48       	rjmp	80008a10 <_realloc_r+0x258>
80008a0a:	08 9b       	mov	r11,r4
80008a0c:	fe b0 fb c3 	rcall	80008192 <memmove>
80008a10:	08 9b       	mov	r11,r4
80008a12:	04 9c       	mov	r12,r2
80008a14:	fe b0 f6 f6 	rcall	80007800 <_free_r>
80008a18:	04 9c       	mov	r12,r2
80008a1a:	c2 a8       	rjmp	80008a6e <_realloc_r+0x2b6>
80008a1c:	00 93       	mov	r3,r0
80008a1e:	02 97       	mov	r7,r1
80008a20:	e6 06 01 09 	sub	r9,r3,r6
80008a24:	6e 18       	ld.w	r8,r7[0x4]
80008a26:	58 f9       	cp.w	r9,15
80008a28:	e0 88 00 16 	brls	80008a54 <_realloc_r+0x29c>
80008a2c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008a30:	ed e8 10 08 	or	r8,r6,r8
80008a34:	8f 18       	st.w	r7[0x4],r8
80008a36:	12 98       	mov	r8,r9
80008a38:	a1 a8       	sbr	r8,0x0
80008a3a:	ee 06 00 0b 	add	r11,r7,r6
80008a3e:	f6 09 00 09 	add	r9,r11,r9
80008a42:	97 18       	st.w	r11[0x4],r8
80008a44:	72 18       	ld.w	r8,r9[0x4]
80008a46:	a1 a8       	sbr	r8,0x0
80008a48:	2f 8b       	sub	r11,-8
80008a4a:	93 18       	st.w	r9[0x4],r8
80008a4c:	04 9c       	mov	r12,r2
80008a4e:	fe b0 f6 d9 	rcall	80007800 <_free_r>
80008a52:	c0 b8       	rjmp	80008a68 <_realloc_r+0x2b0>
80008a54:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008a58:	e7 e8 10 08 	or	r8,r3,r8
80008a5c:	8f 18       	st.w	r7[0x4],r8
80008a5e:	ee 03 00 03 	add	r3,r7,r3
80008a62:	66 18       	ld.w	r8,r3[0x4]
80008a64:	a1 a8       	sbr	r8,0x0
80008a66:	87 18       	st.w	r3[0x4],r8
80008a68:	04 9c       	mov	r12,r2
80008a6a:	ee c5 ff f8 	sub	r5,r7,-8
80008a6e:	fe b0 fb b9 	rcall	800081e0 <__malloc_unlock>
80008a72:	0a 9c       	mov	r12,r5
80008a74:	2f fd       	sub	sp,-4
80008a76:	d8 32       	popm	r0-r7,pc

80008a78 <__isinfd>:
80008a78:	14 98       	mov	r8,r10
80008a7a:	fc 19 7f f0 	movh	r9,0x7ff0
80008a7e:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008a82:	f0 0b 11 00 	rsub	r11,r8,0
80008a86:	f7 e8 10 08 	or	r8,r11,r8
80008a8a:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
80008a8e:	f2 08 01 08 	sub	r8,r9,r8
80008a92:	f0 0c 11 00 	rsub	r12,r8,0
80008a96:	f9 e8 10 08 	or	r8,r12,r8
80008a9a:	f0 0c 14 1f 	asr	r12,r8,0x1f
80008a9e:	2f fc       	sub	r12,-1
80008aa0:	5e fc       	retal	r12

80008aa2 <__isnand>:
80008aa2:	14 98       	mov	r8,r10
80008aa4:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
80008aa8:	f0 0c 11 00 	rsub	r12,r8,0
80008aac:	10 4c       	or	r12,r8
80008aae:	fc 18 7f f0 	movh	r8,0x7ff0
80008ab2:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80008ab6:	f0 0c 01 0c 	sub	r12,r8,r12
80008aba:	bf 9c       	lsr	r12,0x1f
80008abc:	5e fc       	retal	r12
80008abe:	d7 03       	nop

80008ac0 <_sbrk_r>:
80008ac0:	d4 21       	pushm	r4-r7,lr
80008ac2:	30 08       	mov	r8,0
80008ac4:	18 97       	mov	r7,r12
80008ac6:	e0 66 06 58 	mov	r6,1624
80008aca:	16 9c       	mov	r12,r11
80008acc:	8d 08       	st.w	r6[0x0],r8
80008ace:	ca fc       	rcall	80008c2c <_sbrk>
80008ad0:	5b fc       	cp.w	r12,-1
80008ad2:	c0 51       	brne	80008adc <_sbrk_r+0x1c>
80008ad4:	6c 08       	ld.w	r8,r6[0x0]
80008ad6:	58 08       	cp.w	r8,0
80008ad8:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008adc:	d8 22       	popm	r4-r7,pc
80008ade:	d7 03       	nop

80008ae0 <__sclose>:
80008ae0:	d4 01       	pushm	lr
80008ae2:	96 7b       	ld.sh	r11,r11[0xe]
80008ae4:	cf ec       	rcall	80008ce0 <_close_r>
80008ae6:	d8 02       	popm	pc

80008ae8 <__sseek>:
80008ae8:	d4 21       	pushm	r4-r7,lr
80008aea:	16 97       	mov	r7,r11
80008aec:	96 7b       	ld.sh	r11,r11[0xe]
80008aee:	c8 5d       	rcall	80008df8 <_lseek_r>
80008af0:	8e 68       	ld.sh	r8,r7[0xc]
80008af2:	10 99       	mov	r9,r8
80008af4:	ad c8       	cbr	r8,0xc
80008af6:	ad a9       	sbr	r9,0xc
80008af8:	5b fc       	cp.w	r12,-1
80008afa:	ef f8 0c 06 	st.heq	r7[0xc],r8
80008afe:	ef f9 1c 06 	st.hne	r7[0xc],r9
80008b02:	ef fc 1a 15 	st.wne	r7[0x54],r12
80008b06:	d8 22       	popm	r4-r7,pc

80008b08 <__swrite>:
80008b08:	d4 21       	pushm	r4-r7,lr
80008b0a:	96 68       	ld.sh	r8,r11[0xc]
80008b0c:	16 97       	mov	r7,r11
80008b0e:	14 95       	mov	r5,r10
80008b10:	12 94       	mov	r4,r9
80008b12:	e2 18 01 00 	andl	r8,0x100,COH
80008b16:	18 96       	mov	r6,r12
80008b18:	c0 50       	breq	80008b22 <__swrite+0x1a>
80008b1a:	30 29       	mov	r9,2
80008b1c:	30 0a       	mov	r10,0
80008b1e:	96 7b       	ld.sh	r11,r11[0xe]
80008b20:	c6 cd       	rcall	80008df8 <_lseek_r>
80008b22:	8e 68       	ld.sh	r8,r7[0xc]
80008b24:	ad c8       	cbr	r8,0xc
80008b26:	08 99       	mov	r9,r4
80008b28:	0a 9a       	mov	r10,r5
80008b2a:	8e 7b       	ld.sh	r11,r7[0xe]
80008b2c:	0c 9c       	mov	r12,r6
80008b2e:	ae 68       	st.h	r7[0xc],r8
80008b30:	c9 ac       	rcall	80008c64 <_write_r>
80008b32:	d8 22       	popm	r4-r7,pc

80008b34 <__sread>:
80008b34:	d4 21       	pushm	r4-r7,lr
80008b36:	16 97       	mov	r7,r11
80008b38:	96 7b       	ld.sh	r11,r11[0xe]
80008b3a:	c7 1d       	rcall	80008e1c <_read_r>
80008b3c:	c0 65       	brlt	80008b48 <__sread+0x14>
80008b3e:	6f 58       	ld.w	r8,r7[0x54]
80008b40:	18 08       	add	r8,r12
80008b42:	ef 48 00 54 	st.w	r7[84],r8
80008b46:	d8 22       	popm	r4-r7,pc
80008b48:	8e 68       	ld.sh	r8,r7[0xc]
80008b4a:	ad c8       	cbr	r8,0xc
80008b4c:	ae 68       	st.h	r7[0xc],r8
80008b4e:	d8 22       	popm	r4-r7,pc

80008b50 <strlen>:
80008b50:	30 09       	mov	r9,0
80008b52:	18 98       	mov	r8,r12
80008b54:	c0 28       	rjmp	80008b58 <strlen+0x8>
80008b56:	2f f8       	sub	r8,-1
80008b58:	11 8a       	ld.ub	r10,r8[0x0]
80008b5a:	f2 0a 18 00 	cp.b	r10,r9
80008b5e:	cf c1       	brne	80008b56 <strlen+0x6>
80008b60:	f0 0c 01 0c 	sub	r12,r8,r12
80008b64:	5e fc       	retal	r12
80008b66:	d7 03       	nop

80008b68 <_close>:
80008b68:	30 28       	mov	r8,2
80008b6a:	d6 73       	breakpoint
80008b6c:	3f fc       	mov	r12,-1
80008b6e:	35 8b       	mov	r11,88
80008b70:	58 0c       	cp.w	r12,0
80008b72:	5e 4c       	retge	r12
80008b74:	e0 6a 06 58 	mov	r10,1624
80008b78:	95 0b       	st.w	r10[0x0],r11
80008b7a:	5e fc       	retal	r12

80008b7c <_lseek>:
80008b7c:	30 58       	mov	r8,5
80008b7e:	d6 73       	breakpoint
80008b80:	3f fc       	mov	r12,-1
80008b82:	35 8b       	mov	r11,88
80008b84:	58 0c       	cp.w	r12,0
80008b86:	5e 4c       	retge	r12
80008b88:	e0 6a 06 58 	mov	r10,1624
80008b8c:	95 0b       	st.w	r10[0x0],r11
80008b8e:	5e fc       	retal	r12

80008b90 <_read>:
80008b90:	30 38       	mov	r8,3
80008b92:	d6 73       	breakpoint
80008b94:	3f fc       	mov	r12,-1
80008b96:	35 8b       	mov	r11,88
80008b98:	58 0c       	cp.w	r12,0
80008b9a:	5e 4c       	retge	r12
80008b9c:	e0 6a 06 58 	mov	r10,1624
80008ba0:	95 0b       	st.w	r10[0x0],r11
80008ba2:	5e fc       	retal	r12

80008ba4 <_write>:
80008ba4:	30 48       	mov	r8,4
80008ba6:	d6 73       	breakpoint
80008ba8:	3f fc       	mov	r12,-1
80008baa:	35 8b       	mov	r11,88
80008bac:	58 0c       	cp.w	r12,0
80008bae:	5e 4c       	retge	r12
80008bb0:	e0 6a 06 58 	mov	r10,1624
80008bb4:	95 0b       	st.w	r10[0x0],r11
80008bb6:	5e fc       	retal	r12

80008bb8 <isatty>:
80008bb8:	30 b8       	mov	r8,11
80008bba:	d6 73       	breakpoint
80008bbc:	3f fc       	mov	r12,-1
80008bbe:	35 8b       	mov	r11,88
80008bc0:	58 0c       	cp.w	r12,0
80008bc2:	5e 4c       	retge	r12
80008bc4:	e0 6a 06 58 	mov	r10,1624
80008bc8:	95 0b       	st.w	r10[0x0],r11
80008bca:	5e fc       	retal	r12

80008bcc <_fstat_host>:
80008bcc:	30 98       	mov	r8,9
80008bce:	d6 73       	breakpoint
80008bd0:	3f fc       	mov	r12,-1
80008bd2:	35 8b       	mov	r11,88
80008bd4:	58 0c       	cp.w	r12,0
80008bd6:	5e 4c       	retge	r12
80008bd8:	e0 6a 06 58 	mov	r10,1624
80008bdc:	95 0b       	st.w	r10[0x0],r11
80008bde:	5e fc       	retal	r12

80008be0 <_fstat>:
80008be0:	d4 21       	pushm	r4-r7,lr
80008be2:	21 0d       	sub	sp,64
80008be4:	16 97       	mov	r7,r11
80008be6:	1a 9b       	mov	r11,sp
80008be8:	cf 2f       	rcall	80008bcc <_fstat_host>
80008bea:	c0 34       	brge	80008bf0 <_fstat+0x10>
80008bec:	3f fc       	mov	r12,-1
80008bee:	c1 c8       	rjmp	80008c26 <_fstat+0x46>
80008bf0:	40 08       	lddsp	r8,sp[0x0]
80008bf2:	ae 08       	st.h	r7[0x0],r8
80008bf4:	40 18       	lddsp	r8,sp[0x4]
80008bf6:	ae 18       	st.h	r7[0x2],r8
80008bf8:	40 28       	lddsp	r8,sp[0x8]
80008bfa:	8f 18       	st.w	r7[0x4],r8
80008bfc:	40 38       	lddsp	r8,sp[0xc]
80008bfe:	ae 48       	st.h	r7[0x8],r8
80008c00:	40 48       	lddsp	r8,sp[0x10]
80008c02:	ae 58       	st.h	r7[0xa],r8
80008c04:	40 58       	lddsp	r8,sp[0x14]
80008c06:	ae 68       	st.h	r7[0xc],r8
80008c08:	40 68       	lddsp	r8,sp[0x18]
80008c0a:	ae 78       	st.h	r7[0xe],r8
80008c0c:	40 88       	lddsp	r8,sp[0x20]
80008c0e:	8f 48       	st.w	r7[0x10],r8
80008c10:	40 a8       	lddsp	r8,sp[0x28]
80008c12:	8f b8       	st.w	r7[0x2c],r8
80008c14:	40 c8       	lddsp	r8,sp[0x30]
80008c16:	8f c8       	st.w	r7[0x30],r8
80008c18:	40 d8       	lddsp	r8,sp[0x34]
80008c1a:	8f 58       	st.w	r7[0x14],r8
80008c1c:	40 e8       	lddsp	r8,sp[0x38]
80008c1e:	30 0c       	mov	r12,0
80008c20:	8f 78       	st.w	r7[0x1c],r8
80008c22:	40 f8       	lddsp	r8,sp[0x3c]
80008c24:	8f 98       	st.w	r7[0x24],r8
80008c26:	2f 0d       	sub	sp,-64
80008c28:	d8 22       	popm	r4-r7,pc
80008c2a:	d7 03       	nop

80008c2c <_sbrk>:
80008c2c:	d4 01       	pushm	lr
80008c2e:	e0 68 06 54 	mov	r8,1620
80008c32:	70 09       	ld.w	r9,r8[0x0]
80008c34:	58 09       	cp.w	r9,0
80008c36:	c0 41       	brne	80008c3e <_sbrk+0x12>
80008c38:	e0 69 06 60 	mov	r9,1632
80008c3c:	91 09       	st.w	r8[0x0],r9
80008c3e:	e0 69 06 54 	mov	r9,1620
80008c42:	e0 6a f0 00 	mov	r10,61440
80008c46:	72 08       	ld.w	r8,r9[0x0]
80008c48:	f0 0c 00 0c 	add	r12,r8,r12
80008c4c:	14 3c       	cp.w	r12,r10
80008c4e:	e0 8b 00 04 	brhi	80008c56 <_sbrk+0x2a>
80008c52:	93 0c       	st.w	r9[0x0],r12
80008c54:	c0 58       	rjmp	80008c5e <_sbrk+0x32>
80008c56:	c5 5c       	rcall	80008d00 <__errno>
80008c58:	30 c8       	mov	r8,12
80008c5a:	99 08       	st.w	r12[0x0],r8
80008c5c:	3f f8       	mov	r8,-1
80008c5e:	10 9c       	mov	r12,r8
80008c60:	d8 02       	popm	pc
80008c62:	d7 03       	nop

80008c64 <_write_r>:
80008c64:	d4 21       	pushm	r4-r7,lr
80008c66:	16 98       	mov	r8,r11
80008c68:	18 97       	mov	r7,r12
80008c6a:	10 9c       	mov	r12,r8
80008c6c:	30 08       	mov	r8,0
80008c6e:	14 9b       	mov	r11,r10
80008c70:	e0 66 06 58 	mov	r6,1624
80008c74:	12 9a       	mov	r10,r9
80008c76:	8d 08       	st.w	r6[0x0],r8
80008c78:	c9 6f       	rcall	80008ba4 <_write>
80008c7a:	5b fc       	cp.w	r12,-1
80008c7c:	c0 51       	brne	80008c86 <_write_r+0x22>
80008c7e:	6c 08       	ld.w	r8,r6[0x0]
80008c80:	58 08       	cp.w	r8,0
80008c82:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008c86:	d8 22       	popm	r4-r7,pc

80008c88 <_calloc_r>:
80008c88:	d4 21       	pushm	r4-r7,lr
80008c8a:	f4 0b 02 4b 	mul	r11,r10,r11
80008c8e:	fe b0 f8 5f 	rcall	80007d4c <_malloc_r>
80008c92:	18 97       	mov	r7,r12
80008c94:	c2 30       	breq	80008cda <_calloc_r+0x52>
80008c96:	f8 fa ff fc 	ld.w	r10,r12[-4]
80008c9a:	e0 1a ff fc 	andl	r10,0xfffc
80008c9e:	20 4a       	sub	r10,4
80008ca0:	e0 4a 00 24 	cp.w	r10,36
80008ca4:	e0 8b 00 18 	brhi	80008cd4 <_calloc_r+0x4c>
80008ca8:	18 98       	mov	r8,r12
80008caa:	59 3a       	cp.w	r10,19
80008cac:	e0 88 00 0f 	brls	80008cca <_calloc_r+0x42>
80008cb0:	30 09       	mov	r9,0
80008cb2:	10 a9       	st.w	r8++,r9
80008cb4:	10 a9       	st.w	r8++,r9
80008cb6:	59 ba       	cp.w	r10,27
80008cb8:	e0 88 00 09 	brls	80008cca <_calloc_r+0x42>
80008cbc:	10 a9       	st.w	r8++,r9
80008cbe:	10 a9       	st.w	r8++,r9
80008cc0:	e0 4a 00 24 	cp.w	r10,36
80008cc4:	c0 31       	brne	80008cca <_calloc_r+0x42>
80008cc6:	10 a9       	st.w	r8++,r9
80008cc8:	10 a9       	st.w	r8++,r9
80008cca:	30 09       	mov	r9,0
80008ccc:	10 a9       	st.w	r8++,r9
80008cce:	91 19       	st.w	r8[0x4],r9
80008cd0:	91 09       	st.w	r8[0x0],r9
80008cd2:	c0 48       	rjmp	80008cda <_calloc_r+0x52>
80008cd4:	30 0b       	mov	r11,0
80008cd6:	fe b0 fa 7d 	rcall	800081d0 <memset>
80008cda:	0e 9c       	mov	r12,r7
80008cdc:	d8 22       	popm	r4-r7,pc
80008cde:	d7 03       	nop

80008ce0 <_close_r>:
80008ce0:	d4 21       	pushm	r4-r7,lr
80008ce2:	30 08       	mov	r8,0
80008ce4:	18 97       	mov	r7,r12
80008ce6:	e0 66 06 58 	mov	r6,1624
80008cea:	16 9c       	mov	r12,r11
80008cec:	8d 08       	st.w	r6[0x0],r8
80008cee:	c3 df       	rcall	80008b68 <_close>
80008cf0:	5b fc       	cp.w	r12,-1
80008cf2:	c0 51       	brne	80008cfc <_close_r+0x1c>
80008cf4:	6c 08       	ld.w	r8,r6[0x0]
80008cf6:	58 08       	cp.w	r8,0
80008cf8:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008cfc:	d8 22       	popm	r4-r7,pc
80008cfe:	d7 03       	nop

80008d00 <__errno>:
80008d00:	e0 68 00 fc 	mov	r8,252
80008d04:	70 0c       	ld.w	r12,r8[0x0]
80008d06:	2f 4c       	sub	r12,-12
80008d08:	5e fc       	retal	r12
80008d0a:	d7 03       	nop

80008d0c <_fclose_r>:
80008d0c:	d4 21       	pushm	r4-r7,lr
80008d0e:	18 96       	mov	r6,r12
80008d10:	16 97       	mov	r7,r11
80008d12:	58 0b       	cp.w	r11,0
80008d14:	c0 31       	brne	80008d1a <_fclose_r+0xe>
80008d16:	16 95       	mov	r5,r11
80008d18:	c5 38       	rjmp	80008dbe <_fclose_r+0xb2>
80008d1a:	fe b0 f4 87 	rcall	80007628 <__sfp_lock_acquire>
80008d1e:	58 06       	cp.w	r6,0
80008d20:	c0 70       	breq	80008d2e <_fclose_r+0x22>
80008d22:	6c 68       	ld.w	r8,r6[0x18]
80008d24:	58 08       	cp.w	r8,0
80008d26:	c0 41       	brne	80008d2e <_fclose_r+0x22>
80008d28:	0c 9c       	mov	r12,r6
80008d2a:	fe b0 f4 d1 	rcall	800076cc <__sinit>
80008d2e:	fe c8 ec 0a 	sub	r8,pc,-5110
80008d32:	10 37       	cp.w	r7,r8
80008d34:	c0 31       	brne	80008d3a <_fclose_r+0x2e>
80008d36:	6c 07       	ld.w	r7,r6[0x0]
80008d38:	c0 c8       	rjmp	80008d50 <_fclose_r+0x44>
80008d3a:	fe c8 eb f6 	sub	r8,pc,-5130
80008d3e:	10 37       	cp.w	r7,r8
80008d40:	c0 31       	brne	80008d46 <_fclose_r+0x3a>
80008d42:	6c 17       	ld.w	r7,r6[0x4]
80008d44:	c0 68       	rjmp	80008d50 <_fclose_r+0x44>
80008d46:	fe c8 eb e2 	sub	r8,pc,-5150
80008d4a:	10 37       	cp.w	r7,r8
80008d4c:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80008d50:	8e 69       	ld.sh	r9,r7[0xc]
80008d52:	30 08       	mov	r8,0
80008d54:	f0 09 19 00 	cp.h	r9,r8
80008d58:	c0 51       	brne	80008d62 <_fclose_r+0x56>
80008d5a:	fe b0 f4 68 	rcall	8000762a <__sfp_lock_release>
80008d5e:	30 05       	mov	r5,0
80008d60:	c2 f8       	rjmp	80008dbe <_fclose_r+0xb2>
80008d62:	0e 9b       	mov	r11,r7
80008d64:	0c 9c       	mov	r12,r6
80008d66:	fe b0 f3 db 	rcall	8000751c <_fflush_r>
80008d6a:	6e c8       	ld.w	r8,r7[0x30]
80008d6c:	18 95       	mov	r5,r12
80008d6e:	58 08       	cp.w	r8,0
80008d70:	c0 60       	breq	80008d7c <_fclose_r+0x70>
80008d72:	6e 8b       	ld.w	r11,r7[0x20]
80008d74:	0c 9c       	mov	r12,r6
80008d76:	5d 18       	icall	r8
80008d78:	f9 b5 05 ff 	movlt	r5,-1
80008d7c:	8e 68       	ld.sh	r8,r7[0xc]
80008d7e:	ed b8 00 07 	bld	r8,0x7
80008d82:	c0 51       	brne	80008d8c <_fclose_r+0x80>
80008d84:	6e 4b       	ld.w	r11,r7[0x10]
80008d86:	0c 9c       	mov	r12,r6
80008d88:	fe b0 f5 3c 	rcall	80007800 <_free_r>
80008d8c:	6e db       	ld.w	r11,r7[0x34]
80008d8e:	58 0b       	cp.w	r11,0
80008d90:	c0 a0       	breq	80008da4 <_fclose_r+0x98>
80008d92:	ee c8 ff bc 	sub	r8,r7,-68
80008d96:	10 3b       	cp.w	r11,r8
80008d98:	c0 40       	breq	80008da0 <_fclose_r+0x94>
80008d9a:	0c 9c       	mov	r12,r6
80008d9c:	fe b0 f5 32 	rcall	80007800 <_free_r>
80008da0:	30 08       	mov	r8,0
80008da2:	8f d8       	st.w	r7[0x34],r8
80008da4:	6f 2b       	ld.w	r11,r7[0x48]
80008da6:	58 0b       	cp.w	r11,0
80008da8:	c0 70       	breq	80008db6 <_fclose_r+0xaa>
80008daa:	0c 9c       	mov	r12,r6
80008dac:	fe b0 f5 2a 	rcall	80007800 <_free_r>
80008db0:	30 08       	mov	r8,0
80008db2:	ef 48 00 48 	st.w	r7[72],r8
80008db6:	30 08       	mov	r8,0
80008db8:	ae 68       	st.h	r7[0xc],r8
80008dba:	fe b0 f4 38 	rcall	8000762a <__sfp_lock_release>
80008dbe:	0a 9c       	mov	r12,r5
80008dc0:	d8 22       	popm	r4-r7,pc
80008dc2:	d7 03       	nop

80008dc4 <fclose>:
80008dc4:	d4 01       	pushm	lr
80008dc6:	e0 68 00 fc 	mov	r8,252
80008dca:	18 9b       	mov	r11,r12
80008dcc:	70 0c       	ld.w	r12,r8[0x0]
80008dce:	c9 ff       	rcall	80008d0c <_fclose_r>
80008dd0:	d8 02       	popm	pc
80008dd2:	d7 03       	nop

80008dd4 <_fstat_r>:
80008dd4:	d4 21       	pushm	r4-r7,lr
80008dd6:	16 98       	mov	r8,r11
80008dd8:	18 97       	mov	r7,r12
80008dda:	10 9c       	mov	r12,r8
80008ddc:	30 08       	mov	r8,0
80008dde:	e0 66 06 58 	mov	r6,1624
80008de2:	14 9b       	mov	r11,r10
80008de4:	8d 08       	st.w	r6[0x0],r8
80008de6:	cf de       	rcall	80008be0 <_fstat>
80008de8:	5b fc       	cp.w	r12,-1
80008dea:	c0 51       	brne	80008df4 <_fstat_r+0x20>
80008dec:	6c 08       	ld.w	r8,r6[0x0]
80008dee:	58 08       	cp.w	r8,0
80008df0:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008df4:	d8 22       	popm	r4-r7,pc
80008df6:	d7 03       	nop

80008df8 <_lseek_r>:
80008df8:	d4 21       	pushm	r4-r7,lr
80008dfa:	16 98       	mov	r8,r11
80008dfc:	18 97       	mov	r7,r12
80008dfe:	10 9c       	mov	r12,r8
80008e00:	30 08       	mov	r8,0
80008e02:	14 9b       	mov	r11,r10
80008e04:	e0 66 06 58 	mov	r6,1624
80008e08:	12 9a       	mov	r10,r9
80008e0a:	8d 08       	st.w	r6[0x0],r8
80008e0c:	cb 8e       	rcall	80008b7c <_lseek>
80008e0e:	5b fc       	cp.w	r12,-1
80008e10:	c0 51       	brne	80008e1a <_lseek_r+0x22>
80008e12:	6c 08       	ld.w	r8,r6[0x0]
80008e14:	58 08       	cp.w	r8,0
80008e16:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008e1a:	d8 22       	popm	r4-r7,pc

80008e1c <_read_r>:
80008e1c:	d4 21       	pushm	r4-r7,lr
80008e1e:	16 98       	mov	r8,r11
80008e20:	18 97       	mov	r7,r12
80008e22:	10 9c       	mov	r12,r8
80008e24:	30 08       	mov	r8,0
80008e26:	14 9b       	mov	r11,r10
80008e28:	e0 66 06 58 	mov	r6,1624
80008e2c:	12 9a       	mov	r10,r9
80008e2e:	8d 08       	st.w	r6[0x0],r8
80008e30:	cb 0e       	rcall	80008b90 <_read>
80008e32:	5b fc       	cp.w	r12,-1
80008e34:	c0 51       	brne	80008e3e <_read_r+0x22>
80008e36:	6c 08       	ld.w	r8,r6[0x0]
80008e38:	58 08       	cp.w	r8,0
80008e3a:	ef f8 1a 03 	st.wne	r7[0xc],r8
80008e3e:	d8 22       	popm	r4-r7,pc

80008e40 <__avr32_f64_mul>:
80008e40:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80008e44:	e0 80 00 dc 	breq	80008ffc <__avr32_f64_mul_op1_zero>
80008e48:	d4 21       	pushm	r4-r7,lr
80008e4a:	f7 e9 20 0e 	eor	lr,r11,r9
80008e4e:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80008e52:	30 15       	mov	r5,1
80008e54:	c4 30       	breq	80008eda <__avr32_f64_mul_op1_subnormal>
80008e56:	ab 6b       	lsl	r11,0xa
80008e58:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80008e5c:	ab 6a       	lsl	r10,0xa
80008e5e:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
80008e62:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80008e66:	c5 c0       	breq	80008f1e <__avr32_f64_mul_op2_subnormal>
80008e68:	a1 78       	lsl	r8,0x1
80008e6a:	5c f9       	rol	r9
80008e6c:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80008e70:	e0 47 07 ff 	cp.w	r7,2047
80008e74:	c7 70       	breq	80008f62 <__avr32_f64_mul_op_nan_or_inf>
80008e76:	e0 46 07 ff 	cp.w	r6,2047
80008e7a:	c7 40       	breq	80008f62 <__avr32_f64_mul_op_nan_or_inf>
80008e7c:	ee 06 00 0c 	add	r12,r7,r6
80008e80:	e0 2c 03 fe 	sub	r12,1022
80008e84:	f6 08 06 44 	mulu.d	r4,r11,r8
80008e88:	f4 09 07 44 	macu.d	r4,r10,r9
80008e8c:	f4 08 06 46 	mulu.d	r6,r10,r8
80008e90:	f6 09 06 4a 	mulu.d	r10,r11,r9
80008e94:	08 07       	add	r7,r4
80008e96:	f4 05 00 4a 	adc	r10,r10,r5
80008e9a:	5c 0b       	acr	r11
80008e9c:	ed bb 00 14 	bld	r11,0x14
80008ea0:	c0 50       	breq	80008eaa <__avr32_f64_mul+0x6a>
80008ea2:	a1 77       	lsl	r7,0x1
80008ea4:	5c fa       	rol	r10
80008ea6:	5c fb       	rol	r11
80008ea8:	20 1c       	sub	r12,1
80008eaa:	58 0c       	cp.w	r12,0
80008eac:	e0 8a 00 6f 	brle	80008f8a <__avr32_f64_mul_res_subnormal>
80008eb0:	e0 4c 07 ff 	cp.w	r12,2047
80008eb4:	e0 84 00 9c 	brge	80008fec <__avr32_f64_mul_res_inf>
80008eb8:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80008ebc:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80008ec0:	ef e6 12 17 	or	r7,r7,r6>>0x1
80008ec4:	ee 17 80 00 	eorh	r7,0x8000
80008ec8:	f1 b7 04 20 	satu	r7,0x1
80008ecc:	0e 0a       	add	r10,r7
80008ece:	5c 0b       	acr	r11
80008ed0:	ed be 00 1f 	bld	lr,0x1f
80008ed4:	ef bb 00 1f 	bst	r11,0x1f
80008ed8:	d8 22       	popm	r4-r7,pc

80008eda <__avr32_f64_mul_op1_subnormal>:
80008eda:	e4 1b 00 0f 	andh	r11,0xf
80008ede:	f4 0c 12 00 	clz	r12,r10
80008ee2:	f6 06 12 00 	clz	r6,r11
80008ee6:	f7 bc 03 e1 	sublo	r12,-31
80008eea:	f8 06 17 30 	movlo	r6,r12
80008eee:	f7 b6 02 01 	subhs	r6,1
80008ef2:	e0 46 00 20 	cp.w	r6,32
80008ef6:	c0 d4       	brge	80008f10 <__avr32_f64_mul_op1_subnormal+0x36>
80008ef8:	ec 0c 11 20 	rsub	r12,r6,32
80008efc:	f6 06 09 4b 	lsl	r11,r11,r6
80008f00:	f4 0c 0a 4c 	lsr	r12,r10,r12
80008f04:	18 4b       	or	r11,r12
80008f06:	f4 06 09 4a 	lsl	r10,r10,r6
80008f0a:	20 b6       	sub	r6,11
80008f0c:	0c 17       	sub	r7,r6
80008f0e:	ca ab       	rjmp	80008e62 <__avr32_f64_mul+0x22>
80008f10:	f4 06 09 4b 	lsl	r11,r10,r6
80008f14:	c6 40       	breq	80008fdc <__avr32_f64_mul_res_zero>
80008f16:	30 0a       	mov	r10,0
80008f18:	20 b6       	sub	r6,11
80008f1a:	0c 17       	sub	r7,r6
80008f1c:	ca 3b       	rjmp	80008e62 <__avr32_f64_mul+0x22>

80008f1e <__avr32_f64_mul_op2_subnormal>:
80008f1e:	e4 19 00 0f 	andh	r9,0xf
80008f22:	f0 0c 12 00 	clz	r12,r8
80008f26:	f2 05 12 00 	clz	r5,r9
80008f2a:	f7 bc 03 ea 	sublo	r12,-22
80008f2e:	f8 05 17 30 	movlo	r5,r12
80008f32:	f7 b5 02 0a 	subhs	r5,10
80008f36:	e0 45 00 20 	cp.w	r5,32
80008f3a:	c0 d4       	brge	80008f54 <__avr32_f64_mul_op2_subnormal+0x36>
80008f3c:	ea 0c 11 20 	rsub	r12,r5,32
80008f40:	f2 05 09 49 	lsl	r9,r9,r5
80008f44:	f0 0c 0a 4c 	lsr	r12,r8,r12
80008f48:	18 49       	or	r9,r12
80008f4a:	f0 05 09 48 	lsl	r8,r8,r5
80008f4e:	20 25       	sub	r5,2
80008f50:	0a 16       	sub	r6,r5
80008f52:	c8 fb       	rjmp	80008e70 <__avr32_f64_mul+0x30>
80008f54:	f0 05 09 49 	lsl	r9,r8,r5
80008f58:	c4 20       	breq	80008fdc <__avr32_f64_mul_res_zero>
80008f5a:	30 08       	mov	r8,0
80008f5c:	20 25       	sub	r5,2
80008f5e:	0a 16       	sub	r6,r5
80008f60:	c8 8b       	rjmp	80008e70 <__avr32_f64_mul+0x30>

80008f62 <__avr32_f64_mul_op_nan_or_inf>:
80008f62:	e4 19 00 0f 	andh	r9,0xf
80008f66:	e4 1b 00 0f 	andh	r11,0xf
80008f6a:	14 4b       	or	r11,r10
80008f6c:	10 49       	or	r9,r8
80008f6e:	e0 47 07 ff 	cp.w	r7,2047
80008f72:	c0 91       	brne	80008f84 <__avr32_f64_mul_op1_not_naninf>
80008f74:	58 0b       	cp.w	r11,0
80008f76:	c3 81       	brne	80008fe6 <__avr32_f64_mul_res_nan>
80008f78:	e0 46 07 ff 	cp.w	r6,2047
80008f7c:	c3 81       	brne	80008fec <__avr32_f64_mul_res_inf>
80008f7e:	58 09       	cp.w	r9,0
80008f80:	c3 60       	breq	80008fec <__avr32_f64_mul_res_inf>
80008f82:	c3 28       	rjmp	80008fe6 <__avr32_f64_mul_res_nan>

80008f84 <__avr32_f64_mul_op1_not_naninf>:
80008f84:	58 09       	cp.w	r9,0
80008f86:	c3 30       	breq	80008fec <__avr32_f64_mul_res_inf>
80008f88:	c2 f8       	rjmp	80008fe6 <__avr32_f64_mul_res_nan>

80008f8a <__avr32_f64_mul_res_subnormal>:
80008f8a:	5c 3c       	neg	r12
80008f8c:	2f fc       	sub	r12,-1
80008f8e:	f1 bc 04 c0 	satu	r12,0x6
80008f92:	e0 4c 00 20 	cp.w	r12,32
80008f96:	c1 14       	brge	80008fb8 <__avr32_f64_mul_res_subnormal+0x2e>
80008f98:	f8 08 11 20 	rsub	r8,r12,32
80008f9c:	0e 46       	or	r6,r7
80008f9e:	ee 0c 0a 47 	lsr	r7,r7,r12
80008fa2:	f4 08 09 49 	lsl	r9,r10,r8
80008fa6:	12 47       	or	r7,r9
80008fa8:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008fac:	f6 08 09 49 	lsl	r9,r11,r8
80008fb0:	12 4a       	or	r10,r9
80008fb2:	f6 0c 0a 4b 	lsr	r11,r11,r12
80008fb6:	c8 3b       	rjmp	80008ebc <__avr32_f64_mul+0x7c>
80008fb8:	f8 08 11 20 	rsub	r8,r12,32
80008fbc:	f9 b9 00 00 	moveq	r9,0
80008fc0:	c0 30       	breq	80008fc6 <__avr32_f64_mul_res_subnormal+0x3c>
80008fc2:	f6 08 09 49 	lsl	r9,r11,r8
80008fc6:	0e 46       	or	r6,r7
80008fc8:	ed ea 10 16 	or	r6,r6,r10<<0x1
80008fcc:	f4 0c 0a 4a 	lsr	r10,r10,r12
80008fd0:	f3 ea 10 07 	or	r7,r9,r10
80008fd4:	f6 0c 0a 4a 	lsr	r10,r11,r12
80008fd8:	30 0b       	mov	r11,0
80008fda:	c7 1b       	rjmp	80008ebc <__avr32_f64_mul+0x7c>

80008fdc <__avr32_f64_mul_res_zero>:
80008fdc:	1c 9b       	mov	r11,lr
80008fde:	e6 1b 80 00 	andh	r11,0x8000,COH
80008fe2:	30 0a       	mov	r10,0
80008fe4:	d8 22       	popm	r4-r7,pc

80008fe6 <__avr32_f64_mul_res_nan>:
80008fe6:	3f fb       	mov	r11,-1
80008fe8:	3f fa       	mov	r10,-1
80008fea:	d8 22       	popm	r4-r7,pc

80008fec <__avr32_f64_mul_res_inf>:
80008fec:	f0 6b 00 00 	mov	r11,-1048576
80008ff0:	ed be 00 1f 	bld	lr,0x1f
80008ff4:	ef bb 00 1f 	bst	r11,0x1f
80008ff8:	30 0a       	mov	r10,0
80008ffa:	d8 22       	popm	r4-r7,pc

80008ffc <__avr32_f64_mul_op1_zero>:
80008ffc:	f7 e9 20 0b 	eor	r11,r11,r9
80009000:	e6 1b 80 00 	andh	r11,0x8000,COH
80009004:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
80009008:	e0 4c 07 ff 	cp.w	r12,2047
8000900c:	5e 1c       	retne	r12
8000900e:	3f fa       	mov	r10,-1
80009010:	3f fb       	mov	r11,-1
80009012:	5e fc       	retal	r12

80009014 <__avr32_f64_sub_from_add>:
80009014:	ee 19 80 00 	eorh	r9,0x8000

80009018 <__avr32_f64_sub>:
80009018:	f7 e9 20 0c 	eor	r12,r11,r9
8000901c:	e0 86 00 ca 	brmi	800091b0 <__avr32_f64_add_from_sub>
80009020:	eb cd 40 e0 	pushm	r5-r7,lr
80009024:	16 9c       	mov	r12,r11
80009026:	e6 1c 80 00 	andh	r12,0x8000,COH
8000902a:	bf db       	cbr	r11,0x1f
8000902c:	bf d9       	cbr	r9,0x1f
8000902e:	10 3a       	cp.w	r10,r8
80009030:	f2 0b 13 00 	cpc	r11,r9
80009034:	c0 92       	brcc	80009046 <__avr32_f64_sub+0x2e>
80009036:	16 97       	mov	r7,r11
80009038:	12 9b       	mov	r11,r9
8000903a:	0e 99       	mov	r9,r7
8000903c:	14 97       	mov	r7,r10
8000903e:	10 9a       	mov	r10,r8
80009040:	0e 98       	mov	r8,r7
80009042:	ee 1c 80 00 	eorh	r12,0x8000
80009046:	f6 07 16 14 	lsr	r7,r11,0x14
8000904a:	ab 7b       	lsl	r11,0xb
8000904c:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80009050:	ab 7a       	lsl	r10,0xb
80009052:	bf bb       	sbr	r11,0x1f
80009054:	f2 06 16 14 	lsr	r6,r9,0x14
80009058:	c4 40       	breq	800090e0 <__avr32_f64_sub_opL_subnormal>
8000905a:	ab 79       	lsl	r9,0xb
8000905c:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80009060:	ab 78       	lsl	r8,0xb
80009062:	bf b9       	sbr	r9,0x1f

80009064 <__avr32_f64_sub_opL_subnormal_done>:
80009064:	e0 47 07 ff 	cp.w	r7,2047
80009068:	c4 f0       	breq	80009106 <__avr32_f64_sub_opH_nan_or_inf>
8000906a:	0e 26       	rsub	r6,r7
8000906c:	c1 20       	breq	80009090 <__avr32_f64_sub_shift_done>
8000906e:	ec 05 11 20 	rsub	r5,r6,32
80009072:	e0 46 00 20 	cp.w	r6,32
80009076:	c7 c2       	brcc	8000916e <__avr32_f64_sub_longshift>
80009078:	f0 05 09 4e 	lsl	lr,r8,r5
8000907c:	f2 05 09 45 	lsl	r5,r9,r5
80009080:	f0 06 0a 48 	lsr	r8,r8,r6
80009084:	f2 06 0a 49 	lsr	r9,r9,r6
80009088:	0a 48       	or	r8,r5
8000908a:	58 0e       	cp.w	lr,0
8000908c:	5f 1e       	srne	lr
8000908e:	1c 48       	or	r8,lr

80009090 <__avr32_f64_sub_shift_done>:
80009090:	10 1a       	sub	r10,r8
80009092:	f6 09 01 4b 	sbc	r11,r11,r9
80009096:	f6 06 12 00 	clz	r6,r11
8000909a:	c0 e0       	breq	800090b6 <__avr32_f64_sub_longnormalize_done>
8000909c:	c7 83       	brcs	8000918c <__avr32_f64_sub_longnormalize>
8000909e:	ec 0e 11 20 	rsub	lr,r6,32
800090a2:	f6 06 09 4b 	lsl	r11,r11,r6
800090a6:	f4 0e 0a 4e 	lsr	lr,r10,lr
800090aa:	1c 4b       	or	r11,lr
800090ac:	f4 06 09 4a 	lsl	r10,r10,r6
800090b0:	0c 17       	sub	r7,r6
800090b2:	e0 8a 00 39 	brle	80009124 <__avr32_f64_sub_subnormal_result>

800090b6 <__avr32_f64_sub_longnormalize_done>:
800090b6:	f4 09 15 15 	lsl	r9,r10,0x15
800090ba:	ab 9a       	lsr	r10,0xb
800090bc:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800090c0:	ab 9b       	lsr	r11,0xb
800090c2:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
800090c6:	18 4b       	or	r11,r12

800090c8 <__avr32_f64_sub_round>:
800090c8:	fc 17 80 00 	movh	r7,0x8000
800090cc:	ed ba 00 00 	bld	r10,0x0
800090d0:	f7 b7 01 ff 	subne	r7,-1
800090d4:	0e 39       	cp.w	r9,r7
800090d6:	5f 29       	srhs	r9
800090d8:	12 0a       	add	r10,r9
800090da:	5c 0b       	acr	r11
800090dc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800090e0 <__avr32_f64_sub_opL_subnormal>:
800090e0:	ab 79       	lsl	r9,0xb
800090e2:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800090e6:	ab 78       	lsl	r8,0xb
800090e8:	f3 e8 10 0e 	or	lr,r9,r8
800090ec:	f9 b6 01 01 	movne	r6,1
800090f0:	ee 0e 11 00 	rsub	lr,r7,0
800090f4:	f9 b7 00 01 	moveq	r7,1
800090f8:	ef bb 00 1f 	bst	r11,0x1f
800090fc:	f7 ea 10 0e 	or	lr,r11,r10
80009100:	f9 b7 00 00 	moveq	r7,0
80009104:	cb 0b       	rjmp	80009064 <__avr32_f64_sub_opL_subnormal_done>

80009106 <__avr32_f64_sub_opH_nan_or_inf>:
80009106:	bf db       	cbr	r11,0x1f
80009108:	f7 ea 10 0e 	or	lr,r11,r10
8000910c:	c0 81       	brne	8000911c <__avr32_f64_sub_return_nan>
8000910e:	e0 46 07 ff 	cp.w	r6,2047
80009112:	c0 50       	breq	8000911c <__avr32_f64_sub_return_nan>
80009114:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80009118:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000911c <__avr32_f64_sub_return_nan>:
8000911c:	3f fa       	mov	r10,-1
8000911e:	3f fb       	mov	r11,-1
80009120:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009124 <__avr32_f64_sub_subnormal_result>:
80009124:	5c 37       	neg	r7
80009126:	2f f7       	sub	r7,-1
80009128:	f1 b7 04 c0 	satu	r7,0x6
8000912c:	e0 47 00 20 	cp.w	r7,32
80009130:	c1 14       	brge	80009152 <__avr32_f64_sub_subnormal_result+0x2e>
80009132:	ee 08 11 20 	rsub	r8,r7,32
80009136:	f4 08 09 49 	lsl	r9,r10,r8
8000913a:	5f 16       	srne	r6
8000913c:	f4 07 0a 4a 	lsr	r10,r10,r7
80009140:	0c 4a       	or	r10,r6
80009142:	f6 08 09 49 	lsl	r9,r11,r8
80009146:	f5 e9 10 0a 	or	r10,r10,r9
8000914a:	f4 07 0a 4b 	lsr	r11,r10,r7
8000914e:	30 07       	mov	r7,0
80009150:	cb 3b       	rjmp	800090b6 <__avr32_f64_sub_longnormalize_done>
80009152:	ee 08 11 40 	rsub	r8,r7,64
80009156:	f6 08 09 49 	lsl	r9,r11,r8
8000915a:	14 49       	or	r9,r10
8000915c:	5f 16       	srne	r6
8000915e:	f6 07 0a 4a 	lsr	r10,r11,r7
80009162:	0c 4a       	or	r10,r6
80009164:	30 0b       	mov	r11,0
80009166:	30 07       	mov	r7,0
80009168:	ca 7b       	rjmp	800090b6 <__avr32_f64_sub_longnormalize_done>
8000916a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000916e <__avr32_f64_sub_longshift>:
8000916e:	f1 b6 04 c0 	satu	r6,0x6
80009172:	f0 0e 17 00 	moveq	lr,r8
80009176:	c0 40       	breq	8000917e <__avr32_f64_sub_longshift+0x10>
80009178:	f2 05 09 4e 	lsl	lr,r9,r5
8000917c:	10 4e       	or	lr,r8
8000917e:	f2 06 0a 48 	lsr	r8,r9,r6
80009182:	30 09       	mov	r9,0
80009184:	58 0e       	cp.w	lr,0
80009186:	5f 1e       	srne	lr
80009188:	1c 48       	or	r8,lr
8000918a:	c8 3b       	rjmp	80009090 <__avr32_f64_sub_shift_done>

8000918c <__avr32_f64_sub_longnormalize>:
8000918c:	f4 06 12 00 	clz	r6,r10
80009190:	f9 b7 03 00 	movlo	r7,0
80009194:	f9 b6 03 00 	movlo	r6,0
80009198:	f9 bc 03 00 	movlo	r12,0
8000919c:	f7 b6 02 e0 	subhs	r6,-32
800091a0:	f4 06 09 4b 	lsl	r11,r10,r6
800091a4:	30 0a       	mov	r10,0
800091a6:	0c 17       	sub	r7,r6
800091a8:	fe 9a ff be 	brle	80009124 <__avr32_f64_sub_subnormal_result>
800091ac:	c8 5b       	rjmp	800090b6 <__avr32_f64_sub_longnormalize_done>
800091ae:	d7 03       	nop

800091b0 <__avr32_f64_add_from_sub>:
800091b0:	ee 19 80 00 	eorh	r9,0x8000

800091b4 <__avr32_f64_add>:
800091b4:	f7 e9 20 0c 	eor	r12,r11,r9
800091b8:	fe 96 ff 2e 	brmi	80009014 <__avr32_f64_sub_from_add>
800091bc:	eb cd 40 e0 	pushm	r5-r7,lr
800091c0:	16 9c       	mov	r12,r11
800091c2:	e6 1c 80 00 	andh	r12,0x8000,COH
800091c6:	bf db       	cbr	r11,0x1f
800091c8:	bf d9       	cbr	r9,0x1f
800091ca:	12 3b       	cp.w	r11,r9
800091cc:	c0 72       	brcc	800091da <__avr32_f64_add+0x26>
800091ce:	16 97       	mov	r7,r11
800091d0:	12 9b       	mov	r11,r9
800091d2:	0e 99       	mov	r9,r7
800091d4:	14 97       	mov	r7,r10
800091d6:	10 9a       	mov	r10,r8
800091d8:	0e 98       	mov	r8,r7
800091da:	30 0e       	mov	lr,0
800091dc:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800091e0:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800091e4:	b5 ab       	sbr	r11,0x14
800091e6:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800091ea:	c6 20       	breq	800092ae <__avr32_f64_add_op2_subnormal>
800091ec:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800091f0:	b5 a9       	sbr	r9,0x14
800091f2:	e0 47 07 ff 	cp.w	r7,2047
800091f6:	c2 80       	breq	80009246 <__avr32_f64_add_opH_nan_or_inf>
800091f8:	0e 26       	rsub	r6,r7
800091fa:	c1 20       	breq	8000921e <__avr32_f64_add_shift_done>
800091fc:	e0 46 00 36 	cp.w	r6,54
80009200:	c1 52       	brcc	8000922a <__avr32_f64_add_res_of_done>
80009202:	ec 05 11 20 	rsub	r5,r6,32
80009206:	e0 46 00 20 	cp.w	r6,32
8000920a:	c3 52       	brcc	80009274 <__avr32_f64_add_longshift>
8000920c:	f0 05 09 4e 	lsl	lr,r8,r5
80009210:	f2 05 09 45 	lsl	r5,r9,r5
80009214:	f0 06 0a 48 	lsr	r8,r8,r6
80009218:	f2 06 0a 49 	lsr	r9,r9,r6
8000921c:	0a 48       	or	r8,r5

8000921e <__avr32_f64_add_shift_done>:
8000921e:	10 0a       	add	r10,r8
80009220:	f6 09 00 4b 	adc	r11,r11,r9
80009224:	ed bb 00 15 	bld	r11,0x15
80009228:	c3 40       	breq	80009290 <__avr32_f64_add_res_of>

8000922a <__avr32_f64_add_res_of_done>:
8000922a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000922e:	18 4b       	or	r11,r12

80009230 <__avr32_f64_add_round>:
80009230:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80009234:	18 4e       	or	lr,r12
80009236:	ee 1e 80 00 	eorh	lr,0x8000
8000923a:	f1 be 04 20 	satu	lr,0x1
8000923e:	1c 0a       	add	r10,lr
80009240:	5c 0b       	acr	r11
80009242:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009246 <__avr32_f64_add_opH_nan_or_inf>:
80009246:	b5 cb       	cbr	r11,0x14
80009248:	f7 ea 10 0e 	or	lr,r11,r10
8000924c:	c1 01       	brne	8000926c <__avr32_f64_add_return_nan>
8000924e:	e0 46 07 ff 	cp.w	r6,2047
80009252:	c0 30       	breq	80009258 <__avr32_f64_add_opL_nan_or_inf>
80009254:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009258 <__avr32_f64_add_opL_nan_or_inf>:
80009258:	b5 c9       	cbr	r9,0x14
8000925a:	f3 e8 10 0e 	or	lr,r9,r8
8000925e:	c0 71       	brne	8000926c <__avr32_f64_add_return_nan>
80009260:	30 0a       	mov	r10,0
80009262:	fc 1b 7f f0 	movh	r11,0x7ff0
80009266:	18 4b       	or	r11,r12
80009268:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8000926c <__avr32_f64_add_return_nan>:
8000926c:	3f fa       	mov	r10,-1
8000926e:	3f fb       	mov	r11,-1
80009270:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80009274 <__avr32_f64_add_longshift>:
80009274:	f1 b6 04 c0 	satu	r6,0x6
80009278:	f0 0e 17 00 	moveq	lr,r8
8000927c:	c0 60       	breq	80009288 <__avr32_f64_add_longshift+0x14>
8000927e:	f2 05 09 4e 	lsl	lr,r9,r5
80009282:	58 08       	cp.w	r8,0
80009284:	5f 18       	srne	r8
80009286:	10 4e       	or	lr,r8
80009288:	f2 06 0a 48 	lsr	r8,r9,r6
8000928c:	30 09       	mov	r9,0
8000928e:	cc 8b       	rjmp	8000921e <__avr32_f64_add_shift_done>

80009290 <__avr32_f64_add_res_of>:
80009290:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80009294:	a1 9b       	lsr	r11,0x1
80009296:	5d 0a       	ror	r10
80009298:	5d 0e       	ror	lr
8000929a:	2f f7       	sub	r7,-1
8000929c:	e0 47 07 ff 	cp.w	r7,2047
800092a0:	f9 ba 00 00 	moveq	r10,0
800092a4:	f9 bb 00 00 	moveq	r11,0
800092a8:	f9 be 00 00 	moveq	lr,0
800092ac:	cb fb       	rjmp	8000922a <__avr32_f64_add_res_of_done>

800092ae <__avr32_f64_add_op2_subnormal>:
800092ae:	30 16       	mov	r6,1
800092b0:	58 07       	cp.w	r7,0
800092b2:	ca 01       	brne	800091f2 <__avr32_f64_add+0x3e>
800092b4:	b5 cb       	cbr	r11,0x14
800092b6:	10 0a       	add	r10,r8
800092b8:	f6 09 00 4b 	adc	r11,r11,r9
800092bc:	18 4b       	or	r11,r12
800092be:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800092c2:	d7 03       	nop

800092c4 <__avr32_f64_to_u32>:
800092c4:	58 0b       	cp.w	r11,0
800092c6:	5e 6d       	retmi	0

800092c8 <__avr32_f64_to_s32>:
800092c8:	f6 0c 15 01 	lsl	r12,r11,0x1
800092cc:	b5 9c       	lsr	r12,0x15
800092ce:	e0 2c 03 ff 	sub	r12,1023
800092d2:	5e 3d       	retlo	0
800092d4:	f8 0c 11 1f 	rsub	r12,r12,31
800092d8:	16 99       	mov	r9,r11
800092da:	ab 7b       	lsl	r11,0xb
800092dc:	bf bb       	sbr	r11,0x1f
800092de:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800092e2:	f6 0c 0a 4b 	lsr	r11,r11,r12
800092e6:	a1 79       	lsl	r9,0x1
800092e8:	5e 2b       	reths	r11
800092ea:	5c 3b       	neg	r11
800092ec:	5e fb       	retal	r11

800092ee <__avr32_u32_to_f64>:
800092ee:	f8 cb 00 00 	sub	r11,r12,0
800092f2:	30 0c       	mov	r12,0
800092f4:	c0 38       	rjmp	800092fa <__avr32_s32_to_f64+0x4>

800092f6 <__avr32_s32_to_f64>:
800092f6:	18 9b       	mov	r11,r12
800092f8:	5c 4b       	abs	r11
800092fa:	30 0a       	mov	r10,0
800092fc:	5e 0b       	reteq	r11
800092fe:	d4 01       	pushm	lr
80009300:	e0 69 04 1e 	mov	r9,1054
80009304:	f6 08 12 00 	clz	r8,r11
80009308:	c1 70       	breq	80009336 <__avr32_s32_to_f64+0x40>
8000930a:	c0 c3       	brcs	80009322 <__avr32_s32_to_f64+0x2c>
8000930c:	f0 0e 11 20 	rsub	lr,r8,32
80009310:	f6 08 09 4b 	lsl	r11,r11,r8
80009314:	f4 0e 0a 4e 	lsr	lr,r10,lr
80009318:	1c 4b       	or	r11,lr
8000931a:	f4 08 09 4a 	lsl	r10,r10,r8
8000931e:	10 19       	sub	r9,r8
80009320:	c0 b8       	rjmp	80009336 <__avr32_s32_to_f64+0x40>
80009322:	f4 08 12 00 	clz	r8,r10
80009326:	f9 b8 03 00 	movlo	r8,0
8000932a:	f7 b8 02 e0 	subhs	r8,-32
8000932e:	f4 08 09 4b 	lsl	r11,r10,r8
80009332:	30 0a       	mov	r10,0
80009334:	10 19       	sub	r9,r8
80009336:	58 09       	cp.w	r9,0
80009338:	e0 89 00 30 	brgt	80009398 <__avr32_s32_to_f64+0xa2>
8000933c:	5c 39       	neg	r9
8000933e:	2f f9       	sub	r9,-1
80009340:	e0 49 00 36 	cp.w	r9,54
80009344:	c0 43       	brcs	8000934c <__avr32_s32_to_f64+0x56>
80009346:	30 0b       	mov	r11,0
80009348:	30 0a       	mov	r10,0
8000934a:	c2 68       	rjmp	80009396 <__avr32_s32_to_f64+0xa0>
8000934c:	2f 69       	sub	r9,-10
8000934e:	f2 08 11 20 	rsub	r8,r9,32
80009352:	e0 49 00 20 	cp.w	r9,32
80009356:	c0 b2       	brcc	8000936c <__avr32_s32_to_f64+0x76>
80009358:	f4 08 09 4e 	lsl	lr,r10,r8
8000935c:	f6 08 09 48 	lsl	r8,r11,r8
80009360:	f4 09 0a 4a 	lsr	r10,r10,r9
80009364:	f6 09 0a 4b 	lsr	r11,r11,r9
80009368:	10 4b       	or	r11,r8
8000936a:	c0 88       	rjmp	8000937a <__avr32_s32_to_f64+0x84>
8000936c:	f6 08 09 4e 	lsl	lr,r11,r8
80009370:	14 4e       	or	lr,r10
80009372:	16 9a       	mov	r10,r11
80009374:	30 0b       	mov	r11,0
80009376:	f4 09 0a 4a 	lsr	r10,r10,r9
8000937a:	ed ba 00 00 	bld	r10,0x0
8000937e:	c0 92       	brcc	80009390 <__avr32_s32_to_f64+0x9a>
80009380:	1c 7e       	tst	lr,lr
80009382:	c0 41       	brne	8000938a <__avr32_s32_to_f64+0x94>
80009384:	ed ba 00 01 	bld	r10,0x1
80009388:	c0 42       	brcc	80009390 <__avr32_s32_to_f64+0x9a>
8000938a:	2f fa       	sub	r10,-1
8000938c:	f7 bb 02 ff 	subhs	r11,-1
80009390:	5c fc       	rol	r12
80009392:	5d 0b       	ror	r11
80009394:	5d 0a       	ror	r10
80009396:	d8 02       	popm	pc
80009398:	e0 68 03 ff 	mov	r8,1023
8000939c:	ed ba 00 0b 	bld	r10,0xb
800093a0:	f7 b8 00 ff 	subeq	r8,-1
800093a4:	10 0a       	add	r10,r8
800093a6:	5c 0b       	acr	r11
800093a8:	f7 b9 03 fe 	sublo	r9,-2
800093ac:	e0 49 07 ff 	cp.w	r9,2047
800093b0:	c0 55       	brlt	800093ba <__avr32_s32_to_f64+0xc4>
800093b2:	30 0a       	mov	r10,0
800093b4:	fc 1b ff e0 	movh	r11,0xffe0
800093b8:	c0 c8       	rjmp	800093d0 <__floatsidf_return_op1>
800093ba:	ed bb 00 1f 	bld	r11,0x1f
800093be:	f7 b9 01 01 	subne	r9,1
800093c2:	ab 9a       	lsr	r10,0xb
800093c4:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800093c8:	a1 7b       	lsl	r11,0x1
800093ca:	ab 9b       	lsr	r11,0xb
800093cc:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800093d0 <__floatsidf_return_op1>:
800093d0:	a1 7c       	lsl	r12,0x1
800093d2:	5d 0b       	ror	r11
800093d4:	d8 02       	popm	pc

800093d6 <__avr32_f64_cmp_eq>:
800093d6:	10 3a       	cp.w	r10,r8
800093d8:	f2 0b 13 00 	cpc	r11,r9
800093dc:	c0 80       	breq	800093ec <__avr32_f64_cmp_eq+0x16>
800093de:	a1 7b       	lsl	r11,0x1
800093e0:	a1 79       	lsl	r9,0x1
800093e2:	14 4b       	or	r11,r10
800093e4:	12 4b       	or	r11,r9
800093e6:	10 4b       	or	r11,r8
800093e8:	5e 0f       	reteq	1
800093ea:	5e fd       	retal	0
800093ec:	a1 7b       	lsl	r11,0x1
800093ee:	fc 1c ff e0 	movh	r12,0xffe0
800093f2:	58 0a       	cp.w	r10,0
800093f4:	f8 0b 13 00 	cpc	r11,r12
800093f8:	5e 8f       	retls	1
800093fa:	5e fd       	retal	0

800093fc <__avr32_f64_cmp_ge>:
800093fc:	1a de       	st.w	--sp,lr
800093fe:	1a d7       	st.w	--sp,r7
80009400:	a1 7b       	lsl	r11,0x1
80009402:	5f 3c       	srlo	r12
80009404:	a1 79       	lsl	r9,0x1
80009406:	5f 37       	srlo	r7
80009408:	5c fc       	rol	r12
8000940a:	fc 1e ff e0 	movh	lr,0xffe0
8000940e:	58 0a       	cp.w	r10,0
80009410:	fc 0b 13 00 	cpc	r11,lr
80009414:	e0 8b 00 1d 	brhi	8000944e <__avr32_f64_cmp_ge+0x52>
80009418:	58 08       	cp.w	r8,0
8000941a:	fc 09 13 00 	cpc	r9,lr
8000941e:	e0 8b 00 18 	brhi	8000944e <__avr32_f64_cmp_ge+0x52>
80009422:	58 0b       	cp.w	r11,0
80009424:	f5 ba 00 00 	subfeq	r10,0
80009428:	c1 50       	breq	80009452 <__avr32_f64_cmp_ge+0x56>
8000942a:	1b 07       	ld.w	r7,sp++
8000942c:	1b 0e       	ld.w	lr,sp++
8000942e:	58 3c       	cp.w	r12,3
80009430:	c0 a0       	breq	80009444 <__avr32_f64_cmp_ge+0x48>
80009432:	58 1c       	cp.w	r12,1
80009434:	c0 33       	brcs	8000943a <__avr32_f64_cmp_ge+0x3e>
80009436:	5e 0f       	reteq	1
80009438:	5e 1d       	retne	0
8000943a:	10 3a       	cp.w	r10,r8
8000943c:	f2 0b 13 00 	cpc	r11,r9
80009440:	5e 2f       	reths	1
80009442:	5e 3d       	retlo	0
80009444:	14 38       	cp.w	r8,r10
80009446:	f6 09 13 00 	cpc	r9,r11
8000944a:	5e 2f       	reths	1
8000944c:	5e 3d       	retlo	0
8000944e:	1b 07       	ld.w	r7,sp++
80009450:	d8 0a       	popm	pc,r12=0
80009452:	58 17       	cp.w	r7,1
80009454:	5f 0c       	sreq	r12
80009456:	58 09       	cp.w	r9,0
80009458:	f5 b8 00 00 	subfeq	r8,0
8000945c:	1b 07       	ld.w	r7,sp++
8000945e:	1b 0e       	ld.w	lr,sp++
80009460:	5e 0f       	reteq	1
80009462:	5e fc       	retal	r12

80009464 <__avr32_f64_cmp_lt>:
80009464:	1a de       	st.w	--sp,lr
80009466:	1a d7       	st.w	--sp,r7
80009468:	a1 7b       	lsl	r11,0x1
8000946a:	5f 3c       	srlo	r12
8000946c:	a1 79       	lsl	r9,0x1
8000946e:	5f 37       	srlo	r7
80009470:	5c fc       	rol	r12
80009472:	fc 1e ff e0 	movh	lr,0xffe0
80009476:	58 0a       	cp.w	r10,0
80009478:	fc 0b 13 00 	cpc	r11,lr
8000947c:	e0 8b 00 1d 	brhi	800094b6 <__avr32_f64_cmp_lt+0x52>
80009480:	58 08       	cp.w	r8,0
80009482:	fc 09 13 00 	cpc	r9,lr
80009486:	e0 8b 00 18 	brhi	800094b6 <__avr32_f64_cmp_lt+0x52>
8000948a:	58 0b       	cp.w	r11,0
8000948c:	f5 ba 00 00 	subfeq	r10,0
80009490:	c1 50       	breq	800094ba <__avr32_f64_cmp_lt+0x56>
80009492:	1b 07       	ld.w	r7,sp++
80009494:	1b 0e       	ld.w	lr,sp++
80009496:	58 3c       	cp.w	r12,3
80009498:	c0 a0       	breq	800094ac <__avr32_f64_cmp_lt+0x48>
8000949a:	58 1c       	cp.w	r12,1
8000949c:	c0 33       	brcs	800094a2 <__avr32_f64_cmp_lt+0x3e>
8000949e:	5e 0d       	reteq	0
800094a0:	5e 1f       	retne	1
800094a2:	10 3a       	cp.w	r10,r8
800094a4:	f2 0b 13 00 	cpc	r11,r9
800094a8:	5e 2d       	reths	0
800094aa:	5e 3f       	retlo	1
800094ac:	14 38       	cp.w	r8,r10
800094ae:	f6 09 13 00 	cpc	r9,r11
800094b2:	5e 2d       	reths	0
800094b4:	5e 3f       	retlo	1
800094b6:	1b 07       	ld.w	r7,sp++
800094b8:	d8 0a       	popm	pc,r12=0
800094ba:	58 17       	cp.w	r7,1
800094bc:	5f 1c       	srne	r12
800094be:	58 09       	cp.w	r9,0
800094c0:	f5 b8 00 00 	subfeq	r8,0
800094c4:	1b 07       	ld.w	r7,sp++
800094c6:	1b 0e       	ld.w	lr,sp++
800094c8:	5e 0d       	reteq	0
800094ca:	5e fc       	retal	r12

800094cc <__avr32_f64_div>:
800094cc:	eb cd 40 ff 	pushm	r0-r7,lr
800094d0:	f7 e9 20 0e 	eor	lr,r11,r9
800094d4:	f6 07 16 14 	lsr	r7,r11,0x14
800094d8:	a9 7b       	lsl	r11,0x9
800094da:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800094de:	a9 7a       	lsl	r10,0x9
800094e0:	bd bb       	sbr	r11,0x1d
800094e2:	e4 1b 3f ff 	andh	r11,0x3fff
800094e6:	ab d7       	cbr	r7,0xb
800094e8:	e0 80 00 cc 	breq	80009680 <__avr32_f64_div_round_subnormal+0x54>
800094ec:	e0 47 07 ff 	cp.w	r7,2047
800094f0:	e0 84 00 b5 	brge	8000965a <__avr32_f64_div_round_subnormal+0x2e>
800094f4:	f2 06 16 14 	lsr	r6,r9,0x14
800094f8:	a9 79       	lsl	r9,0x9
800094fa:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800094fe:	a9 78       	lsl	r8,0x9
80009500:	bd b9       	sbr	r9,0x1d
80009502:	e4 19 3f ff 	andh	r9,0x3fff
80009506:	ab d6       	cbr	r6,0xb
80009508:	e0 80 00 e2 	breq	800096cc <__avr32_f64_div_round_subnormal+0xa0>
8000950c:	e0 46 07 ff 	cp.w	r6,2047
80009510:	e0 84 00 b2 	brge	80009674 <__avr32_f64_div_round_subnormal+0x48>
80009514:	0c 17       	sub	r7,r6
80009516:	fe 37 fc 01 	sub	r7,-1023
8000951a:	fc 1c 80 00 	movh	r12,0x8000
8000951e:	f8 03 16 01 	lsr	r3,r12,0x1
80009522:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80009526:	5c d4       	com	r4
80009528:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
8000952c:	e6 09 06 44 	mulu.d	r4,r3,r9
80009530:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009534:	e6 05 06 44 	mulu.d	r4,r3,r5
80009538:	ea 03 15 02 	lsl	r3,r5,0x2
8000953c:	e6 09 06 44 	mulu.d	r4,r3,r9
80009540:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009544:	e6 05 06 44 	mulu.d	r4,r3,r5
80009548:	ea 03 15 02 	lsl	r3,r5,0x2
8000954c:	e6 09 06 44 	mulu.d	r4,r3,r9
80009550:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80009554:	e6 05 06 44 	mulu.d	r4,r3,r5
80009558:	ea 03 15 02 	lsl	r3,r5,0x2
8000955c:	e6 08 06 40 	mulu.d	r0,r3,r8
80009560:	e4 09 07 40 	macu.d	r0,r2,r9
80009564:	e6 09 06 44 	mulu.d	r4,r3,r9
80009568:	02 04       	add	r4,r1
8000956a:	5c 05       	acr	r5
8000956c:	a3 65       	lsl	r5,0x2
8000956e:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80009572:	a3 64       	lsl	r4,0x2
80009574:	5c 34       	neg	r4
80009576:	f8 05 01 45 	sbc	r5,r12,r5
8000957a:	e6 04 06 40 	mulu.d	r0,r3,r4
8000957e:	e4 05 07 40 	macu.d	r0,r2,r5
80009582:	e6 05 06 44 	mulu.d	r4,r3,r5
80009586:	02 04       	add	r4,r1
80009588:	5c 05       	acr	r5
8000958a:	ea 03 15 02 	lsl	r3,r5,0x2
8000958e:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80009592:	e8 02 15 02 	lsl	r2,r4,0x2
80009596:	e6 08 06 40 	mulu.d	r0,r3,r8
8000959a:	e4 09 07 40 	macu.d	r0,r2,r9
8000959e:	e6 09 06 44 	mulu.d	r4,r3,r9
800095a2:	02 04       	add	r4,r1
800095a4:	5c 05       	acr	r5
800095a6:	a3 65       	lsl	r5,0x2
800095a8:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
800095ac:	a3 64       	lsl	r4,0x2
800095ae:	5c 34       	neg	r4
800095b0:	f8 05 01 45 	sbc	r5,r12,r5
800095b4:	e6 04 06 40 	mulu.d	r0,r3,r4
800095b8:	e4 05 07 40 	macu.d	r0,r2,r5
800095bc:	e6 05 06 44 	mulu.d	r4,r3,r5
800095c0:	02 04       	add	r4,r1
800095c2:	5c 05       	acr	r5
800095c4:	ea 03 15 02 	lsl	r3,r5,0x2
800095c8:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800095cc:	e8 02 15 02 	lsl	r2,r4,0x2
800095d0:	e6 0a 06 40 	mulu.d	r0,r3,r10
800095d4:	e4 0b 07 40 	macu.d	r0,r2,r11
800095d8:	e6 0b 06 42 	mulu.d	r2,r3,r11
800095dc:	02 02       	add	r2,r1
800095de:	5c 03       	acr	r3
800095e0:	ed b3 00 1c 	bld	r3,0x1c
800095e4:	c0 90       	breq	800095f6 <__avr32_f64_div+0x12a>
800095e6:	a1 72       	lsl	r2,0x1
800095e8:	5c f3       	rol	r3
800095ea:	20 17       	sub	r7,1
800095ec:	a3 9a       	lsr	r10,0x3
800095ee:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
800095f2:	a3 9b       	lsr	r11,0x3
800095f4:	c0 58       	rjmp	800095fe <__avr32_f64_div+0x132>
800095f6:	a5 8a       	lsr	r10,0x4
800095f8:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800095fc:	a5 8b       	lsr	r11,0x4
800095fe:	58 07       	cp.w	r7,0
80009600:	e0 8a 00 8b 	brle	80009716 <__avr32_f64_div_res_subnormal>
80009604:	e0 12 ff 00 	andl	r2,0xff00
80009608:	e8 12 00 80 	orl	r2,0x80
8000960c:	e6 08 06 40 	mulu.d	r0,r3,r8
80009610:	e4 09 07 40 	macu.d	r0,r2,r9
80009614:	e4 08 06 44 	mulu.d	r4,r2,r8
80009618:	e6 09 06 48 	mulu.d	r8,r3,r9
8000961c:	00 05       	add	r5,r0
8000961e:	f0 01 00 48 	adc	r8,r8,r1
80009622:	5c 09       	acr	r9
80009624:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80009628:	58 04       	cp.w	r4,0
8000962a:	5c 25       	cpc	r5

8000962c <__avr32_f64_div_round_subnormal>:
8000962c:	f4 08 13 00 	cpc	r8,r10
80009630:	f6 09 13 00 	cpc	r9,r11
80009634:	5f 36       	srlo	r6
80009636:	f8 06 17 00 	moveq	r6,r12
8000963a:	e4 0a 16 08 	lsr	r10,r2,0x8
8000963e:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80009642:	e6 0b 16 08 	lsr	r11,r3,0x8
80009646:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000964a:	ed be 00 1f 	bld	lr,0x1f
8000964e:	ef bb 00 1f 	bst	r11,0x1f
80009652:	0c 0a       	add	r10,r6
80009654:	5c 0b       	acr	r11
80009656:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000965a:	e4 1b 00 0f 	andh	r11,0xf
8000965e:	14 4b       	or	r11,r10
80009660:	e0 81 00 a7 	brne	800097ae <__avr32_f64_div_res_subnormal+0x98>
80009664:	f2 06 16 14 	lsr	r6,r9,0x14
80009668:	ab d6       	cbr	r6,0xb
8000966a:	e0 46 07 ff 	cp.w	r6,2047
8000966e:	e0 81 00 a4 	brne	800097b6 <__avr32_f64_div_res_subnormal+0xa0>
80009672:	c9 e8       	rjmp	800097ae <__avr32_f64_div_res_subnormal+0x98>
80009674:	e4 19 00 0f 	andh	r9,0xf
80009678:	10 49       	or	r9,r8
8000967a:	e0 81 00 9a 	brne	800097ae <__avr32_f64_div_res_subnormal+0x98>
8000967e:	c9 28       	rjmp	800097a2 <__avr32_f64_div_res_subnormal+0x8c>
80009680:	a3 7b       	lsl	r11,0x3
80009682:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80009686:	a3 7a       	lsl	r10,0x3
80009688:	f5 eb 10 04 	or	r4,r10,r11
8000968c:	e0 80 00 a0 	breq	800097cc <__avr32_f64_div_op1_zero>
80009690:	f6 04 12 00 	clz	r4,r11
80009694:	c1 70       	breq	800096c2 <__avr32_f64_div_round_subnormal+0x96>
80009696:	c0 c3       	brcs	800096ae <__avr32_f64_div_round_subnormal+0x82>
80009698:	e8 05 11 20 	rsub	r5,r4,32
8000969c:	f6 04 09 4b 	lsl	r11,r11,r4
800096a0:	f4 05 0a 45 	lsr	r5,r10,r5
800096a4:	0a 4b       	or	r11,r5
800096a6:	f4 04 09 4a 	lsl	r10,r10,r4
800096aa:	08 17       	sub	r7,r4
800096ac:	c0 b8       	rjmp	800096c2 <__avr32_f64_div_round_subnormal+0x96>
800096ae:	f4 04 12 00 	clz	r4,r10
800096b2:	f9 b4 03 00 	movlo	r4,0
800096b6:	f7 b4 02 e0 	subhs	r4,-32
800096ba:	f4 04 09 4b 	lsl	r11,r10,r4
800096be:	30 0a       	mov	r10,0
800096c0:	08 17       	sub	r7,r4
800096c2:	a3 8a       	lsr	r10,0x2
800096c4:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800096c8:	a3 8b       	lsr	r11,0x2
800096ca:	c1 1b       	rjmp	800094ec <__avr32_f64_div+0x20>
800096cc:	a3 79       	lsl	r9,0x3
800096ce:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800096d2:	a3 78       	lsl	r8,0x3
800096d4:	f3 e8 10 04 	or	r4,r9,r8
800096d8:	c6 f0       	breq	800097b6 <__avr32_f64_div_res_subnormal+0xa0>
800096da:	f2 04 12 00 	clz	r4,r9
800096de:	c1 70       	breq	8000970c <__avr32_f64_div_round_subnormal+0xe0>
800096e0:	c0 c3       	brcs	800096f8 <__avr32_f64_div_round_subnormal+0xcc>
800096e2:	e8 05 11 20 	rsub	r5,r4,32
800096e6:	f2 04 09 49 	lsl	r9,r9,r4
800096ea:	f0 05 0a 45 	lsr	r5,r8,r5
800096ee:	0a 49       	or	r9,r5
800096f0:	f0 04 09 48 	lsl	r8,r8,r4
800096f4:	08 16       	sub	r6,r4
800096f6:	c0 b8       	rjmp	8000970c <__avr32_f64_div_round_subnormal+0xe0>
800096f8:	f0 04 12 00 	clz	r4,r8
800096fc:	f9 b4 03 00 	movlo	r4,0
80009700:	f7 b4 02 e0 	subhs	r4,-32
80009704:	f0 04 09 49 	lsl	r9,r8,r4
80009708:	30 08       	mov	r8,0
8000970a:	08 16       	sub	r6,r4
8000970c:	a3 88       	lsr	r8,0x2
8000970e:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80009712:	a3 89       	lsr	r9,0x2
80009714:	cf ca       	rjmp	8000950c <__avr32_f64_div+0x40>

80009716 <__avr32_f64_div_res_subnormal>:
80009716:	5c 37       	neg	r7
80009718:	2f f7       	sub	r7,-1
8000971a:	f1 b7 04 c0 	satu	r7,0x6
8000971e:	e0 47 00 20 	cp.w	r7,32
80009722:	c1 54       	brge	8000974c <__avr32_f64_div_res_subnormal+0x36>
80009724:	ee 06 11 20 	rsub	r6,r7,32
80009728:	e4 07 0a 42 	lsr	r2,r2,r7
8000972c:	e6 06 09 4c 	lsl	r12,r3,r6
80009730:	18 42       	or	r2,r12
80009732:	e6 07 0a 43 	lsr	r3,r3,r7
80009736:	f4 06 09 41 	lsl	r1,r10,r6
8000973a:	f4 07 0a 4a 	lsr	r10,r10,r7
8000973e:	f6 06 09 4c 	lsl	r12,r11,r6
80009742:	18 4a       	or	r10,r12
80009744:	f6 07 0a 4b 	lsr	r11,r11,r7
80009748:	30 00       	mov	r0,0
8000974a:	c1 58       	rjmp	80009774 <__avr32_f64_div_res_subnormal+0x5e>
8000974c:	ee 06 11 20 	rsub	r6,r7,32
80009750:	f9 b0 00 00 	moveq	r0,0
80009754:	f9 bc 00 00 	moveq	r12,0
80009758:	c0 50       	breq	80009762 <__avr32_f64_div_res_subnormal+0x4c>
8000975a:	f4 06 09 40 	lsl	r0,r10,r6
8000975e:	f6 06 09 4c 	lsl	r12,r11,r6
80009762:	e6 07 0a 42 	lsr	r2,r3,r7
80009766:	30 03       	mov	r3,0
80009768:	f4 07 0a 41 	lsr	r1,r10,r7
8000976c:	18 41       	or	r1,r12
8000976e:	f6 07 0a 4a 	lsr	r10,r11,r7
80009772:	30 0b       	mov	r11,0
80009774:	e0 12 ff 00 	andl	r2,0xff00
80009778:	e8 12 00 80 	orl	r2,0x80
8000977c:	e6 08 06 46 	mulu.d	r6,r3,r8
80009780:	e4 09 07 46 	macu.d	r6,r2,r9
80009784:	e4 08 06 44 	mulu.d	r4,r2,r8
80009788:	e6 09 06 48 	mulu.d	r8,r3,r9
8000978c:	0c 05       	add	r5,r6
8000978e:	f0 07 00 48 	adc	r8,r8,r7
80009792:	5c 09       	acr	r9
80009794:	30 07       	mov	r7,0
80009796:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
8000979a:	00 34       	cp.w	r4,r0
8000979c:	e2 05 13 00 	cpc	r5,r1
800097a0:	c4 6b       	rjmp	8000962c <__avr32_f64_div_round_subnormal>
800097a2:	1c 9b       	mov	r11,lr
800097a4:	e6 1b 80 00 	andh	r11,0x8000,COH
800097a8:	30 0a       	mov	r10,0
800097aa:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800097ae:	3f fb       	mov	r11,-1
800097b0:	30 0a       	mov	r10,0
800097b2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800097b6:	f5 eb 10 04 	or	r4,r10,r11
800097ba:	c0 90       	breq	800097cc <__avr32_f64_div_op1_zero>
800097bc:	1c 9b       	mov	r11,lr
800097be:	e6 1b 80 00 	andh	r11,0x8000,COH
800097c2:	ea 1b 7f f0 	orh	r11,0x7ff0
800097c6:	30 0a       	mov	r10,0
800097c8:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800097cc <__avr32_f64_div_op1_zero>:
800097cc:	f1 e9 10 15 	or	r5,r8,r9<<0x1
800097d0:	ce f0       	breq	800097ae <__avr32_f64_div_res_subnormal+0x98>
800097d2:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
800097d6:	e0 44 07 ff 	cp.w	r4,2047
800097da:	ce 41       	brne	800097a2 <__avr32_f64_div_res_subnormal+0x8c>
800097dc:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800097e0:	ce 10       	breq	800097a2 <__avr32_f64_div_res_subnormal+0x8c>
800097e2:	ce 6b       	rjmp	800097ae <__avr32_f64_div_res_subnormal+0x98>

800097e4 <__avr32_umod64>:
800097e4:	d4 31       	pushm	r0-r7,lr
800097e6:	1a 97       	mov	r7,sp
800097e8:	20 3d       	sub	sp,12
800097ea:	10 9c       	mov	r12,r8
800097ec:	12 95       	mov	r5,r9
800097ee:	14 9e       	mov	lr,r10
800097f0:	16 91       	mov	r1,r11
800097f2:	16 96       	mov	r6,r11
800097f4:	58 09       	cp.w	r9,0
800097f6:	e0 81 00 81 	brne	800098f8 <__avr32_umod64+0x114>
800097fa:	16 38       	cp.w	r8,r11
800097fc:	e0 88 00 12 	brls	80009820 <__avr32_umod64+0x3c>
80009800:	f0 08 12 00 	clz	r8,r8
80009804:	c4 e0       	breq	800098a0 <__avr32_umod64+0xbc>
80009806:	f6 08 09 46 	lsl	r6,r11,r8
8000980a:	f8 08 09 4c 	lsl	r12,r12,r8
8000980e:	f0 0b 11 20 	rsub	r11,r8,32
80009812:	f4 08 09 4e 	lsl	lr,r10,r8
80009816:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000981a:	f7 e6 10 06 	or	r6,r11,r6
8000981e:	c4 18       	rjmp	800098a0 <__avr32_umod64+0xbc>
80009820:	58 08       	cp.w	r8,0
80009822:	c0 51       	brne	8000982c <__avr32_umod64+0x48>
80009824:	30 19       	mov	r9,1
80009826:	f2 08 0d 08 	divu	r8,r9,r8
8000982a:	10 9c       	mov	r12,r8
8000982c:	f8 08 12 00 	clz	r8,r12
80009830:	c0 31       	brne	80009836 <__avr32_umod64+0x52>
80009832:	18 16       	sub	r6,r12
80009834:	c3 68       	rjmp	800098a0 <__avr32_umod64+0xbc>
80009836:	f0 03 11 20 	rsub	r3,r8,32
8000983a:	f4 03 0a 4b 	lsr	r11,r10,r3
8000983e:	f8 08 09 4c 	lsl	r12,r12,r8
80009842:	ec 08 09 49 	lsl	r9,r6,r8
80009846:	ec 03 0a 43 	lsr	r3,r6,r3
8000984a:	f7 e9 10 09 	or	r9,r11,r9
8000984e:	f8 05 16 10 	lsr	r5,r12,0x10
80009852:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80009856:	e6 05 0d 02 	divu	r2,r3,r5
8000985a:	f2 0e 16 10 	lsr	lr,r9,0x10
8000985e:	ec 02 02 4b 	mul	r11,r6,r2
80009862:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80009866:	16 3e       	cp.w	lr,r11
80009868:	c0 72       	brcc	80009876 <__avr32_umod64+0x92>
8000986a:	18 0e       	add	lr,r12
8000986c:	18 3e       	cp.w	lr,r12
8000986e:	c0 43       	brcs	80009876 <__avr32_umod64+0x92>
80009870:	16 3e       	cp.w	lr,r11
80009872:	fd dc e3 0e 	addcs	lr,lr,r12
80009876:	fc 0b 01 03 	sub	r3,lr,r11
8000987a:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000987e:	e6 05 0d 02 	divu	r2,r3,r5
80009882:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80009886:	a5 36       	mul	r6,r2
80009888:	0c 39       	cp.w	r9,r6
8000988a:	c0 72       	brcc	80009898 <__avr32_umod64+0xb4>
8000988c:	18 09       	add	r9,r12
8000988e:	18 39       	cp.w	r9,r12
80009890:	c0 43       	brcs	80009898 <__avr32_umod64+0xb4>
80009892:	0c 39       	cp.w	r9,r6
80009894:	f3 dc e3 09 	addcs	r9,r9,r12
80009898:	f2 06 01 06 	sub	r6,r9,r6
8000989c:	f4 08 09 4e 	lsl	lr,r10,r8
800098a0:	f8 0a 16 10 	lsr	r10,r12,0x10
800098a4:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800098a8:	ec 0a 0d 02 	divu	r2,r6,r10
800098ac:	fc 09 16 10 	lsr	r9,lr,0x10
800098b0:	ea 02 02 4b 	mul	r11,r5,r2
800098b4:	f3 e3 11 09 	or	r9,r9,r3<<0x10
800098b8:	16 39       	cp.w	r9,r11
800098ba:	c0 72       	brcc	800098c8 <__avr32_umod64+0xe4>
800098bc:	18 09       	add	r9,r12
800098be:	18 39       	cp.w	r9,r12
800098c0:	c0 43       	brcs	800098c8 <__avr32_umod64+0xe4>
800098c2:	16 39       	cp.w	r9,r11
800098c4:	f3 dc e3 09 	addcs	r9,r9,r12
800098c8:	f2 0b 01 0b 	sub	r11,r9,r11
800098cc:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
800098d0:	f6 0a 0d 0a 	divu	r10,r11,r10
800098d4:	fd eb 11 0e 	or	lr,lr,r11<<0x10
800098d8:	ea 0a 02 4a 	mul	r10,r5,r10
800098dc:	14 3e       	cp.w	lr,r10
800098de:	c0 72       	brcc	800098ec <__avr32_umod64+0x108>
800098e0:	18 0e       	add	lr,r12
800098e2:	18 3e       	cp.w	lr,r12
800098e4:	c0 43       	brcs	800098ec <__avr32_umod64+0x108>
800098e6:	14 3e       	cp.w	lr,r10
800098e8:	fd dc e3 0e 	addcs	lr,lr,r12
800098ec:	fc 0a 01 0a 	sub	r10,lr,r10
800098f0:	30 0b       	mov	r11,0
800098f2:	f4 08 0a 4a 	lsr	r10,r10,r8
800098f6:	c7 b8       	rjmp	800099ec <__avr32_umod64+0x208>
800098f8:	16 39       	cp.w	r9,r11
800098fa:	e0 8b 00 79 	brhi	800099ec <__avr32_umod64+0x208>
800098fe:	f2 09 12 00 	clz	r9,r9
80009902:	c1 21       	brne	80009926 <__avr32_umod64+0x142>
80009904:	10 3a       	cp.w	r10,r8
80009906:	5f 2b       	srhs	r11
80009908:	0a 31       	cp.w	r1,r5
8000990a:	5f ba       	srhi	r10
8000990c:	f7 ea 10 0a 	or	r10,r11,r10
80009910:	f2 0a 18 00 	cp.b	r10,r9
80009914:	c0 60       	breq	80009920 <__avr32_umod64+0x13c>
80009916:	fc 08 01 0c 	sub	r12,lr,r8
8000991a:	e2 05 01 46 	sbc	r6,r1,r5
8000991e:	18 9e       	mov	lr,r12
80009920:	0c 9b       	mov	r11,r6
80009922:	1c 9a       	mov	r10,lr
80009924:	c6 48       	rjmp	800099ec <__avr32_umod64+0x208>
80009926:	ea 09 09 4c 	lsl	r12,r5,r9
8000992a:	f2 06 11 20 	rsub	r6,r9,32
8000992e:	f6 09 09 4b 	lsl	r11,r11,r9
80009932:	f0 09 09 42 	lsl	r2,r8,r9
80009936:	ef 46 ff f4 	st.w	r7[-12],r6
8000993a:	f0 06 0a 48 	lsr	r8,r8,r6
8000993e:	18 48       	or	r8,r12
80009940:	e2 06 0a 4c 	lsr	r12,r1,r6
80009944:	f4 09 09 43 	lsl	r3,r10,r9
80009948:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000994c:	f4 06 0a 4a 	lsr	r10,r10,r6
80009950:	16 4a       	or	r10,r11
80009952:	f0 0b 16 10 	lsr	r11,r8,0x10
80009956:	f8 0b 0d 04 	divu	r4,r12,r11
8000995a:	f4 0c 16 10 	lsr	r12,r10,0x10
8000995e:	08 91       	mov	r1,r4
80009960:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80009964:	e8 0e 02 46 	mul	r6,r4,lr
80009968:	0c 3c       	cp.w	r12,r6
8000996a:	c0 a2       	brcc	8000997e <__avr32_umod64+0x19a>
8000996c:	20 11       	sub	r1,1
8000996e:	10 0c       	add	r12,r8
80009970:	10 3c       	cp.w	r12,r8
80009972:	c0 63       	brcs	8000997e <__avr32_umod64+0x19a>
80009974:	0c 3c       	cp.w	r12,r6
80009976:	f7 b1 03 01 	sublo	r1,1
8000997a:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000997e:	0c 1c       	sub	r12,r6
80009980:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80009984:	f8 0b 0d 04 	divu	r4,r12,r11
80009988:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000998c:	08 96       	mov	r6,r4
8000998e:	e8 0e 02 4e 	mul	lr,r4,lr
80009992:	1c 3b       	cp.w	r11,lr
80009994:	c0 a2       	brcc	800099a8 <__avr32_umod64+0x1c4>
80009996:	20 16       	sub	r6,1
80009998:	10 0b       	add	r11,r8
8000999a:	10 3b       	cp.w	r11,r8
8000999c:	c0 63       	brcs	800099a8 <__avr32_umod64+0x1c4>
8000999e:	1c 3b       	cp.w	r11,lr
800099a0:	f7 b6 03 01 	sublo	r6,1
800099a4:	f7 d8 e3 0b 	addcs	r11,r11,r8
800099a8:	ed e1 11 01 	or	r1,r6,r1<<0x10
800099ac:	1c 1b       	sub	r11,lr
800099ae:	e2 02 06 40 	mulu.d	r0,r1,r2
800099b2:	00 9e       	mov	lr,r0
800099b4:	02 9c       	mov	r12,r1
800099b6:	16 3c       	cp.w	r12,r11
800099b8:	e0 8b 00 08 	brhi	800099c8 <__avr32_umod64+0x1e4>
800099bc:	5f 06       	sreq	r6
800099be:	06 30       	cp.w	r0,r3
800099c0:	5f ba       	srhi	r10
800099c2:	ed ea 00 0a 	and	r10,r6,r10
800099c6:	c0 60       	breq	800099d2 <__avr32_umod64+0x1ee>
800099c8:	fc 02 01 04 	sub	r4,lr,r2
800099cc:	f8 08 01 4c 	sbc	r12,r12,r8
800099d0:	08 9e       	mov	lr,r4
800099d2:	e6 0e 01 0a 	sub	r10,r3,lr
800099d6:	f6 0c 01 4c 	sbc	r12,r11,r12
800099da:	ee f1 ff f4 	ld.w	r1,r7[-12]
800099de:	f8 09 0a 4b 	lsr	r11,r12,r9
800099e2:	f4 09 0a 4a 	lsr	r10,r10,r9
800099e6:	f8 01 09 4c 	lsl	r12,r12,r1
800099ea:	18 4a       	or	r10,r12
800099ec:	2f dd       	sub	sp,-12
800099ee:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80009a00 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80009a00:	c0 08       	rjmp	80009a00 <_evba>
	...

80009a04 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80009a04:	c0 08       	rjmp	80009a04 <_handle_TLB_Multiple_Hit>
	...

80009a08 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80009a08:	c0 08       	rjmp	80009a08 <_handle_Bus_Error_Data_Fetch>
	...

80009a0c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
80009a0c:	c0 08       	rjmp	80009a0c <_handle_Bus_Error_Instruction_Fetch>
	...

80009a10 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80009a10:	c0 08       	rjmp	80009a10 <_handle_NMI>
	...

80009a14 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80009a14:	c0 08       	rjmp	80009a14 <_handle_Instruction_Address>
	...

80009a18 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80009a18:	c0 08       	rjmp	80009a18 <_handle_ITLB_Protection>
	...

80009a1c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
80009a1c:	c0 08       	rjmp	80009a1c <_handle_Breakpoint>
	...

80009a20 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80009a20:	c0 08       	rjmp	80009a20 <_handle_Illegal_Opcode>
	...

80009a24 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80009a24:	c0 08       	rjmp	80009a24 <_handle_Unimplemented_Instruction>
	...

80009a28 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80009a28:	c0 08       	rjmp	80009a28 <_handle_Privilege_Violation>
	...

80009a2c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
80009a2c:	c0 08       	rjmp	80009a2c <_handle_Floating_Point>
	...

80009a30 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80009a30:	c0 08       	rjmp	80009a30 <_handle_Coprocessor_Absent>
	...

80009a34 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80009a34:	c0 08       	rjmp	80009a34 <_handle_Data_Address_Read>
	...

80009a38 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80009a38:	c0 08       	rjmp	80009a38 <_handle_Data_Address_Write>
	...

80009a3c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
80009a3c:	c0 08       	rjmp	80009a3c <_handle_DTLB_Protection_Read>
	...

80009a40 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80009a40:	c0 08       	rjmp	80009a40 <_handle_DTLB_Protection_Write>
	...

80009a44 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80009a44:	c0 08       	rjmp	80009a44 <_handle_DTLB_Modified>
	...

80009a50 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80009a50:	c0 08       	rjmp	80009a50 <_handle_ITLB_Miss>
	...

80009a60 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80009a60:	c0 08       	rjmp	80009a60 <_handle_DTLB_Miss_Read>
	...

80009a70 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80009a70:	c0 08       	rjmp	80009a70 <_handle_DTLB_Miss_Write>
	...

80009b00 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80009b00:	c0 08       	rjmp	80009b00 <_handle_Supervisor_Call>
80009b02:	d7 03       	nop

80009b04 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009b04:	30 0c       	mov	r12,0
80009b06:	fe b0 d0 6f 	rcall	80003be4 <_get_interrupt_handler>
80009b0a:	58 0c       	cp.w	r12,0
80009b0c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009b10:	d6 03       	rete

80009b12 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009b12:	30 1c       	mov	r12,1
80009b14:	fe b0 d0 68 	rcall	80003be4 <_get_interrupt_handler>
80009b18:	58 0c       	cp.w	r12,0
80009b1a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009b1e:	d6 03       	rete

80009b20 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009b20:	30 2c       	mov	r12,2
80009b22:	fe b0 d0 61 	rcall	80003be4 <_get_interrupt_handler>
80009b26:	58 0c       	cp.w	r12,0
80009b28:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009b2c:	d6 03       	rete

80009b2e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80009b2e:	30 3c       	mov	r12,3
80009b30:	fe b0 d0 5a 	rcall	80003be4 <_get_interrupt_handler>
80009b34:	58 0c       	cp.w	r12,0
80009b36:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80009b3a:	d6 03       	rete
80009b3c:	d7 03       	nop
80009b3e:	d7 03       	nop
80009b40:	d7 03       	nop
80009b42:	d7 03       	nop
80009b44:	d7 03       	nop
80009b46:	d7 03       	nop
80009b48:	d7 03       	nop
80009b4a:	d7 03       	nop
80009b4c:	d7 03       	nop
80009b4e:	d7 03       	nop
80009b50:	d7 03       	nop
80009b52:	d7 03       	nop
80009b54:	d7 03       	nop
80009b56:	d7 03       	nop
80009b58:	d7 03       	nop
80009b5a:	d7 03       	nop
80009b5c:	d7 03       	nop
80009b5e:	d7 03       	nop
80009b60:	d7 03       	nop
80009b62:	d7 03       	nop
80009b64:	d7 03       	nop
80009b66:	d7 03       	nop
80009b68:	d7 03       	nop
80009b6a:	d7 03       	nop
80009b6c:	d7 03       	nop
80009b6e:	d7 03       	nop
80009b70:	d7 03       	nop
80009b72:	d7 03       	nop
80009b74:	d7 03       	nop
80009b76:	d7 03       	nop
80009b78:	d7 03       	nop
80009b7a:	d7 03       	nop
80009b7c:	d7 03       	nop
80009b7e:	d7 03       	nop
80009b80:	d7 03       	nop
80009b82:	d7 03       	nop
80009b84:	d7 03       	nop
80009b86:	d7 03       	nop
80009b88:	d7 03       	nop
80009b8a:	d7 03       	nop
80009b8c:	d7 03       	nop
80009b8e:	d7 03       	nop
80009b90:	d7 03       	nop
80009b92:	d7 03       	nop
80009b94:	d7 03       	nop
80009b96:	d7 03       	nop
80009b98:	d7 03       	nop
80009b9a:	d7 03       	nop
80009b9c:	d7 03       	nop
80009b9e:	d7 03       	nop
80009ba0:	d7 03       	nop
80009ba2:	d7 03       	nop
80009ba4:	d7 03       	nop
80009ba6:	d7 03       	nop
80009ba8:	d7 03       	nop
80009baa:	d7 03       	nop
80009bac:	d7 03       	nop
80009bae:	d7 03       	nop
80009bb0:	d7 03       	nop
80009bb2:	d7 03       	nop
80009bb4:	d7 03       	nop
80009bb6:	d7 03       	nop
80009bb8:	d7 03       	nop
80009bba:	d7 03       	nop
80009bbc:	d7 03       	nop
80009bbe:	d7 03       	nop
80009bc0:	d7 03       	nop
80009bc2:	d7 03       	nop
80009bc4:	d7 03       	nop
80009bc6:	d7 03       	nop
80009bc8:	d7 03       	nop
80009bca:	d7 03       	nop
80009bcc:	d7 03       	nop
80009bce:	d7 03       	nop
80009bd0:	d7 03       	nop
80009bd2:	d7 03       	nop
80009bd4:	d7 03       	nop
80009bd6:	d7 03       	nop
80009bd8:	d7 03       	nop
80009bda:	d7 03       	nop
80009bdc:	d7 03       	nop
80009bde:	d7 03       	nop
80009be0:	d7 03       	nop
80009be2:	d7 03       	nop
80009be4:	d7 03       	nop
80009be6:	d7 03       	nop
80009be8:	d7 03       	nop
80009bea:	d7 03       	nop
80009bec:	d7 03       	nop
80009bee:	d7 03       	nop
80009bf0:	d7 03       	nop
80009bf2:	d7 03       	nop
80009bf4:	d7 03       	nop
80009bf6:	d7 03       	nop
80009bf8:	d7 03       	nop
80009bfa:	d7 03       	nop
80009bfc:	d7 03       	nop
80009bfe:	d7 03       	nop
