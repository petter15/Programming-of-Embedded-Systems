
Task2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000002e4  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80002400  80002400  00002800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000110  80002600  80002600  00002a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .bss          000000f0  00000008  00000008  00000000  2**2
                  ALLOC
  7 .heap         0000ef08  000000f8  000000f8  00000000  2**0
                  ALLOC
  8 .comment      00000030  00000000  00000000  00002b10  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000358  00000000  00000000  00002b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubnames 000007bc  00000000  00000000  00002e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00004019  00000000  00000000  00003654  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000aaa  00000000  00000000  0000766d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000036d7  00000000  00000000  00008117  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000005a0  00000000  00000000  0000b7f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000010c7  00000000  00000000  0000bd90  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    0000083a  00000000  00000000  0000ce57  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macinfo 004a3f67  00000000  00000000  0000d691  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 19 .debug_ranges 00000470  00000000  00000000  004b15f8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf dd 88 	sub	pc,pc,-8824

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf fd 8c 	sub	pc,pc,-628

Disassembly of section .text:

80002008 <board_init>:
80002008:	d4 01       	pushm	lr
8000200a:	30 3b       	mov	r11,3
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000200c:	33 bc       	mov	r12,59
8000200e:	c8 ec       	rcall	8000212a <gpio_configure_pin>
80002010:	30 3b       	mov	r11,3
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002012:	33 cc       	mov	r12,60
80002014:	c8 bc       	rcall	8000212a <gpio_configure_pin>
80002016:	30 3b       	mov	r11,3
80002018:	33 dc       	mov	r12,61
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000201a:	c8 8c       	rcall	8000212a <gpio_configure_pin>
8000201c:	30 3b       	mov	r11,3
8000201e:	33 ec       	mov	r12,62
80002020:	c8 5c       	rcall	8000212a <gpio_configure_pin>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002022:	30 3b       	mov	r11,3
80002024:	33 3c       	mov	r12,51
80002026:	c8 2c       	rcall	8000212a <gpio_configure_pin>
80002028:	30 3b       	mov	r11,3
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000202a:	33 4c       	mov	r12,52
8000202c:	c7 fc       	rcall	8000212a <gpio_configure_pin>
8000202e:	30 3b       	mov	r11,3
80002030:	33 5c       	mov	r12,53
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002032:	c7 cc       	rcall	8000212a <gpio_configure_pin>
80002034:	30 3b       	mov	r11,3
80002036:	33 6c       	mov	r12,54
80002038:	c7 9c       	rcall	8000212a <gpio_configure_pin>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000203a:	30 0b       	mov	r11,0
8000203c:	35 8c       	mov	r12,88
8000203e:	c7 6c       	rcall	8000212a <gpio_configure_pin>
80002040:	30 0b       	mov	r11,0
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80002042:	35 5c       	mov	r12,85
80002044:	c7 3c       	rcall	8000212a <gpio_configure_pin>
80002046:	30 0b       	mov	r11,0
80002048:	35 2c       	mov	r12,82

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
8000204a:	c7 0c       	rcall	8000212a <gpio_configure_pin>
8000204c:	30 0b       	mov	r11,0
8000204e:	31 4c       	mov	r12,20
80002050:	c6 dc       	rcall	8000212a <gpio_configure_pin>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
80002052:	30 0b       	mov	r11,0
80002054:	31 9c       	mov	r12,25
80002056:	c6 ac       	rcall	8000212a <gpio_configure_pin>
80002058:	30 0b       	mov	r11,0
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
8000205a:	31 ac       	mov	r12,26
8000205c:	c6 7c       	rcall	8000212a <gpio_configure_pin>
8000205e:	30 0b       	mov	r11,0
80002060:	31 bc       	mov	r12,27
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
80002062:	c6 4c       	rcall	8000212a <gpio_configure_pin>
80002064:	30 4b       	mov	r11,4
80002066:	fe cc fa 16 	sub	r12,pc,-1514
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
8000206a:	c4 1c       	rcall	800020ec <gpio_enable_module>
8000206c:	30 4b       	mov	r11,4
8000206e:	fe cc fa 6e 	sub	r12,pc,-1426
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
80002072:	c3 dc       	rcall	800020ec <gpio_enable_module>
80002074:	30 0b       	mov	r11,0
80002076:	30 2c       	mov	r12,2
80002078:	c5 9c       	rcall	8000212a <gpio_configure_pin>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
8000207a:	30 0b       	mov	r11,0
8000207c:	30 7c       	mov	r12,7
8000207e:	c5 6c       	rcall	8000212a <gpio_configure_pin>
80002080:	30 2b       	mov	r11,2
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
80002082:	fe cc fa 42 	sub	r12,pc,-1470
80002086:	c3 3c       	rcall	800020ec <gpio_enable_module>
80002088:	30 2b       	mov	r11,2
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
8000208a:	fe cc fa 5a 	sub	r12,pc,-1446
8000208e:	c2 fc       	rcall	800020ec <gpio_enable_module>
80002090:	30 2b       	mov	r11,2

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
80002092:	fe cc fa 72 	sub	r12,pc,-1422
80002096:	c2 bc       	rcall	800020ec <gpio_enable_module>
80002098:	d8 02       	popm	pc
8000209a:	d7 03       	nop

8000209c <gpio_enable_module_pin>:
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000209c:	f8 08 16 05 	lsr	r8,r12,0x5
800020a0:	a9 68       	lsl	r8,0x8
800020a2:	e0 28 f0 00 	sub	r8,61440

	/* Enable the correct function. */
	switch (function) {
800020a6:	58 1b       	cp.w	r11,1
800020a8:	c1 50       	breq	800020d2 <gpio_enable_module_pin+0x36>
800020aa:	c0 82       	brcc	800020ba <gpio_enable_module_pin+0x1e>
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800020ac:	30 1b       	mov	r11,1
800020ae:	f6 0c 09 4c 	lsl	r12,r11,r12
800020b2:	91 6c       	st.w	r8[0x18],r12
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800020b4:	91 ac       	st.w	r8[0x28],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800020b6:	91 2c       	st.w	r8[0x8],r12
800020b8:	5e fd       	retal	0
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];

	/* Enable the correct function. */
	switch (function) {
800020ba:	58 2b       	cp.w	r11,2
800020bc:	c1 10       	breq	800020de <gpio_enable_module_pin+0x42>
800020be:	58 3b       	cp.w	r11,3
800020c0:	c0 20       	breq	800020c4 <gpio_enable_module_pin+0x28>
800020c2:	5e ff       	retal	1
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800020c4:	30 1b       	mov	r11,1
800020c6:	f6 0c 09 4c 	lsl	r12,r11,r12
800020ca:	91 5c       	st.w	r8[0x14],r12
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800020cc:	91 9c       	st.w	r8[0x24],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800020ce:	91 2c       	st.w	r8[0x8],r12
800020d0:	5e fd       	retal	0
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800020d2:	f6 0c 09 4c 	lsl	r12,r11,r12
800020d6:	91 5c       	st.w	r8[0x14],r12
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800020d8:	91 ac       	st.w	r8[0x28],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800020da:	91 2c       	st.w	r8[0x8],r12
800020dc:	5e fd       	retal	0
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800020de:	30 1b       	mov	r11,1
800020e0:	f6 0c 09 4c 	lsl	r12,r11,r12
800020e4:	91 6c       	st.w	r8[0x18],r12
		gpio_port->pmr1s = 1 << (pin & 0x1F);
800020e6:	91 9c       	st.w	r8[0x24],r12
	default:
		return GPIO_INVALID_ARGUMENT;
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
800020e8:	91 2c       	st.w	r8[0x8],r12
800020ea:	5e fd       	retal	0

800020ec <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800020ec:	d4 21       	pushm	r4-r7,lr
800020ee:	18 97       	mov	r7,r12
800020f0:	16 94       	mov	r4,r11
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800020f2:	58 0b       	cp.w	r11,0
800020f4:	c0 e0       	breq	80002110 <gpio_enable_module+0x24>
800020f6:	30 06       	mov	r6,0
800020f8:	0c 95       	mov	r5,r6
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800020fa:	6e 1b       	ld.w	r11,r7[0x4]
800020fc:	6e 0c       	ld.w	r12,r7[0x0]
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
800020fe:	2f f6       	sub	r6,-1
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
80002100:	2f 87       	sub	r7,-8
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80002102:	cc df       	rcall	8000209c <gpio_enable_module_pin>
80002104:	18 45       	or	r5,r12
80002106:	0c 34       	cp.w	r4,r6
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002108:	fe 9b ff f9 	brhi	800020fa <gpio_enable_module+0xe>
8000210c:	0a 9c       	mov	r12,r5
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
}
8000210e:	d8 22       	popm	r4-r7,pc
80002110:	16 95       	mov	r5,r11
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80002112:	cf db       	rjmp	8000210c <gpio_enable_module+0x20>

80002114 <gpio_enable_gpio_pin>:
80002114:	30 18       	mov	r8,1
80002116:	f0 0c 09 48 	lsl	r8,r8,r12
8000211a:	a5 9c       	lsr	r12,0x5
 *            AVR32_PWM_3_PIN for PWM channel 3 can also be used to release
 *            module pins for GPIO.
 */
void gpio_enable_gpio_pin(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000211c:	a9 6c       	lsl	r12,0x8
8000211e:	e0 2c f0 00 	sub	r12,61440
	
	gpio_port->oderc = 1 << (pin & 0x1F);
80002122:	f9 48 00 48 	st.w	r12[72],r8
	gpio_port->gpers = 1 << (pin & 0x1F);
80002126:	99 18       	st.w	r12[0x4],r8
}
80002128:	5e fc       	retal	r12

8000212a <gpio_configure_pin>:
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
8000212a:	f8 08 16 05 	lsr	r8,r12,0x5
8000212e:	a9 68       	lsl	r8,0x8
80002130:	e0 28 f0 00 	sub	r8,61440
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
80002134:	ed bb 00 02 	bld	r11,0x2
80002138:	c1 e1       	brne	80002174 <gpio_configure_pin+0x4a>
		gpio_port->puers = 1 << (pin & 0x1F);
8000213a:	30 19       	mov	r9,1
8000213c:	f2 0c 09 4c 	lsl	r12,r9,r12
80002140:	f1 4c 00 74 	st.w	r8[116],r12
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80002144:	ed bb 00 07 	bld	r11,0x7
80002148:	c0 91       	brne	8000215a <gpio_configure_pin+0x30>
		if (flags & GPIO_BOTHEDGES) {
8000214a:	16 99       	mov	r9,r11
8000214c:	e2 19 01 80 	andl	r9,0x180,COH
80002150:	c1 c0       	breq	80002188 <gpio_configure_pin+0x5e>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80002152:	f1 4c 00 a8 	st.w	r8[168],r12
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002156:	f1 4c 00 b8 	st.w	r8[184],r12
			gpio_port->imr1s = 1 << (pin & 0x1F);
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
8000215a:	ed bb 00 00 	bld	r11,0x0
8000215e:	c1 11       	brne	80002180 <gpio_configure_pin+0x56>
		if (flags & GPIO_INIT_HIGH) {
			gpio_port->ovrs = 1 << (pin & 0x1F);
80002160:	ed bb 00 01 	bld	r11,0x1
80002164:	f1 fc 0a 15 	st.weq	r8[0x54],r12
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80002168:	f1 fc 1a 16 	st.wne	r8[0x58],r12
		}

		gpio_port->oders = 1 << (pin & 0x1F);
8000216c:	f1 4c 00 44 	st.w	r8[68],r12
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002170:	91 1c       	st.w	r8[0x4],r12
}
80002172:	5e fc       	retal	r12

#endif
	if (flags & GPIO_PULL_UP) {
		gpio_port->puers = 1 << (pin & 0x1F);
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80002174:	30 19       	mov	r9,1
80002176:	f2 0c 09 4c 	lsl	r12,r9,r12
8000217a:	f1 4c 00 78 	st.w	r8[120],r12
8000217e:	ce 3b       	rjmp	80002144 <gpio_configure_pin+0x1a>
			gpio_port->ovrc = 1 << (pin & 0x1F);
		}

		gpio_port->oders = 1 << (pin & 0x1F);
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80002180:	f1 4c 00 48 	st.w	r8[72],r12
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80002184:	91 1c       	st.w	r8[0x4],r12
}
80002186:	5e fc       	retal	r12
	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
		if (flags & GPIO_BOTHEDGES) {
			gpio_port->imr0c = 1 << (pin & 0x1F);
			gpio_port->imr1c = 1 << (pin & 0x1F);
		} else if (flags & GPIO_RISING) {
80002188:	16 99       	mov	r9,r11
8000218a:	e2 19 02 80 	andl	r9,0x280,COH
8000218e:	c0 60       	breq	8000219a <gpio_configure_pin+0x70>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80002190:	f1 4c 00 a4 	st.w	r8[164],r12
			gpio_port->imr1c = 1 << (pin & 0x1F);
80002194:	f1 4c 00 b8 	st.w	r8[184],r12
80002198:	ce 1b       	rjmp	8000215a <gpio_configure_pin+0x30>
		} else if (flags & GPIO_FALLING) {
8000219a:	16 99       	mov	r9,r11
8000219c:	e2 19 03 80 	andl	r9,0x380,COH
			gpio_port->imr0c = 1 << (pin & 0x1F);
800021a0:	f1 fc 1a 2a 	st.wne	r8[0xa8],r12
			gpio_port->imr1s = 1 << (pin & 0x1F);
800021a4:	f1 fc 1a 2d 	st.wne	r8[0xb4],r12
800021a8:	cd 9b       	rjmp	8000215a <gpio_configure_pin+0x30>

800021aa <gpio_get_pin_value>:
 *
 * \return The pin value.
 */
bool gpio_get_pin_value(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800021aa:	f8 08 16 05 	lsr	r8,r12,0x5
800021ae:	a9 68       	lsl	r8,0x8
800021b0:	e0 28 f0 00 	sub	r8,61440
	
	return (gpio_port->pvr >> (pin & 0x1F)) & 1;
800021b4:	71 88       	ld.w	r8,r8[0x60]
800021b6:	f0 0c 0a 4c 	lsr	r12,r8,r12
}
800021ba:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
800021be:	5e fc       	retal	r12

800021c0 <gpio_set_pin_high>:
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800021c0:	30 18       	mov	r8,1
800021c2:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_high(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800021c6:	a5 9c       	lsr	r12,0x5
800021c8:	a9 6c       	lsl	r12,0x8
800021ca:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
800021ce:	f9 48 00 54 	st.w	r12[84],r8
}
800021d2:	5e fc       	retal	r12

800021d4 <gpio_set_pin_low>:
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800021d4:	30 18       	mov	r8,1
800021d6:	f0 0c 09 48 	lsl	r8,r8,r12
 *
 * \note The function \ref gpio_configure_pin must be called before.
 */
void gpio_set_pin_low(uint32_t pin)
{
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800021da:	a5 9c       	lsr	r12,0x5
800021dc:	a9 6c       	lsl	r12,0x8
800021de:	e0 2c f0 00 	sub	r12,61440
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
800021e2:	f9 48 00 58 	st.w	r12[88],r8
}
800021e6:	5e fc       	retal	r12

800021e8 <_get_interrupt_handler>:
__int_handler _get_interrupt_handler(uint32_t int_level)
{
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
800021e8:	e0 68 00 83 	mov	r8,131
800021ec:	f0 0c 01 0c 	sub	r12,r8,r12
800021f0:	fe 78 08 00 	mov	r8,-63488
800021f4:	f0 0c 03 29 	ld.w	r9,r8[r12<<0x2]
	uint32_t int_req = AVR32_INTC.irr[int_grp];
800021f8:	f2 ca ff c0 	sub	r10,r9,-64
800021fc:	f0 0a 03 2c 	ld.w	r12,r8[r10<<0x2]
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002200:	58 0c       	cp.w	r12,0
80002202:	5e 0c       	reteq	r12
		? _int_handler_table[int_grp]._int_line_handler_table[32
80002204:	fe c8 fb 94 	sub	r8,pc,-1132
80002208:	f8 0c 12 00 	clz	r12,r12
8000220c:	f0 09 00 39 	add	r9,r8,r9<<0x3
80002210:	f8 0c 11 1f 	rsub	r12,r12,31
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80002214:	72 18       	ld.w	r8,r9[0x4]
80002216:	f0 0c 03 2c 	ld.w	r12,r8[r12<<0x2]
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
8000221a:	5e fc       	retal	r12

8000221c <pm_switch_to_osc0>:
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
8000221c:	ec 5b bb 9f 	cp.w	r11,899999
80002220:	e0 8b 00 18 	brhi	80002250 <pm_switch_to_osc0+0x34>
80002224:	30 4b       	mov	r11,4
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80002226:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80002228:	f1 db d0 03 	bfins	r8,r11,0x0,0x3
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000222c:	99 a8       	st.w	r12[0x28],r8


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
8000222e:	78 a8       	ld.w	r8,r12[0x28]
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80002230:	f1 da d1 03 	bfins	r8,r10,0x8,0x3
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
80002234:	99 a8       	st.w	r12[0x28],r8

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80002236:	78 08       	ld.w	r8,r12[0x0]
80002238:	a3 a8       	sbr	r8,0x2
8000223a:	99 08       	st.w	r12[0x0],r8
}


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
8000223c:	79 58       	ld.w	r8,r12[0x54]
8000223e:	ed b8 00 07 	bld	r8,0x7
80002242:	cf d1       	brne	8000223c <pm_switch_to_osc0+0x20>


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80002244:	78 08       	ld.w	r8,r12[0x0]
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80002246:	30 19       	mov	r9,1
80002248:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
8000224c:	99 08       	st.w	r12[0x0],r8
void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
}
8000224e:	5e fc       	retal	r12
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
80002250:	e0 68 c6 bf 	mov	r8,50879
80002254:	ea 18 00 2d 	orh	r8,0x2d
80002258:	10 3b       	cp.w	r11,r8
8000225a:	e0 88 00 0c 	brls	80002272 <pm_switch_to_osc0+0x56>
8000225e:	e0 68 12 00 	mov	r8,4608
80002262:	ea 18 00 7a 	orh	r8,0x7a
80002266:	10 3b       	cp.w	r11,r8
80002268:	f9 bb 03 06 	movlo	r11,6
8000226c:	f9 bb 02 07 	movhs	r11,7
80002270:	cd bb       	rjmp	80002226 <pm_switch_to_osc0+0xa>
80002272:	30 5b       	mov	r11,5
80002274:	cd 9b       	rjmp	80002226 <pm_switch_to_osc0+0xa>
80002276:	d7 03       	nop

80002278 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80002278:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000227c:	fe c0 fe 7c 	sub	r0,pc,-388

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80002280:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80002284:	d5 53       	csrf	0x15
  cp      r0, r1
80002286:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80002288:	30 81       	mov	r1,8
  lda.w   r2, _data_lma
8000228a:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
8000228c:	c0 72       	brcc	8000229a <idata_load_loop_end>
  st.d    r0++, r4
8000228e:	fe c2 fb 7e 	sub	r2,pc,-1154

80002292 <idata_load_loop>:
  cp      r0, r1
  brlo    idata_load_loop
80002292:	a5 05       	ld.d	r4,r2++
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
80002294:	a1 24       	st.d	r0++,r4
  lda.w   r1, _end
80002296:	02 30       	cp.w	r0,r1
  cp      r0, r1
80002298:	cf d3       	brcs	80002292 <idata_load_loop>

8000229a <idata_load_loop_end>:
  brhs    udata_clear_loop_end
8000229a:	30 80       	mov	r0,8
  mov     r2, 0
8000229c:	e0 61 00 f8 	mov	r1,248
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800022a0:	02 30       	cp.w	r0,r1
  cp      r0, r1
800022a2:	c0 62       	brcc	800022ae <udata_clear_loop_end>
  brlo    udata_clear_loop
800022a4:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800022a6:	30 03       	mov	r3,0

800022a8 <udata_clear_loop>:
800022a8:	a1 22       	st.d	r0++,r2
800022aa:	02 30       	cp.w	r0,r1
800022ac:	cf e3       	brcs	800022a8 <udata_clear_loop>

800022ae <udata_clear_loop_end>:
800022ae:	fe cf ff fa 	sub	pc,pc,-6
800022b2:	d7 03       	nop

800022b4 <main>:
#include <gpio.h>
#include <evk1100.h>
#include <pm.h>

int main (void)
{
800022b4:	d4 01       	pushm	lr
	//Initialize and start clock to osc0
	//OSC0 is set to 12 Mhz in the evk11.h file
	pm_switch_to_osc0(&AVR32_PM, FOSC0, OSC0_STARTUP);		
800022b6:	e0 6b 1b 00 	mov	r11,6912
800022ba:	ea 1b 00 b7 	orh	r11,0xb7
800022be:	30 3a       	mov	r10,3
800022c0:	fe 7c 0c 00 	mov	r12,-62464
800022c4:	ca cf       	rcall	8000221c <pm_switch_to_osc0>
800022c6:	ca 1e       	rcall	80002008 <board_init>
	
	//Initialize board
	board_init();
800022c8:	35 8c       	mov	r12,88
800022ca:	c2 5f       	rcall	80002114 <gpio_enable_gpio_pin>
	
	//Enable PB0 as input-pin, active low											
	gpio_enable_gpio_pin(GPIO_PUSH_BUTTON_0);			
800022cc:	33 5c       	mov	r12,53
800022ce:	c2 3f       	rcall	80002114 <gpio_enable_gpio_pin>
800022d0:	30 1b       	mov	r11,1
	
	//Enable LED6 as GPIO-pin, active low
	gpio_enable_gpio_pin(LED6_GPIO);
800022d2:	33 5c       	mov	r12,53
800022d4:	c2 bf       	rcall	8000212a <gpio_configure_pin>
800022d6:	35 8c       	mov	r12,88
	
	//Enable LED& as output, active low
	gpio_configure_pin(LED6_GPIO, GPIO_DIR_OUTPUT);	
800022d8:	c6 9f       	rcall	800021aa <gpio_get_pin_value>
800022da:	c0 60       	breq	800022e6 <main+0x32>
800022dc:	33 5c       	mov	r12,53
800022de:	c7 1f       	rcall	800021c0 <gpio_set_pin_high>
 * \return bool    \c true if the pin is in low logical level
 *                 \c false if the pin is not in low logical level
 */
__always_inline static bool gpio_pin_is_low(uint32_t pin)
{
	return (gpio_get_pin_value(pin) == 0);
800022e0:	35 8c       	mov	r12,88
800022e2:	c6 4f       	rcall	800021aa <gpio_get_pin_value>
800022e4:	cf c1       	brne	800022dc <main+0x28>
	
	while(1){
	
	//If PB0 is pressed, e.g pin is low
	if (gpio_pin_is_low(GPIO_PUSH_BUTTON_0))	
800022e6:	33 5c       	mov	r12,53
		gpio_set_pin_low(LED6_GPIO);								
	} 
	else
	{
		//Else, deactivate LED6 by setting gpio-pin high
		gpio_set_pin_high(LED6_GPIO);	
800022e8:	c7 6f       	rcall	800021d4 <gpio_set_pin_low>
800022ea:	cf 6b       	rjmp	800022d6 <main+0x22>

Disassembly of section .exception:

80002400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80002400:	c0 08       	rjmp	80002400 <_evba>
	...

80002404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80002404:	c0 08       	rjmp	80002404 <_handle_TLB_Multiple_Hit>
	...

80002408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80002408:	c0 08       	rjmp	80002408 <_handle_Bus_Error_Data_Fetch>
	...

8000240c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000240c:	c0 08       	rjmp	8000240c <_handle_Bus_Error_Instruction_Fetch>
	...

80002410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80002410:	c0 08       	rjmp	80002410 <_handle_NMI>
	...

80002414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80002414:	c0 08       	rjmp	80002414 <_handle_Instruction_Address>
	...

80002418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80002418:	c0 08       	rjmp	80002418 <_handle_ITLB_Protection>
	...

8000241c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000241c:	c0 08       	rjmp	8000241c <_handle_Breakpoint>
	...

80002420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80002420:	c0 08       	rjmp	80002420 <_handle_Illegal_Opcode>
	...

80002424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80002424:	c0 08       	rjmp	80002424 <_handle_Unimplemented_Instruction>
	...

80002428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80002428:	c0 08       	rjmp	80002428 <_handle_Privilege_Violation>
	...

8000242c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000242c:	c0 08       	rjmp	8000242c <_handle_Floating_Point>
	...

80002430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80002430:	c0 08       	rjmp	80002430 <_handle_Coprocessor_Absent>
	...

80002434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80002434:	c0 08       	rjmp	80002434 <_handle_Data_Address_Read>
	...

80002438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80002438:	c0 08       	rjmp	80002438 <_handle_Data_Address_Write>
	...

8000243c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000243c:	c0 08       	rjmp	8000243c <_handle_DTLB_Protection_Read>
	...

80002440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80002440:	c0 08       	rjmp	80002440 <_handle_DTLB_Protection_Write>
	...

80002444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80002444:	c0 08       	rjmp	80002444 <_handle_DTLB_Modified>
	...

80002450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80002450:	c0 08       	rjmp	80002450 <_handle_ITLB_Miss>
	...

80002460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80002460:	c0 08       	rjmp	80002460 <_handle_DTLB_Miss_Read>
	...

80002470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80002470:	c0 08       	rjmp	80002470 <_handle_DTLB_Miss_Write>
	...

80002500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80002500:	c0 08       	rjmp	80002500 <_handle_Supervisor_Call>
80002502:	d7 03       	nop

80002504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002504:	30 0c       	mov	r12,0
80002506:	c7 1e       	rcall	800021e8 <_get_interrupt_handler>
80002508:	58 0c       	cp.w	r12,0
8000250a:	f8 0f 17 10 	movne	pc,r12
8000250e:	d6 03       	rete

80002510 <_int1>:
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80002510:	30 1c       	mov	r12,1
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002512:	c6 be       	rcall	800021e8 <_get_interrupt_handler>
80002514:	58 0c       	cp.w	r12,0
80002516:	f8 0f 17 10 	movne	pc,r12
8000251a:	d6 03       	rete

8000251c <_int2>:
8000251c:	30 2c       	mov	r12,2
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000251e:	c6 5e       	rcall	800021e8 <_get_interrupt_handler>
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80002520:	58 0c       	cp.w	r12,0
80002522:	f8 0f 17 10 	movne	pc,r12
80002526:	d6 03       	rete

80002528 <_int3>:
80002528:	30 3c       	mov	r12,3
8000252a:	c5 fe       	rcall	800021e8 <_get_interrupt_handler>
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000252c:	58 0c       	cp.w	r12,0
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000252e:	f8 0f 17 10 	movne	pc,r12
80002532:	d6 03       	rete
80002534:	d7 03       	nop
80002536:	d7 03       	nop
80002538:	d7 03       	nop
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000253a:	d7 03       	nop
8000253c:	d7 03       	nop
8000253e:	d7 03       	nop
80002540:	d7 03       	nop
80002542:	d7 03       	nop
80002544:	d7 03       	nop
80002546:	d7 03       	nop
80002548:	d7 03       	nop
8000254a:	d7 03       	nop
8000254c:	d7 03       	nop
8000254e:	d7 03       	nop
80002550:	d7 03       	nop
80002552:	d7 03       	nop
80002554:	d7 03       	nop
80002556:	d7 03       	nop
80002558:	d7 03       	nop
8000255a:	d7 03       	nop
8000255c:	d7 03       	nop
8000255e:	d7 03       	nop
80002560:	d7 03       	nop
80002562:	d7 03       	nop
80002564:	d7 03       	nop
80002566:	d7 03       	nop
80002568:	d7 03       	nop
8000256a:	d7 03       	nop
8000256c:	d7 03       	nop
8000256e:	d7 03       	nop
80002570:	d7 03       	nop
80002572:	d7 03       	nop
80002574:	d7 03       	nop
80002576:	d7 03       	nop
80002578:	d7 03       	nop
8000257a:	d7 03       	nop
8000257c:	d7 03       	nop
8000257e:	d7 03       	nop
80002580:	d7 03       	nop
80002582:	d7 03       	nop
80002584:	d7 03       	nop
80002586:	d7 03       	nop
80002588:	d7 03       	nop
8000258a:	d7 03       	nop
8000258c:	d7 03       	nop
8000258e:	d7 03       	nop
80002590:	d7 03       	nop
80002592:	d7 03       	nop
80002594:	d7 03       	nop
80002596:	d7 03       	nop
80002598:	d7 03       	nop
8000259a:	d7 03       	nop
8000259c:	d7 03       	nop
8000259e:	d7 03       	nop
800025a0:	d7 03       	nop
800025a2:	d7 03       	nop
800025a4:	d7 03       	nop
800025a6:	d7 03       	nop
800025a8:	d7 03       	nop
800025aa:	d7 03       	nop
800025ac:	d7 03       	nop
800025ae:	d7 03       	nop
800025b0:	d7 03       	nop
800025b2:	d7 03       	nop
800025b4:	d7 03       	nop
800025b6:	d7 03       	nop
800025b8:	d7 03       	nop
800025ba:	d7 03       	nop
800025bc:	d7 03       	nop
800025be:	d7 03       	nop
800025c0:	d7 03       	nop
800025c2:	d7 03       	nop
800025c4:	d7 03       	nop
800025c6:	d7 03       	nop
800025c8:	d7 03       	nop
800025ca:	d7 03       	nop
800025cc:	d7 03       	nop
800025ce:	d7 03       	nop
800025d0:	d7 03       	nop
800025d2:	d7 03       	nop
800025d4:	d7 03       	nop
800025d6:	d7 03       	nop
800025d8:	d7 03       	nop
800025da:	d7 03       	nop
800025dc:	d7 03       	nop
800025de:	d7 03       	nop
800025e0:	d7 03       	nop
800025e2:	d7 03       	nop
800025e4:	d7 03       	nop
800025e6:	d7 03       	nop
800025e8:	d7 03       	nop
800025ea:	d7 03       	nop
800025ec:	d7 03       	nop
800025ee:	d7 03       	nop
800025f0:	d7 03       	nop
800025f2:	d7 03       	nop
800025f4:	d7 03       	nop
800025f6:	d7 03       	nop
800025f8:	d7 03       	nop
800025fa:	d7 03       	nop
800025fc:	d7 03       	nop
800025fe:	d7 03       	nop
