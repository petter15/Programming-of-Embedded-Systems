
lab3_task1_v3.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00009712  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  8000b800  8000b800  0000bc00  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000774  8000ba00  8000ba00  0000be00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .lalign       00000004  8000c174  8000c174  0000c574  2**0
                  ALLOC
  6 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  7 .data         00000510  00000008  8000c178  0000c808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00000188  00000518  00000518  00000000  2**2
                  ALLOC
  9 .heap         0000e960  000006a0  000006a0  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  0000cd18  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 000011b0  00000000  00000000  0000cd48  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00002387  00000000  00000000  0000def8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000263a2  00000000  00000000  0001027f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00005704  00000000  00000000  00036621  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00010e5c  00000000  00000000  0003bd25  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000031b4  00000000  00000000  0004cb84  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000056d2  00000000  00000000  0004fd38  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000acb7  00000000  00000000  0005540a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 00deac85  00000000  00000000  000600c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00001220  00000000  00000000  00e4ad48  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	fe cf ae 78 	sub	pc,pc,-20872

80000004 <_trampoline>:
80000004:	e0 8f 10 00 	bral	80002004 <program_start>
	...

80002004 <program_start>:
  rjmp    program_start

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002004:	fe cf ce 7c 	sub	pc,pc,-12676

Disassembly of section .text:

80002008 <sysclk_get_main_hz>:
80002008:	eb cd 40 80 	pushm	r7,lr
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000200c:	1a 97       	mov	r7,sp
	}
#endif

	switch (CONFIG_SYSCLK_SOURCE) {
	case SYSCLK_SRC_RCSYS:
		return OSC_SLOW_NOMINAL_HZ;
8000200e:	e0 78 c2 00 	mov	r8,115200

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80002012:	10 9c       	mov	r12,r8
80002014:	e3 cd 80 80 	ldm	sp++,r7,pc

80002018 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80002018:	eb cd 40 80 	pushm	r7,lr
8000201c:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000201e:	f0 1f 00 04 	mcall	8000202c <sysclk_get_cpu_hz+0x14>
80002022:	18 98       	mov	r8,r12
}
80002024:	10 9c       	mov	r12,r8
80002026:	e3 cd 80 80 	ldm	sp++,r7,pc
8000202a:	00 00       	add	r0,r0
8000202c:	80 00       	ld.sh	r0,r0[0x0]
8000202e:	20 08       	sub	r8,0

80002030 <dip204_init>:


/****************************** global functions *****************************/

void dip204_init(backlight_options option, bool backlight_on)
{
80002030:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002034:	1a 97       	mov	r7,sp
80002036:	fa cd 01 ac 	sub	sp,sp,428
8000203a:	ef 4c fe b8 	st.w	r7[-328],r12
8000203e:	16 98       	mov	r8,r11
80002040:	ef 68 fe b4 	st.b	r7[-332],r8
  pwm_opt_t pwm_opt;  // pwm option config

  if (option == backlight_PWM)
80002044:	ee f8 fe b8 	ld.w	r8,r7[-328]
80002048:	58 18       	cp.w	r8,1
8000204a:	c6 41       	brne	80002112 <dip204_init+0xe2>
  {
    channel_id = DIP204_PWM_CHANNEL;
8000204c:	fe f9 0a 84 	ld.w	r9,pc[2692]
80002050:	30 68       	mov	r8,6
80002052:	93 08       	st.w	r9[0x0],r8
    gpio_enable_module_pin(DIP204_PWM_PIN, DIP204_PWM_FUNCTION);
80002054:	30 2b       	mov	r11,2
80002056:	33 2c       	mov	r12,50
80002058:	f0 1f 02 9f 	mcall	80002ad4 <dip204_init+0xaa4>

    // PWM controller configuration
    pwm_opt.diva=0;
8000205c:	30 08       	mov	r8,0
8000205e:	ef 48 ff 14 	st.w	r7[-236],r8
    pwm_opt.divb=0;
80002062:	30 08       	mov	r8,0
80002064:	ef 48 ff 10 	st.w	r7[-240],r8
    pwm_opt.prea=0;
80002068:	30 08       	mov	r8,0
8000206a:	ef 48 ff 1c 	st.w	r7[-228],r8
    pwm_opt.preb=0;
8000206e:	30 08       	mov	r8,0
80002070:	ef 48 ff 18 	st.w	r7[-232],r8

    pwm_init(&pwm_opt);
80002074:	ee c8 00 f0 	sub	r8,r7,240
80002078:	10 9c       	mov	r12,r8
8000207a:	f0 1f 02 98 	mcall	80002ad8 <dip204_init+0xaa8>
    pwm_duty = (backlight_on) ? DIP204_PERIOD_MAX - 1 : 1;
8000207e:	ef 39 fe b4 	ld.ub	r9,r7[-332]
80002082:	30 08       	mov	r8,0
80002084:	f0 09 18 00 	cp.b	r9,r8
80002088:	c0 30       	breq	8000208e <dip204_init+0x5e>
8000208a:	33 18       	mov	r8,49
8000208c:	c0 28       	rjmp	80002090 <dip204_init+0x60>
8000208e:	30 18       	mov	r8,1
80002090:	fe f9 0a 4c 	ld.w	r9,pc[2636]
80002094:	b2 08       	st.h	r9[0x0],r8
    pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED;   // channel mode
80002096:	fe fa 0a 4a 	ld.w	r10,pc[2634]
8000209a:	74 08       	ld.w	r8,r10[0x0]
8000209c:	30 09       	mov	r9,0
8000209e:	f1 d9 d1 01 	bfins	r8,r9,0x8,0x1
800020a2:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpol = PWM_POLARITY_LOW;   // channel polarity
800020a4:	fe fa 0a 3c 	ld.w	r10,pc[2620]
800020a8:	74 08       	ld.w	r8,r10[0x0]
800020aa:	30 09       	mov	r9,0
800020ac:	f1 d9 d1 21 	bfins	r8,r9,0x9,0x1
800020b0:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpd = PWM_UPDATE_PERIOD;   // not used the first time
800020b2:	fe fa 0a 2e 	ld.w	r10,pc[2606]
800020b6:	74 08       	ld.w	r8,r10[0x0]
800020b8:	30 19       	mov	r9,1
800020ba:	f1 d9 d1 41 	bfins	r8,r9,0xa,0x1
800020be:	95 08       	st.w	r10[0x0],r8
    pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK_DIV_256;   // channel prescaler
800020c0:	fe fa 0a 20 	ld.w	r10,pc[2592]
800020c4:	74 08       	ld.w	r8,r10[0x0]
800020c6:	30 89       	mov	r9,8
800020c8:	f1 d9 d0 04 	bfins	r8,r9,0x0,0x4
800020cc:	95 08       	st.w	r10[0x0],r8
    pwm_channel.cdty = pwm_duty;  // channel duty cycle, should be < CPRD
800020ce:	fe f8 0a 0e 	ld.w	r8,pc[2574]
800020d2:	90 08       	ld.sh	r8,r8[0x0]
800020d4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800020d8:	fe f8 0a 08 	ld.w	r8,pc[2568]
800020dc:	91 19       	st.w	r8[0x4],r9
    pwm_channel.cprd = DIP204_PERIOD_MAX;  // channel period
800020de:	fe f9 0a 02 	ld.w	r9,pc[2562]
800020e2:	33 28       	mov	r8,50
800020e4:	93 28       	st.w	r9[0x8],r8
    pwm_channel.cupd = 0;  // channel update is not used here.
800020e6:	fe f9 09 fa 	ld.w	r9,pc[2554]
800020ea:	30 08       	mov	r8,0
800020ec:	93 48       	st.w	r9[0x10],r8

    pwm_channel_init(channel_id, &pwm_channel);
800020ee:	fe f8 09 e2 	ld.w	r8,pc[2530]
800020f2:	70 08       	ld.w	r8,r8[0x0]
800020f4:	fe fb 09 ec 	ld.w	r11,pc[2540]
800020f8:	10 9c       	mov	r12,r8
800020fa:	f0 1f 02 7b 	mcall	80002ae4 <dip204_init+0xab4>
    // start PWM
    pwm_start_channels(1 << channel_id);
800020fe:	fe f8 09 d2 	ld.w	r8,pc[2514]
80002102:	70 09       	ld.w	r9,r8[0x0]
80002104:	30 18       	mov	r8,1
80002106:	f0 09 09 48 	lsl	r8,r8,r9
8000210a:	10 9c       	mov	r12,r8
8000210c:	f0 1f 02 77 	mcall	80002ae8 <dip204_init+0xab8>
80002110:	c0 e8       	rjmp	8000212c <dip204_init+0xfc>
  }
  else
  {
    if (backlight_on)
80002112:	ef 39 fe b4 	ld.ub	r9,r7[-332]
80002116:	30 08       	mov	r8,0
80002118:	f0 09 18 00 	cp.b	r9,r8
8000211c:	c0 50       	breq	80002126 <dip204_init+0xf6>
    {
      gpio_clr_gpio_pin(DIP204_BACKLIGHT_PIN);
8000211e:	33 2c       	mov	r12,50
80002120:	f0 1f 02 73 	mcall	80002aec <dip204_init+0xabc>
80002124:	c0 48       	rjmp	8000212c <dip204_init+0xfc>
    }
    else
    {
      gpio_set_gpio_pin(DIP204_BACKLIGHT_PIN);
80002126:	33 2c       	mov	r12,50
80002128:	f0 1f 02 72 	mcall	80002af0 <dip204_init+0xac0>
    }
  }
  // delay for power on
  delay_ms(20);
8000212c:	f0 1f 02 72 	mcall	80002af4 <dip204_init+0xac4>
80002130:	18 99       	mov	r9,r12
80002132:	31 48       	mov	r8,20
80002134:	ef 48 ff 24 	st.w	r7[-220],r8
80002138:	ef 49 ff 20 	st.w	r7[-224],r9
8000213c:	ee f8 ff 24 	ld.w	r8,r7[-220]
80002140:	ef 48 ff 2c 	st.w	r7[-212],r8
80002144:	ee f8 ff 20 	ld.w	r8,r7[-224]
80002148:	ef 48 ff 28 	st.w	r7[-216],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000214c:	ee f0 ff 2c 	ld.w	r0,r7[-212]
80002150:	30 01       	mov	r1,0
80002152:	ee f2 ff 28 	ld.w	r2,r7[-216]
80002156:	30 03       	mov	r3,0
80002158:	e2 02 02 49 	mul	r9,r1,r2
8000215c:	e6 00 02 48 	mul	r8,r3,r0
80002160:	10 09       	add	r9,r8
80002162:	e0 02 06 4a 	mulu.d	r10,r0,r2
80002166:	16 09       	add	r9,r11
80002168:	12 9b       	mov	r11,r9
8000216a:	e0 68 03 e7 	mov	r8,999
8000216e:	30 09       	mov	r9,0
80002170:	10 0a       	add	r10,r8
80002172:	f6 09 00 4b 	adc	r11,r11,r9
80002176:	e0 68 03 e8 	mov	r8,1000
8000217a:	30 09       	mov	r9,0
8000217c:	f0 1f 02 5f 	mcall	80002af8 <dip204_init+0xac8>
80002180:	14 98       	mov	r8,r10
80002182:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002184:	ef 48 ff 34 	st.w	r7[-204],r8
80002188:	ee c8 01 44 	sub	r8,r7,324
8000218c:	ef 48 ff 30 	st.w	r7[-208],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002190:	e1 b8 00 42 	mfsr	r8,0x108
80002194:	10 99       	mov	r9,r8
80002196:	ee f8 ff 30 	ld.w	r8,r7[-208]
8000219a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000219c:	ee f8 ff 30 	ld.w	r8,r7[-208]
800021a0:	70 09       	ld.w	r9,r8[0x0]
800021a2:	ee f8 ff 34 	ld.w	r8,r7[-204]
800021a6:	10 09       	add	r9,r8
800021a8:	ee f8 ff 30 	ld.w	r8,r7[-208]
800021ac:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800021ae:	ee f9 ff 30 	ld.w	r9,r7[-208]
800021b2:	30 08       	mov	r8,0
800021b4:	f3 68 00 08 	st.b	r9[8],r8
800021b8:	ee c8 01 44 	sub	r8,r7,324
800021bc:	ef 48 ff 38 	st.w	r7[-200],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800021c0:	e1 b8 00 42 	mfsr	r8,0x108
800021c4:	ef 48 ff 3c 	st.w	r7[-196],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800021c8:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021cc:	f1 39 00 08 	ld.ub	r9,r8[8]
800021d0:	30 28       	mov	r8,2
800021d2:	f0 09 18 00 	cp.b	r9,r8
800021d6:	c0 31       	brne	800021dc <dip204_init+0x1ac>
    return false;
800021d8:	30 08       	mov	r8,0
800021da:	c4 38       	rjmp	80002260 <dip204_init+0x230>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800021dc:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021e0:	f1 39 00 08 	ld.ub	r9,r8[8]
800021e4:	30 18       	mov	r8,1
800021e6:	f0 09 18 00 	cp.b	r9,r8
800021ea:	c0 31       	brne	800021f0 <dip204_init+0x1c0>
    return true;
800021ec:	30 18       	mov	r8,1
800021ee:	c3 98       	rjmp	80002260 <dip204_init+0x230>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800021f0:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021f4:	70 09       	ld.w	r9,r8[0x0]
800021f6:	ee f8 ff 38 	ld.w	r8,r7[-200]
800021fa:	70 18       	ld.w	r8,r8[0x4]
800021fc:	10 39       	cp.w	r9,r8
800021fe:	e0 88 00 1a 	brls	80002232 <dip204_init+0x202>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002202:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002206:	70 09       	ld.w	r9,r8[0x0]
80002208:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000220c:	12 38       	cp.w	r8,r9
8000220e:	c1 02       	brcc	8000222e <dip204_init+0x1fe>
80002210:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002214:	70 19       	ld.w	r9,r8[0x4]
80002216:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000221a:	12 38       	cp.w	r8,r9
8000221c:	e0 88 00 09 	brls	8000222e <dip204_init+0x1fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002220:	ee f9 ff 38 	ld.w	r9,r7[-200]
80002224:	30 18       	mov	r8,1
80002226:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000222a:	30 18       	mov	r8,1
8000222c:	c1 a8       	rjmp	80002260 <dip204_init+0x230>
    }
    return false;
8000222e:	30 08       	mov	r8,0
80002230:	c1 88       	rjmp	80002260 <dip204_init+0x230>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002232:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002236:	70 09       	ld.w	r9,r8[0x0]
80002238:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000223c:	12 38       	cp.w	r8,r9
8000223e:	c0 93       	brcs	80002250 <dip204_init+0x220>
80002240:	ee f8 ff 38 	ld.w	r8,r7[-200]
80002244:	70 19       	ld.w	r9,r8[0x4]
80002246:	ee f8 ff 3c 	ld.w	r8,r7[-196]
8000224a:	12 38       	cp.w	r8,r9
8000224c:	e0 88 00 09 	brls	8000225e <dip204_init+0x22e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002250:	ee f9 ff 38 	ld.w	r9,r7[-200]
80002254:	30 18       	mov	r8,1
80002256:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000225a:	30 18       	mov	r8,1
8000225c:	c0 28       	rjmp	80002260 <dip204_init+0x230>
    }
    return false;
8000225e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002260:	58 08       	cp.w	r8,0
80002262:	ca b0       	breq	800021b8 <dip204_init+0x188>
  // select the LCD chip
  dip204_select();
80002264:	f0 1f 02 26 	mcall	80002afc <dip204_init+0xacc>
  // Send Command Start Byte
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002268:	e0 6c 00 f8 	mov	r12,248
8000226c:	f0 1f 02 25 	mcall	80002b00 <dip204_init+0xad0>
  // Send "extended Function Set" Command  (RE=1)
  dip204_write_byte(0x34);
80002270:	33 4c       	mov	r12,52
80002272:	f0 1f 02 24 	mcall	80002b00 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002276:	f0 1f 02 20 	mcall	80002af4 <dip204_init+0xac4>
8000227a:	18 99       	mov	r9,r12
8000227c:	30 18       	mov	r8,1
8000227e:	ef 48 ff 44 	st.w	r7[-188],r8
80002282:	ef 49 ff 40 	st.w	r7[-192],r9
80002286:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000228a:	ef 48 ff 4c 	st.w	r7[-180],r8
8000228e:	ee f8 ff 40 	ld.w	r8,r7[-192]
80002292:	ef 48 ff 48 	st.w	r7[-184],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002296:	ee fc ff 4c 	ld.w	r12,r7[-180]
8000229a:	ef 4c fe 60 	st.w	r7[-416],r12
8000229e:	30 0b       	mov	r11,0
800022a0:	ef 4b fe 5c 	st.w	r7[-420],r11
800022a4:	ee fa ff 48 	ld.w	r10,r7[-184]
800022a8:	ef 4a fe 58 	st.w	r7[-424],r10
800022ac:	30 09       	mov	r9,0
800022ae:	ef 49 fe 54 	st.w	r7[-428],r9
800022b2:	ee f9 fe 5c 	ld.w	r9,r7[-420]
800022b6:	ee f8 fe 58 	ld.w	r8,r7[-424]
800022ba:	b1 39       	mul	r9,r8
800022bc:	ee f8 fe 54 	ld.w	r8,r7[-428]
800022c0:	ee fc fe 60 	ld.w	r12,r7[-416]
800022c4:	b9 38       	mul	r8,r12
800022c6:	10 09       	add	r9,r8
800022c8:	ee f8 fe 60 	ld.w	r8,r7[-416]
800022cc:	ee fc fe 58 	ld.w	r12,r7[-424]
800022d0:	f0 0c 06 4a 	mulu.d	r10,r8,r12
800022d4:	16 09       	add	r9,r11
800022d6:	12 9b       	mov	r11,r9
800022d8:	e0 68 03 e7 	mov	r8,999
800022dc:	30 09       	mov	r9,0
800022de:	10 0a       	add	r10,r8
800022e0:	f6 09 00 4b 	adc	r11,r11,r9
800022e4:	e0 68 03 e8 	mov	r8,1000
800022e8:	30 09       	mov	r9,0
800022ea:	f0 1f 02 04 	mcall	80002af8 <dip204_init+0xac8>
800022ee:	14 98       	mov	r8,r10
800022f0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800022f2:	ef 48 ff 54 	st.w	r7[-172],r8
800022f6:	ee c8 01 38 	sub	r8,r7,312
800022fa:	ef 48 ff 50 	st.w	r7[-176],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800022fe:	e1 b8 00 42 	mfsr	r8,0x108
80002302:	10 99       	mov	r9,r8
80002304:	ee f8 ff 50 	ld.w	r8,r7[-176]
80002308:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000230a:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000230e:	70 09       	ld.w	r9,r8[0x0]
80002310:	ee f8 ff 54 	ld.w	r8,r7[-172]
80002314:	10 09       	add	r9,r8
80002316:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000231a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000231c:	ee f9 ff 50 	ld.w	r9,r7[-176]
80002320:	30 08       	mov	r8,0
80002322:	f3 68 00 08 	st.b	r9[8],r8
80002326:	ee c8 01 38 	sub	r8,r7,312
8000232a:	ef 48 ff 58 	st.w	r7[-168],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000232e:	e1 b8 00 42 	mfsr	r8,0x108
80002332:	ef 48 ff 5c 	st.w	r7[-164],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002336:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000233a:	f1 39 00 08 	ld.ub	r9,r8[8]
8000233e:	30 28       	mov	r8,2
80002340:	f0 09 18 00 	cp.b	r9,r8
80002344:	c0 31       	brne	8000234a <dip204_init+0x31a>
    return false;
80002346:	30 08       	mov	r8,0
80002348:	c4 38       	rjmp	800023ce <dip204_init+0x39e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000234a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000234e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002352:	30 18       	mov	r8,1
80002354:	f0 09 18 00 	cp.b	r9,r8
80002358:	c0 31       	brne	8000235e <dip204_init+0x32e>
    return true;
8000235a:	30 18       	mov	r8,1
8000235c:	c3 98       	rjmp	800023ce <dip204_init+0x39e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000235e:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002362:	70 09       	ld.w	r9,r8[0x0]
80002364:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002368:	70 18       	ld.w	r8,r8[0x4]
8000236a:	10 39       	cp.w	r9,r8
8000236c:	e0 88 00 1a 	brls	800023a0 <dip204_init+0x370>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002370:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002374:	70 09       	ld.w	r9,r8[0x0]
80002376:	ee f8 ff 5c 	ld.w	r8,r7[-164]
8000237a:	12 38       	cp.w	r8,r9
8000237c:	c1 02       	brcc	8000239c <dip204_init+0x36c>
8000237e:	ee f8 ff 58 	ld.w	r8,r7[-168]
80002382:	70 19       	ld.w	r9,r8[0x4]
80002384:	ee f8 ff 5c 	ld.w	r8,r7[-164]
80002388:	12 38       	cp.w	r8,r9
8000238a:	e0 88 00 09 	brls	8000239c <dip204_init+0x36c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000238e:	ee f9 ff 58 	ld.w	r9,r7[-168]
80002392:	30 18       	mov	r8,1
80002394:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002398:	30 18       	mov	r8,1
8000239a:	c1 a8       	rjmp	800023ce <dip204_init+0x39e>
    }
    return false;
8000239c:	30 08       	mov	r8,0
8000239e:	c1 88       	rjmp	800023ce <dip204_init+0x39e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800023a0:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023a4:	70 09       	ld.w	r9,r8[0x0]
800023a6:	ee f8 ff 5c 	ld.w	r8,r7[-164]
800023aa:	12 38       	cp.w	r8,r9
800023ac:	c0 93       	brcs	800023be <dip204_init+0x38e>
800023ae:	ee f8 ff 58 	ld.w	r8,r7[-168]
800023b2:	70 19       	ld.w	r9,r8[0x4]
800023b4:	ee f8 ff 5c 	ld.w	r8,r7[-164]
800023b8:	12 38       	cp.w	r8,r9
800023ba:	e0 88 00 09 	brls	800023cc <dip204_init+0x39c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800023be:	ee f9 ff 58 	ld.w	r9,r7[-168]
800023c2:	30 18       	mov	r8,1
800023c4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800023c8:	30 18       	mov	r8,1
800023ca:	c0 28       	rjmp	800023ce <dip204_init+0x39e>
    }
    return false;
800023cc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800023ce:	58 08       	cp.w	r8,0
800023d0:	ca b0       	breq	80002326 <dip204_init+0x2f6>
  // Send "Enter 4-Line Mode" Command
  dip204_write_byte(0x09);
800023d2:	30 9c       	mov	r12,9
800023d4:	f0 1f 01 cb 	mcall	80002b00 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
800023d8:	f0 1f 01 c7 	mcall	80002af4 <dip204_init+0xac4>
800023dc:	18 99       	mov	r9,r12
800023de:	30 18       	mov	r8,1
800023e0:	ef 48 ff 64 	st.w	r7[-156],r8
800023e4:	ef 49 ff 60 	st.w	r7[-160],r9
800023e8:	ee f8 ff 64 	ld.w	r8,r7[-156]
800023ec:	ef 48 ff 6c 	st.w	r7[-148],r8
800023f0:	ee f8 ff 60 	ld.w	r8,r7[-160]
800023f4:	ef 48 ff 68 	st.w	r7[-152],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800023f8:	ee fb ff 6c 	ld.w	r11,r7[-148]
800023fc:	ef 4b fe 70 	st.w	r7[-400],r11
80002400:	30 0a       	mov	r10,0
80002402:	ef 4a fe 6c 	st.w	r7[-404],r10
80002406:	ee f9 ff 68 	ld.w	r9,r7[-152]
8000240a:	ef 49 fe 68 	st.w	r7[-408],r9
8000240e:	30 08       	mov	r8,0
80002410:	ef 48 fe 64 	st.w	r7[-412],r8
80002414:	ee f9 fe 6c 	ld.w	r9,r7[-404]
80002418:	ee fc fe 68 	ld.w	r12,r7[-408]
8000241c:	b9 39       	mul	r9,r12
8000241e:	ee f8 fe 64 	ld.w	r8,r7[-412]
80002422:	ee fb fe 70 	ld.w	r11,r7[-400]
80002426:	b7 38       	mul	r8,r11
80002428:	10 09       	add	r9,r8
8000242a:	ee f8 fe 70 	ld.w	r8,r7[-400]
8000242e:	ee fc fe 68 	ld.w	r12,r7[-408]
80002432:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80002436:	16 09       	add	r9,r11
80002438:	12 9b       	mov	r11,r9
8000243a:	e0 68 03 e7 	mov	r8,999
8000243e:	30 09       	mov	r9,0
80002440:	10 0a       	add	r10,r8
80002442:	f6 09 00 4b 	adc	r11,r11,r9
80002446:	e0 68 03 e8 	mov	r8,1000
8000244a:	30 09       	mov	r9,0
8000244c:	f0 1f 01 ab 	mcall	80002af8 <dip204_init+0xac8>
80002450:	14 98       	mov	r8,r10
80002452:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002454:	ef 48 ff 74 	st.w	r7[-140],r8
80002458:	ee c8 01 2c 	sub	r8,r7,300
8000245c:	ef 48 ff 70 	st.w	r7[-144],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002460:	e1 b8 00 42 	mfsr	r8,0x108
80002464:	10 99       	mov	r9,r8
80002466:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000246a:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000246c:	ee f8 ff 70 	ld.w	r8,r7[-144]
80002470:	70 09       	ld.w	r9,r8[0x0]
80002472:	ee f8 ff 74 	ld.w	r8,r7[-140]
80002476:	10 09       	add	r9,r8
80002478:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000247c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000247e:	ee f9 ff 70 	ld.w	r9,r7[-144]
80002482:	30 08       	mov	r8,0
80002484:	f3 68 00 08 	st.b	r9[8],r8
80002488:	ee c8 01 2c 	sub	r8,r7,300
8000248c:	ef 48 ff 78 	st.w	r7[-136],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002490:	e1 b8 00 42 	mfsr	r8,0x108
80002494:	ef 48 ff 7c 	st.w	r7[-132],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002498:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000249c:	f1 39 00 08 	ld.ub	r9,r8[8]
800024a0:	30 28       	mov	r8,2
800024a2:	f0 09 18 00 	cp.b	r9,r8
800024a6:	c0 31       	brne	800024ac <dip204_init+0x47c>
    return false;
800024a8:	30 08       	mov	r8,0
800024aa:	c4 38       	rjmp	80002530 <dip204_init+0x500>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800024ac:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024b0:	f1 39 00 08 	ld.ub	r9,r8[8]
800024b4:	30 18       	mov	r8,1
800024b6:	f0 09 18 00 	cp.b	r9,r8
800024ba:	c0 31       	brne	800024c0 <dip204_init+0x490>
    return true;
800024bc:	30 18       	mov	r8,1
800024be:	c3 98       	rjmp	80002530 <dip204_init+0x500>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800024c0:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024c4:	70 09       	ld.w	r9,r8[0x0]
800024c6:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024ca:	70 18       	ld.w	r8,r8[0x4]
800024cc:	10 39       	cp.w	r9,r8
800024ce:	e0 88 00 1a 	brls	80002502 <dip204_init+0x4d2>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800024d2:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024d6:	70 09       	ld.w	r9,r8[0x0]
800024d8:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800024dc:	12 38       	cp.w	r8,r9
800024de:	c1 02       	brcc	800024fe <dip204_init+0x4ce>
800024e0:	ee f8 ff 78 	ld.w	r8,r7[-136]
800024e4:	70 19       	ld.w	r9,r8[0x4]
800024e6:	ee f8 ff 7c 	ld.w	r8,r7[-132]
800024ea:	12 38       	cp.w	r8,r9
800024ec:	e0 88 00 09 	brls	800024fe <dip204_init+0x4ce>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800024f0:	ee f9 ff 78 	ld.w	r9,r7[-136]
800024f4:	30 18       	mov	r8,1
800024f6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800024fa:	30 18       	mov	r8,1
800024fc:	c1 a8       	rjmp	80002530 <dip204_init+0x500>
    }
    return false;
800024fe:	30 08       	mov	r8,0
80002500:	c1 88       	rjmp	80002530 <dip204_init+0x500>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002502:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002506:	70 09       	ld.w	r9,r8[0x0]
80002508:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000250c:	12 38       	cp.w	r8,r9
8000250e:	c0 93       	brcs	80002520 <dip204_init+0x4f0>
80002510:	ee f8 ff 78 	ld.w	r8,r7[-136]
80002514:	70 19       	ld.w	r9,r8[0x4]
80002516:	ee f8 ff 7c 	ld.w	r8,r7[-132]
8000251a:	12 38       	cp.w	r8,r9
8000251c:	e0 88 00 09 	brls	8000252e <dip204_init+0x4fe>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002520:	ee f9 ff 78 	ld.w	r9,r7[-136]
80002524:	30 18       	mov	r8,1
80002526:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000252a:	30 18       	mov	r8,1
8000252c:	c0 28       	rjmp	80002530 <dip204_init+0x500>
    }
    return false;
8000252e:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002530:	58 08       	cp.w	r8,0
80002532:	ca b0       	breq	80002488 <dip204_init+0x458>
  // Send "Function Set" Command (RE=0)
  dip204_write_byte(0x30);
80002534:	33 0c       	mov	r12,48
80002536:	f0 1f 01 73 	mcall	80002b00 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
8000253a:	f0 1f 01 6f 	mcall	80002af4 <dip204_init+0xac4>
8000253e:	18 99       	mov	r9,r12
80002540:	30 18       	mov	r8,1
80002542:	ef 48 ff 84 	st.w	r7[-124],r8
80002546:	ef 49 ff 80 	st.w	r7[-128],r9
8000254a:	ee f8 ff 84 	ld.w	r8,r7[-124]
8000254e:	ef 48 ff 8c 	st.w	r7[-116],r8
80002552:	ee f8 ff 80 	ld.w	r8,r7[-128]
80002556:	ef 48 ff 88 	st.w	r7[-120],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000255a:	ee fb ff 8c 	ld.w	r11,r7[-116]
8000255e:	ef 4b fe 80 	st.w	r7[-384],r11
80002562:	30 0a       	mov	r10,0
80002564:	ef 4a fe 7c 	st.w	r7[-388],r10
80002568:	ee f9 ff 88 	ld.w	r9,r7[-120]
8000256c:	ef 49 fe 78 	st.w	r7[-392],r9
80002570:	30 08       	mov	r8,0
80002572:	ef 48 fe 74 	st.w	r7[-396],r8
80002576:	ee f9 fe 7c 	ld.w	r9,r7[-388]
8000257a:	ee fc fe 78 	ld.w	r12,r7[-392]
8000257e:	b9 39       	mul	r9,r12
80002580:	ee f8 fe 74 	ld.w	r8,r7[-396]
80002584:	ee fb fe 80 	ld.w	r11,r7[-384]
80002588:	b7 38       	mul	r8,r11
8000258a:	10 09       	add	r9,r8
8000258c:	ee f8 fe 80 	ld.w	r8,r7[-384]
80002590:	ee fc fe 78 	ld.w	r12,r7[-392]
80002594:	f0 0c 06 4a 	mulu.d	r10,r8,r12
80002598:	16 09       	add	r9,r11
8000259a:	12 9b       	mov	r11,r9
8000259c:	e0 68 03 e7 	mov	r8,999
800025a0:	30 09       	mov	r9,0
800025a2:	10 0a       	add	r10,r8
800025a4:	f6 09 00 4b 	adc	r11,r11,r9
800025a8:	e0 68 03 e8 	mov	r8,1000
800025ac:	30 09       	mov	r9,0
800025ae:	f0 1f 01 53 	mcall	80002af8 <dip204_init+0xac8>
800025b2:	14 98       	mov	r8,r10
800025b4:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800025b6:	ef 48 ff 94 	st.w	r7[-108],r8
800025ba:	ee c8 01 20 	sub	r8,r7,288
800025be:	ef 48 ff 90 	st.w	r7[-112],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800025c2:	e1 b8 00 42 	mfsr	r8,0x108
800025c6:	10 99       	mov	r9,r8
800025c8:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025cc:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800025ce:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025d2:	70 09       	ld.w	r9,r8[0x0]
800025d4:	ee f8 ff 94 	ld.w	r8,r7[-108]
800025d8:	10 09       	add	r9,r8
800025da:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025de:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800025e0:	ee f9 ff 90 	ld.w	r9,r7[-112]
800025e4:	30 08       	mov	r8,0
800025e6:	f3 68 00 08 	st.b	r9[8],r8
800025ea:	ee c8 01 20 	sub	r8,r7,288
800025ee:	ef 48 ff 98 	st.w	r7[-104],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800025f2:	e1 b8 00 42 	mfsr	r8,0x108
800025f6:	ef 48 ff 9c 	st.w	r7[-100],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800025fa:	ee f8 ff 98 	ld.w	r8,r7[-104]
800025fe:	f1 39 00 08 	ld.ub	r9,r8[8]
80002602:	30 28       	mov	r8,2
80002604:	f0 09 18 00 	cp.b	r9,r8
80002608:	c0 31       	brne	8000260e <dip204_init+0x5de>
    return false;
8000260a:	30 08       	mov	r8,0
8000260c:	c4 38       	rjmp	80002692 <dip204_init+0x662>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000260e:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002612:	f1 39 00 08 	ld.ub	r9,r8[8]
80002616:	30 18       	mov	r8,1
80002618:	f0 09 18 00 	cp.b	r9,r8
8000261c:	c0 31       	brne	80002622 <dip204_init+0x5f2>
    return true;
8000261e:	30 18       	mov	r8,1
80002620:	c3 98       	rjmp	80002692 <dip204_init+0x662>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002622:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002626:	70 09       	ld.w	r9,r8[0x0]
80002628:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000262c:	70 18       	ld.w	r8,r8[0x4]
8000262e:	10 39       	cp.w	r9,r8
80002630:	e0 88 00 1a 	brls	80002664 <dip204_init+0x634>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002634:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002638:	70 08       	ld.w	r8,r8[0x0]
8000263a:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000263e:	10 39       	cp.w	r9,r8
80002640:	c1 02       	brcc	80002660 <dip204_init+0x630>
80002642:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002646:	70 18       	ld.w	r8,r8[0x4]
80002648:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000264c:	10 39       	cp.w	r9,r8
8000264e:	e0 88 00 09 	brls	80002660 <dip204_init+0x630>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002652:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002656:	30 18       	mov	r8,1
80002658:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000265c:	30 18       	mov	r8,1
8000265e:	c1 a8       	rjmp	80002692 <dip204_init+0x662>
    }
    return false;
80002660:	30 08       	mov	r8,0
80002662:	c1 88       	rjmp	80002692 <dip204_init+0x662>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002664:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002668:	70 08       	ld.w	r8,r8[0x0]
8000266a:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000266e:	10 39       	cp.w	r9,r8
80002670:	c0 93       	brcs	80002682 <dip204_init+0x652>
80002672:	ee f8 ff 98 	ld.w	r8,r7[-104]
80002676:	70 18       	ld.w	r8,r8[0x4]
80002678:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000267c:	10 39       	cp.w	r9,r8
8000267e:	e0 88 00 09 	brls	80002690 <dip204_init+0x660>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002682:	ee f9 ff 98 	ld.w	r9,r7[-104]
80002686:	30 18       	mov	r8,1
80002688:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000268c:	30 18       	mov	r8,1
8000268e:	c0 28       	rjmp	80002692 <dip204_init+0x662>
    }
    return false;
80002690:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002692:	58 08       	cp.w	r8,0
80002694:	ca b0       	breq	800025ea <dip204_init+0x5ba>
  // Send "Display On Command: Display On, Cursor On, Blink On"
  dip204_write_byte(0x0F);
80002696:	30 fc       	mov	r12,15
80002698:	f0 1f 01 1a 	mcall	80002b00 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
8000269c:	f0 1f 01 16 	mcall	80002af4 <dip204_init+0xac4>
800026a0:	18 98       	mov	r8,r12
800026a2:	30 19       	mov	r9,1
800026a4:	ef 49 ff a4 	st.w	r7[-92],r9
800026a8:	ef 48 ff a0 	st.w	r7[-96],r8
800026ac:	ee f8 ff a4 	ld.w	r8,r7[-92]
800026b0:	ef 48 ff ac 	st.w	r7[-84],r8
800026b4:	ee f8 ff a0 	ld.w	r8,r7[-96]
800026b8:	ef 48 ff a8 	st.w	r7[-88],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
800026bc:	ee fb ff ac 	ld.w	r11,r7[-84]
800026c0:	ef 4b fe 90 	st.w	r7[-368],r11
800026c4:	30 0a       	mov	r10,0
800026c6:	ef 4a fe 8c 	st.w	r7[-372],r10
800026ca:	ee f9 ff a8 	ld.w	r9,r7[-88]
800026ce:	ef 49 fe 88 	st.w	r7[-376],r9
800026d2:	30 08       	mov	r8,0
800026d4:	ef 48 fe 84 	st.w	r7[-380],r8
800026d8:	ee fa fe 8c 	ld.w	r10,r7[-372]
800026dc:	ee fc fe 88 	ld.w	r12,r7[-376]
800026e0:	b9 3a       	mul	r10,r12
800026e2:	ee f8 fe 84 	ld.w	r8,r7[-380]
800026e6:	ee fb fe 90 	ld.w	r11,r7[-368]
800026ea:	b7 38       	mul	r8,r11
800026ec:	10 0a       	add	r10,r8
800026ee:	ee fc fe 90 	ld.w	r12,r7[-368]
800026f2:	ee fb fe 88 	ld.w	r11,r7[-376]
800026f6:	f8 0b 06 48 	mulu.d	r8,r12,r11
800026fa:	12 0a       	add	r10,r9
800026fc:	14 99       	mov	r9,r10
800026fe:	e0 6a 03 e7 	mov	r10,999
80002702:	30 0b       	mov	r11,0
80002704:	f0 0a 00 0a 	add	r10,r8,r10
80002708:	f2 0b 00 4b 	adc	r11,r9,r11
8000270c:	e0 68 03 e8 	mov	r8,1000
80002710:	30 09       	mov	r9,0
80002712:	f0 1f 00 fa 	mcall	80002af8 <dip204_init+0xac8>
80002716:	14 98       	mov	r8,r10
80002718:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000271a:	ef 48 ff b4 	st.w	r7[-76],r8
8000271e:	ee c8 01 14 	sub	r8,r7,276
80002722:	ef 48 ff b0 	st.w	r7[-80],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002726:	e1 b8 00 42 	mfsr	r8,0x108
8000272a:	10 99       	mov	r9,r8
8000272c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002730:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002732:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002736:	70 09       	ld.w	r9,r8[0x0]
80002738:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000273c:	10 09       	add	r9,r8
8000273e:	ee f8 ff b0 	ld.w	r8,r7[-80]
80002742:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002744:	ee f9 ff b0 	ld.w	r9,r7[-80]
80002748:	30 08       	mov	r8,0
8000274a:	f3 68 00 08 	st.b	r9[8],r8
8000274e:	ee c8 01 14 	sub	r8,r7,276
80002752:	ef 48 ff b8 	st.w	r7[-72],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002756:	e1 b8 00 42 	mfsr	r8,0x108
8000275a:	ef 48 ff bc 	st.w	r7[-68],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000275e:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002762:	f1 39 00 08 	ld.ub	r9,r8[8]
80002766:	30 28       	mov	r8,2
80002768:	f0 09 18 00 	cp.b	r9,r8
8000276c:	c0 31       	brne	80002772 <dip204_init+0x742>
    return false;
8000276e:	30 08       	mov	r8,0
80002770:	c4 38       	rjmp	800027f6 <dip204_init+0x7c6>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002772:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002776:	f1 39 00 08 	ld.ub	r9,r8[8]
8000277a:	30 18       	mov	r8,1
8000277c:	f0 09 18 00 	cp.b	r9,r8
80002780:	c0 31       	brne	80002786 <dip204_init+0x756>
    return true;
80002782:	30 18       	mov	r8,1
80002784:	c3 98       	rjmp	800027f6 <dip204_init+0x7c6>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002786:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000278a:	70 09       	ld.w	r9,r8[0x0]
8000278c:	ee f8 ff b8 	ld.w	r8,r7[-72]
80002790:	70 18       	ld.w	r8,r8[0x4]
80002792:	10 39       	cp.w	r9,r8
80002794:	e0 88 00 1a 	brls	800027c8 <dip204_init+0x798>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002798:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000279c:	70 08       	ld.w	r8,r8[0x0]
8000279e:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027a2:	10 39       	cp.w	r9,r8
800027a4:	c1 02       	brcc	800027c4 <dip204_init+0x794>
800027a6:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027aa:	70 18       	ld.w	r8,r8[0x4]
800027ac:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027b0:	10 39       	cp.w	r9,r8
800027b2:	e0 88 00 09 	brls	800027c4 <dip204_init+0x794>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800027b6:	ee f9 ff b8 	ld.w	r9,r7[-72]
800027ba:	30 18       	mov	r8,1
800027bc:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800027c0:	30 18       	mov	r8,1
800027c2:	c1 a8       	rjmp	800027f6 <dip204_init+0x7c6>
    }
    return false;
800027c4:	30 08       	mov	r8,0
800027c6:	c1 88       	rjmp	800027f6 <dip204_init+0x7c6>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
800027c8:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027cc:	70 08       	ld.w	r8,r8[0x0]
800027ce:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027d2:	10 39       	cp.w	r9,r8
800027d4:	c0 93       	brcs	800027e6 <dip204_init+0x7b6>
800027d6:	ee f8 ff b8 	ld.w	r8,r7[-72]
800027da:	70 18       	ld.w	r8,r8[0x4]
800027dc:	ee f9 ff bc 	ld.w	r9,r7[-68]
800027e0:	10 39       	cp.w	r9,r8
800027e2:	e0 88 00 09 	brls	800027f4 <dip204_init+0x7c4>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
800027e6:	ee f9 ff b8 	ld.w	r9,r7[-72]
800027ea:	30 18       	mov	r8,1
800027ec:	f3 68 00 08 	st.b	r9[8],r8
      return true;
800027f0:	30 18       	mov	r8,1
800027f2:	c0 28       	rjmp	800027f6 <dip204_init+0x7c6>
    }
    return false;
800027f4:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
800027f6:	58 08       	cp.w	r8,0
800027f8:	ca b0       	breq	8000274e <dip204_init+0x71e>
  // Send "Display Clear" Command
  dip204_write_byte(0x01);
800027fa:	30 1c       	mov	r12,1
800027fc:	f0 1f 00 c1 	mcall	80002b00 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(5);
80002800:	f0 1f 00 bd 	mcall	80002af4 <dip204_init+0xac4>
80002804:	18 98       	mov	r8,r12
80002806:	30 59       	mov	r9,5
80002808:	ef 49 ff c4 	st.w	r7[-60],r9
8000280c:	ef 48 ff c0 	st.w	r7[-64],r8
80002810:	ee f8 ff c4 	ld.w	r8,r7[-60]
80002814:	ef 48 ff cc 	st.w	r7[-52],r8
80002818:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000281c:	ef 48 ff c8 	st.w	r7[-56],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002820:	ee fa ff cc 	ld.w	r10,r7[-52]
80002824:	ef 4a fe a0 	st.w	r7[-352],r10
80002828:	30 09       	mov	r9,0
8000282a:	ef 49 fe 9c 	st.w	r7[-356],r9
8000282e:	ee f8 ff c8 	ld.w	r8,r7[-56]
80002832:	ef 48 fe 98 	st.w	r7[-360],r8
80002836:	30 0c       	mov	r12,0
80002838:	ef 4c fe 94 	st.w	r7[-364],r12
8000283c:	ee fa fe 9c 	ld.w	r10,r7[-356]
80002840:	ee fb fe 98 	ld.w	r11,r7[-360]
80002844:	b7 3a       	mul	r10,r11
80002846:	ee f8 fe 94 	ld.w	r8,r7[-364]
8000284a:	ee f9 fe a0 	ld.w	r9,r7[-352]
8000284e:	b3 38       	mul	r8,r9
80002850:	10 0a       	add	r10,r8
80002852:	ee fc fe a0 	ld.w	r12,r7[-352]
80002856:	ee fb fe 98 	ld.w	r11,r7[-360]
8000285a:	f8 0b 06 48 	mulu.d	r8,r12,r11
8000285e:	12 0a       	add	r10,r9
80002860:	14 99       	mov	r9,r10
80002862:	e0 6a 03 e7 	mov	r10,999
80002866:	30 0b       	mov	r11,0
80002868:	f0 0a 00 0a 	add	r10,r8,r10
8000286c:	f2 0b 00 4b 	adc	r11,r9,r11
80002870:	e0 68 03 e8 	mov	r8,1000
80002874:	30 09       	mov	r9,0
80002876:	f0 1f 00 a1 	mcall	80002af8 <dip204_init+0xac8>
8000287a:	14 98       	mov	r8,r10
8000287c:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000287e:	ef 48 ff d4 	st.w	r7[-44],r8
80002882:	ee c8 01 08 	sub	r8,r7,264
80002886:	ef 48 ff d0 	st.w	r7[-48],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000288a:	e1 b8 00 42 	mfsr	r8,0x108
8000288e:	10 99       	mov	r9,r8
80002890:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002894:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002896:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000289a:	70 09       	ld.w	r9,r8[0x0]
8000289c:	ee f8 ff d4 	ld.w	r8,r7[-44]
800028a0:	10 09       	add	r9,r8
800028a2:	ee f8 ff d0 	ld.w	r8,r7[-48]
800028a6:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
800028a8:	ee f9 ff d0 	ld.w	r9,r7[-48]
800028ac:	30 08       	mov	r8,0
800028ae:	f3 68 00 08 	st.b	r9[8],r8
800028b2:	ee c8 01 08 	sub	r8,r7,264
800028b6:	ef 48 ff d8 	st.w	r7[-40],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
800028ba:	e1 b8 00 42 	mfsr	r8,0x108
800028be:	ef 48 ff dc 	st.w	r7[-36],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
800028c2:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028c6:	f1 39 00 08 	ld.ub	r9,r8[8]
800028ca:	30 28       	mov	r8,2
800028cc:	f0 09 18 00 	cp.b	r9,r8
800028d0:	c0 31       	brne	800028d6 <dip204_init+0x8a6>
    return false;
800028d2:	30 08       	mov	r8,0
800028d4:	c4 38       	rjmp	8000295a <dip204_init+0x92a>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
800028d6:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028da:	f1 39 00 08 	ld.ub	r9,r8[8]
800028de:	30 18       	mov	r8,1
800028e0:	f0 09 18 00 	cp.b	r9,r8
800028e4:	c0 31       	brne	800028ea <dip204_init+0x8ba>
    return true;
800028e6:	30 18       	mov	r8,1
800028e8:	c3 98       	rjmp	8000295a <dip204_init+0x92a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
800028ea:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028ee:	70 09       	ld.w	r9,r8[0x0]
800028f0:	ee f8 ff d8 	ld.w	r8,r7[-40]
800028f4:	70 18       	ld.w	r8,r8[0x4]
800028f6:	10 39       	cp.w	r9,r8
800028f8:	e0 88 00 1a 	brls	8000292c <dip204_init+0x8fc>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
800028fc:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002900:	70 08       	ld.w	r8,r8[0x0]
80002902:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002906:	10 39       	cp.w	r9,r8
80002908:	c1 02       	brcc	80002928 <dip204_init+0x8f8>
8000290a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000290e:	70 18       	ld.w	r8,r8[0x4]
80002910:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002914:	10 39       	cp.w	r9,r8
80002916:	e0 88 00 09 	brls	80002928 <dip204_init+0x8f8>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000291a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000291e:	30 18       	mov	r8,1
80002920:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002924:	30 18       	mov	r8,1
80002926:	c1 a8       	rjmp	8000295a <dip204_init+0x92a>
    }
    return false;
80002928:	30 08       	mov	r8,0
8000292a:	c1 88       	rjmp	8000295a <dip204_init+0x92a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000292c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80002930:	70 08       	ld.w	r8,r8[0x0]
80002932:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002936:	10 39       	cp.w	r9,r8
80002938:	c0 93       	brcs	8000294a <dip204_init+0x91a>
8000293a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000293e:	70 18       	ld.w	r8,r8[0x4]
80002940:	ee f9 ff dc 	ld.w	r9,r7[-36]
80002944:	10 39       	cp.w	r9,r8
80002946:	e0 88 00 09 	brls	80002958 <dip204_init+0x928>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000294a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000294e:	30 18       	mov	r8,1
80002950:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002954:	30 18       	mov	r8,1
80002956:	c0 28       	rjmp	8000295a <dip204_init+0x92a>
    }
    return false;
80002958:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000295a:	58 08       	cp.w	r8,0
8000295c:	ca b0       	breq	800028b2 <dip204_init+0x882>
  // Send "Entry Mode Set Command: Increment Mode, Entire Shift off"
  dip204_write_byte(0x06);
8000295e:	30 6c       	mov	r12,6
80002960:	f0 1f 00 68 	mcall	80002b00 <dip204_init+0xad0>
  // Wait for command execution
  delay_ms(1);
80002964:	f0 1f 00 64 	mcall	80002af4 <dip204_init+0xac4>
80002968:	18 98       	mov	r8,r12
8000296a:	30 19       	mov	r9,1
8000296c:	ef 49 ff e4 	st.w	r7[-28],r9
80002970:	ef 48 ff e0 	st.w	r7[-32],r8
80002974:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002978:	ef 48 ff ec 	st.w	r7[-20],r8
8000297c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002980:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002984:	ee fa ff ec 	ld.w	r10,r7[-20]
80002988:	ef 4a fe b0 	st.w	r7[-336],r10
8000298c:	30 09       	mov	r9,0
8000298e:	ef 49 fe ac 	st.w	r7[-340],r9
80002992:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002996:	ef 48 fe a8 	st.w	r7[-344],r8
8000299a:	30 0c       	mov	r12,0
8000299c:	ef 4c fe a4 	st.w	r7[-348],r12
800029a0:	ee fa fe ac 	ld.w	r10,r7[-340]
800029a4:	ee fb fe a8 	ld.w	r11,r7[-344]
800029a8:	b7 3a       	mul	r10,r11
800029aa:	ee f8 fe a4 	ld.w	r8,r7[-348]
800029ae:	ee f9 fe b0 	ld.w	r9,r7[-336]
800029b2:	b3 38       	mul	r8,r9
800029b4:	10 0a       	add	r10,r8
800029b6:	ee fc fe b0 	ld.w	r12,r7[-336]
800029ba:	ee fb fe a8 	ld.w	r11,r7[-344]
800029be:	f8 0b 06 48 	mulu.d	r8,r12,r11
800029c2:	12 0a       	add	r10,r9
800029c4:	14 99       	mov	r9,r10
800029c6:	e0 6a 03 e7 	mov	r10,999
800029ca:	30 0b       	mov	r11,0
800029cc:	f0 0a 00 0a 	add	r10,r8,r10
800029d0:	f2 0b 00 4b 	adc	r11,r9,r11
800029d4:	e0 68 03 e8 	mov	r8,1000
800029d8:	30 09       	mov	r9,0
800029da:	f0 1f 00 48 	mcall	80002af8 <dip204_init+0xac8>
800029de:	14 98       	mov	r8,r10
800029e0:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
800029e2:	ef 48 ff f4 	st.w	r7[-12],r8
800029e6:	ee c8 00 fc 	sub	r8,r7,252
800029ea:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
800029ee:	e1 b8 00 42 	mfsr	r8,0x108
800029f2:	10 99       	mov	r9,r8
800029f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800029f8:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
800029fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800029fe:	70 09       	ld.w	r9,r8[0x0]
80002a00:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002a04:	10 09       	add	r9,r8
80002a06:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002a0a:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002a0c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002a10:	30 08       	mov	r8,0
80002a12:	f3 68 00 08 	st.b	r9[8],r8
80002a16:	ee c8 00 fc 	sub	r8,r7,252
80002a1a:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002a1e:	e1 b8 00 42 	mfsr	r8,0x108
80002a22:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002a26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a2a:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a2e:	30 28       	mov	r8,2
80002a30:	f0 09 18 00 	cp.b	r9,r8
80002a34:	c0 31       	brne	80002a3a <dip204_init+0xa0a>
    return false;
80002a36:	30 08       	mov	r8,0
80002a38:	c4 38       	rjmp	80002abe <dip204_init+0xa8e>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002a3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a3e:	f1 39 00 08 	ld.ub	r9,r8[8]
80002a42:	30 18       	mov	r8,1
80002a44:	f0 09 18 00 	cp.b	r9,r8
80002a48:	c0 31       	brne	80002a4e <dip204_init+0xa1e>
    return true;
80002a4a:	30 18       	mov	r8,1
80002a4c:	c3 98       	rjmp	80002abe <dip204_init+0xa8e>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002a4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a52:	70 09       	ld.w	r9,r8[0x0]
80002a54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a58:	70 18       	ld.w	r8,r8[0x4]
80002a5a:	10 39       	cp.w	r9,r8
80002a5c:	e0 88 00 1a 	brls	80002a90 <dip204_init+0xa60>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002a60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a64:	70 08       	ld.w	r8,r8[0x0]
80002a66:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a6a:	10 39       	cp.w	r9,r8
80002a6c:	c1 02       	brcc	80002a8c <dip204_init+0xa5c>
80002a6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a72:	70 18       	ld.w	r8,r8[0x4]
80002a74:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a78:	10 39       	cp.w	r9,r8
80002a7a:	e0 88 00 09 	brls	80002a8c <dip204_init+0xa5c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002a7e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002a82:	30 18       	mov	r8,1
80002a84:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002a88:	30 18       	mov	r8,1
80002a8a:	c1 a8       	rjmp	80002abe <dip204_init+0xa8e>
    }
    return false;
80002a8c:	30 08       	mov	r8,0
80002a8e:	c1 88       	rjmp	80002abe <dip204_init+0xa8e>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002a90:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002a94:	70 08       	ld.w	r8,r8[0x0]
80002a96:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002a9a:	10 39       	cp.w	r9,r8
80002a9c:	c0 93       	brcs	80002aae <dip204_init+0xa7e>
80002a9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002aa2:	70 18       	ld.w	r8,r8[0x4]
80002aa4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002aa8:	10 39       	cp.w	r9,r8
80002aaa:	e0 88 00 09 	brls	80002abc <dip204_init+0xa8c>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002aae:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002ab2:	30 18       	mov	r8,1
80002ab4:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ab8:	30 18       	mov	r8,1
80002aba:	c0 28       	rjmp	80002abe <dip204_init+0xa8e>
    }
    return false;
80002abc:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002abe:	58 08       	cp.w	r8,0
80002ac0:	ca b0       	breq	80002a16 <dip204_init+0x9e6>
  dip204_wait_busy();
80002ac2:	f0 1f 00 11 	mcall	80002b04 <dip204_init+0xad4>
  // unselect chip
  dip204_unselect();
80002ac6:	f0 1f 00 11 	mcall	80002b08 <dip204_init+0xad8>
}
80002aca:	29 5d       	sub	sp,-428
80002acc:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002ad0:	00 00       	add	r0,r0
80002ad2:	00 08       	add	r8,r0
80002ad4:	80 00       	ld.sh	r0,r0[0x0]
80002ad6:	4a 40       	lddpc	r0,80002b64 <dip204_set_cursor_position+0x24>
80002ad8:	80 00       	ld.sh	r0,r0[0x0]
80002ada:	34 dc       	mov	r12,77
80002adc:	00 00       	add	r0,r0
80002ade:	05 18       	ld.sh	r8,r2++
80002ae0:	00 00       	add	r0,r0
80002ae2:	05 1c       	ld.sh	r12,r2++
80002ae4:	80 00       	ld.sh	r0,r0[0x0]
80002ae6:	35 70       	mov	r0,87
80002ae8:	80 00       	ld.sh	r0,r0[0x0]
80002aea:	35 f8       	mov	r8,95
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	4d 66       	lddpc	r6,80002c44 <dip204_clear_display+0x7c>
80002af0:	80 00       	ld.sh	r0,r0[0x0]
80002af2:	4c fe       	lddpc	lr,80002c2c <dip204_clear_display+0x64>
80002af4:	80 00       	ld.sh	r0,r0[0x0]
80002af6:	20 18       	sub	r8,1
80002af8:	80 00       	ld.sh	r0,r0[0x0]
80002afa:	65 20       	ld.w	r0,r2[0x48]
80002afc:	80 00       	ld.sh	r0,r0[0x0]
80002afe:	2d b4       	sub	r4,-37
80002b00:	80 00       	ld.sh	r0,r0[0x0]
80002b02:	2d e4       	sub	r4,-34
80002b04:	80 00       	ld.sh	r0,r0[0x0]
80002b06:	2e c8       	sub	r8,-20
80002b08:	80 00       	ld.sh	r0,r0[0x0]
80002b0a:	2d cc       	sub	r12,-36

80002b0c <dip204_hide_cursor>:
  dip204_unselect();
}


void dip204_hide_cursor(void)
{
80002b0c:	eb cd 40 80 	pushm	r7,lr
80002b10:	1a 97       	mov	r7,sp
  /* select the LCD chip */
  dip204_select();
80002b12:	f0 1f 00 08 	mcall	80002b30 <dip204_hide_cursor+0x24>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002b16:	e0 6c 00 f8 	mov	r12,248
80002b1a:	f0 1f 00 07 	mcall	80002b34 <dip204_hide_cursor+0x28>
  /* Send "Display On Command: Display On, Cursor On, Blink On" */
  dip204_write_byte(0x0C);
80002b1e:	30 cc       	mov	r12,12
80002b20:	f0 1f 00 05 	mcall	80002b34 <dip204_hide_cursor+0x28>
  dip204_wait_busy();
80002b24:	f0 1f 00 05 	mcall	80002b38 <dip204_hide_cursor+0x2c>
  /* unselect chip */
  dip204_unselect();
80002b28:	f0 1f 00 05 	mcall	80002b3c <dip204_hide_cursor+0x30>
}
80002b2c:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b30:	80 00       	ld.sh	r0,r0[0x0]
80002b32:	2d b4       	sub	r4,-37
80002b34:	80 00       	ld.sh	r0,r0[0x0]
80002b36:	2d e4       	sub	r4,-34
80002b38:	80 00       	ld.sh	r0,r0[0x0]
80002b3a:	2e c8       	sub	r8,-20
80002b3c:	80 00       	ld.sh	r0,r0[0x0]
80002b3e:	2d cc       	sub	r12,-36

80002b40 <dip204_set_cursor_position>:
  dip204_set_cursor_position(column, line);
}


void dip204_set_cursor_position(unsigned char column, unsigned char line)
{
80002b40:	eb cd 40 80 	pushm	r7,lr
80002b44:	1a 97       	mov	r7,sp
80002b46:	20 3d       	sub	sp,12
80002b48:	18 99       	mov	r9,r12
80002b4a:	16 98       	mov	r8,r11
80002b4c:	ef 69 ff f8 	st.b	r7[-8],r9
80002b50:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char address = 0;
80002b54:	30 08       	mov	r8,0
80002b56:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002b5a:	f0 1f 00 18 	mcall	80002bb8 <dip204_set_cursor_position+0x78>
  if ((column <= 20) && (line <= 4))
80002b5e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002b62:	31 48       	mov	r8,20
80002b64:	f0 09 18 00 	cp.b	r9,r8
80002b68:	e0 8b 00 17 	brhi	80002b96 <dip204_set_cursor_position+0x56>
80002b6c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80002b70:	30 48       	mov	r8,4
80002b72:	f0 09 18 00 	cp.b	r9,r8
80002b76:	e0 8b 00 10 	brhi	80002b96 <dip204_set_cursor_position+0x56>
  {
    /* Calculate DDRAM address from line and row values */
    address = ( (line-1) * 32 ) + ( column-1 ) + 128;
80002b7a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002b7e:	20 18       	sub	r8,1
80002b80:	5c 58       	castu.b	r8
80002b82:	a5 78       	lsl	r8,0x5
80002b84:	5c 58       	castu.b	r8
80002b86:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80002b8a:	f2 08 00 08 	add	r8,r9,r8
80002b8e:	5c 58       	castu.b	r8
80002b90:	28 18       	sub	r8,-127
80002b92:	ef 68 ff ff 	st.b	r7[-1],r8
  }
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002b96:	e0 6c 00 f8 	mov	r12,248
80002b9a:	f0 1f 00 09 	mcall	80002bbc <dip204_set_cursor_position+0x7c>
  /* Send Address lower Nibble */
  dip204_write_byte(address);
80002b9e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002ba2:	10 9c       	mov	r12,r8
80002ba4:	f0 1f 00 06 	mcall	80002bbc <dip204_set_cursor_position+0x7c>
  dip204_wait_busy();
80002ba8:	f0 1f 00 06 	mcall	80002bc0 <dip204_set_cursor_position+0x80>
  dip204_unselect();
80002bac:	f0 1f 00 06 	mcall	80002bc4 <dip204_set_cursor_position+0x84>
}
80002bb0:	2f dd       	sub	sp,-12
80002bb2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002bb6:	00 00       	add	r0,r0
80002bb8:	80 00       	ld.sh	r0,r0[0x0]
80002bba:	2d b4       	sub	r4,-37
80002bbc:	80 00       	ld.sh	r0,r0[0x0]
80002bbe:	2d e4       	sub	r4,-34
80002bc0:	80 00       	ld.sh	r0,r0[0x0]
80002bc2:	2e c8       	sub	r8,-20
80002bc4:	80 00       	ld.sh	r0,r0[0x0]
80002bc6:	2d cc       	sub	r12,-36

80002bc8 <dip204_clear_display>:


void dip204_clear_display(void)
{
80002bc8:	eb cd 40 8f 	pushm	r0-r3,r7,lr
80002bcc:	1a 97       	mov	r7,sp
80002bce:	20 bd       	sub	sp,44
  dip204_select();
80002bd0:	f0 1f 00 57 	mcall	80002d2c <dip204_clear_display+0x164>
  /* Send Command Start Byte */
  dip204_write_byte(DIP204_WRITE_COMMAND);
80002bd4:	e0 6c 00 f8 	mov	r12,248
80002bd8:	f0 1f 00 56 	mcall	80002d30 <dip204_clear_display+0x168>
  /* Send Display Clear Command */
  dip204_write_byte(0x01);
80002bdc:	30 1c       	mov	r12,1
80002bde:	f0 1f 00 55 	mcall	80002d30 <dip204_clear_display+0x168>
  /* Wait for command execution */
  delay_ms(4);
80002be2:	f0 1f 00 55 	mcall	80002d34 <dip204_clear_display+0x16c>
80002be6:	18 98       	mov	r8,r12
80002be8:	30 49       	mov	r9,4
80002bea:	ef 49 ff e4 	st.w	r7[-28],r9
80002bee:	ef 48 ff e0 	st.w	r7[-32],r8
80002bf2:	ee f8 ff e4 	ld.w	r8,r7[-28]
80002bf6:	ef 48 ff ec 	st.w	r7[-20],r8
80002bfa:	ee f8 ff e0 	ld.w	r8,r7[-32]
80002bfe:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
80002c02:	ee f0 ff ec 	ld.w	r0,r7[-20]
80002c06:	30 01       	mov	r1,0
80002c08:	ee f2 ff e8 	ld.w	r2,r7[-24]
80002c0c:	30 03       	mov	r3,0
80002c0e:	e2 02 02 4a 	mul	r10,r1,r2
80002c12:	e6 00 02 48 	mul	r8,r3,r0
80002c16:	10 0a       	add	r10,r8
80002c18:	e0 02 06 48 	mulu.d	r8,r0,r2
80002c1c:	12 0a       	add	r10,r9
80002c1e:	14 99       	mov	r9,r10
80002c20:	e0 6a 03 e7 	mov	r10,999
80002c24:	30 0b       	mov	r11,0
80002c26:	f0 0a 00 0a 	add	r10,r8,r10
80002c2a:	f2 0b 00 4b 	adc	r11,r9,r11
80002c2e:	e0 68 03 e8 	mov	r8,1000
80002c32:	30 09       	mov	r9,0
80002c34:	f0 1f 00 41 	mcall	80002d38 <dip204_clear_display+0x170>
80002c38:	14 98       	mov	r8,r10
80002c3a:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
80002c3c:	ef 48 ff f4 	st.w	r7[-12],r8
80002c40:	ee c8 00 2c 	sub	r8,r7,44
80002c44:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80002c48:	e1 b8 00 42 	mfsr	r8,0x108
80002c4c:	10 99       	mov	r9,r8
80002c4e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c52:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80002c54:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c58:	70 09       	ld.w	r9,r8[0x0]
80002c5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002c5e:	10 09       	add	r9,r8
80002c60:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002c64:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80002c66:	ee f9 ff f0 	ld.w	r9,r7[-16]
80002c6a:	30 08       	mov	r8,0
80002c6c:	f3 68 00 08 	st.b	r9[8],r8
80002c70:	ee c8 00 2c 	sub	r8,r7,44
80002c74:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80002c78:	e1 b8 00 42 	mfsr	r8,0x108
80002c7c:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80002c80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c84:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c88:	30 28       	mov	r8,2
80002c8a:	f0 09 18 00 	cp.b	r9,r8
80002c8e:	c0 31       	brne	80002c94 <dip204_clear_display+0xcc>
    return false;
80002c90:	30 08       	mov	r8,0
80002c92:	c4 38       	rjmp	80002d18 <dip204_clear_display+0x150>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80002c94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002c98:	f1 39 00 08 	ld.ub	r9,r8[8]
80002c9c:	30 18       	mov	r8,1
80002c9e:	f0 09 18 00 	cp.b	r9,r8
80002ca2:	c0 31       	brne	80002ca8 <dip204_clear_display+0xe0>
    return true;
80002ca4:	30 18       	mov	r8,1
80002ca6:	c3 98       	rjmp	80002d18 <dip204_clear_display+0x150>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80002ca8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cac:	70 09       	ld.w	r9,r8[0x0]
80002cae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cb2:	70 18       	ld.w	r8,r8[0x4]
80002cb4:	10 39       	cp.w	r9,r8
80002cb6:	e0 88 00 1a 	brls	80002cea <dip204_clear_display+0x122>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80002cba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cbe:	70 08       	ld.w	r8,r8[0x0]
80002cc0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002cc4:	10 39       	cp.w	r9,r8
80002cc6:	c1 02       	brcc	80002ce6 <dip204_clear_display+0x11e>
80002cc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002ccc:	70 18       	ld.w	r8,r8[0x4]
80002cce:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002cd2:	10 39       	cp.w	r9,r8
80002cd4:	e0 88 00 09 	brls	80002ce6 <dip204_clear_display+0x11e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002cd8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002cdc:	30 18       	mov	r8,1
80002cde:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002ce2:	30 18       	mov	r8,1
80002ce4:	c1 a8       	rjmp	80002d18 <dip204_clear_display+0x150>
    }
    return false;
80002ce6:	30 08       	mov	r8,0
80002ce8:	c1 88       	rjmp	80002d18 <dip204_clear_display+0x150>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80002cea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cee:	70 08       	ld.w	r8,r8[0x0]
80002cf0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002cf4:	10 39       	cp.w	r9,r8
80002cf6:	c0 93       	brcs	80002d08 <dip204_clear_display+0x140>
80002cf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cfc:	70 18       	ld.w	r8,r8[0x4]
80002cfe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002d02:	10 39       	cp.w	r9,r8
80002d04:	e0 88 00 09 	brls	80002d16 <dip204_clear_display+0x14e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80002d08:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d0c:	30 18       	mov	r8,1
80002d0e:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80002d12:	30 18       	mov	r8,1
80002d14:	c0 28       	rjmp	80002d18 <dip204_clear_display+0x150>
    }
    return false;
80002d16:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
80002d18:	58 08       	cp.w	r8,0
80002d1a:	ca b0       	breq	80002c70 <dip204_clear_display+0xa8>
  dip204_wait_busy();
80002d1c:	f0 1f 00 08 	mcall	80002d3c <dip204_clear_display+0x174>
  dip204_unselect();
80002d20:	f0 1f 00 08 	mcall	80002d40 <dip204_clear_display+0x178>
}
80002d24:	2f 5d       	sub	sp,-44
80002d26:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
80002d2a:	00 00       	add	r0,r0
80002d2c:	80 00       	ld.sh	r0,r0[0x0]
80002d2e:	2d b4       	sub	r4,-37
80002d30:	80 00       	ld.sh	r0,r0[0x0]
80002d32:	2d e4       	sub	r4,-34
80002d34:	80 00       	ld.sh	r0,r0[0x0]
80002d36:	20 18       	sub	r8,1
80002d38:	80 00       	ld.sh	r0,r0[0x0]
80002d3a:	65 20       	ld.w	r0,r2[0x48]
80002d3c:	80 00       	ld.sh	r0,r0[0x0]
80002d3e:	2e c8       	sub	r8,-20
80002d40:	80 00       	ld.sh	r0,r0[0x0]
80002d42:	2d cc       	sub	r12,-36

80002d44 <dip204_write_string>:


void dip204_write_string(const char *string)
{
80002d44:	eb cd 40 80 	pushm	r7,lr
80002d48:	1a 97       	mov	r7,sp
80002d4a:	20 2d       	sub	sp,8
80002d4c:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned char i=0;
80002d50:	30 08       	mov	r8,0
80002d52:	ef 68 ff ff 	st.b	r7[-1],r8

  dip204_select();
80002d56:	f0 1f 00 14 	mcall	80002da4 <dip204_write_string+0x60>
  /* for all chars in string */
  while(string[i]!=0)
80002d5a:	c1 68       	rjmp	80002d86 <dip204_write_string+0x42>
  {
    /* Send Write Data Start Byte */
    dip204_write_byte(DIP204_WRITE_DATA);
80002d5c:	e0 6c 00 fa 	mov	r12,250
80002d60:	f0 1f 00 12 	mcall	80002da8 <dip204_write_string+0x64>
    /* Send byte */
    dip204_write_byte(string[i]);
80002d64:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002d68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d6c:	f2 08 00 08 	add	r8,r9,r8
80002d70:	11 88       	ld.ub	r8,r8[0x0]
80002d72:	10 9c       	mov	r12,r8
80002d74:	f0 1f 00 0d 	mcall	80002da8 <dip204_write_string+0x64>
    /* go to next char */
    i++;
80002d78:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002d7c:	2f f8       	sub	r8,-1
80002d7e:	ef 68 ff ff 	st.b	r7[-1],r8
    dip204_wait_busy();
80002d82:	f0 1f 00 0b 	mcall	80002dac <dip204_write_string+0x68>
{
  unsigned char i=0;

  dip204_select();
  /* for all chars in string */
  while(string[i]!=0)
80002d86:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002d8a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002d8e:	f2 08 00 08 	add	r8,r9,r8
80002d92:	11 88       	ld.ub	r8,r8[0x0]
80002d94:	58 08       	cp.w	r8,0
80002d96:	ce 31       	brne	80002d5c <dip204_write_string+0x18>
    dip204_write_byte(string[i]);
    /* go to next char */
    i++;
    dip204_wait_busy();
  }
  dip204_unselect();
80002d98:	f0 1f 00 06 	mcall	80002db0 <dip204_write_string+0x6c>
}
80002d9c:	2f ed       	sub	sp,-8
80002d9e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002da2:	00 00       	add	r0,r0
80002da4:	80 00       	ld.sh	r0,r0[0x0]
80002da6:	2d b4       	sub	r4,-37
80002da8:	80 00       	ld.sh	r0,r0[0x0]
80002daa:	2d e4       	sub	r4,-34
80002dac:	80 00       	ld.sh	r0,r0[0x0]
80002dae:	2e c8       	sub	r8,-20
80002db0:	80 00       	ld.sh	r0,r0[0x0]
80002db2:	2d cc       	sub	r12,-36

80002db4 <dip204_select>:

/*! \brief function to select the LCD
 *
 */
static void dip204_select(void)
{
80002db4:	eb cd 40 80 	pushm	r7,lr
80002db8:	1a 97       	mov	r7,sp
  spi_selectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002dba:	30 2b       	mov	r11,2
80002dbc:	fe 7c 28 00 	mov	r12,-55296
80002dc0:	f0 1f 00 02 	mcall	80002dc8 <dip204_select+0x14>
}
80002dc4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002dc8:	80 00       	ld.sh	r0,r0[0x0]
80002dca:	3a bc       	mov	r12,-85

80002dcc <dip204_unselect>:

/*! \brief function to unselect the LCD
 *
 */
static void dip204_unselect(void)
{
80002dcc:	eb cd 40 80 	pushm	r7,lr
80002dd0:	1a 97       	mov	r7,sp
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_unselectChip(DIP204_SPI, DIP204_SPI_NPCS);
80002dd2:	30 2b       	mov	r11,2
80002dd4:	fe 7c 28 00 	mov	r12,-55296
80002dd8:	f0 1f 00 02 	mcall	80002de0 <dip204_unselect+0x14>
  Assert( SPI_OK==spi_status );
}
80002ddc:	e3 cd 80 80 	ldm	sp++,r7,pc
80002de0:	80 00       	ld.sh	r0,r0[0x0]
80002de2:	3b 54       	mov	r4,-75

80002de4 <dip204_write_byte>:
 *
 *  \param  byte  Input. byte to write to the LCD (D7 .. D0)
 *
 */
static void dip204_write_byte(unsigned char byte)
{
80002de4:	eb cd 40 80 	pushm	r7,lr
80002de8:	1a 97       	mov	r7,sp
80002dea:	20 3d       	sub	sp,12
80002dec:	18 98       	mov	r8,r12
80002dee:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned char reverse;

  switch (byte)
80002df2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002df6:	f0 c8 00 f8 	sub	r8,r8,248
80002dfa:	58 68       	cp.w	r8,6
80002dfc:	e0 8b 00 10 	brhi	80002e1c <dip204_write_byte+0x38>
80002e00:	30 19       	mov	r9,1
80002e02:	f2 08 09 48 	lsl	r8,r9,r8
80002e06:	e2 18 00 55 	andl	r8,0x55,COH
80002e0a:	c0 90       	breq	80002e1c <dip204_write_byte+0x38>
    {
      /* send D7 to D0 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, byte);
80002e0c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e10:	10 9b       	mov	r11,r8
80002e12:	fe 7c 28 00 	mov	r12,-55296
80002e16:	f0 1f 00 15 	mcall	80002e68 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
80002e1a:	c2 48       	rjmp	80002e62 <dip204_write_byte+0x7e>
    }
    /* LSB first for all other data */
    default:
    {
      /* reverse byte */
      reverse = bit_reverse8(byte);
80002e1c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002e20:	ef 48 ff fc 	st.w	r7[-4],r8
80002e24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e28:	5c 98       	brev	r8
80002e2a:	ef 48 ff fc 	st.w	r7[-4],r8
80002e2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002e32:	b9 88       	lsr	r8,0x18
80002e34:	ef 68 ff fb 	st.b	r7[-5],r8
      /* send D0 to D3 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, (reverse & 0xF0));
80002e38:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e3c:	e2 18 00 f0 	andl	r8,0xf0,COH
80002e40:	10 9b       	mov	r11,r8
80002e42:	fe 7c 28 00 	mov	r12,-55296
80002e46:	f0 1f 00 09 	mcall	80002e68 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      /* send D4 to D7 */
#ifdef _ASSERT_ENABLE_
      spi_status =
#endif
      spi_write(DIP204_SPI, ((reverse << 4) & 0xF0));
80002e4a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80002e4e:	a5 68       	lsl	r8,0x4
80002e50:	5c 88       	casts.h	r8
80002e52:	5c 78       	castu.h	r8
80002e54:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80002e58:	10 9b       	mov	r11,r8
80002e5a:	fe 7c 28 00 	mov	r12,-55296
80002e5e:	f0 1f 00 03 	mcall	80002e68 <dip204_write_byte+0x84>
      Assert( SPI_OK==spi_status );
      break;
    }
  }
}
80002e62:	2f dd       	sub	sp,-12
80002e64:	e3 cd 80 80 	ldm	sp++,r7,pc
80002e68:	80 00       	ld.sh	r0,r0[0x0]
80002e6a:	3d 5e       	mov	lr,-43

80002e6c <dip204_read_byte>:
 *
 *  \param  byte  Input. byte read from the LCD (D7 .. D0)
 *
 */
static void dip204_read_byte(unsigned char *byte)
{
80002e6c:	eb cd 40 80 	pushm	r7,lr
80002e70:	1a 97       	mov	r7,sp
80002e72:	20 3d       	sub	sp,12
80002e74:	ef 4c ff f4 	st.w	r7[-12],r12
  unsigned short reverse = 0x00;
80002e78:	30 08       	mov	r8,0
80002e7a:	ef 58 ff fa 	st.h	r7[-6],r8

  /* dummy write */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_write(DIP204_SPI, 0x00);
80002e7e:	30 0b       	mov	r11,0
80002e80:	fe 7c 28 00 	mov	r12,-55296
80002e84:	f0 1f 00 0f 	mcall	80002ec0 <dip204_read_byte+0x54>
  Assert( SPI_OK==spi_status );
  /* read RSR register */
#ifdef _ASSERT_ENABLE_
  spi_status =
#endif
  spi_read(DIP204_SPI, &reverse);
80002e88:	ee c8 00 06 	sub	r8,r7,6
80002e8c:	10 9b       	mov	r11,r8
80002e8e:	fe 7c 28 00 	mov	r12,-55296
80002e92:	f0 1f 00 0d 	mcall	80002ec4 <dip204_read_byte+0x58>
  Assert( SPI_OK==spi_status );
  /* Revert received byte (issued LSB first by the LCD) */
  *byte = bit_reverse8(reverse);
80002e96:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80002e9a:	5c 58       	castu.b	r8
80002e9c:	ef 48 ff fc 	st.w	r7[-4],r8
80002ea0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002ea4:	5c 98       	brev	r8
80002ea6:	ef 48 ff fc 	st.w	r7[-4],r8
80002eaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002eae:	b9 88       	lsr	r8,0x18
80002eb0:	5c 58       	castu.b	r8
80002eb2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80002eb6:	b2 88       	st.b	r9[0x0],r8
}
80002eb8:	2f dd       	sub	sp,-12
80002eba:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ebe:	00 00       	add	r0,r0
80002ec0:	80 00       	ld.sh	r0,r0[0x0]
80002ec2:	3d 5e       	mov	lr,-43
80002ec4:	80 00       	ld.sh	r0,r0[0x0]
80002ec6:	3d b6       	mov	r6,-37

80002ec8 <dip204_wait_busy>:

/*! \brief function to wait for LCD becomes not busy
 *
 */
static void dip204_wait_busy(void)
{
80002ec8:	eb cd 40 80 	pushm	r7,lr
80002ecc:	1a 97       	mov	r7,sp
80002ece:	20 1d       	sub	sp,4
  unsigned char status = 0x00;
80002ed0:	30 08       	mov	r8,0
80002ed2:	ef 68 ff ff 	st.b	r7[-1],r8

  /* send read command to LCD */
  dip204_write_byte(DIP204_READ_COMMAND);
80002ed6:	e0 6c 00 fc 	mov	r12,252
80002eda:	f0 1f 00 09 	mcall	80002efc <dip204_wait_busy+0x34>
  /* read next byte */
  do {
  dip204_read_byte(&status);
80002ede:	ee c8 00 01 	sub	r8,r7,1
80002ee2:	10 9c       	mov	r12,r8
80002ee4:	f0 1f 00 07 	mcall	80002f00 <dip204_wait_busy+0x38>
  /* keep D7 to know status */
  }while (status & 0x80);
80002ee8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002eec:	10 99       	mov	r9,r8
80002eee:	30 08       	mov	r8,0
80002ef0:	f0 09 18 00 	cp.b	r9,r8
80002ef4:	cf 55       	brlt	80002ede <dip204_wait_busy+0x16>
}
80002ef6:	2f fd       	sub	sp,-4
80002ef8:	e3 cd 80 80 	ldm	sp++,r7,pc
80002efc:	80 00       	ld.sh	r0,r0[0x0]
80002efe:	2d e4       	sub	r4,-34
80002f00:	80 00       	ld.sh	r0,r0[0x0]
80002f02:	2e 6c       	sub	r12,-26

80002f04 <adc_configure>:
 * If not called, ADC channels will have side effects
 *
 * \param *adc Base address of the ADC
 */
void adc_configure(volatile avr32_adc_t *adc)
{
80002f04:	eb cd 40 80 	pushm	r7,lr
80002f08:	1a 97       	mov	r7,sp
80002f0a:	20 1d       	sub	sp,4
80002f0c:	ef 4c ff fc 	st.w	r7[-4],r12
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
80002f10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f14:	70 18       	ld.w	r8,r8[0x4]
80002f16:	10 99       	mov	r9,r8
80002f18:	ea 19 0f 00 	orh	r9,0xf00
80002f1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f20:	91 19       	st.w	r8[0x4],r9

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
80002f22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f26:	70 18       	ld.w	r8,r8[0x4]
80002f28:	10 99       	mov	r9,r8
80002f2a:	ea 19 00 1f 	orh	r9,0x1f
80002f2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f32:	91 19       	st.w	r8[0x4],r9
}
80002f34:	2f fd       	sub	sp,-4
80002f36:	e3 cd 80 80 	ldm	sp++,r7,pc

80002f3a <adc_start>:

/** \brief Start analog to digital conversion
 * \param *adc Base address of the ADC
 */
void adc_start(volatile avr32_adc_t *adc)
{
80002f3a:	eb cd 40 80 	pushm	r7,lr
80002f3e:	1a 97       	mov	r7,sp
80002f40:	20 1d       	sub	sp,4
80002f42:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
80002f46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f4a:	30 29       	mov	r9,2
80002f4c:	91 09       	st.w	r8[0x0],r9
}
80002f4e:	2f fd       	sub	sp,-4
80002f50:	e3 cd 80 80 	ldm	sp++,r7,pc

80002f54 <adc_enable>:
 *
 * \param *adc Base address of the ADC
 * \param  channel   channel to enable (0 to 7)
 */
void adc_enable(volatile avr32_adc_t *adc, uint16_t channel)
{
80002f54:	eb cd 40 80 	pushm	r7,lr
80002f58:	1a 97       	mov	r7,sp
80002f5a:	20 2d       	sub	sp,8
80002f5c:	ef 4c ff fc 	st.w	r7[-4],r12
80002f60:	16 98       	mov	r8,r11
80002f62:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
80002f66:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80002f6a:	30 19       	mov	r9,1
80002f6c:	f2 08 09 48 	lsl	r8,r9,r8
80002f70:	10 99       	mov	r9,r8
80002f72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f76:	91 49       	st.w	r8[0x10],r9
}
80002f78:	2f ed       	sub	sp,-8
80002f7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80002f7e <adc_check_eoc>:
 * \param  channel   channel to check (0 to 7)
 * \return bool      true if conversion not running
 *                   false if conversion running
 */
bool adc_check_eoc(volatile avr32_adc_t *adc, uint16_t channel)
{
80002f7e:	eb cd 40 80 	pushm	r7,lr
80002f82:	1a 97       	mov	r7,sp
80002f84:	20 2d       	sub	sp,8
80002f86:	ef 4c ff fc 	st.w	r7[-4],r12
80002f8a:	16 98       	mov	r8,r11
80002f8c:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
80002f90:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f94:	70 79       	ld.w	r9,r8[0x1c]
80002f96:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80002f9a:	30 1a       	mov	r10,1
80002f9c:	f4 08 09 48 	lsl	r8,r10,r8
80002fa0:	f3 e8 00 08 	and	r8,r9,r8
80002fa4:	5f 18       	srne	r8
80002fa6:	5c 58       	castu.b	r8
}
80002fa8:	10 9c       	mov	r12,r8
80002faa:	2f ed       	sub	sp,-8
80002fac:	e3 cd 80 80 	ldm	sp++,r7,pc

80002fb0 <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
80002fb0:	eb cd 40 80 	pushm	r7,lr
80002fb4:	1a 97       	mov	r7,sp
80002fb6:	20 2d       	sub	sp,8
80002fb8:	ef 4c ff fc 	st.w	r7[-4],r12
80002fbc:	16 98       	mov	r8,r11
80002fbe:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
80002fc2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80002fc6:	10 9b       	mov	r11,r8
80002fc8:	ee fc ff fc 	ld.w	r12,r7[-4]
80002fcc:	f0 1f 00 0b 	mcall	80002ff8 <adc_get_value+0x48>
80002fd0:	18 98       	mov	r8,r12
80002fd2:	ec 18 00 01 	eorl	r8,0x1
80002fd6:	5c 58       	castu.b	r8
80002fd8:	cf 51       	brne	80002fc2 <adc_get_value+0x12>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
80002fda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002fde:	f0 c9 ff d0 	sub	r9,r8,-48
80002fe2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80002fe6:	a3 68       	lsl	r8,0x2
80002fe8:	f2 08 00 08 	add	r8,r9,r8
80002fec:	70 08       	ld.w	r8,r8[0x0]
}
80002fee:	10 9c       	mov	r12,r8
80002ff0:	2f ed       	sub	sp,-8
80002ff2:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ff6:	00 00       	add	r0,r0
80002ff8:	80 00       	ld.sh	r0,r0[0x0]
80002ffa:	2f 7e       	sub	lr,-9

80002ffc <flashc_set_wait_state>:
	return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
80002ffc:	eb cd 40 80 	pushm	r7,lr
80003000:	1a 97       	mov	r7,sp
80003002:	20 2d       	sub	sp,8
80003004:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80003008:	fe 68 14 00 	mov	r8,-125952
8000300c:	70 08       	ld.w	r8,r8[0x0]
8000300e:	30 09       	mov	r9,0
80003010:	ef 49 ff fc 	st.w	r7[-4],r9
80003014:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcr.FCR.fws = wait_state;
80003018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000301c:	5c 58       	castu.b	r8
8000301e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003022:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000302a:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
8000302e:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
80003032:	fe 68 14 00 	mov	r8,-125952
80003036:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000303a:	91 09       	st.w	r8[0x0],r9
}
8000303c:	2f ed       	sub	sp,-8
8000303e:	e3 cd 80 80 	ldm	sp++,r7,pc

80003042 <pm_set_osc0_mode>:
 *
 * \param pm Base address of the Power Manager (i.e. &AVR32_PM).
 * \param mode Oscillator 0 mode (i.e. AVR32_PM_OSCCTRL0_MODE_x).
 */
static void pm_set_osc0_mode(volatile avr32_pm_t *pm, unsigned int mode)
{
80003042:	eb cd 40 80 	pushm	r7,lr
80003046:	1a 97       	mov	r7,sp
80003048:	20 3d       	sub	sp,12
8000304a:	ef 4c ff f8 	st.w	r7[-8],r12
8000304e:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80003052:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003056:	70 a8       	ld.w	r8,r8[0x28]
80003058:	30 09       	mov	r9,0
8000305a:	ef 49 ff fc 	st.w	r7[-4],r9
8000305e:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.mode = mode;
80003062:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003066:	5c 58       	castu.b	r8
80003068:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000306c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003070:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003074:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
80003078:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000307c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003080:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003084:	91 a9       	st.w	r8[0x28],r9
}
80003086:	2f dd       	sub	sp,-12
80003088:	e3 cd 80 80 	ldm	sp++,r7,pc

8000308c <pm_enable_osc0_crystal>:
  pm_set_osc0_mode(pm, AVR32_PM_OSCCTRL0_MODE_EXT_CLOCK);
}


void pm_enable_osc0_crystal(volatile avr32_pm_t *pm, unsigned int fosc0)
{
8000308c:	eb cd 40 80 	pushm	r7,lr
80003090:	1a 97       	mov	r7,sp
80003092:	20 2d       	sub	sp,8
80003094:	ef 4c ff fc 	st.w	r7[-4],r12
80003098:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_set_osc0_mode(pm, (fosc0 <  900000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G0 :
8000309c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030a0:	ec 58 bb 9f 	cp.w	r8,899999
800030a4:	e0 88 00 1a 	brls	800030d8 <pm_enable_osc0_crystal+0x4c>
800030a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030ac:	e0 69 c6 bf 	mov	r9,50879
800030b0:	ea 19 00 2d 	orh	r9,0x2d
800030b4:	12 38       	cp.w	r8,r9
800030b6:	e0 88 00 0f 	brls	800030d4 <pm_enable_osc0_crystal+0x48>
800030ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030be:	e0 69 11 ff 	mov	r9,4607
800030c2:	ea 19 00 7a 	orh	r9,0x7a
800030c6:	12 38       	cp.w	r8,r9
800030c8:	e0 8b 00 04 	brhi	800030d0 <pm_enable_osc0_crystal+0x44>
800030cc:	30 68       	mov	r8,6
800030ce:	c0 28       	rjmp	800030d2 <pm_enable_osc0_crystal+0x46>
800030d0:	30 78       	mov	r8,7
800030d2:	c0 28       	rjmp	800030d6 <pm_enable_osc0_crystal+0x4a>
800030d4:	30 58       	mov	r8,5
800030d6:	c0 28       	rjmp	800030da <pm_enable_osc0_crystal+0x4e>
800030d8:	30 48       	mov	r8,4
800030da:	10 9b       	mov	r11,r8
800030dc:	ee fc ff fc 	ld.w	r12,r7[-4]
800030e0:	f0 1f 00 03 	mcall	800030ec <pm_enable_osc0_crystal+0x60>
                       (fosc0 < 3000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G1 :
                       (fosc0 < 8000000) ? AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G2 :
                                           AVR32_PM_OSCCTRL0_MODE_CRYSTAL_G3);
}
800030e4:	2f ed       	sub	sp,-8
800030e6:	e3 cd 80 80 	ldm	sp++,r7,pc
800030ea:	00 00       	add	r0,r0
800030ec:	80 00       	ld.sh	r0,r0[0x0]
800030ee:	30 42       	mov	r2,4

800030f0 <pm_enable_clk0>:


void pm_enable_clk0(volatile avr32_pm_t *pm, unsigned int startup)
{
800030f0:	eb cd 40 80 	pushm	r7,lr
800030f4:	1a 97       	mov	r7,sp
800030f6:	20 2d       	sub	sp,8
800030f8:	ef 4c ff fc 	st.w	r7[-4],r12
800030fc:	ef 4b ff f8 	st.w	r7[-8],r11
  pm_enable_clk0_no_wait(pm, startup);
80003100:	ee fb ff f8 	ld.w	r11,r7[-8]
80003104:	ee fc ff fc 	ld.w	r12,r7[-4]
80003108:	f0 1f 00 05 	mcall	8000311c <pm_enable_clk0+0x2c>
  pm_wait_for_clk0_ready(pm);
8000310c:	ee fc ff fc 	ld.w	r12,r7[-4]
80003110:	f0 1f 00 04 	mcall	80003120 <pm_enable_clk0+0x30>
}
80003114:	2f ed       	sub	sp,-8
80003116:	e3 cd 80 80 	ldm	sp++,r7,pc
8000311a:	00 00       	add	r0,r0
8000311c:	80 00       	ld.sh	r0,r0[0x0]
8000311e:	31 24       	mov	r4,18
80003120:	80 00       	ld.sh	r0,r0[0x0]
80003122:	31 7e       	mov	lr,23

80003124 <pm_enable_clk0_no_wait>:
  pm->mcctrl &= ~AVR32_PM_MCCTRL_OSC0EN_MASK;
}


void pm_enable_clk0_no_wait(volatile avr32_pm_t *pm, unsigned int startup)
{
80003124:	eb cd 40 80 	pushm	r7,lr
80003128:	1a 97       	mov	r7,sp
8000312a:	20 3d       	sub	sp,12
8000312c:	ef 4c ff f8 	st.w	r7[-8],r12
80003130:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read register
  u_avr32_pm_oscctrl0_t u_avr32_pm_oscctrl0 = {pm->oscctrl0};
80003134:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003138:	70 a8       	ld.w	r8,r8[0x28]
8000313a:	30 09       	mov	r9,0
8000313c:	ef 49 ff fc 	st.w	r7[-4],r9
80003140:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_oscctrl0.OSCCTRL0.startup = startup;
80003144:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003148:	5c 58       	castu.b	r8
8000314a:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000314e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003152:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003156:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
8000315a:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->oscctrl0 = u_avr32_pm_oscctrl0.oscctrl0;
8000315e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003162:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003166:	91 a9       	st.w	r8[0x28],r9

  pm->mcctrl |= AVR32_PM_MCCTRL_OSC0EN_MASK;
80003168:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000316c:	70 08       	ld.w	r8,r8[0x0]
8000316e:	10 99       	mov	r9,r8
80003170:	a3 a9       	sbr	r9,0x2
80003172:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003176:	91 09       	st.w	r8[0x0],r9
}
80003178:	2f dd       	sub	sp,-12
8000317a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000317e <pm_wait_for_clk0_ready>:


void pm_wait_for_clk0_ready(volatile avr32_pm_t *pm)
{
8000317e:	eb cd 40 80 	pushm	r7,lr
80003182:	1a 97       	mov	r7,sp
80003184:	20 1d       	sub	sp,4
80003186:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_OSC0RDY_MASK));
8000318a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000318e:	71 58       	ld.w	r8,r8[0x54]
80003190:	e2 18 00 80 	andl	r8,0x80,COH
80003194:	cf b0       	breq	8000318a <pm_wait_for_clk0_ready+0xc>
}
80003196:	2f fd       	sub	sp,-4
80003198:	e3 cd 80 80 	ldm	sp++,r7,pc

8000319c <pm_cksel>:
              unsigned int pbasel,
              unsigned int pbbdiv,
              unsigned int pbbsel,
              unsigned int hsbdiv,
              unsigned int hsbsel)
{
8000319c:	eb cd 40 80 	pushm	r7,lr
800031a0:	1a 97       	mov	r7,sp
800031a2:	20 6d       	sub	sp,24
800031a4:	ee ce ff f8 	sub	lr,r7,-8
800031a8:	ef 4c ff f8 	st.w	r7[-8],r12
800031ac:	ef 4b ff f4 	st.w	r7[-12],r11
800031b0:	ef 4a ff f0 	st.w	r7[-16],r10
800031b4:	ef 49 ff ec 	st.w	r7[-20],r9
800031b8:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_cksel_t u_avr32_pm_cksel = {0};
800031bc:	30 08       	mov	r8,0
800031be:	ef 48 ff fc 	st.w	r7[-4],r8

  u_avr32_pm_cksel.CKSEL.cpusel = hsbsel;
800031c2:	7c 18       	ld.w	r8,lr[0x4]
800031c4:	5c 58       	castu.b	r8
800031c6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800031ca:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800031ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031d2:	f1 d9 d0 03 	bfins	r8,r9,0x0,0x3
800031d6:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.cpudiv = hsbdiv;
800031da:	7c 08       	ld.w	r8,lr[0x0]
800031dc:	5c 58       	castu.b	r8
800031de:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800031e2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800031e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031ea:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800031ee:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.hsbsel = hsbsel;
800031f2:	7c 18       	ld.w	r8,lr[0x4]
800031f4:	5c 58       	castu.b	r8
800031f6:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800031fa:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800031fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003202:	f1 d9 d1 03 	bfins	r8,r9,0x8,0x3
80003206:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.hsbdiv = hsbdiv;
8000320a:	7c 08       	ld.w	r8,lr[0x0]
8000320c:	5c 58       	castu.b	r8
8000320e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003212:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003216:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000321a:	f1 d9 d1 e1 	bfins	r8,r9,0xf,0x1
8000321e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbasel = pbasel;
80003222:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003226:	5c 58       	castu.b	r8
80003228:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8000322c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003230:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003234:	f1 d9 d2 03 	bfins	r8,r9,0x10,0x3
80003238:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbadiv = pbadiv;
8000323c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003240:	5c 58       	castu.b	r8
80003242:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003246:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000324a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000324e:	f1 d9 d2 e1 	bfins	r8,r9,0x17,0x1
80003252:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbbsel = pbbsel;
80003256:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000325a:	5c 58       	castu.b	r8
8000325c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003260:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003264:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003268:	f1 d9 d3 03 	bfins	r8,r9,0x18,0x3
8000326c:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_cksel.CKSEL.pbbdiv = pbbdiv;
80003270:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003274:	5c 58       	castu.b	r8
80003276:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000327a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000327e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003282:	f1 d9 d3 e1 	bfins	r8,r9,0x1f,0x1
80003286:	ef 48 ff fc 	st.w	r7[-4],r8

  pm->cksel = u_avr32_pm_cksel.cksel;
8000328a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000328e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003292:	91 19       	st.w	r8[0x4],r9

  // Wait for ckrdy bit and then clear it
  while (!(pm->poscsr & AVR32_PM_POSCSR_CKRDY_MASK));
80003294:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003298:	71 58       	ld.w	r8,r8[0x54]
8000329a:	e2 18 00 20 	andl	r8,0x20,COH
8000329e:	cf b0       	breq	80003294 <pm_cksel+0xf8>
}
800032a0:	2f ad       	sub	sp,-24
800032a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800032a6 <pm_pll_setup>:
                  unsigned int pll,
                  unsigned int mul,
                  unsigned int div,
                  unsigned int osc,
                  unsigned int lockcount)
{
800032a6:	eb cd 40 80 	pushm	r7,lr
800032aa:	1a 97       	mov	r7,sp
800032ac:	20 6d       	sub	sp,24
800032ae:	ee ce ff f8 	sub	lr,r7,-8
800032b2:	ef 4c ff f8 	st.w	r7[-8],r12
800032b6:	ef 4b ff f4 	st.w	r7[-12],r11
800032ba:	ef 4a ff f0 	st.w	r7[-16],r10
800032be:	ef 49 ff ec 	st.w	r7[-20],r9
800032c2:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_pll_t u_avr32_pm_pll = {0};
800032c6:	30 08       	mov	r8,0
800032c8:	ef 48 ff fc 	st.w	r7[-4],r8

  u_avr32_pm_pll.PLL.pllosc   = osc;
800032cc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800032d0:	5c 58       	castu.b	r8
800032d2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800032d6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800032da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032de:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
800032e2:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.plldiv   = div;
800032e6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800032ea:	5c 58       	castu.b	r8
800032ec:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800032f0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800032f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800032f8:	f1 d9 d1 04 	bfins	r8,r9,0x8,0x4
800032fc:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.pllmul   = mul;
80003300:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003304:	5c 58       	castu.b	r8
80003306:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000330a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000330e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003312:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80003316:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.pllcount = lockcount;
8000331a:	7c 08       	ld.w	r8,lr[0x0]
8000331c:	5c 58       	castu.b	r8
8000331e:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80003322:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003326:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000332a:	f1 d9 d3 06 	bfins	r8,r9,0x18,0x6
8000332e:	ef 48 ff fc 	st.w	r7[-4],r8

  pm->pll[pll] = u_avr32_pm_pll.pll;
80003332:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003336:	ee fa ff fc 	ld.w	r10,r7[-4]
8000333a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000333e:	2f 89       	sub	r9,-8
80003340:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80003344:	2f ad       	sub	sp,-24
80003346:	e3 cd 80 80 	ldm	sp++,r7,pc

8000334a <pm_pll_set_option>:
void pm_pll_set_option(volatile avr32_pm_t *pm,
                       unsigned int pll,
                       unsigned int pll_freq,
                       unsigned int pll_div2,
                       unsigned int pll_wbwdisable)
{
8000334a:	eb cd 40 80 	pushm	r7,lr
8000334e:	1a 97       	mov	r7,sp
80003350:	20 6d       	sub	sp,24
80003352:	ef 4c ff f8 	st.w	r7[-8],r12
80003356:	ef 4b ff f4 	st.w	r7[-12],r11
8000335a:	ef 4a ff f0 	st.w	r7[-16],r10
8000335e:	ef 49 ff ec 	st.w	r7[-20],r9
80003362:	ef 48 ff e8 	st.w	r7[-24],r8
  u_avr32_pm_pll_t u_avr32_pm_pll = {pm->pll[pll]};
80003366:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000336a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000336e:	2f 89       	sub	r9,-8
80003370:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80003374:	30 09       	mov	r9,0
80003376:	ef 49 ff fc 	st.w	r7[-4],r9
8000337a:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_pm_pll.PLL.pllopt = pll_freq | (pll_div2 << 1) | (pll_wbwdisable << 2);
8000337e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003382:	5c 58       	castu.b	r8
80003384:	a1 78       	lsl	r8,0x1
80003386:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000338a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000338e:	5c 58       	castu.b	r8
80003390:	f3 e8 10 08 	or	r8,r9,r8
80003394:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003398:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000339c:	5c 58       	castu.b	r8
8000339e:	a3 68       	lsl	r8,0x2
800033a0:	5c 58       	castu.b	r8
800033a2:	f3 e8 10 08 	or	r8,r9,r8
800033a6:	5c 58       	castu.b	r8
800033a8:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800033ac:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800033b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033b4:	f1 d9 d0 43 	bfins	r8,r9,0x2,0x3
800033b8:	ef 48 ff fc 	st.w	r7[-4],r8
  pm->pll[pll] = u_avr32_pm_pll.pll;
800033bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800033c0:	ee fa ff fc 	ld.w	r10,r7[-4]
800033c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800033c8:	2f 89       	sub	r9,-8
800033ca:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
800033ce:	2f ad       	sub	sp,-24
800033d0:	e3 cd 80 80 	ldm	sp++,r7,pc

800033d4 <pm_pll_enable>:
}


void pm_pll_enable(volatile avr32_pm_t *pm,
                  unsigned int pll)
{
800033d4:	eb cd 40 80 	pushm	r7,lr
800033d8:	1a 97       	mov	r7,sp
800033da:	20 2d       	sub	sp,8
800033dc:	ef 4c ff fc 	st.w	r7[-4],r12
800033e0:	ef 4b ff f8 	st.w	r7[-8],r11
  pm->pll[pll] |= AVR32_PM_PLLEN_MASK;
800033e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800033e8:	ee fa ff f8 	ld.w	r10,r7[-8]
800033ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033f0:	2f 8a       	sub	r10,-8
800033f2:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800033f6:	10 9a       	mov	r10,r8
800033f8:	a1 aa       	sbr	r10,0x0
800033fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033fe:	2f 89       	sub	r9,-8
80003400:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
80003404:	2f ed       	sub	sp,-8
80003406:	e3 cd 80 80 	ldm	sp++,r7,pc

8000340a <pm_wait_for_pll0_locked>:
  pm->pll[pll] &= ~AVR32_PM_PLLEN_MASK;
}


void pm_wait_for_pll0_locked(volatile avr32_pm_t *pm)
{
8000340a:	eb cd 40 80 	pushm	r7,lr
8000340e:	1a 97       	mov	r7,sp
80003410:	20 1d       	sub	sp,4
80003412:	ef 4c ff fc 	st.w	r7[-4],r12
  while (!(pm->poscsr & AVR32_PM_POSCSR_LOCK0_MASK));
80003416:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000341a:	71 58       	ld.w	r8,r8[0x54]
8000341c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003420:	cf b0       	breq	80003416 <pm_wait_for_pll0_locked+0xc>
}
80003422:	2f fd       	sub	sp,-4
80003424:	e3 cd 80 80 	ldm	sp++,r7,pc

80003428 <pm_switch_to_clock>:
  return u_avr32_pm_mcctrl.MCCTRL.mcsel;
}


void pm_switch_to_clock(volatile avr32_pm_t *pm, unsigned long clock)
{
80003428:	eb cd 40 80 	pushm	r7,lr
8000342c:	1a 97       	mov	r7,sp
8000342e:	20 3d       	sub	sp,12
80003430:	ef 4c ff f8 	st.w	r7[-8],r12
80003434:	ef 4b ff f4 	st.w	r7[-12],r11
  // Read
  u_avr32_pm_mcctrl_t u_avr32_pm_mcctrl = {pm->mcctrl};
80003438:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000343c:	70 08       	ld.w	r8,r8[0x0]
8000343e:	30 09       	mov	r9,0
80003440:	ef 49 ff fc 	st.w	r7[-4],r9
80003444:	ef 48 ff fc 	st.w	r7[-4],r8
  // Modify
  u_avr32_pm_mcctrl.MCCTRL.mcsel = clock;
80003448:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000344c:	5c 58       	castu.b	r8
8000344e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80003452:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003456:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000345a:	f1 d9 d0 02 	bfins	r8,r9,0x0,0x2
8000345e:	ef 48 ff fc 	st.w	r7[-4],r8
  // Write back
  pm->mcctrl = u_avr32_pm_mcctrl.mcctrl;
80003462:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003466:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000346a:	91 09       	st.w	r8[0x0],r9
}
8000346c:	2f dd       	sub	sp,-12
8000346e:	e3 cd 80 80 	ldm	sp++,r7,pc
80003472:	d7 03       	nop

80003474 <pm_switch_to_osc0>:


void pm_switch_to_osc0(volatile avr32_pm_t *pm, unsigned int fosc0, unsigned int startup)
{
80003474:	eb cd 40 80 	pushm	r7,lr
80003478:	1a 97       	mov	r7,sp
8000347a:	20 3d       	sub	sp,12
8000347c:	ef 4c ff fc 	st.w	r7[-4],r12
80003480:	ef 4b ff f8 	st.w	r7[-8],r11
80003484:	ef 4a ff f4 	st.w	r7[-12],r10
  pm_enable_osc0_crystal(pm, fosc0);            // Enable the Osc0 in crystal mode
80003488:	ee fb ff f8 	ld.w	r11,r7[-8]
8000348c:	ee fc ff fc 	ld.w	r12,r7[-4]
80003490:	f0 1f 00 08 	mcall	800034b0 <pm_switch_to_osc0+0x3c>
  pm_enable_clk0(pm, startup);                  // Crystal startup time - This parameter is critical and depends on the characteristics of the crystal
80003494:	ee fb ff f4 	ld.w	r11,r7[-12]
80003498:	ee fc ff fc 	ld.w	r12,r7[-4]
8000349c:	f0 1f 00 06 	mcall	800034b4 <pm_switch_to_osc0+0x40>
  pm_switch_to_clock(pm, AVR32_PM_MCSEL_OSC0);  // Then switch main clock to Osc0
800034a0:	30 1b       	mov	r11,1
800034a2:	ee fc ff fc 	ld.w	r12,r7[-4]
800034a6:	f0 1f 00 05 	mcall	800034b8 <pm_switch_to_osc0+0x44>
}
800034aa:	2f dd       	sub	sp,-12
800034ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800034b0:	80 00       	ld.sh	r0,r0[0x0]
800034b2:	30 8c       	mov	r12,8
800034b4:	80 00       	ld.sh	r0,r0[0x0]
800034b6:	30 f0       	mov	r0,15
800034b8:	80 00       	ld.sh	r0,r0[0x0]
800034ba:	34 28       	mov	r8,66

800034bc <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800034bc:	eb cd 40 80 	pushm	r7,lr
800034c0:	1a 97       	mov	r7,sp
800034c2:	20 1d       	sub	sp,4
800034c4:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800034c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034cc:	e6 18 00 01 	andh	r8,0x1,COH
800034d0:	5f 08       	sreq	r8
800034d2:	5c 58       	castu.b	r8
}
800034d4:	10 9c       	mov	r12,r8
800034d6:	2f fd       	sub	sp,-4
800034d8:	e3 cd 80 80 	ldm	sp++,r7,pc

800034dc <pwm_init>:
#include "compiler.h"
#include "pwm.h"


int pwm_init(const pwm_opt_t *opt)
{
800034dc:	eb cd 40 80 	pushm	r7,lr
800034e0:	1a 97       	mov	r7,sp
800034e2:	20 3d       	sub	sp,12
800034e4:	ef 4c ff f4 	st.w	r7[-12],r12
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
800034e8:	fe 78 30 00 	mov	r8,-53248
800034ec:	ef 48 ff f8 	st.w	r7[-8],r8
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
800034f0:	e1 b8 00 00 	mfsr	r8,0x0
800034f4:	10 9c       	mov	r12,r8
800034f6:	f0 1f 00 1e 	mcall	8000356c <pwm_init+0x90>
800034fa:	18 98       	mov	r8,r12
800034fc:	ef 68 ff ff 	st.b	r7[-1],r8

  if (opt == 0 ) // Null pointer.
80003500:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003504:	58 08       	cp.w	r8,0
80003506:	c0 31       	brne	8000350c <pwm_init+0x30>
    return PWM_INVALID_INPUT;
80003508:	30 18       	mov	r8,1
8000350a:	c2 c8       	rjmp	80003562 <pwm_init+0x86>

  // Disable interrupt.
  if (global_interrupt_enabled) Disable_global_interrupt();
8000350c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003510:	30 08       	mov	r8,0
80003512:	f0 09 18 00 	cp.b	r9,r8
80003516:	c0 20       	breq	8000351a <pwm_init+0x3e>
80003518:	d3 03       	ssrf	0x10
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
8000351a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000351e:	37 f9       	mov	r9,127
80003520:	91 59       	st.w	r8[0x14],r9
  pwm->isr;
80003522:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003526:	70 78       	ld.w	r8,r8[0x1c]
  if (global_interrupt_enabled) Enable_global_interrupt();
80003528:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000352c:	30 08       	mov	r8,0
8000352e:	f0 09 18 00 	cp.b	r9,r8
80003532:	c0 20       	breq	80003536 <pwm_init+0x5a>
80003534:	d5 03       	csrf	0x10

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80003536:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000353a:	70 19       	ld.w	r9,r8[0x4]
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
8000353c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003540:	70 08       	ld.w	r8,r8[0x0]
80003542:	b1 68       	lsl	r8,0x10
80003544:	10 49       	or	r9,r8
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
80003546:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000354a:	70 38       	ld.w	r8,r8[0xc]
8000354c:	a9 68       	lsl	r8,0x8
8000354e:	10 49       	or	r9,r8
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
80003550:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003554:	70 28       	ld.w	r8,r8[0x8]
80003556:	b9 68       	lsl	r8,0x18
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
    ((opt->diva)<<AVR32_PWM_DIVA_OFFSET) |
80003558:	10 49       	or	r9,r8
  pwm->idr = ((1 << (AVR32_PWM_LINES_MSB + 1)) - 1) << AVR32_PWM_IDR_CHID0_OFFSET;
  pwm->isr;
  if (global_interrupt_enabled) Enable_global_interrupt();

  // Set PWM mode register.
  pwm->mr =
8000355a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000355e:	91 09       	st.w	r8[0x0],r9
    ((opt->divb)<<AVR32_PWM_DIVB_OFFSET) |
    ((opt->prea)<<AVR32_PWM_PREA_OFFSET) |
    ((opt->preb)<<AVR32_PWM_PREB_OFFSET)
    ;

  return PWM_SUCCESS;
80003560:	30 08       	mov	r8,0
}
80003562:	10 9c       	mov	r12,r8
80003564:	2f dd       	sub	sp,-12
80003566:	e3 cd 80 80 	ldm	sp++,r7,pc
8000356a:	00 00       	add	r0,r0
8000356c:	80 00       	ld.sh	r0,r0[0x0]
8000356e:	34 bc       	mov	r12,75

80003570 <pwm_channel_init>:


int pwm_channel_init( unsigned int channel_id, const avr32_pwm_channel_t *pwm_channel)
{
80003570:	eb cd 40 80 	pushm	r7,lr
80003574:	1a 97       	mov	r7,sp
80003576:	20 3d       	sub	sp,12
80003578:	ef 4c ff f8 	st.w	r7[-8],r12
8000357c:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_pwm_t *pwm = &AVR32_PWM;
80003580:	fe 78 30 00 	mov	r8,-53248
80003584:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pwm_channel == 0) // Null pointer.
80003588:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000358c:	58 08       	cp.w	r8,0
8000358e:	c0 31       	brne	80003594 <pwm_channel_init+0x24>
    return PWM_INVALID_ARGUMENT;
80003590:	30 18       	mov	r8,1
80003592:	c2 f8       	rjmp	800035f0 <pwm_channel_init+0x80>
  if (channel_id > AVR32_PWM_LINES_MSB) // Control input values.
80003594:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003598:	58 68       	cp.w	r8,6
8000359a:	e0 88 00 04 	brls	800035a2 <pwm_channel_init+0x32>
    return PWM_INVALID_INPUT;
8000359e:	30 18       	mov	r8,1
800035a0:	c2 88       	rjmp	800035f0 <pwm_channel_init+0x80>

  pwm->channel[channel_id].cmr= pwm_channel->cmr;   // Channel mode.
800035a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800035aa:	72 09       	ld.w	r9,r9[0x0]
800035ac:	ee fa ff fc 	ld.w	r10,r7[-4]
800035b0:	2f 08       	sub	r8,-16
800035b2:	a5 78       	lsl	r8,0x5
800035b4:	f4 08 00 08 	add	r8,r10,r8
800035b8:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cdty= pwm_channel->cdty; // Duty cycle, should be < CPRD.
800035ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800035c2:	72 19       	ld.w	r9,r9[0x4]
800035c4:	ee fa ff fc 	ld.w	r10,r7[-4]
800035c8:	a5 78       	lsl	r8,0x5
800035ca:	f4 08 00 08 	add	r8,r10,r8
800035ce:	f0 c8 fd fc 	sub	r8,r8,-516
800035d2:	91 09       	st.w	r8[0x0],r9
  pwm->channel[channel_id].cprd= pwm_channel->cprd; // Channel period.
800035d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800035d8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800035dc:	72 29       	ld.w	r9,r9[0x8]
800035de:	ee fa ff fc 	ld.w	r10,r7[-4]
800035e2:	a5 78       	lsl	r8,0x5
800035e4:	f4 08 00 08 	add	r8,r10,r8
800035e8:	f0 c8 fd f8 	sub	r8,r8,-520
800035ec:	91 09       	st.w	r8[0x0],r9

  return PWM_SUCCESS;
800035ee:	30 08       	mov	r8,0
}
800035f0:	10 9c       	mov	r12,r8
800035f2:	2f dd       	sub	sp,-12
800035f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800035f8 <pwm_start_channels>:


int pwm_start_channels(unsigned long channels_bitmask)
{
800035f8:	eb cd 40 80 	pushm	r7,lr
800035fc:	1a 97       	mov	r7,sp
800035fe:	20 1d       	sub	sp,4
80003600:	ef 4c ff fc 	st.w	r7[-4],r12
  if (channels_bitmask & ~((1 << (AVR32_PWM_LINES_MSB + 1)) - 1))
80003604:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003608:	e0 18 ff 80 	andl	r8,0xff80
8000360c:	c0 30       	breq	80003612 <pwm_start_channels+0x1a>
    return PWM_INVALID_INPUT;
8000360e:	30 18       	mov	r8,1
80003610:	c0 78       	rjmp	8000361e <pwm_start_channels+0x26>

  AVR32_PWM.ena = channels_bitmask; // Enable channels.
80003612:	fe 78 30 00 	mov	r8,-53248
80003616:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000361a:	91 19       	st.w	r8[0x4],r9

  return PWM_SUCCESS;
8000361c:	30 08       	mov	r8,0
}
8000361e:	10 9c       	mov	r12,r8
80003620:	2f fd       	sub	sp,-4
80003622:	e3 cd 80 80 	ldm	sp++,r7,pc
80003626:	d7 03       	nop

80003628 <pm_configure_clocks>:

#define PM_MAX_MUL                ((1 << AVR32_PM_PLL0_PLLMUL_SIZE) - 1)


int pm_configure_clocks(pm_freq_param_t *param)
{
80003628:	eb cd 40 80 	pushm	r7,lr
8000362c:	1a 97       	mov	r7,sp
8000362e:	20 bd       	sub	sp,44
80003630:	ef 4c ff d4 	st.w	r7[-44],r12
  //  12    8   1  108     1     54    27
  //  12    9   1  120     1     60    15
  //  12    9   1  120     1     60    30
  //  12   10   1  132     1     66    16.5
  //
  unsigned long in_cpu_f  = param->cpu_f;
80003634:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003638:	70 08       	ld.w	r8,r8[0x0]
8000363a:	ef 48 ff d8 	st.w	r7[-40],r8
  unsigned long in_osc0_f = param->osc0_f;
8000363e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003642:	70 28       	ld.w	r8,r8[0x8]
80003644:	ef 48 ff dc 	st.w	r7[-36],r8
  unsigned long mul, div, div2_en = 0, div2_cpu = 0, div2_pba = 0;
80003648:	30 08       	mov	r8,0
8000364a:	ef 48 ff e8 	st.w	r7[-24],r8
8000364e:	30 08       	mov	r8,0
80003650:	ef 48 ff ec 	st.w	r7[-20],r8
80003654:	30 08       	mov	r8,0
80003656:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned long pll_freq, rest;
  bool b_div2_pba, b_div2_cpu;

  // Switch to external Oscillator 0
  pm_switch_to_osc0(&AVR32_PM, in_osc0_f, param->osc0_startup);
8000365a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000365e:	70 38       	ld.w	r8,r8[0xc]
80003660:	10 9a       	mov	r10,r8
80003662:	ee fb ff dc 	ld.w	r11,r7[-36]
80003666:	fe 7c 0c 00 	mov	r12,-62464
8000366a:	f0 1f 00 af 	mcall	80003924 <pm_configure_clocks+0x2fc>

  // Start with CPU freq config
  if (in_cpu_f == in_osc0_f)
8000366e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003672:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003676:	10 39       	cp.w	r9,r8
80003678:	c0 d1       	brne	80003692 <pm_configure_clocks+0x6a>
  {
    param->cpu_f = in_osc0_f;
8000367a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000367e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80003682:	91 09       	st.w	r8[0x0],r9
    param->pba_f = in_osc0_f;
80003684:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003688:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000368c:	91 19       	st.w	r8[0x4],r9
    return PM_FREQ_STATUS_OK;
8000368e:	30 08       	mov	r8,0
80003690:	c4 69       	rjmp	8000391c <pm_configure_clocks+0x2f4>
  else if (in_cpu_f < in_osc0_f)
  {
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;
80003692:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003696:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000369a:	f0 09 0d 08 	divu	r8,r8,r9
8000369e:	12 98       	mov	r8,r9
800036a0:	ef 48 ff f8 	st.w	r7[-8],r8

  for (div = 1; div < 32; div++)
800036a4:	30 18       	mov	r8,1
800036a6:	ef 48 ff e4 	st.w	r7[-28],r8
800036aa:	c1 38       	rjmp	800036d0 <pm_configure_clocks+0xa8>
  {
    if ((div * rest) % in_osc0_f == 0)
800036ac:	ee f9 ff e4 	ld.w	r9,r7[-28]
800036b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800036b4:	f2 08 02 48 	mul	r8,r9,r8
800036b8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800036bc:	f0 09 0d 08 	divu	r8,r8,r9
800036c0:	12 98       	mov	r8,r9
800036c2:	58 08       	cp.w	r8,0
800036c4:	c0 c0       	breq	800036dc <pm_configure_clocks+0xb4>
    // TBD
  }

  rest = in_cpu_f % in_osc0_f;

  for (div = 1; div < 32; div++)
800036c6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800036ca:	2f f8       	sub	r8,-1
800036cc:	ef 48 ff e4 	st.w	r7[-28],r8
800036d0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800036d4:	59 f8       	cp.w	r8,31
800036d6:	fe 98 ff eb 	brls	800036ac <pm_configure_clocks+0x84>
800036da:	c0 28       	rjmp	800036de <pm_configure_clocks+0xb6>
  {
    if ((div * rest) % in_osc0_f == 0)
      break;
800036dc:	d7 03       	nop
  }
  if (div == 32)
800036de:	ee f8 ff e4 	ld.w	r8,r7[-28]
800036e2:	e0 48 00 20 	cp.w	r8,32
800036e6:	c0 31       	brne	800036ec <pm_configure_clocks+0xc4>
    return PM_FREQ_STATUS_FAIL;
800036e8:	3f f8       	mov	r8,-1
800036ea:	c1 99       	rjmp	8000391c <pm_configure_clocks+0x2f4>

  mul = (in_cpu_f * div) / in_osc0_f;
800036ec:	ee f9 ff d8 	ld.w	r9,r7[-40]
800036f0:	ee f8 ff e4 	ld.w	r8,r7[-28]
800036f4:	f2 08 02 48 	mul	r8,r9,r8
800036f8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800036fc:	f0 09 0d 08 	divu	r8,r8,r9
80003700:	ef 48 ff e0 	st.w	r7[-32],r8

  if (mul > PM_MAX_MUL)
80003704:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003708:	58 f8       	cp.w	r8,15
8000370a:	e0 88 00 0f 	brls	80003728 <pm_configure_clocks+0x100>
    return PM_FREQ_STATUS_FAIL;
8000370e:	3f f8       	mov	r8,-1
80003710:	c0 69       	rjmp	8000391c <pm_configure_clocks+0x2f4>

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
  {
    div /= 2;
80003712:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003716:	a1 98       	lsr	r8,0x1
80003718:	ef 48 ff e4 	st.w	r7[-28],r8
    div2_cpu++;
8000371c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003720:	2f f8       	sub	r8,-1
80003722:	ef 48 ff ec 	st.w	r7[-20],r8
80003726:	c0 28       	rjmp	8000372a <pm_configure_clocks+0x102>

  if (mul > PM_MAX_MUL)
    return PM_FREQ_STATUS_FAIL;

  // export 2power from PLL div to div2_cpu
  while (!(div % 2))
80003728:	d7 03       	nop
8000372a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000372e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003732:	cf 00       	breq	80003712 <pm_configure_clocks+0xea>

  // Here we know the mul and div parameter of the PLL config.
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
80003734:	c1 18       	rjmp	80003756 <pm_configure_clocks+0x12e>
  {
    if (2 * mul > PM_MAX_MUL)
80003736:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000373a:	a1 78       	lsl	r8,0x1
8000373c:	58 f8       	cp.w	r8,15
8000373e:	e0 8b 00 1f 	brhi	8000377c <pm_configure_clocks+0x154>
      break;
    mul *= 2;
80003742:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003746:	a1 78       	lsl	r8,0x1
80003748:	ef 48 ff e0 	st.w	r7[-32],r8
    div2_cpu++;
8000374c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003750:	2f f8       	sub	r8,-1
80003752:	ef 48 ff ec 	st.w	r7[-20],r8

  // Here we know the mul and div parameter of the PLL config.
  // . Check out if the PLL has a valid in_cpu_f.
  // . Try to have for the PLL frequency (VCO output) the highest possible value
  //   to reduce jitter.
  while (in_osc0_f * 2 * mul / div < AVR32_PM_PLL_VCO_RANGE0_MAX_FREQ)
80003756:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000375a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000375e:	f2 08 02 48 	mul	r8,r9,r8
80003762:	a1 78       	lsl	r8,0x1
80003764:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003768:	f0 09 0d 08 	divu	r8,r8,r9
8000376c:	e0 69 1b ff 	mov	r9,7167
80003770:	ea 19 0e 4e 	orh	r9,0xe4e
80003774:	12 38       	cp.w	r8,r9
80003776:	fe 98 ff e0 	brls	80003736 <pm_configure_clocks+0x10e>
8000377a:	c0 28       	rjmp	8000377e <pm_configure_clocks+0x156>
  {
    if (2 * mul > PM_MAX_MUL)
      break;
8000377c:	d7 03       	nop
    mul *= 2;
    div2_cpu++;
  }

  if (div2_cpu != 0)
8000377e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80003782:	58 08       	cp.w	r8,0
80003784:	c0 90       	breq	80003796 <pm_configure_clocks+0x16e>
  {
    div2_cpu--;
80003786:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000378a:	20 18       	sub	r8,1
8000378c:	ef 48 ff ec 	st.w	r7[-20],r8
    div2_en = 1;
80003790:	30 18       	mov	r8,1
80003792:	ef 48 ff e8 	st.w	r7[-24],r8
  }

  pll_freq = in_osc0_f * mul / (div * (1 << div2_en));
80003796:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000379a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000379e:	f2 08 02 48 	mul	r8,r9,r8
800037a2:	ee f9 ff e8 	ld.w	r9,r7[-24]
800037a6:	ee fa ff e4 	ld.w	r10,r7[-28]
800037aa:	f4 09 09 49 	lsl	r9,r10,r9
800037ae:	f0 09 0d 08 	divu	r8,r8,r9
800037b2:	ef 48 ff f4 	st.w	r7[-12],r8

  // Update real CPU Frequency
  param->cpu_f = pll_freq / (1 << div2_cpu);
800037b6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800037ba:	ee f9 ff f4 	ld.w	r9,r7[-12]
800037be:	f2 08 0a 49 	lsr	r9,r9,r8
800037c2:	ee f8 ff d4 	ld.w	r8,r7[-44]
800037c6:	91 09       	st.w	r8[0x0],r9
  mul--;
800037c8:	ee f8 ff e0 	ld.w	r8,r7[-32]
800037cc:	20 18       	sub	r8,1
800037ce:	ef 48 ff e0 	st.w	r7[-32],r8

  pm_pll_setup(&AVR32_PM
800037d2:	31 08       	mov	r8,16
800037d4:	1a d8       	st.w	--sp,r8
800037d6:	30 08       	mov	r8,0
800037d8:	ee f9 ff e4 	ld.w	r9,r7[-28]
800037dc:	ee fa ff e0 	ld.w	r10,r7[-32]
800037e0:	30 0b       	mov	r11,0
800037e2:	fe 7c 0c 00 	mov	r12,-62464
800037e6:	f0 1f 00 51 	mcall	80003928 <pm_configure_clocks+0x300>
800037ea:	2f fd       	sub	sp,-4
  , div // div
  , 0   // osc
  , 16  // lockcount
  );

  pm_pll_set_option(&AVR32_PM
800037ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800037f0:	e0 69 67 ff 	mov	r9,26623
800037f4:	ea 19 09 89 	orh	r9,0x989
800037f8:	12 38       	cp.w	r8,r9
800037fa:	5f 8a       	srls	r10
800037fc:	30 08       	mov	r8,0
800037fe:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003802:	30 0b       	mov	r11,0
80003804:	fe 7c 0c 00 	mov	r12,-62464
80003808:	f0 1f 00 49 	mcall	8000392c <pm_configure_clocks+0x304>
  , (pll_freq < AVR32_PM_PLL_VCO_RANGE0_MIN_FREQ) ? 1 : 0 // pll_freq
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
8000380c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003810:	ef 48 ff f8 	st.w	r7[-8],r8
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
80003814:	c1 68       	rjmp	80003840 <pm_configure_clocks+0x218>
         rest != param->pba_f)
  {
    div2_pba++;
80003816:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000381a:	2f f8       	sub	r8,-1
8000381c:	ef 48 ff f0 	st.w	r7[-16],r8
    rest = pll_freq / (1 << div2_pba);
80003820:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003824:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003828:	f2 08 0a 48 	lsr	r8,r9,r8
8000382c:	ef 48 ff f8 	st.w	r7[-8],r8
    if (rest < param->pba_f)
80003830:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003834:	70 19       	ld.w	r9,r8[0x4]
80003836:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000383a:	10 39       	cp.w	r9,r8
8000383c:	e0 8b 00 13 	brhi	80003862 <pm_configure_clocks+0x23a>
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
80003840:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003844:	e0 69 14 80 	mov	r9,5248
80003848:	ea 19 03 ef 	orh	r9,0x3ef
8000384c:	12 38       	cp.w	r8,r9
8000384e:	fe 9b ff e4 	brhi	80003816 <pm_configure_clocks+0x1ee>
         rest != param->pba_f)
80003852:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003856:	70 19       	ld.w	r9,r8[0x4]
  , div2_en // pll_div2
  , 0 // pll_wbwdisable
  );

  rest = pll_freq;
  while (rest > AVR32_PM_PBA_MAX_FREQ ||
80003858:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000385c:	10 39       	cp.w	r9,r8
8000385e:	cd c1       	brne	80003816 <pm_configure_clocks+0x1ee>
80003860:	c0 28       	rjmp	80003864 <pm_configure_clocks+0x23c>
         rest != param->pba_f)
  {
    div2_pba++;
    rest = pll_freq / (1 << div2_pba);
    if (rest < param->pba_f)
      break;
80003862:	d7 03       	nop
  }

  // Update real PBA Frequency
  param->pba_f = pll_freq / (1 << div2_pba);
80003864:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003868:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000386c:	f2 08 0a 49 	lsr	r9,r9,r8
80003870:	ee f8 ff d4 	ld.w	r8,r7[-44]
80003874:	91 19       	st.w	r8[0x4],r9

  // Enable PLL0
  pm_pll_enable(&AVR32_PM, 0);
80003876:	30 0b       	mov	r11,0
80003878:	fe 7c 0c 00 	mov	r12,-62464
8000387c:	f0 1f 00 2d 	mcall	80003930 <pm_configure_clocks+0x308>

  // Wait for PLL0 locked
  pm_wait_for_pll0_locked(&AVR32_PM);
80003880:	fe 7c 0c 00 	mov	r12,-62464
80003884:	f0 1f 00 2c 	mcall	80003934 <pm_configure_clocks+0x30c>

  if (div2_cpu)
80003888:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000388c:	58 08       	cp.w	r8,0
8000388e:	c0 a0       	breq	800038a2 <pm_configure_clocks+0x27a>
  {
    b_div2_cpu = true;
80003890:	30 18       	mov	r8,1
80003892:	ef 68 ff ff 	st.b	r7[-1],r8
    div2_cpu--;
80003896:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000389a:	20 18       	sub	r8,1
8000389c:	ef 48 ff ec 	st.w	r7[-20],r8
800038a0:	c0 48       	rjmp	800038a8 <pm_configure_clocks+0x280>
  }
  else
    b_div2_cpu = false;
800038a2:	30 08       	mov	r8,0
800038a4:	ef 68 ff ff 	st.b	r7[-1],r8

  if (div2_pba)
800038a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800038ac:	58 08       	cp.w	r8,0
800038ae:	c0 a0       	breq	800038c2 <pm_configure_clocks+0x29a>
  {
    b_div2_pba = true;
800038b0:	30 18       	mov	r8,1
800038b2:	ef 68 ff fe 	st.b	r7[-2],r8
    div2_pba--;
800038b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800038ba:	20 18       	sub	r8,1
800038bc:	ef 48 ff f0 	st.w	r7[-16],r8
800038c0:	c0 48       	rjmp	800038c8 <pm_configure_clocks+0x2a0>
  }
  else
    b_div2_pba = false;
800038c2:	30 08       	mov	r8,0
800038c4:	ef 68 ff fe 	st.b	r7[-2],r8

  pm_cksel(&AVR32_PM
800038c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800038cc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800038d0:	ef 3b ff fe 	ld.ub	r11,r7[-2]
800038d4:	ee fa ff ec 	ld.w	r10,r7[-20]
800038d8:	1a da       	st.w	--sp,r10
800038da:	1a d8       	st.w	--sp,r8
800038dc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800038e0:	ee fa ff f0 	ld.w	r10,r7[-16]
800038e4:	fe 7c 0c 00 	mov	r12,-62464
800038e8:	f0 1f 00 14 	mcall	80003938 <pm_configure_clocks+0x310>
800038ec:	2f ed       	sub	sp,-8
  , b_div2_pba, div2_pba // PBA
  , b_div2_cpu, div2_cpu // PBB
  , b_div2_cpu, div2_cpu // HSB
  );

  if (param->cpu_f > AVR32_FLASHC_FWS_0_MAX_FREQ)
800038ee:	ee f8 ff d4 	ld.w	r8,r7[-44]
800038f2:	70 08       	ld.w	r8,r8[0x0]
800038f4:	e0 69 8a 40 	mov	r9,35392
800038f8:	ea 19 01 f7 	orh	r9,0x1f7
800038fc:	12 38       	cp.w	r8,r9
800038fe:	e0 88 00 06 	brls	8000390a <pm_configure_clocks+0x2e2>
  {
    flashc_set_wait_state(1);
80003902:	30 1c       	mov	r12,1
80003904:	f0 1f 00 0e 	mcall	8000393c <pm_configure_clocks+0x314>
80003908:	c0 48       	rjmp	80003910 <pm_configure_clocks+0x2e8>
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
#endif
  }
  else
  {
    flashc_set_wait_state(0);
8000390a:	30 0c       	mov	r12,0
8000390c:	f0 1f 00 0c 	mcall	8000393c <pm_configure_clocks+0x314>
    else
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
#endif
  }

  pm_switch_to_clock(&AVR32_PM, AVR32_PM_MCCTRL_MCSEL_PLL0);
80003910:	30 2b       	mov	r11,2
80003912:	fe 7c 0c 00 	mov	r12,-62464
80003916:	f0 1f 00 0b 	mcall	80003940 <pm_configure_clocks+0x318>

  return PM_FREQ_STATUS_OK;
8000391a:	30 08       	mov	r8,0
}
8000391c:	10 9c       	mov	r12,r8
8000391e:	2f 5d       	sub	sp,-44
80003920:	e3 cd 80 80 	ldm	sp++,r7,pc
80003924:	80 00       	ld.sh	r0,r0[0x0]
80003926:	34 74       	mov	r4,71
80003928:	80 00       	ld.sh	r0,r0[0x0]
8000392a:	32 a6       	mov	r6,42
8000392c:	80 00       	ld.sh	r0,r0[0x0]
8000392e:	33 4a       	mov	r10,52
80003930:	80 00       	ld.sh	r0,r0[0x0]
80003932:	33 d4       	mov	r4,61
80003934:	80 00       	ld.sh	r0,r0[0x0]
80003936:	34 0a       	mov	r10,64
80003938:	80 00       	ld.sh	r0,r0[0x0]
8000393a:	31 9c       	mov	r12,25
8000393c:	80 00       	ld.sh	r0,r0[0x0]
8000393e:	2f fc       	sub	r12,-1
80003940:	80 00       	ld.sh	r0,r0[0x0]
80003942:	34 28       	mov	r8,66

80003944 <getBaudDiv>:
/** The SPI mutex. */
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
80003944:	eb cd 40 80 	pushm	r7,lr
80003948:	1a 97       	mov	r7,sp
8000394a:	20 3d       	sub	sp,12
8000394c:	ef 4c ff f8 	st.w	r7[-8],r12
80003950:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80003954:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003958:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000395c:	f2 08 00 08 	add	r8,r9,r8
80003960:	20 18       	sub	r8,1
80003962:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003966:	f0 09 0d 08 	divu	r8,r8,r9
8000396a:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv <= 0 || baudDiv > 255) {
8000396e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003972:	58 08       	cp.w	r8,0
80003974:	c0 70       	breq	80003982 <getBaudDiv+0x3e>
80003976:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000397a:	e0 48 00 ff 	cp.w	r8,255
8000397e:	e0 88 00 04 	brls	80003986 <getBaudDiv+0x42>
		return -1;
80003982:	3f f8       	mov	r8,-1
80003984:	c0 48       	rjmp	8000398c <getBaudDiv+0x48>
	}

	return baudDiv;
80003986:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000398a:	5c 88       	casts.h	r8
}
8000398c:	10 9c       	mov	r12,r8
8000398e:	2f dd       	sub	sp,-12
80003990:	e3 cd 80 80 	ldm	sp++,r7,pc

80003994 <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80003994:	eb cd 40 80 	pushm	r7,lr
80003998:	1a 97       	mov	r7,sp
8000399a:	20 3d       	sub	sp,12
8000399c:	ef 4c ff f8 	st.w	r7[-8],r12
800039a0:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
800039a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039a8:	f1 39 00 0d 	ld.ub	r9,r8[13]
800039ac:	30 18       	mov	r8,1
800039ae:	f0 09 18 00 	cp.b	r9,r8
800039b2:	e0 88 00 04 	brls	800039ba <spi_initMaster+0x26>
		return SPI_ERROR_ARGUMENT;
800039b6:	30 28       	mov	r8,2
800039b8:	c3 48       	rjmp	80003a20 <spi_initMaster+0x8c>
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800039ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039be:	e0 69 00 80 	mov	r9,128
800039c2:	91 09       	st.w	r8[0x0],r9

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800039c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800039c8:	70 18       	ld.w	r8,r8[0x4]
800039ca:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.mstr = 1;
800039ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039d2:	30 19       	mov	r9,1
800039d4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800039d8:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800039dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800039e0:	f1 38 00 0d 	ld.ub	r8,r8[13]
800039e4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800039e8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800039ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039f0:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800039f4:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.llb = 0;
800039f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800039fc:	30 09       	mov	r9,0
800039fe:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
80003a02:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
80003a06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a0a:	30 f9       	mov	r9,15
80003a0c:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
80003a10:	ef 48 ff fc 	st.w	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
80003a14:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003a18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a1c:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
80003a1e:	30 08       	mov	r8,0
}
80003a20:	10 9c       	mov	r12,r8
80003a22:	2f dd       	sub	sp,-12
80003a24:	e3 cd 80 80 	ldm	sp++,r7,pc

80003a28 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003a28:	eb cd 40 80 	pushm	r7,lr
80003a2c:	1a 97       	mov	r7,sp
80003a2e:	20 5d       	sub	sp,20
80003a30:	ef 4c ff f8 	st.w	r7[-8],r12
80003a34:	12 98       	mov	r8,r9
80003a36:	16 99       	mov	r9,r11
80003a38:	ef 69 ff f4 	st.b	r7[-12],r9
80003a3c:	14 99       	mov	r9,r10
80003a3e:	ef 69 ff f0 	st.b	r7[-16],r9
80003a42:	ef 68 ff ec 	st.b	r7[-20],r8
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80003a46:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003a4a:	30 18       	mov	r8,1
80003a4c:	f0 09 18 00 	cp.b	r9,r8
80003a50:	e0 8b 00 09 	brhi	80003a62 <spi_selectionMode+0x3a>
80003a54:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003a58:	30 18       	mov	r8,1
80003a5a:	f0 09 18 00 	cp.b	r9,r8
80003a5e:	e0 88 00 04 	brls	80003a66 <spi_selectionMode+0x3e>
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
80003a62:	30 28       	mov	r8,2
80003a64:	c2 88       	rjmp	80003ab4 <spi_selectionMode+0x8c>
	}

	u_avr32_spi_mr.mr = spi->mr;
80003a66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003a6a:	70 18       	ld.w	r8,r8[0x4]
80003a6c:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.ps = variable_ps;
80003a70:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003a74:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003a78:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003a7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a80:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80003a84:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003a88:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003a8c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003a90:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003a94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a98:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80003a9c:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.dlybcs = delay;
80003aa0:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003aa4:	ef 68 ff fc 	st.b	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
80003aa8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003aac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ab0:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
80003ab2:	30 08       	mov	r8,0
}
80003ab4:	10 9c       	mov	r12,r8
80003ab6:	2f bd       	sub	sp,-20
80003ab8:	e3 cd 80 80 	ldm	sp++,r7,pc

80003abc <spi_selectChip>:

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80003abc:	eb cd 40 80 	pushm	r7,lr
80003ac0:	1a 97       	mov	r7,sp
80003ac2:	20 2d       	sub	sp,8
80003ac4:	ef 4c ff fc 	st.w	r7[-4],r12
80003ac8:	16 98       	mov	r8,r11
80003aca:	ef 68 ff f8 	st.b	r7[-8],r8
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003ace:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ad2:	70 18       	ld.w	r8,r8[0x4]
80003ad4:	10 99       	mov	r9,r8
80003ad6:	ea 19 00 0f 	orh	r9,0xf
80003ada:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ade:	91 19       	st.w	r8[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
80003ae0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003ae4:	70 18       	ld.w	r8,r8[0x4]
80003ae6:	e2 18 00 04 	andl	r8,0x4,COH
80003aea:	c1 90       	breq	80003b1c <spi_selectChip+0x60>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
80003aec:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80003af0:	30 e8       	mov	r8,14
80003af2:	f0 09 18 00 	cp.b	r9,r8
80003af6:	e0 88 00 04 	brls	80003afe <spi_selectChip+0x42>
			return SPI_ERROR_ARGUMENT;
80003afa:	30 28       	mov	r8,2
80003afc:	c2 88       	rjmp	80003b4c <spi_selectChip+0x90>
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003afe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b02:	70 19       	ld.w	r9,r8[0x4]
				(chip << AVR32_SPI_MR_PCS_OFFSET);
80003b04:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003b08:	b1 68       	lsl	r8,0x10
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
80003b0a:	ea 18 ff f0 	orh	r8,0xfff0
80003b0e:	e8 18 ff ff 	orl	r8,0xffff
80003b12:	10 69       	and	r9,r8
80003b14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b18:	91 19       	st.w	r8[0x4],r9
80003b1a:	c1 88       	rjmp	80003b4a <spi_selectChip+0x8e>
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
80003b1c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80003b20:	30 38       	mov	r8,3
80003b22:	f0 09 18 00 	cp.b	r9,r8
80003b26:	e0 88 00 04 	brls	80003b2e <spi_selectChip+0x72>
			return SPI_ERROR_ARGUMENT;
80003b2a:	30 28       	mov	r8,2
80003b2c:	c1 08       	rjmp	80003b4c <spi_selectChip+0x90>
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
80003b2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b32:	70 19       	ld.w	r9,r8[0x4]
80003b34:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003b38:	2f 08       	sub	r8,-16
80003b3a:	30 1a       	mov	r10,1
80003b3c:	f4 08 09 48 	lsl	r8,r10,r8
80003b40:	5c d8       	com	r8
80003b42:	10 69       	and	r9,r8
80003b44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b48:	91 19       	st.w	r8[0x4],r9
	}

	return SPI_OK;
80003b4a:	30 08       	mov	r8,0
}
80003b4c:	10 9c       	mov	r12,r8
80003b4e:	2f ed       	sub	sp,-8
80003b50:	e3 cd 80 80 	ldm	sp++,r7,pc

80003b54 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80003b54:	eb cd 40 80 	pushm	r7,lr
80003b58:	1a 97       	mov	r7,sp
80003b5a:	20 3d       	sub	sp,12
80003b5c:	ef 4c ff f8 	st.w	r7[-8],r12
80003b60:	16 98       	mov	r8,r11
80003b62:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
80003b66:	e0 68 3a 98 	mov	r8,15000
80003b6a:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003b6e:	c0 f8       	rjmp	80003b8c <spi_unselectChip+0x38>
		if (!timeout--) {
80003b70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003b74:	58 08       	cp.w	r8,0
80003b76:	5f 08       	sreq	r8
80003b78:	5c 58       	castu.b	r8
80003b7a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003b7e:	20 19       	sub	r9,1
80003b80:	ef 49 ff fc 	st.w	r7[-4],r9
80003b84:	58 08       	cp.w	r8,0
80003b86:	c0 30       	breq	80003b8c <spi_unselectChip+0x38>
			return SPI_ERROR_TIMEOUT;
80003b88:	30 18       	mov	r8,1
80003b8a:	c1 68       	rjmp	80003bb6 <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80003b8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b90:	70 48       	ld.w	r8,r8[0x10]
80003b92:	e2 18 02 00 	andl	r8,0x200,COH
80003b96:	ce d0       	breq	80003b70 <spi_unselectChip+0x1c>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003b98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003b9c:	70 18       	ld.w	r8,r8[0x4]
80003b9e:	10 99       	mov	r9,r8
80003ba0:	ea 19 00 0f 	orh	r9,0xf
80003ba4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ba8:	91 19       	st.w	r8[0x4],r9

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80003baa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003bae:	fc 19 01 00 	movh	r9,0x100
80003bb2:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
	xSemaphoreGive(xSPIMutex);
#endif

	return SPI_OK;
80003bb4:	30 08       	mov	r8,0
}
80003bb6:	10 9c       	mov	r12,r8
80003bb8:	2f dd       	sub	sp,-12
80003bba:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bbe:	d7 03       	nop

80003bc0 <spi_setupChipReg>:

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
80003bc0:	eb cd 40 80 	pushm	r7,lr
80003bc4:	1a 97       	mov	r7,sp
80003bc6:	20 5d       	sub	sp,20
80003bc8:	ef 4c ff f4 	st.w	r7[-12],r12
80003bcc:	ef 4b ff f0 	st.w	r7[-16],r11
80003bd0:	ef 4a ff ec 	st.w	r7[-20],r10
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003bd4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003bd8:	f1 39 00 0c 	ld.ub	r9,r8[12]
80003bdc:	30 38       	mov	r8,3
80003bde:	f0 09 18 00 	cp.b	r9,r8
80003be2:	e0 8b 00 1d 	brhi	80003c1c <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
80003be6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003bea:	f1 39 00 0b 	ld.ub	r9,r8[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003bee:	30 18       	mov	r8,1
80003bf0:	f0 09 18 00 	cp.b	r9,r8
80003bf4:	e0 8b 00 14 	brhi	80003c1c <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003bf8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003bfc:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003c00:	30 78       	mov	r8,7
80003c02:	f0 09 18 00 	cp.b	r9,r8
80003c06:	e0 88 00 0b 	brls	80003c1c <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
80003c0a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003c0e:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
80003c12:	31 08       	mov	r8,16
80003c14:	f0 09 18 00 	cp.b	r9,r8
80003c18:	e0 88 00 04 	brls	80003c20 <spi_setupChipReg+0x60>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
80003c1c:	30 28       	mov	r8,2
80003c1e:	c8 d8       	rjmp	80003d38 <spi_setupChipReg+0x178>
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003c20:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003c24:	70 18       	ld.w	r8,r8[0x4]
80003c26:	ee fb ff ec 	ld.w	r11,r7[-20]
80003c2a:	10 9c       	mov	r12,r8
80003c2c:	f0 1f 00 45 	mcall	80003d40 <spi_setupChipReg+0x180>
80003c30:	18 98       	mov	r8,r12
80003c32:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv < 0) {
80003c36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003c3a:	58 08       	cp.w	r8,0
80003c3c:	c0 34       	brge	80003c42 <spi_setupChipReg+0x82>
		return SPI_ERROR_ARGUMENT;
80003c3e:	30 28       	mov	r8,2
80003c40:	c7 c8       	rjmp	80003d38 <spi_setupChipReg+0x178>
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80003c42:	30 08       	mov	r8,0
80003c44:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003c48:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003c4c:	f1 38 00 0c 	ld.ub	r8,r8[12]
80003c50:	a1 98       	lsr	r8,0x1
80003c52:	5c 58       	castu.b	r8
80003c54:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003c58:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003c5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c60:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003c64:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003c68:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003c6c:	f1 38 00 0c 	ld.ub	r8,r8[12]
80003c70:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003c74:	5f 08       	sreq	r8
80003c76:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003c7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c7e:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80003c82:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003c86:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003c8a:	f1 38 00 0b 	ld.ub	r8,r8[11]
80003c8e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003c92:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003c96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003c9a:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
80003c9e:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003ca2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003ca6:	f1 38 00 08 	ld.ub	r8,r8[8]
80003caa:	20 88       	sub	r8,8
80003cac:	5c 58       	castu.b	r8
80003cae:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003cb2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003cb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003cba:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
80003cbe:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
80003cc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003cc6:	5c 58       	castu.b	r8
80003cc8:	ef 68 ff fa 	st.b	r7[-6],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
80003ccc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003cd0:	f1 38 00 09 	ld.ub	r8,r8[9]
80003cd4:	ef 68 ff f9 	st.b	r7[-7],r8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80003cd8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003cdc:	f1 38 00 0a 	ld.ub	r8,r8[10]
80003ce0:	ef 68 ff f8 	st.b	r7[-8],r8

	switch (options->reg) {
80003ce4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003ce8:	11 88       	ld.ub	r8,r8[0x0]
80003cea:	58 18       	cp.w	r8,1
80003cec:	c1 10       	breq	80003d0e <spi_setupChipReg+0x14e>
80003cee:	e0 89 00 05 	brgt	80003cf8 <spi_setupChipReg+0x138>
80003cf2:	58 08       	cp.w	r8,0
80003cf4:	c0 70       	breq	80003d02 <spi_setupChipReg+0x142>
80003cf6:	c1 e8       	rjmp	80003d32 <spi_setupChipReg+0x172>
80003cf8:	58 28       	cp.w	r8,2
80003cfa:	c1 00       	breq	80003d1a <spi_setupChipReg+0x15a>
80003cfc:	58 38       	cp.w	r8,3
80003cfe:	c1 40       	breq	80003d26 <spi_setupChipReg+0x166>
80003d00:	c1 98       	rjmp	80003d32 <spi_setupChipReg+0x172>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
80003d02:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003d06:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003d0a:	91 c9       	st.w	r8[0x30],r9
		break;
80003d0c:	c1 58       	rjmp	80003d36 <spi_setupChipReg+0x176>

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
80003d0e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003d12:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003d16:	91 d9       	st.w	r8[0x34],r9
		break;
80003d18:	c0 f8       	rjmp	80003d36 <spi_setupChipReg+0x176>

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
80003d1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003d1e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003d22:	91 e9       	st.w	r8[0x38],r9
		break;
80003d24:	c0 98       	rjmp	80003d36 <spi_setupChipReg+0x176>

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003d26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003d2a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003d2e:	91 f9       	st.w	r8[0x3c],r9
		break;
80003d30:	c0 38       	rjmp	80003d36 <spi_setupChipReg+0x176>

	default:
		return SPI_ERROR_ARGUMENT;
80003d32:	30 28       	mov	r8,2
80003d34:	c0 28       	rjmp	80003d38 <spi_setupChipReg+0x178>
			}
		}
	}
#endif

	return SPI_OK;
80003d36:	30 08       	mov	r8,0
}
80003d38:	10 9c       	mov	r12,r8
80003d3a:	2f bd       	sub	sp,-20
80003d3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003d40:	80 00       	ld.sh	r0,r0[0x0]
80003d42:	39 44       	mov	r4,-108

80003d44 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
80003d44:	eb cd 40 80 	pushm	r7,lr
80003d48:	1a 97       	mov	r7,sp
80003d4a:	20 1d       	sub	sp,4
80003d4c:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003d50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d54:	30 19       	mov	r9,1
80003d56:	91 09       	st.w	r8[0x0],r9
}
80003d58:	2f fd       	sub	sp,-4
80003d5a:	e3 cd 80 80 	ldm	sp++,r7,pc

80003d5e <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80003d5e:	eb cd 40 80 	pushm	r7,lr
80003d62:	1a 97       	mov	r7,sp
80003d64:	20 3d       	sub	sp,12
80003d66:	ef 4c ff f8 	st.w	r7[-8],r12
80003d6a:	16 98       	mov	r8,r11
80003d6c:	ef 58 ff f4 	st.h	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
80003d70:	e0 68 3a 98 	mov	r8,15000
80003d74:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003d78:	c0 f8       	rjmp	80003d96 <spi_write+0x38>
		if (!timeout--) {
80003d7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003d7e:	58 08       	cp.w	r8,0
80003d80:	5f 08       	sreq	r8
80003d82:	5c 58       	castu.b	r8
80003d84:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003d88:	20 19       	sub	r9,1
80003d8a:	ef 49 ff fc 	st.w	r7[-4],r9
80003d8e:	58 08       	cp.w	r8,0
80003d90:	c0 30       	breq	80003d96 <spi_write+0x38>
			return SPI_ERROR_TIMEOUT;
80003d92:	30 18       	mov	r8,1
80003d94:	c0 d8       	rjmp	80003dae <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003d96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003d9a:	70 48       	ld.w	r8,r8[0x10]
80003d9c:	e2 18 00 02 	andl	r8,0x2,COH
80003da0:	ce d0       	breq	80003d7a <spi_write+0x1c>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003da2:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80003da6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003daa:	91 39       	st.w	r8[0xc],r9

	return SPI_OK;
80003dac:	30 08       	mov	r8,0
}
80003dae:	10 9c       	mov	r12,r8
80003db0:	2f dd       	sub	sp,-12
80003db2:	e3 cd 80 80 	ldm	sp++,r7,pc

80003db6 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80003db6:	eb cd 40 80 	pushm	r7,lr
80003dba:	1a 97       	mov	r7,sp
80003dbc:	20 3d       	sub	sp,12
80003dbe:	ef 4c ff f8 	st.w	r7[-8],r12
80003dc2:	ef 4b ff f4 	st.w	r7[-12],r11
	unsigned int timeout = SPI_TIMEOUT;
80003dc6:	e0 68 3a 98 	mov	r8,15000
80003dca:	ef 48 ff fc 	st.w	r7[-4],r8

	while ((spi->sr &
80003dce:	c0 f8       	rjmp	80003dec <spi_read+0x36>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
80003dd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003dd4:	58 08       	cp.w	r8,0
80003dd6:	5f 08       	sreq	r8
80003dd8:	5c 58       	castu.b	r8
80003dda:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003dde:	20 19       	sub	r9,1
80003de0:	ef 49 ff fc 	st.w	r7[-4],r9
80003de4:	58 08       	cp.w	r8,0
80003de6:	c0 30       	breq	80003dec <spi_read+0x36>
			return SPI_ERROR_TIMEOUT;
80003de8:	30 18       	mov	r8,1
80003dea:	c1 18       	rjmp	80003e0c <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
80003dec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003df0:	70 48       	ld.w	r8,r8[0x10]
80003df2:	e2 18 02 01 	andl	r8,0x201,COH
80003df6:	e0 48 02 01 	cp.w	r8,513
80003dfa:	ce b1       	brne	80003dd0 <spi_read+0x1a>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
80003dfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003e00:	70 28       	ld.w	r8,r8[0x8]
80003e02:	5c 88       	casts.h	r8
80003e04:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003e08:	b2 08       	st.h	r9[0x0],r8

	return SPI_OK;
80003e0a:	30 08       	mov	r8,0
}
80003e0c:	10 9c       	mov	r12,r8
80003e0e:	2f dd       	sub	sp,-12
80003e10:	e3 cd 80 80 	ldm	sp++,r7,pc

80003e14 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80003e14:	eb cd 40 80 	pushm	r7,lr
80003e18:	1a 97       	mov	r7,sp
80003e1a:	20 1d       	sub	sp,4
80003e1c:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80003e20:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003e24:	e6 18 00 01 	andh	r8,0x1,COH
80003e28:	5f 08       	sreq	r8
80003e2a:	5c 58       	castu.b	r8
}
80003e2c:	10 9c       	mov	r12,r8
80003e2e:	2f fd       	sub	sp,-4
80003e30:	e3 cd 80 80 	ldm	sp++,r7,pc

80003e34 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80003e34:	eb cd 40 80 	pushm	r7,lr
80003e38:	1a 97       	mov	r7,sp
80003e3a:	20 4d       	sub	sp,16
80003e3c:	ef 4c ff f8 	st.w	r7[-8],r12
80003e40:	ef 4b ff f4 	st.w	r7[-12],r11
80003e44:	ef 4a ff f0 	st.w	r7[-16],r10
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003e48:	e1 b8 00 00 	mfsr	r8,0x0
80003e4c:	10 9c       	mov	r12,r8
80003e4e:	f0 1f 00 73 	mcall	80004018 <tc_configure_interrupts+0x1e4>
80003e52:	18 98       	mov	r8,r12
80003e54:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80003e58:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003e5c:	58 28       	cp.w	r8,2
80003e5e:	e0 88 00 04 	brls	80003e66 <tc_configure_interrupts+0x32>
    return TC_INVALID_ARGUMENT;
80003e62:	3f f8       	mov	r8,-1
80003e64:	cd 68       	rjmp	80004010 <tc_configure_interrupts+0x1dc>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80003e66:	ee fb ff f4 	ld.w	r11,r7[-12]
80003e6a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e6e:	70 08       	ld.w	r8,r8[0x0]
80003e70:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80003e74:	5c 58       	castu.b	r8
80003e76:	f0 09 15 07 	lsl	r9,r8,0x7
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
80003e7a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e7e:	70 08       	ld.w	r8,r8[0x0]
80003e80:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80003e84:	5c 58       	castu.b	r8
80003e86:	a7 68       	lsl	r8,0x6
80003e88:	10 49       	or	r9,r8
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
80003e8a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e8e:	70 08       	ld.w	r8,r8[0x0]
80003e90:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80003e94:	5c 58       	castu.b	r8
80003e96:	a5 78       	lsl	r8,0x5
80003e98:	10 49       	or	r9,r8
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
80003e9a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003e9e:	70 08       	ld.w	r8,r8[0x0]
80003ea0:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80003ea4:	5c 58       	castu.b	r8
80003ea6:	a5 68       	lsl	r8,0x4
80003ea8:	10 49       	or	r9,r8
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
80003eaa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003eae:	70 08       	ld.w	r8,r8[0x0]
80003eb0:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80003eb4:	5c 58       	castu.b	r8
80003eb6:	a3 78       	lsl	r8,0x3
80003eb8:	10 49       	or	r9,r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
80003eba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003ebe:	70 08       	ld.w	r8,r8[0x0]
80003ec0:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80003ec4:	5c 58       	castu.b	r8
80003ec6:	a3 68       	lsl	r8,0x2
80003ec8:	10 49       	or	r9,r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
80003eca:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003ece:	70 08       	ld.w	r8,r8[0x0]
80003ed0:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80003ed4:	5c 58       	castu.b	r8
80003ed6:	a1 78       	lsl	r8,0x1
80003ed8:	10 49       	or	r9,r8
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
80003eda:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003ede:	70 08       	ld.w	r8,r8[0x0]
80003ee0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003ee4:	5c 58       	castu.b	r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80003ee6:	f3 e8 10 08 	or	r8,r9,r8
80003eea:	10 99       	mov	r9,r8
80003eec:	ee fa ff f8 	ld.w	r10,r7[-8]
80003ef0:	f6 08 15 06 	lsl	r8,r11,0x6
80003ef4:	f4 08 00 08 	add	r8,r10,r8
80003ef8:	2d c8       	sub	r8,-36
80003efa:	91 09       	st.w	r8[0x0],r9
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
80003efc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003f00:	30 08       	mov	r8,0
80003f02:	f0 09 18 00 	cp.b	r9,r8
80003f06:	c0 20       	breq	80003f0a <tc_configure_interrupts+0xd6>
80003f08:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80003f0a:	ee fb ff f4 	ld.w	r11,r7[-12]
80003f0e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003f12:	70 08       	ld.w	r8,r8[0x0]
80003f14:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80003f18:	5c 58       	castu.b	r8
80003f1a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003f1e:	c0 41       	brne	80003f26 <tc_configure_interrupts+0xf2>
80003f20:	e0 69 00 80 	mov	r9,128
80003f24:	c0 28       	rjmp	80003f28 <tc_configure_interrupts+0xf4>
80003f26:	30 09       	mov	r9,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80003f28:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003f2c:	70 08       	ld.w	r8,r8[0x0]
80003f2e:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80003f32:	5c 58       	castu.b	r8
80003f34:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003f38:	c0 31       	brne	80003f3e <tc_configure_interrupts+0x10a>
80003f3a:	34 08       	mov	r8,64
80003f3c:	c0 28       	rjmp	80003f40 <tc_configure_interrupts+0x10c>
80003f3e:	30 08       	mov	r8,0
80003f40:	10 49       	or	r9,r8
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80003f42:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003f46:	70 08       	ld.w	r8,r8[0x0]
80003f48:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80003f4c:	5c 58       	castu.b	r8
80003f4e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003f52:	c0 31       	brne	80003f58 <tc_configure_interrupts+0x124>
80003f54:	32 08       	mov	r8,32
80003f56:	c0 28       	rjmp	80003f5a <tc_configure_interrupts+0x126>
80003f58:	30 08       	mov	r8,0
80003f5a:	10 49       	or	r9,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
80003f5c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003f60:	70 08       	ld.w	r8,r8[0x0]
80003f62:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80003f66:	5c 58       	castu.b	r8
80003f68:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003f6c:	c0 31       	brne	80003f72 <tc_configure_interrupts+0x13e>
80003f6e:	31 08       	mov	r8,16
80003f70:	c0 28       	rjmp	80003f74 <tc_configure_interrupts+0x140>
80003f72:	30 08       	mov	r8,0
80003f74:	10 49       	or	r9,r8
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80003f76:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003f7a:	70 08       	ld.w	r8,r8[0x0]
80003f7c:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80003f80:	5c 58       	castu.b	r8
80003f82:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003f86:	c0 31       	brne	80003f8c <tc_configure_interrupts+0x158>
80003f88:	30 88       	mov	r8,8
80003f8a:	c0 28       	rjmp	80003f8e <tc_configure_interrupts+0x15a>
80003f8c:	30 08       	mov	r8,0
80003f8e:	10 49       	or	r9,r8
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80003f90:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003f94:	70 08       	ld.w	r8,r8[0x0]
80003f96:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
80003f9a:	5c 58       	castu.b	r8
80003f9c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003fa0:	c0 31       	brne	80003fa6 <tc_configure_interrupts+0x172>
80003fa2:	30 48       	mov	r8,4
80003fa4:	c0 28       	rjmp	80003fa8 <tc_configure_interrupts+0x174>
80003fa6:	30 08       	mov	r8,0
80003fa8:	10 49       	or	r9,r8
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
80003faa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003fae:	70 08       	ld.w	r8,r8[0x0]
80003fb0:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80003fb4:	5c 58       	castu.b	r8
80003fb6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003fba:	c0 31       	brne	80003fc0 <tc_configure_interrupts+0x18c>
80003fbc:	30 28       	mov	r8,2
80003fbe:	c0 28       	rjmp	80003fc2 <tc_configure_interrupts+0x18e>
80003fc0:	30 08       	mov	r8,0
80003fc2:	10 49       	or	r9,r8
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
80003fc4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003fc8:	70 08       	ld.w	r8,r8[0x0]
80003fca:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003fce:	5c 58       	castu.b	r8
80003fd0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003fd4:	5f 08       	sreq	r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
80003fd6:	f3 e8 10 08 	or	r8,r9,r8
80003fda:	10 99       	mov	r9,r8
80003fdc:	ee fa ff f8 	ld.w	r10,r7[-8]
80003fe0:	f6 08 15 06 	lsl	r8,r11,0x6
80003fe4:	f4 08 00 08 	add	r8,r10,r8
80003fe8:	2d 88       	sub	r8,-40
80003fea:	91 09       	st.w	r8[0x0],r9
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
80003fec:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003ff0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003ff4:	a1 78       	lsl	r8,0x1
80003ff6:	2f f8       	sub	r8,-1
80003ff8:	a5 78       	lsl	r8,0x5
80003ffa:	f2 08 00 08 	add	r8,r9,r8
80003ffe:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
80004000:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004004:	30 08       	mov	r8,0
80004006:	f0 09 18 00 	cp.b	r9,r8
8000400a:	c0 20       	breq	8000400e <tc_configure_interrupts+0x1da>
8000400c:	d5 03       	csrf	0x10

  return 0;
8000400e:	30 08       	mov	r8,0
}
80004010:	10 9c       	mov	r12,r8
80004012:	2f cd       	sub	sp,-16
80004014:	e3 cd 80 80 	ldm	sp++,r7,pc
80004018:	80 00       	ld.sh	r0,r0[0x0]
8000401a:	3e 14       	mov	r4,-31

8000401c <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
8000401c:	eb cd 40 80 	pushm	r7,lr
80004020:	1a 97       	mov	r7,sp
80004022:	20 2d       	sub	sp,8
80004024:	ef 4c ff fc 	st.w	r7[-4],r12
80004028:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
8000402c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004030:	70 08       	ld.w	r8,r8[0x0]
80004032:	58 28       	cp.w	r8,2
80004034:	e0 88 00 04 	brls	8000403c <tc_init_waveform+0x20>
    return TC_INVALID_ARGUMENT;
80004038:	3f f8       	mov	r8,-1
8000403a:	c9 78       	rjmp	80004168 <tc_init_waveform+0x14c>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
8000403c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004040:	70 09       	ld.w	r9,r8[0x0]
80004042:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004046:	70 18       	ld.w	r8,r8[0x4]
80004048:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
8000404c:	5c 58       	castu.b	r8
8000404e:	f0 0a 15 1e 	lsl	r10,r8,0x1e
                                  opt->beevt << AVR32_TC_BEEVT_OFFSET |
80004052:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004056:	70 18       	ld.w	r8,r8[0x4]
80004058:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
8000405c:	5c 58       	castu.b	r8
8000405e:	bd 68       	lsl	r8,0x1c
80004060:	10 4a       	or	r10,r8
                                  opt->bcpc << AVR32_TC_BCPC_OFFSET |
80004062:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004066:	70 18       	ld.w	r8,r8[0x4]
80004068:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
8000406c:	5c 58       	castu.b	r8
8000406e:	bb 68       	lsl	r8,0x1a
80004070:	10 4a       	or	r10,r8
                                  opt->bcpb << AVR32_TC_BCPB_OFFSET |
80004072:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004076:	70 18       	ld.w	r8,r8[0x4]
80004078:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
8000407c:	5c 58       	castu.b	r8
8000407e:	b9 68       	lsl	r8,0x18
80004080:	10 4a       	or	r10,r8
                                  opt->aswtrg << AVR32_TC_ASWTRG_OFFSET |
80004082:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004086:	70 18       	ld.w	r8,r8[0x4]
80004088:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
8000408c:	5c 58       	castu.b	r8
8000408e:	b7 68       	lsl	r8,0x16
80004090:	10 4a       	or	r10,r8
                                  opt->aeevt << AVR32_TC_AEEVT_OFFSET |
80004092:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004096:	70 18       	ld.w	r8,r8[0x4]
80004098:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
8000409c:	5c 58       	castu.b	r8
8000409e:	b5 68       	lsl	r8,0x14
800040a0:	10 4a       	or	r10,r8
                                  opt->acpc << AVR32_TC_ACPC_OFFSET |
800040a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040a6:	70 18       	ld.w	r8,r8[0x4]
800040a8:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
800040ac:	5c 58       	castu.b	r8
800040ae:	b3 68       	lsl	r8,0x12
800040b0:	10 4a       	or	r10,r8
                                  opt->acpa << AVR32_TC_ACPA_OFFSET |
800040b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040b6:	70 18       	ld.w	r8,r8[0x4]
800040b8:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
800040bc:	5c 58       	castu.b	r8
800040be:	b1 68       	lsl	r8,0x10
800040c0:	f5 e8 10 08 	or	r8,r10,r8
                                  1 << AVR32_TC_WAVE_OFFSET |
800040c4:	10 9a       	mov	r10,r8
800040c6:	af ba       	sbr	r10,0xf
                                  opt->wavsel << AVR32_TC_WAVSEL_OFFSET |
800040c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040cc:	70 18       	ld.w	r8,r8[0x4]
800040ce:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
800040d2:	5c 58       	castu.b	r8
800040d4:	ad 78       	lsl	r8,0xd
800040d6:	10 4a       	or	r10,r8
                                  opt->enetrg << AVR32_TC_ENETRG_OFFSET |
800040d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040dc:	70 18       	ld.w	r8,r8[0x4]
800040de:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
800040e2:	5c 58       	castu.b	r8
800040e4:	ad 68       	lsl	r8,0xc
800040e6:	10 4a       	or	r10,r8
                                  opt->eevt << AVR32_TC_EEVT_OFFSET |
800040e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040ec:	70 18       	ld.w	r8,r8[0x4]
800040ee:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
800040f2:	5c 58       	castu.b	r8
800040f4:	ab 68       	lsl	r8,0xa
800040f6:	10 4a       	or	r10,r8
                                  opt->eevtedg << AVR32_TC_EEVTEDG_OFFSET |
800040f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800040fc:	70 18       	ld.w	r8,r8[0x4]
800040fe:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
80004102:	5c 58       	castu.b	r8
80004104:	a9 68       	lsl	r8,0x8
80004106:	10 4a       	or	r10,r8
                                  opt->cpcdis << AVR32_TC_CPCDIS_OFFSET |
80004108:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000410c:	70 18       	ld.w	r8,r8[0x4]
8000410e:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80004112:	5c 58       	castu.b	r8
80004114:	a7 78       	lsl	r8,0x7
80004116:	10 4a       	or	r10,r8
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
80004118:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000411c:	70 18       	ld.w	r8,r8[0x4]
8000411e:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80004122:	5c 58       	castu.b	r8
80004124:	a7 68       	lsl	r8,0x6
80004126:	10 4a       	or	r10,r8
                                  opt->burst << AVR32_TC_BURST_OFFSET |
80004128:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000412c:	70 18       	ld.w	r8,r8[0x4]
8000412e:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
80004132:	5c 58       	castu.b	r8
80004134:	a5 68       	lsl	r8,0x4
80004136:	10 4a       	or	r10,r8
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
80004138:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000413c:	70 18       	ld.w	r8,r8[0x4]
8000413e:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80004142:	5c 58       	castu.b	r8
80004144:	a3 78       	lsl	r8,0x3
80004146:	10 4a       	or	r10,r8
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;
80004148:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000414c:	70 18       	ld.w	r8,r8[0x4]
8000414e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80004152:	5c 58       	castu.b	r8
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80004154:	f5 e8 10 08 	or	r8,r10,r8
80004158:	10 9a       	mov	r10,r8
8000415a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000415e:	a5 69       	lsl	r9,0x4
80004160:	2f f9       	sub	r9,-1
80004162:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
80004166:	30 08       	mov	r8,0
}
80004168:	10 9c       	mov	r12,r8
8000416a:	2f ed       	sub	sp,-8
8000416c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004170 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
80004170:	eb cd 40 80 	pushm	r7,lr
80004174:	1a 97       	mov	r7,sp
80004176:	20 2d       	sub	sp,8
80004178:	ef 4c ff fc 	st.w	r7[-4],r12
8000417c:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80004180:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004184:	58 28       	cp.w	r8,2
80004186:	e0 88 00 04 	brls	8000418e <tc_start+0x1e>
    return TC_INVALID_ARGUMENT;
8000418a:	3f f8       	mov	r8,-1
8000418c:	c0 b8       	rjmp	800041a2 <tc_start+0x32>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
8000418e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004192:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004196:	a7 68       	lsl	r8,0x6
80004198:	f2 08 00 08 	add	r8,r9,r8
8000419c:	30 59       	mov	r9,5
8000419e:	91 09       	st.w	r8[0x0],r9

  return 0;
800041a0:	30 08       	mov	r8,0
}
800041a2:	10 9c       	mov	r12,r8
800041a4:	2f ed       	sub	sp,-8
800041a6:	e3 cd 80 80 	ldm	sp++,r7,pc

800041aa <tc_read_sr>:
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
}


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
800041aa:	eb cd 40 80 	pushm	r7,lr
800041ae:	1a 97       	mov	r7,sp
800041b0:	20 2d       	sub	sp,8
800041b2:	ef 4c ff fc 	st.w	r7[-4],r12
800041b6:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800041ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041be:	58 28       	cp.w	r8,2
800041c0:	e0 88 00 04 	brls	800041c8 <tc_read_sr+0x1e>
    return TC_INVALID_ARGUMENT;
800041c4:	3f f8       	mov	r8,-1
800041c6:	c0 b8       	rjmp	800041dc <tc_read_sr+0x32>

  return tc->channel[channel].sr;
800041c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800041d0:	a1 78       	lsl	r8,0x1
800041d2:	2f f8       	sub	r8,-1
800041d4:	a5 78       	lsl	r8,0x5
800041d6:	f2 08 00 08 	add	r8,r9,r8
800041da:	70 08       	ld.w	r8,r8[0x0]
}
800041dc:	10 9c       	mov	r12,r8
800041de:	2f ed       	sub	sp,-8
800041e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800041e4 <tc_write_rc>:
  return value;
}


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
800041e4:	eb cd 40 80 	pushm	r7,lr
800041e8:	1a 97       	mov	r7,sp
800041ea:	20 3d       	sub	sp,12
800041ec:	ef 4c ff fc 	st.w	r7[-4],r12
800041f0:	ef 4b ff f8 	st.w	r7[-8],r11
800041f4:	14 98       	mov	r8,r10
800041f6:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800041fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800041fe:	58 28       	cp.w	r8,2
80004200:	e0 88 00 04 	brls	80004208 <tc_write_rc+0x24>
    return TC_INVALID_ARGUMENT;
80004204:	3f f8       	mov	r8,-1
80004206:	c2 78       	rjmp	80004254 <tc_write_rc+0x70>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
80004208:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000420c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004210:	a5 69       	lsl	r9,0x4
80004212:	2f f9       	sub	r9,-1
80004214:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004218:	e2 18 80 00 	andl	r8,0x8000,COH
8000421c:	c1 a0       	breq	80004250 <tc_write_rc+0x6c>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
8000421e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004222:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004226:	ee fa ff fc 	ld.w	r10,r7[-4]
8000422a:	a7 69       	lsl	r9,0x6
8000422c:	f4 09 00 09 	add	r9,r10,r9
80004230:	2e 49       	sub	r9,-28
80004232:	72 09       	ld.w	r9,r9[0x0]
80004234:	12 9a       	mov	r10,r9
80004236:	e0 1a 00 00 	andl	r10,0x0
8000423a:	ef 19 ff f4 	ld.uh	r9,r7[-12]
8000423e:	f5 e9 10 09 	or	r9,r10,r9
80004242:	ee fa ff fc 	ld.w	r10,r7[-4]
80004246:	a7 68       	lsl	r8,0x6
80004248:	f4 08 00 08 	add	r8,r10,r8
8000424c:	2e 48       	sub	r8,-28
8000424e:	91 09       	st.w	r8[0x0],r9

  return value;
80004250:	ef 18 ff f4 	ld.uh	r8,r7[-12]
}
80004254:	10 9c       	mov	r12,r8
80004256:	2f dd       	sub	sp,-12
80004258:	e3 cd 80 80 	ldm	sp++,r7,pc

8000425c <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8000425c:	eb cd 40 80 	pushm	r7,lr
80004260:	1a 97       	mov	r7,sp
80004262:	20 1d       	sub	sp,4
80004264:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80004268:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000426c:	e6 18 00 01 	andh	r8,0x1,COH
80004270:	5f 08       	sreq	r8
80004272:	5c 58       	castu.b	r8
}
80004274:	10 9c       	mov	r12,r8
80004276:	2f fd       	sub	sp,-4
80004278:	e3 cd 80 80 	ldm	sp++,r7,pc

8000427c <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8000427c:	eb cd 40 80 	pushm	r7,lr
80004280:	1a 97       	mov	r7,sp
80004282:	20 7d       	sub	sp,28
80004284:	ef 4c ff ec 	st.w	r7[-20],r12
80004288:	ef 4b ff e8 	st.w	r7[-24],r11
8000428c:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
80004290:	ee f8 ff e8 	ld.w	r8,r7[-24]
80004294:	f0 09 15 04 	lsl	r9,r8,0x4
80004298:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000429c:	10 39       	cp.w	r9,r8
8000429e:	e0 8b 00 04 	brhi	800042a6 <usart_set_async_baudrate+0x2a>
800042a2:	31 08       	mov	r8,16
800042a4:	c0 28       	rjmp	800042a8 <usart_set_async_baudrate+0x2c>
800042a6:	30 88       	mov	r8,8
800042a8:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
800042ac:	ee f8 ff e4 	ld.w	r8,r7[-28]
800042b0:	f0 09 15 03 	lsl	r9,r8,0x3
800042b4:	ee fa ff f0 	ld.w	r10,r7[-16]
800042b8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800042bc:	f4 08 02 48 	mul	r8,r10,r8
800042c0:	a1 98       	lsr	r8,0x1
800042c2:	f2 08 00 08 	add	r8,r9,r8
800042c6:	ee fa ff f0 	ld.w	r10,r7[-16]
800042ca:	ee f9 ff e8 	ld.w	r9,r7[-24]
800042ce:	f4 09 02 49 	mul	r9,r10,r9
800042d2:	f0 09 0d 08 	divu	r8,r8,r9
800042d6:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
800042da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042de:	a3 98       	lsr	r8,0x3
800042e0:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
800042e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800042e8:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800042ec:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
800042f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042f4:	58 08       	cp.w	r8,0
800042f6:	c0 70       	breq	80004304 <usart_set_async_baudrate+0x88>
800042f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800042fc:	e0 48 ff ff 	cp.w	r8,65535
80004300:	e0 88 00 04 	brls	80004308 <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
80004304:	30 18       	mov	r8,1
80004306:	c2 08       	rjmp	80004346 <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
80004308:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000430c:	70 18       	ld.w	r8,r8[0x4]
8000430e:	10 99       	mov	r9,r8
80004310:	e4 19 ff f7 	andh	r9,0xfff7
80004314:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
80004318:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000431c:	59 08       	cp.w	r8,16
8000431e:	c0 40       	breq	80004326 <usart_set_async_baudrate+0xaa>
80004320:	e8 68 00 00 	mov	r8,524288
80004324:	c0 28       	rjmp	80004328 <usart_set_async_baudrate+0xac>
80004326:	30 08       	mov	r8,0
80004328:	10 49       	or	r9,r8
8000432a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000432e:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
80004330:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004334:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
80004338:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000433c:	10 49       	or	r9,r8
8000433e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80004342:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
80004344:	30 08       	mov	r8,0
}
80004346:	10 9c       	mov	r12,r8
80004348:	2f 9d       	sub	sp,-28
8000434a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000434e:	d7 03       	nop

80004350 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
80004350:	eb cd 40 80 	pushm	r7,lr
80004354:	1a 97       	mov	r7,sp
80004356:	20 2d       	sub	sp,8
80004358:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
8000435c:	e1 b8 00 00 	mfsr	r8,0x0
80004360:	10 9c       	mov	r12,r8
80004362:	f0 1f 00 18 	mcall	800043c0 <usart_reset+0x70>
80004366:	18 98       	mov	r8,r12
80004368:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
8000436c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004370:	30 08       	mov	r8,0
80004372:	f0 09 18 00 	cp.b	r9,r8
80004376:	c0 20       	breq	8000437a <usart_reset+0x2a>
80004378:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8000437a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000437e:	3f f9       	mov	r9,-1
80004380:	91 39       	st.w	r8[0xc],r9
  usart->csr;
80004382:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004386:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
80004388:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000438c:	30 08       	mov	r8,0
8000438e:	f0 09 18 00 	cp.b	r9,r8
80004392:	c0 20       	breq	80004396 <usart_reset+0x46>
80004394:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
80004396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000439a:	30 09       	mov	r9,0
8000439c:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
8000439e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043a2:	30 09       	mov	r9,0
800043a4:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
800043a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043aa:	30 09       	mov	r9,0
800043ac:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
800043ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043b2:	ea 69 61 0c 	mov	r9,680204
800043b6:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
800043b8:	2f ed       	sub	sp,-8
800043ba:	e3 cd 80 80 	ldm	sp++,r7,pc
800043be:	00 00       	add	r0,r0
800043c0:	80 00       	ld.sh	r0,r0[0x0]
800043c2:	42 5c       	lddsp	r12,sp[0x94]

800043c4 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
800043c4:	eb cd 40 80 	pushm	r7,lr
800043c8:	1a 97       	mov	r7,sp
800043ca:	20 3d       	sub	sp,12
800043cc:	ef 4c ff fc 	st.w	r7[-4],r12
800043d0:	ef 4b ff f8 	st.w	r7[-8],r11
800043d4:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
800043d8:	ee fc ff fc 	ld.w	r12,r7[-4]
800043dc:	f0 1f 00 54 	mcall	8000452c <usart_init_rs232+0x168>

  // Check input values.
  if (!opt || // Null pointer.
800043e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043e4:	58 08       	cp.w	r8,0
800043e6:	c3 90       	breq	80004458 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
800043e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043ec:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800043ee:	30 48       	mov	r8,4
800043f0:	f0 09 18 00 	cp.b	r9,r8
800043f4:	e0 88 00 32 	brls	80004458 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
800043f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800043fc:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
800043fe:	30 98       	mov	r8,9
80004400:	f0 09 18 00 	cp.b	r9,r8
80004404:	e0 8b 00 2a 	brhi	80004458 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
80004408:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000440c:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000440e:	30 78       	mov	r8,7
80004410:	f0 09 18 00 	cp.b	r9,r8
80004414:	e0 8b 00 22 	brhi	80004458 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
80004418:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000441c:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8000441e:	e0 68 01 01 	mov	r8,257
80004422:	f0 09 19 00 	cp.h	r9,r8
80004426:	e0 8b 00 19 	brhi	80004458 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8000442a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000442e:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004432:	30 38       	mov	r8,3
80004434:	f0 09 18 00 	cp.b	r9,r8
80004438:	e0 8b 00 10 	brhi	80004458 <usart_init_rs232+0x94>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8000443c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004440:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004444:	70 08       	ld.w	r8,r8[0x0]
80004446:	12 9a       	mov	r10,r9
80004448:	10 9b       	mov	r11,r8
8000444a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000444e:	f0 1f 00 39 	mcall	80004530 <usart_init_rs232+0x16c>
80004452:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
80004454:	58 18       	cp.w	r8,1
80004456:	c0 31       	brne	8000445c <usart_init_rs232+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
80004458:	30 18       	mov	r8,1
8000445a:	c6 48       	rjmp	80004522 <usart_init_rs232+0x15e>

  if (opt->charlength == 9)
8000445c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004460:	11 c9       	ld.ub	r9,r8[0x4]
80004462:	30 98       	mov	r8,9
80004464:	f0 09 18 00 	cp.b	r9,r8
80004468:	c0 a1       	brne	8000447c <usart_init_rs232+0xb8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8000446a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000446e:	70 18       	ld.w	r8,r8[0x4]
80004470:	10 99       	mov	r9,r8
80004472:	b1 b9       	sbr	r9,0x11
80004474:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004478:	91 19       	st.w	r8[0x4],r9
8000447a:	c0 d8       	rjmp	80004494 <usart_init_rs232+0xd0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8000447c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004480:	70 19       	ld.w	r9,r8[0x4]
80004482:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004486:	11 c8       	ld.ub	r8,r8[0x4]
80004488:	20 58       	sub	r8,5
8000448a:	a7 68       	lsl	r8,0x6
8000448c:	10 49       	or	r9,r8
8000448e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004492:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
80004494:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004498:	70 19       	ld.w	r9,r8[0x4]
8000449a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000449e:	11 d8       	ld.ub	r8,r8[0x5]
800044a0:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
800044a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044a8:	f1 38 00 08 	ld.ub	r8,r8[8]
800044ac:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
800044ae:	f5 e8 10 08 	or	r8,r10,r8
800044b2:	10 49       	or	r9,r8
800044b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800044b8:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
800044ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044be:	90 39       	ld.sh	r9,r8[0x6]
800044c0:	30 28       	mov	r8,2
800044c2:	f0 09 19 00 	cp.h	r9,r8
800044c6:	e0 88 00 14 	brls	800044ee <usart_init_rs232+0x12a>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
800044ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800044ce:	70 18       	ld.w	r8,r8[0x4]
800044d0:	10 99       	mov	r9,r8
800044d2:	ad b9       	sbr	r9,0xd
800044d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800044d8:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
800044da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044de:	90 38       	ld.sh	r8,r8[0x6]
800044e0:	5c 78       	castu.h	r8
800044e2:	20 28       	sub	r8,2
800044e4:	10 99       	mov	r9,r8
800044e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800044ea:	91 a9       	st.w	r8[0x28],r9
800044ec:	c0 d8       	rjmp	80004506 <usart_init_rs232+0x142>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
800044ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800044f2:	70 19       	ld.w	r9,r8[0x4]
800044f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800044f8:	90 38       	ld.sh	r8,r8[0x6]
800044fa:	5c 78       	castu.h	r8
800044fc:	ad 68       	lsl	r8,0xc
800044fe:	10 49       	or	r9,r8
80004500:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004504:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
80004506:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000450a:	70 18       	ld.w	r8,r8[0x4]
8000450c:	10 99       	mov	r9,r8
8000450e:	e0 19 ff f0 	andl	r9,0xfff0
80004512:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004516:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
80004518:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000451c:	35 09       	mov	r9,80
8000451e:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
80004520:	30 08       	mov	r8,0
}
80004522:	10 9c       	mov	r12,r8
80004524:	2f dd       	sub	sp,-12
80004526:	e3 cd 80 80 	ldm	sp++,r7,pc
8000452a:	00 00       	add	r0,r0
8000452c:	80 00       	ld.sh	r0,r0[0x0]
8000452e:	43 50       	lddsp	r0,sp[0xd4]
80004530:	80 00       	ld.sh	r0,r0[0x0]
80004532:	42 7c       	lddsp	r12,sp[0x9c]

80004534 <usart_write_char>:
  return USART_SUCCESS;
}


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
80004534:	eb cd 40 80 	pushm	r7,lr
80004538:	1a 97       	mov	r7,sp
8000453a:	20 3d       	sub	sp,12
8000453c:	ef 4c ff f8 	st.w	r7[-8],r12
80004540:	ef 4b ff f4 	st.w	r7[-12],r11
80004544:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004548:	ef 48 ff fc 	st.w	r7[-4],r8
 *
 * \return \c 1 if the USART Transmit Holding Register is free, otherwise \c 0.
 */
__always_inline static int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
8000454c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004550:	70 58       	ld.w	r8,r8[0x14]
80004552:	e2 18 00 02 	andl	r8,0x2,COH
80004556:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
80004558:	58 08       	cp.w	r8,0
8000455a:	c0 a0       	breq	8000456e <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
8000455c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004560:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80004564:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004568:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
8000456a:	30 08       	mov	r8,0
8000456c:	c0 28       	rjmp	80004570 <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
8000456e:	30 28       	mov	r8,2
}
80004570:	10 9c       	mov	r12,r8
80004572:	2f dd       	sub	sp,-12
80004574:	e3 cd 80 80 	ldm	sp++,r7,pc

80004578 <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
80004578:	eb cd 40 80 	pushm	r7,lr
8000457c:	1a 97       	mov	r7,sp
8000457e:	20 3d       	sub	sp,12
80004580:	ef 4c ff f8 	st.w	r7[-8],r12
80004584:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
80004588:	e0 68 27 10 	mov	r8,10000
8000458c:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
80004590:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004594:	58 08       	cp.w	r8,0
80004596:	5f 08       	sreq	r8
80004598:	5c 58       	castu.b	r8
8000459a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000459e:	20 19       	sub	r9,1
800045a0:	ef 49 ff fc 	st.w	r7[-4],r9
800045a4:	58 08       	cp.w	r8,0
800045a6:	c0 30       	breq	800045ac <usart_putchar+0x34>
800045a8:	3f f8       	mov	r8,-1
800045aa:	c0 b8       	rjmp	800045c0 <usart_putchar+0x48>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
800045ac:	ee fb ff f4 	ld.w	r11,r7[-12]
800045b0:	ee fc ff f8 	ld.w	r12,r7[-8]
800045b4:	f0 1f 00 05 	mcall	800045c8 <usart_putchar+0x50>
800045b8:	18 98       	mov	r8,r12
800045ba:	58 08       	cp.w	r8,0
800045bc:	ce a1       	brne	80004590 <usart_putchar+0x18>

  return USART_SUCCESS;
800045be:	30 08       	mov	r8,0
}
800045c0:	10 9c       	mov	r12,r8
800045c2:	2f dd       	sub	sp,-12
800045c4:	e3 cd 80 80 	ldm	sp++,r7,pc
800045c8:	80 00       	ld.sh	r0,r0[0x0]
800045ca:	45 34       	lddsp	r4,sp[0x14c]

800045cc <usart_write_line>:
  return c;
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
800045cc:	eb cd 40 80 	pushm	r7,lr
800045d0:	1a 97       	mov	r7,sp
800045d2:	20 2d       	sub	sp,8
800045d4:	ef 4c ff fc 	st.w	r7[-4],r12
800045d8:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
800045dc:	c0 e8       	rjmp	800045f8 <usart_write_line+0x2c>
    usart_putchar(usart, *string++);
800045de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045e2:	11 88       	ld.ub	r8,r8[0x0]
800045e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800045e8:	2f f9       	sub	r9,-1
800045ea:	ef 49 ff f8 	st.w	r7[-8],r9
800045ee:	10 9b       	mov	r11,r8
800045f0:	ee fc ff fc 	ld.w	r12,r7[-4]
800045f4:	f0 1f 00 05 	mcall	80004608 <usart_write_line+0x3c>
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
800045f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800045fc:	11 88       	ld.ub	r8,r8[0x0]
800045fe:	58 08       	cp.w	r8,0
80004600:	ce f1       	brne	800045de <usart_write_line+0x12>
    usart_putchar(usart, *string++);
}
80004602:	2f ed       	sub	sp,-8
80004604:	e3 cd 80 80 	ldm	sp++,r7,pc
80004608:	80 00       	ld.sh	r0,r0[0x0]
8000460a:	45 78       	lddsp	r8,sp[0x15c]

8000460c <init_dbg_rs232>:
//! ASCII representation of hexadecimal digits.
static const char HEX_DIGITS[16] = "0123456789ABCDEF";


void init_dbg_rs232(long pba_hz)
{
8000460c:	eb cd 40 80 	pushm	r7,lr
80004610:	1a 97       	mov	r7,sp
80004612:	20 1d       	sub	sp,4
80004614:	ef 4c ff fc 	st.w	r7[-4],r12
  init_dbg_rs232_ex(DBG_USART_BAUDRATE, pba_hz);
80004618:	ee fb ff fc 	ld.w	r11,r7[-4]
8000461c:	e0 6c e1 00 	mov	r12,57600
80004620:	f0 1f 00 03 	mcall	8000462c <init_dbg_rs232+0x20>
}
80004624:	2f fd       	sub	sp,-4
80004626:	e3 cd 80 80 	ldm	sp++,r7,pc
8000462a:	00 00       	add	r0,r0
8000462c:	80 00       	ld.sh	r0,r0[0x0]
8000462e:	46 30       	lddsp	r0,sp[0x18c]

80004630 <init_dbg_rs232_ex>:


void init_dbg_rs232_ex(unsigned long baudrate, long pba_hz)
{
80004630:	eb cd 40 80 	pushm	r7,lr
80004634:	1a 97       	mov	r7,sp
80004636:	20 5d       	sub	sp,20
80004638:	ef 4c ff f0 	st.w	r7[-16],r12
8000463c:	ef 4b ff ec 	st.w	r7[-20],r11
    .baudrate = baudrate,
    .charlength = 8,
    .paritytype = USART_NO_PARITY,
    .stopbits = USART_1_STOPBIT,
    .channelmode = USART_NORMAL_CHMODE
  };
80004640:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004644:	ef 48 ff f4 	st.w	r7[-12],r8
80004648:	30 88       	mov	r8,8
8000464a:	ef 68 ff f8 	st.b	r7[-8],r8
8000464e:	30 48       	mov	r8,4
80004650:	ef 68 ff f9 	st.b	r7[-7],r8
80004654:	30 08       	mov	r8,0
80004656:	ef 58 ff fa 	st.h	r7[-6],r8
8000465a:	30 08       	mov	r8,0
8000465c:	ef 68 ff fc 	st.b	r7[-4],r8

  // Setup GPIO for debug USART.
  gpio_enable_module(DBG_USART_GPIO_MAP,
80004660:	30 2b       	mov	r11,2
80004662:	48 8c       	lddpc	r12,80004680 <init_dbg_rs232_ex+0x50>
80004664:	f0 1f 00 08 	mcall	80004684 <init_dbg_rs232_ex+0x54>
                     sizeof(DBG_USART_GPIO_MAP) / sizeof(DBG_USART_GPIO_MAP[0]));

  // Initialize it in RS232 mode.
  usart_init_rs232(DBG_USART, &dbg_usart_options, pba_hz);
80004668:	ee c8 00 0c 	sub	r8,r7,12
8000466c:	ee fa ff ec 	ld.w	r10,r7[-20]
80004670:	10 9b       	mov	r11,r8
80004672:	fe 7c 18 00 	mov	r12,-59392
80004676:	f0 1f 00 05 	mcall	80004688 <init_dbg_rs232_ex+0x58>
}
8000467a:	2f bd       	sub	sp,-20
8000467c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004680:	80 00       	ld.sh	r0,r0[0x0]
80004682:	ba 00       	st.h	sp[0x0],r0
80004684:	80 00       	ld.sh	r0,r0[0x0]
80004686:	49 d0       	lddpc	r0,800046f8 <board_init+0x20>
80004688:	80 00       	ld.sh	r0,r0[0x0]
8000468a:	43 c4       	lddsp	r4,sp[0xf0]

8000468c <print_dbg>:


void print_dbg(const char *str)
{
8000468c:	eb cd 40 80 	pushm	r7,lr
80004690:	1a 97       	mov	r7,sp
80004692:	20 1d       	sub	sp,4
80004694:	ef 4c ff fc 	st.w	r7[-4],r12
  // Redirection to the debug USART.
  print(DBG_USART, str);
80004698:	ee fb ff fc 	ld.w	r11,r7[-4]
8000469c:	fe 7c 18 00 	mov	r12,-59392
800046a0:	f0 1f 00 03 	mcall	800046ac <print_dbg+0x20>
}
800046a4:	2f fd       	sub	sp,-4
800046a6:	e3 cd 80 80 	ldm	sp++,r7,pc
800046aa:	00 00       	add	r0,r0
800046ac:	80 00       	ld.sh	r0,r0[0x0]
800046ae:	46 b0       	lddsp	r0,sp[0x1ac]

800046b0 <print>:
  print_hex(DBG_USART, n);
}


void print(volatile avr32_usart_t *usart, const char *str)
{
800046b0:	eb cd 40 80 	pushm	r7,lr
800046b4:	1a 97       	mov	r7,sp
800046b6:	20 2d       	sub	sp,8
800046b8:	ef 4c ff fc 	st.w	r7[-4],r12
800046bc:	ef 4b ff f8 	st.w	r7[-8],r11
  // Invoke the USART driver to transmit the input string with the given USART.
  usart_write_line(usart, str);
800046c0:	ee fb ff f8 	ld.w	r11,r7[-8]
800046c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800046c8:	f0 1f 00 03 	mcall	800046d4 <print+0x24>
}
800046cc:	2f ed       	sub	sp,-8
800046ce:	e3 cd 80 80 	ldm	sp++,r7,pc
800046d2:	00 00       	add	r0,r0
800046d4:	80 00       	ld.sh	r0,r0[0x0]
800046d6:	45 cc       	lddsp	r12,sp[0x170]

800046d8 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
800046d8:	eb cd 40 80 	pushm	r7,lr
800046dc:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800046de:	30 3b       	mov	r11,3
800046e0:	33 bc       	mov	r12,59
800046e2:	f0 1f 00 2d 	mcall	80004794 <board_init+0xbc>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800046e6:	30 3b       	mov	r11,3
800046e8:	33 cc       	mov	r12,60
800046ea:	f0 1f 00 2b 	mcall	80004794 <board_init+0xbc>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800046ee:	30 3b       	mov	r11,3
800046f0:	33 dc       	mov	r12,61
800046f2:	f0 1f 00 29 	mcall	80004794 <board_init+0xbc>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800046f6:	30 3b       	mov	r11,3
800046f8:	33 ec       	mov	r12,62
800046fa:	f0 1f 00 27 	mcall	80004794 <board_init+0xbc>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
800046fe:	30 3b       	mov	r11,3
80004700:	33 3c       	mov	r12,51
80004702:	f0 1f 00 25 	mcall	80004794 <board_init+0xbc>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004706:	30 3b       	mov	r11,3
80004708:	33 4c       	mov	r12,52
8000470a:	f0 1f 00 23 	mcall	80004794 <board_init+0xbc>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
8000470e:	30 3b       	mov	r11,3
80004710:	33 5c       	mov	r12,53
80004712:	f0 1f 00 21 	mcall	80004794 <board_init+0xbc>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80004716:	30 3b       	mov	r11,3
80004718:	33 6c       	mov	r12,54
8000471a:	f0 1f 00 1f 	mcall	80004794 <board_init+0xbc>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
8000471e:	30 0b       	mov	r11,0
80004720:	35 8c       	mov	r12,88
80004722:	f0 1f 00 1d 	mcall	80004794 <board_init+0xbc>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
80004726:	30 0b       	mov	r11,0
80004728:	35 5c       	mov	r12,85
8000472a:	f0 1f 00 1b 	mcall	80004794 <board_init+0xbc>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
8000472e:	30 0b       	mov	r11,0
80004730:	35 2c       	mov	r12,82
80004732:	f0 1f 00 19 	mcall	80004794 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
80004736:	30 0b       	mov	r11,0
80004738:	31 4c       	mov	r12,20
8000473a:	f0 1f 00 17 	mcall	80004794 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
8000473e:	30 0b       	mov	r11,0
80004740:	31 9c       	mov	r12,25
80004742:	f0 1f 00 15 	mcall	80004794 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
80004746:	30 0b       	mov	r11,0
80004748:	31 ac       	mov	r12,26
8000474a:	f0 1f 00 13 	mcall	80004794 <board_init+0xbc>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
8000474e:	30 0b       	mov	r11,0
80004750:	31 bc       	mov	r12,27
80004752:	f0 1f 00 11 	mcall	80004794 <board_init+0xbc>
		MREPEAT(AT45DBX_MEM_CNT, AT45DBX_ENABLE_NPCS_PIN, ~)
#  undef AT45DBX_ENABLE_NPCS_PIN
	};

	// Assign I/Os to SPI.
	gpio_enable_module(AT45DBX_SPI_GPIO_MAP,
80004756:	30 4b       	mov	r11,4
80004758:	49 0c       	lddpc	r12,80004798 <board_init+0xc0>
8000475a:	f0 1f 00 11 	mcall	8000479c <board_init+0xc4>
		{SD_MMC_SPI_MOSI_PIN, SD_MMC_SPI_MOSI_FUNCTION},
		{SD_MMC_SPI_NPCS_PIN, SD_MMC_SPI_NPCS_FUNCTION},
	};

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
8000475e:	30 4b       	mov	r11,4
80004760:	49 0c       	lddpc	r12,800047a0 <board_init+0xc8>
80004762:	f0 1f 00 0f 	mcall	8000479c <board_init+0xc4>

	// Configure SD/MMC card detect and write protect pins
#  define SD_MMC_CONFIGURE_CD_WP_PIN(slot, unused) \
	gpio_configure_pin(SD_MMC_##slot##_CD_GPIO,GPIO_DIR_INPUT); \
	gpio_configure_pin(SD_MMC_##slot##_WP_GPIO,GPIO_DIR_INPUT);
	MREPEAT(SD_MMC_SPI_MEM_CNT, SD_MMC_CONFIGURE_CD_WP_PIN, ~)
80004766:	30 0b       	mov	r11,0
80004768:	30 2c       	mov	r12,2
8000476a:	f0 1f 00 0b 	mcall	80004794 <board_init+0xbc>
8000476e:	30 0b       	mov	r11,0
80004770:	30 7c       	mov	r12,7
80004772:	f0 1f 00 09 	mcall	80004794 <board_init+0xbc>
		{AVR32_TWI_SDA_0_0_PIN, AVR32_TWI_SDA_0_0_FUNCTION},
		{AVR32_TWI_SCL_0_0_PIN, AVR32_TWI_SCL_0_0_FUNCTION},
	};

	// TWI gpio pins configuration
	gpio_enable_module(TWI_GPIO_MAP,
80004776:	30 2b       	mov	r11,2
80004778:	48 bc       	lddpc	r12,800047a4 <board_init+0xcc>
8000477a:	f0 1f 00 09 	mcall	8000479c <board_init+0xc4>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT_GPIO_MAP = {
		{USART_RXD_PIN, USART_RXD_FUNCTION },
		{USART_TXD_PIN, USART_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT_GPIO_MAP,
8000477e:	30 2b       	mov	r11,2
80004780:	48 ac       	lddpc	r12,800047a8 <board_init+0xd0>
80004782:	f0 1f 00 07 	mcall	8000479c <board_init+0xc4>
	// USART GPIO pin configuration.
	static const gpio_map_t COMPORT0_GPIO_MAP = {
		{USART0_RXD_PIN, USART0_RXD_FUNCTION },
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
80004786:	30 2b       	mov	r11,2
80004788:	48 9c       	lddpc	r12,800047ac <board_init+0xd4>
8000478a:	f0 1f 00 05 	mcall	8000479c <board_init+0xc4>
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
8000478e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004792:	00 00       	add	r0,r0
80004794:	80 00       	ld.sh	r0,r0[0x0]
80004796:	4b 50       	lddpc	r0,80004868 <LED_On>
80004798:	80 00       	ld.sh	r0,r0[0x0]
8000479a:	ba 10       	st.h	sp[0x2],r0
8000479c:	80 00       	ld.sh	r0,r0[0x0]
8000479e:	49 d0       	lddpc	r0,80004810 <LED_Off+0x60>
800047a0:	80 00       	ld.sh	r0,r0[0x0]
800047a2:	ba 30       	st.h	sp[0x6],r0
800047a4:	80 00       	ld.sh	r0,r0[0x0]
800047a6:	ba 50       	st.h	sp[0xa],r0
800047a8:	80 00       	ld.sh	r0,r0[0x0]
800047aa:	ba 60       	st.h	sp[0xc],r0
800047ac:	80 00       	ld.sh	r0,r0[0x0]
800047ae:	ba 70       	st.h	sp[0xe],r0

800047b0 <LED_Off>:
  return Tst_bits(LED_State, leds);
}


void LED_Off(U32 leds)
{
800047b0:	eb cd 40 80 	pushm	r7,lr
800047b4:	1a 97       	mov	r7,sp
800047b6:	20 4d       	sub	sp,16
800047b8:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
800047bc:	4a 98       	lddpc	r8,80004860 <LED_Off+0xb0>
800047be:	21 08       	sub	r8,16
800047c0:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
800047c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800047c8:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
800047cc:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
800047d0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800047d4:	f0 09 11 ff 	rsub	r9,r8,-1
800047d8:	4a 38       	lddpc	r8,80004864 <LED_Off+0xb4>
800047da:	70 08       	ld.w	r8,r8[0x0]
800047dc:	10 69       	and	r9,r8
800047de:	4a 28       	lddpc	r8,80004864 <LED_Off+0xb4>
800047e0:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
800047e2:	c3 78       	rjmp	80004850 <LED_Off+0xa0>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
800047e4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800047e8:	5c 98       	brev	r8
800047ea:	f0 08 12 00 	clz	r8,r8
800047ee:	5c 58       	castu.b	r8
800047f0:	2f f8       	sub	r8,-1
800047f2:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
800047f6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800047fa:	a5 68       	lsl	r8,0x4
800047fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004800:	f2 08 00 08 	add	r8,r9,r8
80004804:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80004808:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000480c:	70 08       	ld.w	r8,r8[0x0]
8000480e:	a9 68       	lsl	r8,0x8
80004810:	e0 28 f0 00 	sub	r8,61440
80004814:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80004818:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000481c:	70 19       	ld.w	r9,r8[0x4]
8000481e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004822:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80004826:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000482a:	70 19       	ld.w	r9,r8[0x4]
8000482c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004830:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80004834:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004838:	70 19       	ld.w	r9,r8[0x4]
8000483a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000483e:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80004840:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004844:	ee f9 ff f0 	ld.w	r9,r7[-16]
80004848:	f2 08 0a 48 	lsr	r8,r9,r8
8000484c:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80004850:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004854:	58 08       	cp.w	r8,0
80004856:	cc 71       	brne	800047e4 <LED_Off+0x34>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
80004858:	2f cd       	sub	sp,-16
8000485a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000485e:	00 00       	add	r0,r0
80004860:	80 00       	ld.sh	r0,r0[0x0]
80004862:	ba 80       	st.b	sp[0x0],r0
80004864:	00 00       	add	r0,r0
80004866:	00 0c       	add	r12,r0

80004868 <LED_On>:


void LED_On(U32 leds)
{
80004868:	eb cd 40 80 	pushm	r7,lr
8000486c:	1a 97       	mov	r7,sp
8000486e:	20 4d       	sub	sp,16
80004870:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80004874:	4a 88       	lddpc	r8,80004914 <LED_On+0xac>
80004876:	21 08       	sub	r8,16
80004878:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000487c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004880:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80004884:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);
80004888:	4a 48       	lddpc	r8,80004918 <LED_On+0xb0>
8000488a:	70 09       	ld.w	r9,r8[0x0]
8000488c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004890:	10 49       	or	r9,r8
80004892:	4a 28       	lddpc	r8,80004918 <LED_On+0xb0>
80004894:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80004896:	c3 78       	rjmp	80004904 <LED_On+0x9c>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80004898:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000489c:	5c 98       	brev	r8
8000489e:	f0 08 12 00 	clz	r8,r8
800048a2:	5c 58       	castu.b	r8
800048a4:	2f f8       	sub	r8,-1
800048a6:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
800048aa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800048ae:	a5 68       	lsl	r8,0x4
800048b0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800048b4:	f2 08 00 08 	add	r8,r9,r8
800048b8:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800048bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048c0:	70 08       	ld.w	r8,r8[0x0]
800048c2:	a9 68       	lsl	r8,0x8
800048c4:	e0 28 f0 00 	sub	r8,61440
800048c8:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800048cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048d0:	70 19       	ld.w	r9,r8[0x4]
800048d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048d6:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800048da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048de:	70 19       	ld.w	r9,r8[0x4]
800048e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048e4:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800048e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800048ec:	70 19       	ld.w	r9,r8[0x4]
800048ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800048f2:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
800048f4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800048f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800048fc:	f2 08 0a 48 	lsr	r8,r9,r8
80004900:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Set_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80004904:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004908:	58 08       	cp.w	r8,0
8000490a:	cc 71       	brne	80004898 <LED_On+0x30>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8000490c:	2f cd       	sub	sp,-16
8000490e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004912:	00 00       	add	r0,r0
80004914:	80 00       	ld.sh	r0,r0[0x0]
80004916:	ba 80       	st.b	sp[0x0],r0
80004918:	00 00       	add	r0,r0
8000491a:	00 0c       	add	r12,r0

8000491c <LED_Toggle>:


void LED_Toggle(U32 leds)
{
8000491c:	eb cd 40 80 	pushm	r7,lr
80004920:	1a 97       	mov	r7,sp
80004922:	20 4d       	sub	sp,16
80004924:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80004928:	4a 88       	lddpc	r8,800049c8 <LED_Toggle+0xac>
8000492a:	21 08       	sub	r8,16
8000492c:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80004930:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004934:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80004938:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);
8000493c:	4a 48       	lddpc	r8,800049cc <LED_Toggle+0xb0>
8000493e:	70 09       	ld.w	r9,r8[0x0]
80004940:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004944:	10 59       	eor	r9,r8
80004946:	4a 28       	lddpc	r8,800049cc <LED_Toggle+0xb0>
80004948:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
8000494a:	c3 78       	rjmp	800049b8 <LED_Toggle+0x9c>
  {
    // Select the next specified LED and toggle it.
    led_shift = 1 + ctz(leds);
8000494c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004950:	5c 98       	brev	r8
80004952:	f0 08 12 00 	clz	r8,r8
80004956:	5c 58       	castu.b	r8
80004958:	2f f8       	sub	r8,-1
8000495a:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8000495e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004962:	a5 68       	lsl	r8,0x4
80004964:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004968:	f2 08 00 08 	add	r8,r9,r8
8000496c:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80004970:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004974:	70 08       	ld.w	r8,r8[0x0]
80004976:	a9 68       	lsl	r8,0x8
80004978:	e0 28 f0 00 	sub	r8,61440
8000497c:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
80004980:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004984:	70 19       	ld.w	r9,r8[0x4]
80004986:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000498a:	f1 49 00 5c 	st.w	r8[92],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8000498e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004992:	70 19       	ld.w	r9,r8[0x4]
80004994:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004998:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8000499c:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049a0:	70 19       	ld.w	r9,r8[0x4]
800049a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800049a6:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
800049a8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800049ac:	ee f9 ff f0 	ld.w	r9,r7[-16]
800049b0:	f2 08 0a 48 	lsr	r8,r9,r8
800049b4:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
800049b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800049bc:	58 08       	cp.w	r8,0
800049be:	cc 71       	brne	8000494c <LED_Toggle+0x30>
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
800049c0:	2f cd       	sub	sp,-16
800049c2:	e3 cd 80 80 	ldm	sp++,r7,pc
800049c6:	00 00       	add	r0,r0
800049c8:	80 00       	ld.sh	r0,r0[0x0]
800049ca:	ba 80       	st.b	sp[0x0],r0
800049cc:	00 00       	add	r0,r0
800049ce:	00 0c       	add	r12,r0

800049d0 <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
800049d0:	eb cd 40 80 	pushm	r7,lr
800049d4:	1a 97       	mov	r7,sp
800049d6:	20 4d       	sub	sp,16
800049d8:	ef 4c ff f4 	st.w	r7[-12],r12
800049dc:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
800049e0:	30 08       	mov	r8,0
800049e2:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
800049e6:	30 08       	mov	r8,0
800049e8:	ef 48 ff fc 	st.w	r7[-4],r8
800049ec:	c1 c8       	rjmp	80004a24 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
800049ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049f2:	70 19       	ld.w	r9,r8[0x4]
800049f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800049f8:	70 08       	ld.w	r8,r8[0x0]
800049fa:	12 9b       	mov	r11,r9
800049fc:	10 9c       	mov	r12,r8
800049fe:	f0 1f 00 10 	mcall	80004a3c <gpio_enable_module+0x6c>
80004a02:	18 98       	mov	r8,r12
80004a04:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004a08:	f3 e8 10 08 	or	r8,r9,r8
80004a0c:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
80004a10:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a14:	2f 88       	sub	r8,-8
80004a16:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80004a1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a1e:	2f f8       	sub	r8,-1
80004a20:	ef 48 ff fc 	st.w	r7[-4],r8
80004a24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004a28:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004a2c:	10 39       	cp.w	r9,r8
80004a2e:	ce 03       	brcs	800049ee <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
80004a30:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80004a34:	10 9c       	mov	r12,r8
80004a36:	2f cd       	sub	sp,-16
80004a38:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a3c:	80 00       	ld.sh	r0,r0[0x0]
80004a3e:	4a 40       	lddpc	r0,80004acc <gpio_enable_module_pin+0x8c>

80004a40 <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
80004a40:	eb cd 40 80 	pushm	r7,lr
80004a44:	1a 97       	mov	r7,sp
80004a46:	20 3d       	sub	sp,12
80004a48:	ef 4c ff f8 	st.w	r7[-8],r12
80004a4c:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004a50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a54:	a5 98       	lsr	r8,0x5
80004a56:	a9 68       	lsl	r8,0x8
80004a58:	e0 28 f0 00 	sub	r8,61440
80004a5c:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
80004a60:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004a64:	58 18       	cp.w	r8,1
80004a66:	c1 e0       	breq	80004aa2 <gpio_enable_module_pin+0x62>
80004a68:	c0 63       	brcs	80004a74 <gpio_enable_module_pin+0x34>
80004a6a:	58 28       	cp.w	r8,2
80004a6c:	c3 20       	breq	80004ad0 <gpio_enable_module_pin+0x90>
80004a6e:	58 38       	cp.w	r8,3
80004a70:	c4 70       	breq	80004afe <gpio_enable_module_pin+0xbe>
80004a72:	c5 d8       	rjmp	80004b2c <gpio_enable_module_pin+0xec>
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004a74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a78:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a7c:	30 19       	mov	r9,1
80004a7e:	f2 08 09 48 	lsl	r8,r9,r8
80004a82:	10 99       	mov	r9,r8
80004a84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a88:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004a8a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004a8e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004a92:	30 19       	mov	r9,1
80004a94:	f2 08 09 48 	lsl	r8,r9,r8
80004a98:	10 99       	mov	r9,r8
80004a9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004a9e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80004aa0:	c4 88       	rjmp	80004b30 <gpio_enable_module_pin+0xf0>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004aa2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aa6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004aaa:	30 19       	mov	r9,1
80004aac:	f2 08 09 48 	lsl	r8,r9,r8
80004ab0:	10 99       	mov	r9,r8
80004ab2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ab6:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80004ab8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004abc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004ac0:	30 19       	mov	r9,1
80004ac2:	f2 08 09 48 	lsl	r8,r9,r8
80004ac6:	10 99       	mov	r9,r8
80004ac8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004acc:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80004ace:	c3 18       	rjmp	80004b30 <gpio_enable_module_pin+0xf0>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
80004ad0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ad4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004ad8:	30 19       	mov	r9,1
80004ada:	f2 08 09 48 	lsl	r8,r9,r8
80004ade:	10 99       	mov	r9,r8
80004ae0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ae4:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004ae6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004aea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004aee:	30 19       	mov	r9,1
80004af0:	f2 08 09 48 	lsl	r8,r9,r8
80004af4:	10 99       	mov	r9,r8
80004af6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004afa:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80004afc:	c1 a8       	rjmp	80004b30 <gpio_enable_module_pin+0xf0>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
80004afe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b02:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b06:	30 19       	mov	r9,1
80004b08:	f2 08 09 48 	lsl	r8,r9,r8
80004b0c:	10 99       	mov	r9,r8
80004b0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b12:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80004b14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b18:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b1c:	30 19       	mov	r9,1
80004b1e:	f2 08 09 48 	lsl	r8,r9,r8
80004b22:	10 99       	mov	r9,r8
80004b24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b28:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80004b2a:	c0 38       	rjmp	80004b30 <gpio_enable_module_pin+0xf0>
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
80004b2c:	30 18       	mov	r8,1
80004b2e:	c0 d8       	rjmp	80004b48 <gpio_enable_module_pin+0x108>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
80004b30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b38:	30 19       	mov	r9,1
80004b3a:	f2 08 09 48 	lsl	r8,r9,r8
80004b3e:	10 99       	mov	r9,r8
80004b40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b44:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
80004b46:	30 08       	mov	r8,0
}
80004b48:	10 9c       	mov	r12,r8
80004b4a:	2f dd       	sub	sp,-12
80004b4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004b50 <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
80004b50:	eb cd 40 80 	pushm	r7,lr
80004b54:	1a 97       	mov	r7,sp
80004b56:	20 3d       	sub	sp,12
80004b58:	ef 4c ff f8 	st.w	r7[-8],r12
80004b5c:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004b60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b64:	a5 98       	lsr	r8,0x5
80004b66:	a9 68       	lsl	r8,0x8
80004b68:	e0 28 f0 00 	sub	r8,61440
80004b6c:	ef 48 ff fc 	st.w	r7[-4],r8
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
80004b70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004b74:	e2 18 00 04 	andl	r8,0x4,COH
80004b78:	c0 e0       	breq	80004b94 <gpio_configure_pin+0x44>
		gpio_port->puers = 1 << (pin & 0x1F);
80004b7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b7e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b82:	30 19       	mov	r9,1
80004b84:	f2 08 09 48 	lsl	r8,r9,r8
80004b88:	10 99       	mov	r9,r8
80004b8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004b8e:	f1 49 00 74 	st.w	r8[116],r9
80004b92:	c0 d8       	rjmp	80004bac <gpio_configure_pin+0x5c>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
80004b94:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004b98:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004b9c:	30 19       	mov	r9,1
80004b9e:	f2 08 09 48 	lsl	r8,r9,r8
80004ba2:	10 99       	mov	r9,r8
80004ba4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ba8:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80004bac:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bb0:	e2 18 00 80 	andl	r8,0x80,COH
80004bb4:	c5 a0       	breq	80004c68 <gpio_configure_pin+0x118>
		if (flags & GPIO_BOTHEDGES) {
80004bb6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bba:	e2 18 01 80 	andl	r8,0x180,COH
80004bbe:	c1 a0       	breq	80004bf2 <gpio_configure_pin+0xa2>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004bc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004bc4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004bc8:	30 19       	mov	r9,1
80004bca:	f2 08 09 48 	lsl	r8,r9,r8
80004bce:	10 99       	mov	r9,r8
80004bd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bd4:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80004bd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004bdc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004be0:	30 19       	mov	r9,1
80004be2:	f2 08 09 48 	lsl	r8,r9,r8
80004be6:	10 99       	mov	r9,r8
80004be8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004bec:	f1 49 00 b8 	st.w	r8[184],r9
80004bf0:	c3 c8       	rjmp	80004c68 <gpio_configure_pin+0x118>
		} else if (flags & GPIO_RISING) {
80004bf2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004bf6:	e2 18 02 80 	andl	r8,0x280,COH
80004bfa:	c1 a0       	breq	80004c2e <gpio_configure_pin+0xde>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80004bfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c00:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004c04:	30 19       	mov	r9,1
80004c06:	f2 08 09 48 	lsl	r8,r9,r8
80004c0a:	10 99       	mov	r9,r8
80004c0c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c10:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80004c14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c18:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004c1c:	30 19       	mov	r9,1
80004c1e:	f2 08 09 48 	lsl	r8,r9,r8
80004c22:	10 99       	mov	r9,r8
80004c24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c28:	f1 49 00 b8 	st.w	r8[184],r9
80004c2c:	c1 e8       	rjmp	80004c68 <gpio_configure_pin+0x118>
		} else if (flags & GPIO_FALLING) {
80004c2e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004c32:	e2 18 03 80 	andl	r8,0x380,COH
80004c36:	c1 90       	breq	80004c68 <gpio_configure_pin+0x118>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80004c38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c3c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004c40:	30 19       	mov	r9,1
80004c42:	f2 08 09 48 	lsl	r8,r9,r8
80004c46:	10 99       	mov	r9,r8
80004c48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c4c:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
80004c50:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c54:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004c58:	30 19       	mov	r9,1
80004c5a:	f2 08 09 48 	lsl	r8,r9,r8
80004c5e:	10 99       	mov	r9,r8
80004c60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c64:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
80004c68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004c6c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004c70:	5c 58       	castu.b	r8
80004c72:	c2 c0       	breq	80004cca <gpio_configure_pin+0x17a>
		if (flags & GPIO_INIT_HIGH) {
80004c74:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004c78:	e2 18 00 02 	andl	r8,0x2,COH
80004c7c:	c0 e0       	breq	80004c98 <gpio_configure_pin+0x148>
			gpio_port->ovrs = 1 << (pin & 0x1F);
80004c7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c82:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004c86:	30 19       	mov	r9,1
80004c88:	f2 08 09 48 	lsl	r8,r9,r8
80004c8c:	10 99       	mov	r9,r8
80004c8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004c92:	f1 49 00 54 	st.w	r8[84],r9
80004c96:	c0 d8       	rjmp	80004cb0 <gpio_configure_pin+0x160>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
80004c98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004c9c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004ca0:	30 19       	mov	r9,1
80004ca2:	f2 08 09 48 	lsl	r8,r9,r8
80004ca6:	10 99       	mov	r9,r8
80004ca8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cac:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
80004cb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004cb4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004cb8:	30 19       	mov	r9,1
80004cba:	f2 08 09 48 	lsl	r8,r9,r8
80004cbe:	10 99       	mov	r9,r8
80004cc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cc4:	f1 49 00 44 	st.w	r8[68],r9
80004cc8:	c0 d8       	rjmp	80004ce2 <gpio_configure_pin+0x192>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80004cca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004cce:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004cd2:	30 19       	mov	r9,1
80004cd4:	f2 08 09 48 	lsl	r8,r9,r8
80004cd8:	10 99       	mov	r9,r8
80004cda:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cde:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004ce2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ce6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004cea:	30 19       	mov	r9,1
80004cec:	f2 08 09 48 	lsl	r8,r9,r8
80004cf0:	10 99       	mov	r9,r8
80004cf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004cf6:	91 19       	st.w	r8[0x4],r9
}
80004cf8:	2f dd       	sub	sp,-12
80004cfa:	e3 cd 80 80 	ldm	sp++,r7,pc

80004cfe <gpio_set_gpio_pin>:
/** \brief Drives a GPIO pin to 1.
 *
 * \param pin The pin number.
 */
void gpio_set_gpio_pin(uint32_t pin)
{
80004cfe:	eb cd 40 80 	pushm	r7,lr
80004d02:	1a 97       	mov	r7,sp
80004d04:	20 2d       	sub	sp,8
80004d06:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004d0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004d0e:	a5 98       	lsr	r8,0x5
80004d10:	a9 68       	lsl	r8,0x8
80004d12:	e0 28 f0 00 	sub	r8,61440
80004d16:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 1. */
	gpio_port->ovrs  = 1 << (pin & 0x1F);
80004d1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004d1e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004d22:	30 19       	mov	r9,1
80004d24:	f2 08 09 48 	lsl	r8,r9,r8
80004d28:	10 99       	mov	r9,r8
80004d2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d2e:	f1 49 00 54 	st.w	r8[84],r9
	/* The GPIO output driver is enabled for that pin. */ 
	gpio_port->oders = 1 << (pin & 0x1F);
80004d32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004d36:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004d3a:	30 19       	mov	r9,1
80004d3c:	f2 08 09 48 	lsl	r8,r9,r8
80004d40:	10 99       	mov	r9,r8
80004d42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d46:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004d4a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004d4e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004d52:	30 19       	mov	r9,1
80004d54:	f2 08 09 48 	lsl	r8,r9,r8
80004d58:	10 99       	mov	r9,r8
80004d5a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d5e:	91 19       	st.w	r8[0x4],r9
}
80004d60:	2f ed       	sub	sp,-8
80004d62:	e3 cd 80 80 	ldm	sp++,r7,pc

80004d66 <gpio_clr_gpio_pin>:
/** \brief Drives a GPIO pin to 0.
 *
 * \param pin The pin number.
 */
void gpio_clr_gpio_pin(uint32_t pin)
{
80004d66:	eb cd 40 80 	pushm	r7,lr
80004d6a:	1a 97       	mov	r7,sp
80004d6c:	20 2d       	sub	sp,8
80004d6e:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004d72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004d76:	a5 98       	lsr	r8,0x5
80004d78:	a9 68       	lsl	r8,0x8
80004d7a:	e0 28 f0 00 	sub	r8,61440
80004d7e:	ef 48 ff fc 	st.w	r7[-4],r8
	
	/* Value to be driven on the I/O line: 0. */
	gpio_port->ovrc  = 1 << (pin & 0x1F);
80004d82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004d86:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004d8a:	30 19       	mov	r9,1
80004d8c:	f2 08 09 48 	lsl	r8,r9,r8
80004d90:	10 99       	mov	r9,r8
80004d92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d96:	f1 49 00 58 	st.w	r8[88],r9
	/* The GPIO output driver is enabled for that pin. */
	gpio_port->oders = 1 << (pin & 0x1F);
80004d9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004d9e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004da2:	30 19       	mov	r9,1
80004da4:	f2 08 09 48 	lsl	r8,r9,r8
80004da8:	10 99       	mov	r9,r8
80004daa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004dae:	f1 49 00 44 	st.w	r8[68],r9
	/* The GPIO module controls that pin. */
	gpio_port->gpers = 1 << (pin & 0x1F);
80004db2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004db6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004dba:	30 19       	mov	r9,1
80004dbc:	f2 08 09 48 	lsl	r8,r9,r8
80004dc0:	10 99       	mov	r9,r8
80004dc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004dc6:	91 19       	st.w	r8[0x4],r9
}
80004dc8:	2f ed       	sub	sp,-8
80004dca:	e3 cd 80 80 	ldm	sp++,r7,pc

80004dce <gpio_configure_edge_detector>:
 *             \ref GPIO_RISING_EDGE or \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static uint32_t gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
80004dce:	eb cd 40 80 	pushm	r7,lr
80004dd2:	1a 97       	mov	r7,sp
80004dd4:	20 3d       	sub	sp,12
80004dd6:	ef 4c ff f8 	st.w	r7[-8],r12
80004dda:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004dde:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004de2:	a5 98       	lsr	r8,0x5
80004de4:	a9 68       	lsl	r8,0x8
80004de6:	e0 28 f0 00 	sub	r8,61440
80004dea:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Configure the edge detector. */
	switch (mode) {
80004dee:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004df2:	58 18       	cp.w	r8,1
80004df4:	c1 e0       	breq	80004e30 <gpio_configure_edge_detector+0x62>
80004df6:	c0 43       	brcs	80004dfe <gpio_configure_edge_detector+0x30>
80004df8:	58 28       	cp.w	r8,2
80004dfa:	c3 40       	breq	80004e62 <gpio_configure_edge_detector+0x94>
80004dfc:	c4 c8       	rjmp	80004e94 <gpio_configure_edge_detector+0xc6>
	case GPIO_PIN_CHANGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80004dfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e02:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004e06:	30 19       	mov	r9,1
80004e08:	f2 08 09 48 	lsl	r8,r9,r8
80004e0c:	10 99       	mov	r9,r8
80004e0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e12:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
80004e16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e1a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004e1e:	30 19       	mov	r9,1
80004e20:	f2 08 09 48 	lsl	r8,r9,r8
80004e24:	10 99       	mov	r9,r8
80004e26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e2a:	f1 49 00 b8 	st.w	r8[184],r9
		break;
80004e2e:	c3 58       	rjmp	80004e98 <gpio_configure_edge_detector+0xca>

	case GPIO_RISING_EDGE:
		gpio_port->imr0s = 1 << (pin & 0x1F);
80004e30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e34:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004e38:	30 19       	mov	r9,1
80004e3a:	f2 08 09 48 	lsl	r8,r9,r8
80004e3e:	10 99       	mov	r9,r8
80004e40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e44:	f1 49 00 a4 	st.w	r8[164],r9
		gpio_port->imr1c = 1 << (pin & 0x1F);
80004e48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e4c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004e50:	30 19       	mov	r9,1
80004e52:	f2 08 09 48 	lsl	r8,r9,r8
80004e56:	10 99       	mov	r9,r8
80004e58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e5c:	f1 49 00 b8 	st.w	r8[184],r9
		break;
80004e60:	c1 c8       	rjmp	80004e98 <gpio_configure_edge_detector+0xca>

	case GPIO_FALLING_EDGE:
		gpio_port->imr0c = 1 << (pin & 0x1F);
80004e62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e66:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004e6a:	30 19       	mov	r9,1
80004e6c:	f2 08 09 48 	lsl	r8,r9,r8
80004e70:	10 99       	mov	r9,r8
80004e72:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e76:	f1 49 00 a8 	st.w	r8[168],r9
		gpio_port->imr1s = 1 << (pin & 0x1F);
80004e7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004e7e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004e82:	30 19       	mov	r9,1
80004e84:	f2 08 09 48 	lsl	r8,r9,r8
80004e88:	10 99       	mov	r9,r8
80004e8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004e8e:	f1 49 00 b4 	st.w	r8[180],r9
		break;
80004e92:	c0 38       	rjmp	80004e98 <gpio_configure_edge_detector+0xca>

	default:
		return GPIO_INVALID_ARGUMENT;
80004e94:	30 18       	mov	r8,1
80004e96:	c0 28       	rjmp	80004e9a <gpio_configure_edge_detector+0xcc>
	}

	return GPIO_SUCCESS;
80004e98:	30 08       	mov	r8,0
}
80004e9a:	10 9c       	mov	r12,r8
80004e9c:	2f dd       	sub	sp,-12
80004e9e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ea2:	d7 03       	nop

80004ea4 <gpio_enable_pin_interrupt>:
 *             \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
80004ea4:	eb cd 40 80 	pushm	r7,lr
80004ea8:	1a 97       	mov	r7,sp
80004eaa:	20 3d       	sub	sp,12
80004eac:	ef 4c ff f8 	st.w	r7[-8],r12
80004eb0:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004eb4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004eb8:	a5 98       	lsr	r8,0x5
80004eba:	a9 68       	lsl	r8,0x8
80004ebc:	e0 28 f0 00 	sub	r8,61440
80004ec0:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the glitch filter. */
	gpio_port->gfers = 1 << (pin & 0x1F);
80004ec4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ec8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004ecc:	30 19       	mov	r9,1
80004ece:	f2 08 09 48 	lsl	r8,r9,r8
80004ed2:	10 99       	mov	r9,r8
80004ed4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004ed8:	f1 49 00 c4 	st.w	r8[196],r9

	/* Configure the edge detector. */
	if (GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode)) {
80004edc:	ee fb ff f4 	ld.w	r11,r7[-12]
80004ee0:	ee fc ff f8 	ld.w	r12,r7[-8]
80004ee4:	f0 1f 00 0c 	mcall	80004f14 <gpio_enable_pin_interrupt+0x70>
80004ee8:	18 98       	mov	r8,r12
80004eea:	58 18       	cp.w	r8,1
80004eec:	c0 31       	brne	80004ef2 <gpio_enable_pin_interrupt+0x4e>
		return(GPIO_INVALID_ARGUMENT);
80004eee:	30 18       	mov	r8,1
80004ef0:	c0 e8       	rjmp	80004f0c <gpio_enable_pin_interrupt+0x68>
	}

	/* Enable interrupt. */
	gpio_port->iers = 1 << (pin & 0x1F);
80004ef2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ef6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004efa:	30 19       	mov	r9,1
80004efc:	f2 08 09 48 	lsl	r8,r9,r8
80004f00:	10 99       	mov	r9,r8
80004f02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f06:	f1 49 00 94 	st.w	r8[148],r9

	return GPIO_SUCCESS;
80004f0a:	30 08       	mov	r8,0
}
80004f0c:	10 9c       	mov	r12,r8
80004f0e:	2f dd       	sub	sp,-12
80004f10:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f14:	80 00       	ld.sh	r0,r0[0x0]
80004f16:	4d ce       	lddpc	lr,80005084 <INTC_init_interrupts+0x68>

80004f18 <gpio_get_pin_interrupt_flag>:
 * \param pin The pin number.
 *
 * \return The pin interrupt flag.
 */
bool gpio_get_pin_interrupt_flag(uint32_t pin)
{
80004f18:	eb cd 40 80 	pushm	r7,lr
80004f1c:	1a 97       	mov	r7,sp
80004f1e:	20 2d       	sub	sp,8
80004f20:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004f24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f28:	a5 98       	lsr	r8,0x5
80004f2a:	a9 68       	lsl	r8,0x8
80004f2c:	e0 28 f0 00 	sub	r8,61440
80004f30:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return (gpio_port->ifr >> (pin & 0x1F)) & 1;
80004f34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f38:	f0 f9 00 d0 	ld.w	r9,r8[208]
80004f3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f40:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004f44:	f2 08 0a 48 	lsr	r8,r9,r8
80004f48:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004f4c:	5c 58       	castu.b	r8
}
80004f4e:	10 9c       	mov	r12,r8
80004f50:	2f ed       	sub	sp,-8
80004f52:	e3 cd 80 80 	ldm	sp++,r7,pc

80004f56 <gpio_clear_pin_interrupt_flag>:
/** \brief Clears the interrupt flag of a pin.
 *
 * \param pin The pin number.
 */
void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
80004f56:	eb cd 40 80 	pushm	r7,lr
80004f5a:	1a 97       	mov	r7,sp
80004f5c:	20 2d       	sub	sp,8
80004f5e:	ef 4c ff f8 	st.w	r7[-8],r12
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
80004f62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f66:	a5 98       	lsr	r8,0x5
80004f68:	a9 68       	lsl	r8,0x8
80004f6a:	e0 28 f0 00 	sub	r8,61440
80004f6e:	ef 48 ff fc 	st.w	r7[-4],r8
	gpio_port->ifrc = 1 << (pin & 0x1F);

	/* Restore interrupt enable register. */
	gpio_port->ier = gpio_ier;
#else
	gpio_port->ifrc = 1 << (pin & 0x1F);
80004f72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004f76:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80004f7a:	30 19       	mov	r9,1
80004f7c:	f2 08 09 48 	lsl	r8,r9,r8
80004f80:	10 99       	mov	r9,r8
80004f82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f86:	f1 49 00 d8 	st.w	r8[216],r9
#endif
}
80004f8a:	2f ed       	sub	sp,-8
80004f8c:	e3 cd 80 80 	ldm	sp++,r7,pc

80004f90 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80004f90:	eb cd 40 80 	pushm	r7,lr
80004f94:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80004f96:	c0 08       	rjmp	80004f96 <_unhandled_interrupt+0x6>

80004f98 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80004f98:	eb cd 40 80 	pushm	r7,lr
80004f9c:	1a 97       	mov	r7,sp
80004f9e:	20 3d       	sub	sp,12
80004fa0:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80004fa4:	fe 78 08 00 	mov	r8,-63488
80004fa8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004fac:	f2 09 11 03 	rsub	r9,r9,3
80004fb0:	28 09       	sub	r9,-128
80004fb2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004fb6:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80004fba:	fe 78 08 00 	mov	r8,-63488
80004fbe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004fc2:	2c 09       	sub	r9,-64
80004fc4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004fc8:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004fcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fd0:	58 08       	cp.w	r8,0
80004fd2:	c1 30       	breq	80004ff8 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004fd4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004fd8:	48 b8       	lddpc	r8,80005004 <_get_interrupt_handler+0x6c>
80004fda:	a1 79       	lsl	r9,0x1
80004fdc:	2f f9       	sub	r9,-1
80004fde:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004fe2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004fe6:	f0 08 12 00 	clz	r8,r8
80004fea:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
80004fee:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
80004ff0:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80004ff4:	70 08       	ld.w	r8,r8[0x0]
80004ff6:	c0 28       	rjmp	80004ffa <_get_interrupt_handler+0x62>
80004ff8:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
80004ffa:	10 9c       	mov	r12,r8
80004ffc:	2f dd       	sub	sp,-12
80004ffe:	e3 cd 80 80 	ldm	sp++,r7,pc
80005002:	00 00       	add	r0,r0
80005004:	80 00       	ld.sh	r0,r0[0x0]
80005006:	bb 00       	ld.d	r0,sp

80005008 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
80005008:	eb cd 40 80 	pushm	r7,lr
8000500c:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
8000500e:	48 38       	lddpc	r8,80005018 <INTC_init_evba+0x10>
80005010:	e3 b8 00 01 	mtsr	0x4,r8
}
80005014:	e3 cd 80 80 	ldm	sp++,r7,pc
80005018:	80 00       	ld.sh	r0,r0[0x0]
8000501a:	b8 00       	st.h	r12[0x0],r0

8000501c <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
8000501c:	eb cd 40 80 	pushm	r7,lr
80005020:	1a 97       	mov	r7,sp
80005022:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
80005024:	f0 1f 00 1f 	mcall	800050a0 <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80005028:	30 08       	mov	r8,0
8000502a:	ef 48 ff f8 	st.w	r7[-8],r8
8000502e:	c3 18       	rjmp	80005090 <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80005030:	30 08       	mov	r8,0
80005032:	ef 48 ff fc 	st.w	r7[-4],r8
80005036:	c1 48       	rjmp	8000505e <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80005038:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000503c:	49 a8       	lddpc	r8,800050a4 <INTC_init_interrupts+0x88>
8000503e:	a1 79       	lsl	r9,0x1
80005040:	2f f9       	sub	r9,-1
80005042:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80005046:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000504a:	a3 68       	lsl	r8,0x2
8000504c:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
80005050:	49 69       	lddpc	r9,800050a8 <INTC_init_interrupts+0x8c>
80005052:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80005054:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005058:	2f f8       	sub	r8,-1
8000505a:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
8000505e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005062:	49 18       	lddpc	r8,800050a4 <INTC_init_interrupts+0x88>
80005064:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80005068:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000506c:	10 39       	cp.w	r9,r8
8000506e:	fe 9b ff e5 	brhi	80005038 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
80005072:	fe 78 08 00 	mov	r8,-63488
80005076:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000507a:	48 db       	lddpc	r11,800050ac <INTC_init_interrupts+0x90>
8000507c:	48 da       	lddpc	r10,800050b0 <INTC_init_interrupts+0x94>
8000507e:	f6 0a 01 0a 	sub	r10,r11,r10
80005082:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80005086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000508a:	2f f8       	sub	r8,-1
8000508c:	ef 48 ff f8 	st.w	r7[-8],r8
80005090:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005094:	59 38       	cp.w	r8,19
80005096:	fe 98 ff cd 	brls	80005030 <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
8000509a:	2f ed       	sub	sp,-8
8000509c:	e3 cd 80 80 	ldm	sp++,r7,pc
800050a0:	80 00       	ld.sh	r0,r0[0x0]
800050a2:	50 08       	stdsp	sp[0x0],r8
800050a4:	80 00       	ld.sh	r0,r0[0x0]
800050a6:	bb 00       	ld.d	r0,sp
800050a8:	80 00       	ld.sh	r0,r0[0x0]
800050aa:	4f 90       	lddpc	r0,8000528c <init_disp+0x4c>
800050ac:	80 00       	ld.sh	r0,r0[0x0]
800050ae:	b9 04       	ld.d	r4,r12
800050b0:	80 00       	ld.sh	r0,r0[0x0]
800050b2:	b8 00       	st.h	r12[0x0],r0

800050b4 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
800050b4:	eb cd 40 80 	pushm	r7,lr
800050b8:	1a 97       	mov	r7,sp
800050ba:	20 4d       	sub	sp,16
800050bc:	ef 4c ff f8 	st.w	r7[-8],r12
800050c0:	ef 4b ff f4 	st.w	r7[-12],r11
800050c4:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
800050c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800050cc:	a5 98       	lsr	r8,0x5
800050ce:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
800050d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800050d6:	4a 78       	lddpc	r8,80005170 <INTC_register_interrupt+0xbc>
800050d8:	a1 79       	lsl	r9,0x1
800050da:	2f f9       	sub	r9,-1
800050dc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800050e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800050e4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800050e8:	a3 68       	lsl	r8,0x2
800050ea:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800050ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800050f2:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800050f4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800050f8:	58 08       	cp.w	r8,0
800050fa:	c0 c1       	brne	80005112 <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800050fc:	fe 78 08 00 	mov	r8,-63488
80005100:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005104:	49 cb       	lddpc	r11,80005174 <INTC_register_interrupt+0xc0>
80005106:	49 da       	lddpc	r10,80005178 <INTC_register_interrupt+0xc4>
80005108:	f6 0a 01 0a 	sub	r10,r11,r10
8000510c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80005110:	c2 d8       	rjmp	8000516a <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
80005112:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005116:	58 18       	cp.w	r8,1
80005118:	c0 d1       	brne	80005132 <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
8000511a:	fe 78 08 00 	mov	r8,-63488
8000511e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005122:	49 7b       	lddpc	r11,8000517c <INTC_register_interrupt+0xc8>
80005124:	49 5a       	lddpc	r10,80005178 <INTC_register_interrupt+0xc4>
80005126:	f6 0a 01 0a 	sub	r10,r11,r10
8000512a:	bf aa       	sbr	r10,0x1e
8000512c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80005130:	c1 d8       	rjmp	8000516a <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
80005132:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005136:	58 28       	cp.w	r8,2
80005138:	c0 d1       	brne	80005152 <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
8000513a:	fe 78 08 00 	mov	r8,-63488
8000513e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005142:	49 0b       	lddpc	r11,80005180 <INTC_register_interrupt+0xcc>
80005144:	48 da       	lddpc	r10,80005178 <INTC_register_interrupt+0xc4>
80005146:	f6 0a 01 0a 	sub	r10,r11,r10
8000514a:	bf ba       	sbr	r10,0x1f
8000514c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80005150:	c0 d8       	rjmp	8000516a <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
80005152:	fe 78 08 00 	mov	r8,-63488
80005156:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000515a:	48 bb       	lddpc	r11,80005184 <INTC_register_interrupt+0xd0>
8000515c:	48 7a       	lddpc	r10,80005178 <INTC_register_interrupt+0xc4>
8000515e:	f6 0a 01 0a 	sub	r10,r11,r10
80005162:	ea 1a c0 00 	orh	r10,0xc000
80005166:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
8000516a:	2f cd       	sub	sp,-16
8000516c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005170:	80 00       	ld.sh	r0,r0[0x0]
80005172:	bb 00       	ld.d	r0,sp
80005174:	80 00       	ld.sh	r0,r0[0x0]
80005176:	b9 04       	ld.d	r4,r12
80005178:	80 00       	ld.sh	r0,r0[0x0]
8000517a:	b8 00       	st.h	r12[0x0],r0
8000517c:	80 00       	ld.sh	r0,r0[0x0]
8000517e:	b9 12       	ld.d	r2,--r12
80005180:	80 00       	ld.sh	r0,r0[0x0]
80005182:	b9 20       	st.d	r12++,r0
80005184:	80 00       	ld.sh	r0,r0[0x0]
80005186:	b9 2e       	st.d	r12++,lr

80005188 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
80005188:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000518c:	fe c0 99 8c 	sub	r0,pc,-26228

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET
80005190:	e3 b0 00 01 	mtsr	0x4,r0

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
  lda.w   r1, _edata
80005194:	d5 53       	csrf	0x15
  cp      r0, r1
80005196:	30 80       	mov	r0,8
  brhs    idata_load_loop_end
80005198:	e0 61 05 18 	mov	r1,1304
  lda.w   r2, _data_lma
idata_load_loop:
  ld.d    r4, r2++
8000519c:	02 30       	cp.w	r0,r1
  st.d    r0++, r4
8000519e:	c0 72       	brcc	800051ac <idata_load_loop_end>
  cp      r0, r1
800051a0:	fe c2 90 28 	sub	r2,pc,-28632

800051a4 <idata_load_loop>:
  brlo    idata_load_loop
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
800051a4:	a5 05       	ld.d	r4,r2++
  lda.w   r1, _end
800051a6:	a1 24       	st.d	r0++,r4
  cp      r0, r1
800051a8:	02 30       	cp.w	r0,r1
  brhs    udata_clear_loop_end
800051aa:	cf d3       	brcs	800051a4 <idata_load_loop>

800051ac <idata_load_loop_end>:
  mov     r2, 0
800051ac:	e0 60 05 18 	mov	r0,1304
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
800051b0:	e0 61 06 a0 	mov	r1,1696
  cp      r0, r1
  brlo    udata_clear_loop
800051b4:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
800051b6:	c0 62       	brcc	800051c2 <udata_clear_loop_end>
800051b8:	30 02       	mov	r2,0
800051ba:	30 03       	mov	r3,0

800051bc <udata_clear_loop>:
800051bc:	a1 22       	st.d	r0++,r2
800051be:	02 30       	cp.w	r0,r1
800051c0:	cf e3       	brcs	800051bc <udata_clear_loop>

800051c2 <udata_clear_loop_end>:
800051c2:	fe cf f8 72 	sub	pc,pc,-1934
800051c6:	d7 03       	nop
800051c8:	20 20       	sub	r0,2
800051ca:	20 20       	sub	r0,2
800051cc:	20 20       	sub	r0,2
800051ce:	00 00       	add	r0,r0
800051d0:	25 6c       	sub	r12,86
800051d2:	75 00       	ld.w	r0,r10[0x40]
800051d4:	68 7a       	ld.w	r10,r4[0x1c]
800051d6:	00 00       	add	r0,r0
800051d8:	50 65       	stdsp	sp[0x18],r5
800051da:	72 69       	ld.w	r9,r9[0x18]
800051dc:	6f 64       	ld.w	r4,r7[0x58]
800051de:	3a 20       	mov	r0,-94
800051e0:	00 00       	add	r0,r0
800051e2:	00 00       	add	r0,r0
800051e4:	20 20       	sub	r0,2
800051e6:	20 20       	sub	r0,2
800051e8:	20 00       	sub	r0,0
800051ea:	00 00       	add	r0,r0
800051ec:	20 20       	sub	r0,2
800051ee:	20 20       	sub	r0,2
800051f0:	00 00       	add	r0,r0
800051f2:	00 00       	add	r0,r0
800051f4:	20 20       	sub	r0,2
800051f6:	00 00       	add	r0,r0
800051f8:	20 20       	sub	r0,2
800051fa:	20 20       	sub	r0,2
800051fc:	20 20       	sub	r0,2
800051fe:	20 20       	sub	r0,2
80005200:	20 00       	sub	r0,0
80005202:	00 00       	add	r0,r0
80005204:	25 00       	sub	r0,80
80005206:	00 00       	add	r0,r0
80005208:	46 72       	lddsp	r2,sp[0x19c]
8000520a:	65 71       	ld.w	r1,r2[0x5c]
8000520c:	75 65       	ld.w	r5,r10[0x58]
8000520e:	6e 63       	ld.w	r3,r7[0x18]
80005210:	79 3a       	ld.w	r10,r12[0x4c]
80005212:	20 00       	sub	r0,0
80005214:	44 74       	lddsp	r4,sp[0x11c]
80005216:	20 63       	sub	r3,6
80005218:	79 63       	ld.w	r3,r12[0x58]
8000521a:	6c 65       	ld.w	r5,r6[0x18]
8000521c:	3a 20       	mov	r0,-94
8000521e:	00 00       	add	r0,r0
80005220:	50 6f       	stdsp	sp[0x18],pc
80005222:	74 20       	ld.w	r0,r10[0x8]
80005224:	41 44       	lddsp	r4,sp[0x50]
80005226:	43 20       	lddsp	r0,sp[0xc8]
80005228:	76 61       	ld.w	r1,r11[0x18]
8000522a:	6c 75       	ld.w	r5,r6[0x1c]
8000522c:	65 3a       	ld.w	r10,r2[0x4c]
8000522e:	20 00       	sub	r0,0
80005230:	49 6e       	lddpc	lr,80005288 <init_disp+0x48>
80005232:	69 74       	ld.w	r4,r4[0x5c]
80005234:	69 61       	ld.w	r1,r4[0x58]
80005236:	6c 69       	ld.w	r9,r6[0x18]
80005238:	7a 65       	ld.w	r5,sp[0x18]
8000523a:	64 21       	ld.w	r1,r2[0x8]
8000523c:	0a 00       	add	r0,r5
	...

80005240 <init_disp>:
#ifndef PH_SPI_DISP_INIT_H_
#define PH_SPI_DISP_INIT_H_

//Initialize LCD display
static void init_disp (uint32_t pba_clk)
{
80005240:	eb cd 40 80 	pushm	r7,lr
80005244:	1a 97       	mov	r7,sp
80005246:	20 5d       	sub	sp,20
80005248:	ef 4c ff ec 	st.w	r7[-20],r12
		.bits         = 8,
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
	.modfdis      = 1};
8000524c:	49 a8       	lddpc	r8,800052b4 <init_disp+0x74>
8000524e:	ee ca 00 10 	sub	r10,r7,16
80005252:	10 9b       	mov	r11,r8
80005254:	f6 e8 00 00 	ld.d	r8,r11[0]
80005258:	f4 e9 00 00 	st.d	r10[0],r8
8000525c:	f6 e8 00 08 	ld.d	r8,r11[8]
80005260:	f4 e9 00 08 	st.d	r10[8],r8
	
	// Assign I/Os to SPI
	gpio_enable_module(DIP204_SPI_GPIO_MAP,
80005264:	30 4b       	mov	r11,4
80005266:	49 5c       	lddpc	r12,800052b8 <init_disp+0x78>
80005268:	f0 1f 00 15 	mcall	800052bc <init_disp+0x7c>
	sizeof(DIP204_SPI_GPIO_MAP) / sizeof(DIP204_SPI_GPIO_MAP[0]));
	
	// Initialize as master
	spi_initMaster(DIP204_SPI, &spiOptions);
8000526c:	ee c8 00 10 	sub	r8,r7,16
80005270:	10 9b       	mov	r11,r8
80005272:	fe 7c 28 00 	mov	r12,-55296
80005276:	f0 1f 00 13 	mcall	800052c0 <init_disp+0x80>

	// Set selection mode: variable_ps, pcs_decode, delay
	spi_selectionMode(DIP204_SPI, 0, 0, 0);
8000527a:	30 09       	mov	r9,0
8000527c:	30 0a       	mov	r10,0
8000527e:	30 0b       	mov	r11,0
80005280:	fe 7c 28 00 	mov	r12,-55296
80005284:	f0 1f 00 10 	mcall	800052c4 <init_disp+0x84>

	// Enable SPI
	spi_enable(DIP204_SPI);
80005288:	fe 7c 28 00 	mov	r12,-55296
8000528c:	f0 1f 00 0f 	mcall	800052c8 <init_disp+0x88>

	// setup chip registers
	spi_setupChipReg(DIP204_SPI, &spiOptions, pba_clk);
80005290:	ee c8 00 10 	sub	r8,r7,16
80005294:	ee fa ff ec 	ld.w	r10,r7[-20]
80005298:	10 9b       	mov	r11,r8
8000529a:	fe 7c 28 00 	mov	r12,-55296
8000529e:	f0 1f 00 0c 	mcall	800052cc <init_disp+0x8c>
	
	// initialize LCD
	dip204_init(backlight_IO, true);
800052a2:	30 1b       	mov	r11,1
800052a4:	30 0c       	mov	r12,0
800052a6:	f0 1f 00 0b 	mcall	800052d0 <init_disp+0x90>
	// Hide cursor
	dip204_hide_cursor();
800052aa:	f0 1f 00 0b 	mcall	800052d4 <init_disp+0x94>

}
800052ae:	2f bd       	sub	sp,-20
800052b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800052b4:	80 00       	ld.sh	r0,r0[0x0]
800052b6:	bb bc       	sbr	r12,0x1b
800052b8:	80 00       	ld.sh	r0,r0[0x0]
800052ba:	bb cc       	cbr	r12,0x1a
800052bc:	80 00       	ld.sh	r0,r0[0x0]
800052be:	49 d0       	lddpc	r0,80005330 <ph_init_pwm+0x4>
800052c0:	80 00       	ld.sh	r0,r0[0x0]
800052c2:	39 94       	mov	r4,-103
800052c4:	80 00       	ld.sh	r0,r0[0x0]
800052c6:	3a 28       	mov	r8,-94
800052c8:	80 00       	ld.sh	r0,r0[0x0]
800052ca:	3d 44       	mov	r4,-44
800052cc:	80 00       	ld.sh	r0,r0[0x0]
800052ce:	3b c0       	mov	r0,-68
800052d0:	80 00       	ld.sh	r0,r0[0x0]
800052d2:	20 30       	sub	r0,3
800052d4:	80 00       	ld.sh	r0,r0[0x0]
800052d6:	2b 0c       	sub	r12,-80

800052d8 <adc_init_pot>:
#define EXAMPLE_ADC_POTENTIOMETER_FUNCTION  AVR32_ADC_AD_1_FUNCTION



static void adc_init_pot (void)
{	
800052d8:	eb cd 40 80 	pushm	r7,lr
800052dc:	1a 97       	mov	r7,sp
800052de:	20 2d       	sub	sp,8


/** GPIO pin/adc-function map. */
const gpio_map_t ADC_GPIO_MAP = {
	{EXAMPLE_ADC_POTENTIOMETER_PIN, EXAMPLE_ADC_POTENTIOMETER_FUNCTION}
};	
800052e0:	31 68       	mov	r8,22
800052e2:	ef 48 ff f8 	st.w	r7[-8],r8
800052e6:	30 08       	mov	r8,0
800052e8:	ef 48 ff fc 	st.w	r7[-4],r8
	
/* Assign and enable GPIO pins to the ADC function. */
	gpio_enable_module(ADC_GPIO_MAP, sizeof(ADC_GPIO_MAP) /
800052ec:	ee c8 00 08 	sub	r8,r7,8
800052f0:	30 1b       	mov	r11,1
800052f2:	10 9c       	mov	r12,r8
800052f4:	f0 1f 00 0b 	mcall	80005320 <adc_init_pot+0x48>
	
	/* Configure the ADC peripheral module.
	 * Lower the ADC clock to match the ADC characteristics (because we
	 * configured the CPU clock to 12MHz, and the ADC clock characteristics are
	 *  usually lower; cf. the ADC Characteristic section in the datasheet). */
	AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
800052f8:	fe 78 3c 00 	mov	r8,-50176
800052fc:	fe 79 3c 00 	mov	r9,-50176
80005300:	72 19       	ld.w	r9,r9[0x4]
80005302:	a9 a9       	sbr	r9,0x8
80005304:	91 19       	st.w	r8[0x4],r9
	adc_configure(&AVR32_ADC);
80005306:	fe 7c 3c 00 	mov	r12,-50176
8000530a:	f0 1f 00 07 	mcall	80005324 <adc_init_pot+0x4c>

	/* Enable the ADC channels. */
	adc_enable(&AVR32_ADC, EXAMPLE_ADC_POTENTIOMETER_CHANNEL);
8000530e:	30 1b       	mov	r11,1
80005310:	fe 7c 3c 00 	mov	r12,-50176
80005314:	f0 1f 00 05 	mcall	80005328 <adc_init_pot+0x50>
}
80005318:	2f ed       	sub	sp,-8
8000531a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000531e:	00 00       	add	r0,r0
80005320:	80 00       	ld.sh	r0,r0[0x0]
80005322:	49 d0       	lddpc	r0,80005394 <ph_init_pwm+0x68>
80005324:	80 00       	ld.sh	r0,r0[0x0]
80005326:	2f 04       	sub	r4,-16
80005328:	80 00       	ld.sh	r0,r0[0x0]
8000532a:	2f 54       	sub	r4,-11

8000532c <ph_init_pwm>:
//Corresponding pin: PB22

avr32_pwm_channel_t		pwm_channel;
	
static void ph_init_pwm (void)
{
8000532c:	eb cd 40 80 	pushm	r7,lr
80005330:	1a 97       	mov	r7,sp
80005332:	20 4d       	sub	sp,16
		{
			.diva = AVR32_PWM_DIVA_CLK_OFF,
			.divb = AVR32_PWM_DIVB_CLK_OFF,
			.prea = AVR32_PWM_PREA_MCK,
			.preb = AVR32_PWM_PREB_MCK
		};
80005334:	30 08       	mov	r8,0
80005336:	ef 48 ff f0 	st.w	r7[-16],r8
8000533a:	30 08       	mov	r8,0
8000533c:	ef 48 ff f4 	st.w	r7[-12],r8
80005340:	30 08       	mov	r8,0
80005342:	ef 48 ff f8 	st.w	r7[-8],r8
80005346:	30 08       	mov	r8,0
80005348:	ef 48 ff fc 	st.w	r7[-4],r8
	//Not really important, cause we will provide new values for cdty and cprd immediately when we enter the case structure in while loop.
	
	/* With these settings, the output waveform period will be:
	 * (PBA_HZ/1)/1000 ==12kHz == (MCK/prescaler)/period, with
	 * MCK == 12000000Hz, prescaler == 1, period == 20. */
	pwm_channel.cdty = 100; /* Channel duty cycle, should be < CPRD. */
8000534c:	49 b8       	lddpc	r8,800053b8 <ph_init_pwm+0x8c>
8000534e:	36 49       	mov	r9,100
80005350:	91 19       	st.w	r8[0x4],r9
	pwm_channel.cprd = 1000; /* Channel period. */
80005352:	49 a8       	lddpc	r8,800053b8 <ph_init_pwm+0x8c>
80005354:	e0 69 03 e8 	mov	r9,1000
80005358:	91 29       	st.w	r8[0x8],r9
	pwm_channel.cupd = 0; /* Channel update is not used here. */
8000535a:	49 88       	lddpc	r8,800053b8 <ph_init_pwm+0x8c>
8000535c:	30 09       	mov	r9,0
8000535e:	91 49       	st.w	r8[0x10],r9
	pwm_channel.CMR.calg = PWM_MODE_LEFT_ALIGNED; /* Channel mode. */
80005360:	49 69       	lddpc	r9,800053b8 <ph_init_pwm+0x8c>
80005362:	72 08       	ld.w	r8,r9[0x0]
80005364:	30 0a       	mov	r10,0
80005366:	f1 da d1 01 	bfins	r8,r10,0x8,0x1
8000536a:	93 08       	st.w	r9[0x0],r8
	pwm_channel.CMR.cpol = PWM_POLARITY_LOW;      /* Channel polarity. */
8000536c:	49 39       	lddpc	r9,800053b8 <ph_init_pwm+0x8c>
8000536e:	72 08       	ld.w	r8,r9[0x0]
80005370:	30 0a       	mov	r10,0
80005372:	f1 da d1 21 	bfins	r8,r10,0x9,0x1
80005376:	93 08       	st.w	r9[0x0],r8
	pwm_channel.CMR.cpd = PWM_UPDATE_DUTY;        /* Not used the first time. */
80005378:	49 09       	lddpc	r9,800053b8 <ph_init_pwm+0x8c>
8000537a:	72 08       	ld.w	r8,r9[0x0]
8000537c:	30 0a       	mov	r10,0
8000537e:	f1 da d1 41 	bfins	r8,r10,0xa,0x1
80005382:	93 08       	st.w	r9[0x0],r8
	pwm_channel.CMR.cpre = AVR32_PWM_CPRE_MCK; /* Channel prescaler. */	//No prescaler = 1
80005384:	48 d9       	lddpc	r9,800053b8 <ph_init_pwm+0x8c>
80005386:	72 08       	ld.w	r8,r9[0x0]
80005388:	30 0a       	mov	r10,0
8000538a:	f1 da d0 04 	bfins	r8,r10,0x0,0x4
8000538e:	93 08       	st.w	r9[0x0],r8

	/* Enable the alternative mode of the output pin to connect it to the PWM
	 * module within the device. */
	gpio_enable_module_pin(EXAMPLE_PWM_PIN, EXAMPLE_PWM_FUNCTION);
80005390:	30 0b       	mov	r11,0
80005392:	33 6c       	mov	r12,54
80005394:	f0 1f 00 0a 	mcall	800053bc <ph_init_pwm+0x90>

	/* Initialize the PWM module. */
	pwm_init(&pwm_opt);
80005398:	ee c8 00 10 	sub	r8,r7,16
8000539c:	10 9c       	mov	r12,r8
8000539e:	f0 1f 00 09 	mcall	800053c0 <ph_init_pwm+0x94>

	/* Set channel configuration to channel 0. */
	pwm_channel_init(EXAMPLE_PWM_CHANNEL_ID, &pwm_channel);
800053a2:	48 6b       	lddpc	r11,800053b8 <ph_init_pwm+0x8c>
800053a4:	30 3c       	mov	r12,3
800053a6:	f0 1f 00 08 	mcall	800053c4 <ph_init_pwm+0x98>

	/* Start channel 0. */
	pwm_start_channels(1 << EXAMPLE_PWM_CHANNEL_ID);
800053aa:	30 8c       	mov	r12,8
800053ac:	f0 1f 00 07 	mcall	800053c8 <ph_init_pwm+0x9c>
	
}
800053b0:	2f cd       	sub	sp,-16
800053b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800053b6:	00 00       	add	r0,r0
800053b8:	00 00       	add	r0,r0
800053ba:	06 78       	tst	r8,r3
800053bc:	80 00       	ld.sh	r0,r0[0x0]
800053be:	4a 40       	lddpc	r0,8000544c <tc_init+0x80>
800053c0:	80 00       	ld.sh	r0,r0[0x0]
800053c2:	34 dc       	mov	r12,77
800053c4:	80 00       	ld.sh	r0,r0[0x0]
800053c6:	35 70       	mov	r0,87
800053c8:	80 00       	ld.sh	r0,r0[0x0]
800053ca:	35 f8       	mov	r8,95

800053cc <tc_init>:
 * - fPBA/8 is used as clock source for TC
 * - Enables RC compare match interrupt
 * \param tc Base address of the TC module
 */
static void tc_init(volatile avr32_tc_t *tc, uint32_t time_tick, uint32_t PBA_freq)
{
800053cc:	eb cd 40 c0 	pushm	r6-r7,lr
800053d0:	1a 97       	mov	r7,sp
800053d2:	20 5d       	sub	sp,20
800053d4:	ef 4c ff f4 	st.w	r7[-12],r12
800053d8:	ef 4b ff f0 	st.w	r7[-16],r11
800053dc:	ef 4a ff ec 	st.w	r7[-20],r10
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
800053e0:	49 db       	lddpc	r11,80005454 <tc_init+0x88>
800053e2:	ee fc ff f4 	ld.w	r12,r7[-12]
800053e6:	f0 1f 00 1d 	mcall	80005458 <tc_init+0x8c>
	*RC calculation:
	The interrupt shall occur every 20 ms, and the time is set according to datasheet of AT32UC3A0512. 
	RC_calc = (((float)PBA_freq) *(float) time_tick )/divider * 1000.0
	Then casted from float to int value
	*/
	RC_calc = (((float)PBA_freq) *(float) time_tick )/8000.0;
800053ea:	ee fc ff ec 	ld.w	r12,r7[-20]
800053ee:	f0 1f 00 1c 	mcall	8000545c <tc_init+0x90>
800053f2:	18 96       	mov	r6,r12
800053f4:	ee fc ff f0 	ld.w	r12,r7[-16]
800053f8:	f0 1f 00 19 	mcall	8000545c <tc_init+0x90>
800053fc:	18 98       	mov	r8,r12
800053fe:	10 9b       	mov	r11,r8
80005400:	0c 9c       	mov	r12,r6
80005402:	f0 1f 00 18 	mcall	80005460 <tc_init+0x94>
80005406:	18 98       	mov	r8,r12
80005408:	fc 1b 45 fa 	movh	r11,0x45fa
8000540c:	10 9c       	mov	r12,r8
8000540e:	f0 1f 00 16 	mcall	80005464 <tc_init+0x98>
80005412:	18 98       	mov	r8,r12
80005414:	ef 48 ff f8 	st.w	r7[-8],r8
	RC = (uint16_t) RC_calc;
80005418:	ee fc ff f8 	ld.w	r12,r7[-8]
8000541c:	f0 1f 00 13 	mcall	80005468 <tc_init+0x9c>
80005420:	18 98       	mov	r8,r12
80005422:	ef 58 ff fe 	st.h	r7[-2],r8
	
	
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL, RC);
80005426:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000542a:	10 9a       	mov	r10,r8
8000542c:	30 0b       	mov	r11,0
8000542e:	ee fc ff f4 	ld.w	r12,r7[-12]
80005432:	f0 1f 00 0f 	mcall	8000546c <tc_init+0xa0>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
80005436:	48 fa       	lddpc	r10,80005470 <tc_init+0xa4>
80005438:	30 0b       	mov	r11,0
8000543a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000543e:	f0 1f 00 0e 	mcall	80005474 <tc_init+0xa8>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
80005442:	30 0b       	mov	r11,0
80005444:	ee fc ff f4 	ld.w	r12,r7[-12]
80005448:	f0 1f 00 0c 	mcall	80005478 <tc_init+0xac>
}
8000544c:	2f bd       	sub	sp,-20
8000544e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005452:	00 00       	add	r0,r0
80005454:	80 00       	ld.sh	r0,r0[0x0]
80005456:	bb b0       	sbr	r0,0x1b
80005458:	80 00       	ld.sh	r0,r0[0x0]
8000545a:	40 1c       	lddsp	r12,sp[0x4]
8000545c:	80 00       	ld.sh	r0,r0[0x0]
8000545e:	64 36       	ld.w	r6,r2[0xc]
80005460:	80 00       	ld.sh	r0,r0[0x0]
80005462:	63 54       	ld.w	r4,r1[0x54]
80005464:	80 00       	ld.sh	r0,r0[0x0]
80005466:	61 f4       	ld.w	r4,r0[0x7c]
80005468:	80 00       	ld.sh	r0,r0[0x0]
8000546a:	64 a6       	ld.w	r6,r2[0x28]
8000546c:	80 00       	ld.sh	r0,r0[0x0]
8000546e:	41 e4       	lddsp	r4,sp[0x78]
80005470:	80 00       	ld.sh	r0,r0[0x0]
80005472:	bb b8       	sbr	r8,0x1b
80005474:	80 00       	ld.sh	r0,r0[0x0]
80005476:	3e 34       	mov	r4,-29
80005478:	80 00       	ld.sh	r0,r0[0x0]
8000547a:	41 70       	lddsp	r0,sp[0x5c]

8000547c <adc_2_pwm>:

float period_temp;
float cycle_glob_val=50;

uint32_t adc_2_pwm (uint32_t adc_input, uint32_t pba_clk, uint16_t freq_or_duty)
{
8000547c:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80005480:	1a 97       	mov	r7,sp
80005482:	21 8d       	sub	sp,96
80005484:	ef 4c ff a8 	st.w	r7[-88],r12
80005488:	ef 4b ff a4 	st.w	r7[-92],r11
8000548c:	14 98       	mov	r8,r10
8000548e:	ef 58 ff a0 	st.h	r7[-96],r8
	//print_dbg("This is adc2pwm function\n");
		uint32_t adc_temp=0;
80005492:	30 08       	mov	r8,0
80005494:	ef 48 ff e8 	st.w	r7[-24],r8
		uint32_t period=0;
80005498:	30 08       	mov	r8,0
8000549a:	ef 48 ff ec 	st.w	r7[-20],r8
		uint32_t cycle_temp=0;
8000549e:	30 08       	mov	r8,0
800054a0:	ef 48 ff f0 	st.w	r7[-16],r8
		uint32_t cycle_cast_temp; 
		uint32_t cycle=0;
800054a4:	30 08       	mov	r8,0
800054a6:	ef 48 ff f8 	st.w	r7[-8],r8
		uint32_t adc_cast =0; 
800054aa:	30 08       	mov	r8,0
800054ac:	ef 48 ff fc 	st.w	r7[-4],r8
		char temp_string_pwm[9];
		
		
		
		
		switch(freq_or_duty)
800054b0:	ef 18 ff a0 	ld.uh	r8,r7[-96]
800054b4:	58 08       	cp.w	r8,0
800054b6:	c0 60       	breq	800054c2 <adc_2_pwm+0x46>
800054b8:	58 18       	cp.w	r8,1
800054ba:	e0 80 00 ee 	breq	80005696 <adc_2_pwm+0x21a>
800054be:	e0 8f 01 82 	bral	800057c2 <adc_2_pwm+0x346>
			 		case 0:
						//print_dbg("This is case 0 in adc2pwm\n");
			 			/*Frequency calculation:
			 			Set frequency= ADC reading*100 (1*100= 100 Hz, 1000*100 = 100kHz)
			 			*/
			 			if (adc_input > 1000)
800054c2:	ee f8 ff a8 	ld.w	r8,r7[-88]
800054c6:	e0 48 03 e8 	cp.w	r8,1000
800054ca:	e0 88 00 07 	brls	800054d8 <adc_2_pwm+0x5c>
			 			{
							 adc_temp = 100000;
800054ce:	e0 78 86 a0 	mov	r8,100000
800054d2:	ef 48 ff e8 	st.w	r7[-24],r8
800054d6:	c0 78       	rjmp	800054e4 <adc_2_pwm+0x68>
			 			} 
						 else
			 			{
							adc_temp = (adc_input*100);	 
800054d8:	ee f8 ff a8 	ld.w	r8,r7[-88]
800054dc:	f0 08 10 64 	mul	r8,r8,100
800054e0:	ef 48 ff e8 	st.w	r7[-24],r8
			 			}
						 
				
						dip204_set_cursor_position(12,1);
800054e4:	30 1b       	mov	r11,1
800054e6:	30 cc       	mov	r12,12
800054e8:	f0 1f 00 bc 	mcall	800057d8 <adc_2_pwm+0x35c>
						dip204_write_string ("      ");
800054ec:	fe fc 02 f0 	ld.w	r12,pc[752]
800054f0:	f0 1f 00 bc 	mcall	800057e0 <adc_2_pwm+0x364>
						dip204_set_cursor_position(12,1);
800054f4:	30 1b       	mov	r11,1
800054f6:	30 cc       	mov	r12,12
800054f8:	f0 1f 00 b8 	mcall	800057d8 <adc_2_pwm+0x35c>
						sprintf (string_freq_pwm, "%lu", adc_temp);
800054fc:	ee c8 00 3c 	sub	r8,r7,60
80005500:	ee f9 ff e8 	ld.w	r9,r7[-24]
80005504:	1a d9       	st.w	--sp,r9
80005506:	fe fb 02 de 	ld.w	r11,pc[734]
8000550a:	10 9c       	mov	r12,r8
8000550c:	f0 1f 00 b7 	mcall	800057e8 <adc_2_pwm+0x36c>
80005510:	2f fd       	sub	sp,-4
						dip204_write_string (string_freq_pwm);
80005512:	ee c8 00 3c 	sub	r8,r7,60
80005516:	10 9c       	mov	r12,r8
80005518:	f0 1f 00 b2 	mcall	800057e0 <adc_2_pwm+0x364>
						dip204_set_cursor_position(18,1);
8000551c:	30 1b       	mov	r11,1
8000551e:	31 2c       	mov	r12,18
80005520:	f0 1f 00 ae 	mcall	800057d8 <adc_2_pwm+0x35c>
						dip204_write_string ("hz");
80005524:	fe fc 02 c8 	ld.w	r12,pc[712]
80005528:	f0 1f 00 ae 	mcall	800057e0 <adc_2_pwm+0x364>
				
			
						//Calculate period to get according frequency output at the pwm output
						// 	//(MCK/prescaler)/period
						// 	periodic value=((float)PBA_freq/(float)set frequency);
 						period_temp = ((float)pba_clk) / ((float)adc_temp);
8000552c:	ee fc ff a4 	ld.w	r12,r7[-92]
80005530:	f0 1f 00 b0 	mcall	800057f0 <adc_2_pwm+0x374>
80005534:	18 96       	mov	r6,r12
80005536:	ee fc ff e8 	ld.w	r12,r7[-24]
8000553a:	f0 1f 00 ae 	mcall	800057f0 <adc_2_pwm+0x374>
8000553e:	18 98       	mov	r8,r12
80005540:	10 9b       	mov	r11,r8
80005542:	0c 9c       	mov	r12,r6
80005544:	f0 1f 00 ac 	mcall	800057f4 <adc_2_pwm+0x378>
80005548:	18 98       	mov	r8,r12
8000554a:	10 99       	mov	r9,r8
8000554c:	fe f8 02 ac 	ld.w	r8,pc[684]
80005550:	91 09       	st.w	r8[0x0],r9
 						period = (uint32_t) period_temp;
80005552:	fe f8 02 a6 	ld.w	r8,pc[678]
80005556:	70 08       	ld.w	r8,r8[0x0]
80005558:	10 9c       	mov	r12,r8
8000555a:	f0 1f 00 a9 	mcall	800057fc <adc_2_pwm+0x380>
8000555e:	18 98       	mov	r8,r12
80005560:	ef 48 ff ec 	st.w	r7[-20],r8
					
						dip204_set_cursor_position(1,4);
80005564:	30 4b       	mov	r11,4
80005566:	30 1c       	mov	r12,1
80005568:	f0 1f 00 9c 	mcall	800057d8 <adc_2_pwm+0x35c>
						dip204_write_string ("Period: ");
8000556c:	fe fc 02 94 	ld.w	r12,pc[660]
80005570:	f0 1f 00 9c 	mcall	800057e0 <adc_2_pwm+0x364>
						dip204_set_cursor_position(9,4);
80005574:	30 4b       	mov	r11,4
80005576:	30 9c       	mov	r12,9
80005578:	f0 1f 00 98 	mcall	800057d8 <adc_2_pwm+0x35c>
						dip204_write_string ("      ");
8000557c:	fe fc 02 60 	ld.w	r12,pc[608]
80005580:	f0 1f 00 98 	mcall	800057e0 <adc_2_pwm+0x364>
						dip204_set_cursor_position(9,4);
80005584:	30 4b       	mov	r11,4
80005586:	30 9c       	mov	r12,9
80005588:	f0 1f 00 94 	mcall	800057d8 <adc_2_pwm+0x35c>
						sprintf (string_period_pwm, "%lu", period);
8000558c:	ee c8 00 30 	sub	r8,r7,48
80005590:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005594:	1a d9       	st.w	--sp,r9
80005596:	fe fb 02 4e 	ld.w	r11,pc[590]
8000559a:	10 9c       	mov	r12,r8
8000559c:	f0 1f 00 93 	mcall	800057e8 <adc_2_pwm+0x36c>
800055a0:	2f fd       	sub	sp,-4
						dip204_write_string (string_period_pwm);
800055a2:	ee c8 00 30 	sub	r8,r7,48
800055a6:	10 9c       	mov	r12,r8
800055a8:	f0 1f 00 8e 	mcall	800057e0 <adc_2_pwm+0x364>
						
						//Calculate duty cycle according to period and wanted duty cycled percent
						cycle_temp = ( period_temp / ( 100.0 / (100.0 - cycle_glob_val ) ));
800055ac:	fe f8 02 4c 	ld.w	r8,pc[588]
800055b0:	70 08       	ld.w	r8,r8[0x0]
800055b2:	10 9c       	mov	r12,r8
800055b4:	f0 1f 00 94 	mcall	80005804 <adc_2_pwm+0x388>
800055b8:	14 92       	mov	r2,r10
800055ba:	16 93       	mov	r3,r11
800055bc:	fe f8 02 4c 	ld.w	r8,pc[588]
800055c0:	70 08       	ld.w	r8,r8[0x0]
800055c2:	10 9c       	mov	r12,r8
800055c4:	f0 1f 00 90 	mcall	80005804 <adc_2_pwm+0x388>
800055c8:	14 98       	mov	r8,r10
800055ca:	16 99       	mov	r9,r11
800055cc:	30 0a       	mov	r10,0
800055ce:	fc 1b 40 59 	movh	r11,0x4059
800055d2:	f0 1f 00 8f 	mcall	8000580c <adc_2_pwm+0x390>
800055d6:	14 98       	mov	r8,r10
800055d8:	16 99       	mov	r9,r11
800055da:	30 0a       	mov	r10,0
800055dc:	fc 1b 40 59 	movh	r11,0x4059
800055e0:	f0 1f 00 8c 	mcall	80005810 <adc_2_pwm+0x394>
800055e4:	14 98       	mov	r8,r10
800055e6:	16 99       	mov	r9,r11
800055e8:	04 9a       	mov	r10,r2
800055ea:	06 9b       	mov	r11,r3
800055ec:	f0 1f 00 89 	mcall	80005810 <adc_2_pwm+0x394>
800055f0:	14 98       	mov	r8,r10
800055f2:	16 99       	mov	r9,r11
800055f4:	10 9a       	mov	r10,r8
800055f6:	12 9b       	mov	r11,r9
800055f8:	f0 1f 00 87 	mcall	80005814 <adc_2_pwm+0x398>
800055fc:	18 98       	mov	r8,r12
800055fe:	ef 48 ff f0 	st.w	r7[-16],r8
					
						cycle = (uint32_t) cycle_temp;
80005602:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005606:	ef 48 ff f8 	st.w	r7[-8],r8
						cycle_cast_temp = ((uint32_t)cycle_glob_val);
8000560a:	fe f8 01 fe 	ld.w	r8,pc[510]
8000560e:	70 08       	ld.w	r8,r8[0x0]
80005610:	10 9c       	mov	r12,r8
80005612:	f0 1f 00 7b 	mcall	800057fc <adc_2_pwm+0x380>
80005616:	18 98       	mov	r8,r12
80005618:	ef 48 ff f4 	st.w	r7[-12],r8
						
						dip204_set_cursor_position(16,4);
8000561c:	30 4b       	mov	r11,4
8000561e:	31 0c       	mov	r12,16
80005620:	f0 1f 00 6e 	mcall	800057d8 <adc_2_pwm+0x35c>
						dip204_write_string ("     ");
80005624:	4f dc       	lddpc	r12,80005818 <adc_2_pwm+0x39c>
80005626:	f0 1f 00 6f 	mcall	800057e0 <adc_2_pwm+0x364>
						dip204_set_cursor_position(16,4);
8000562a:	30 4b       	mov	r11,4
8000562c:	31 0c       	mov	r12,16
8000562e:	f0 1f 00 6b 	mcall	800057d8 <adc_2_pwm+0x35c>
						sprintf (temp_string_pwm, "%lu", cycle_temp);
80005632:	ee c8 00 54 	sub	r8,r7,84
80005636:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000563a:	1a d9       	st.w	--sp,r9
8000563c:	4e ab       	lddpc	r11,800057e4 <adc_2_pwm+0x368>
8000563e:	10 9c       	mov	r12,r8
80005640:	f0 1f 00 6a 	mcall	800057e8 <adc_2_pwm+0x36c>
80005644:	2f fd       	sub	sp,-4
						dip204_write_string (temp_string_pwm);
80005646:	ee c8 00 54 	sub	r8,r7,84
8000564a:	10 9c       	mov	r12,r8
8000564c:	f0 1f 00 65 	mcall	800057e0 <adc_2_pwm+0x364>
					
						dip204_set_cursor_position(12,2);
80005650:	30 2b       	mov	r11,2
80005652:	30 cc       	mov	r12,12
80005654:	f0 1f 00 61 	mcall	800057d8 <adc_2_pwm+0x35c>
						dip204_write_string ("    ");
80005658:	4f 1c       	lddpc	r12,8000581c <adc_2_pwm+0x3a0>
8000565a:	f0 1f 00 62 	mcall	800057e0 <adc_2_pwm+0x364>
						dip204_set_cursor_position(12,2);
8000565e:	30 2b       	mov	r11,2
80005660:	30 cc       	mov	r12,12
80005662:	f0 1f 00 5e 	mcall	800057d8 <adc_2_pwm+0x35c>
						sprintf (string_cycle_pwm, "%lu", cycle_cast_temp);
80005666:	ee c8 00 48 	sub	r8,r7,72
8000566a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000566e:	1a d9       	st.w	--sp,r9
80005670:	4d db       	lddpc	r11,800057e4 <adc_2_pwm+0x368>
80005672:	10 9c       	mov	r12,r8
80005674:	f0 1f 00 5d 	mcall	800057e8 <adc_2_pwm+0x36c>
80005678:	2f fd       	sub	sp,-4
						dip204_write_string (string_cycle_pwm);
8000567a:	ee c8 00 48 	sub	r8,r7,72
8000567e:	10 9c       	mov	r12,r8
80005680:	f0 1f 00 58 	mcall	800057e0 <adc_2_pwm+0x364>
					
						pwm_channel.cdty = cycle;	/* Channel duty cycle, should be < CPRD. */
80005684:	4e 78       	lddpc	r8,80005820 <adc_2_pwm+0x3a4>
80005686:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000568a:	91 19       	st.w	r8[0x4],r9
						pwm_channel.cprd = period;	/* Channel period. */
8000568c:	4e 58       	lddpc	r8,80005820 <adc_2_pwm+0x3a4>
8000568e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80005692:	91 29       	st.w	r8[0x8],r9
				 	
						 break;
80005694:	c9 78       	rjmp	800057c2 <adc_2_pwm+0x346>
				 		//adc_temp = ( ((float) adc_input)/11.0);
						//adc_cast = ( (uint32_t) adc_temp);
						
						
						//adc_temp = ( ((float) adc_input)/10.0);
						if (adc_input > 1000)
80005696:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000569a:	e0 48 03 e8 	cp.w	r8,1000
8000569e:	e0 88 00 06 	brls	800056aa <adc_2_pwm+0x22e>
						{
							adc_temp = 100.0;
800056a2:	36 48       	mov	r8,100
800056a4:	ef 48 ff e8 	st.w	r7[-24],r8
800056a8:	c1 78       	rjmp	800056d6 <adc_2_pwm+0x25a>
						} 
						
						
						else
						{
							adc_temp = ( ((float) adc_input)/10.0);
800056aa:	ee fc ff a8 	ld.w	r12,r7[-88]
800056ae:	f0 1f 00 51 	mcall	800057f0 <adc_2_pwm+0x374>
800056b2:	18 98       	mov	r8,r12
800056b4:	10 9c       	mov	r12,r8
800056b6:	f0 1f 00 54 	mcall	80005804 <adc_2_pwm+0x388>
800056ba:	30 08       	mov	r8,0
800056bc:	fc 19 40 24 	movh	r9,0x4024
800056c0:	f0 1f 00 54 	mcall	80005810 <adc_2_pwm+0x394>
800056c4:	14 98       	mov	r8,r10
800056c6:	16 99       	mov	r9,r11
800056c8:	10 9a       	mov	r10,r8
800056ca:	12 9b       	mov	r11,r9
800056cc:	f0 1f 00 52 	mcall	80005814 <adc_2_pwm+0x398>
800056d0:	18 98       	mov	r8,r12
800056d2:	ef 48 ff e8 	st.w	r7[-24],r8
						}
						 
						adc_cast = ( (uint32_t) adc_temp);
800056d6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800056da:	ef 48 ff fc 	st.w	r7[-4],r8
						 
						 dip204_set_cursor_position(12,4);
800056de:	30 4b       	mov	r11,4
800056e0:	30 cc       	mov	r12,12
800056e2:	f0 1f 00 3e 	mcall	800057d8 <adc_2_pwm+0x35c>
						 dip204_write_string ("  ");
800056e6:	4d 0c       	lddpc	r12,80005824 <adc_2_pwm+0x3a8>
800056e8:	f0 1f 00 3e 	mcall	800057e0 <adc_2_pwm+0x364>
						 dip204_set_cursor_position(12,4);
800056ec:	30 4b       	mov	r11,4
800056ee:	30 cc       	mov	r12,12
800056f0:	f0 1f 00 3a 	mcall	800057d8 <adc_2_pwm+0x35c>
						 sprintf (string_adc_pwm, "%lu", cycle);
800056f4:	ee c8 00 24 	sub	r8,r7,36
800056f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800056fc:	1a d9       	st.w	--sp,r9
800056fe:	4b ab       	lddpc	r11,800057e4 <adc_2_pwm+0x368>
80005700:	10 9c       	mov	r12,r8
80005702:	f0 1f 00 3a 	mcall	800057e8 <adc_2_pwm+0x36c>
80005706:	2f fd       	sub	sp,-4
						 dip204_write_string (string_adc_pwm);
80005708:	ee c8 00 24 	sub	r8,r7,36
8000570c:	10 9c       	mov	r12,r8
8000570e:	f0 1f 00 35 	mcall	800057e0 <adc_2_pwm+0x364>
						*/
				
					
						//Calculate duty cycle according to period and wanted duty cycled percent
					
						cycle_temp = ( period_temp / ( 100.0 / (100.0 - (adc_temp)) ));
80005712:	4b a8       	lddpc	r8,800057f8 <adc_2_pwm+0x37c>
80005714:	70 08       	ld.w	r8,r8[0x0]
80005716:	10 9c       	mov	r12,r8
80005718:	f0 1f 00 3b 	mcall	80005804 <adc_2_pwm+0x388>
8000571c:	14 92       	mov	r2,r10
8000571e:	16 93       	mov	r3,r11
80005720:	ee fc ff e8 	ld.w	r12,r7[-24]
80005724:	f0 1f 00 41 	mcall	80005828 <adc_2_pwm+0x3ac>
80005728:	14 98       	mov	r8,r10
8000572a:	16 99       	mov	r9,r11
8000572c:	30 0a       	mov	r10,0
8000572e:	fc 1b 40 59 	movh	r11,0x4059
80005732:	f0 1f 00 37 	mcall	8000580c <adc_2_pwm+0x390>
80005736:	14 98       	mov	r8,r10
80005738:	16 99       	mov	r9,r11
8000573a:	30 0a       	mov	r10,0
8000573c:	fc 1b 40 59 	movh	r11,0x4059
80005740:	f0 1f 00 34 	mcall	80005810 <adc_2_pwm+0x394>
80005744:	14 98       	mov	r8,r10
80005746:	16 99       	mov	r9,r11
80005748:	04 9a       	mov	r10,r2
8000574a:	06 9b       	mov	r11,r3
8000574c:	f0 1f 00 31 	mcall	80005810 <adc_2_pwm+0x394>
80005750:	14 98       	mov	r8,r10
80005752:	16 99       	mov	r9,r11
80005754:	10 9a       	mov	r10,r8
80005756:	12 9b       	mov	r11,r9
80005758:	f0 1f 00 2f 	mcall	80005814 <adc_2_pwm+0x398>
8000575c:	18 98       	mov	r8,r12
8000575e:	ef 48 ff f0 	st.w	r7[-16],r8
						cycle = (uint32_t) cycle_temp;
80005762:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005766:	ef 48 ff f8 	st.w	r7[-8],r8
						cycle_glob_val = adc_temp;
8000576a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000576e:	f0 1f 00 21 	mcall	800057f0 <adc_2_pwm+0x374>
80005772:	18 99       	mov	r9,r12
80005774:	4a 58       	lddpc	r8,80005808 <adc_2_pwm+0x38c>
80005776:	91 09       	st.w	r8[0x0],r9
					
						 dip204_set_cursor_position(12,2);
80005778:	30 2b       	mov	r11,2
8000577a:	30 cc       	mov	r12,12
8000577c:	f0 1f 00 17 	mcall	800057d8 <adc_2_pwm+0x35c>
						 dip204_write_string ("         ");
80005780:	4a bc       	lddpc	r12,8000582c <adc_2_pwm+0x3b0>
80005782:	f0 1f 00 18 	mcall	800057e0 <adc_2_pwm+0x364>
						 dip204_set_cursor_position(12,2);
80005786:	30 2b       	mov	r11,2
80005788:	30 cc       	mov	r12,12
8000578a:	f0 1f 00 14 	mcall	800057d8 <adc_2_pwm+0x35c>
						 sprintf (string_cycle_pwm, "%lu", adc_temp);
8000578e:	ee c8 00 48 	sub	r8,r7,72
80005792:	ee f9 ff e8 	ld.w	r9,r7[-24]
80005796:	1a d9       	st.w	--sp,r9
80005798:	49 3b       	lddpc	r11,800057e4 <adc_2_pwm+0x368>
8000579a:	10 9c       	mov	r12,r8
8000579c:	f0 1f 00 13 	mcall	800057e8 <adc_2_pwm+0x36c>
800057a0:	2f fd       	sub	sp,-4
						dip204_write_string (string_cycle_pwm);
800057a2:	ee c8 00 48 	sub	r8,r7,72
800057a6:	10 9c       	mov	r12,r8
800057a8:	f0 1f 00 0e 	mcall	800057e0 <adc_2_pwm+0x364>
						dip204_set_cursor_position(16,2);
800057ac:	30 2b       	mov	r11,2
800057ae:	31 0c       	mov	r12,16
800057b0:	f0 1f 00 0a 	mcall	800057d8 <adc_2_pwm+0x35c>
						dip204_write_string ("%");
800057b4:	49 fc       	lddpc	r12,80005830 <adc_2_pwm+0x3b4>
800057b6:	f0 1f 00 0b 	mcall	800057e0 <adc_2_pwm+0x364>
					
						pwm_channel.cdty = cycle;	/* Channel duty cycle, should be < CPRD. */
800057ba:	49 a8       	lddpc	r8,80005820 <adc_2_pwm+0x3a4>
800057bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800057c0:	91 19       	st.w	r8[0x4],r9
					 default:
				 		break;
						 
		 	}	
	//Return ADC reading from case 1 to provide DT value for case 0
	return cycle_glob_val;
800057c2:	49 28       	lddpc	r8,80005808 <adc_2_pwm+0x38c>
800057c4:	70 08       	ld.w	r8,r8[0x0]
800057c6:	10 9c       	mov	r12,r8
800057c8:	f0 1f 00 0d 	mcall	800057fc <adc_2_pwm+0x380>
800057cc:	18 98       	mov	r8,r12
}
800057ce:	10 9c       	mov	r12,r8
800057d0:	2e 8d       	sub	sp,-96
800057d2:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
800057d6:	00 00       	add	r0,r0
800057d8:	80 00       	ld.sh	r0,r0[0x0]
800057da:	2b 40       	sub	r0,-76
800057dc:	80 00       	ld.sh	r0,r0[0x0]
800057de:	51 c8       	stdsp	sp[0x70],r8
800057e0:	80 00       	ld.sh	r0,r0[0x0]
800057e2:	2d 44       	sub	r4,-44
800057e4:	80 00       	ld.sh	r0,r0[0x0]
800057e6:	51 d0       	stdsp	sp[0x74],r0
800057e8:	80 00       	ld.sh	r0,r0[0x0]
800057ea:	68 cc       	ld.w	r12,r4[0x30]
800057ec:	80 00       	ld.sh	r0,r0[0x0]
800057ee:	51 d4       	stdsp	sp[0x74],r4
800057f0:	80 00       	ld.sh	r0,r0[0x0]
800057f2:	64 36       	ld.w	r6,r2[0xc]
800057f4:	80 00       	ld.sh	r0,r0[0x0]
800057f6:	61 f4       	ld.w	r4,r0[0x7c]
800057f8:	00 00       	add	r0,r0
800057fa:	06 70       	tst	r0,r3
800057fc:	80 00       	ld.sh	r0,r0[0x0]
800057fe:	64 a6       	ld.w	r6,r2[0x28]
80005800:	80 00       	ld.sh	r0,r0[0x0]
80005802:	51 d8       	stdsp	sp[0x74],r8
80005804:	80 00       	ld.sh	r0,r0[0x0]
80005806:	64 c0       	ld.w	r0,r2[0x30]
80005808:	00 00       	add	r0,r0
8000580a:	00 10       	sub	r0,r0
8000580c:	80 00       	ld.sh	r0,r0[0x0]
8000580e:	5b 1c       	cp.w	r12,-15
80005810:	80 00       	ld.sh	r0,r0[0x0]
80005812:	5e dc       	retvc	r12
80005814:	80 00       	ld.sh	r0,r0[0x0]
80005816:	5d c8       	*unknown*
80005818:	80 00       	ld.sh	r0,r0[0x0]
8000581a:	51 e4       	stdsp	sp[0x78],r4
8000581c:	80 00       	ld.sh	r0,r0[0x0]
8000581e:	51 ec       	stdsp	sp[0x78],r12
80005820:	00 00       	add	r0,r0
80005822:	06 78       	tst	r8,r3
80005824:	80 00       	ld.sh	r0,r0[0x0]
80005826:	51 f4       	stdsp	sp[0x7c],r4
80005828:	80 00       	ld.sh	r0,r0[0x0]
8000582a:	5d f2       	*unknown*
8000582c:	80 00       	ld.sh	r0,r0[0x0]
8000582e:	51 f8       	stdsp	sp[0x7c],r8
80005830:	80 00       	ld.sh	r0,r0[0x0]
80005832:	52 04       	stdsp	sp[0x80],r4

80005834 <write_welcome_strings>:
char adc_value_string [9];



static void write_welcome_strings (void)
{
80005834:	eb cd 40 80 	pushm	r7,lr
80005838:	1a 97       	mov	r7,sp
	
	//Display calculation time, cycles and multiplication result on monitor
	dip204_clear_display();
8000583a:	f0 1f 00 14 	mcall	80005888 <write_welcome_strings+0x54>

	dip204_set_cursor_position(1,1);
8000583e:	30 1b       	mov	r11,1
80005840:	30 1c       	mov	r12,1
80005842:	f0 1f 00 13 	mcall	8000588c <write_welcome_strings+0x58>
	dip204_write_string("Frequency: ");
80005846:	49 3c       	lddpc	r12,80005890 <write_welcome_strings+0x5c>
80005848:	f0 1f 00 13 	mcall	80005894 <write_welcome_strings+0x60>
		
	dip204_set_cursor_position(1,2);
8000584c:	30 2b       	mov	r11,2
8000584e:	30 1c       	mov	r12,1
80005850:	f0 1f 00 0f 	mcall	8000588c <write_welcome_strings+0x58>
	dip204_write_string("Dt cycle: ");
80005854:	49 1c       	lddpc	r12,80005898 <write_welcome_strings+0x64>
80005856:	f0 1f 00 10 	mcall	80005894 <write_welcome_strings+0x60>
	
	dip204_set_cursor_position(16,2);
8000585a:	30 2b       	mov	r11,2
8000585c:	31 0c       	mov	r12,16
8000585e:	f0 1f 00 0c 	mcall	8000588c <write_welcome_strings+0x58>
	dip204_write_string ("%");
80005862:	48 fc       	lddpc	r12,8000589c <write_welcome_strings+0x68>
80005864:	f0 1f 00 0c 	mcall	80005894 <write_welcome_strings+0x60>

	dip204_set_cursor_position(16,3);
80005868:	30 3b       	mov	r11,3
8000586a:	31 0c       	mov	r12,16
8000586c:	f0 1f 00 08 	mcall	8000588c <write_welcome_strings+0x58>
	dip204_write_string("    ");
80005870:	48 cc       	lddpc	r12,800058a0 <write_welcome_strings+0x6c>
80005872:	f0 1f 00 09 	mcall	80005894 <write_welcome_strings+0x60>
	dip204_set_cursor_position(1,3);
80005876:	30 3b       	mov	r11,3
80005878:	30 1c       	mov	r12,1
8000587a:	f0 1f 00 05 	mcall	8000588c <write_welcome_strings+0x58>
	dip204_write_string("Pot ADC value: ");
8000587e:	48 ac       	lddpc	r12,800058a4 <write_welcome_strings+0x70>
80005880:	f0 1f 00 05 	mcall	80005894 <write_welcome_strings+0x60>
	
}
80005884:	e3 cd 80 80 	ldm	sp++,r7,pc
80005888:	80 00       	ld.sh	r0,r0[0x0]
8000588a:	2b c8       	sub	r8,-68
8000588c:	80 00       	ld.sh	r0,r0[0x0]
8000588e:	2b 40       	sub	r0,-76
80005890:	80 00       	ld.sh	r0,r0[0x0]
80005892:	52 08       	stdsp	sp[0x80],r8
80005894:	80 00       	ld.sh	r0,r0[0x0]
80005896:	2d 44       	sub	r4,-44
80005898:	80 00       	ld.sh	r0,r0[0x0]
8000589a:	52 14       	stdsp	sp[0x84],r4
8000589c:	80 00       	ld.sh	r0,r0[0x0]
8000589e:	52 04       	stdsp	sp[0x80],r4
800058a0:	80 00       	ld.sh	r0,r0[0x0]
800058a2:	51 ec       	stdsp	sp[0x78],r12
800058a4:	80 00       	ld.sh	r0,r0[0x0]
800058a6:	52 20       	stdsp	sp[0x88],r0

800058a8 <tc_irq>:
 * update the timer value.
 */

__attribute__((__interrupt__))
static void tc_irq(void)
{	
800058a8:	eb cd 40 80 	pushm	r7,lr
800058ac:	1a 97       	mov	r7,sp

	LED_Toggle(LED0);
800058ae:	30 1c       	mov	r12,1
800058b0:	f0 1f 00 07 	mcall	800058cc <tc_irq+0x24>
	//Enable the interrupt identifier
	TC_INT = true;
800058b4:	48 79       	lddpc	r9,800058d0 <tc_irq+0x28>
800058b6:	30 18       	mov	r8,1
800058b8:	b2 88       	st.b	r9[0x0],r8
	
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);
800058ba:	30 0b       	mov	r11,0
800058bc:	fe 7c 38 00 	mov	r12,-51200
800058c0:	f0 1f 00 05 	mcall	800058d4 <tc_irq+0x2c>
	
}
800058c4:	e3 cd 40 80 	ldm	sp++,r7,lr
800058c8:	d6 03       	rete
800058ca:	00 00       	add	r0,r0
800058cc:	80 00       	ld.sh	r0,r0[0x0]
800058ce:	49 1c       	lddpc	r12,80005910 <int__push_button_handler+0x38>
800058d0:	00 00       	add	r0,r0
800058d2:	06 28       	rsub	r8,r3
800058d4:	80 00       	ld.sh	r0,r0[0x0]
800058d6:	41 aa       	lddsp	r10,sp[0x68]

800058d8 <int__push_button_handler>:

//Interrupt routine for switch PB0

__attribute__((__interrupt__))
static void int__push_button_handler (void)
{
800058d8:	eb cd 40 80 	pushm	r7,lr
800058dc:	1a 97       	mov	r7,sp
	if(gpio_get_pin_interrupt_flag(GPIO_PUSH_BUTTON_0))
800058de:	35 8c       	mov	r12,88
800058e0:	f0 1f 00 16 	mcall	80005938 <int__push_button_handler+0x60>
800058e4:	18 98       	mov	r8,r12
800058e6:	58 08       	cp.w	r8,0
800058e8:	c2 40       	breq	80005930 <int__push_button_handler+0x58>
	{
		//Push button interrupt : Switch between frequency setting and duty cycle
		//Sets the switch identifier to a given value 
		
		LED_Toggle(LED1);
800058ea:	30 2c       	mov	r12,2
800058ec:	f0 1f 00 14 	mcall	8000593c <int__push_button_handler+0x64>
		
		if (switch_identifier == IS_FREQ)
800058f0:	49 48       	lddpc	r8,80005940 <int__push_button_handler+0x68>
800058f2:	11 88       	ld.ub	r8,r8[0x0]
800058f4:	58 08       	cp.w	r8,0
800058f6:	c0 b1       	brne	8000590c <int__push_button_handler+0x34>
		{
			LED_On(LED4);
800058f8:	31 0c       	mov	r12,16
800058fa:	f0 1f 00 13 	mcall	80005944 <int__push_button_handler+0x6c>
			LED_Off(LED5);
800058fe:	32 0c       	mov	r12,32
80005900:	f0 1f 00 12 	mcall	80005948 <int__push_button_handler+0x70>
			switch_identifier = IS_DUTY;
80005904:	48 f9       	lddpc	r9,80005940 <int__push_button_handler+0x68>
80005906:	30 18       	mov	r8,1
80005908:	b2 88       	st.b	r9[0x0],r8
8000590a:	c1 08       	rjmp	8000592a <int__push_button_handler+0x52>
		}
		
		else if (switch_identifier == IS_DUTY)
8000590c:	48 d8       	lddpc	r8,80005940 <int__push_button_handler+0x68>
8000590e:	11 89       	ld.ub	r9,r8[0x0]
80005910:	30 18       	mov	r8,1
80005912:	f0 09 18 00 	cp.b	r9,r8
80005916:	c0 a1       	brne	8000592a <int__push_button_handler+0x52>
		{	
			LED_On(LED5);
80005918:	32 0c       	mov	r12,32
8000591a:	f0 1f 00 0b 	mcall	80005944 <int__push_button_handler+0x6c>
			LED_Off(LED4);
8000591e:	31 0c       	mov	r12,16
80005920:	f0 1f 00 0a 	mcall	80005948 <int__push_button_handler+0x70>
			switch_identifier = IS_FREQ;
80005924:	48 79       	lddpc	r9,80005940 <int__push_button_handler+0x68>
80005926:	30 08       	mov	r8,0
80005928:	b2 88       	st.b	r9[0x0],r8
		}

		gpio_clear_pin_interrupt_flag(GPIO_PUSH_BUTTON_0);
8000592a:	35 8c       	mov	r12,88
8000592c:	f0 1f 00 08 	mcall	8000594c <int__push_button_handler+0x74>
	}
	
}
80005930:	e3 cd 40 80 	ldm	sp++,r7,lr
80005934:	d6 03       	rete
80005936:	00 00       	add	r0,r0
80005938:	80 00       	ld.sh	r0,r0[0x0]
8000593a:	4f 18       	lddpc	r8,80005afc <main+0x1ac>
8000593c:	80 00       	ld.sh	r0,r0[0x0]
8000593e:	49 1c       	lddpc	r12,80005980 <main+0x30>
80005940:	00 00       	add	r0,r0
80005942:	06 29       	rsub	r9,r3
80005944:	80 00       	ld.sh	r0,r0[0x0]
80005946:	48 68       	lddpc	r8,8000595c <main+0xc>
80005948:	80 00       	ld.sh	r0,r0[0x0]
8000594a:	47 b0       	lddsp	r0,sp[0x1ec]
8000594c:	80 00       	ld.sh	r0,r0[0x0]
8000594e:	4f 56       	lddpc	r6,80005b20 <__avr32_f64_sub+0x4>

80005950 <main>:


int main (void){
80005950:	eb cd 40 80 	pushm	r7,lr
80005954:	1a 97       	mov	r7,sp
80005956:	20 5d       	sub	sp,20
	
	volatile avr32_tc_t *tc = EXAMPLE_TC;
80005958:	fe 78 38 00 	mov	r8,-51200
8000595c:	ef 48 ff fc 	st.w	r7[-4],r8
	pm_freq_param_t System_Clock = {
		.cpu_f = CPU_HZ,
		.pba_f = PBA_HZ,
		.osc0_f = FOSC0,
		.osc0_startup = OSC0_STARTUP
	};
80005960:	4c f8       	lddpc	r8,80005a9c <main+0x14c>
80005962:	ee ca 00 14 	sub	r10,r7,20
80005966:	10 9b       	mov	r11,r8
80005968:	f6 e8 00 00 	ld.d	r8,r11[0]
8000596c:	f4 e9 00 00 	st.d	r10[0],r8
80005970:	f6 e8 00 08 	ld.d	r8,r11[8]
80005974:	f4 e9 00 08 	st.d	r10[8],r8
	pm_configure_clocks(&System_Clock);
80005978:	ee c8 00 14 	sub	r8,r7,20
8000597c:	10 9c       	mov	r12,r8
8000597e:	f0 1f 00 49 	mcall	80005aa0 <main+0x150>
	
	
	//Initialize board
	board_init();
80005982:	f0 1f 00 49 	mcall	80005aa4 <main+0x154>
	
	//Initialize LCD display
	init_disp(PBA_HZ);
80005986:	e0 6c 1b 00 	mov	r12,6912
8000598a:	ea 1c 00 b7 	orh	r12,0xb7
8000598e:	f0 1f 00 47 	mcall	80005aa8 <main+0x158>
	
	//Write welcome strings
	write_welcome_strings();
80005992:	f0 1f 00 47 	mcall	80005aac <main+0x15c>
	
	//Initialize debug strings
	init_dbg_rs232(PBA_HZ);
80005996:	e0 6c 1b 00 	mov	r12,6912
8000599a:	ea 1c 00 b7 	orh	r12,0xb7
8000599e:	f0 1f 00 45 	mcall	80005ab0 <main+0x160>
	
	
	//Interrupts init
	// Initialize interrupt vector table support.
	irq_initialize_vectors();
800059a2:	f0 1f 00 45 	mcall	80005ab4 <main+0x164>

	//Enable pin interrupts
	gpio_enable_pin_interrupt(GPIO_PUSH_BUTTON_0, GPIO_RISING_EDGE);
800059a6:	30 1b       	mov	r11,1
800059a8:	35 8c       	mov	r12,88
800059aa:	f0 1f 00 44 	mcall	80005ab8 <main+0x168>

	//Initialize interrupt controller
	INTC_init_interrupts ();
800059ae:	f0 1f 00 42 	mcall	80005ab4 <main+0x164>

	//Set interrupt handler //Highest priority level
	INTC_register_interrupt(&int__push_button_handler,(AVR32_GPIO_IRQ_0+88/8), AVR32_INTC_INT0);
800059b2:	30 0a       	mov	r10,0
800059b4:	34 bb       	mov	r11,75
800059b6:	4c 2c       	lddpc	r12,80005abc <main+0x16c>
800059b8:	f0 1f 00 42 	mcall	80005ac0 <main+0x170>

	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);
800059bc:	30 0a       	mov	r10,0
800059be:	e0 6b 01 c0 	mov	r11,448
800059c2:	4c 1c       	lddpc	r12,80005ac4 <main+0x174>
800059c4:	f0 1f 00 3f 	mcall	80005ac0 <main+0x170>

	// Enable global interrupts
	cpu_irq_enable();
800059c8:	d5 03       	csrf	0x10
	
	//Initialize ADC
	adc_init_pot();
800059ca:	f0 1f 00 40 	mcall	80005ac8 <main+0x178>
	
	//Initialize PWM
	ph_init_pwm();
800059ce:	f0 1f 00 40 	mcall	80005acc <main+0x17c>
	
	
	//Initialize TimerCounter module
	tc_init(tc, SAMPLE_TIME, PBA_HZ);
800059d2:	e0 6a 1b 00 	mov	r10,6912
800059d6:	ea 1a 00 b7 	orh	r10,0xb7
800059da:	31 4b       	mov	r11,20
800059dc:	ee fc ff fc 	ld.w	r12,r7[-4]
800059e0:	f0 1f 00 3c 	mcall	80005ad0 <main+0x180>
	
	//Debug string
	print_dbg("Initialized!\n");
800059e4:	4b cc       	lddpc	r12,80005ad4 <main+0x184>
800059e6:	f0 1f 00 3d 	mcall	80005ad8 <main+0x188>
	
	//Start ADC module
	adc_start(&AVR32_ADC);
800059ea:	fe 7c 3c 00 	mov	r12,-50176
800059ee:	f0 1f 00 3c 	mcall	80005adc <main+0x18c>
800059f2:	c0 28       	rjmp	800059f6 <main+0xa6>
		TC_INT=false;	
		//End of if statement	
		}
	
	//End of while loop	
	}
800059f4:	d7 03       	nop
	adc_start(&AVR32_ADC);
	
	while(1)
	{
		//print_dbg("This is while loop \n");
		if (TC_INT == true)
800059f6:	4b b8       	lddpc	r8,80005ae0 <main+0x190>
800059f8:	11 89       	ld.ub	r9,r8[0x0]
800059fa:	30 18       	mov	r8,1
800059fc:	f0 09 18 00 	cp.b	r9,r8
80005a00:	cf a1       	brne	800059f4 <main+0xa4>
		{
			//print_dbg("This is TC interrupt\n");
		//Toggle LED4 to show presence in if statement
		LED_Toggle(LED3);
80005a02:	30 8c       	mov	r12,8
80005a04:	f0 1f 00 38 	mcall	80005ae4 <main+0x194>
		
		/* Get value for the potentiometer adc channel */
		adc_value_pot = adc_get_value(&AVR32_ADC, EXAMPLE_ADC_POTENTIOMETER_CHANNEL);
80005a08:	30 1b       	mov	r11,1
80005a0a:	fe 7c 3c 00 	mov	r12,-50176
80005a0e:	f0 1f 00 37 	mcall	80005ae8 <main+0x198>
80005a12:	18 99       	mov	r9,r12
80005a14:	4b 68       	lddpc	r8,80005aec <main+0x19c>
80005a16:	91 09       	st.w	r8[0x0],r9
		adc_start(&AVR32_ADC);
80005a18:	fe 7c 3c 00 	mov	r12,-50176
80005a1c:	f0 1f 00 30 	mcall	80005adc <main+0x18c>
			
			
			dip204_set_cursor_position(16,3);
80005a20:	30 3b       	mov	r11,3
80005a22:	31 0c       	mov	r12,16
80005a24:	f0 1f 00 33 	mcall	80005af0 <main+0x1a0>
			dip204_write_string("    ");
80005a28:	4b 3c       	lddpc	r12,80005af4 <main+0x1a4>
80005a2a:	f0 1f 00 34 	mcall	80005af8 <main+0x1a8>
			dip204_set_cursor_position(16,3);
80005a2e:	30 3b       	mov	r11,3
80005a30:	31 0c       	mov	r12,16
80005a32:	f0 1f 00 30 	mcall	80005af0 <main+0x1a0>
			sprintf(adc_value_string, "%lu", adc_value_pot);
80005a36:	4a e8       	lddpc	r8,80005aec <main+0x19c>
80005a38:	70 08       	ld.w	r8,r8[0x0]
80005a3a:	1a d8       	st.w	--sp,r8
80005a3c:	4b 0b       	lddpc	r11,80005afc <main+0x1ac>
80005a3e:	4b 1c       	lddpc	r12,80005b00 <main+0x1b0>
80005a40:	f0 1f 00 31 	mcall	80005b04 <main+0x1b4>
80005a44:	2f fd       	sub	sp,-4
			dip204_write_string(adc_value_string);
80005a46:	4a fc       	lddpc	r12,80005b00 <main+0x1b0>
80005a48:	f0 1f 00 2c 	mcall	80005af8 <main+0x1a8>
			
			
			
			switch(switch_identifier)	
80005a4c:	4a f8       	lddpc	r8,80005b08 <main+0x1b8>
80005a4e:	11 88       	ld.ub	r8,r8[0x0]
80005a50:	58 08       	cp.w	r8,0
80005a52:	c0 40       	breq	80005a5a <main+0x10a>
80005a54:	58 18       	cp.w	r8,1
80005a56:	c1 10       	breq	80005a78 <main+0x128>
80005a58:	c1 e8       	rjmp	80005a94 <main+0x144>
			{
			case IS_FREQ:
			//print_dbg("This is freq case\n");
			adc_2_pwm(adc_value_pot, PBA_HZ, 0);
80005a5a:	4a 58       	lddpc	r8,80005aec <main+0x19c>
80005a5c:	70 08       	ld.w	r8,r8[0x0]
80005a5e:	30 0a       	mov	r10,0
80005a60:	e0 6b 1b 00 	mov	r11,6912
80005a64:	ea 1b 00 b7 	orh	r11,0xb7
80005a68:	10 9c       	mov	r12,r8
80005a6a:	f0 1f 00 29 	mcall	80005b0c <main+0x1bc>
			
			/* Set channel configuration to channel 0. */
			pwm_channel_init(EXAMPLE_PWM_CHANNEL_ID, &pwm_channel);
80005a6e:	4a 9b       	lddpc	r11,80005b10 <main+0x1c0>
80005a70:	30 3c       	mov	r12,3
80005a72:	f0 1f 00 29 	mcall	80005b14 <main+0x1c4>
			
			break;
80005a76:	c0 f8       	rjmp	80005a94 <main+0x144>
			
			
			case IS_DUTY:
			//print_dbg("This is duty case\n");
			adc_2_pwm(adc_value_pot, PBA_HZ, 1);
80005a78:	49 d8       	lddpc	r8,80005aec <main+0x19c>
80005a7a:	70 08       	ld.w	r8,r8[0x0]
80005a7c:	30 1a       	mov	r10,1
80005a7e:	e0 6b 1b 00 	mov	r11,6912
80005a82:	ea 1b 00 b7 	orh	r11,0xb7
80005a86:	10 9c       	mov	r12,r8
80005a88:	f0 1f 00 21 	mcall	80005b0c <main+0x1bc>
			
			/* Set channel configuration to channel 0. */
			pwm_channel_init(EXAMPLE_PWM_CHANNEL_ID, &pwm_channel);
80005a8c:	4a 1b       	lddpc	r11,80005b10 <main+0x1c0>
80005a8e:	30 3c       	mov	r12,3
80005a90:	f0 1f 00 21 	mcall	80005b14 <main+0x1c4>
		
		//End of switch
		}
			
			
		TC_INT=false;	
80005a94:	49 39       	lddpc	r9,80005ae0 <main+0x190>
80005a96:	30 08       	mov	r8,0
80005a98:	b2 88       	st.b	r9[0x0],r8
		//End of if statement	
		}
	
	//End of while loop	
	}
80005a9a:	ca eb       	rjmp	800059f6 <main+0xa6>
80005a9c:	80 00       	ld.sh	r0,r0[0x0]
80005a9e:	bb a0       	sbr	r0,0x1a
80005aa0:	80 00       	ld.sh	r0,r0[0x0]
80005aa2:	36 28       	mov	r8,98
80005aa4:	80 00       	ld.sh	r0,r0[0x0]
80005aa6:	46 d8       	lddsp	r8,sp[0x1b4]
80005aa8:	80 00       	ld.sh	r0,r0[0x0]
80005aaa:	52 40       	stdsp	sp[0x90],r0
80005aac:	80 00       	ld.sh	r0,r0[0x0]
80005aae:	58 34       	cp.w	r4,3
80005ab0:	80 00       	ld.sh	r0,r0[0x0]
80005ab2:	46 0c       	lddsp	r12,sp[0x180]
80005ab4:	80 00       	ld.sh	r0,r0[0x0]
80005ab6:	50 1c       	stdsp	sp[0x4],r12
80005ab8:	80 00       	ld.sh	r0,r0[0x0]
80005aba:	4e a4       	lddpc	r4,80005c60 <__avr32_f64_sub_subnormal_result+0x38>
80005abc:	80 00       	ld.sh	r0,r0[0x0]
80005abe:	58 d8       	cp.w	r8,13
80005ac0:	80 00       	ld.sh	r0,r0[0x0]
80005ac2:	50 b4       	stdsp	sp[0x2c],r4
80005ac4:	80 00       	ld.sh	r0,r0[0x0]
80005ac6:	58 a8       	cp.w	r8,10
80005ac8:	80 00       	ld.sh	r0,r0[0x0]
80005aca:	52 d8       	stdsp	sp[0xb4],r8
80005acc:	80 00       	ld.sh	r0,r0[0x0]
80005ace:	53 2c       	stdsp	sp[0xc8],r12
80005ad0:	80 00       	ld.sh	r0,r0[0x0]
80005ad2:	53 cc       	stdsp	sp[0xf0],r12
80005ad4:	80 00       	ld.sh	r0,r0[0x0]
80005ad6:	52 30       	stdsp	sp[0x8c],r0
80005ad8:	80 00       	ld.sh	r0,r0[0x0]
80005ada:	46 8c       	lddsp	r12,sp[0x1a0]
80005adc:	80 00       	ld.sh	r0,r0[0x0]
80005ade:	2f 3a       	sub	r10,-13
80005ae0:	00 00       	add	r0,r0
80005ae2:	06 28       	rsub	r8,r3
80005ae4:	80 00       	ld.sh	r0,r0[0x0]
80005ae6:	49 1c       	lddpc	r12,80005b28 <__avr32_f64_sub+0xc>
80005ae8:	80 00       	ld.sh	r0,r0[0x0]
80005aea:	2f b0       	sub	r0,-5
80005aec:	00 00       	add	r0,r0
80005aee:	06 74       	tst	r4,r3
80005af0:	80 00       	ld.sh	r0,r0[0x0]
80005af2:	2b 40       	sub	r0,-76
80005af4:	80 00       	ld.sh	r0,r0[0x0]
80005af6:	51 ec       	stdsp	sp[0x78],r12
80005af8:	80 00       	ld.sh	r0,r0[0x0]
80005afa:	2d 44       	sub	r4,-44
80005afc:	80 00       	ld.sh	r0,r0[0x0]
80005afe:	51 d0       	stdsp	sp[0x74],r0
80005b00:	00 00       	add	r0,r0
80005b02:	06 64       	and	r4,r3
80005b04:	80 00       	ld.sh	r0,r0[0x0]
80005b06:	68 cc       	ld.w	r12,r4[0x30]
80005b08:	00 00       	add	r0,r0
80005b0a:	06 29       	rsub	r9,r3
80005b0c:	80 00       	ld.sh	r0,r0[0x0]
80005b0e:	54 7c       	stdsp	sp[0x11c],r12
80005b10:	00 00       	add	r0,r0
80005b12:	06 78       	tst	r8,r3
80005b14:	80 00       	ld.sh	r0,r0[0x0]
80005b16:	35 70       	mov	r0,87

80005b18 <__avr32_f64_sub_from_add>:
80005b18:	ee 19 80 00 	eorh	r9,0x8000

80005b1c <__avr32_f64_sub>:
80005b1c:	f7 e9 20 0c 	eor	r12,r11,r9
80005b20:	e0 86 00 ca 	brmi	80005cb4 <__avr32_f64_add_from_sub>
80005b24:	eb cd 40 e0 	pushm	r5-r7,lr
80005b28:	16 9c       	mov	r12,r11
80005b2a:	e6 1c 80 00 	andh	r12,0x8000,COH
80005b2e:	bf db       	cbr	r11,0x1f
80005b30:	bf d9       	cbr	r9,0x1f
80005b32:	10 3a       	cp.w	r10,r8
80005b34:	f2 0b 13 00 	cpc	r11,r9
80005b38:	c0 92       	brcc	80005b4a <__avr32_f64_sub+0x2e>
80005b3a:	16 97       	mov	r7,r11
80005b3c:	12 9b       	mov	r11,r9
80005b3e:	0e 99       	mov	r9,r7
80005b40:	14 97       	mov	r7,r10
80005b42:	10 9a       	mov	r10,r8
80005b44:	0e 98       	mov	r8,r7
80005b46:	ee 1c 80 00 	eorh	r12,0x8000
80005b4a:	f6 07 16 14 	lsr	r7,r11,0x14
80005b4e:	ab 7b       	lsl	r11,0xb
80005b50:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80005b54:	ab 7a       	lsl	r10,0xb
80005b56:	bf bb       	sbr	r11,0x1f
80005b58:	f2 06 16 14 	lsr	r6,r9,0x14
80005b5c:	c4 40       	breq	80005be4 <__avr32_f64_sub_opL_subnormal>
80005b5e:	ab 79       	lsl	r9,0xb
80005b60:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80005b64:	ab 78       	lsl	r8,0xb
80005b66:	bf b9       	sbr	r9,0x1f

80005b68 <__avr32_f64_sub_opL_subnormal_done>:
80005b68:	e0 47 07 ff 	cp.w	r7,2047
80005b6c:	c4 f0       	breq	80005c0a <__avr32_f64_sub_opH_nan_or_inf>
80005b6e:	0e 26       	rsub	r6,r7
80005b70:	c1 20       	breq	80005b94 <__avr32_f64_sub_shift_done>
80005b72:	ec 05 11 20 	rsub	r5,r6,32
80005b76:	e0 46 00 20 	cp.w	r6,32
80005b7a:	c7 c2       	brcc	80005c72 <__avr32_f64_sub_longshift>
80005b7c:	f0 05 09 4e 	lsl	lr,r8,r5
80005b80:	f2 05 09 45 	lsl	r5,r9,r5
80005b84:	f0 06 0a 48 	lsr	r8,r8,r6
80005b88:	f2 06 0a 49 	lsr	r9,r9,r6
80005b8c:	0a 48       	or	r8,r5
80005b8e:	58 0e       	cp.w	lr,0
80005b90:	5f 1e       	srne	lr
80005b92:	1c 48       	or	r8,lr

80005b94 <__avr32_f64_sub_shift_done>:
80005b94:	10 1a       	sub	r10,r8
80005b96:	f6 09 01 4b 	sbc	r11,r11,r9
80005b9a:	f6 06 12 00 	clz	r6,r11
80005b9e:	c0 e0       	breq	80005bba <__avr32_f64_sub_longnormalize_done>
80005ba0:	c7 83       	brcs	80005c90 <__avr32_f64_sub_longnormalize>
80005ba2:	ec 0e 11 20 	rsub	lr,r6,32
80005ba6:	f6 06 09 4b 	lsl	r11,r11,r6
80005baa:	f4 0e 0a 4e 	lsr	lr,r10,lr
80005bae:	1c 4b       	or	r11,lr
80005bb0:	f4 06 09 4a 	lsl	r10,r10,r6
80005bb4:	0c 17       	sub	r7,r6
80005bb6:	e0 8a 00 39 	brle	80005c28 <__avr32_f64_sub_subnormal_result>

80005bba <__avr32_f64_sub_longnormalize_done>:
80005bba:	f4 09 15 15 	lsl	r9,r10,0x15
80005bbe:	ab 9a       	lsr	r10,0xb
80005bc0:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80005bc4:	ab 9b       	lsr	r11,0xb
80005bc6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80005bca:	18 4b       	or	r11,r12

80005bcc <__avr32_f64_sub_round>:
80005bcc:	fc 17 80 00 	movh	r7,0x8000
80005bd0:	ed ba 00 00 	bld	r10,0x0
80005bd4:	f7 b7 01 ff 	subne	r7,-1
80005bd8:	0e 39       	cp.w	r9,r7
80005bda:	5f 29       	srhs	r9
80005bdc:	12 0a       	add	r10,r9
80005bde:	5c 0b       	acr	r11
80005be0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005be4 <__avr32_f64_sub_opL_subnormal>:
80005be4:	ab 79       	lsl	r9,0xb
80005be6:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80005bea:	ab 78       	lsl	r8,0xb
80005bec:	f3 e8 10 0e 	or	lr,r9,r8
80005bf0:	f9 b6 01 01 	movne	r6,1
80005bf4:	ee 0e 11 00 	rsub	lr,r7,0
80005bf8:	f9 b7 00 01 	moveq	r7,1
80005bfc:	ef bb 00 1f 	bst	r11,0x1f
80005c00:	f7 ea 10 0e 	or	lr,r11,r10
80005c04:	f9 b7 00 00 	moveq	r7,0
80005c08:	cb 0b       	rjmp	80005b68 <__avr32_f64_sub_opL_subnormal_done>

80005c0a <__avr32_f64_sub_opH_nan_or_inf>:
80005c0a:	bf db       	cbr	r11,0x1f
80005c0c:	f7 ea 10 0e 	or	lr,r11,r10
80005c10:	c0 81       	brne	80005c20 <__avr32_f64_sub_return_nan>
80005c12:	e0 46 07 ff 	cp.w	r6,2047
80005c16:	c0 50       	breq	80005c20 <__avr32_f64_sub_return_nan>
80005c18:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
80005c1c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005c20 <__avr32_f64_sub_return_nan>:
80005c20:	3f fa       	mov	r10,-1
80005c22:	3f fb       	mov	r11,-1
80005c24:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005c28 <__avr32_f64_sub_subnormal_result>:
80005c28:	5c 37       	neg	r7
80005c2a:	2f f7       	sub	r7,-1
80005c2c:	f1 b7 04 c0 	satu	r7,0x6
80005c30:	e0 47 00 20 	cp.w	r7,32
80005c34:	c1 14       	brge	80005c56 <__avr32_f64_sub_subnormal_result+0x2e>
80005c36:	ee 08 11 20 	rsub	r8,r7,32
80005c3a:	f4 08 09 49 	lsl	r9,r10,r8
80005c3e:	5f 16       	srne	r6
80005c40:	f4 07 0a 4a 	lsr	r10,r10,r7
80005c44:	0c 4a       	or	r10,r6
80005c46:	f6 08 09 49 	lsl	r9,r11,r8
80005c4a:	f5 e9 10 0a 	or	r10,r10,r9
80005c4e:	f4 07 0a 4b 	lsr	r11,r10,r7
80005c52:	30 07       	mov	r7,0
80005c54:	cb 3b       	rjmp	80005bba <__avr32_f64_sub_longnormalize_done>
80005c56:	ee 08 11 40 	rsub	r8,r7,64
80005c5a:	f6 08 09 49 	lsl	r9,r11,r8
80005c5e:	14 49       	or	r9,r10
80005c60:	5f 16       	srne	r6
80005c62:	f6 07 0a 4a 	lsr	r10,r11,r7
80005c66:	0c 4a       	or	r10,r6
80005c68:	30 0b       	mov	r11,0
80005c6a:	30 07       	mov	r7,0
80005c6c:	ca 7b       	rjmp	80005bba <__avr32_f64_sub_longnormalize_done>
80005c6e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005c72 <__avr32_f64_sub_longshift>:
80005c72:	f1 b6 04 c0 	satu	r6,0x6
80005c76:	f0 0e 17 00 	moveq	lr,r8
80005c7a:	c0 40       	breq	80005c82 <__avr32_f64_sub_longshift+0x10>
80005c7c:	f2 05 09 4e 	lsl	lr,r9,r5
80005c80:	10 4e       	or	lr,r8
80005c82:	f2 06 0a 48 	lsr	r8,r9,r6
80005c86:	30 09       	mov	r9,0
80005c88:	58 0e       	cp.w	lr,0
80005c8a:	5f 1e       	srne	lr
80005c8c:	1c 48       	or	r8,lr
80005c8e:	c8 3b       	rjmp	80005b94 <__avr32_f64_sub_shift_done>

80005c90 <__avr32_f64_sub_longnormalize>:
80005c90:	f4 06 12 00 	clz	r6,r10
80005c94:	f9 b7 03 00 	movlo	r7,0
80005c98:	f9 b6 03 00 	movlo	r6,0
80005c9c:	f9 bc 03 00 	movlo	r12,0
80005ca0:	f7 b6 02 e0 	subhs	r6,-32
80005ca4:	f4 06 09 4b 	lsl	r11,r10,r6
80005ca8:	30 0a       	mov	r10,0
80005caa:	0c 17       	sub	r7,r6
80005cac:	fe 9a ff be 	brle	80005c28 <__avr32_f64_sub_subnormal_result>
80005cb0:	c8 5b       	rjmp	80005bba <__avr32_f64_sub_longnormalize_done>
80005cb2:	d7 03       	nop

80005cb4 <__avr32_f64_add_from_sub>:
80005cb4:	ee 19 80 00 	eorh	r9,0x8000

80005cb8 <__avr32_f64_add>:
80005cb8:	f7 e9 20 0c 	eor	r12,r11,r9
80005cbc:	fe 96 ff 2e 	brmi	80005b18 <__avr32_f64_sub_from_add>
80005cc0:	eb cd 40 e0 	pushm	r5-r7,lr
80005cc4:	16 9c       	mov	r12,r11
80005cc6:	e6 1c 80 00 	andh	r12,0x8000,COH
80005cca:	bf db       	cbr	r11,0x1f
80005ccc:	bf d9       	cbr	r9,0x1f
80005cce:	12 3b       	cp.w	r11,r9
80005cd0:	c0 72       	brcc	80005cde <__avr32_f64_add+0x26>
80005cd2:	16 97       	mov	r7,r11
80005cd4:	12 9b       	mov	r11,r9
80005cd6:	0e 99       	mov	r9,r7
80005cd8:	14 97       	mov	r7,r10
80005cda:	10 9a       	mov	r10,r8
80005cdc:	0e 98       	mov	r8,r7
80005cde:	30 0e       	mov	lr,0
80005ce0:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80005ce4:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80005ce8:	b5 ab       	sbr	r11,0x14
80005cea:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80005cee:	c6 20       	breq	80005db2 <__avr32_f64_add_op2_subnormal>
80005cf0:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80005cf4:	b5 a9       	sbr	r9,0x14
80005cf6:	e0 47 07 ff 	cp.w	r7,2047
80005cfa:	c2 80       	breq	80005d4a <__avr32_f64_add_opH_nan_or_inf>
80005cfc:	0e 26       	rsub	r6,r7
80005cfe:	c1 20       	breq	80005d22 <__avr32_f64_add_shift_done>
80005d00:	e0 46 00 36 	cp.w	r6,54
80005d04:	c1 52       	brcc	80005d2e <__avr32_f64_add_res_of_done>
80005d06:	ec 05 11 20 	rsub	r5,r6,32
80005d0a:	e0 46 00 20 	cp.w	r6,32
80005d0e:	c3 52       	brcc	80005d78 <__avr32_f64_add_longshift>
80005d10:	f0 05 09 4e 	lsl	lr,r8,r5
80005d14:	f2 05 09 45 	lsl	r5,r9,r5
80005d18:	f0 06 0a 48 	lsr	r8,r8,r6
80005d1c:	f2 06 0a 49 	lsr	r9,r9,r6
80005d20:	0a 48       	or	r8,r5

80005d22 <__avr32_f64_add_shift_done>:
80005d22:	10 0a       	add	r10,r8
80005d24:	f6 09 00 4b 	adc	r11,r11,r9
80005d28:	ed bb 00 15 	bld	r11,0x15
80005d2c:	c3 40       	breq	80005d94 <__avr32_f64_add_res_of>

80005d2e <__avr32_f64_add_res_of_done>:
80005d2e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80005d32:	18 4b       	or	r11,r12

80005d34 <__avr32_f64_add_round>:
80005d34:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80005d38:	18 4e       	or	lr,r12
80005d3a:	ee 1e 80 00 	eorh	lr,0x8000
80005d3e:	f1 be 04 20 	satu	lr,0x1
80005d42:	1c 0a       	add	r10,lr
80005d44:	5c 0b       	acr	r11
80005d46:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005d4a <__avr32_f64_add_opH_nan_or_inf>:
80005d4a:	b5 cb       	cbr	r11,0x14
80005d4c:	f7 ea 10 0e 	or	lr,r11,r10
80005d50:	c1 01       	brne	80005d70 <__avr32_f64_add_return_nan>
80005d52:	e0 46 07 ff 	cp.w	r6,2047
80005d56:	c0 30       	breq	80005d5c <__avr32_f64_add_opL_nan_or_inf>
80005d58:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005d5c <__avr32_f64_add_opL_nan_or_inf>:
80005d5c:	b5 c9       	cbr	r9,0x14
80005d5e:	f3 e8 10 0e 	or	lr,r9,r8
80005d62:	c0 71       	brne	80005d70 <__avr32_f64_add_return_nan>
80005d64:	30 0a       	mov	r10,0
80005d66:	fc 1b 7f f0 	movh	r11,0x7ff0
80005d6a:	18 4b       	or	r11,r12
80005d6c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005d70 <__avr32_f64_add_return_nan>:
80005d70:	3f fa       	mov	r10,-1
80005d72:	3f fb       	mov	r11,-1
80005d74:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80005d78 <__avr32_f64_add_longshift>:
80005d78:	f1 b6 04 c0 	satu	r6,0x6
80005d7c:	f0 0e 17 00 	moveq	lr,r8
80005d80:	c0 60       	breq	80005d8c <__avr32_f64_add_longshift+0x14>
80005d82:	f2 05 09 4e 	lsl	lr,r9,r5
80005d86:	58 08       	cp.w	r8,0
80005d88:	5f 18       	srne	r8
80005d8a:	10 4e       	or	lr,r8
80005d8c:	f2 06 0a 48 	lsr	r8,r9,r6
80005d90:	30 09       	mov	r9,0
80005d92:	cc 8b       	rjmp	80005d22 <__avr32_f64_add_shift_done>

80005d94 <__avr32_f64_add_res_of>:
80005d94:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80005d98:	a1 9b       	lsr	r11,0x1
80005d9a:	5d 0a       	ror	r10
80005d9c:	5d 0e       	ror	lr
80005d9e:	2f f7       	sub	r7,-1
80005da0:	e0 47 07 ff 	cp.w	r7,2047
80005da4:	f9 ba 00 00 	moveq	r10,0
80005da8:	f9 bb 00 00 	moveq	r11,0
80005dac:	f9 be 00 00 	moveq	lr,0
80005db0:	cb fb       	rjmp	80005d2e <__avr32_f64_add_res_of_done>

80005db2 <__avr32_f64_add_op2_subnormal>:
80005db2:	30 16       	mov	r6,1
80005db4:	58 07       	cp.w	r7,0
80005db6:	ca 01       	brne	80005cf6 <__avr32_f64_add+0x3e>
80005db8:	b5 cb       	cbr	r11,0x14
80005dba:	10 0a       	add	r10,r8
80005dbc:	f6 09 00 4b 	adc	r11,r11,r9
80005dc0:	18 4b       	or	r11,r12
80005dc2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005dc6:	d7 03       	nop

80005dc8 <__avr32_f64_to_u32>:
80005dc8:	58 0b       	cp.w	r11,0
80005dca:	5e 6d       	retmi	0

80005dcc <__avr32_f64_to_s32>:
80005dcc:	f6 0c 15 01 	lsl	r12,r11,0x1
80005dd0:	b5 9c       	lsr	r12,0x15
80005dd2:	e0 2c 03 ff 	sub	r12,1023
80005dd6:	5e 3d       	retlo	0
80005dd8:	f8 0c 11 1f 	rsub	r12,r12,31
80005ddc:	16 99       	mov	r9,r11
80005dde:	ab 7b       	lsl	r11,0xb
80005de0:	bf bb       	sbr	r11,0x1f
80005de2:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80005de6:	f6 0c 0a 4b 	lsr	r11,r11,r12
80005dea:	a1 79       	lsl	r9,0x1
80005dec:	5e 2b       	reths	r11
80005dee:	5c 3b       	neg	r11
80005df0:	5e fb       	retal	r11

80005df2 <__avr32_u32_to_f64>:
80005df2:	f8 cb 00 00 	sub	r11,r12,0
80005df6:	30 0c       	mov	r12,0
80005df8:	c0 38       	rjmp	80005dfe <__avr32_s32_to_f64+0x4>

80005dfa <__avr32_s32_to_f64>:
80005dfa:	18 9b       	mov	r11,r12
80005dfc:	5c 4b       	abs	r11
80005dfe:	30 0a       	mov	r10,0
80005e00:	5e 0b       	reteq	r11
80005e02:	d4 01       	pushm	lr
80005e04:	e0 69 04 1e 	mov	r9,1054
80005e08:	f6 08 12 00 	clz	r8,r11
80005e0c:	c1 70       	breq	80005e3a <__avr32_s32_to_f64+0x40>
80005e0e:	c0 c3       	brcs	80005e26 <__avr32_s32_to_f64+0x2c>
80005e10:	f0 0e 11 20 	rsub	lr,r8,32
80005e14:	f6 08 09 4b 	lsl	r11,r11,r8
80005e18:	f4 0e 0a 4e 	lsr	lr,r10,lr
80005e1c:	1c 4b       	or	r11,lr
80005e1e:	f4 08 09 4a 	lsl	r10,r10,r8
80005e22:	10 19       	sub	r9,r8
80005e24:	c0 b8       	rjmp	80005e3a <__avr32_s32_to_f64+0x40>
80005e26:	f4 08 12 00 	clz	r8,r10
80005e2a:	f9 b8 03 00 	movlo	r8,0
80005e2e:	f7 b8 02 e0 	subhs	r8,-32
80005e32:	f4 08 09 4b 	lsl	r11,r10,r8
80005e36:	30 0a       	mov	r10,0
80005e38:	10 19       	sub	r9,r8
80005e3a:	58 09       	cp.w	r9,0
80005e3c:	e0 89 00 30 	brgt	80005e9c <__avr32_s32_to_f64+0xa2>
80005e40:	5c 39       	neg	r9
80005e42:	2f f9       	sub	r9,-1
80005e44:	e0 49 00 36 	cp.w	r9,54
80005e48:	c0 43       	brcs	80005e50 <__avr32_s32_to_f64+0x56>
80005e4a:	30 0b       	mov	r11,0
80005e4c:	30 0a       	mov	r10,0
80005e4e:	c2 68       	rjmp	80005e9a <__avr32_s32_to_f64+0xa0>
80005e50:	2f 69       	sub	r9,-10
80005e52:	f2 08 11 20 	rsub	r8,r9,32
80005e56:	e0 49 00 20 	cp.w	r9,32
80005e5a:	c0 b2       	brcc	80005e70 <__avr32_s32_to_f64+0x76>
80005e5c:	f4 08 09 4e 	lsl	lr,r10,r8
80005e60:	f6 08 09 48 	lsl	r8,r11,r8
80005e64:	f4 09 0a 4a 	lsr	r10,r10,r9
80005e68:	f6 09 0a 4b 	lsr	r11,r11,r9
80005e6c:	10 4b       	or	r11,r8
80005e6e:	c0 88       	rjmp	80005e7e <__avr32_s32_to_f64+0x84>
80005e70:	f6 08 09 4e 	lsl	lr,r11,r8
80005e74:	14 4e       	or	lr,r10
80005e76:	16 9a       	mov	r10,r11
80005e78:	30 0b       	mov	r11,0
80005e7a:	f4 09 0a 4a 	lsr	r10,r10,r9
80005e7e:	ed ba 00 00 	bld	r10,0x0
80005e82:	c0 92       	brcc	80005e94 <__avr32_s32_to_f64+0x9a>
80005e84:	1c 7e       	tst	lr,lr
80005e86:	c0 41       	brne	80005e8e <__avr32_s32_to_f64+0x94>
80005e88:	ed ba 00 01 	bld	r10,0x1
80005e8c:	c0 42       	brcc	80005e94 <__avr32_s32_to_f64+0x9a>
80005e8e:	2f fa       	sub	r10,-1
80005e90:	f7 bb 02 ff 	subhs	r11,-1
80005e94:	5c fc       	rol	r12
80005e96:	5d 0b       	ror	r11
80005e98:	5d 0a       	ror	r10
80005e9a:	d8 02       	popm	pc
80005e9c:	e0 68 03 ff 	mov	r8,1023
80005ea0:	ed ba 00 0b 	bld	r10,0xb
80005ea4:	f7 b8 00 ff 	subeq	r8,-1
80005ea8:	10 0a       	add	r10,r8
80005eaa:	5c 0b       	acr	r11
80005eac:	f7 b9 03 fe 	sublo	r9,-2
80005eb0:	e0 49 07 ff 	cp.w	r9,2047
80005eb4:	c0 55       	brlt	80005ebe <__avr32_s32_to_f64+0xc4>
80005eb6:	30 0a       	mov	r10,0
80005eb8:	fc 1b ff e0 	movh	r11,0xffe0
80005ebc:	c0 c8       	rjmp	80005ed4 <__floatsidf_return_op1>
80005ebe:	ed bb 00 1f 	bld	r11,0x1f
80005ec2:	f7 b9 01 01 	subne	r9,1
80005ec6:	ab 9a       	lsr	r10,0xb
80005ec8:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80005ecc:	a1 7b       	lsl	r11,0x1
80005ece:	ab 9b       	lsr	r11,0xb
80005ed0:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80005ed4 <__floatsidf_return_op1>:
80005ed4:	a1 7c       	lsl	r12,0x1
80005ed6:	5d 0b       	ror	r11
80005ed8:	d8 02       	popm	pc
80005eda:	d7 03       	nop

80005edc <__avr32_f64_div>:
80005edc:	eb cd 40 ff 	pushm	r0-r7,lr
80005ee0:	f7 e9 20 0e 	eor	lr,r11,r9
80005ee4:	f6 07 16 14 	lsr	r7,r11,0x14
80005ee8:	a9 7b       	lsl	r11,0x9
80005eea:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80005eee:	a9 7a       	lsl	r10,0x9
80005ef0:	bd bb       	sbr	r11,0x1d
80005ef2:	e4 1b 3f ff 	andh	r11,0x3fff
80005ef6:	ab d7       	cbr	r7,0xb
80005ef8:	e0 80 00 cc 	breq	80006090 <__avr32_f64_div_round_subnormal+0x54>
80005efc:	e0 47 07 ff 	cp.w	r7,2047
80005f00:	e0 84 00 b5 	brge	8000606a <__avr32_f64_div_round_subnormal+0x2e>
80005f04:	f2 06 16 14 	lsr	r6,r9,0x14
80005f08:	a9 79       	lsl	r9,0x9
80005f0a:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80005f0e:	a9 78       	lsl	r8,0x9
80005f10:	bd b9       	sbr	r9,0x1d
80005f12:	e4 19 3f ff 	andh	r9,0x3fff
80005f16:	ab d6       	cbr	r6,0xb
80005f18:	e0 80 00 e2 	breq	800060dc <__avr32_f64_div_round_subnormal+0xa0>
80005f1c:	e0 46 07 ff 	cp.w	r6,2047
80005f20:	e0 84 00 b2 	brge	80006084 <__avr32_f64_div_round_subnormal+0x48>
80005f24:	0c 17       	sub	r7,r6
80005f26:	fe 37 fc 01 	sub	r7,-1023
80005f2a:	fc 1c 80 00 	movh	r12,0x8000
80005f2e:	f8 03 16 01 	lsr	r3,r12,0x1
80005f32:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80005f36:	5c d4       	com	r4
80005f38:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80005f3c:	e6 09 06 44 	mulu.d	r4,r3,r9
80005f40:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80005f44:	e6 05 06 44 	mulu.d	r4,r3,r5
80005f48:	ea 03 15 02 	lsl	r3,r5,0x2
80005f4c:	e6 09 06 44 	mulu.d	r4,r3,r9
80005f50:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80005f54:	e6 05 06 44 	mulu.d	r4,r3,r5
80005f58:	ea 03 15 02 	lsl	r3,r5,0x2
80005f5c:	e6 09 06 44 	mulu.d	r4,r3,r9
80005f60:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80005f64:	e6 05 06 44 	mulu.d	r4,r3,r5
80005f68:	ea 03 15 02 	lsl	r3,r5,0x2
80005f6c:	e6 08 06 40 	mulu.d	r0,r3,r8
80005f70:	e4 09 07 40 	macu.d	r0,r2,r9
80005f74:	e6 09 06 44 	mulu.d	r4,r3,r9
80005f78:	02 04       	add	r4,r1
80005f7a:	5c 05       	acr	r5
80005f7c:	a3 65       	lsl	r5,0x2
80005f7e:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80005f82:	a3 64       	lsl	r4,0x2
80005f84:	5c 34       	neg	r4
80005f86:	f8 05 01 45 	sbc	r5,r12,r5
80005f8a:	e6 04 06 40 	mulu.d	r0,r3,r4
80005f8e:	e4 05 07 40 	macu.d	r0,r2,r5
80005f92:	e6 05 06 44 	mulu.d	r4,r3,r5
80005f96:	02 04       	add	r4,r1
80005f98:	5c 05       	acr	r5
80005f9a:	ea 03 15 02 	lsl	r3,r5,0x2
80005f9e:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80005fa2:	e8 02 15 02 	lsl	r2,r4,0x2
80005fa6:	e6 08 06 40 	mulu.d	r0,r3,r8
80005faa:	e4 09 07 40 	macu.d	r0,r2,r9
80005fae:	e6 09 06 44 	mulu.d	r4,r3,r9
80005fb2:	02 04       	add	r4,r1
80005fb4:	5c 05       	acr	r5
80005fb6:	a3 65       	lsl	r5,0x2
80005fb8:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80005fbc:	a3 64       	lsl	r4,0x2
80005fbe:	5c 34       	neg	r4
80005fc0:	f8 05 01 45 	sbc	r5,r12,r5
80005fc4:	e6 04 06 40 	mulu.d	r0,r3,r4
80005fc8:	e4 05 07 40 	macu.d	r0,r2,r5
80005fcc:	e6 05 06 44 	mulu.d	r4,r3,r5
80005fd0:	02 04       	add	r4,r1
80005fd2:	5c 05       	acr	r5
80005fd4:	ea 03 15 02 	lsl	r3,r5,0x2
80005fd8:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80005fdc:	e8 02 15 02 	lsl	r2,r4,0x2
80005fe0:	e6 0a 06 40 	mulu.d	r0,r3,r10
80005fe4:	e4 0b 07 40 	macu.d	r0,r2,r11
80005fe8:	e6 0b 06 42 	mulu.d	r2,r3,r11
80005fec:	02 02       	add	r2,r1
80005fee:	5c 03       	acr	r3
80005ff0:	ed b3 00 1c 	bld	r3,0x1c
80005ff4:	c0 90       	breq	80006006 <__avr32_f64_div+0x12a>
80005ff6:	a1 72       	lsl	r2,0x1
80005ff8:	5c f3       	rol	r3
80005ffa:	20 17       	sub	r7,1
80005ffc:	a3 9a       	lsr	r10,0x3
80005ffe:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80006002:	a3 9b       	lsr	r11,0x3
80006004:	c0 58       	rjmp	8000600e <__avr32_f64_div+0x132>
80006006:	a5 8a       	lsr	r10,0x4
80006008:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
8000600c:	a5 8b       	lsr	r11,0x4
8000600e:	58 07       	cp.w	r7,0
80006010:	e0 8a 00 8b 	brle	80006126 <__avr32_f64_div_res_subnormal>
80006014:	e0 12 ff 00 	andl	r2,0xff00
80006018:	e8 12 00 80 	orl	r2,0x80
8000601c:	e6 08 06 40 	mulu.d	r0,r3,r8
80006020:	e4 09 07 40 	macu.d	r0,r2,r9
80006024:	e4 08 06 44 	mulu.d	r4,r2,r8
80006028:	e6 09 06 48 	mulu.d	r8,r3,r9
8000602c:	00 05       	add	r5,r0
8000602e:	f0 01 00 48 	adc	r8,r8,r1
80006032:	5c 09       	acr	r9
80006034:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80006038:	58 04       	cp.w	r4,0
8000603a:	5c 25       	cpc	r5

8000603c <__avr32_f64_div_round_subnormal>:
8000603c:	f4 08 13 00 	cpc	r8,r10
80006040:	f6 09 13 00 	cpc	r9,r11
80006044:	5f 36       	srlo	r6
80006046:	f8 06 17 00 	moveq	r6,r12
8000604a:	e4 0a 16 08 	lsr	r10,r2,0x8
8000604e:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80006052:	e6 0b 16 08 	lsr	r11,r3,0x8
80006056:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8000605a:	ed be 00 1f 	bld	lr,0x1f
8000605e:	ef bb 00 1f 	bst	r11,0x1f
80006062:	0c 0a       	add	r10,r6
80006064:	5c 0b       	acr	r11
80006066:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8000606a:	e4 1b 00 0f 	andh	r11,0xf
8000606e:	14 4b       	or	r11,r10
80006070:	e0 81 00 a7 	brne	800061be <__avr32_f64_div_res_subnormal+0x98>
80006074:	f2 06 16 14 	lsr	r6,r9,0x14
80006078:	ab d6       	cbr	r6,0xb
8000607a:	e0 46 07 ff 	cp.w	r6,2047
8000607e:	e0 81 00 a4 	brne	800061c6 <__avr32_f64_div_res_subnormal+0xa0>
80006082:	c9 e8       	rjmp	800061be <__avr32_f64_div_res_subnormal+0x98>
80006084:	e4 19 00 0f 	andh	r9,0xf
80006088:	10 49       	or	r9,r8
8000608a:	e0 81 00 9a 	brne	800061be <__avr32_f64_div_res_subnormal+0x98>
8000608e:	c9 28       	rjmp	800061b2 <__avr32_f64_div_res_subnormal+0x8c>
80006090:	a3 7b       	lsl	r11,0x3
80006092:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80006096:	a3 7a       	lsl	r10,0x3
80006098:	f5 eb 10 04 	or	r4,r10,r11
8000609c:	e0 80 00 a0 	breq	800061dc <__avr32_f64_div_op1_zero>
800060a0:	f6 04 12 00 	clz	r4,r11
800060a4:	c1 70       	breq	800060d2 <__avr32_f64_div_round_subnormal+0x96>
800060a6:	c0 c3       	brcs	800060be <__avr32_f64_div_round_subnormal+0x82>
800060a8:	e8 05 11 20 	rsub	r5,r4,32
800060ac:	f6 04 09 4b 	lsl	r11,r11,r4
800060b0:	f4 05 0a 45 	lsr	r5,r10,r5
800060b4:	0a 4b       	or	r11,r5
800060b6:	f4 04 09 4a 	lsl	r10,r10,r4
800060ba:	08 17       	sub	r7,r4
800060bc:	c0 b8       	rjmp	800060d2 <__avr32_f64_div_round_subnormal+0x96>
800060be:	f4 04 12 00 	clz	r4,r10
800060c2:	f9 b4 03 00 	movlo	r4,0
800060c6:	f7 b4 02 e0 	subhs	r4,-32
800060ca:	f4 04 09 4b 	lsl	r11,r10,r4
800060ce:	30 0a       	mov	r10,0
800060d0:	08 17       	sub	r7,r4
800060d2:	a3 8a       	lsr	r10,0x2
800060d4:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800060d8:	a3 8b       	lsr	r11,0x2
800060da:	c1 1b       	rjmp	80005efc <__avr32_f64_div+0x20>
800060dc:	a3 79       	lsl	r9,0x3
800060de:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800060e2:	a3 78       	lsl	r8,0x3
800060e4:	f3 e8 10 04 	or	r4,r9,r8
800060e8:	c6 f0       	breq	800061c6 <__avr32_f64_div_res_subnormal+0xa0>
800060ea:	f2 04 12 00 	clz	r4,r9
800060ee:	c1 70       	breq	8000611c <__avr32_f64_div_round_subnormal+0xe0>
800060f0:	c0 c3       	brcs	80006108 <__avr32_f64_div_round_subnormal+0xcc>
800060f2:	e8 05 11 20 	rsub	r5,r4,32
800060f6:	f2 04 09 49 	lsl	r9,r9,r4
800060fa:	f0 05 0a 45 	lsr	r5,r8,r5
800060fe:	0a 49       	or	r9,r5
80006100:	f0 04 09 48 	lsl	r8,r8,r4
80006104:	08 16       	sub	r6,r4
80006106:	c0 b8       	rjmp	8000611c <__avr32_f64_div_round_subnormal+0xe0>
80006108:	f0 04 12 00 	clz	r4,r8
8000610c:	f9 b4 03 00 	movlo	r4,0
80006110:	f7 b4 02 e0 	subhs	r4,-32
80006114:	f0 04 09 49 	lsl	r9,r8,r4
80006118:	30 08       	mov	r8,0
8000611a:	08 16       	sub	r6,r4
8000611c:	a3 88       	lsr	r8,0x2
8000611e:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80006122:	a3 89       	lsr	r9,0x2
80006124:	cf ca       	rjmp	80005f1c <__avr32_f64_div+0x40>

80006126 <__avr32_f64_div_res_subnormal>:
80006126:	5c 37       	neg	r7
80006128:	2f f7       	sub	r7,-1
8000612a:	f1 b7 04 c0 	satu	r7,0x6
8000612e:	e0 47 00 20 	cp.w	r7,32
80006132:	c1 54       	brge	8000615c <__avr32_f64_div_res_subnormal+0x36>
80006134:	ee 06 11 20 	rsub	r6,r7,32
80006138:	e4 07 0a 42 	lsr	r2,r2,r7
8000613c:	e6 06 09 4c 	lsl	r12,r3,r6
80006140:	18 42       	or	r2,r12
80006142:	e6 07 0a 43 	lsr	r3,r3,r7
80006146:	f4 06 09 41 	lsl	r1,r10,r6
8000614a:	f4 07 0a 4a 	lsr	r10,r10,r7
8000614e:	f6 06 09 4c 	lsl	r12,r11,r6
80006152:	18 4a       	or	r10,r12
80006154:	f6 07 0a 4b 	lsr	r11,r11,r7
80006158:	30 00       	mov	r0,0
8000615a:	c1 58       	rjmp	80006184 <__avr32_f64_div_res_subnormal+0x5e>
8000615c:	ee 06 11 20 	rsub	r6,r7,32
80006160:	f9 b0 00 00 	moveq	r0,0
80006164:	f9 bc 00 00 	moveq	r12,0
80006168:	c0 50       	breq	80006172 <__avr32_f64_div_res_subnormal+0x4c>
8000616a:	f4 06 09 40 	lsl	r0,r10,r6
8000616e:	f6 06 09 4c 	lsl	r12,r11,r6
80006172:	e6 07 0a 42 	lsr	r2,r3,r7
80006176:	30 03       	mov	r3,0
80006178:	f4 07 0a 41 	lsr	r1,r10,r7
8000617c:	18 41       	or	r1,r12
8000617e:	f6 07 0a 4a 	lsr	r10,r11,r7
80006182:	30 0b       	mov	r11,0
80006184:	e0 12 ff 00 	andl	r2,0xff00
80006188:	e8 12 00 80 	orl	r2,0x80
8000618c:	e6 08 06 46 	mulu.d	r6,r3,r8
80006190:	e4 09 07 46 	macu.d	r6,r2,r9
80006194:	e4 08 06 44 	mulu.d	r4,r2,r8
80006198:	e6 09 06 48 	mulu.d	r8,r3,r9
8000619c:	0c 05       	add	r5,r6
8000619e:	f0 07 00 48 	adc	r8,r8,r7
800061a2:	5c 09       	acr	r9
800061a4:	30 07       	mov	r7,0
800061a6:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
800061aa:	00 34       	cp.w	r4,r0
800061ac:	e2 05 13 00 	cpc	r5,r1
800061b0:	c4 6b       	rjmp	8000603c <__avr32_f64_div_round_subnormal>
800061b2:	1c 9b       	mov	r11,lr
800061b4:	e6 1b 80 00 	andh	r11,0x8000,COH
800061b8:	30 0a       	mov	r10,0
800061ba:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800061be:	3f fb       	mov	r11,-1
800061c0:	30 0a       	mov	r10,0
800061c2:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
800061c6:	f5 eb 10 04 	or	r4,r10,r11
800061ca:	c0 90       	breq	800061dc <__avr32_f64_div_op1_zero>
800061cc:	1c 9b       	mov	r11,lr
800061ce:	e6 1b 80 00 	andh	r11,0x8000,COH
800061d2:	ea 1b 7f f0 	orh	r11,0x7ff0
800061d6:	30 0a       	mov	r10,0
800061d8:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

800061dc <__avr32_f64_div_op1_zero>:
800061dc:	f1 e9 10 15 	or	r5,r8,r9<<0x1
800061e0:	ce f0       	breq	800061be <__avr32_f64_div_res_subnormal+0x98>
800061e2:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
800061e6:	e0 44 07 ff 	cp.w	r4,2047
800061ea:	ce 41       	brne	800061b2 <__avr32_f64_div_res_subnormal+0x8c>
800061ec:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
800061f0:	ce 10       	breq	800061b2 <__avr32_f64_div_res_subnormal+0x8c>
800061f2:	ce 6b       	rjmp	800061be <__avr32_f64_div_res_subnormal+0x98>

800061f4 <__avr32_f32_div>:
800061f4:	f7 ec 20 08 	eor	r8,r11,r12
800061f8:	a1 7c       	lsl	r12,0x1
800061fa:	a1 7b       	lsl	r11,0x1
800061fc:	c7 a0       	breq	800062f0 <__divsf_return_op1+0x16>
800061fe:	18 7c       	tst	r12,r12
80006200:	f9 b9 00 00 	moveq	r9,0
80006204:	c0 90       	breq	80006216 <__avr32_f32_div+0x22>
80006206:	f8 09 16 18 	lsr	r9,r12,0x18
8000620a:	c7 e0       	breq	80006306 <__divsf_return_op1+0x2c>
8000620c:	e0 49 00 ff 	cp.w	r9,255
80006210:	c6 82       	brcc	800062e0 <__divsf_return_op1+0x6>
80006212:	a7 7c       	lsl	r12,0x7
80006214:	bf bc       	sbr	r12,0x1f
80006216:	f6 0a 16 18 	lsr	r10,r11,0x18
8000621a:	c7 e0       	breq	80006316 <__divsf_return_op1+0x3c>
8000621c:	e0 4a 00 ff 	cp.w	r10,255
80006220:	c6 62       	brcc	800062ec <__divsf_return_op1+0x12>
80006222:	a7 7b       	lsl	r11,0x7
80006224:	bf bb       	sbr	r11,0x1f
80006226:	58 09       	cp.w	r9,0
80006228:	f5 bc 00 00 	subfeq	r12,0
8000622c:	5e 0d       	reteq	0
8000622e:	1a d5       	st.w	--sp,r5
80006230:	bb 27       	st.d	--sp,r6
80006232:	14 19       	sub	r9,r10
80006234:	28 19       	sub	r9,-127
80006236:	fc 1a 80 00 	movh	r10,0x8000
8000623a:	a3 8c       	lsr	r12,0x2
8000623c:	f6 05 16 02 	lsr	r5,r11,0x2
80006240:	f4 0b 16 01 	lsr	r11,r10,0x1
80006244:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
80006248:	5c d6       	com	r6
8000624a:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
8000624e:	f6 05 06 46 	mulu.d	r6,r11,r5
80006252:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80006256:	f6 07 06 46 	mulu.d	r6,r11,r7
8000625a:	ee 0b 15 02 	lsl	r11,r7,0x2
8000625e:	f6 05 06 46 	mulu.d	r6,r11,r5
80006262:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80006266:	f6 07 06 46 	mulu.d	r6,r11,r7
8000626a:	ee 0b 15 02 	lsl	r11,r7,0x2
8000626e:	f6 05 06 46 	mulu.d	r6,r11,r5
80006272:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80006276:	f6 07 06 46 	mulu.d	r6,r11,r7
8000627a:	ee 0b 15 02 	lsl	r11,r7,0x2
8000627e:	f6 05 06 46 	mulu.d	r6,r11,r5
80006282:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80006286:	f6 07 06 46 	mulu.d	r6,r11,r7
8000628a:	ee 0b 15 02 	lsl	r11,r7,0x2
8000628e:	f6 0c 06 46 	mulu.d	r6,r11,r12
80006292:	a5 8c       	lsr	r12,0x4
80006294:	ed b7 00 1c 	bld	r7,0x1c
80006298:	c0 40       	breq	800062a0 <__avr32_f32_div+0xac>
8000629a:	a1 77       	lsl	r7,0x1
8000629c:	20 19       	sub	r9,1
8000629e:	a1 7c       	lsl	r12,0x1
800062a0:	58 09       	cp.w	r9,0
800062a2:	e0 8a 00 42 	brle	80006326 <__avr32_f32_div_res_subnormal>
800062a6:	e0 17 ff e0 	andl	r7,0xffe0
800062aa:	e8 17 00 10 	orl	r7,0x10
800062ae:	ea 07 06 4a 	mulu.d	r10,r5,r7
800062b2:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
800062b6:	58 0a       	cp.w	r10,0

800062b8 <__avr32_f32_div_round_subnormal>:
800062b8:	f8 0b 13 00 	cpc	r11,r12
800062bc:	5f 3b       	srlo	r11
800062be:	ea 0b 17 00 	moveq	r11,r5
800062c2:	ee 0c 16 05 	lsr	r12,r7,0x5
800062c6:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
800062ca:	bb 07       	ld.d	r6,sp++
800062cc:	1b 05       	ld.w	r5,sp++
800062ce:	ed b8 00 1f 	bld	r8,0x1f
800062d2:	ef bc 00 1f 	bst	r12,0x1f
800062d6:	16 0c       	add	r12,r11
800062d8:	5e fc       	retal	r12

800062da <__divsf_return_op1>:
800062da:	a1 78       	lsl	r8,0x1
800062dc:	5d 0c       	ror	r12
800062de:	5e fc       	retal	r12
800062e0:	5e 1e       	retne	-1
800062e2:	fc 19 ff 00 	movh	r9,0xff00
800062e6:	12 3b       	cp.w	r11,r9
800062e8:	cf 93       	brcs	800062da <__divsf_return_op1>
800062ea:	5e fe       	retal	-1
800062ec:	5e 0d       	reteq	0
800062ee:	5e fe       	retal	-1
800062f0:	18 7c       	tst	r12,r12
800062f2:	5e 0e       	reteq	-1
800062f4:	f8 09 16 18 	lsr	r9,r12,0x18
800062f8:	c0 70       	breq	80006306 <__divsf_return_op1+0x2c>
800062fa:	e0 49 00 ff 	cp.w	r9,255
800062fe:	cf 12       	brcc	800062e0 <__divsf_return_op1+0x6>
80006300:	fc 1c ff 00 	movh	r12,0xff00
80006304:	ce bb       	rjmp	800062da <__divsf_return_op1>
80006306:	a7 7c       	lsl	r12,0x7
80006308:	f8 09 12 00 	clz	r9,r12
8000630c:	f8 09 09 4c 	lsl	r12,r12,r9
80006310:	f2 09 11 01 	rsub	r9,r9,1
80006314:	c8 1b       	rjmp	80006216 <__avr32_f32_div+0x22>
80006316:	a7 7b       	lsl	r11,0x7
80006318:	f6 0a 12 00 	clz	r10,r11
8000631c:	f6 0a 09 4b 	lsl	r11,r11,r10
80006320:	f4 0a 11 01 	rsub	r10,r10,1
80006324:	c8 5b       	rjmp	8000622e <__avr32_f32_div+0x3a>

80006326 <__avr32_f32_div_res_subnormal>:
80006326:	5c 39       	neg	r9
80006328:	2f f9       	sub	r9,-1
8000632a:	f1 b9 04 a0 	satu	r9,0x5
8000632e:	f2 0a 11 20 	rsub	r10,r9,32
80006332:	ee 09 0a 47 	lsr	r7,r7,r9
80006336:	f8 0a 09 46 	lsl	r6,r12,r10
8000633a:	f8 09 0a 4c 	lsr	r12,r12,r9
8000633e:	e0 17 ff e0 	andl	r7,0xffe0
80006342:	e8 17 00 10 	orl	r7,0x10
80006346:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000634a:	30 09       	mov	r9,0
8000634c:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80006350:	0c 3a       	cp.w	r10,r6
80006352:	cb 3b       	rjmp	800062b8 <__avr32_f32_div_round_subnormal>

80006354 <__avr32_f32_mul>:
80006354:	18 98       	mov	r8,r12
80006356:	16 5c       	eor	r12,r11
80006358:	e6 1c 80 00 	andh	r12,0x8000,COH
8000635c:	bf d8       	cbr	r8,0x1f
8000635e:	c6 60       	breq	8000642a <__avr32_f32_mul_op1_zero>
80006360:	bf db       	cbr	r11,0x1f
80006362:	f0 0b 0c 4a 	max	r10,r8,r11
80006366:	f0 0b 0d 49 	min	r9,r8,r11
8000636a:	f4 08 15 08 	lsl	r8,r10,0x8
8000636e:	bf b8       	sbr	r8,0x1f
80006370:	b7 9a       	lsr	r10,0x17
80006372:	e0 4a 00 ff 	cp.w	r10,255
80006376:	c3 d0       	breq	800063f0 <__avr32_f32_mul_op1_nan_or_inf>
80006378:	f2 0b 15 08 	lsl	r11,r9,0x8
8000637c:	bf bb       	sbr	r11,0x1f
8000637e:	b7 99       	lsr	r9,0x17
80006380:	c2 40       	breq	800063c8 <__avr32_f32_mul_op2_subnormal>
80006382:	14 09       	add	r9,r10
80006384:	f0 0b 06 4a 	mulu.d	r10,r8,r11
80006388:	f6 08 15 01 	lsl	r8,r11,0x1
8000638c:	f0 0b 17 20 	movhs	r11,r8
80006390:	f7 b9 02 01 	subhs	r9,1
80006394:	a9 8a       	lsr	r10,0x8
80006396:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
8000639a:	27 e9       	sub	r9,126
8000639c:	e0 8a 00 39 	brle	8000640e <__avr32_f32_mul_res_subnormal>
800063a0:	e0 49 00 ff 	cp.w	r9,255
800063a4:	c0 f4       	brge	800063c2 <__avr32_f32_mul_round+0x14>
800063a6:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
800063aa:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

800063ae <__avr32_f32_mul_round>:
800063ae:	fc 18 80 00 	movh	r8,0x8000
800063b2:	ed bc 00 00 	bld	r12,0x0
800063b6:	f7 b8 01 ff 	subne	r8,-1
800063ba:	10 3a       	cp.w	r10,r8
800063bc:	f7 bc 02 ff 	subhs	r12,-1
800063c0:	5e fc       	retal	r12
800063c2:	ea 1c 7f 80 	orh	r12,0x7f80
800063c6:	5e fc       	retal	r12

800063c8 <__avr32_f32_mul_op2_subnormal>:
800063c8:	bf db       	cbr	r11,0x1f
800063ca:	f6 09 12 00 	clz	r9,r11
800063ce:	5e 3d       	retlo	0
800063d0:	20 89       	sub	r9,8
800063d2:	f6 09 09 4b 	lsl	r11,r11,r9
800063d6:	f2 09 11 01 	rsub	r9,r9,1
800063da:	14 7a       	tst	r10,r10
800063dc:	cd 31       	brne	80006382 <__avr32_f32_mul+0x2e>
800063de:	bf d8       	cbr	r8,0x1f
800063e0:	f6 0a 12 00 	clz	r10,r11
800063e4:	5e 3d       	retlo	0
800063e6:	f0 0a 09 48 	lsl	r8,r8,r10
800063ea:	f4 0a 11 01 	rsub	r10,r10,1
800063ee:	cc ab       	rjmp	80006382 <__avr32_f32_mul+0x2e>

800063f0 <__avr32_f32_mul_op1_nan_or_inf>:
800063f0:	f0 0b 15 01 	lsl	r11,r8,0x1
800063f4:	5e 1e       	retne	-1
800063f6:	12 79       	tst	r9,r9
800063f8:	5e 0e       	reteq	-1
800063fa:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
800063fe:	f2 0b 16 17 	lsr	r11,r9,0x17
80006402:	e0 4b 00 ff 	cp.w	r11,255
80006406:	5e 1c       	retne	r12
80006408:	a9 79       	lsl	r9,0x9
8000640a:	5e 0c       	reteq	r12
8000640c:	5e fe       	retal	-1

8000640e <__avr32_f32_mul_res_subnormal>:
8000640e:	f2 09 11 09 	rsub	r9,r9,9
80006412:	f2 08 11 20 	rsub	r8,r9,32
80006416:	5e 3d       	retlo	0
80006418:	f6 09 0a 49 	lsr	r9,r11,r9
8000641c:	12 4c       	or	r12,r9
8000641e:	f6 08 09 4b 	lsl	r11,r11,r8
80006422:	e4 1a 00 ff 	andh	r10,0xff
80006426:	16 4a       	or	r10,r11
80006428:	cc 3b       	rjmp	800063ae <__avr32_f32_mul_round>

8000642a <__avr32_f32_mul_op1_zero>:
8000642a:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
8000642e:	e0 4a 00 ff 	cp.w	r10,255
80006432:	5e 1c       	retne	r12
80006434:	5e 0e       	reteq	-1

80006436 <__avr32_u32_to_f32>:
80006436:	58 0c       	cp.w	r12,0
80006438:	5e 0c       	reteq	r12
8000643a:	e0 6a 00 9e 	mov	r10,158
8000643e:	f8 09 12 00 	clz	r9,r12
80006442:	12 1a       	sub	r10,r9
80006444:	f8 09 09 4c 	lsl	r12,r12,r9
80006448:	58 0a       	cp.w	r10,0
8000644a:	e0 8a 00 14 	brle	80006472 <__avr32_u32_to_f32_subnormal>
8000644e:	37 f9       	mov	r9,127
80006450:	ed bc 00 08 	bld	r12,0x8
80006454:	f7 b9 00 ff 	subeq	r9,-1
80006458:	12 0c       	add	r12,r9
8000645a:	f7 ba 03 fe 	sublo	r10,-2
8000645e:	ed bc 00 1f 	bld	r12,0x1f
80006462:	f7 ba 01 01 	subne	r10,1
80006466:	f8 0c 16 07 	lsr	r12,r12,0x7
8000646a:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
8000646e:	a1 9c       	lsr	r12,0x1
80006470:	5e fc       	retal	r12

80006472 <__avr32_u32_to_f32_subnormal>:
80006472:	30 08       	mov	r8,0
80006474:	f4 0a 11 01 	rsub	r10,r10,1
80006478:	59 9a       	cp.w	r10,25
8000647a:	f9 bc 02 00 	movhs	r12,0
8000647e:	c1 32       	brcc	800064a4 <__avr32_u32_to_f32_subnormal+0x32>
80006480:	f4 09 11 20 	rsub	r9,r10,32
80006484:	f8 09 09 49 	lsl	r9,r12,r9
80006488:	5f 19       	srne	r9
8000648a:	f8 0a 0a 4c 	lsr	r12,r12,r10
8000648e:	12 4c       	or	r12,r9
80006490:	37 f9       	mov	r9,127
80006492:	ed bc 00 08 	bld	r12,0x8
80006496:	f7 b9 00 ff 	subeq	r9,-1
8000649a:	12 0c       	add	r12,r9
8000649c:	f8 0c 16 07 	lsr	r12,r12,0x7
800064a0:	a1 78       	lsl	r8,0x1
800064a2:	5d 0c       	ror	r12
800064a4:	5e fc       	retal	r12

800064a6 <__avr32_f32_to_u32>:
800064a6:	58 0c       	cp.w	r12,0
800064a8:	5e 6d       	retmi	0
800064aa:	f7 dc c2 e8 	bfextu	r11,r12,0x17,0x8
800064ae:	27 fb       	sub	r11,127
800064b0:	5e 3d       	retlo	0
800064b2:	f6 0b 11 1f 	rsub	r11,r11,31
800064b6:	a9 6c       	lsl	r12,0x8
800064b8:	bf bc       	sbr	r12,0x1f
800064ba:	f8 0b 0a 4c 	lsr	r12,r12,r11
800064be:	5e fc       	retal	r12

800064c0 <__avr32_f32_to_f64>:
800064c0:	f8 0b 15 01 	lsl	r11,r12,0x1
800064c4:	f9 ba 00 00 	moveq	r10,0
800064c8:	5e 0b       	reteq	r11
800064ca:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
800064ce:	e0 49 00 ff 	cp.w	r9,255
800064d2:	c1 e0       	breq	8000650e <__extendsfdf_return_op1+0x6>
800064d4:	a7 7b       	lsl	r11,0x7
800064d6:	30 0a       	mov	r10,0
800064d8:	58 09       	cp.w	r9,0
800064da:	f7 b9 00 ff 	subeq	r9,-1
800064de:	5f 18       	srne	r8
800064e0:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
800064e4:	fe 39 fc 80 	sub	r9,-896
800064e8:	f6 08 12 00 	clz	r8,r11
800064ec:	10 19       	sub	r9,r8
800064ee:	f6 08 09 4b 	lsl	r11,r11,r8
800064f2:	ed bb 00 1f 	bld	r11,0x1f
800064f6:	f7 b9 01 01 	subne	r9,1
800064fa:	ab 9a       	lsr	r10,0xb
800064fc:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80006500:	a1 7b       	lsl	r11,0x1
80006502:	ab 9b       	lsr	r11,0xb
80006504:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80006508 <__extendsfdf_return_op1>:
80006508:	a1 7c       	lsl	r12,0x1
8000650a:	5d 0b       	ror	r11
8000650c:	5e fb       	retal	r11
8000650e:	fc 1a ff e0 	movh	r10,0xffe0
80006512:	a9 6b       	lsl	r11,0x8
80006514:	f9 bb 01 ff 	movne	r11,-1
80006518:	f4 0b 17 00 	moveq	r11,r10
8000651c:	30 0a       	mov	r10,0
8000651e:	cf 5b       	rjmp	80006508 <__extendsfdf_return_op1>

80006520 <__avr32_udiv64>:
80006520:	d4 31       	pushm	r0-r7,lr
80006522:	1a 97       	mov	r7,sp
80006524:	20 3d       	sub	sp,12
80006526:	10 9c       	mov	r12,r8
80006528:	12 9e       	mov	lr,r9
8000652a:	14 93       	mov	r3,r10
8000652c:	58 09       	cp.w	r9,0
8000652e:	e0 81 00 bd 	brne	800066a8 <__avr32_udiv64+0x188>
80006532:	16 38       	cp.w	r8,r11
80006534:	e0 88 00 40 	brls	800065b4 <__avr32_udiv64+0x94>
80006538:	f0 08 12 00 	clz	r8,r8
8000653c:	c0 d0       	breq	80006556 <__avr32_udiv64+0x36>
8000653e:	f6 08 09 4b 	lsl	r11,r11,r8
80006542:	f0 09 11 20 	rsub	r9,r8,32
80006546:	f8 08 09 4c 	lsl	r12,r12,r8
8000654a:	f4 09 0a 49 	lsr	r9,r10,r9
8000654e:	f4 08 09 43 	lsl	r3,r10,r8
80006552:	f3 eb 10 0b 	or	r11,r9,r11
80006556:	f8 0e 16 10 	lsr	lr,r12,0x10
8000655a:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000655e:	f6 0e 0d 00 	divu	r0,r11,lr
80006562:	e6 0b 16 10 	lsr	r11,r3,0x10
80006566:	00 99       	mov	r9,r0
80006568:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000656c:	e0 0a 02 48 	mul	r8,r0,r10
80006570:	10 3b       	cp.w	r11,r8
80006572:	c0 a2       	brcc	80006586 <__avr32_udiv64+0x66>
80006574:	20 19       	sub	r9,1
80006576:	18 0b       	add	r11,r12
80006578:	18 3b       	cp.w	r11,r12
8000657a:	c0 63       	brcs	80006586 <__avr32_udiv64+0x66>
8000657c:	10 3b       	cp.w	r11,r8
8000657e:	f7 b9 03 01 	sublo	r9,1
80006582:	f7 dc e3 0b 	addcs	r11,r11,r12
80006586:	f6 08 01 01 	sub	r1,r11,r8
8000658a:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000658e:	e2 0e 0d 00 	divu	r0,r1,lr
80006592:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80006596:	00 98       	mov	r8,r0
80006598:	e0 0a 02 4a 	mul	r10,r0,r10
8000659c:	14 33       	cp.w	r3,r10
8000659e:	c0 82       	brcc	800065ae <__avr32_udiv64+0x8e>
800065a0:	20 18       	sub	r8,1
800065a2:	18 03       	add	r3,r12
800065a4:	18 33       	cp.w	r3,r12
800065a6:	c0 43       	brcs	800065ae <__avr32_udiv64+0x8e>
800065a8:	14 33       	cp.w	r3,r10
800065aa:	f7 b8 03 01 	sublo	r8,1
800065ae:	f1 e9 11 08 	or	r8,r8,r9<<0x10
800065b2:	cd f8       	rjmp	80006770 <__avr32_udiv64+0x250>
800065b4:	58 08       	cp.w	r8,0
800065b6:	c0 51       	brne	800065c0 <__avr32_udiv64+0xa0>
800065b8:	30 19       	mov	r9,1
800065ba:	f2 08 0d 08 	divu	r8,r9,r8
800065be:	10 9c       	mov	r12,r8
800065c0:	f8 06 12 00 	clz	r6,r12
800065c4:	c0 41       	brne	800065cc <__avr32_udiv64+0xac>
800065c6:	18 1b       	sub	r11,r12
800065c8:	30 19       	mov	r9,1
800065ca:	c4 08       	rjmp	8000664a <__avr32_udiv64+0x12a>
800065cc:	ec 01 11 20 	rsub	r1,r6,32
800065d0:	f4 01 0a 49 	lsr	r9,r10,r1
800065d4:	f8 06 09 4c 	lsl	r12,r12,r6
800065d8:	f6 06 09 48 	lsl	r8,r11,r6
800065dc:	f6 01 0a 41 	lsr	r1,r11,r1
800065e0:	f3 e8 10 08 	or	r8,r9,r8
800065e4:	f8 03 16 10 	lsr	r3,r12,0x10
800065e8:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
800065ec:	e2 03 0d 00 	divu	r0,r1,r3
800065f0:	f0 0b 16 10 	lsr	r11,r8,0x10
800065f4:	00 9e       	mov	lr,r0
800065f6:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
800065fa:	e0 05 02 49 	mul	r9,r0,r5
800065fe:	12 3b       	cp.w	r11,r9
80006600:	c0 a2       	brcc	80006614 <__avr32_udiv64+0xf4>
80006602:	20 1e       	sub	lr,1
80006604:	18 0b       	add	r11,r12
80006606:	18 3b       	cp.w	r11,r12
80006608:	c0 63       	brcs	80006614 <__avr32_udiv64+0xf4>
8000660a:	12 3b       	cp.w	r11,r9
8000660c:	f7 be 03 01 	sublo	lr,1
80006610:	f7 dc e3 0b 	addcs	r11,r11,r12
80006614:	12 1b       	sub	r11,r9
80006616:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000661a:	f6 03 0d 02 	divu	r2,r11,r3
8000661e:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80006622:	04 99       	mov	r9,r2
80006624:	e4 05 02 4b 	mul	r11,r2,r5
80006628:	16 38       	cp.w	r8,r11
8000662a:	c0 a2       	brcc	8000663e <__avr32_udiv64+0x11e>
8000662c:	20 19       	sub	r9,1
8000662e:	18 08       	add	r8,r12
80006630:	18 38       	cp.w	r8,r12
80006632:	c0 63       	brcs	8000663e <__avr32_udiv64+0x11e>
80006634:	16 38       	cp.w	r8,r11
80006636:	f7 b9 03 01 	sublo	r9,1
8000663a:	f1 dc e3 08 	addcs	r8,r8,r12
8000663e:	f4 06 09 43 	lsl	r3,r10,r6
80006642:	f0 0b 01 0b 	sub	r11,r8,r11
80006646:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000664a:	f8 06 16 10 	lsr	r6,r12,0x10
8000664e:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80006652:	f6 06 0d 00 	divu	r0,r11,r6
80006656:	e6 0b 16 10 	lsr	r11,r3,0x10
8000665a:	00 9a       	mov	r10,r0
8000665c:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80006660:	e0 0e 02 48 	mul	r8,r0,lr
80006664:	10 3b       	cp.w	r11,r8
80006666:	c0 a2       	brcc	8000667a <__avr32_udiv64+0x15a>
80006668:	20 1a       	sub	r10,1
8000666a:	18 0b       	add	r11,r12
8000666c:	18 3b       	cp.w	r11,r12
8000666e:	c0 63       	brcs	8000667a <__avr32_udiv64+0x15a>
80006670:	10 3b       	cp.w	r11,r8
80006672:	f7 ba 03 01 	sublo	r10,1
80006676:	f7 dc e3 0b 	addcs	r11,r11,r12
8000667a:	f6 08 01 01 	sub	r1,r11,r8
8000667e:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80006682:	e2 06 0d 00 	divu	r0,r1,r6
80006686:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000668a:	00 98       	mov	r8,r0
8000668c:	e0 0e 02 4b 	mul	r11,r0,lr
80006690:	16 33       	cp.w	r3,r11
80006692:	c0 82       	brcc	800066a2 <__avr32_udiv64+0x182>
80006694:	20 18       	sub	r8,1
80006696:	18 03       	add	r3,r12
80006698:	18 33       	cp.w	r3,r12
8000669a:	c0 43       	brcs	800066a2 <__avr32_udiv64+0x182>
8000669c:	16 33       	cp.w	r3,r11
8000669e:	f7 b8 03 01 	sublo	r8,1
800066a2:	f1 ea 11 08 	or	r8,r8,r10<<0x10
800066a6:	c6 98       	rjmp	80006778 <__avr32_udiv64+0x258>
800066a8:	16 39       	cp.w	r9,r11
800066aa:	e0 8b 00 65 	brhi	80006774 <__avr32_udiv64+0x254>
800066ae:	f2 09 12 00 	clz	r9,r9
800066b2:	c0 b1       	brne	800066c8 <__avr32_udiv64+0x1a8>
800066b4:	10 3a       	cp.w	r10,r8
800066b6:	5f 2a       	srhs	r10
800066b8:	1c 3b       	cp.w	r11,lr
800066ba:	5f b8       	srhi	r8
800066bc:	10 4a       	or	r10,r8
800066be:	f2 0a 18 00 	cp.b	r10,r9
800066c2:	c5 90       	breq	80006774 <__avr32_udiv64+0x254>
800066c4:	30 18       	mov	r8,1
800066c6:	c5 98       	rjmp	80006778 <__avr32_udiv64+0x258>
800066c8:	f0 09 09 46 	lsl	r6,r8,r9
800066cc:	f2 03 11 20 	rsub	r3,r9,32
800066d0:	fc 09 09 4e 	lsl	lr,lr,r9
800066d4:	f0 03 0a 48 	lsr	r8,r8,r3
800066d8:	f6 09 09 4c 	lsl	r12,r11,r9
800066dc:	f4 03 0a 42 	lsr	r2,r10,r3
800066e0:	ef 46 ff f4 	st.w	r7[-12],r6
800066e4:	f6 03 0a 43 	lsr	r3,r11,r3
800066e8:	18 42       	or	r2,r12
800066ea:	f1 ee 10 0c 	or	r12,r8,lr
800066ee:	f8 01 16 10 	lsr	r1,r12,0x10
800066f2:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
800066f6:	e6 01 0d 04 	divu	r4,r3,r1
800066fa:	e4 03 16 10 	lsr	r3,r2,0x10
800066fe:	08 9e       	mov	lr,r4
80006700:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80006704:	e8 06 02 48 	mul	r8,r4,r6
80006708:	10 33       	cp.w	r3,r8
8000670a:	c0 a2       	brcc	8000671e <__avr32_udiv64+0x1fe>
8000670c:	20 1e       	sub	lr,1
8000670e:	18 03       	add	r3,r12
80006710:	18 33       	cp.w	r3,r12
80006712:	c0 63       	brcs	8000671e <__avr32_udiv64+0x1fe>
80006714:	10 33       	cp.w	r3,r8
80006716:	f7 be 03 01 	sublo	lr,1
8000671a:	e7 dc e3 03 	addcs	r3,r3,r12
8000671e:	10 13       	sub	r3,r8
80006720:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80006724:	e6 01 0d 00 	divu	r0,r3,r1
80006728:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000672c:	00 98       	mov	r8,r0
8000672e:	e0 06 02 46 	mul	r6,r0,r6
80006732:	0c 3b       	cp.w	r11,r6
80006734:	c0 a2       	brcc	80006748 <__avr32_udiv64+0x228>
80006736:	20 18       	sub	r8,1
80006738:	18 0b       	add	r11,r12
8000673a:	18 3b       	cp.w	r11,r12
8000673c:	c0 63       	brcs	80006748 <__avr32_udiv64+0x228>
8000673e:	0c 3b       	cp.w	r11,r6
80006740:	f7 dc e3 0b 	addcs	r11,r11,r12
80006744:	f7 b8 03 01 	sublo	r8,1
80006748:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000674c:	ee f4 ff f4 	ld.w	r4,r7[-12]
80006750:	0c 1b       	sub	r11,r6
80006752:	f0 04 06 42 	mulu.d	r2,r8,r4
80006756:	06 95       	mov	r5,r3
80006758:	16 35       	cp.w	r5,r11
8000675a:	e0 8b 00 0a 	brhi	8000676e <__avr32_udiv64+0x24e>
8000675e:	5f 0b       	sreq	r11
80006760:	f4 09 09 49 	lsl	r9,r10,r9
80006764:	12 32       	cp.w	r2,r9
80006766:	5f b9       	srhi	r9
80006768:	f7 e9 00 09 	and	r9,r11,r9
8000676c:	c0 60       	breq	80006778 <__avr32_udiv64+0x258>
8000676e:	20 18       	sub	r8,1
80006770:	30 09       	mov	r9,0
80006772:	c0 38       	rjmp	80006778 <__avr32_udiv64+0x258>
80006774:	30 09       	mov	r9,0
80006776:	12 98       	mov	r8,r9
80006778:	10 9a       	mov	r10,r8
8000677a:	12 93       	mov	r3,r9
8000677c:	10 92       	mov	r2,r8
8000677e:	12 9b       	mov	r11,r9
80006780:	2f dd       	sub	sp,-12
80006782:	d8 32       	popm	r0-r7,pc

80006784 <memcpy>:
80006784:	58 8a       	cp.w	r10,8
80006786:	c2 f5       	brlt	800067e4 <memcpy+0x60>
80006788:	f9 eb 10 09 	or	r9,r12,r11
8000678c:	e2 19 00 03 	andl	r9,0x3,COH
80006790:	e0 81 00 97 	brne	800068be <memcpy+0x13a>
80006794:	e0 4a 00 20 	cp.w	r10,32
80006798:	c3 b4       	brge	8000680e <memcpy+0x8a>
8000679a:	f4 08 14 02 	asr	r8,r10,0x2
8000679e:	f0 09 11 08 	rsub	r9,r8,8
800067a2:	fe 09 00 2f 	add	pc,pc,r9<<0x2
800067a6:	76 69       	ld.w	r9,r11[0x18]
800067a8:	99 69       	st.w	r12[0x18],r9
800067aa:	76 59       	ld.w	r9,r11[0x14]
800067ac:	99 59       	st.w	r12[0x14],r9
800067ae:	76 49       	ld.w	r9,r11[0x10]
800067b0:	99 49       	st.w	r12[0x10],r9
800067b2:	76 39       	ld.w	r9,r11[0xc]
800067b4:	99 39       	st.w	r12[0xc],r9
800067b6:	76 29       	ld.w	r9,r11[0x8]
800067b8:	99 29       	st.w	r12[0x8],r9
800067ba:	76 19       	ld.w	r9,r11[0x4]
800067bc:	99 19       	st.w	r12[0x4],r9
800067be:	76 09       	ld.w	r9,r11[0x0]
800067c0:	99 09       	st.w	r12[0x0],r9
800067c2:	f6 08 00 2b 	add	r11,r11,r8<<0x2
800067c6:	f8 08 00 28 	add	r8,r12,r8<<0x2
800067ca:	e0 1a 00 03 	andl	r10,0x3
800067ce:	f4 0a 11 04 	rsub	r10,r10,4
800067d2:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800067d6:	17 a9       	ld.ub	r9,r11[0x2]
800067d8:	b0 a9       	st.b	r8[0x2],r9
800067da:	17 99       	ld.ub	r9,r11[0x1]
800067dc:	b0 99       	st.b	r8[0x1],r9
800067de:	17 89       	ld.ub	r9,r11[0x0]
800067e0:	b0 89       	st.b	r8[0x0],r9
800067e2:	5e fc       	retal	r12
800067e4:	f4 0a 11 09 	rsub	r10,r10,9
800067e8:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
800067ec:	17 f9       	ld.ub	r9,r11[0x7]
800067ee:	b8 f9       	st.b	r12[0x7],r9
800067f0:	17 e9       	ld.ub	r9,r11[0x6]
800067f2:	b8 e9       	st.b	r12[0x6],r9
800067f4:	17 d9       	ld.ub	r9,r11[0x5]
800067f6:	b8 d9       	st.b	r12[0x5],r9
800067f8:	17 c9       	ld.ub	r9,r11[0x4]
800067fa:	b8 c9       	st.b	r12[0x4],r9
800067fc:	17 b9       	ld.ub	r9,r11[0x3]
800067fe:	b8 b9       	st.b	r12[0x3],r9
80006800:	17 a9       	ld.ub	r9,r11[0x2]
80006802:	b8 a9       	st.b	r12[0x2],r9
80006804:	17 99       	ld.ub	r9,r11[0x1]
80006806:	b8 99       	st.b	r12[0x1],r9
80006808:	17 89       	ld.ub	r9,r11[0x0]
8000680a:	b8 89       	st.b	r12[0x0],r9
8000680c:	5e fc       	retal	r12
8000680e:	eb cd 40 c0 	pushm	r6-r7,lr
80006812:	18 99       	mov	r9,r12
80006814:	22 0a       	sub	r10,32
80006816:	b7 07       	ld.d	r6,r11++
80006818:	b3 26       	st.d	r9++,r6
8000681a:	b7 07       	ld.d	r6,r11++
8000681c:	b3 26       	st.d	r9++,r6
8000681e:	b7 07       	ld.d	r6,r11++
80006820:	b3 26       	st.d	r9++,r6
80006822:	b7 07       	ld.d	r6,r11++
80006824:	b3 26       	st.d	r9++,r6
80006826:	22 0a       	sub	r10,32
80006828:	cf 74       	brge	80006816 <memcpy+0x92>
8000682a:	2f 0a       	sub	r10,-16
8000682c:	c0 65       	brlt	80006838 <memcpy+0xb4>
8000682e:	b7 07       	ld.d	r6,r11++
80006830:	b3 26       	st.d	r9++,r6
80006832:	b7 07       	ld.d	r6,r11++
80006834:	b3 26       	st.d	r9++,r6
80006836:	21 0a       	sub	r10,16
80006838:	5c 3a       	neg	r10
8000683a:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000683e:	d7 03       	nop
80006840:	d7 03       	nop
80006842:	f7 36 00 0e 	ld.ub	r6,r11[14]
80006846:	f3 66 00 0e 	st.b	r9[14],r6
8000684a:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000684e:	f3 66 00 0d 	st.b	r9[13],r6
80006852:	f7 36 00 0c 	ld.ub	r6,r11[12]
80006856:	f3 66 00 0c 	st.b	r9[12],r6
8000685a:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000685e:	f3 66 00 0b 	st.b	r9[11],r6
80006862:	f7 36 00 0a 	ld.ub	r6,r11[10]
80006866:	f3 66 00 0a 	st.b	r9[10],r6
8000686a:	f7 36 00 09 	ld.ub	r6,r11[9]
8000686e:	f3 66 00 09 	st.b	r9[9],r6
80006872:	f7 36 00 08 	ld.ub	r6,r11[8]
80006876:	f3 66 00 08 	st.b	r9[8],r6
8000687a:	f7 36 00 07 	ld.ub	r6,r11[7]
8000687e:	f3 66 00 07 	st.b	r9[7],r6
80006882:	f7 36 00 06 	ld.ub	r6,r11[6]
80006886:	f3 66 00 06 	st.b	r9[6],r6
8000688a:	f7 36 00 05 	ld.ub	r6,r11[5]
8000688e:	f3 66 00 05 	st.b	r9[5],r6
80006892:	f7 36 00 04 	ld.ub	r6,r11[4]
80006896:	f3 66 00 04 	st.b	r9[4],r6
8000689a:	f7 36 00 03 	ld.ub	r6,r11[3]
8000689e:	f3 66 00 03 	st.b	r9[3],r6
800068a2:	f7 36 00 02 	ld.ub	r6,r11[2]
800068a6:	f3 66 00 02 	st.b	r9[2],r6
800068aa:	f7 36 00 01 	ld.ub	r6,r11[1]
800068ae:	f3 66 00 01 	st.b	r9[1],r6
800068b2:	f7 36 00 00 	ld.ub	r6,r11[0]
800068b6:	f3 66 00 00 	st.b	r9[0],r6
800068ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800068be:	20 1a       	sub	r10,1
800068c0:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800068c4:	f8 0a 0b 09 	st.b	r12[r10],r9
800068c8:	cf b1       	brne	800068be <memcpy+0x13a>
800068ca:	5e fc       	retal	r12

800068cc <sprintf>:
800068cc:	d4 01       	pushm	lr
800068ce:	21 7d       	sub	sp,92
800068d0:	e0 68 ff ff 	mov	r8,65535
800068d4:	ea 18 7f ff 	orh	r8,0x7fff
800068d8:	50 58       	stdsp	sp[0x14],r8
800068da:	50 28       	stdsp	sp[0x8],r8
800068dc:	e0 68 02 08 	mov	r8,520
800068e0:	ba 68       	st.h	sp[0xc],r8
800068e2:	3f f8       	mov	r8,-1
800068e4:	ba 78       	st.h	sp[0xe],r8
800068e6:	e0 68 01 04 	mov	r8,260
800068ea:	50 4c       	stdsp	sp[0x10],r12
800068ec:	16 9a       	mov	r10,r11
800068ee:	50 0c       	stdsp	sp[0x0],r12
800068f0:	fa c9 ff a0 	sub	r9,sp,-96
800068f4:	70 0c       	ld.w	r12,r8[0x0]
800068f6:	1a 9b       	mov	r11,sp
800068f8:	c9 ed       	rcall	80006c34 <_vfprintf_r>
800068fa:	30 09       	mov	r9,0
800068fc:	40 08       	lddsp	r8,sp[0x0]
800068fe:	b0 89       	st.b	r8[0x0],r9
80006900:	2e 9d       	sub	sp,-92
80006902:	d8 02       	popm	pc

80006904 <get_arg>:
80006904:	d4 31       	pushm	r0-r7,lr
80006906:	20 8d       	sub	sp,32
80006908:	fa c4 ff bc 	sub	r4,sp,-68
8000690c:	50 4b       	stdsp	sp[0x10],r11
8000690e:	68 2e       	ld.w	lr,r4[0x8]
80006910:	50 58       	stdsp	sp[0x14],r8
80006912:	12 96       	mov	r6,r9
80006914:	7c 0b       	ld.w	r11,lr[0x0]
80006916:	70 05       	ld.w	r5,r8[0x0]
80006918:	50 6e       	stdsp	sp[0x18],lr
8000691a:	58 0b       	cp.w	r11,0
8000691c:	f4 0b 17 00 	moveq	r11,r10
80006920:	68 03       	ld.w	r3,r4[0x0]
80006922:	68 11       	ld.w	r1,r4[0x4]
80006924:	40 49       	lddsp	r9,sp[0x10]
80006926:	30 08       	mov	r8,0
80006928:	c2 89       	rjmp	80006b78 <get_arg+0x274>
8000692a:	2f fb       	sub	r11,-1
8000692c:	32 5c       	mov	r12,37
8000692e:	17 8a       	ld.ub	r10,r11[0x0]
80006930:	f8 0a 18 00 	cp.b	r10,r12
80006934:	5f 1e       	srne	lr
80006936:	f0 0a 18 00 	cp.b	r10,r8
8000693a:	5f 1c       	srne	r12
8000693c:	fd ec 00 0c 	and	r12,lr,r12
80006940:	f0 0c 18 00 	cp.b	r12,r8
80006944:	cf 31       	brne	8000692a <get_arg+0x26>
80006946:	58 0a       	cp.w	r10,0
80006948:	e0 80 01 25 	breq	80006b92 <get_arg+0x28e>
8000694c:	30 0c       	mov	r12,0
8000694e:	3f fa       	mov	r10,-1
80006950:	18 90       	mov	r0,r12
80006952:	50 3a       	stdsp	sp[0xc],r10
80006954:	18 94       	mov	r4,r12
80006956:	18 92       	mov	r2,r12
80006958:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000695c:	16 97       	mov	r7,r11
8000695e:	50 7c       	stdsp	sp[0x1c],r12
80006960:	fe cc aa a0 	sub	r12,pc,-21856
80006964:	0f 3a       	ld.ub	r10,r7++
80006966:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000696a:	40 7c       	lddsp	r12,sp[0x1c]
8000696c:	1c 0c       	add	r12,lr
8000696e:	fe ce ab 76 	sub	lr,pc,-21642
80006972:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
80006976:	20 1e       	sub	lr,1
80006978:	50 0e       	stdsp	sp[0x0],lr
8000697a:	fe ce ab ee 	sub	lr,pc,-21522
8000697e:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
80006982:	50 7c       	stdsp	sp[0x1c],r12
80006984:	40 0c       	lddsp	r12,sp[0x0]
80006986:	58 7c       	cp.w	r12,7
80006988:	e0 8b 00 f1 	brhi	80006b6a <get_arg+0x266>
8000698c:	fe ce ad a0 	sub	lr,pc,-21088
80006990:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
80006994:	36 8b       	mov	r11,104
80006996:	f6 0a 18 00 	cp.b	r10,r11
8000699a:	e0 80 00 e8 	breq	80006b6a <get_arg+0x266>
8000699e:	37 1b       	mov	r11,113
800069a0:	f6 0a 18 00 	cp.b	r10,r11
800069a4:	c0 70       	breq	800069b2 <get_arg+0xae>
800069a6:	34 cb       	mov	r11,76
800069a8:	f6 0a 18 00 	cp.b	r10,r11
800069ac:	c0 51       	brne	800069b6 <get_arg+0xb2>
800069ae:	a3 b4       	sbr	r4,0x3
800069b0:	cd d8       	rjmp	80006b6a <get_arg+0x266>
800069b2:	a5 b4       	sbr	r4,0x5
800069b4:	cd b8       	rjmp	80006b6a <get_arg+0x266>
800069b6:	08 9a       	mov	r10,r4
800069b8:	0e 9b       	mov	r11,r7
800069ba:	a5 aa       	sbr	r10,0x4
800069bc:	17 3c       	ld.ub	r12,r11++
800069be:	a5 b4       	sbr	r4,0x5
800069c0:	36 ce       	mov	lr,108
800069c2:	fc 0c 18 00 	cp.b	r12,lr
800069c6:	e0 80 00 d3 	breq	80006b6c <get_arg+0x268>
800069ca:	14 94       	mov	r4,r10
800069cc:	cc f8       	rjmp	80006b6a <get_arg+0x266>
800069ce:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
800069d2:	36 7c       	mov	r12,103
800069d4:	f8 0a 18 00 	cp.b	r10,r12
800069d8:	e0 8b 00 27 	brhi	80006a26 <get_arg+0x122>
800069dc:	36 5b       	mov	r11,101
800069de:	f6 0a 18 00 	cp.b	r10,r11
800069e2:	c4 82       	brcc	80006a72 <get_arg+0x16e>
800069e4:	34 fb       	mov	r11,79
800069e6:	f6 0a 18 00 	cp.b	r10,r11
800069ea:	c4 80       	breq	80006a7a <get_arg+0x176>
800069ec:	e0 8b 00 0c 	brhi	80006a04 <get_arg+0x100>
800069f0:	34 5b       	mov	r11,69
800069f2:	f6 0a 18 00 	cp.b	r10,r11
800069f6:	c3 e0       	breq	80006a72 <get_arg+0x16e>
800069f8:	34 7b       	mov	r11,71
800069fa:	f6 0a 18 00 	cp.b	r10,r11
800069fe:	c3 a0       	breq	80006a72 <get_arg+0x16e>
80006a00:	34 4b       	mov	r11,68
80006a02:	c0 88       	rjmp	80006a12 <get_arg+0x10e>
80006a04:	35 8b       	mov	r11,88
80006a06:	f6 0a 18 00 	cp.b	r10,r11
80006a0a:	c2 c0       	breq	80006a62 <get_arg+0x15e>
80006a0c:	e0 8b 00 07 	brhi	80006a1a <get_arg+0x116>
80006a10:	35 5b       	mov	r11,85
80006a12:	f6 0a 18 00 	cp.b	r10,r11
80006a16:	c3 51       	brne	80006a80 <get_arg+0x17c>
80006a18:	c3 18       	rjmp	80006a7a <get_arg+0x176>
80006a1a:	36 3b       	mov	r11,99
80006a1c:	f6 0a 18 00 	cp.b	r10,r11
80006a20:	c2 f0       	breq	80006a7e <get_arg+0x17a>
80006a22:	36 4b       	mov	r11,100
80006a24:	c0 e8       	rjmp	80006a40 <get_arg+0x13c>
80006a26:	37 0b       	mov	r11,112
80006a28:	f6 0a 18 00 	cp.b	r10,r11
80006a2c:	c2 50       	breq	80006a76 <get_arg+0x172>
80006a2e:	e0 8b 00 0d 	brhi	80006a48 <get_arg+0x144>
80006a32:	36 eb       	mov	r11,110
80006a34:	f6 0a 18 00 	cp.b	r10,r11
80006a38:	c1 f0       	breq	80006a76 <get_arg+0x172>
80006a3a:	e0 8b 00 14 	brhi	80006a62 <get_arg+0x15e>
80006a3e:	36 9b       	mov	r11,105
80006a40:	f6 0a 18 00 	cp.b	r10,r11
80006a44:	c1 e1       	brne	80006a80 <get_arg+0x17c>
80006a46:	c0 e8       	rjmp	80006a62 <get_arg+0x15e>
80006a48:	37 5b       	mov	r11,117
80006a4a:	f6 0a 18 00 	cp.b	r10,r11
80006a4e:	c0 a0       	breq	80006a62 <get_arg+0x15e>
80006a50:	37 8b       	mov	r11,120
80006a52:	f6 0a 18 00 	cp.b	r10,r11
80006a56:	c0 60       	breq	80006a62 <get_arg+0x15e>
80006a58:	37 3b       	mov	r11,115
80006a5a:	f6 0a 18 00 	cp.b	r10,r11
80006a5e:	c1 11       	brne	80006a80 <get_arg+0x17c>
80006a60:	c0 b8       	rjmp	80006a76 <get_arg+0x172>
80006a62:	ed b4 00 04 	bld	r4,0x4
80006a66:	c0 a0       	breq	80006a7a <get_arg+0x176>
80006a68:	ed b4 00 05 	bld	r4,0x5
80006a6c:	c0 91       	brne	80006a7e <get_arg+0x17a>
80006a6e:	30 20       	mov	r0,2
80006a70:	c0 88       	rjmp	80006a80 <get_arg+0x17c>
80006a72:	30 40       	mov	r0,4
80006a74:	c0 68       	rjmp	80006a80 <get_arg+0x17c>
80006a76:	30 30       	mov	r0,3
80006a78:	c0 48       	rjmp	80006a80 <get_arg+0x17c>
80006a7a:	30 10       	mov	r0,1
80006a7c:	c0 28       	rjmp	80006a80 <get_arg+0x17c>
80006a7e:	30 00       	mov	r0,0
80006a80:	40 3b       	lddsp	r11,sp[0xc]
80006a82:	5b fb       	cp.w	r11,-1
80006a84:	c0 40       	breq	80006a8c <get_arg+0x188>
80006a86:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
80006a8a:	c7 08       	rjmp	80006b6a <get_arg+0x266>
80006a8c:	58 60       	cp.w	r0,6
80006a8e:	e0 8b 00 6e 	brhi	80006b6a <get_arg+0x266>
80006a92:	6c 0a       	ld.w	r10,r6[0x0]
80006a94:	ea cc ff ff 	sub	r12,r5,-1
80006a98:	fe ce ae 8c 	sub	lr,pc,-20852
80006a9c:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
80006aa0:	f4 cb ff f8 	sub	r11,r10,-8
80006aa4:	8d 0b       	st.w	r6[0x0],r11
80006aa6:	f4 ea 00 00 	ld.d	r10,r10[0]
80006aaa:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80006aae:	c0 f8       	rjmp	80006acc <get_arg+0x1c8>
80006ab0:	f4 cb ff fc 	sub	r11,r10,-4
80006ab4:	8d 0b       	st.w	r6[0x0],r11
80006ab6:	74 0a       	ld.w	r10,r10[0x0]
80006ab8:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80006abc:	c0 88       	rjmp	80006acc <get_arg+0x1c8>
80006abe:	f4 cb ff f8 	sub	r11,r10,-8
80006ac2:	8d 0b       	st.w	r6[0x0],r11
80006ac4:	f4 ea 00 00 	ld.d	r10,r10[0]
80006ac8:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
80006acc:	0e 9b       	mov	r11,r7
80006ace:	18 95       	mov	r5,r12
80006ad0:	c4 e8       	rjmp	80006b6c <get_arg+0x268>
80006ad2:	62 0a       	ld.w	r10,r1[0x0]
80006ad4:	5b fa       	cp.w	r10,-1
80006ad6:	c0 b1       	brne	80006aec <get_arg+0x1e8>
80006ad8:	50 19       	stdsp	sp[0x4],r9
80006ada:	50 28       	stdsp	sp[0x8],r8
80006adc:	e0 6a 00 80 	mov	r10,128
80006ae0:	30 0b       	mov	r11,0
80006ae2:	02 9c       	mov	r12,r1
80006ae4:	e0 a0 1d 78 	rcall	8000a5d4 <memset>
80006ae8:	40 28       	lddsp	r8,sp[0x8]
80006aea:	40 19       	lddsp	r9,sp[0x4]
80006aec:	e4 cc 00 01 	sub	r12,r2,1
80006af0:	0e 9b       	mov	r11,r7
80006af2:	50 3c       	stdsp	sp[0xc],r12
80006af4:	f2 0c 0c 49 	max	r9,r9,r12
80006af8:	c3 a8       	rjmp	80006b6c <get_arg+0x268>
80006afa:	62 0a       	ld.w	r10,r1[0x0]
80006afc:	5b fa       	cp.w	r10,-1
80006afe:	c0 b1       	brne	80006b14 <get_arg+0x210>
80006b00:	50 19       	stdsp	sp[0x4],r9
80006b02:	50 28       	stdsp	sp[0x8],r8
80006b04:	e0 6a 00 80 	mov	r10,128
80006b08:	30 0b       	mov	r11,0
80006b0a:	02 9c       	mov	r12,r1
80006b0c:	e0 a0 1d 64 	rcall	8000a5d4 <memset>
80006b10:	40 28       	lddsp	r8,sp[0x8]
80006b12:	40 19       	lddsp	r9,sp[0x4]
80006b14:	20 12       	sub	r2,1
80006b16:	30 0a       	mov	r10,0
80006b18:	0e 9b       	mov	r11,r7
80006b1a:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
80006b1e:	f2 02 0c 49 	max	r9,r9,r2
80006b22:	c2 58       	rjmp	80006b6c <get_arg+0x268>
80006b24:	16 97       	mov	r7,r11
80006b26:	6c 0a       	ld.w	r10,r6[0x0]
80006b28:	f4 cb ff fc 	sub	r11,r10,-4
80006b2c:	8d 0b       	st.w	r6[0x0],r11
80006b2e:	74 0a       	ld.w	r10,r10[0x0]
80006b30:	0e 9b       	mov	r11,r7
80006b32:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
80006b36:	2f f5       	sub	r5,-1
80006b38:	c1 a8       	rjmp	80006b6c <get_arg+0x268>
80006b3a:	f4 c2 00 30 	sub	r2,r10,48
80006b3e:	c0 68       	rjmp	80006b4a <get_arg+0x246>
80006b40:	e4 02 00 22 	add	r2,r2,r2<<0x2
80006b44:	2f f7       	sub	r7,-1
80006b46:	f4 02 00 12 	add	r2,r10,r2<<0x1
80006b4a:	0f 8a       	ld.ub	r10,r7[0x0]
80006b4c:	58 0a       	cp.w	r10,0
80006b4e:	c0 e0       	breq	80006b6a <get_arg+0x266>
80006b50:	23 0a       	sub	r10,48
80006b52:	58 9a       	cp.w	r10,9
80006b54:	fe 98 ff f6 	brls	80006b40 <get_arg+0x23c>
80006b58:	c0 98       	rjmp	80006b6a <get_arg+0x266>
80006b5a:	2f f7       	sub	r7,-1
80006b5c:	0f 8a       	ld.ub	r10,r7[0x0]
80006b5e:	58 0a       	cp.w	r10,0
80006b60:	c0 50       	breq	80006b6a <get_arg+0x266>
80006b62:	23 0a       	sub	r10,48
80006b64:	58 9a       	cp.w	r10,9
80006b66:	fe 98 ff fa 	brls	80006b5a <get_arg+0x256>
80006b6a:	0e 9b       	mov	r11,r7
80006b6c:	40 7c       	lddsp	r12,sp[0x1c]
80006b6e:	30 ba       	mov	r10,11
80006b70:	f4 0c 18 00 	cp.b	r12,r10
80006b74:	fe 91 fe f2 	brne	80006958 <get_arg+0x54>
80006b78:	40 42       	lddsp	r2,sp[0x10]
80006b7a:	17 8c       	ld.ub	r12,r11[0x0]
80006b7c:	0a 32       	cp.w	r2,r5
80006b7e:	5f 4a       	srge	r10
80006b80:	f0 0c 18 00 	cp.b	r12,r8
80006b84:	5f 1c       	srne	r12
80006b86:	f9 ea 00 0a 	and	r10,r12,r10
80006b8a:	f0 0a 18 00 	cp.b	r10,r8
80006b8e:	fe 91 fe cf 	brne	8000692c <get_arg+0x28>
80006b92:	30 08       	mov	r8,0
80006b94:	40 4e       	lddsp	lr,sp[0x10]
80006b96:	17 8a       	ld.ub	r10,r11[0x0]
80006b98:	e2 05 00 21 	add	r1,r1,r5<<0x2
80006b9c:	f0 0a 18 00 	cp.b	r10,r8
80006ba0:	fc 09 17 10 	movne	r9,lr
80006ba4:	e6 05 00 38 	add	r8,r3,r5<<0x3
80006ba8:	06 9e       	mov	lr,r3
80006baa:	c2 a8       	rjmp	80006bfe <get_arg+0x2fa>
80006bac:	62 0a       	ld.w	r10,r1[0x0]
80006bae:	58 3a       	cp.w	r10,3
80006bb0:	c1 e0       	breq	80006bec <get_arg+0x2e8>
80006bb2:	e0 89 00 07 	brgt	80006bc0 <get_arg+0x2bc>
80006bb6:	58 1a       	cp.w	r10,1
80006bb8:	c1 a0       	breq	80006bec <get_arg+0x2e8>
80006bba:	58 2a       	cp.w	r10,2
80006bbc:	c1 81       	brne	80006bec <get_arg+0x2e8>
80006bbe:	c0 58       	rjmp	80006bc8 <get_arg+0x2c4>
80006bc0:	58 5a       	cp.w	r10,5
80006bc2:	c0 c0       	breq	80006bda <get_arg+0x2d6>
80006bc4:	c0 b5       	brlt	80006bda <get_arg+0x2d6>
80006bc6:	c1 38       	rjmp	80006bec <get_arg+0x2e8>
80006bc8:	6c 0a       	ld.w	r10,r6[0x0]
80006bca:	f4 cc ff f8 	sub	r12,r10,-8
80006bce:	8d 0c       	st.w	r6[0x0],r12
80006bd0:	f4 e2 00 00 	ld.d	r2,r10[0]
80006bd4:	f0 e3 00 00 	st.d	r8[0],r2
80006bd8:	c1 08       	rjmp	80006bf8 <get_arg+0x2f4>
80006bda:	6c 0a       	ld.w	r10,r6[0x0]
80006bdc:	f4 cc ff f8 	sub	r12,r10,-8
80006be0:	8d 0c       	st.w	r6[0x0],r12
80006be2:	f4 e2 00 00 	ld.d	r2,r10[0]
80006be6:	f0 e3 00 00 	st.d	r8[0],r2
80006bea:	c0 78       	rjmp	80006bf8 <get_arg+0x2f4>
80006bec:	6c 0a       	ld.w	r10,r6[0x0]
80006bee:	f4 cc ff fc 	sub	r12,r10,-4
80006bf2:	8d 0c       	st.w	r6[0x0],r12
80006bf4:	74 0a       	ld.w	r10,r10[0x0]
80006bf6:	91 0a       	st.w	r8[0x0],r10
80006bf8:	2f f5       	sub	r5,-1
80006bfa:	2f 88       	sub	r8,-8
80006bfc:	2f c1       	sub	r1,-4
80006bfe:	12 35       	cp.w	r5,r9
80006c00:	fe 9a ff d6 	brle	80006bac <get_arg+0x2a8>
80006c04:	1c 93       	mov	r3,lr
80006c06:	40 52       	lddsp	r2,sp[0x14]
80006c08:	40 6e       	lddsp	lr,sp[0x18]
80006c0a:	85 05       	st.w	r2[0x0],r5
80006c0c:	9d 0b       	st.w	lr[0x0],r11
80006c0e:	40 4b       	lddsp	r11,sp[0x10]
80006c10:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
80006c14:	2f 8d       	sub	sp,-32
80006c16:	d8 32       	popm	r0-r7,pc

80006c18 <__sprint_r>:
80006c18:	d4 21       	pushm	r4-r7,lr
80006c1a:	14 97       	mov	r7,r10
80006c1c:	74 28       	ld.w	r8,r10[0x8]
80006c1e:	58 08       	cp.w	r8,0
80006c20:	c0 41       	brne	80006c28 <__sprint_r+0x10>
80006c22:	95 18       	st.w	r10[0x4],r8
80006c24:	10 9c       	mov	r12,r8
80006c26:	d8 22       	popm	r4-r7,pc
80006c28:	e0 a0 18 b4 	rcall	80009d90 <__sfvwrite_r>
80006c2c:	30 08       	mov	r8,0
80006c2e:	8f 18       	st.w	r7[0x4],r8
80006c30:	8f 28       	st.w	r7[0x8],r8
80006c32:	d8 22       	popm	r4-r7,pc

80006c34 <_vfprintf_r>:
80006c34:	d4 31       	pushm	r0-r7,lr
80006c36:	fa cd 06 bc 	sub	sp,sp,1724
80006c3a:	51 09       	stdsp	sp[0x40],r9
80006c3c:	16 91       	mov	r1,r11
80006c3e:	14 97       	mov	r7,r10
80006c40:	18 95       	mov	r5,r12
80006c42:	e0 a0 1a 1d 	rcall	8000a07c <_localeconv_r>
80006c46:	78 0c       	ld.w	r12,r12[0x0]
80006c48:	50 cc       	stdsp	sp[0x30],r12
80006c4a:	58 05       	cp.w	r5,0
80006c4c:	c0 70       	breq	80006c5a <_vfprintf_r+0x26>
80006c4e:	6a 68       	ld.w	r8,r5[0x18]
80006c50:	58 08       	cp.w	r8,0
80006c52:	c0 41       	brne	80006c5a <_vfprintf_r+0x26>
80006c54:	0a 9c       	mov	r12,r5
80006c56:	e0 a0 17 3d 	rcall	80009ad0 <__sinit>
80006c5a:	fe c8 ac 8a 	sub	r8,pc,-21366
80006c5e:	10 31       	cp.w	r1,r8
80006c60:	c0 31       	brne	80006c66 <_vfprintf_r+0x32>
80006c62:	6a 01       	ld.w	r1,r5[0x0]
80006c64:	c0 c8       	rjmp	80006c7c <_vfprintf_r+0x48>
80006c66:	fe c8 ac 76 	sub	r8,pc,-21386
80006c6a:	10 31       	cp.w	r1,r8
80006c6c:	c0 31       	brne	80006c72 <_vfprintf_r+0x3e>
80006c6e:	6a 11       	ld.w	r1,r5[0x4]
80006c70:	c0 68       	rjmp	80006c7c <_vfprintf_r+0x48>
80006c72:	fe c8 ac 62 	sub	r8,pc,-21406
80006c76:	10 31       	cp.w	r1,r8
80006c78:	eb f1 00 02 	ld.weq	r1,r5[0x8]
80006c7c:	82 68       	ld.sh	r8,r1[0xc]
80006c7e:	ed b8 00 03 	bld	r8,0x3
80006c82:	c0 41       	brne	80006c8a <_vfprintf_r+0x56>
80006c84:	62 48       	ld.w	r8,r1[0x10]
80006c86:	58 08       	cp.w	r8,0
80006c88:	c0 71       	brne	80006c96 <_vfprintf_r+0x62>
80006c8a:	02 9b       	mov	r11,r1
80006c8c:	0a 9c       	mov	r12,r5
80006c8e:	e0 a0 0f 5d 	rcall	80008b48 <__swsetup_r>
80006c92:	e0 81 0f 54 	brne	80008b3a <_vfprintf_r+0x1f06>
80006c96:	82 68       	ld.sh	r8,r1[0xc]
80006c98:	10 99       	mov	r9,r8
80006c9a:	e2 19 00 1a 	andl	r9,0x1a,COH
80006c9e:	58 a9       	cp.w	r9,10
80006ca0:	c3 c1       	brne	80006d18 <_vfprintf_r+0xe4>
80006ca2:	82 79       	ld.sh	r9,r1[0xe]
80006ca4:	30 0a       	mov	r10,0
80006ca6:	f4 09 19 00 	cp.h	r9,r10
80006caa:	c3 75       	brlt	80006d18 <_vfprintf_r+0xe4>
80006cac:	a1 d8       	cbr	r8,0x1
80006cae:	fb 58 05 d0 	st.h	sp[1488],r8
80006cb2:	62 88       	ld.w	r8,r1[0x20]
80006cb4:	fb 48 05 e4 	st.w	sp[1508],r8
80006cb8:	62 a8       	ld.w	r8,r1[0x28]
80006cba:	fb 48 05 ec 	st.w	sp[1516],r8
80006cbe:	fa c8 ff bc 	sub	r8,sp,-68
80006cc2:	fb 48 05 d4 	st.w	sp[1492],r8
80006cc6:	fb 48 05 c4 	st.w	sp[1476],r8
80006cca:	e0 68 04 00 	mov	r8,1024
80006cce:	fb 48 05 d8 	st.w	sp[1496],r8
80006cd2:	fb 48 05 cc 	st.w	sp[1484],r8
80006cd6:	30 08       	mov	r8,0
80006cd8:	fb 59 05 d2 	st.h	sp[1490],r9
80006cdc:	0e 9a       	mov	r10,r7
80006cde:	41 09       	lddsp	r9,sp[0x40]
80006ce0:	fa c7 fa 3c 	sub	r7,sp,-1476
80006ce4:	fb 48 05 dc 	st.w	sp[1500],r8
80006ce8:	0a 9c       	mov	r12,r5
80006cea:	0e 9b       	mov	r11,r7
80006cec:	ca 4f       	rcall	80006c34 <_vfprintf_r>
80006cee:	50 bc       	stdsp	sp[0x2c],r12
80006cf0:	c0 95       	brlt	80006d02 <_vfprintf_r+0xce>
80006cf2:	0e 9b       	mov	r11,r7
80006cf4:	0a 9c       	mov	r12,r5
80006cf6:	e0 a0 16 15 	rcall	80009920 <_fflush_r>
80006cfa:	40 be       	lddsp	lr,sp[0x2c]
80006cfc:	f9 be 01 ff 	movne	lr,-1
80006d00:	50 be       	stdsp	sp[0x2c],lr
80006d02:	fb 08 05 d0 	ld.sh	r8,sp[1488]
80006d06:	ed b8 00 06 	bld	r8,0x6
80006d0a:	e0 81 0f 1a 	brne	80008b3e <_vfprintf_r+0x1f0a>
80006d0e:	82 68       	ld.sh	r8,r1[0xc]
80006d10:	a7 a8       	sbr	r8,0x6
80006d12:	a2 68       	st.h	r1[0xc],r8
80006d14:	e0 8f 0f 15 	bral	80008b3e <_vfprintf_r+0x1f0a>
80006d18:	30 08       	mov	r8,0
80006d1a:	fb 48 06 b4 	st.w	sp[1716],r8
80006d1e:	fb 48 06 90 	st.w	sp[1680],r8
80006d22:	fb 48 06 8c 	st.w	sp[1676],r8
80006d26:	fb 48 06 b0 	st.w	sp[1712],r8
80006d2a:	30 08       	mov	r8,0
80006d2c:	30 09       	mov	r9,0
80006d2e:	50 a7       	stdsp	sp[0x28],r7
80006d30:	50 78       	stdsp	sp[0x1c],r8
80006d32:	fa c3 f9 e0 	sub	r3,sp,-1568
80006d36:	3f f8       	mov	r8,-1
80006d38:	50 59       	stdsp	sp[0x14],r9
80006d3a:	fb 43 06 88 	st.w	sp[1672],r3
80006d3e:	fb 48 05 44 	st.w	sp[1348],r8
80006d42:	12 9c       	mov	r12,r9
80006d44:	50 69       	stdsp	sp[0x18],r9
80006d46:	50 d9       	stdsp	sp[0x34],r9
80006d48:	50 e9       	stdsp	sp[0x38],r9
80006d4a:	50 b9       	stdsp	sp[0x2c],r9
80006d4c:	12 97       	mov	r7,r9
80006d4e:	0a 94       	mov	r4,r5
80006d50:	40 a2       	lddsp	r2,sp[0x28]
80006d52:	32 5a       	mov	r10,37
80006d54:	30 08       	mov	r8,0
80006d56:	c0 28       	rjmp	80006d5a <_vfprintf_r+0x126>
80006d58:	2f f2       	sub	r2,-1
80006d5a:	05 89       	ld.ub	r9,r2[0x0]
80006d5c:	f0 09 18 00 	cp.b	r9,r8
80006d60:	5f 1b       	srne	r11
80006d62:	f4 09 18 00 	cp.b	r9,r10
80006d66:	5f 19       	srne	r9
80006d68:	f3 eb 00 0b 	and	r11,r9,r11
80006d6c:	f0 0b 18 00 	cp.b	r11,r8
80006d70:	cf 41       	brne	80006d58 <_vfprintf_r+0x124>
80006d72:	40 ab       	lddsp	r11,sp[0x28]
80006d74:	e4 0b 01 06 	sub	r6,r2,r11
80006d78:	c1 e0       	breq	80006db4 <_vfprintf_r+0x180>
80006d7a:	fa f8 06 90 	ld.w	r8,sp[1680]
80006d7e:	0c 08       	add	r8,r6
80006d80:	87 0b       	st.w	r3[0x0],r11
80006d82:	fb 48 06 90 	st.w	sp[1680],r8
80006d86:	87 16       	st.w	r3[0x4],r6
80006d88:	fa f8 06 8c 	ld.w	r8,sp[1676]
80006d8c:	2f f8       	sub	r8,-1
80006d8e:	fb 48 06 8c 	st.w	sp[1676],r8
80006d92:	58 78       	cp.w	r8,7
80006d94:	e0 89 00 04 	brgt	80006d9c <_vfprintf_r+0x168>
80006d98:	2f 83       	sub	r3,-8
80006d9a:	c0 a8       	rjmp	80006dae <_vfprintf_r+0x17a>
80006d9c:	fa ca f9 78 	sub	r10,sp,-1672
80006da0:	02 9b       	mov	r11,r1
80006da2:	08 9c       	mov	r12,r4
80006da4:	c3 af       	rcall	80006c18 <__sprint_r>
80006da6:	e0 81 0e c6 	brne	80008b32 <_vfprintf_r+0x1efe>
80006daa:	fa c3 f9 e0 	sub	r3,sp,-1568
80006dae:	40 ba       	lddsp	r10,sp[0x2c]
80006db0:	0c 0a       	add	r10,r6
80006db2:	50 ba       	stdsp	sp[0x2c],r10
80006db4:	05 89       	ld.ub	r9,r2[0x0]
80006db6:	30 08       	mov	r8,0
80006db8:	f0 09 18 00 	cp.b	r9,r8
80006dbc:	e0 80 0e aa 	breq	80008b10 <_vfprintf_r+0x1edc>
80006dc0:	30 09       	mov	r9,0
80006dc2:	fb 68 06 bb 	st.b	sp[1723],r8
80006dc6:	0e 96       	mov	r6,r7
80006dc8:	e4 c8 ff ff 	sub	r8,r2,-1
80006dcc:	3f fe       	mov	lr,-1
80006dce:	50 93       	stdsp	sp[0x24],r3
80006dd0:	50 41       	stdsp	sp[0x10],r1
80006dd2:	0e 93       	mov	r3,r7
80006dd4:	04 91       	mov	r1,r2
80006dd6:	50 89       	stdsp	sp[0x20],r9
80006dd8:	50 a8       	stdsp	sp[0x28],r8
80006dda:	50 2e       	stdsp	sp[0x8],lr
80006ddc:	50 39       	stdsp	sp[0xc],r9
80006dde:	12 95       	mov	r5,r9
80006de0:	12 90       	mov	r0,r9
80006de2:	10 97       	mov	r7,r8
80006de4:	08 92       	mov	r2,r4
80006de6:	c0 78       	rjmp	80006df4 <_vfprintf_r+0x1c0>
80006de8:	3f fc       	mov	r12,-1
80006dea:	08 97       	mov	r7,r4
80006dec:	50 2c       	stdsp	sp[0x8],r12
80006dee:	c0 38       	rjmp	80006df4 <_vfprintf_r+0x1c0>
80006df0:	30 0b       	mov	r11,0
80006df2:	50 3b       	stdsp	sp[0xc],r11
80006df4:	0f 38       	ld.ub	r8,r7++
80006df6:	c0 28       	rjmp	80006dfa <_vfprintf_r+0x1c6>
80006df8:	12 90       	mov	r0,r9
80006dfa:	f0 c9 00 20 	sub	r9,r8,32
80006dfe:	e0 49 00 58 	cp.w	r9,88
80006e02:	e0 8b 0a 30 	brhi	80008262 <_vfprintf_r+0x162e>
80006e06:	fe ca b1 de 	sub	r10,pc,-20002
80006e0a:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
80006e0e:	50 a7       	stdsp	sp[0x28],r7
80006e10:	50 80       	stdsp	sp[0x20],r0
80006e12:	0c 97       	mov	r7,r6
80006e14:	04 94       	mov	r4,r2
80006e16:	06 96       	mov	r6,r3
80006e18:	02 92       	mov	r2,r1
80006e1a:	fe c9 af b6 	sub	r9,pc,-20554
80006e1e:	40 93       	lddsp	r3,sp[0x24]
80006e20:	10 90       	mov	r0,r8
80006e22:	40 41       	lddsp	r1,sp[0x10]
80006e24:	50 d9       	stdsp	sp[0x34],r9
80006e26:	e0 8f 08 8e 	bral	80007f42 <_vfprintf_r+0x130e>
80006e2a:	30 08       	mov	r8,0
80006e2c:	fb 39 06 bb 	ld.ub	r9,sp[1723]
80006e30:	f0 09 18 00 	cp.b	r9,r8
80006e34:	ce 01       	brne	80006df4 <_vfprintf_r+0x1c0>
80006e36:	32 08       	mov	r8,32
80006e38:	c6 e8       	rjmp	80006f14 <_vfprintf_r+0x2e0>
80006e3a:	a1 a5       	sbr	r5,0x0
80006e3c:	cd cb       	rjmp	80006df4 <_vfprintf_r+0x1c0>
80006e3e:	0f 89       	ld.ub	r9,r7[0x0]
80006e40:	f2 c8 00 30 	sub	r8,r9,48
80006e44:	58 98       	cp.w	r8,9
80006e46:	e0 8b 00 1d 	brhi	80006e80 <_vfprintf_r+0x24c>
80006e4a:	ee c8 ff ff 	sub	r8,r7,-1
80006e4e:	30 0b       	mov	r11,0
80006e50:	23 09       	sub	r9,48
80006e52:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80006e56:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
80006e5a:	11 39       	ld.ub	r9,r8++
80006e5c:	f2 ca 00 30 	sub	r10,r9,48
80006e60:	58 9a       	cp.w	r10,9
80006e62:	fe 98 ff f7 	brls	80006e50 <_vfprintf_r+0x21c>
80006e66:	e0 49 00 24 	cp.w	r9,36
80006e6a:	cc 31       	brne	80006df0 <_vfprintf_r+0x1bc>
80006e6c:	e0 4b 00 20 	cp.w	r11,32
80006e70:	e0 89 0e 60 	brgt	80008b30 <_vfprintf_r+0x1efc>
80006e74:	20 1b       	sub	r11,1
80006e76:	fa f9 06 b4 	ld.w	r9,sp[1716]
80006e7a:	12 3b       	cp.w	r11,r9
80006e7c:	c0 95       	brlt	80006e8e <_vfprintf_r+0x25a>
80006e7e:	c1 08       	rjmp	80006e9e <_vfprintf_r+0x26a>
80006e80:	fa f9 06 b4 	ld.w	r9,sp[1716]
80006e84:	ec ca ff ff 	sub	r10,r6,-1
80006e88:	12 36       	cp.w	r6,r9
80006e8a:	c1 f5       	brlt	80006ec8 <_vfprintf_r+0x294>
80006e8c:	c2 68       	rjmp	80006ed8 <_vfprintf_r+0x2a4>
80006e8e:	fa ce f9 44 	sub	lr,sp,-1724
80006e92:	10 97       	mov	r7,r8
80006e94:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
80006e98:	f6 f0 fd 88 	ld.w	r0,r11[-632]
80006e9c:	c3 58       	rjmp	80006f06 <_vfprintf_r+0x2d2>
80006e9e:	10 97       	mov	r7,r8
80006ea0:	fa c8 f9 50 	sub	r8,sp,-1712
80006ea4:	1a d8       	st.w	--sp,r8
80006ea6:	fa c8 fa b8 	sub	r8,sp,-1352
80006eaa:	1a d8       	st.w	--sp,r8
80006eac:	fa c8 fb b4 	sub	r8,sp,-1100
80006eb0:	02 9a       	mov	r10,r1
80006eb2:	1a d8       	st.w	--sp,r8
80006eb4:	04 9c       	mov	r12,r2
80006eb6:	fa c8 f9 40 	sub	r8,sp,-1728
80006eba:	fa c9 ff b4 	sub	r9,sp,-76
80006ebe:	fe b0 fd 23 	rcall	80006904 <get_arg>
80006ec2:	2f dd       	sub	sp,-12
80006ec4:	78 00       	ld.w	r0,r12[0x0]
80006ec6:	c2 08       	rjmp	80006f06 <_vfprintf_r+0x2d2>
80006ec8:	fa cc f9 44 	sub	r12,sp,-1724
80006ecc:	14 96       	mov	r6,r10
80006ece:	f8 03 00 38 	add	r8,r12,r3<<0x3
80006ed2:	f0 f0 fd 88 	ld.w	r0,r8[-632]
80006ed6:	c1 88       	rjmp	80006f06 <_vfprintf_r+0x2d2>
80006ed8:	41 08       	lddsp	r8,sp[0x40]
80006eda:	59 f9       	cp.w	r9,31
80006edc:	e0 89 00 11 	brgt	80006efe <_vfprintf_r+0x2ca>
80006ee0:	f0 cb ff fc 	sub	r11,r8,-4
80006ee4:	51 0b       	stdsp	sp[0x40],r11
80006ee6:	70 00       	ld.w	r0,r8[0x0]
80006ee8:	fa cb f9 44 	sub	r11,sp,-1724
80006eec:	f6 09 00 38 	add	r8,r11,r9<<0x3
80006ef0:	f1 40 fd 88 	st.w	r8[-632],r0
80006ef4:	2f f9       	sub	r9,-1
80006ef6:	14 96       	mov	r6,r10
80006ef8:	fb 49 06 b4 	st.w	sp[1716],r9
80006efc:	c0 58       	rjmp	80006f06 <_vfprintf_r+0x2d2>
80006efe:	70 00       	ld.w	r0,r8[0x0]
80006f00:	14 96       	mov	r6,r10
80006f02:	2f c8       	sub	r8,-4
80006f04:	51 08       	stdsp	sp[0x40],r8
80006f06:	58 00       	cp.w	r0,0
80006f08:	fe 94 ff 76 	brge	80006df4 <_vfprintf_r+0x1c0>
80006f0c:	5c 30       	neg	r0
80006f0e:	a3 a5       	sbr	r5,0x2
80006f10:	c7 2b       	rjmp	80006df4 <_vfprintf_r+0x1c0>
80006f12:	32 b8       	mov	r8,43
80006f14:	fb 68 06 bb 	st.b	sp[1723],r8
80006f18:	c6 eb       	rjmp	80006df4 <_vfprintf_r+0x1c0>
80006f1a:	0f 38       	ld.ub	r8,r7++
80006f1c:	e0 48 00 2a 	cp.w	r8,42
80006f20:	c0 30       	breq	80006f26 <_vfprintf_r+0x2f2>
80006f22:	30 09       	mov	r9,0
80006f24:	c7 98       	rjmp	80007016 <_vfprintf_r+0x3e2>
80006f26:	0f 88       	ld.ub	r8,r7[0x0]
80006f28:	f0 c9 00 30 	sub	r9,r8,48
80006f2c:	58 99       	cp.w	r9,9
80006f2e:	e0 8b 00 1f 	brhi	80006f6c <_vfprintf_r+0x338>
80006f32:	ee c4 ff ff 	sub	r4,r7,-1
80006f36:	30 0b       	mov	r11,0
80006f38:	23 08       	sub	r8,48
80006f3a:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
80006f3e:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
80006f42:	09 38       	ld.ub	r8,r4++
80006f44:	f0 c9 00 30 	sub	r9,r8,48
80006f48:	58 99       	cp.w	r9,9
80006f4a:	fe 98 ff f7 	brls	80006f38 <_vfprintf_r+0x304>
80006f4e:	e0 48 00 24 	cp.w	r8,36
80006f52:	fe 91 ff 4f 	brne	80006df0 <_vfprintf_r+0x1bc>
80006f56:	e0 4b 00 20 	cp.w	r11,32
80006f5a:	e0 89 0d eb 	brgt	80008b30 <_vfprintf_r+0x1efc>
80006f5e:	20 1b       	sub	r11,1
80006f60:	fa f8 06 b4 	ld.w	r8,sp[1716]
80006f64:	10 3b       	cp.w	r11,r8
80006f66:	c0 a5       	brlt	80006f7a <_vfprintf_r+0x346>
80006f68:	c1 18       	rjmp	80006f8a <_vfprintf_r+0x356>
80006f6a:	d7 03       	nop
80006f6c:	fa fa 06 b4 	ld.w	r10,sp[1716]
80006f70:	ec c9 ff ff 	sub	r9,r6,-1
80006f74:	14 36       	cp.w	r6,r10
80006f76:	c1 f5       	brlt	80006fb4 <_vfprintf_r+0x380>
80006f78:	c2 88       	rjmp	80006fc8 <_vfprintf_r+0x394>
80006f7a:	fa ca f9 44 	sub	r10,sp,-1724
80006f7e:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
80006f82:	f6 fb fd 88 	ld.w	r11,r11[-632]
80006f86:	50 2b       	stdsp	sp[0x8],r11
80006f88:	c3 c8       	rjmp	80007000 <_vfprintf_r+0x3cc>
80006f8a:	fa c8 f9 50 	sub	r8,sp,-1712
80006f8e:	1a d8       	st.w	--sp,r8
80006f90:	fa c8 fa b8 	sub	r8,sp,-1352
80006f94:	1a d8       	st.w	--sp,r8
80006f96:	fa c8 fb b4 	sub	r8,sp,-1100
80006f9a:	02 9a       	mov	r10,r1
80006f9c:	1a d8       	st.w	--sp,r8
80006f9e:	04 9c       	mov	r12,r2
80006fa0:	fa c8 f9 40 	sub	r8,sp,-1728
80006fa4:	fa c9 ff b4 	sub	r9,sp,-76
80006fa8:	fe b0 fc ae 	rcall	80006904 <get_arg>
80006fac:	2f dd       	sub	sp,-12
80006fae:	78 0c       	ld.w	r12,r12[0x0]
80006fb0:	50 2c       	stdsp	sp[0x8],r12
80006fb2:	c2 78       	rjmp	80007000 <_vfprintf_r+0x3cc>
80006fb4:	12 96       	mov	r6,r9
80006fb6:	0e 94       	mov	r4,r7
80006fb8:	fa c9 f9 44 	sub	r9,sp,-1724
80006fbc:	f2 03 00 38 	add	r8,r9,r3<<0x3
80006fc0:	f0 f8 fd 88 	ld.w	r8,r8[-632]
80006fc4:	50 28       	stdsp	sp[0x8],r8
80006fc6:	c1 d8       	rjmp	80007000 <_vfprintf_r+0x3cc>
80006fc8:	41 08       	lddsp	r8,sp[0x40]
80006fca:	59 fa       	cp.w	r10,31
80006fcc:	e0 89 00 14 	brgt	80006ff4 <_vfprintf_r+0x3c0>
80006fd0:	f0 cb ff fc 	sub	r11,r8,-4
80006fd4:	70 08       	ld.w	r8,r8[0x0]
80006fd6:	51 0b       	stdsp	sp[0x40],r11
80006fd8:	50 28       	stdsp	sp[0x8],r8
80006fda:	fa c6 f9 44 	sub	r6,sp,-1724
80006fde:	40 2e       	lddsp	lr,sp[0x8]
80006fe0:	ec 0a 00 38 	add	r8,r6,r10<<0x3
80006fe4:	f1 4e fd 88 	st.w	r8[-632],lr
80006fe8:	2f fa       	sub	r10,-1
80006fea:	0e 94       	mov	r4,r7
80006fec:	fb 4a 06 b4 	st.w	sp[1716],r10
80006ff0:	12 96       	mov	r6,r9
80006ff2:	c0 78       	rjmp	80007000 <_vfprintf_r+0x3cc>
80006ff4:	70 0c       	ld.w	r12,r8[0x0]
80006ff6:	0e 94       	mov	r4,r7
80006ff8:	2f c8       	sub	r8,-4
80006ffa:	50 2c       	stdsp	sp[0x8],r12
80006ffc:	12 96       	mov	r6,r9
80006ffe:	51 08       	stdsp	sp[0x40],r8
80007000:	40 2b       	lddsp	r11,sp[0x8]
80007002:	58 0b       	cp.w	r11,0
80007004:	fe 95 fe f2 	brlt	80006de8 <_vfprintf_r+0x1b4>
80007008:	08 97       	mov	r7,r4
8000700a:	cf 5a       	rjmp	80006df4 <_vfprintf_r+0x1c0>
8000700c:	f2 09 00 29 	add	r9,r9,r9<<0x2
80007010:	0f 38       	ld.ub	r8,r7++
80007012:	f4 09 00 19 	add	r9,r10,r9<<0x1
80007016:	f0 ca 00 30 	sub	r10,r8,48
8000701a:	58 9a       	cp.w	r10,9
8000701c:	fe 98 ff f8 	brls	8000700c <_vfprintf_r+0x3d8>
80007020:	3f fa       	mov	r10,-1
80007022:	f2 0a 0c 49 	max	r9,r9,r10
80007026:	50 29       	stdsp	sp[0x8],r9
80007028:	ce 9a       	rjmp	80006dfa <_vfprintf_r+0x1c6>
8000702a:	a7 b5       	sbr	r5,0x7
8000702c:	ce 4a       	rjmp	80006df4 <_vfprintf_r+0x1c0>
8000702e:	30 09       	mov	r9,0
80007030:	23 08       	sub	r8,48
80007032:	f2 09 00 29 	add	r9,r9,r9<<0x2
80007036:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000703a:	0f 38       	ld.ub	r8,r7++
8000703c:	f0 ca 00 30 	sub	r10,r8,48
80007040:	58 9a       	cp.w	r10,9
80007042:	fe 98 ff f7 	brls	80007030 <_vfprintf_r+0x3fc>
80007046:	e0 48 00 24 	cp.w	r8,36
8000704a:	fe 91 fe d7 	brne	80006df8 <_vfprintf_r+0x1c4>
8000704e:	e0 49 00 20 	cp.w	r9,32
80007052:	e0 89 0d 6f 	brgt	80008b30 <_vfprintf_r+0x1efc>
80007056:	f2 c3 00 01 	sub	r3,r9,1
8000705a:	30 19       	mov	r9,1
8000705c:	50 39       	stdsp	sp[0xc],r9
8000705e:	cc ba       	rjmp	80006df4 <_vfprintf_r+0x1c0>
80007060:	a3 b5       	sbr	r5,0x3
80007062:	cc 9a       	rjmp	80006df4 <_vfprintf_r+0x1c0>
80007064:	a7 a5       	sbr	r5,0x6
80007066:	cc 7a       	rjmp	80006df4 <_vfprintf_r+0x1c0>
80007068:	0a 98       	mov	r8,r5
8000706a:	a5 b5       	sbr	r5,0x5
8000706c:	a5 a8       	sbr	r8,0x4
8000706e:	0f 89       	ld.ub	r9,r7[0x0]
80007070:	36 ce       	mov	lr,108
80007072:	fc 09 18 00 	cp.b	r9,lr
80007076:	f7 b7 00 ff 	subeq	r7,-1
8000707a:	f0 05 17 10 	movne	r5,r8
8000707e:	cb ba       	rjmp	80006df4 <_vfprintf_r+0x1c0>
80007080:	a5 b5       	sbr	r5,0x5
80007082:	cb 9a       	rjmp	80006df4 <_vfprintf_r+0x1c0>
80007084:	50 a7       	stdsp	sp[0x28],r7
80007086:	50 80       	stdsp	sp[0x20],r0
80007088:	0c 97       	mov	r7,r6
8000708a:	10 90       	mov	r0,r8
8000708c:	06 96       	mov	r6,r3
8000708e:	04 94       	mov	r4,r2
80007090:	40 93       	lddsp	r3,sp[0x24]
80007092:	02 92       	mov	r2,r1
80007094:	0e 99       	mov	r9,r7
80007096:	40 41       	lddsp	r1,sp[0x10]
80007098:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000709c:	40 3c       	lddsp	r12,sp[0xc]
8000709e:	58 0c       	cp.w	r12,0
800070a0:	c1 d0       	breq	800070da <_vfprintf_r+0x4a6>
800070a2:	10 36       	cp.w	r6,r8
800070a4:	c0 64       	brge	800070b0 <_vfprintf_r+0x47c>
800070a6:	fa cb f9 44 	sub	r11,sp,-1724
800070aa:	f6 06 00 36 	add	r6,r11,r6<<0x3
800070ae:	c1 d8       	rjmp	800070e8 <_vfprintf_r+0x4b4>
800070b0:	fa c8 f9 50 	sub	r8,sp,-1712
800070b4:	1a d8       	st.w	--sp,r8
800070b6:	fa c8 fa b8 	sub	r8,sp,-1352
800070ba:	1a d8       	st.w	--sp,r8
800070bc:	fa c8 fb b4 	sub	r8,sp,-1100
800070c0:	1a d8       	st.w	--sp,r8
800070c2:	fa c8 f9 40 	sub	r8,sp,-1728
800070c6:	fa c9 ff b4 	sub	r9,sp,-76
800070ca:	04 9a       	mov	r10,r2
800070cc:	0c 9b       	mov	r11,r6
800070ce:	08 9c       	mov	r12,r4
800070d0:	fe b0 fc 1a 	rcall	80006904 <get_arg>
800070d4:	2f dd       	sub	sp,-12
800070d6:	19 b8       	ld.ub	r8,r12[0x3]
800070d8:	c2 28       	rjmp	8000711c <_vfprintf_r+0x4e8>
800070da:	2f f7       	sub	r7,-1
800070dc:	10 39       	cp.w	r9,r8
800070de:	c0 84       	brge	800070ee <_vfprintf_r+0x4ba>
800070e0:	fa ca f9 44 	sub	r10,sp,-1724
800070e4:	f4 06 00 36 	add	r6,r10,r6<<0x3
800070e8:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
800070ec:	c1 88       	rjmp	8000711c <_vfprintf_r+0x4e8>
800070ee:	41 09       	lddsp	r9,sp[0x40]
800070f0:	59 f8       	cp.w	r8,31
800070f2:	e0 89 00 12 	brgt	80007116 <_vfprintf_r+0x4e2>
800070f6:	f2 ca ff fc 	sub	r10,r9,-4
800070fa:	51 0a       	stdsp	sp[0x40],r10
800070fc:	72 09       	ld.w	r9,r9[0x0]
800070fe:	fa c6 f9 44 	sub	r6,sp,-1724
80007102:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80007106:	2f f8       	sub	r8,-1
80007108:	f5 49 fd 88 	st.w	r10[-632],r9
8000710c:	fb 48 06 b4 	st.w	sp[1716],r8
80007110:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
80007114:	c0 48       	rjmp	8000711c <_vfprintf_r+0x4e8>
80007116:	13 b8       	ld.ub	r8,r9[0x3]
80007118:	2f c9       	sub	r9,-4
8000711a:	51 09       	stdsp	sp[0x40],r9
8000711c:	fb 68 06 60 	st.b	sp[1632],r8
80007120:	30 0e       	mov	lr,0
80007122:	30 08       	mov	r8,0
80007124:	30 12       	mov	r2,1
80007126:	fb 68 06 bb 	st.b	sp[1723],r8
8000712a:	50 2e       	stdsp	sp[0x8],lr
8000712c:	e0 8f 08 ad 	bral	80008286 <_vfprintf_r+0x1652>
80007130:	50 a7       	stdsp	sp[0x28],r7
80007132:	50 80       	stdsp	sp[0x20],r0
80007134:	0c 97       	mov	r7,r6
80007136:	04 94       	mov	r4,r2
80007138:	06 96       	mov	r6,r3
8000713a:	02 92       	mov	r2,r1
8000713c:	40 93       	lddsp	r3,sp[0x24]
8000713e:	10 90       	mov	r0,r8
80007140:	40 41       	lddsp	r1,sp[0x10]
80007142:	a5 a5       	sbr	r5,0x4
80007144:	c0 a8       	rjmp	80007158 <_vfprintf_r+0x524>
80007146:	50 a7       	stdsp	sp[0x28],r7
80007148:	50 80       	stdsp	sp[0x20],r0
8000714a:	0c 97       	mov	r7,r6
8000714c:	04 94       	mov	r4,r2
8000714e:	06 96       	mov	r6,r3
80007150:	02 92       	mov	r2,r1
80007152:	40 93       	lddsp	r3,sp[0x24]
80007154:	10 90       	mov	r0,r8
80007156:	40 41       	lddsp	r1,sp[0x10]
80007158:	ed b5 00 05 	bld	r5,0x5
8000715c:	c5 11       	brne	800071fe <_vfprintf_r+0x5ca>
8000715e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007162:	40 3c       	lddsp	r12,sp[0xc]
80007164:	58 0c       	cp.w	r12,0
80007166:	c1 e0       	breq	800071a2 <_vfprintf_r+0x56e>
80007168:	10 36       	cp.w	r6,r8
8000716a:	c0 64       	brge	80007176 <_vfprintf_r+0x542>
8000716c:	fa cb f9 44 	sub	r11,sp,-1724
80007170:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007174:	c2 08       	rjmp	800071b4 <_vfprintf_r+0x580>
80007176:	fa c8 f9 50 	sub	r8,sp,-1712
8000717a:	1a d8       	st.w	--sp,r8
8000717c:	fa c8 fa b8 	sub	r8,sp,-1352
80007180:	0c 9b       	mov	r11,r6
80007182:	1a d8       	st.w	--sp,r8
80007184:	fa c8 fb b4 	sub	r8,sp,-1100
80007188:	1a d8       	st.w	--sp,r8
8000718a:	fa c9 ff b4 	sub	r9,sp,-76
8000718e:	fa c8 f9 40 	sub	r8,sp,-1728
80007192:	04 9a       	mov	r10,r2
80007194:	08 9c       	mov	r12,r4
80007196:	fe b0 fb b7 	rcall	80006904 <get_arg>
8000719a:	2f dd       	sub	sp,-12
8000719c:	78 1b       	ld.w	r11,r12[0x4]
8000719e:	78 09       	ld.w	r9,r12[0x0]
800071a0:	c2 b8       	rjmp	800071f6 <_vfprintf_r+0x5c2>
800071a2:	ee ca ff ff 	sub	r10,r7,-1
800071a6:	10 37       	cp.w	r7,r8
800071a8:	c0 b4       	brge	800071be <_vfprintf_r+0x58a>
800071aa:	fa c9 f9 44 	sub	r9,sp,-1724
800071ae:	14 97       	mov	r7,r10
800071b0:	f2 06 00 36 	add	r6,r9,r6<<0x3
800071b4:	ec fb fd 8c 	ld.w	r11,r6[-628]
800071b8:	ec f9 fd 88 	ld.w	r9,r6[-632]
800071bc:	c1 d8       	rjmp	800071f6 <_vfprintf_r+0x5c2>
800071be:	41 09       	lddsp	r9,sp[0x40]
800071c0:	59 f8       	cp.w	r8,31
800071c2:	e0 89 00 14 	brgt	800071ea <_vfprintf_r+0x5b6>
800071c6:	f2 cb ff f8 	sub	r11,r9,-8
800071ca:	51 0b       	stdsp	sp[0x40],r11
800071cc:	fa c6 f9 44 	sub	r6,sp,-1724
800071d0:	72 1b       	ld.w	r11,r9[0x4]
800071d2:	ec 08 00 3c 	add	r12,r6,r8<<0x3
800071d6:	72 09       	ld.w	r9,r9[0x0]
800071d8:	f9 4b fd 8c 	st.w	r12[-628],r11
800071dc:	f9 49 fd 88 	st.w	r12[-632],r9
800071e0:	2f f8       	sub	r8,-1
800071e2:	14 97       	mov	r7,r10
800071e4:	fb 48 06 b4 	st.w	sp[1716],r8
800071e8:	c0 78       	rjmp	800071f6 <_vfprintf_r+0x5c2>
800071ea:	f2 c8 ff f8 	sub	r8,r9,-8
800071ee:	72 1b       	ld.w	r11,r9[0x4]
800071f0:	14 97       	mov	r7,r10
800071f2:	51 08       	stdsp	sp[0x40],r8
800071f4:	72 09       	ld.w	r9,r9[0x0]
800071f6:	16 98       	mov	r8,r11
800071f8:	fa e9 00 00 	st.d	sp[0],r8
800071fc:	ca e8       	rjmp	80007358 <_vfprintf_r+0x724>
800071fe:	ed b5 00 04 	bld	r5,0x4
80007202:	c1 71       	brne	80007230 <_vfprintf_r+0x5fc>
80007204:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007208:	40 3e       	lddsp	lr,sp[0xc]
8000720a:	58 0e       	cp.w	lr,0
8000720c:	c0 80       	breq	8000721c <_vfprintf_r+0x5e8>
8000720e:	10 36       	cp.w	r6,r8
80007210:	c6 94       	brge	800072e2 <_vfprintf_r+0x6ae>
80007212:	fa cc f9 44 	sub	r12,sp,-1724
80007216:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000721a:	c8 28       	rjmp	8000731e <_vfprintf_r+0x6ea>
8000721c:	ee ca ff ff 	sub	r10,r7,-1
80007220:	10 37       	cp.w	r7,r8
80007222:	e0 84 00 81 	brge	80007324 <_vfprintf_r+0x6f0>
80007226:	fa cb f9 44 	sub	r11,sp,-1724
8000722a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000722e:	c7 78       	rjmp	8000731c <_vfprintf_r+0x6e8>
80007230:	ed b5 00 06 	bld	r5,0x6
80007234:	c4 b1       	brne	800072ca <_vfprintf_r+0x696>
80007236:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000723a:	40 3c       	lddsp	r12,sp[0xc]
8000723c:	58 0c       	cp.w	r12,0
8000723e:	c1 d0       	breq	80007278 <_vfprintf_r+0x644>
80007240:	10 36       	cp.w	r6,r8
80007242:	c0 64       	brge	8000724e <_vfprintf_r+0x61a>
80007244:	fa cb f9 44 	sub	r11,sp,-1724
80007248:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000724c:	c1 f8       	rjmp	8000728a <_vfprintf_r+0x656>
8000724e:	fa c8 f9 50 	sub	r8,sp,-1712
80007252:	1a d8       	st.w	--sp,r8
80007254:	fa c8 fa b8 	sub	r8,sp,-1352
80007258:	1a d8       	st.w	--sp,r8
8000725a:	fa c8 fb b4 	sub	r8,sp,-1100
8000725e:	1a d8       	st.w	--sp,r8
80007260:	fa c8 f9 40 	sub	r8,sp,-1728
80007264:	fa c9 ff b4 	sub	r9,sp,-76
80007268:	04 9a       	mov	r10,r2
8000726a:	0c 9b       	mov	r11,r6
8000726c:	08 9c       	mov	r12,r4
8000726e:	fe b0 fb 4b 	rcall	80006904 <get_arg>
80007272:	2f dd       	sub	sp,-12
80007274:	98 18       	ld.sh	r8,r12[0x2]
80007276:	c2 68       	rjmp	800072c2 <_vfprintf_r+0x68e>
80007278:	ee ca ff ff 	sub	r10,r7,-1
8000727c:	10 37       	cp.w	r7,r8
8000727e:	c0 94       	brge	80007290 <_vfprintf_r+0x65c>
80007280:	fa c9 f9 44 	sub	r9,sp,-1724
80007284:	14 97       	mov	r7,r10
80007286:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000728a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000728e:	c1 a8       	rjmp	800072c2 <_vfprintf_r+0x68e>
80007290:	41 09       	lddsp	r9,sp[0x40]
80007292:	59 f8       	cp.w	r8,31
80007294:	e0 89 00 13 	brgt	800072ba <_vfprintf_r+0x686>
80007298:	f2 cb ff fc 	sub	r11,r9,-4
8000729c:	51 0b       	stdsp	sp[0x40],r11
8000729e:	72 09       	ld.w	r9,r9[0x0]
800072a0:	fa c6 f9 44 	sub	r6,sp,-1724
800072a4:	ec 08 00 3b 	add	r11,r6,r8<<0x3
800072a8:	2f f8       	sub	r8,-1
800072aa:	f7 49 fd 88 	st.w	r11[-632],r9
800072ae:	fb 48 06 b4 	st.w	sp[1716],r8
800072b2:	14 97       	mov	r7,r10
800072b4:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800072b8:	c0 58       	rjmp	800072c2 <_vfprintf_r+0x68e>
800072ba:	92 18       	ld.sh	r8,r9[0x2]
800072bc:	14 97       	mov	r7,r10
800072be:	2f c9       	sub	r9,-4
800072c0:	51 09       	stdsp	sp[0x40],r9
800072c2:	50 18       	stdsp	sp[0x4],r8
800072c4:	bf 58       	asr	r8,0x1f
800072c6:	50 08       	stdsp	sp[0x0],r8
800072c8:	c4 88       	rjmp	80007358 <_vfprintf_r+0x724>
800072ca:	fa f8 06 b4 	ld.w	r8,sp[1716]
800072ce:	40 3c       	lddsp	r12,sp[0xc]
800072d0:	58 0c       	cp.w	r12,0
800072d2:	c1 d0       	breq	8000730c <_vfprintf_r+0x6d8>
800072d4:	10 36       	cp.w	r6,r8
800072d6:	c0 64       	brge	800072e2 <_vfprintf_r+0x6ae>
800072d8:	fa cb f9 44 	sub	r11,sp,-1724
800072dc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800072e0:	c1 f8       	rjmp	8000731e <_vfprintf_r+0x6ea>
800072e2:	fa c8 f9 50 	sub	r8,sp,-1712
800072e6:	1a d8       	st.w	--sp,r8
800072e8:	fa c8 fa b8 	sub	r8,sp,-1352
800072ec:	0c 9b       	mov	r11,r6
800072ee:	1a d8       	st.w	--sp,r8
800072f0:	fa c8 fb b4 	sub	r8,sp,-1100
800072f4:	04 9a       	mov	r10,r2
800072f6:	1a d8       	st.w	--sp,r8
800072f8:	08 9c       	mov	r12,r4
800072fa:	fa c8 f9 40 	sub	r8,sp,-1728
800072fe:	fa c9 ff b4 	sub	r9,sp,-76
80007302:	fe b0 fb 01 	rcall	80006904 <get_arg>
80007306:	2f dd       	sub	sp,-12
80007308:	78 0b       	ld.w	r11,r12[0x0]
8000730a:	c2 48       	rjmp	80007352 <_vfprintf_r+0x71e>
8000730c:	ee ca ff ff 	sub	r10,r7,-1
80007310:	10 37       	cp.w	r7,r8
80007312:	c0 94       	brge	80007324 <_vfprintf_r+0x6f0>
80007314:	fa c9 f9 44 	sub	r9,sp,-1724
80007318:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000731c:	14 97       	mov	r7,r10
8000731e:	ec fb fd 88 	ld.w	r11,r6[-632]
80007322:	c1 88       	rjmp	80007352 <_vfprintf_r+0x71e>
80007324:	41 09       	lddsp	r9,sp[0x40]
80007326:	59 f8       	cp.w	r8,31
80007328:	e0 89 00 11 	brgt	8000734a <_vfprintf_r+0x716>
8000732c:	f2 cb ff fc 	sub	r11,r9,-4
80007330:	51 0b       	stdsp	sp[0x40],r11
80007332:	fa c6 f9 44 	sub	r6,sp,-1724
80007336:	72 0b       	ld.w	r11,r9[0x0]
80007338:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000733c:	f3 4b fd 88 	st.w	r9[-632],r11
80007340:	2f f8       	sub	r8,-1
80007342:	14 97       	mov	r7,r10
80007344:	fb 48 06 b4 	st.w	sp[1716],r8
80007348:	c0 58       	rjmp	80007352 <_vfprintf_r+0x71e>
8000734a:	72 0b       	ld.w	r11,r9[0x0]
8000734c:	14 97       	mov	r7,r10
8000734e:	2f c9       	sub	r9,-4
80007350:	51 09       	stdsp	sp[0x40],r9
80007352:	50 1b       	stdsp	sp[0x4],r11
80007354:	bf 5b       	asr	r11,0x1f
80007356:	50 0b       	stdsp	sp[0x0],r11
80007358:	fa ea 00 00 	ld.d	r10,sp[0]
8000735c:	58 0a       	cp.w	r10,0
8000735e:	5c 2b       	cpc	r11
80007360:	c0 e4       	brge	8000737c <_vfprintf_r+0x748>
80007362:	30 08       	mov	r8,0
80007364:	fa ea 00 00 	ld.d	r10,sp[0]
80007368:	30 09       	mov	r9,0
8000736a:	f0 0a 01 0a 	sub	r10,r8,r10
8000736e:	f2 0b 01 4b 	sbc	r11,r9,r11
80007372:	32 d8       	mov	r8,45
80007374:	fa eb 00 00 	st.d	sp[0],r10
80007378:	fb 68 06 bb 	st.b	sp[1723],r8
8000737c:	30 18       	mov	r8,1
8000737e:	e0 8f 06 fa 	bral	80008172 <_vfprintf_r+0x153e>
80007382:	50 a7       	stdsp	sp[0x28],r7
80007384:	50 80       	stdsp	sp[0x20],r0
80007386:	0c 97       	mov	r7,r6
80007388:	04 94       	mov	r4,r2
8000738a:	06 96       	mov	r6,r3
8000738c:	02 92       	mov	r2,r1
8000738e:	40 93       	lddsp	r3,sp[0x24]
80007390:	10 90       	mov	r0,r8
80007392:	40 41       	lddsp	r1,sp[0x10]
80007394:	0e 99       	mov	r9,r7
80007396:	ed b5 00 03 	bld	r5,0x3
8000739a:	c4 11       	brne	8000741c <_vfprintf_r+0x7e8>
8000739c:	fa f8 06 b4 	ld.w	r8,sp[1716]
800073a0:	40 3a       	lddsp	r10,sp[0xc]
800073a2:	58 0a       	cp.w	r10,0
800073a4:	c1 90       	breq	800073d6 <_vfprintf_r+0x7a2>
800073a6:	10 36       	cp.w	r6,r8
800073a8:	c6 45       	brlt	80007470 <_vfprintf_r+0x83c>
800073aa:	fa c8 f9 50 	sub	r8,sp,-1712
800073ae:	1a d8       	st.w	--sp,r8
800073b0:	fa c8 fa b8 	sub	r8,sp,-1352
800073b4:	1a d8       	st.w	--sp,r8
800073b6:	fa c8 fb b4 	sub	r8,sp,-1100
800073ba:	0c 9b       	mov	r11,r6
800073bc:	1a d8       	st.w	--sp,r8
800073be:	04 9a       	mov	r10,r2
800073c0:	fa c8 f9 40 	sub	r8,sp,-1728
800073c4:	fa c9 ff b4 	sub	r9,sp,-76
800073c8:	08 9c       	mov	r12,r4
800073ca:	fe b0 fa 9d 	rcall	80006904 <get_arg>
800073ce:	2f dd       	sub	sp,-12
800073d0:	78 16       	ld.w	r6,r12[0x4]
800073d2:	50 76       	stdsp	sp[0x1c],r6
800073d4:	c4 88       	rjmp	80007464 <_vfprintf_r+0x830>
800073d6:	2f f7       	sub	r7,-1
800073d8:	10 39       	cp.w	r9,r8
800073da:	c0 c4       	brge	800073f2 <_vfprintf_r+0x7be>
800073dc:	fa ce f9 44 	sub	lr,sp,-1724
800073e0:	fc 06 00 36 	add	r6,lr,r6<<0x3
800073e4:	ec fc fd 8c 	ld.w	r12,r6[-628]
800073e8:	50 7c       	stdsp	sp[0x1c],r12
800073ea:	ec f6 fd 88 	ld.w	r6,r6[-632]
800073ee:	50 56       	stdsp	sp[0x14],r6
800073f0:	c6 68       	rjmp	800074bc <_vfprintf_r+0x888>
800073f2:	41 09       	lddsp	r9,sp[0x40]
800073f4:	59 f8       	cp.w	r8,31
800073f6:	e0 89 00 10 	brgt	80007416 <_vfprintf_r+0x7e2>
800073fa:	f2 ca ff f8 	sub	r10,r9,-8
800073fe:	72 1b       	ld.w	r11,r9[0x4]
80007400:	51 0a       	stdsp	sp[0x40],r10
80007402:	72 09       	ld.w	r9,r9[0x0]
80007404:	fa ca f9 44 	sub	r10,sp,-1724
80007408:	50 7b       	stdsp	sp[0x1c],r11
8000740a:	50 59       	stdsp	sp[0x14],r9
8000740c:	f4 08 00 39 	add	r9,r10,r8<<0x3
80007410:	40 5b       	lddsp	r11,sp[0x14]
80007412:	40 7a       	lddsp	r10,sp[0x1c]
80007414:	c4 78       	rjmp	800074a2 <_vfprintf_r+0x86e>
80007416:	72 18       	ld.w	r8,r9[0x4]
80007418:	50 78       	stdsp	sp[0x1c],r8
8000741a:	c4 c8       	rjmp	800074b2 <_vfprintf_r+0x87e>
8000741c:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007420:	40 3e       	lddsp	lr,sp[0xc]
80007422:	58 0e       	cp.w	lr,0
80007424:	c2 30       	breq	8000746a <_vfprintf_r+0x836>
80007426:	10 36       	cp.w	r6,r8
80007428:	c0 94       	brge	8000743a <_vfprintf_r+0x806>
8000742a:	fa cc f9 44 	sub	r12,sp,-1724
8000742e:	f8 06 00 36 	add	r6,r12,r6<<0x3
80007432:	ec fb fd 8c 	ld.w	r11,r6[-628]
80007436:	50 7b       	stdsp	sp[0x1c],r11
80007438:	cd 9b       	rjmp	800073ea <_vfprintf_r+0x7b6>
8000743a:	fa c8 f9 50 	sub	r8,sp,-1712
8000743e:	1a d8       	st.w	--sp,r8
80007440:	fa c8 fa b8 	sub	r8,sp,-1352
80007444:	04 9a       	mov	r10,r2
80007446:	1a d8       	st.w	--sp,r8
80007448:	fa c8 fb b4 	sub	r8,sp,-1100
8000744c:	0c 9b       	mov	r11,r6
8000744e:	1a d8       	st.w	--sp,r8
80007450:	08 9c       	mov	r12,r4
80007452:	fa c8 f9 40 	sub	r8,sp,-1728
80007456:	fa c9 ff b4 	sub	r9,sp,-76
8000745a:	fe b0 fa 55 	rcall	80006904 <get_arg>
8000745e:	2f dd       	sub	sp,-12
80007460:	78 1a       	ld.w	r10,r12[0x4]
80007462:	50 7a       	stdsp	sp[0x1c],r10
80007464:	78 0c       	ld.w	r12,r12[0x0]
80007466:	50 5c       	stdsp	sp[0x14],r12
80007468:	c2 a8       	rjmp	800074bc <_vfprintf_r+0x888>
8000746a:	2f f7       	sub	r7,-1
8000746c:	10 39       	cp.w	r9,r8
8000746e:	c0 94       	brge	80007480 <_vfprintf_r+0x84c>
80007470:	fa c9 f9 44 	sub	r9,sp,-1724
80007474:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007478:	ec f8 fd 8c 	ld.w	r8,r6[-628]
8000747c:	50 78       	stdsp	sp[0x1c],r8
8000747e:	cb 6b       	rjmp	800073ea <_vfprintf_r+0x7b6>
80007480:	41 09       	lddsp	r9,sp[0x40]
80007482:	59 f8       	cp.w	r8,31
80007484:	e0 89 00 15 	brgt	800074ae <_vfprintf_r+0x87a>
80007488:	f2 ca ff f8 	sub	r10,r9,-8
8000748c:	72 16       	ld.w	r6,r9[0x4]
8000748e:	72 09       	ld.w	r9,r9[0x0]
80007490:	51 0a       	stdsp	sp[0x40],r10
80007492:	50 59       	stdsp	sp[0x14],r9
80007494:	fa ce f9 44 	sub	lr,sp,-1724
80007498:	50 76       	stdsp	sp[0x1c],r6
8000749a:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000749e:	40 5b       	lddsp	r11,sp[0x14]
800074a0:	0c 9a       	mov	r10,r6
800074a2:	f2 eb fd 88 	st.d	r9[-632],r10
800074a6:	2f f8       	sub	r8,-1
800074a8:	fb 48 06 b4 	st.w	sp[1716],r8
800074ac:	c0 88       	rjmp	800074bc <_vfprintf_r+0x888>
800074ae:	72 1c       	ld.w	r12,r9[0x4]
800074b0:	50 7c       	stdsp	sp[0x1c],r12
800074b2:	f2 c8 ff f8 	sub	r8,r9,-8
800074b6:	51 08       	stdsp	sp[0x40],r8
800074b8:	72 09       	ld.w	r9,r9[0x0]
800074ba:	50 59       	stdsp	sp[0x14],r9
800074bc:	40 5b       	lddsp	r11,sp[0x14]
800074be:	40 7a       	lddsp	r10,sp[0x1c]
800074c0:	e0 a0 1c de 	rcall	8000ae7c <__isinfd>
800074c4:	18 96       	mov	r6,r12
800074c6:	c1 70       	breq	800074f4 <_vfprintf_r+0x8c0>
800074c8:	30 08       	mov	r8,0
800074ca:	30 09       	mov	r9,0
800074cc:	40 5b       	lddsp	r11,sp[0x14]
800074ce:	40 7a       	lddsp	r10,sp[0x1c]
800074d0:	e0 a0 1f eb 	rcall	8000b4a6 <__avr32_f64_cmp_lt>
800074d4:	c0 40       	breq	800074dc <_vfprintf_r+0x8a8>
800074d6:	32 d8       	mov	r8,45
800074d8:	fb 68 06 bb 	st.b	sp[1723],r8
800074dc:	fe c8 b6 64 	sub	r8,pc,-18844
800074e0:	fe c6 b6 64 	sub	r6,pc,-18844
800074e4:	a7 d5       	cbr	r5,0x7
800074e6:	e0 40 00 47 	cp.w	r0,71
800074ea:	f0 06 17 a0 	movle	r6,r8
800074ee:	30 32       	mov	r2,3
800074f0:	e0 8f 06 ce 	bral	8000828c <_vfprintf_r+0x1658>
800074f4:	40 5b       	lddsp	r11,sp[0x14]
800074f6:	40 7a       	lddsp	r10,sp[0x1c]
800074f8:	e0 a0 1c d7 	rcall	8000aea6 <__isnand>
800074fc:	c0 e0       	breq	80007518 <_vfprintf_r+0x8e4>
800074fe:	50 26       	stdsp	sp[0x8],r6
80007500:	fe c8 b6 80 	sub	r8,pc,-18816
80007504:	fe c6 b6 80 	sub	r6,pc,-18816
80007508:	a7 d5       	cbr	r5,0x7
8000750a:	e0 40 00 47 	cp.w	r0,71
8000750e:	f0 06 17 a0 	movle	r6,r8
80007512:	30 32       	mov	r2,3
80007514:	e0 8f 06 c2 	bral	80008298 <_vfprintf_r+0x1664>
80007518:	40 2a       	lddsp	r10,sp[0x8]
8000751a:	5b fa       	cp.w	r10,-1
8000751c:	c0 41       	brne	80007524 <_vfprintf_r+0x8f0>
8000751e:	30 69       	mov	r9,6
80007520:	50 29       	stdsp	sp[0x8],r9
80007522:	c1 18       	rjmp	80007544 <_vfprintf_r+0x910>
80007524:	e0 40 00 47 	cp.w	r0,71
80007528:	5f 09       	sreq	r9
8000752a:	e0 40 00 67 	cp.w	r0,103
8000752e:	5f 08       	sreq	r8
80007530:	f3 e8 10 08 	or	r8,r9,r8
80007534:	f8 08 18 00 	cp.b	r8,r12
80007538:	c0 60       	breq	80007544 <_vfprintf_r+0x910>
8000753a:	40 28       	lddsp	r8,sp[0x8]
8000753c:	58 08       	cp.w	r8,0
8000753e:	f9 b8 00 01 	moveq	r8,1
80007542:	50 28       	stdsp	sp[0x8],r8
80007544:	40 78       	lddsp	r8,sp[0x1c]
80007546:	40 59       	lddsp	r9,sp[0x14]
80007548:	fa e9 06 94 	st.d	sp[1684],r8
8000754c:	a9 a5       	sbr	r5,0x8
8000754e:	fa f8 06 94 	ld.w	r8,sp[1684]
80007552:	58 08       	cp.w	r8,0
80007554:	c0 65       	brlt	80007560 <_vfprintf_r+0x92c>
80007556:	40 5e       	lddsp	lr,sp[0x14]
80007558:	30 0c       	mov	r12,0
8000755a:	50 6e       	stdsp	sp[0x18],lr
8000755c:	50 9c       	stdsp	sp[0x24],r12
8000755e:	c0 78       	rjmp	8000756c <_vfprintf_r+0x938>
80007560:	40 5b       	lddsp	r11,sp[0x14]
80007562:	32 da       	mov	r10,45
80007564:	ee 1b 80 00 	eorh	r11,0x8000
80007568:	50 9a       	stdsp	sp[0x24],r10
8000756a:	50 6b       	stdsp	sp[0x18],r11
8000756c:	e0 40 00 46 	cp.w	r0,70
80007570:	5f 09       	sreq	r9
80007572:	e0 40 00 66 	cp.w	r0,102
80007576:	5f 08       	sreq	r8
80007578:	f3 e8 10 08 	or	r8,r9,r8
8000757c:	50 48       	stdsp	sp[0x10],r8
8000757e:	c0 40       	breq	80007586 <_vfprintf_r+0x952>
80007580:	40 22       	lddsp	r2,sp[0x8]
80007582:	30 39       	mov	r9,3
80007584:	c1 08       	rjmp	800075a4 <_vfprintf_r+0x970>
80007586:	e0 40 00 45 	cp.w	r0,69
8000758a:	5f 09       	sreq	r9
8000758c:	e0 40 00 65 	cp.w	r0,101
80007590:	5f 08       	sreq	r8
80007592:	40 22       	lddsp	r2,sp[0x8]
80007594:	10 49       	or	r9,r8
80007596:	2f f2       	sub	r2,-1
80007598:	40 46       	lddsp	r6,sp[0x10]
8000759a:	ec 09 18 00 	cp.b	r9,r6
8000759e:	fb f2 00 02 	ld.weq	r2,sp[0x8]
800075a2:	30 29       	mov	r9,2
800075a4:	fa c8 f9 5c 	sub	r8,sp,-1700
800075a8:	1a d8       	st.w	--sp,r8
800075aa:	fa c8 f9 54 	sub	r8,sp,-1708
800075ae:	1a d8       	st.w	--sp,r8
800075b0:	fa c8 f9 4c 	sub	r8,sp,-1716
800075b4:	08 9c       	mov	r12,r4
800075b6:	1a d8       	st.w	--sp,r8
800075b8:	04 98       	mov	r8,r2
800075ba:	40 9b       	lddsp	r11,sp[0x24]
800075bc:	40 aa       	lddsp	r10,sp[0x28]
800075be:	e0 a0 0b c3 	rcall	80008d44 <_dtoa_r>
800075c2:	e0 40 00 47 	cp.w	r0,71
800075c6:	5f 19       	srne	r9
800075c8:	e0 40 00 67 	cp.w	r0,103
800075cc:	5f 18       	srne	r8
800075ce:	18 96       	mov	r6,r12
800075d0:	2f dd       	sub	sp,-12
800075d2:	f3 e8 00 08 	and	r8,r9,r8
800075d6:	c0 41       	brne	800075de <_vfprintf_r+0x9aa>
800075d8:	ed b5 00 00 	bld	r5,0x0
800075dc:	c3 01       	brne	8000763c <_vfprintf_r+0xa08>
800075de:	ec 02 00 0e 	add	lr,r6,r2
800075e2:	50 3e       	stdsp	sp[0xc],lr
800075e4:	40 4c       	lddsp	r12,sp[0x10]
800075e6:	58 0c       	cp.w	r12,0
800075e8:	c1 50       	breq	80007612 <_vfprintf_r+0x9de>
800075ea:	0d 89       	ld.ub	r9,r6[0x0]
800075ec:	33 08       	mov	r8,48
800075ee:	f0 09 18 00 	cp.b	r9,r8
800075f2:	c0 b1       	brne	80007608 <_vfprintf_r+0x9d4>
800075f4:	30 08       	mov	r8,0
800075f6:	30 09       	mov	r9,0
800075f8:	40 6b       	lddsp	r11,sp[0x18]
800075fa:	40 7a       	lddsp	r10,sp[0x1c]
800075fc:	e0 a0 1f 0e 	rcall	8000b418 <__avr32_f64_cmp_eq>
80007600:	fb b2 00 01 	rsubeq	r2,1
80007604:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
80007608:	40 3b       	lddsp	r11,sp[0xc]
8000760a:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000760e:	10 0b       	add	r11,r8
80007610:	50 3b       	stdsp	sp[0xc],r11
80007612:	40 6b       	lddsp	r11,sp[0x18]
80007614:	30 08       	mov	r8,0
80007616:	30 09       	mov	r9,0
80007618:	40 7a       	lddsp	r10,sp[0x1c]
8000761a:	e0 a0 1e ff 	rcall	8000b418 <__avr32_f64_cmp_eq>
8000761e:	c0 90       	breq	80007630 <_vfprintf_r+0x9fc>
80007620:	40 3a       	lddsp	r10,sp[0xc]
80007622:	fb 4a 06 a4 	st.w	sp[1700],r10
80007626:	c0 58       	rjmp	80007630 <_vfprintf_r+0x9fc>
80007628:	10 c9       	st.b	r8++,r9
8000762a:	fb 48 06 a4 	st.w	sp[1700],r8
8000762e:	c0 28       	rjmp	80007632 <_vfprintf_r+0x9fe>
80007630:	33 09       	mov	r9,48
80007632:	fa f8 06 a4 	ld.w	r8,sp[1700]
80007636:	40 3e       	lddsp	lr,sp[0xc]
80007638:	1c 38       	cp.w	r8,lr
8000763a:	cf 73       	brcs	80007628 <_vfprintf_r+0x9f4>
8000763c:	e0 40 00 47 	cp.w	r0,71
80007640:	5f 09       	sreq	r9
80007642:	e0 40 00 67 	cp.w	r0,103
80007646:	5f 08       	sreq	r8
80007648:	f3 e8 10 08 	or	r8,r9,r8
8000764c:	fa f9 06 a4 	ld.w	r9,sp[1700]
80007650:	0c 19       	sub	r9,r6
80007652:	50 69       	stdsp	sp[0x18],r9
80007654:	58 08       	cp.w	r8,0
80007656:	c0 b0       	breq	8000766c <_vfprintf_r+0xa38>
80007658:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000765c:	5b d8       	cp.w	r8,-3
8000765e:	c0 55       	brlt	80007668 <_vfprintf_r+0xa34>
80007660:	40 2c       	lddsp	r12,sp[0x8]
80007662:	18 38       	cp.w	r8,r12
80007664:	e0 8a 00 6a 	brle	80007738 <_vfprintf_r+0xb04>
80007668:	20 20       	sub	r0,2
8000766a:	c0 58       	rjmp	80007674 <_vfprintf_r+0xa40>
8000766c:	e0 40 00 65 	cp.w	r0,101
80007670:	e0 89 00 46 	brgt	800076fc <_vfprintf_r+0xac8>
80007674:	fa fb 06 ac 	ld.w	r11,sp[1708]
80007678:	fb 60 06 9c 	st.b	sp[1692],r0
8000767c:	20 1b       	sub	r11,1
8000767e:	fb 4b 06 ac 	st.w	sp[1708],r11
80007682:	c0 47       	brpl	8000768a <_vfprintf_r+0xa56>
80007684:	5c 3b       	neg	r11
80007686:	32 d8       	mov	r8,45
80007688:	c0 28       	rjmp	8000768c <_vfprintf_r+0xa58>
8000768a:	32 b8       	mov	r8,43
8000768c:	fb 68 06 9d 	st.b	sp[1693],r8
80007690:	58 9b       	cp.w	r11,9
80007692:	e0 8a 00 1d 	brle	800076cc <_vfprintf_r+0xa98>
80007696:	fa c9 fa 35 	sub	r9,sp,-1483
8000769a:	30 aa       	mov	r10,10
8000769c:	12 98       	mov	r8,r9
8000769e:	0e 9c       	mov	r12,r7
800076a0:	0c 92       	mov	r2,r6
800076a2:	f6 0a 0c 06 	divs	r6,r11,r10
800076a6:	0e 9b       	mov	r11,r7
800076a8:	2d 0b       	sub	r11,-48
800076aa:	10 fb       	st.b	--r8,r11
800076ac:	0c 9b       	mov	r11,r6
800076ae:	58 96       	cp.w	r6,9
800076b0:	fe 99 ff f9 	brgt	800076a2 <_vfprintf_r+0xa6e>
800076b4:	2d 0b       	sub	r11,-48
800076b6:	18 97       	mov	r7,r12
800076b8:	04 96       	mov	r6,r2
800076ba:	10 fb       	st.b	--r8,r11
800076bc:	fa ca f9 62 	sub	r10,sp,-1694
800076c0:	c0 38       	rjmp	800076c6 <_vfprintf_r+0xa92>
800076c2:	11 3b       	ld.ub	r11,r8++
800076c4:	14 cb       	st.b	r10++,r11
800076c6:	12 38       	cp.w	r8,r9
800076c8:	cf d3       	brcs	800076c2 <_vfprintf_r+0xa8e>
800076ca:	c0 98       	rjmp	800076dc <_vfprintf_r+0xaa8>
800076cc:	2d 0b       	sub	r11,-48
800076ce:	33 08       	mov	r8,48
800076d0:	fb 6b 06 9f 	st.b	sp[1695],r11
800076d4:	fb 68 06 9e 	st.b	sp[1694],r8
800076d8:	fa ca f9 60 	sub	r10,sp,-1696
800076dc:	fa c8 f9 64 	sub	r8,sp,-1692
800076e0:	f4 08 01 08 	sub	r8,r10,r8
800076e4:	50 e8       	stdsp	sp[0x38],r8
800076e6:	10 92       	mov	r2,r8
800076e8:	40 6b       	lddsp	r11,sp[0x18]
800076ea:	16 02       	add	r2,r11
800076ec:	58 1b       	cp.w	r11,1
800076ee:	e0 89 00 05 	brgt	800076f8 <_vfprintf_r+0xac4>
800076f2:	ed b5 00 00 	bld	r5,0x0
800076f6:	c3 51       	brne	80007760 <_vfprintf_r+0xb2c>
800076f8:	2f f2       	sub	r2,-1
800076fa:	c3 38       	rjmp	80007760 <_vfprintf_r+0xb2c>
800076fc:	e0 40 00 66 	cp.w	r0,102
80007700:	c1 c1       	brne	80007738 <_vfprintf_r+0xb04>
80007702:	fa f2 06 ac 	ld.w	r2,sp[1708]
80007706:	58 02       	cp.w	r2,0
80007708:	e0 8a 00 0c 	brle	80007720 <_vfprintf_r+0xaec>
8000770c:	40 2a       	lddsp	r10,sp[0x8]
8000770e:	58 0a       	cp.w	r10,0
80007710:	c0 41       	brne	80007718 <_vfprintf_r+0xae4>
80007712:	ed b5 00 00 	bld	r5,0x0
80007716:	c2 51       	brne	80007760 <_vfprintf_r+0xb2c>
80007718:	2f f2       	sub	r2,-1
8000771a:	40 29       	lddsp	r9,sp[0x8]
8000771c:	12 02       	add	r2,r9
8000771e:	c0 b8       	rjmp	80007734 <_vfprintf_r+0xb00>
80007720:	40 28       	lddsp	r8,sp[0x8]
80007722:	58 08       	cp.w	r8,0
80007724:	c0 61       	brne	80007730 <_vfprintf_r+0xafc>
80007726:	ed b5 00 00 	bld	r5,0x0
8000772a:	c0 30       	breq	80007730 <_vfprintf_r+0xafc>
8000772c:	30 12       	mov	r2,1
8000772e:	c1 98       	rjmp	80007760 <_vfprintf_r+0xb2c>
80007730:	40 22       	lddsp	r2,sp[0x8]
80007732:	2f e2       	sub	r2,-2
80007734:	36 60       	mov	r0,102
80007736:	c1 58       	rjmp	80007760 <_vfprintf_r+0xb2c>
80007738:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000773c:	40 6e       	lddsp	lr,sp[0x18]
8000773e:	1c 32       	cp.w	r2,lr
80007740:	c0 65       	brlt	8000774c <_vfprintf_r+0xb18>
80007742:	ed b5 00 00 	bld	r5,0x0
80007746:	f7 b2 00 ff 	subeq	r2,-1
8000774a:	c0 a8       	rjmp	8000775e <_vfprintf_r+0xb2a>
8000774c:	e4 08 11 02 	rsub	r8,r2,2
80007750:	40 6c       	lddsp	r12,sp[0x18]
80007752:	58 02       	cp.w	r2,0
80007754:	f0 02 17 a0 	movle	r2,r8
80007758:	f9 b2 09 01 	movgt	r2,1
8000775c:	18 02       	add	r2,r12
8000775e:	36 70       	mov	r0,103
80007760:	40 9b       	lddsp	r11,sp[0x24]
80007762:	58 0b       	cp.w	r11,0
80007764:	e0 80 05 94 	breq	8000828c <_vfprintf_r+0x1658>
80007768:	32 d8       	mov	r8,45
8000776a:	fb 68 06 bb 	st.b	sp[1723],r8
8000776e:	e0 8f 05 93 	bral	80008294 <_vfprintf_r+0x1660>
80007772:	50 a7       	stdsp	sp[0x28],r7
80007774:	04 94       	mov	r4,r2
80007776:	0c 97       	mov	r7,r6
80007778:	02 92       	mov	r2,r1
8000777a:	06 96       	mov	r6,r3
8000777c:	40 41       	lddsp	r1,sp[0x10]
8000777e:	40 93       	lddsp	r3,sp[0x24]
80007780:	0e 99       	mov	r9,r7
80007782:	ed b5 00 05 	bld	r5,0x5
80007786:	c4 81       	brne	80007816 <_vfprintf_r+0xbe2>
80007788:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000778c:	40 3e       	lddsp	lr,sp[0xc]
8000778e:	58 0e       	cp.w	lr,0
80007790:	c1 d0       	breq	800077ca <_vfprintf_r+0xb96>
80007792:	10 36       	cp.w	r6,r8
80007794:	c0 64       	brge	800077a0 <_vfprintf_r+0xb6c>
80007796:	fa cc f9 44 	sub	r12,sp,-1724
8000779a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000779e:	c1 d8       	rjmp	800077d8 <_vfprintf_r+0xba4>
800077a0:	fa c8 f9 50 	sub	r8,sp,-1712
800077a4:	1a d8       	st.w	--sp,r8
800077a6:	fa c8 fa b8 	sub	r8,sp,-1352
800077aa:	04 9a       	mov	r10,r2
800077ac:	1a d8       	st.w	--sp,r8
800077ae:	fa c8 fb b4 	sub	r8,sp,-1100
800077b2:	0c 9b       	mov	r11,r6
800077b4:	1a d8       	st.w	--sp,r8
800077b6:	08 9c       	mov	r12,r4
800077b8:	fa c8 f9 40 	sub	r8,sp,-1728
800077bc:	fa c9 ff b4 	sub	r9,sp,-76
800077c0:	fe b0 f8 a2 	rcall	80006904 <get_arg>
800077c4:	2f dd       	sub	sp,-12
800077c6:	78 0a       	ld.w	r10,r12[0x0]
800077c8:	c2 08       	rjmp	80007808 <_vfprintf_r+0xbd4>
800077ca:	2f f7       	sub	r7,-1
800077cc:	10 39       	cp.w	r9,r8
800077ce:	c0 84       	brge	800077de <_vfprintf_r+0xbaa>
800077d0:	fa cb f9 44 	sub	r11,sp,-1724
800077d4:	f6 06 00 36 	add	r6,r11,r6<<0x3
800077d8:	ec fa fd 88 	ld.w	r10,r6[-632]
800077dc:	c1 68       	rjmp	80007808 <_vfprintf_r+0xbd4>
800077de:	41 09       	lddsp	r9,sp[0x40]
800077e0:	59 f8       	cp.w	r8,31
800077e2:	e0 89 00 10 	brgt	80007802 <_vfprintf_r+0xbce>
800077e6:	f2 ca ff fc 	sub	r10,r9,-4
800077ea:	51 0a       	stdsp	sp[0x40],r10
800077ec:	fa c6 f9 44 	sub	r6,sp,-1724
800077f0:	72 0a       	ld.w	r10,r9[0x0]
800077f2:	ec 08 00 39 	add	r9,r6,r8<<0x3
800077f6:	f3 4a fd 88 	st.w	r9[-632],r10
800077fa:	2f f8       	sub	r8,-1
800077fc:	fb 48 06 b4 	st.w	sp[1716],r8
80007800:	c0 48       	rjmp	80007808 <_vfprintf_r+0xbd4>
80007802:	72 0a       	ld.w	r10,r9[0x0]
80007804:	2f c9       	sub	r9,-4
80007806:	51 09       	stdsp	sp[0x40],r9
80007808:	40 be       	lddsp	lr,sp[0x2c]
8000780a:	1c 98       	mov	r8,lr
8000780c:	95 1e       	st.w	r10[0x4],lr
8000780e:	bf 58       	asr	r8,0x1f
80007810:	95 08       	st.w	r10[0x0],r8
80007812:	fe 9f fa 9f 	bral	80006d50 <_vfprintf_r+0x11c>
80007816:	ed b5 00 04 	bld	r5,0x4
8000781a:	c4 80       	breq	800078aa <_vfprintf_r+0xc76>
8000781c:	e2 15 00 40 	andl	r5,0x40,COH
80007820:	c4 50       	breq	800078aa <_vfprintf_r+0xc76>
80007822:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007826:	40 3c       	lddsp	r12,sp[0xc]
80007828:	58 0c       	cp.w	r12,0
8000782a:	c1 d0       	breq	80007864 <_vfprintf_r+0xc30>
8000782c:	10 36       	cp.w	r6,r8
8000782e:	c0 64       	brge	8000783a <_vfprintf_r+0xc06>
80007830:	fa cb f9 44 	sub	r11,sp,-1724
80007834:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007838:	c1 d8       	rjmp	80007872 <_vfprintf_r+0xc3e>
8000783a:	fa c8 f9 50 	sub	r8,sp,-1712
8000783e:	1a d8       	st.w	--sp,r8
80007840:	fa c8 fa b8 	sub	r8,sp,-1352
80007844:	04 9a       	mov	r10,r2
80007846:	1a d8       	st.w	--sp,r8
80007848:	fa c8 fb b4 	sub	r8,sp,-1100
8000784c:	0c 9b       	mov	r11,r6
8000784e:	1a d8       	st.w	--sp,r8
80007850:	08 9c       	mov	r12,r4
80007852:	fa c8 f9 40 	sub	r8,sp,-1728
80007856:	fa c9 ff b4 	sub	r9,sp,-76
8000785a:	fe b0 f8 55 	rcall	80006904 <get_arg>
8000785e:	2f dd       	sub	sp,-12
80007860:	78 0a       	ld.w	r10,r12[0x0]
80007862:	c2 08       	rjmp	800078a2 <_vfprintf_r+0xc6e>
80007864:	2f f7       	sub	r7,-1
80007866:	10 39       	cp.w	r9,r8
80007868:	c0 84       	brge	80007878 <_vfprintf_r+0xc44>
8000786a:	fa ca f9 44 	sub	r10,sp,-1724
8000786e:	f4 06 00 36 	add	r6,r10,r6<<0x3
80007872:	ec fa fd 88 	ld.w	r10,r6[-632]
80007876:	c1 68       	rjmp	800078a2 <_vfprintf_r+0xc6e>
80007878:	41 09       	lddsp	r9,sp[0x40]
8000787a:	59 f8       	cp.w	r8,31
8000787c:	e0 89 00 10 	brgt	8000789c <_vfprintf_r+0xc68>
80007880:	f2 ca ff fc 	sub	r10,r9,-4
80007884:	51 0a       	stdsp	sp[0x40],r10
80007886:	fa c6 f9 44 	sub	r6,sp,-1724
8000788a:	72 0a       	ld.w	r10,r9[0x0]
8000788c:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007890:	f3 4a fd 88 	st.w	r9[-632],r10
80007894:	2f f8       	sub	r8,-1
80007896:	fb 48 06 b4 	st.w	sp[1716],r8
8000789a:	c0 48       	rjmp	800078a2 <_vfprintf_r+0xc6e>
8000789c:	72 0a       	ld.w	r10,r9[0x0]
8000789e:	2f c9       	sub	r9,-4
800078a0:	51 09       	stdsp	sp[0x40],r9
800078a2:	40 be       	lddsp	lr,sp[0x2c]
800078a4:	b4 0e       	st.h	r10[0x0],lr
800078a6:	fe 9f fa 55 	bral	80006d50 <_vfprintf_r+0x11c>
800078aa:	fa f8 06 b4 	ld.w	r8,sp[1716]
800078ae:	40 3c       	lddsp	r12,sp[0xc]
800078b0:	58 0c       	cp.w	r12,0
800078b2:	c1 d0       	breq	800078ec <_vfprintf_r+0xcb8>
800078b4:	10 36       	cp.w	r6,r8
800078b6:	c0 64       	brge	800078c2 <_vfprintf_r+0xc8e>
800078b8:	fa cb f9 44 	sub	r11,sp,-1724
800078bc:	f6 06 00 36 	add	r6,r11,r6<<0x3
800078c0:	c1 d8       	rjmp	800078fa <_vfprintf_r+0xcc6>
800078c2:	fa c8 f9 50 	sub	r8,sp,-1712
800078c6:	1a d8       	st.w	--sp,r8
800078c8:	fa c8 fa b8 	sub	r8,sp,-1352
800078cc:	04 9a       	mov	r10,r2
800078ce:	1a d8       	st.w	--sp,r8
800078d0:	fa c8 fb b4 	sub	r8,sp,-1100
800078d4:	0c 9b       	mov	r11,r6
800078d6:	1a d8       	st.w	--sp,r8
800078d8:	08 9c       	mov	r12,r4
800078da:	fa c8 f9 40 	sub	r8,sp,-1728
800078de:	fa c9 ff b4 	sub	r9,sp,-76
800078e2:	fe b0 f8 11 	rcall	80006904 <get_arg>
800078e6:	2f dd       	sub	sp,-12
800078e8:	78 0a       	ld.w	r10,r12[0x0]
800078ea:	c2 08       	rjmp	8000792a <_vfprintf_r+0xcf6>
800078ec:	2f f7       	sub	r7,-1
800078ee:	10 39       	cp.w	r9,r8
800078f0:	c0 84       	brge	80007900 <_vfprintf_r+0xccc>
800078f2:	fa ca f9 44 	sub	r10,sp,-1724
800078f6:	f4 06 00 36 	add	r6,r10,r6<<0x3
800078fa:	ec fa fd 88 	ld.w	r10,r6[-632]
800078fe:	c1 68       	rjmp	8000792a <_vfprintf_r+0xcf6>
80007900:	41 09       	lddsp	r9,sp[0x40]
80007902:	59 f8       	cp.w	r8,31
80007904:	e0 89 00 10 	brgt	80007924 <_vfprintf_r+0xcf0>
80007908:	f2 ca ff fc 	sub	r10,r9,-4
8000790c:	51 0a       	stdsp	sp[0x40],r10
8000790e:	fa c6 f9 44 	sub	r6,sp,-1724
80007912:	72 0a       	ld.w	r10,r9[0x0]
80007914:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007918:	f3 4a fd 88 	st.w	r9[-632],r10
8000791c:	2f f8       	sub	r8,-1
8000791e:	fb 48 06 b4 	st.w	sp[1716],r8
80007922:	c0 48       	rjmp	8000792a <_vfprintf_r+0xcf6>
80007924:	72 0a       	ld.w	r10,r9[0x0]
80007926:	2f c9       	sub	r9,-4
80007928:	51 09       	stdsp	sp[0x40],r9
8000792a:	40 be       	lddsp	lr,sp[0x2c]
8000792c:	95 0e       	st.w	r10[0x0],lr
8000792e:	fe 9f fa 11 	bral	80006d50 <_vfprintf_r+0x11c>
80007932:	50 a7       	stdsp	sp[0x28],r7
80007934:	50 80       	stdsp	sp[0x20],r0
80007936:	0c 97       	mov	r7,r6
80007938:	04 94       	mov	r4,r2
8000793a:	06 96       	mov	r6,r3
8000793c:	02 92       	mov	r2,r1
8000793e:	40 93       	lddsp	r3,sp[0x24]
80007940:	10 90       	mov	r0,r8
80007942:	40 41       	lddsp	r1,sp[0x10]
80007944:	a5 a5       	sbr	r5,0x4
80007946:	c0 a8       	rjmp	8000795a <_vfprintf_r+0xd26>
80007948:	50 a7       	stdsp	sp[0x28],r7
8000794a:	50 80       	stdsp	sp[0x20],r0
8000794c:	0c 97       	mov	r7,r6
8000794e:	04 94       	mov	r4,r2
80007950:	06 96       	mov	r6,r3
80007952:	02 92       	mov	r2,r1
80007954:	40 93       	lddsp	r3,sp[0x24]
80007956:	10 90       	mov	r0,r8
80007958:	40 41       	lddsp	r1,sp[0x10]
8000795a:	ed b5 00 05 	bld	r5,0x5
8000795e:	c5 d1       	brne	80007a18 <_vfprintf_r+0xde4>
80007960:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007964:	40 3c       	lddsp	r12,sp[0xc]
80007966:	58 0c       	cp.w	r12,0
80007968:	c2 60       	breq	800079b4 <_vfprintf_r+0xd80>
8000796a:	10 36       	cp.w	r6,r8
8000796c:	c0 a4       	brge	80007980 <_vfprintf_r+0xd4c>
8000796e:	fa cb f9 44 	sub	r11,sp,-1724
80007972:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007976:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000797a:	fa e9 00 00 	st.d	sp[0],r8
8000797e:	c1 88       	rjmp	800079ae <_vfprintf_r+0xd7a>
80007980:	fa c8 f9 50 	sub	r8,sp,-1712
80007984:	1a d8       	st.w	--sp,r8
80007986:	fa c8 fa b8 	sub	r8,sp,-1352
8000798a:	04 9a       	mov	r10,r2
8000798c:	1a d8       	st.w	--sp,r8
8000798e:	0c 9b       	mov	r11,r6
80007990:	fa c8 fb b4 	sub	r8,sp,-1100
80007994:	08 9c       	mov	r12,r4
80007996:	1a d8       	st.w	--sp,r8
80007998:	fa c8 f9 40 	sub	r8,sp,-1728
8000799c:	fa c9 ff b4 	sub	r9,sp,-76
800079a0:	fe b0 f7 b2 	rcall	80006904 <get_arg>
800079a4:	2f dd       	sub	sp,-12
800079a6:	f8 ea 00 00 	ld.d	r10,r12[0]
800079aa:	fa eb 00 00 	st.d	sp[0],r10
800079ae:	30 08       	mov	r8,0
800079b0:	e0 8f 03 de 	bral	8000816c <_vfprintf_r+0x1538>
800079b4:	ee ca ff ff 	sub	r10,r7,-1
800079b8:	10 37       	cp.w	r7,r8
800079ba:	c0 b4       	brge	800079d0 <_vfprintf_r+0xd9c>
800079bc:	fa c9 f9 44 	sub	r9,sp,-1724
800079c0:	14 97       	mov	r7,r10
800079c2:	f2 06 00 36 	add	r6,r9,r6<<0x3
800079c6:	ec ea fd 88 	ld.d	r10,r6[-632]
800079ca:	fa eb 00 00 	st.d	sp[0],r10
800079ce:	c1 88       	rjmp	800079fe <_vfprintf_r+0xdca>
800079d0:	41 09       	lddsp	r9,sp[0x40]
800079d2:	59 f8       	cp.w	r8,31
800079d4:	e0 89 00 18 	brgt	80007a04 <_vfprintf_r+0xdd0>
800079d8:	f2 e6 00 00 	ld.d	r6,r9[0]
800079dc:	f2 cb ff f8 	sub	r11,r9,-8
800079e0:	fa e7 00 00 	st.d	sp[0],r6
800079e4:	51 0b       	stdsp	sp[0x40],r11
800079e6:	fa c6 f9 44 	sub	r6,sp,-1724
800079ea:	ec 08 00 39 	add	r9,r6,r8<<0x3
800079ee:	fa e6 00 00 	ld.d	r6,sp[0]
800079f2:	f2 e7 fd 88 	st.d	r9[-632],r6
800079f6:	2f f8       	sub	r8,-1
800079f8:	14 97       	mov	r7,r10
800079fa:	fb 48 06 b4 	st.w	sp[1716],r8
800079fe:	40 38       	lddsp	r8,sp[0xc]
80007a00:	e0 8f 03 b6 	bral	8000816c <_vfprintf_r+0x1538>
80007a04:	f2 e6 00 00 	ld.d	r6,r9[0]
80007a08:	40 38       	lddsp	r8,sp[0xc]
80007a0a:	fa e7 00 00 	st.d	sp[0],r6
80007a0e:	2f 89       	sub	r9,-8
80007a10:	14 97       	mov	r7,r10
80007a12:	51 09       	stdsp	sp[0x40],r9
80007a14:	e0 8f 03 ac 	bral	8000816c <_vfprintf_r+0x1538>
80007a18:	ed b5 00 04 	bld	r5,0x4
80007a1c:	c1 61       	brne	80007a48 <_vfprintf_r+0xe14>
80007a1e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007a22:	40 3e       	lddsp	lr,sp[0xc]
80007a24:	58 0e       	cp.w	lr,0
80007a26:	c0 80       	breq	80007a36 <_vfprintf_r+0xe02>
80007a28:	10 36       	cp.w	r6,r8
80007a2a:	c6 74       	brge	80007af8 <_vfprintf_r+0xec4>
80007a2c:	fa cc f9 44 	sub	r12,sp,-1724
80007a30:	f8 06 00 36 	add	r6,r12,r6<<0x3
80007a34:	c8 08       	rjmp	80007b34 <_vfprintf_r+0xf00>
80007a36:	ee ca ff ff 	sub	r10,r7,-1
80007a3a:	10 37       	cp.w	r7,r8
80007a3c:	c7 f4       	brge	80007b3a <_vfprintf_r+0xf06>
80007a3e:	fa cb f9 44 	sub	r11,sp,-1724
80007a42:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007a46:	c7 68       	rjmp	80007b32 <_vfprintf_r+0xefe>
80007a48:	ed b5 00 06 	bld	r5,0x6
80007a4c:	c4 a1       	brne	80007ae0 <_vfprintf_r+0xeac>
80007a4e:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007a52:	40 3c       	lddsp	r12,sp[0xc]
80007a54:	58 0c       	cp.w	r12,0
80007a56:	c1 d0       	breq	80007a90 <_vfprintf_r+0xe5c>
80007a58:	10 36       	cp.w	r6,r8
80007a5a:	c0 64       	brge	80007a66 <_vfprintf_r+0xe32>
80007a5c:	fa cb f9 44 	sub	r11,sp,-1724
80007a60:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007a64:	c1 f8       	rjmp	80007aa2 <_vfprintf_r+0xe6e>
80007a66:	fa c8 f9 50 	sub	r8,sp,-1712
80007a6a:	1a d8       	st.w	--sp,r8
80007a6c:	fa c8 fa b8 	sub	r8,sp,-1352
80007a70:	1a d8       	st.w	--sp,r8
80007a72:	fa c8 fb b4 	sub	r8,sp,-1100
80007a76:	1a d8       	st.w	--sp,r8
80007a78:	fa c8 f9 40 	sub	r8,sp,-1728
80007a7c:	fa c9 ff b4 	sub	r9,sp,-76
80007a80:	04 9a       	mov	r10,r2
80007a82:	0c 9b       	mov	r11,r6
80007a84:	08 9c       	mov	r12,r4
80007a86:	fe b0 f7 3f 	rcall	80006904 <get_arg>
80007a8a:	2f dd       	sub	sp,-12
80007a8c:	98 18       	ld.sh	r8,r12[0x2]
80007a8e:	c2 68       	rjmp	80007ada <_vfprintf_r+0xea6>
80007a90:	ee ca ff ff 	sub	r10,r7,-1
80007a94:	10 37       	cp.w	r7,r8
80007a96:	c0 94       	brge	80007aa8 <_vfprintf_r+0xe74>
80007a98:	fa c9 f9 44 	sub	r9,sp,-1724
80007a9c:	14 97       	mov	r7,r10
80007a9e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007aa2:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80007aa6:	c1 a8       	rjmp	80007ada <_vfprintf_r+0xea6>
80007aa8:	41 09       	lddsp	r9,sp[0x40]
80007aaa:	59 f8       	cp.w	r8,31
80007aac:	e0 89 00 13 	brgt	80007ad2 <_vfprintf_r+0xe9e>
80007ab0:	f2 cb ff fc 	sub	r11,r9,-4
80007ab4:	51 0b       	stdsp	sp[0x40],r11
80007ab6:	72 09       	ld.w	r9,r9[0x0]
80007ab8:	fa c6 f9 44 	sub	r6,sp,-1724
80007abc:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80007ac0:	2f f8       	sub	r8,-1
80007ac2:	f7 49 fd 88 	st.w	r11[-632],r9
80007ac6:	fb 48 06 b4 	st.w	sp[1716],r8
80007aca:	14 97       	mov	r7,r10
80007acc:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80007ad0:	c0 58       	rjmp	80007ada <_vfprintf_r+0xea6>
80007ad2:	92 18       	ld.sh	r8,r9[0x2]
80007ad4:	14 97       	mov	r7,r10
80007ad6:	2f c9       	sub	r9,-4
80007ad8:	51 09       	stdsp	sp[0x40],r9
80007ada:	5c 78       	castu.h	r8
80007adc:	50 18       	stdsp	sp[0x4],r8
80007ade:	c4 68       	rjmp	80007b6a <_vfprintf_r+0xf36>
80007ae0:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007ae4:	40 3c       	lddsp	r12,sp[0xc]
80007ae6:	58 0c       	cp.w	r12,0
80007ae8:	c1 d0       	breq	80007b22 <_vfprintf_r+0xeee>
80007aea:	10 36       	cp.w	r6,r8
80007aec:	c0 64       	brge	80007af8 <_vfprintf_r+0xec4>
80007aee:	fa cb f9 44 	sub	r11,sp,-1724
80007af2:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007af6:	c1 f8       	rjmp	80007b34 <_vfprintf_r+0xf00>
80007af8:	fa c8 f9 50 	sub	r8,sp,-1712
80007afc:	1a d8       	st.w	--sp,r8
80007afe:	fa c8 fa b8 	sub	r8,sp,-1352
80007b02:	0c 9b       	mov	r11,r6
80007b04:	1a d8       	st.w	--sp,r8
80007b06:	fa c8 fb b4 	sub	r8,sp,-1100
80007b0a:	04 9a       	mov	r10,r2
80007b0c:	1a d8       	st.w	--sp,r8
80007b0e:	08 9c       	mov	r12,r4
80007b10:	fa c8 f9 40 	sub	r8,sp,-1728
80007b14:	fa c9 ff b4 	sub	r9,sp,-76
80007b18:	fe b0 f6 f6 	rcall	80006904 <get_arg>
80007b1c:	2f dd       	sub	sp,-12
80007b1e:	78 0b       	ld.w	r11,r12[0x0]
80007b20:	c2 48       	rjmp	80007b68 <_vfprintf_r+0xf34>
80007b22:	ee ca ff ff 	sub	r10,r7,-1
80007b26:	10 37       	cp.w	r7,r8
80007b28:	c0 94       	brge	80007b3a <_vfprintf_r+0xf06>
80007b2a:	fa c9 f9 44 	sub	r9,sp,-1724
80007b2e:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007b32:	14 97       	mov	r7,r10
80007b34:	ec fb fd 88 	ld.w	r11,r6[-632]
80007b38:	c1 88       	rjmp	80007b68 <_vfprintf_r+0xf34>
80007b3a:	41 09       	lddsp	r9,sp[0x40]
80007b3c:	59 f8       	cp.w	r8,31
80007b3e:	e0 89 00 11 	brgt	80007b60 <_vfprintf_r+0xf2c>
80007b42:	f2 cb ff fc 	sub	r11,r9,-4
80007b46:	51 0b       	stdsp	sp[0x40],r11
80007b48:	fa c6 f9 44 	sub	r6,sp,-1724
80007b4c:	72 0b       	ld.w	r11,r9[0x0]
80007b4e:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007b52:	f3 4b fd 88 	st.w	r9[-632],r11
80007b56:	2f f8       	sub	r8,-1
80007b58:	14 97       	mov	r7,r10
80007b5a:	fb 48 06 b4 	st.w	sp[1716],r8
80007b5e:	c0 58       	rjmp	80007b68 <_vfprintf_r+0xf34>
80007b60:	72 0b       	ld.w	r11,r9[0x0]
80007b62:	14 97       	mov	r7,r10
80007b64:	2f c9       	sub	r9,-4
80007b66:	51 09       	stdsp	sp[0x40],r9
80007b68:	50 1b       	stdsp	sp[0x4],r11
80007b6a:	30 0e       	mov	lr,0
80007b6c:	50 0e       	stdsp	sp[0x0],lr
80007b6e:	1c 98       	mov	r8,lr
80007b70:	e0 8f 02 fe 	bral	8000816c <_vfprintf_r+0x1538>
80007b74:	50 a7       	stdsp	sp[0x28],r7
80007b76:	50 80       	stdsp	sp[0x20],r0
80007b78:	0c 97       	mov	r7,r6
80007b7a:	04 94       	mov	r4,r2
80007b7c:	06 96       	mov	r6,r3
80007b7e:	02 92       	mov	r2,r1
80007b80:	40 93       	lddsp	r3,sp[0x24]
80007b82:	40 41       	lddsp	r1,sp[0x10]
80007b84:	0e 99       	mov	r9,r7
80007b86:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007b8a:	40 3c       	lddsp	r12,sp[0xc]
80007b8c:	58 0c       	cp.w	r12,0
80007b8e:	c1 d0       	breq	80007bc8 <_vfprintf_r+0xf94>
80007b90:	10 36       	cp.w	r6,r8
80007b92:	c0 64       	brge	80007b9e <_vfprintf_r+0xf6a>
80007b94:	fa cb f9 44 	sub	r11,sp,-1724
80007b98:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007b9c:	c1 d8       	rjmp	80007bd6 <_vfprintf_r+0xfa2>
80007b9e:	fa c8 f9 50 	sub	r8,sp,-1712
80007ba2:	1a d8       	st.w	--sp,r8
80007ba4:	fa c8 fa b8 	sub	r8,sp,-1352
80007ba8:	1a d8       	st.w	--sp,r8
80007baa:	fa c8 fb b4 	sub	r8,sp,-1100
80007bae:	1a d8       	st.w	--sp,r8
80007bb0:	fa c9 ff b4 	sub	r9,sp,-76
80007bb4:	fa c8 f9 40 	sub	r8,sp,-1728
80007bb8:	04 9a       	mov	r10,r2
80007bba:	0c 9b       	mov	r11,r6
80007bbc:	08 9c       	mov	r12,r4
80007bbe:	fe b0 f6 a3 	rcall	80006904 <get_arg>
80007bc2:	2f dd       	sub	sp,-12
80007bc4:	78 09       	ld.w	r9,r12[0x0]
80007bc6:	c2 18       	rjmp	80007c08 <_vfprintf_r+0xfd4>
80007bc8:	2f f7       	sub	r7,-1
80007bca:	10 39       	cp.w	r9,r8
80007bcc:	c0 84       	brge	80007bdc <_vfprintf_r+0xfa8>
80007bce:	fa ca f9 44 	sub	r10,sp,-1724
80007bd2:	f4 06 00 36 	add	r6,r10,r6<<0x3
80007bd6:	ec f9 fd 88 	ld.w	r9,r6[-632]
80007bda:	c1 78       	rjmp	80007c08 <_vfprintf_r+0xfd4>
80007bdc:	41 09       	lddsp	r9,sp[0x40]
80007bde:	59 f8       	cp.w	r8,31
80007be0:	e0 89 00 10 	brgt	80007c00 <_vfprintf_r+0xfcc>
80007be4:	f2 ca ff fc 	sub	r10,r9,-4
80007be8:	51 0a       	stdsp	sp[0x40],r10
80007bea:	fa c6 f9 44 	sub	r6,sp,-1724
80007bee:	72 09       	ld.w	r9,r9[0x0]
80007bf0:	ec 08 00 3a 	add	r10,r6,r8<<0x3
80007bf4:	f5 49 fd 88 	st.w	r10[-632],r9
80007bf8:	2f f8       	sub	r8,-1
80007bfa:	fb 48 06 b4 	st.w	sp[1716],r8
80007bfe:	c0 58       	rjmp	80007c08 <_vfprintf_r+0xfd4>
80007c00:	f2 c8 ff fc 	sub	r8,r9,-4
80007c04:	51 08       	stdsp	sp[0x40],r8
80007c06:	72 09       	ld.w	r9,r9[0x0]
80007c08:	33 08       	mov	r8,48
80007c0a:	fb 68 06 b8 	st.b	sp[1720],r8
80007c0e:	37 88       	mov	r8,120
80007c10:	30 0e       	mov	lr,0
80007c12:	fb 68 06 b9 	st.b	sp[1721],r8
80007c16:	fe cc bd 8e 	sub	r12,pc,-17010
80007c1a:	50 19       	stdsp	sp[0x4],r9
80007c1c:	a1 b5       	sbr	r5,0x1
80007c1e:	50 0e       	stdsp	sp[0x0],lr
80007c20:	50 dc       	stdsp	sp[0x34],r12
80007c22:	30 28       	mov	r8,2
80007c24:	37 80       	mov	r0,120
80007c26:	e0 8f 02 a3 	bral	8000816c <_vfprintf_r+0x1538>
80007c2a:	50 a7       	stdsp	sp[0x28],r7
80007c2c:	50 80       	stdsp	sp[0x20],r0
80007c2e:	10 90       	mov	r0,r8
80007c30:	30 08       	mov	r8,0
80007c32:	fb 68 06 bb 	st.b	sp[1723],r8
80007c36:	0c 97       	mov	r7,r6
80007c38:	04 94       	mov	r4,r2
80007c3a:	06 96       	mov	r6,r3
80007c3c:	02 92       	mov	r2,r1
80007c3e:	40 93       	lddsp	r3,sp[0x24]
80007c40:	40 41       	lddsp	r1,sp[0x10]
80007c42:	0e 99       	mov	r9,r7
80007c44:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007c48:	40 3b       	lddsp	r11,sp[0xc]
80007c4a:	58 0b       	cp.w	r11,0
80007c4c:	c1 d0       	breq	80007c86 <_vfprintf_r+0x1052>
80007c4e:	10 36       	cp.w	r6,r8
80007c50:	c0 64       	brge	80007c5c <_vfprintf_r+0x1028>
80007c52:	fa ca f9 44 	sub	r10,sp,-1724
80007c56:	f4 06 00 36 	add	r6,r10,r6<<0x3
80007c5a:	c1 d8       	rjmp	80007c94 <_vfprintf_r+0x1060>
80007c5c:	fa c8 f9 50 	sub	r8,sp,-1712
80007c60:	1a d8       	st.w	--sp,r8
80007c62:	fa c8 fa b8 	sub	r8,sp,-1352
80007c66:	1a d8       	st.w	--sp,r8
80007c68:	fa c8 fb b4 	sub	r8,sp,-1100
80007c6c:	0c 9b       	mov	r11,r6
80007c6e:	1a d8       	st.w	--sp,r8
80007c70:	04 9a       	mov	r10,r2
80007c72:	fa c8 f9 40 	sub	r8,sp,-1728
80007c76:	fa c9 ff b4 	sub	r9,sp,-76
80007c7a:	08 9c       	mov	r12,r4
80007c7c:	fe b0 f6 44 	rcall	80006904 <get_arg>
80007c80:	2f dd       	sub	sp,-12
80007c82:	78 06       	ld.w	r6,r12[0x0]
80007c84:	c2 08       	rjmp	80007cc4 <_vfprintf_r+0x1090>
80007c86:	2f f7       	sub	r7,-1
80007c88:	10 39       	cp.w	r9,r8
80007c8a:	c0 84       	brge	80007c9a <_vfprintf_r+0x1066>
80007c8c:	fa c9 f9 44 	sub	r9,sp,-1724
80007c90:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007c94:	ec f6 fd 88 	ld.w	r6,r6[-632]
80007c98:	c1 68       	rjmp	80007cc4 <_vfprintf_r+0x1090>
80007c9a:	41 09       	lddsp	r9,sp[0x40]
80007c9c:	59 f8       	cp.w	r8,31
80007c9e:	e0 89 00 10 	brgt	80007cbe <_vfprintf_r+0x108a>
80007ca2:	f2 ca ff fc 	sub	r10,r9,-4
80007ca6:	51 0a       	stdsp	sp[0x40],r10
80007ca8:	72 06       	ld.w	r6,r9[0x0]
80007caa:	fa ce f9 44 	sub	lr,sp,-1724
80007cae:	fc 08 00 39 	add	r9,lr,r8<<0x3
80007cb2:	f3 46 fd 88 	st.w	r9[-632],r6
80007cb6:	2f f8       	sub	r8,-1
80007cb8:	fb 48 06 b4 	st.w	sp[1716],r8
80007cbc:	c0 48       	rjmp	80007cc4 <_vfprintf_r+0x1090>
80007cbe:	72 06       	ld.w	r6,r9[0x0]
80007cc0:	2f c9       	sub	r9,-4
80007cc2:	51 09       	stdsp	sp[0x40],r9
80007cc4:	40 2c       	lddsp	r12,sp[0x8]
80007cc6:	58 0c       	cp.w	r12,0
80007cc8:	c1 05       	brlt	80007ce8 <_vfprintf_r+0x10b4>
80007cca:	18 9a       	mov	r10,r12
80007ccc:	30 0b       	mov	r11,0
80007cce:	0c 9c       	mov	r12,r6
80007cd0:	e0 a0 14 58 	rcall	8000a580 <memchr>
80007cd4:	e0 80 02 df 	breq	80008292 <_vfprintf_r+0x165e>
80007cd8:	f8 06 01 02 	sub	r2,r12,r6
80007cdc:	40 2b       	lddsp	r11,sp[0x8]
80007cde:	16 32       	cp.w	r2,r11
80007ce0:	e0 89 02 d9 	brgt	80008292 <_vfprintf_r+0x165e>
80007ce4:	e0 8f 02 d4 	bral	8000828c <_vfprintf_r+0x1658>
80007ce8:	30 0a       	mov	r10,0
80007cea:	0c 9c       	mov	r12,r6
80007cec:	50 2a       	stdsp	sp[0x8],r10
80007cee:	e0 a0 19 33 	rcall	8000af54 <strlen>
80007cf2:	18 92       	mov	r2,r12
80007cf4:	e0 8f 02 d2 	bral	80008298 <_vfprintf_r+0x1664>
80007cf8:	50 a7       	stdsp	sp[0x28],r7
80007cfa:	50 80       	stdsp	sp[0x20],r0
80007cfc:	0c 97       	mov	r7,r6
80007cfe:	04 94       	mov	r4,r2
80007d00:	06 96       	mov	r6,r3
80007d02:	02 92       	mov	r2,r1
80007d04:	40 93       	lddsp	r3,sp[0x24]
80007d06:	10 90       	mov	r0,r8
80007d08:	40 41       	lddsp	r1,sp[0x10]
80007d0a:	a5 a5       	sbr	r5,0x4
80007d0c:	c0 a8       	rjmp	80007d20 <_vfprintf_r+0x10ec>
80007d0e:	50 a7       	stdsp	sp[0x28],r7
80007d10:	50 80       	stdsp	sp[0x20],r0
80007d12:	0c 97       	mov	r7,r6
80007d14:	04 94       	mov	r4,r2
80007d16:	06 96       	mov	r6,r3
80007d18:	02 92       	mov	r2,r1
80007d1a:	40 93       	lddsp	r3,sp[0x24]
80007d1c:	10 90       	mov	r0,r8
80007d1e:	40 41       	lddsp	r1,sp[0x10]
80007d20:	ed b5 00 05 	bld	r5,0x5
80007d24:	c5 61       	brne	80007dd0 <_vfprintf_r+0x119c>
80007d26:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007d2a:	40 39       	lddsp	r9,sp[0xc]
80007d2c:	58 09       	cp.w	r9,0
80007d2e:	c2 10       	breq	80007d70 <_vfprintf_r+0x113c>
80007d30:	10 36       	cp.w	r6,r8
80007d32:	c0 74       	brge	80007d40 <_vfprintf_r+0x110c>
80007d34:	fa c8 f9 44 	sub	r8,sp,-1724
80007d38:	f0 06 00 36 	add	r6,r8,r6<<0x3
80007d3c:	c2 38       	rjmp	80007d82 <_vfprintf_r+0x114e>
80007d3e:	d7 03       	nop
80007d40:	fa c8 f9 50 	sub	r8,sp,-1712
80007d44:	1a d8       	st.w	--sp,r8
80007d46:	fa c8 fa b8 	sub	r8,sp,-1352
80007d4a:	1a d8       	st.w	--sp,r8
80007d4c:	fa c8 fb b4 	sub	r8,sp,-1100
80007d50:	1a d8       	st.w	--sp,r8
80007d52:	fa c8 f9 40 	sub	r8,sp,-1728
80007d56:	fa c9 ff b4 	sub	r9,sp,-76
80007d5a:	04 9a       	mov	r10,r2
80007d5c:	0c 9b       	mov	r11,r6
80007d5e:	08 9c       	mov	r12,r4
80007d60:	fe b0 f5 d2 	rcall	80006904 <get_arg>
80007d64:	2f dd       	sub	sp,-12
80007d66:	f8 e8 00 00 	ld.d	r8,r12[0]
80007d6a:	fa e9 00 00 	st.d	sp[0],r8
80007d6e:	c2 e8       	rjmp	80007dca <_vfprintf_r+0x1196>
80007d70:	ee ca ff ff 	sub	r10,r7,-1
80007d74:	10 37       	cp.w	r7,r8
80007d76:	c0 b4       	brge	80007d8c <_vfprintf_r+0x1158>
80007d78:	fa c8 f9 44 	sub	r8,sp,-1724
80007d7c:	14 97       	mov	r7,r10
80007d7e:	f0 06 00 36 	add	r6,r8,r6<<0x3
80007d82:	ec ea fd 88 	ld.d	r10,r6[-632]
80007d86:	fa eb 00 00 	st.d	sp[0],r10
80007d8a:	c2 08       	rjmp	80007dca <_vfprintf_r+0x1196>
80007d8c:	41 09       	lddsp	r9,sp[0x40]
80007d8e:	59 f8       	cp.w	r8,31
80007d90:	e0 89 00 16 	brgt	80007dbc <_vfprintf_r+0x1188>
80007d94:	f2 e6 00 00 	ld.d	r6,r9[0]
80007d98:	f2 cb ff f8 	sub	r11,r9,-8
80007d9c:	fa e7 00 00 	st.d	sp[0],r6
80007da0:	51 0b       	stdsp	sp[0x40],r11
80007da2:	fa c6 f9 44 	sub	r6,sp,-1724
80007da6:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007daa:	fa e6 00 00 	ld.d	r6,sp[0]
80007dae:	f2 e7 fd 88 	st.d	r9[-632],r6
80007db2:	2f f8       	sub	r8,-1
80007db4:	14 97       	mov	r7,r10
80007db6:	fb 48 06 b4 	st.w	sp[1716],r8
80007dba:	c0 88       	rjmp	80007dca <_vfprintf_r+0x1196>
80007dbc:	f2 e6 00 00 	ld.d	r6,r9[0]
80007dc0:	2f 89       	sub	r9,-8
80007dc2:	fa e7 00 00 	st.d	sp[0],r6
80007dc6:	51 09       	stdsp	sp[0x40],r9
80007dc8:	14 97       	mov	r7,r10
80007dca:	30 18       	mov	r8,1
80007dcc:	e0 8f 01 d0 	bral	8000816c <_vfprintf_r+0x1538>
80007dd0:	ed b5 00 04 	bld	r5,0x4
80007dd4:	c1 61       	brne	80007e00 <_vfprintf_r+0x11cc>
80007dd6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007dda:	40 3e       	lddsp	lr,sp[0xc]
80007ddc:	58 0e       	cp.w	lr,0
80007dde:	c0 80       	breq	80007dee <_vfprintf_r+0x11ba>
80007de0:	10 36       	cp.w	r6,r8
80007de2:	c6 74       	brge	80007eb0 <_vfprintf_r+0x127c>
80007de4:	fa cc f9 44 	sub	r12,sp,-1724
80007de8:	f8 06 00 36 	add	r6,r12,r6<<0x3
80007dec:	c8 08       	rjmp	80007eec <_vfprintf_r+0x12b8>
80007dee:	ee ca ff ff 	sub	r10,r7,-1
80007df2:	10 37       	cp.w	r7,r8
80007df4:	c7 f4       	brge	80007ef2 <_vfprintf_r+0x12be>
80007df6:	fa cb f9 44 	sub	r11,sp,-1724
80007dfa:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007dfe:	c7 68       	rjmp	80007eea <_vfprintf_r+0x12b6>
80007e00:	ed b5 00 06 	bld	r5,0x6
80007e04:	c4 a1       	brne	80007e98 <_vfprintf_r+0x1264>
80007e06:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007e0a:	40 3c       	lddsp	r12,sp[0xc]
80007e0c:	58 0c       	cp.w	r12,0
80007e0e:	c1 d0       	breq	80007e48 <_vfprintf_r+0x1214>
80007e10:	10 36       	cp.w	r6,r8
80007e12:	c0 64       	brge	80007e1e <_vfprintf_r+0x11ea>
80007e14:	fa cb f9 44 	sub	r11,sp,-1724
80007e18:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007e1c:	c1 f8       	rjmp	80007e5a <_vfprintf_r+0x1226>
80007e1e:	fa c8 f9 50 	sub	r8,sp,-1712
80007e22:	1a d8       	st.w	--sp,r8
80007e24:	fa c8 fa b8 	sub	r8,sp,-1352
80007e28:	1a d8       	st.w	--sp,r8
80007e2a:	fa c8 fb b4 	sub	r8,sp,-1100
80007e2e:	1a d8       	st.w	--sp,r8
80007e30:	fa c8 f9 40 	sub	r8,sp,-1728
80007e34:	fa c9 ff b4 	sub	r9,sp,-76
80007e38:	04 9a       	mov	r10,r2
80007e3a:	0c 9b       	mov	r11,r6
80007e3c:	08 9c       	mov	r12,r4
80007e3e:	fe b0 f5 63 	rcall	80006904 <get_arg>
80007e42:	2f dd       	sub	sp,-12
80007e44:	98 18       	ld.sh	r8,r12[0x2]
80007e46:	c2 68       	rjmp	80007e92 <_vfprintf_r+0x125e>
80007e48:	ee ca ff ff 	sub	r10,r7,-1
80007e4c:	10 37       	cp.w	r7,r8
80007e4e:	c0 94       	brge	80007e60 <_vfprintf_r+0x122c>
80007e50:	fa c9 f9 44 	sub	r9,sp,-1724
80007e54:	14 97       	mov	r7,r10
80007e56:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007e5a:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80007e5e:	c1 a8       	rjmp	80007e92 <_vfprintf_r+0x125e>
80007e60:	41 09       	lddsp	r9,sp[0x40]
80007e62:	59 f8       	cp.w	r8,31
80007e64:	e0 89 00 13 	brgt	80007e8a <_vfprintf_r+0x1256>
80007e68:	f2 cb ff fc 	sub	r11,r9,-4
80007e6c:	51 0b       	stdsp	sp[0x40],r11
80007e6e:	72 09       	ld.w	r9,r9[0x0]
80007e70:	fa c6 f9 44 	sub	r6,sp,-1724
80007e74:	ec 08 00 3b 	add	r11,r6,r8<<0x3
80007e78:	2f f8       	sub	r8,-1
80007e7a:	f7 49 fd 88 	st.w	r11[-632],r9
80007e7e:	fb 48 06 b4 	st.w	sp[1716],r8
80007e82:	14 97       	mov	r7,r10
80007e84:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
80007e88:	c0 58       	rjmp	80007e92 <_vfprintf_r+0x125e>
80007e8a:	92 18       	ld.sh	r8,r9[0x2]
80007e8c:	14 97       	mov	r7,r10
80007e8e:	2f c9       	sub	r9,-4
80007e90:	51 09       	stdsp	sp[0x40],r9
80007e92:	5c 78       	castu.h	r8
80007e94:	50 18       	stdsp	sp[0x4],r8
80007e96:	c4 68       	rjmp	80007f22 <_vfprintf_r+0x12ee>
80007e98:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007e9c:	40 3c       	lddsp	r12,sp[0xc]
80007e9e:	58 0c       	cp.w	r12,0
80007ea0:	c1 d0       	breq	80007eda <_vfprintf_r+0x12a6>
80007ea2:	10 36       	cp.w	r6,r8
80007ea4:	c0 64       	brge	80007eb0 <_vfprintf_r+0x127c>
80007ea6:	fa cb f9 44 	sub	r11,sp,-1724
80007eaa:	f6 06 00 36 	add	r6,r11,r6<<0x3
80007eae:	c1 f8       	rjmp	80007eec <_vfprintf_r+0x12b8>
80007eb0:	fa c8 f9 50 	sub	r8,sp,-1712
80007eb4:	1a d8       	st.w	--sp,r8
80007eb6:	fa c8 fa b8 	sub	r8,sp,-1352
80007eba:	0c 9b       	mov	r11,r6
80007ebc:	1a d8       	st.w	--sp,r8
80007ebe:	fa c8 fb b4 	sub	r8,sp,-1100
80007ec2:	04 9a       	mov	r10,r2
80007ec4:	1a d8       	st.w	--sp,r8
80007ec6:	08 9c       	mov	r12,r4
80007ec8:	fa c8 f9 40 	sub	r8,sp,-1728
80007ecc:	fa c9 ff b4 	sub	r9,sp,-76
80007ed0:	fe b0 f5 1a 	rcall	80006904 <get_arg>
80007ed4:	2f dd       	sub	sp,-12
80007ed6:	78 0b       	ld.w	r11,r12[0x0]
80007ed8:	c2 48       	rjmp	80007f20 <_vfprintf_r+0x12ec>
80007eda:	ee ca ff ff 	sub	r10,r7,-1
80007ede:	10 37       	cp.w	r7,r8
80007ee0:	c0 94       	brge	80007ef2 <_vfprintf_r+0x12be>
80007ee2:	fa c9 f9 44 	sub	r9,sp,-1724
80007ee6:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007eea:	14 97       	mov	r7,r10
80007eec:	ec fb fd 88 	ld.w	r11,r6[-632]
80007ef0:	c1 88       	rjmp	80007f20 <_vfprintf_r+0x12ec>
80007ef2:	41 09       	lddsp	r9,sp[0x40]
80007ef4:	59 f8       	cp.w	r8,31
80007ef6:	e0 89 00 11 	brgt	80007f18 <_vfprintf_r+0x12e4>
80007efa:	f2 cb ff fc 	sub	r11,r9,-4
80007efe:	51 0b       	stdsp	sp[0x40],r11
80007f00:	fa c6 f9 44 	sub	r6,sp,-1724
80007f04:	72 0b       	ld.w	r11,r9[0x0]
80007f06:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007f0a:	f3 4b fd 88 	st.w	r9[-632],r11
80007f0e:	2f f8       	sub	r8,-1
80007f10:	14 97       	mov	r7,r10
80007f12:	fb 48 06 b4 	st.w	sp[1716],r8
80007f16:	c0 58       	rjmp	80007f20 <_vfprintf_r+0x12ec>
80007f18:	72 0b       	ld.w	r11,r9[0x0]
80007f1a:	14 97       	mov	r7,r10
80007f1c:	2f c9       	sub	r9,-4
80007f1e:	51 09       	stdsp	sp[0x40],r9
80007f20:	50 1b       	stdsp	sp[0x4],r11
80007f22:	30 0e       	mov	lr,0
80007f24:	30 18       	mov	r8,1
80007f26:	50 0e       	stdsp	sp[0x0],lr
80007f28:	c2 29       	rjmp	8000816c <_vfprintf_r+0x1538>
80007f2a:	50 a7       	stdsp	sp[0x28],r7
80007f2c:	50 80       	stdsp	sp[0x20],r0
80007f2e:	0c 97       	mov	r7,r6
80007f30:	04 94       	mov	r4,r2
80007f32:	06 96       	mov	r6,r3
80007f34:	02 92       	mov	r2,r1
80007f36:	fe cc c0 ae 	sub	r12,pc,-16210
80007f3a:	40 93       	lddsp	r3,sp[0x24]
80007f3c:	10 90       	mov	r0,r8
80007f3e:	40 41       	lddsp	r1,sp[0x10]
80007f40:	50 dc       	stdsp	sp[0x34],r12
80007f42:	ed b5 00 05 	bld	r5,0x5
80007f46:	c5 51       	brne	80007ff0 <_vfprintf_r+0x13bc>
80007f48:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007f4c:	40 3b       	lddsp	r11,sp[0xc]
80007f4e:	58 0b       	cp.w	r11,0
80007f50:	c2 20       	breq	80007f94 <_vfprintf_r+0x1360>
80007f52:	10 36       	cp.w	r6,r8
80007f54:	c0 a4       	brge	80007f68 <_vfprintf_r+0x1334>
80007f56:	fa ca f9 44 	sub	r10,sp,-1724
80007f5a:	f4 06 00 36 	add	r6,r10,r6<<0x3
80007f5e:	ec e8 fd 88 	ld.d	r8,r6[-632]
80007f62:	fa e9 00 00 	st.d	sp[0],r8
80007f66:	cf 28       	rjmp	8000814a <_vfprintf_r+0x1516>
80007f68:	fa c8 f9 50 	sub	r8,sp,-1712
80007f6c:	1a d8       	st.w	--sp,r8
80007f6e:	fa c8 fa b8 	sub	r8,sp,-1352
80007f72:	04 9a       	mov	r10,r2
80007f74:	1a d8       	st.w	--sp,r8
80007f76:	0c 9b       	mov	r11,r6
80007f78:	fa c8 fb b4 	sub	r8,sp,-1100
80007f7c:	08 9c       	mov	r12,r4
80007f7e:	1a d8       	st.w	--sp,r8
80007f80:	fa c8 f9 40 	sub	r8,sp,-1728
80007f84:	fa c9 ff b4 	sub	r9,sp,-76
80007f88:	fe b0 f4 be 	rcall	80006904 <get_arg>
80007f8c:	2f dd       	sub	sp,-12
80007f8e:	f8 ea 00 00 	ld.d	r10,r12[0]
80007f92:	c0 c8       	rjmp	80007faa <_vfprintf_r+0x1376>
80007f94:	ee ca ff ff 	sub	r10,r7,-1
80007f98:	10 37       	cp.w	r7,r8
80007f9a:	c0 b4       	brge	80007fb0 <_vfprintf_r+0x137c>
80007f9c:	fa c9 f9 44 	sub	r9,sp,-1724
80007fa0:	14 97       	mov	r7,r10
80007fa2:	f2 06 00 36 	add	r6,r9,r6<<0x3
80007fa6:	ec ea fd 88 	ld.d	r10,r6[-632]
80007faa:	fa eb 00 00 	st.d	sp[0],r10
80007fae:	cc e8       	rjmp	8000814a <_vfprintf_r+0x1516>
80007fb0:	41 09       	lddsp	r9,sp[0x40]
80007fb2:	59 f8       	cp.w	r8,31
80007fb4:	e0 89 00 16 	brgt	80007fe0 <_vfprintf_r+0x13ac>
80007fb8:	f2 e6 00 00 	ld.d	r6,r9[0]
80007fbc:	f2 cb ff f8 	sub	r11,r9,-8
80007fc0:	fa e7 00 00 	st.d	sp[0],r6
80007fc4:	51 0b       	stdsp	sp[0x40],r11
80007fc6:	fa c6 f9 44 	sub	r6,sp,-1724
80007fca:	ec 08 00 39 	add	r9,r6,r8<<0x3
80007fce:	fa e6 00 00 	ld.d	r6,sp[0]
80007fd2:	f2 e7 fd 88 	st.d	r9[-632],r6
80007fd6:	2f f8       	sub	r8,-1
80007fd8:	14 97       	mov	r7,r10
80007fda:	fb 48 06 b4 	st.w	sp[1716],r8
80007fde:	cb 68       	rjmp	8000814a <_vfprintf_r+0x1516>
80007fe0:	f2 e6 00 00 	ld.d	r6,r9[0]
80007fe4:	2f 89       	sub	r9,-8
80007fe6:	fa e7 00 00 	st.d	sp[0],r6
80007fea:	51 09       	stdsp	sp[0x40],r9
80007fec:	14 97       	mov	r7,r10
80007fee:	ca e8       	rjmp	8000814a <_vfprintf_r+0x1516>
80007ff0:	ed b5 00 04 	bld	r5,0x4
80007ff4:	c1 71       	brne	80008022 <_vfprintf_r+0x13ee>
80007ff6:	fa f8 06 b4 	ld.w	r8,sp[1716]
80007ffa:	40 3e       	lddsp	lr,sp[0xc]
80007ffc:	58 0e       	cp.w	lr,0
80007ffe:	c0 80       	breq	8000800e <_vfprintf_r+0x13da>
80008000:	10 36       	cp.w	r6,r8
80008002:	c6 94       	brge	800080d4 <_vfprintf_r+0x14a0>
80008004:	fa cc f9 44 	sub	r12,sp,-1724
80008008:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000800c:	c8 28       	rjmp	80008110 <_vfprintf_r+0x14dc>
8000800e:	ee ca ff ff 	sub	r10,r7,-1
80008012:	10 37       	cp.w	r7,r8
80008014:	e0 84 00 81 	brge	80008116 <_vfprintf_r+0x14e2>
80008018:	fa cb f9 44 	sub	r11,sp,-1724
8000801c:	f6 06 00 36 	add	r6,r11,r6<<0x3
80008020:	c7 78       	rjmp	8000810e <_vfprintf_r+0x14da>
80008022:	ed b5 00 06 	bld	r5,0x6
80008026:	c4 b1       	brne	800080bc <_vfprintf_r+0x1488>
80008028:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000802c:	40 3c       	lddsp	r12,sp[0xc]
8000802e:	58 0c       	cp.w	r12,0
80008030:	c1 d0       	breq	8000806a <_vfprintf_r+0x1436>
80008032:	10 36       	cp.w	r6,r8
80008034:	c0 64       	brge	80008040 <_vfprintf_r+0x140c>
80008036:	fa cb f9 44 	sub	r11,sp,-1724
8000803a:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000803e:	c1 f8       	rjmp	8000807c <_vfprintf_r+0x1448>
80008040:	fa c8 f9 50 	sub	r8,sp,-1712
80008044:	1a d8       	st.w	--sp,r8
80008046:	fa c8 fa b8 	sub	r8,sp,-1352
8000804a:	1a d8       	st.w	--sp,r8
8000804c:	fa c8 fb b4 	sub	r8,sp,-1100
80008050:	1a d8       	st.w	--sp,r8
80008052:	fa c8 f9 40 	sub	r8,sp,-1728
80008056:	fa c9 ff b4 	sub	r9,sp,-76
8000805a:	04 9a       	mov	r10,r2
8000805c:	0c 9b       	mov	r11,r6
8000805e:	08 9c       	mov	r12,r4
80008060:	fe b0 f4 52 	rcall	80006904 <get_arg>
80008064:	2f dd       	sub	sp,-12
80008066:	98 18       	ld.sh	r8,r12[0x2]
80008068:	c2 78       	rjmp	800080b6 <_vfprintf_r+0x1482>
8000806a:	ee ca ff ff 	sub	r10,r7,-1
8000806e:	10 37       	cp.w	r7,r8
80008070:	c0 a4       	brge	80008084 <_vfprintf_r+0x1450>
80008072:	fa c9 f9 44 	sub	r9,sp,-1724
80008076:	14 97       	mov	r7,r10
80008078:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000807c:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
80008080:	c1 b8       	rjmp	800080b6 <_vfprintf_r+0x1482>
80008082:	d7 03       	nop
80008084:	41 09       	lddsp	r9,sp[0x40]
80008086:	59 f8       	cp.w	r8,31
80008088:	e0 89 00 13 	brgt	800080ae <_vfprintf_r+0x147a>
8000808c:	f2 cb ff fc 	sub	r11,r9,-4
80008090:	51 0b       	stdsp	sp[0x40],r11
80008092:	72 09       	ld.w	r9,r9[0x0]
80008094:	fa c6 f9 44 	sub	r6,sp,-1724
80008098:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000809c:	2f f8       	sub	r8,-1
8000809e:	f7 49 fd 88 	st.w	r11[-632],r9
800080a2:	fb 48 06 b4 	st.w	sp[1716],r8
800080a6:	14 97       	mov	r7,r10
800080a8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
800080ac:	c0 58       	rjmp	800080b6 <_vfprintf_r+0x1482>
800080ae:	92 18       	ld.sh	r8,r9[0x2]
800080b0:	14 97       	mov	r7,r10
800080b2:	2f c9       	sub	r9,-4
800080b4:	51 09       	stdsp	sp[0x40],r9
800080b6:	5c 78       	castu.h	r8
800080b8:	50 18       	stdsp	sp[0x4],r8
800080ba:	c4 68       	rjmp	80008146 <_vfprintf_r+0x1512>
800080bc:	fa f8 06 b4 	ld.w	r8,sp[1716]
800080c0:	40 3c       	lddsp	r12,sp[0xc]
800080c2:	58 0c       	cp.w	r12,0
800080c4:	c1 d0       	breq	800080fe <_vfprintf_r+0x14ca>
800080c6:	10 36       	cp.w	r6,r8
800080c8:	c0 64       	brge	800080d4 <_vfprintf_r+0x14a0>
800080ca:	fa cb f9 44 	sub	r11,sp,-1724
800080ce:	f6 06 00 36 	add	r6,r11,r6<<0x3
800080d2:	c1 f8       	rjmp	80008110 <_vfprintf_r+0x14dc>
800080d4:	fa c8 f9 50 	sub	r8,sp,-1712
800080d8:	1a d8       	st.w	--sp,r8
800080da:	fa c8 fa b8 	sub	r8,sp,-1352
800080de:	0c 9b       	mov	r11,r6
800080e0:	1a d8       	st.w	--sp,r8
800080e2:	fa c8 fb b4 	sub	r8,sp,-1100
800080e6:	04 9a       	mov	r10,r2
800080e8:	1a d8       	st.w	--sp,r8
800080ea:	08 9c       	mov	r12,r4
800080ec:	fa c8 f9 40 	sub	r8,sp,-1728
800080f0:	fa c9 ff b4 	sub	r9,sp,-76
800080f4:	fe b0 f4 08 	rcall	80006904 <get_arg>
800080f8:	2f dd       	sub	sp,-12
800080fa:	78 0b       	ld.w	r11,r12[0x0]
800080fc:	c2 48       	rjmp	80008144 <_vfprintf_r+0x1510>
800080fe:	ee ca ff ff 	sub	r10,r7,-1
80008102:	10 37       	cp.w	r7,r8
80008104:	c0 94       	brge	80008116 <_vfprintf_r+0x14e2>
80008106:	fa c9 f9 44 	sub	r9,sp,-1724
8000810a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000810e:	14 97       	mov	r7,r10
80008110:	ec fb fd 88 	ld.w	r11,r6[-632]
80008114:	c1 88       	rjmp	80008144 <_vfprintf_r+0x1510>
80008116:	41 09       	lddsp	r9,sp[0x40]
80008118:	59 f8       	cp.w	r8,31
8000811a:	e0 89 00 11 	brgt	8000813c <_vfprintf_r+0x1508>
8000811e:	f2 cb ff fc 	sub	r11,r9,-4
80008122:	51 0b       	stdsp	sp[0x40],r11
80008124:	fa c6 f9 44 	sub	r6,sp,-1724
80008128:	72 0b       	ld.w	r11,r9[0x0]
8000812a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000812e:	f3 4b fd 88 	st.w	r9[-632],r11
80008132:	2f f8       	sub	r8,-1
80008134:	14 97       	mov	r7,r10
80008136:	fb 48 06 b4 	st.w	sp[1716],r8
8000813a:	c0 58       	rjmp	80008144 <_vfprintf_r+0x1510>
8000813c:	72 0b       	ld.w	r11,r9[0x0]
8000813e:	14 97       	mov	r7,r10
80008140:	2f c9       	sub	r9,-4
80008142:	51 09       	stdsp	sp[0x40],r9
80008144:	50 1b       	stdsp	sp[0x4],r11
80008146:	30 0e       	mov	lr,0
80008148:	50 0e       	stdsp	sp[0x0],lr
8000814a:	40 08       	lddsp	r8,sp[0x0]
8000814c:	40 1c       	lddsp	r12,sp[0x4]
8000814e:	18 48       	or	r8,r12
80008150:	5f 19       	srne	r9
80008152:	0a 98       	mov	r8,r5
80008154:	eb e9 00 09 	and	r9,r5,r9
80008158:	a1 b8       	sbr	r8,0x1
8000815a:	58 09       	cp.w	r9,0
8000815c:	c0 70       	breq	8000816a <_vfprintf_r+0x1536>
8000815e:	10 95       	mov	r5,r8
80008160:	fb 60 06 b9 	st.b	sp[1721],r0
80008164:	33 08       	mov	r8,48
80008166:	fb 68 06 b8 	st.b	sp[1720],r8
8000816a:	30 28       	mov	r8,2
8000816c:	30 09       	mov	r9,0
8000816e:	fb 69 06 bb 	st.b	sp[1723],r9
80008172:	0a 99       	mov	r9,r5
80008174:	a7 d9       	cbr	r9,0x7
80008176:	40 2b       	lddsp	r11,sp[0x8]
80008178:	40 16       	lddsp	r6,sp[0x4]
8000817a:	58 0b       	cp.w	r11,0
8000817c:	5f 1a       	srne	r10
8000817e:	f2 05 17 40 	movge	r5,r9
80008182:	fa c2 f9 78 	sub	r2,sp,-1672
80008186:	40 09       	lddsp	r9,sp[0x0]
80008188:	0c 49       	or	r9,r6
8000818a:	5f 19       	srne	r9
8000818c:	f5 e9 10 09 	or	r9,r10,r9
80008190:	c5 c0       	breq	80008248 <_vfprintf_r+0x1614>
80008192:	30 19       	mov	r9,1
80008194:	f2 08 18 00 	cp.b	r8,r9
80008198:	c0 60       	breq	800081a4 <_vfprintf_r+0x1570>
8000819a:	30 29       	mov	r9,2
8000819c:	f2 08 18 00 	cp.b	r8,r9
800081a0:	c0 41       	brne	800081a8 <_vfprintf_r+0x1574>
800081a2:	c3 c8       	rjmp	8000821a <_vfprintf_r+0x15e6>
800081a4:	04 96       	mov	r6,r2
800081a6:	c3 08       	rjmp	80008206 <_vfprintf_r+0x15d2>
800081a8:	04 96       	mov	r6,r2
800081aa:	fa e8 00 00 	ld.d	r8,sp[0]
800081ae:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
800081b2:	2d 0a       	sub	r10,-48
800081b4:	0c fa       	st.b	--r6,r10
800081b6:	f0 0b 16 03 	lsr	r11,r8,0x3
800081ba:	f2 0c 16 03 	lsr	r12,r9,0x3
800081be:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
800081c2:	18 99       	mov	r9,r12
800081c4:	16 98       	mov	r8,r11
800081c6:	58 08       	cp.w	r8,0
800081c8:	5c 29       	cpc	r9
800081ca:	cf 21       	brne	800081ae <_vfprintf_r+0x157a>
800081cc:	fa e9 00 00 	st.d	sp[0],r8
800081d0:	ed b5 00 00 	bld	r5,0x0
800081d4:	c4 51       	brne	8000825e <_vfprintf_r+0x162a>
800081d6:	33 09       	mov	r9,48
800081d8:	f2 0a 18 00 	cp.b	r10,r9
800081dc:	c4 10       	breq	8000825e <_vfprintf_r+0x162a>
800081de:	0c f9       	st.b	--r6,r9
800081e0:	c3 f8       	rjmp	8000825e <_vfprintf_r+0x162a>
800081e2:	fa ea 00 00 	ld.d	r10,sp[0]
800081e6:	30 a8       	mov	r8,10
800081e8:	30 09       	mov	r9,0
800081ea:	e0 a0 19 92 	rcall	8000b50e <__avr32_umod64>
800081ee:	30 a8       	mov	r8,10
800081f0:	2d 0a       	sub	r10,-48
800081f2:	30 09       	mov	r9,0
800081f4:	ac 8a       	st.b	r6[0x0],r10
800081f6:	fa ea 00 00 	ld.d	r10,sp[0]
800081fa:	fe b0 f1 93 	rcall	80006520 <__avr32_udiv64>
800081fe:	16 99       	mov	r9,r11
80008200:	14 98       	mov	r8,r10
80008202:	fa e9 00 00 	st.d	sp[0],r8
80008206:	20 16       	sub	r6,1
80008208:	fa ea 00 00 	ld.d	r10,sp[0]
8000820c:	58 9a       	cp.w	r10,9
8000820e:	5c 2b       	cpc	r11
80008210:	fe 9b ff e9 	brhi	800081e2 <_vfprintf_r+0x15ae>
80008214:	1b f8       	ld.ub	r8,sp[0x7]
80008216:	2d 08       	sub	r8,-48
80008218:	c2 08       	rjmp	80008258 <_vfprintf_r+0x1624>
8000821a:	04 96       	mov	r6,r2
8000821c:	fa e8 00 00 	ld.d	r8,sp[0]
80008220:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
80008224:	40 de       	lddsp	lr,sp[0x34]
80008226:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000822a:	0c fa       	st.b	--r6,r10
8000822c:	f2 0b 16 04 	lsr	r11,r9,0x4
80008230:	f0 0a 16 04 	lsr	r10,r8,0x4
80008234:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
80008238:	16 99       	mov	r9,r11
8000823a:	14 98       	mov	r8,r10
8000823c:	58 08       	cp.w	r8,0
8000823e:	5c 29       	cpc	r9
80008240:	cf 01       	brne	80008220 <_vfprintf_r+0x15ec>
80008242:	fa e9 00 00 	st.d	sp[0],r8
80008246:	c0 c8       	rjmp	8000825e <_vfprintf_r+0x162a>
80008248:	58 08       	cp.w	r8,0
8000824a:	c0 91       	brne	8000825c <_vfprintf_r+0x1628>
8000824c:	ed b5 00 00 	bld	r5,0x0
80008250:	c0 61       	brne	8000825c <_vfprintf_r+0x1628>
80008252:	fa c6 f9 79 	sub	r6,sp,-1671
80008256:	33 08       	mov	r8,48
80008258:	ac 88       	st.b	r6[0x0],r8
8000825a:	c0 28       	rjmp	8000825e <_vfprintf_r+0x162a>
8000825c:	04 96       	mov	r6,r2
8000825e:	0c 12       	sub	r2,r6
80008260:	c1 c8       	rjmp	80008298 <_vfprintf_r+0x1664>
80008262:	50 a7       	stdsp	sp[0x28],r7
80008264:	50 80       	stdsp	sp[0x20],r0
80008266:	40 93       	lddsp	r3,sp[0x24]
80008268:	0c 97       	mov	r7,r6
8000826a:	10 90       	mov	r0,r8
8000826c:	04 94       	mov	r4,r2
8000826e:	40 41       	lddsp	r1,sp[0x10]
80008270:	58 08       	cp.w	r8,0
80008272:	e0 80 04 4f 	breq	80008b10 <_vfprintf_r+0x1edc>
80008276:	fb 68 06 60 	st.b	sp[1632],r8
8000827a:	30 0c       	mov	r12,0
8000827c:	30 08       	mov	r8,0
8000827e:	30 12       	mov	r2,1
80008280:	fb 68 06 bb 	st.b	sp[1723],r8
80008284:	50 2c       	stdsp	sp[0x8],r12
80008286:	fa c6 f9 a0 	sub	r6,sp,-1632
8000828a:	c0 78       	rjmp	80008298 <_vfprintf_r+0x1664>
8000828c:	30 0b       	mov	r11,0
8000828e:	50 2b       	stdsp	sp[0x8],r11
80008290:	c0 48       	rjmp	80008298 <_vfprintf_r+0x1664>
80008292:	40 22       	lddsp	r2,sp[0x8]
80008294:	30 0a       	mov	r10,0
80008296:	50 2a       	stdsp	sp[0x8],r10
80008298:	40 29       	lddsp	r9,sp[0x8]
8000829a:	e4 09 0c 49 	max	r9,r2,r9
8000829e:	fb 38 06 bb 	ld.ub	r8,sp[1723]
800082a2:	50 39       	stdsp	sp[0xc],r9
800082a4:	0a 9e       	mov	lr,r5
800082a6:	30 09       	mov	r9,0
800082a8:	e2 1e 00 02 	andl	lr,0x2,COH
800082ac:	f2 08 18 00 	cp.b	r8,r9
800082b0:	fb f8 10 03 	ld.wne	r8,sp[0xc]
800082b4:	f7 b8 01 ff 	subne	r8,-1
800082b8:	fb f8 1a 03 	st.wne	sp[0xc],r8
800082bc:	0a 9b       	mov	r11,r5
800082be:	58 0e       	cp.w	lr,0
800082c0:	fb fc 10 03 	ld.wne	r12,sp[0xc]
800082c4:	f7 bc 01 fe 	subne	r12,-2
800082c8:	fb fc 1a 03 	st.wne	sp[0xc],r12
800082cc:	e2 1b 00 84 	andl	r11,0x84,COH
800082d0:	50 fe       	stdsp	sp[0x3c],lr
800082d2:	50 9b       	stdsp	sp[0x24],r11
800082d4:	c4 71       	brne	80008362 <_vfprintf_r+0x172e>
800082d6:	40 8a       	lddsp	r10,sp[0x20]
800082d8:	40 39       	lddsp	r9,sp[0xc]
800082da:	12 1a       	sub	r10,r9
800082dc:	50 4a       	stdsp	sp[0x10],r10
800082de:	58 0a       	cp.w	r10,0
800082e0:	e0 89 00 20 	brgt	80008320 <_vfprintf_r+0x16ec>
800082e4:	c3 f8       	rjmp	80008362 <_vfprintf_r+0x172e>
800082e6:	2f 09       	sub	r9,-16
800082e8:	2f f8       	sub	r8,-1
800082ea:	fe ce c4 4a 	sub	lr,pc,-15286
800082ee:	31 0c       	mov	r12,16
800082f0:	fb 49 06 90 	st.w	sp[1680],r9
800082f4:	87 0e       	st.w	r3[0x0],lr
800082f6:	87 1c       	st.w	r3[0x4],r12
800082f8:	fb 48 06 8c 	st.w	sp[1676],r8
800082fc:	58 78       	cp.w	r8,7
800082fe:	e0 89 00 04 	brgt	80008306 <_vfprintf_r+0x16d2>
80008302:	2f 83       	sub	r3,-8
80008304:	c0 b8       	rjmp	8000831a <_vfprintf_r+0x16e6>
80008306:	fa ca f9 78 	sub	r10,sp,-1672
8000830a:	02 9b       	mov	r11,r1
8000830c:	08 9c       	mov	r12,r4
8000830e:	fe b0 f4 85 	rcall	80006c18 <__sprint_r>
80008312:	e0 81 04 10 	brne	80008b32 <_vfprintf_r+0x1efe>
80008316:	fa c3 f9 e0 	sub	r3,sp,-1568
8000831a:	40 4b       	lddsp	r11,sp[0x10]
8000831c:	21 0b       	sub	r11,16
8000831e:	50 4b       	stdsp	sp[0x10],r11
80008320:	fa f9 06 90 	ld.w	r9,sp[1680]
80008324:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008328:	fe ca c4 88 	sub	r10,pc,-15224
8000832c:	40 4e       	lddsp	lr,sp[0x10]
8000832e:	59 0e       	cp.w	lr,16
80008330:	fe 99 ff db 	brgt	800082e6 <_vfprintf_r+0x16b2>
80008334:	1c 09       	add	r9,lr
80008336:	2f f8       	sub	r8,-1
80008338:	87 0a       	st.w	r3[0x0],r10
8000833a:	fb 49 06 90 	st.w	sp[1680],r9
8000833e:	87 1e       	st.w	r3[0x4],lr
80008340:	fb 48 06 8c 	st.w	sp[1676],r8
80008344:	58 78       	cp.w	r8,7
80008346:	e0 89 00 04 	brgt	8000834e <_vfprintf_r+0x171a>
8000834a:	2f 83       	sub	r3,-8
8000834c:	c0 b8       	rjmp	80008362 <_vfprintf_r+0x172e>
8000834e:	fa ca f9 78 	sub	r10,sp,-1672
80008352:	02 9b       	mov	r11,r1
80008354:	08 9c       	mov	r12,r4
80008356:	fe b0 f4 61 	rcall	80006c18 <__sprint_r>
8000835a:	e0 81 03 ec 	brne	80008b32 <_vfprintf_r+0x1efe>
8000835e:	fa c3 f9 e0 	sub	r3,sp,-1568
80008362:	30 09       	mov	r9,0
80008364:	fb 38 06 bb 	ld.ub	r8,sp[1723]
80008368:	f2 08 18 00 	cp.b	r8,r9
8000836c:	c1 f0       	breq	800083aa <_vfprintf_r+0x1776>
8000836e:	fa f8 06 90 	ld.w	r8,sp[1680]
80008372:	fa c9 f9 45 	sub	r9,sp,-1723
80008376:	2f f8       	sub	r8,-1
80008378:	87 09       	st.w	r3[0x0],r9
8000837a:	fb 48 06 90 	st.w	sp[1680],r8
8000837e:	30 19       	mov	r9,1
80008380:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008384:	87 19       	st.w	r3[0x4],r9
80008386:	2f f8       	sub	r8,-1
80008388:	fb 48 06 8c 	st.w	sp[1676],r8
8000838c:	58 78       	cp.w	r8,7
8000838e:	e0 89 00 04 	brgt	80008396 <_vfprintf_r+0x1762>
80008392:	2f 83       	sub	r3,-8
80008394:	c0 b8       	rjmp	800083aa <_vfprintf_r+0x1776>
80008396:	fa ca f9 78 	sub	r10,sp,-1672
8000839a:	02 9b       	mov	r11,r1
8000839c:	08 9c       	mov	r12,r4
8000839e:	fe b0 f4 3d 	rcall	80006c18 <__sprint_r>
800083a2:	e0 81 03 c8 	brne	80008b32 <_vfprintf_r+0x1efe>
800083a6:	fa c3 f9 e0 	sub	r3,sp,-1568
800083aa:	40 fc       	lddsp	r12,sp[0x3c]
800083ac:	58 0c       	cp.w	r12,0
800083ae:	c1 f0       	breq	800083ec <_vfprintf_r+0x17b8>
800083b0:	fa f8 06 90 	ld.w	r8,sp[1680]
800083b4:	fa c9 f9 48 	sub	r9,sp,-1720
800083b8:	2f e8       	sub	r8,-2
800083ba:	87 09       	st.w	r3[0x0],r9
800083bc:	fb 48 06 90 	st.w	sp[1680],r8
800083c0:	30 29       	mov	r9,2
800083c2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800083c6:	87 19       	st.w	r3[0x4],r9
800083c8:	2f f8       	sub	r8,-1
800083ca:	fb 48 06 8c 	st.w	sp[1676],r8
800083ce:	58 78       	cp.w	r8,7
800083d0:	e0 89 00 04 	brgt	800083d8 <_vfprintf_r+0x17a4>
800083d4:	2f 83       	sub	r3,-8
800083d6:	c0 b8       	rjmp	800083ec <_vfprintf_r+0x17b8>
800083d8:	fa ca f9 78 	sub	r10,sp,-1672
800083dc:	02 9b       	mov	r11,r1
800083de:	08 9c       	mov	r12,r4
800083e0:	fe b0 f4 1c 	rcall	80006c18 <__sprint_r>
800083e4:	e0 81 03 a7 	brne	80008b32 <_vfprintf_r+0x1efe>
800083e8:	fa c3 f9 e0 	sub	r3,sp,-1568
800083ec:	40 9b       	lddsp	r11,sp[0x24]
800083ee:	e0 4b 00 80 	cp.w	r11,128
800083f2:	c4 71       	brne	80008480 <_vfprintf_r+0x184c>
800083f4:	40 8a       	lddsp	r10,sp[0x20]
800083f6:	40 39       	lddsp	r9,sp[0xc]
800083f8:	12 1a       	sub	r10,r9
800083fa:	50 4a       	stdsp	sp[0x10],r10
800083fc:	58 0a       	cp.w	r10,0
800083fe:	e0 89 00 20 	brgt	8000843e <_vfprintf_r+0x180a>
80008402:	c3 f8       	rjmp	80008480 <_vfprintf_r+0x184c>
80008404:	2f 09       	sub	r9,-16
80008406:	2f f8       	sub	r8,-1
80008408:	fe ce c5 58 	sub	lr,pc,-15016
8000840c:	31 0c       	mov	r12,16
8000840e:	fb 49 06 90 	st.w	sp[1680],r9
80008412:	87 0e       	st.w	r3[0x0],lr
80008414:	87 1c       	st.w	r3[0x4],r12
80008416:	fb 48 06 8c 	st.w	sp[1676],r8
8000841a:	58 78       	cp.w	r8,7
8000841c:	e0 89 00 04 	brgt	80008424 <_vfprintf_r+0x17f0>
80008420:	2f 83       	sub	r3,-8
80008422:	c0 b8       	rjmp	80008438 <_vfprintf_r+0x1804>
80008424:	fa ca f9 78 	sub	r10,sp,-1672
80008428:	02 9b       	mov	r11,r1
8000842a:	08 9c       	mov	r12,r4
8000842c:	fe b0 f3 f6 	rcall	80006c18 <__sprint_r>
80008430:	e0 81 03 81 	brne	80008b32 <_vfprintf_r+0x1efe>
80008434:	fa c3 f9 e0 	sub	r3,sp,-1568
80008438:	40 4b       	lddsp	r11,sp[0x10]
8000843a:	21 0b       	sub	r11,16
8000843c:	50 4b       	stdsp	sp[0x10],r11
8000843e:	fa f9 06 90 	ld.w	r9,sp[1680]
80008442:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008446:	fe ca c5 96 	sub	r10,pc,-14954
8000844a:	40 4e       	lddsp	lr,sp[0x10]
8000844c:	59 0e       	cp.w	lr,16
8000844e:	fe 99 ff db 	brgt	80008404 <_vfprintf_r+0x17d0>
80008452:	1c 09       	add	r9,lr
80008454:	2f f8       	sub	r8,-1
80008456:	87 0a       	st.w	r3[0x0],r10
80008458:	fb 49 06 90 	st.w	sp[1680],r9
8000845c:	87 1e       	st.w	r3[0x4],lr
8000845e:	fb 48 06 8c 	st.w	sp[1676],r8
80008462:	58 78       	cp.w	r8,7
80008464:	e0 89 00 04 	brgt	8000846c <_vfprintf_r+0x1838>
80008468:	2f 83       	sub	r3,-8
8000846a:	c0 b8       	rjmp	80008480 <_vfprintf_r+0x184c>
8000846c:	fa ca f9 78 	sub	r10,sp,-1672
80008470:	02 9b       	mov	r11,r1
80008472:	08 9c       	mov	r12,r4
80008474:	fe b0 f3 d2 	rcall	80006c18 <__sprint_r>
80008478:	e0 81 03 5d 	brne	80008b32 <_vfprintf_r+0x1efe>
8000847c:	fa c3 f9 e0 	sub	r3,sp,-1568
80008480:	40 2c       	lddsp	r12,sp[0x8]
80008482:	04 1c       	sub	r12,r2
80008484:	50 2c       	stdsp	sp[0x8],r12
80008486:	58 0c       	cp.w	r12,0
80008488:	e0 89 00 20 	brgt	800084c8 <_vfprintf_r+0x1894>
8000848c:	c3 f8       	rjmp	8000850a <_vfprintf_r+0x18d6>
8000848e:	2f 09       	sub	r9,-16
80008490:	2f f8       	sub	r8,-1
80008492:	fe cb c5 e2 	sub	r11,pc,-14878
80008496:	31 0a       	mov	r10,16
80008498:	fb 49 06 90 	st.w	sp[1680],r9
8000849c:	87 0b       	st.w	r3[0x0],r11
8000849e:	87 1a       	st.w	r3[0x4],r10
800084a0:	fb 48 06 8c 	st.w	sp[1676],r8
800084a4:	58 78       	cp.w	r8,7
800084a6:	e0 89 00 04 	brgt	800084ae <_vfprintf_r+0x187a>
800084aa:	2f 83       	sub	r3,-8
800084ac:	c0 b8       	rjmp	800084c2 <_vfprintf_r+0x188e>
800084ae:	fa ca f9 78 	sub	r10,sp,-1672
800084b2:	02 9b       	mov	r11,r1
800084b4:	08 9c       	mov	r12,r4
800084b6:	fe b0 f3 b1 	rcall	80006c18 <__sprint_r>
800084ba:	e0 81 03 3c 	brne	80008b32 <_vfprintf_r+0x1efe>
800084be:	fa c3 f9 e0 	sub	r3,sp,-1568
800084c2:	40 29       	lddsp	r9,sp[0x8]
800084c4:	21 09       	sub	r9,16
800084c6:	50 29       	stdsp	sp[0x8],r9
800084c8:	fa f9 06 90 	ld.w	r9,sp[1680]
800084cc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800084d0:	fe ca c6 20 	sub	r10,pc,-14816
800084d4:	40 2e       	lddsp	lr,sp[0x8]
800084d6:	59 0e       	cp.w	lr,16
800084d8:	fe 99 ff db 	brgt	8000848e <_vfprintf_r+0x185a>
800084dc:	1c 09       	add	r9,lr
800084de:	2f f8       	sub	r8,-1
800084e0:	87 0a       	st.w	r3[0x0],r10
800084e2:	fb 49 06 90 	st.w	sp[1680],r9
800084e6:	87 1e       	st.w	r3[0x4],lr
800084e8:	fb 48 06 8c 	st.w	sp[1676],r8
800084ec:	58 78       	cp.w	r8,7
800084ee:	e0 89 00 04 	brgt	800084f6 <_vfprintf_r+0x18c2>
800084f2:	2f 83       	sub	r3,-8
800084f4:	c0 b8       	rjmp	8000850a <_vfprintf_r+0x18d6>
800084f6:	fa ca f9 78 	sub	r10,sp,-1672
800084fa:	02 9b       	mov	r11,r1
800084fc:	08 9c       	mov	r12,r4
800084fe:	fe b0 f3 8d 	rcall	80006c18 <__sprint_r>
80008502:	e0 81 03 18 	brne	80008b32 <_vfprintf_r+0x1efe>
80008506:	fa c3 f9 e0 	sub	r3,sp,-1568
8000850a:	ed b5 00 08 	bld	r5,0x8
8000850e:	c0 b0       	breq	80008524 <_vfprintf_r+0x18f0>
80008510:	fa f8 06 90 	ld.w	r8,sp[1680]
80008514:	87 12       	st.w	r3[0x4],r2
80008516:	87 06       	st.w	r3[0x0],r6
80008518:	f0 02 00 02 	add	r2,r8,r2
8000851c:	fb 42 06 90 	st.w	sp[1680],r2
80008520:	e0 8f 01 d4 	bral	800088c8 <_vfprintf_r+0x1c94>
80008524:	e0 40 00 65 	cp.w	r0,101
80008528:	e0 8a 01 d6 	brle	800088d4 <_vfprintf_r+0x1ca0>
8000852c:	30 08       	mov	r8,0
8000852e:	30 09       	mov	r9,0
80008530:	40 5b       	lddsp	r11,sp[0x14]
80008532:	40 7a       	lddsp	r10,sp[0x1c]
80008534:	e0 a0 17 72 	rcall	8000b418 <__avr32_f64_cmp_eq>
80008538:	c7 90       	breq	8000862a <_vfprintf_r+0x19f6>
8000853a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000853e:	fe c9 c6 a2 	sub	r9,pc,-14686
80008542:	2f f8       	sub	r8,-1
80008544:	87 09       	st.w	r3[0x0],r9
80008546:	fb 48 06 90 	st.w	sp[1680],r8
8000854a:	30 19       	mov	r9,1
8000854c:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008550:	87 19       	st.w	r3[0x4],r9
80008552:	2f f8       	sub	r8,-1
80008554:	fb 48 06 8c 	st.w	sp[1676],r8
80008558:	58 78       	cp.w	r8,7
8000855a:	e0 89 00 05 	brgt	80008564 <_vfprintf_r+0x1930>
8000855e:	2f 83       	sub	r3,-8
80008560:	c0 c8       	rjmp	80008578 <_vfprintf_r+0x1944>
80008562:	d7 03       	nop
80008564:	fa ca f9 78 	sub	r10,sp,-1672
80008568:	02 9b       	mov	r11,r1
8000856a:	08 9c       	mov	r12,r4
8000856c:	fe b0 f3 56 	rcall	80006c18 <__sprint_r>
80008570:	e0 81 02 e1 	brne	80008b32 <_vfprintf_r+0x1efe>
80008574:	fa c3 f9 e0 	sub	r3,sp,-1568
80008578:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000857c:	40 6c       	lddsp	r12,sp[0x18]
8000857e:	18 38       	cp.w	r8,r12
80008580:	c0 55       	brlt	8000858a <_vfprintf_r+0x1956>
80008582:	ed b5 00 00 	bld	r5,0x0
80008586:	e0 81 02 6b 	brne	80008a5c <_vfprintf_r+0x1e28>
8000858a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000858e:	2f f8       	sub	r8,-1
80008590:	40 cb       	lddsp	r11,sp[0x30]
80008592:	fb 48 06 90 	st.w	sp[1680],r8
80008596:	30 19       	mov	r9,1
80008598:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000859c:	87 0b       	st.w	r3[0x0],r11
8000859e:	2f f8       	sub	r8,-1
800085a0:	87 19       	st.w	r3[0x4],r9
800085a2:	fb 48 06 8c 	st.w	sp[1676],r8
800085a6:	58 78       	cp.w	r8,7
800085a8:	e0 89 00 04 	brgt	800085b0 <_vfprintf_r+0x197c>
800085ac:	2f 83       	sub	r3,-8
800085ae:	c0 b8       	rjmp	800085c4 <_vfprintf_r+0x1990>
800085b0:	fa ca f9 78 	sub	r10,sp,-1672
800085b4:	02 9b       	mov	r11,r1
800085b6:	08 9c       	mov	r12,r4
800085b8:	fe b0 f3 30 	rcall	80006c18 <__sprint_r>
800085bc:	e0 81 02 bb 	brne	80008b32 <_vfprintf_r+0x1efe>
800085c0:	fa c3 f9 e0 	sub	r3,sp,-1568
800085c4:	40 66       	lddsp	r6,sp[0x18]
800085c6:	20 16       	sub	r6,1
800085c8:	58 06       	cp.w	r6,0
800085ca:	e0 89 00 1d 	brgt	80008604 <_vfprintf_r+0x19d0>
800085ce:	e0 8f 02 47 	bral	80008a5c <_vfprintf_r+0x1e28>
800085d2:	2f 09       	sub	r9,-16
800085d4:	2f f8       	sub	r8,-1
800085d6:	fb 49 06 90 	st.w	sp[1680],r9
800085da:	87 02       	st.w	r3[0x0],r2
800085dc:	87 10       	st.w	r3[0x4],r0
800085de:	fb 48 06 8c 	st.w	sp[1676],r8
800085e2:	58 78       	cp.w	r8,7
800085e4:	e0 89 00 04 	brgt	800085ec <_vfprintf_r+0x19b8>
800085e8:	2f 83       	sub	r3,-8
800085ea:	c0 b8       	rjmp	80008600 <_vfprintf_r+0x19cc>
800085ec:	fa ca f9 78 	sub	r10,sp,-1672
800085f0:	02 9b       	mov	r11,r1
800085f2:	08 9c       	mov	r12,r4
800085f4:	fe b0 f3 12 	rcall	80006c18 <__sprint_r>
800085f8:	e0 81 02 9d 	brne	80008b32 <_vfprintf_r+0x1efe>
800085fc:	fa c3 f9 e0 	sub	r3,sp,-1568
80008600:	21 06       	sub	r6,16
80008602:	c0 48       	rjmp	8000860a <_vfprintf_r+0x19d6>
80008604:	fe c2 c7 54 	sub	r2,pc,-14508
80008608:	31 00       	mov	r0,16
8000860a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000860e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008612:	fe ca c7 62 	sub	r10,pc,-14494
80008616:	59 06       	cp.w	r6,16
80008618:	fe 99 ff dd 	brgt	800085d2 <_vfprintf_r+0x199e>
8000861c:	0c 09       	add	r9,r6
8000861e:	87 0a       	st.w	r3[0x0],r10
80008620:	fb 49 06 90 	st.w	sp[1680],r9
80008624:	2f f8       	sub	r8,-1
80008626:	87 16       	st.w	r3[0x4],r6
80008628:	c5 39       	rjmp	800088ce <_vfprintf_r+0x1c9a>
8000862a:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000862e:	58 0a       	cp.w	r10,0
80008630:	e0 89 00 92 	brgt	80008754 <_vfprintf_r+0x1b20>
80008634:	fa f8 06 90 	ld.w	r8,sp[1680]
80008638:	fe c9 c7 9c 	sub	r9,pc,-14436
8000863c:	2f f8       	sub	r8,-1
8000863e:	87 09       	st.w	r3[0x0],r9
80008640:	fb 48 06 90 	st.w	sp[1680],r8
80008644:	30 19       	mov	r9,1
80008646:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000864a:	87 19       	st.w	r3[0x4],r9
8000864c:	2f f8       	sub	r8,-1
8000864e:	fb 48 06 8c 	st.w	sp[1676],r8
80008652:	58 78       	cp.w	r8,7
80008654:	e0 89 00 04 	brgt	8000865c <_vfprintf_r+0x1a28>
80008658:	2f 83       	sub	r3,-8
8000865a:	c0 b8       	rjmp	80008670 <_vfprintf_r+0x1a3c>
8000865c:	fa ca f9 78 	sub	r10,sp,-1672
80008660:	02 9b       	mov	r11,r1
80008662:	08 9c       	mov	r12,r4
80008664:	fe b0 f2 da 	rcall	80006c18 <__sprint_r>
80008668:	e0 81 02 65 	brne	80008b32 <_vfprintf_r+0x1efe>
8000866c:	fa c3 f9 e0 	sub	r3,sp,-1568
80008670:	fa f8 06 ac 	ld.w	r8,sp[1708]
80008674:	58 08       	cp.w	r8,0
80008676:	c0 81       	brne	80008686 <_vfprintf_r+0x1a52>
80008678:	40 6a       	lddsp	r10,sp[0x18]
8000867a:	58 0a       	cp.w	r10,0
8000867c:	c0 51       	brne	80008686 <_vfprintf_r+0x1a52>
8000867e:	ed b5 00 00 	bld	r5,0x0
80008682:	e0 81 01 ed 	brne	80008a5c <_vfprintf_r+0x1e28>
80008686:	40 c9       	lddsp	r9,sp[0x30]
80008688:	fa f8 06 90 	ld.w	r8,sp[1680]
8000868c:	2f f8       	sub	r8,-1
8000868e:	87 09       	st.w	r3[0x0],r9
80008690:	fb 48 06 90 	st.w	sp[1680],r8
80008694:	30 19       	mov	r9,1
80008696:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000869a:	87 19       	st.w	r3[0x4],r9
8000869c:	2f f8       	sub	r8,-1
8000869e:	fb 48 06 8c 	st.w	sp[1676],r8
800086a2:	58 78       	cp.w	r8,7
800086a4:	e0 89 00 04 	brgt	800086ac <_vfprintf_r+0x1a78>
800086a8:	2f 83       	sub	r3,-8
800086aa:	c0 b8       	rjmp	800086c0 <_vfprintf_r+0x1a8c>
800086ac:	fa ca f9 78 	sub	r10,sp,-1672
800086b0:	02 9b       	mov	r11,r1
800086b2:	08 9c       	mov	r12,r4
800086b4:	fe b0 f2 b2 	rcall	80006c18 <__sprint_r>
800086b8:	e0 81 02 3d 	brne	80008b32 <_vfprintf_r+0x1efe>
800086bc:	fa c3 f9 e0 	sub	r3,sp,-1568
800086c0:	fa f2 06 ac 	ld.w	r2,sp[1708]
800086c4:	5c 32       	neg	r2
800086c6:	58 02       	cp.w	r2,0
800086c8:	e0 89 00 1d 	brgt	80008702 <_vfprintf_r+0x1ace>
800086cc:	c3 d8       	rjmp	80008746 <_vfprintf_r+0x1b12>
800086ce:	2f 09       	sub	r9,-16
800086d0:	2f f8       	sub	r8,-1
800086d2:	31 0e       	mov	lr,16
800086d4:	fb 49 06 90 	st.w	sp[1680],r9
800086d8:	87 00       	st.w	r3[0x0],r0
800086da:	87 1e       	st.w	r3[0x4],lr
800086dc:	fb 48 06 8c 	st.w	sp[1676],r8
800086e0:	58 78       	cp.w	r8,7
800086e2:	e0 89 00 04 	brgt	800086ea <_vfprintf_r+0x1ab6>
800086e6:	2f 83       	sub	r3,-8
800086e8:	c0 b8       	rjmp	800086fe <_vfprintf_r+0x1aca>
800086ea:	fa ca f9 78 	sub	r10,sp,-1672
800086ee:	02 9b       	mov	r11,r1
800086f0:	08 9c       	mov	r12,r4
800086f2:	fe b0 f2 93 	rcall	80006c18 <__sprint_r>
800086f6:	e0 81 02 1e 	brne	80008b32 <_vfprintf_r+0x1efe>
800086fa:	fa c3 f9 e0 	sub	r3,sp,-1568
800086fe:	21 02       	sub	r2,16
80008700:	c0 38       	rjmp	80008706 <_vfprintf_r+0x1ad2>
80008702:	fe c0 c8 52 	sub	r0,pc,-14254
80008706:	fa f9 06 90 	ld.w	r9,sp[1680]
8000870a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000870e:	fe ca c8 5e 	sub	r10,pc,-14242
80008712:	59 02       	cp.w	r2,16
80008714:	fe 99 ff dd 	brgt	800086ce <_vfprintf_r+0x1a9a>
80008718:	04 09       	add	r9,r2
8000871a:	2f f8       	sub	r8,-1
8000871c:	87 0a       	st.w	r3[0x0],r10
8000871e:	fb 49 06 90 	st.w	sp[1680],r9
80008722:	87 12       	st.w	r3[0x4],r2
80008724:	fb 48 06 8c 	st.w	sp[1676],r8
80008728:	58 78       	cp.w	r8,7
8000872a:	e0 89 00 04 	brgt	80008732 <_vfprintf_r+0x1afe>
8000872e:	2f 83       	sub	r3,-8
80008730:	c0 b8       	rjmp	80008746 <_vfprintf_r+0x1b12>
80008732:	fa ca f9 78 	sub	r10,sp,-1672
80008736:	02 9b       	mov	r11,r1
80008738:	08 9c       	mov	r12,r4
8000873a:	fe b0 f2 6f 	rcall	80006c18 <__sprint_r>
8000873e:	e0 81 01 fa 	brne	80008b32 <_vfprintf_r+0x1efe>
80008742:	fa c3 f9 e0 	sub	r3,sp,-1568
80008746:	40 6c       	lddsp	r12,sp[0x18]
80008748:	fa f8 06 90 	ld.w	r8,sp[1680]
8000874c:	87 06       	st.w	r3[0x0],r6
8000874e:	87 1c       	st.w	r3[0x4],r12
80008750:	18 08       	add	r8,r12
80008752:	cb 98       	rjmp	800088c4 <_vfprintf_r+0x1c90>
80008754:	fa f9 06 90 	ld.w	r9,sp[1680]
80008758:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000875c:	40 6b       	lddsp	r11,sp[0x18]
8000875e:	16 3a       	cp.w	r10,r11
80008760:	c6 f5       	brlt	8000883e <_vfprintf_r+0x1c0a>
80008762:	16 09       	add	r9,r11
80008764:	2f f8       	sub	r8,-1
80008766:	87 06       	st.w	r3[0x0],r6
80008768:	fb 49 06 90 	st.w	sp[1680],r9
8000876c:	87 1b       	st.w	r3[0x4],r11
8000876e:	fb 48 06 8c 	st.w	sp[1676],r8
80008772:	58 78       	cp.w	r8,7
80008774:	e0 89 00 04 	brgt	8000877c <_vfprintf_r+0x1b48>
80008778:	2f 83       	sub	r3,-8
8000877a:	c0 b8       	rjmp	80008790 <_vfprintf_r+0x1b5c>
8000877c:	fa ca f9 78 	sub	r10,sp,-1672
80008780:	02 9b       	mov	r11,r1
80008782:	08 9c       	mov	r12,r4
80008784:	fe b0 f2 4a 	rcall	80006c18 <__sprint_r>
80008788:	e0 81 01 d5 	brne	80008b32 <_vfprintf_r+0x1efe>
8000878c:	fa c3 f9 e0 	sub	r3,sp,-1568
80008790:	fa f6 06 ac 	ld.w	r6,sp[1708]
80008794:	40 6a       	lddsp	r10,sp[0x18]
80008796:	14 16       	sub	r6,r10
80008798:	58 06       	cp.w	r6,0
8000879a:	e0 89 00 1c 	brgt	800087d2 <_vfprintf_r+0x1b9e>
8000879e:	c3 d8       	rjmp	80008818 <_vfprintf_r+0x1be4>
800087a0:	2f 09       	sub	r9,-16
800087a2:	2f f8       	sub	r8,-1
800087a4:	fb 49 06 90 	st.w	sp[1680],r9
800087a8:	87 02       	st.w	r3[0x0],r2
800087aa:	87 10       	st.w	r3[0x4],r0
800087ac:	fb 48 06 8c 	st.w	sp[1676],r8
800087b0:	58 78       	cp.w	r8,7
800087b2:	e0 89 00 04 	brgt	800087ba <_vfprintf_r+0x1b86>
800087b6:	2f 83       	sub	r3,-8
800087b8:	c0 b8       	rjmp	800087ce <_vfprintf_r+0x1b9a>
800087ba:	fa ca f9 78 	sub	r10,sp,-1672
800087be:	02 9b       	mov	r11,r1
800087c0:	08 9c       	mov	r12,r4
800087c2:	fe b0 f2 2b 	rcall	80006c18 <__sprint_r>
800087c6:	e0 81 01 b6 	brne	80008b32 <_vfprintf_r+0x1efe>
800087ca:	fa c3 f9 e0 	sub	r3,sp,-1568
800087ce:	21 06       	sub	r6,16
800087d0:	c0 48       	rjmp	800087d8 <_vfprintf_r+0x1ba4>
800087d2:	fe c2 c9 22 	sub	r2,pc,-14046
800087d6:	31 00       	mov	r0,16
800087d8:	fa f9 06 90 	ld.w	r9,sp[1680]
800087dc:	fa f8 06 8c 	ld.w	r8,sp[1676]
800087e0:	fe ca c9 30 	sub	r10,pc,-14032
800087e4:	59 06       	cp.w	r6,16
800087e6:	fe 99 ff dd 	brgt	800087a0 <_vfprintf_r+0x1b6c>
800087ea:	0c 09       	add	r9,r6
800087ec:	2f f8       	sub	r8,-1
800087ee:	87 0a       	st.w	r3[0x0],r10
800087f0:	fb 49 06 90 	st.w	sp[1680],r9
800087f4:	87 16       	st.w	r3[0x4],r6
800087f6:	fb 48 06 8c 	st.w	sp[1676],r8
800087fa:	58 78       	cp.w	r8,7
800087fc:	e0 89 00 04 	brgt	80008804 <_vfprintf_r+0x1bd0>
80008800:	2f 83       	sub	r3,-8
80008802:	c0 b8       	rjmp	80008818 <_vfprintf_r+0x1be4>
80008804:	fa ca f9 78 	sub	r10,sp,-1672
80008808:	02 9b       	mov	r11,r1
8000880a:	08 9c       	mov	r12,r4
8000880c:	fe b0 f2 06 	rcall	80006c18 <__sprint_r>
80008810:	e0 81 01 91 	brne	80008b32 <_vfprintf_r+0x1efe>
80008814:	fa c3 f9 e0 	sub	r3,sp,-1568
80008818:	ed b5 00 00 	bld	r5,0x0
8000881c:	e0 81 01 20 	brne	80008a5c <_vfprintf_r+0x1e28>
80008820:	40 c9       	lddsp	r9,sp[0x30]
80008822:	fa f8 06 90 	ld.w	r8,sp[1680]
80008826:	2f f8       	sub	r8,-1
80008828:	87 09       	st.w	r3[0x0],r9
8000882a:	fb 48 06 90 	st.w	sp[1680],r8
8000882e:	30 19       	mov	r9,1
80008830:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008834:	87 19       	st.w	r3[0x4],r9
80008836:	2f f8       	sub	r8,-1
80008838:	fb 48 06 8c 	st.w	sp[1676],r8
8000883c:	c0 29       	rjmp	80008a40 <_vfprintf_r+0x1e0c>
8000883e:	14 09       	add	r9,r10
80008840:	2f f8       	sub	r8,-1
80008842:	fb 49 06 90 	st.w	sp[1680],r9
80008846:	87 06       	st.w	r3[0x0],r6
80008848:	87 1a       	st.w	r3[0x4],r10
8000884a:	fb 48 06 8c 	st.w	sp[1676],r8
8000884e:	58 78       	cp.w	r8,7
80008850:	e0 89 00 04 	brgt	80008858 <_vfprintf_r+0x1c24>
80008854:	2f 83       	sub	r3,-8
80008856:	c0 b8       	rjmp	8000886c <_vfprintf_r+0x1c38>
80008858:	fa ca f9 78 	sub	r10,sp,-1672
8000885c:	02 9b       	mov	r11,r1
8000885e:	08 9c       	mov	r12,r4
80008860:	fe b0 f1 dc 	rcall	80006c18 <__sprint_r>
80008864:	e0 81 01 67 	brne	80008b32 <_vfprintf_r+0x1efe>
80008868:	fa c3 f9 e0 	sub	r3,sp,-1568
8000886c:	40 c8       	lddsp	r8,sp[0x30]
8000886e:	87 08       	st.w	r3[0x0],r8
80008870:	fa f8 06 90 	ld.w	r8,sp[1680]
80008874:	2f f8       	sub	r8,-1
80008876:	30 19       	mov	r9,1
80008878:	fb 48 06 90 	st.w	sp[1680],r8
8000887c:	87 19       	st.w	r3[0x4],r9
8000887e:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008882:	2f f8       	sub	r8,-1
80008884:	fb 48 06 8c 	st.w	sp[1676],r8
80008888:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000888c:	58 78       	cp.w	r8,7
8000888e:	e0 89 00 04 	brgt	80008896 <_vfprintf_r+0x1c62>
80008892:	2f 83       	sub	r3,-8
80008894:	c0 b8       	rjmp	800088aa <_vfprintf_r+0x1c76>
80008896:	fa ca f9 78 	sub	r10,sp,-1672
8000889a:	02 9b       	mov	r11,r1
8000889c:	08 9c       	mov	r12,r4
8000889e:	fe b0 f1 bd 	rcall	80006c18 <__sprint_r>
800088a2:	e0 81 01 48 	brne	80008b32 <_vfprintf_r+0x1efe>
800088a6:	fa c3 f9 e0 	sub	r3,sp,-1568
800088aa:	04 06       	add	r6,r2
800088ac:	fa f8 06 ac 	ld.w	r8,sp[1708]
800088b0:	87 06       	st.w	r3[0x0],r6
800088b2:	fa f9 06 90 	ld.w	r9,sp[1680]
800088b6:	40 66       	lddsp	r6,sp[0x18]
800088b8:	40 6e       	lddsp	lr,sp[0x18]
800088ba:	10 16       	sub	r6,r8
800088bc:	f2 08 01 08 	sub	r8,r9,r8
800088c0:	87 16       	st.w	r3[0x4],r6
800088c2:	1c 08       	add	r8,lr
800088c4:	fb 48 06 90 	st.w	sp[1680],r8
800088c8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800088cc:	2f f8       	sub	r8,-1
800088ce:	fb 48 06 8c 	st.w	sp[1676],r8
800088d2:	cb 78       	rjmp	80008a40 <_vfprintf_r+0x1e0c>
800088d4:	40 6c       	lddsp	r12,sp[0x18]
800088d6:	58 1c       	cp.w	r12,1
800088d8:	e0 89 00 06 	brgt	800088e4 <_vfprintf_r+0x1cb0>
800088dc:	ed b5 00 00 	bld	r5,0x0
800088e0:	e0 81 00 85 	brne	800089ea <_vfprintf_r+0x1db6>
800088e4:	fa f8 06 90 	ld.w	r8,sp[1680]
800088e8:	2f f8       	sub	r8,-1
800088ea:	30 19       	mov	r9,1
800088ec:	fb 48 06 90 	st.w	sp[1680],r8
800088f0:	87 06       	st.w	r3[0x0],r6
800088f2:	fa f8 06 8c 	ld.w	r8,sp[1676]
800088f6:	87 19       	st.w	r3[0x4],r9
800088f8:	2f f8       	sub	r8,-1
800088fa:	fb 48 06 8c 	st.w	sp[1676],r8
800088fe:	58 78       	cp.w	r8,7
80008900:	e0 89 00 04 	brgt	80008908 <_vfprintf_r+0x1cd4>
80008904:	2f 83       	sub	r3,-8
80008906:	c0 b8       	rjmp	8000891c <_vfprintf_r+0x1ce8>
80008908:	fa ca f9 78 	sub	r10,sp,-1672
8000890c:	02 9b       	mov	r11,r1
8000890e:	08 9c       	mov	r12,r4
80008910:	fe b0 f1 84 	rcall	80006c18 <__sprint_r>
80008914:	e0 81 01 0f 	brne	80008b32 <_vfprintf_r+0x1efe>
80008918:	fa c3 f9 e0 	sub	r3,sp,-1568
8000891c:	fa f8 06 90 	ld.w	r8,sp[1680]
80008920:	2f f8       	sub	r8,-1
80008922:	40 cb       	lddsp	r11,sp[0x30]
80008924:	fb 48 06 90 	st.w	sp[1680],r8
80008928:	30 19       	mov	r9,1
8000892a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000892e:	87 0b       	st.w	r3[0x0],r11
80008930:	2f f8       	sub	r8,-1
80008932:	87 19       	st.w	r3[0x4],r9
80008934:	fb 48 06 8c 	st.w	sp[1676],r8
80008938:	58 78       	cp.w	r8,7
8000893a:	e0 89 00 05 	brgt	80008944 <_vfprintf_r+0x1d10>
8000893e:	2f 83       	sub	r3,-8
80008940:	c0 c8       	rjmp	80008958 <_vfprintf_r+0x1d24>
80008942:	d7 03       	nop
80008944:	fa ca f9 78 	sub	r10,sp,-1672
80008948:	02 9b       	mov	r11,r1
8000894a:	08 9c       	mov	r12,r4
8000894c:	fe b0 f1 66 	rcall	80006c18 <__sprint_r>
80008950:	e0 81 00 f1 	brne	80008b32 <_vfprintf_r+0x1efe>
80008954:	fa c3 f9 e0 	sub	r3,sp,-1568
80008958:	30 08       	mov	r8,0
8000895a:	30 09       	mov	r9,0
8000895c:	40 5b       	lddsp	r11,sp[0x14]
8000895e:	40 7a       	lddsp	r10,sp[0x1c]
80008960:	e0 a0 15 5c 	rcall	8000b418 <__avr32_f64_cmp_eq>
80008964:	40 68       	lddsp	r8,sp[0x18]
80008966:	20 18       	sub	r8,1
80008968:	58 0c       	cp.w	r12,0
8000896a:	c0 d1       	brne	80008984 <_vfprintf_r+0x1d50>
8000896c:	2f f6       	sub	r6,-1
8000896e:	87 18       	st.w	r3[0x4],r8
80008970:	87 06       	st.w	r3[0x0],r6
80008972:	fa f6 06 90 	ld.w	r6,sp[1680]
80008976:	10 06       	add	r6,r8
80008978:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000897c:	fb 46 06 90 	st.w	sp[1680],r6
80008980:	2f f8       	sub	r8,-1
80008982:	c3 18       	rjmp	800089e4 <_vfprintf_r+0x1db0>
80008984:	10 96       	mov	r6,r8
80008986:	58 08       	cp.w	r8,0
80008988:	e0 89 00 1c 	brgt	800089c0 <_vfprintf_r+0x1d8c>
8000898c:	c4 b8       	rjmp	80008a22 <_vfprintf_r+0x1dee>
8000898e:	2f 09       	sub	r9,-16
80008990:	2f f8       	sub	r8,-1
80008992:	fb 49 06 90 	st.w	sp[1680],r9
80008996:	87 02       	st.w	r3[0x0],r2
80008998:	87 10       	st.w	r3[0x4],r0
8000899a:	fb 48 06 8c 	st.w	sp[1676],r8
8000899e:	58 78       	cp.w	r8,7
800089a0:	e0 89 00 04 	brgt	800089a8 <_vfprintf_r+0x1d74>
800089a4:	2f 83       	sub	r3,-8
800089a6:	c0 b8       	rjmp	800089bc <_vfprintf_r+0x1d88>
800089a8:	fa ca f9 78 	sub	r10,sp,-1672
800089ac:	02 9b       	mov	r11,r1
800089ae:	08 9c       	mov	r12,r4
800089b0:	fe b0 f1 34 	rcall	80006c18 <__sprint_r>
800089b4:	e0 81 00 bf 	brne	80008b32 <_vfprintf_r+0x1efe>
800089b8:	fa c3 f9 e0 	sub	r3,sp,-1568
800089bc:	21 06       	sub	r6,16
800089be:	c0 48       	rjmp	800089c6 <_vfprintf_r+0x1d92>
800089c0:	fe c2 cb 10 	sub	r2,pc,-13552
800089c4:	31 00       	mov	r0,16
800089c6:	fa f9 06 90 	ld.w	r9,sp[1680]
800089ca:	fa f8 06 8c 	ld.w	r8,sp[1676]
800089ce:	fe ca cb 1e 	sub	r10,pc,-13538
800089d2:	59 06       	cp.w	r6,16
800089d4:	fe 99 ff dd 	brgt	8000898e <_vfprintf_r+0x1d5a>
800089d8:	0c 09       	add	r9,r6
800089da:	87 0a       	st.w	r3[0x0],r10
800089dc:	fb 49 06 90 	st.w	sp[1680],r9
800089e0:	2f f8       	sub	r8,-1
800089e2:	87 16       	st.w	r3[0x4],r6
800089e4:	fb 48 06 8c 	st.w	sp[1676],r8
800089e8:	c0 e8       	rjmp	80008a04 <_vfprintf_r+0x1dd0>
800089ea:	fa f8 06 90 	ld.w	r8,sp[1680]
800089ee:	2f f8       	sub	r8,-1
800089f0:	30 19       	mov	r9,1
800089f2:	fb 48 06 90 	st.w	sp[1680],r8
800089f6:	87 06       	st.w	r3[0x0],r6
800089f8:	fa f8 06 8c 	ld.w	r8,sp[1676]
800089fc:	87 19       	st.w	r3[0x4],r9
800089fe:	2f f8       	sub	r8,-1
80008a00:	fb 48 06 8c 	st.w	sp[1676],r8
80008a04:	58 78       	cp.w	r8,7
80008a06:	e0 89 00 04 	brgt	80008a0e <_vfprintf_r+0x1dda>
80008a0a:	2f 83       	sub	r3,-8
80008a0c:	c0 b8       	rjmp	80008a22 <_vfprintf_r+0x1dee>
80008a0e:	fa ca f9 78 	sub	r10,sp,-1672
80008a12:	02 9b       	mov	r11,r1
80008a14:	08 9c       	mov	r12,r4
80008a16:	fe b0 f1 01 	rcall	80006c18 <__sprint_r>
80008a1a:	e0 81 00 8c 	brne	80008b32 <_vfprintf_r+0x1efe>
80008a1e:	fa c3 f9 e0 	sub	r3,sp,-1568
80008a22:	40 ea       	lddsp	r10,sp[0x38]
80008a24:	fa f8 06 90 	ld.w	r8,sp[1680]
80008a28:	14 08       	add	r8,r10
80008a2a:	fa c9 f9 64 	sub	r9,sp,-1692
80008a2e:	fb 48 06 90 	st.w	sp[1680],r8
80008a32:	87 1a       	st.w	r3[0x4],r10
80008a34:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008a38:	87 09       	st.w	r3[0x0],r9
80008a3a:	2f f8       	sub	r8,-1
80008a3c:	fb 48 06 8c 	st.w	sp[1676],r8
80008a40:	58 78       	cp.w	r8,7
80008a42:	e0 89 00 04 	brgt	80008a4a <_vfprintf_r+0x1e16>
80008a46:	2f 83       	sub	r3,-8
80008a48:	c0 a8       	rjmp	80008a5c <_vfprintf_r+0x1e28>
80008a4a:	fa ca f9 78 	sub	r10,sp,-1672
80008a4e:	02 9b       	mov	r11,r1
80008a50:	08 9c       	mov	r12,r4
80008a52:	fe b0 f0 e3 	rcall	80006c18 <__sprint_r>
80008a56:	c6 e1       	brne	80008b32 <_vfprintf_r+0x1efe>
80008a58:	fa c3 f9 e0 	sub	r3,sp,-1568
80008a5c:	e2 15 00 04 	andl	r5,0x4,COH
80008a60:	c3 f0       	breq	80008ade <_vfprintf_r+0x1eaa>
80008a62:	40 86       	lddsp	r6,sp[0x20]
80008a64:	40 39       	lddsp	r9,sp[0xc]
80008a66:	12 16       	sub	r6,r9
80008a68:	58 06       	cp.w	r6,0
80008a6a:	e0 89 00 1a 	brgt	80008a9e <_vfprintf_r+0x1e6a>
80008a6e:	c3 88       	rjmp	80008ade <_vfprintf_r+0x1eaa>
80008a70:	2f 09       	sub	r9,-16
80008a72:	2f f8       	sub	r8,-1
80008a74:	fb 49 06 90 	st.w	sp[1680],r9
80008a78:	87 05       	st.w	r3[0x0],r5
80008a7a:	87 12       	st.w	r3[0x4],r2
80008a7c:	fb 48 06 8c 	st.w	sp[1676],r8
80008a80:	58 78       	cp.w	r8,7
80008a82:	e0 89 00 04 	brgt	80008a8a <_vfprintf_r+0x1e56>
80008a86:	2f 83       	sub	r3,-8
80008a88:	c0 98       	rjmp	80008a9a <_vfprintf_r+0x1e66>
80008a8a:	00 9a       	mov	r10,r0
80008a8c:	02 9b       	mov	r11,r1
80008a8e:	08 9c       	mov	r12,r4
80008a90:	fe b0 f0 c4 	rcall	80006c18 <__sprint_r>
80008a94:	c4 f1       	brne	80008b32 <_vfprintf_r+0x1efe>
80008a96:	fa c3 f9 e0 	sub	r3,sp,-1568
80008a9a:	21 06       	sub	r6,16
80008a9c:	c0 68       	rjmp	80008aa8 <_vfprintf_r+0x1e74>
80008a9e:	fe c5 cb fe 	sub	r5,pc,-13314
80008aa2:	31 02       	mov	r2,16
80008aa4:	fa c0 f9 78 	sub	r0,sp,-1672
80008aa8:	fa f9 06 90 	ld.w	r9,sp[1680]
80008aac:	fa f8 06 8c 	ld.w	r8,sp[1676]
80008ab0:	fe ca cc 10 	sub	r10,pc,-13296
80008ab4:	59 06       	cp.w	r6,16
80008ab6:	fe 99 ff dd 	brgt	80008a70 <_vfprintf_r+0x1e3c>
80008aba:	0c 09       	add	r9,r6
80008abc:	2f f8       	sub	r8,-1
80008abe:	87 0a       	st.w	r3[0x0],r10
80008ac0:	87 16       	st.w	r3[0x4],r6
80008ac2:	fb 49 06 90 	st.w	sp[1680],r9
80008ac6:	fb 48 06 8c 	st.w	sp[1676],r8
80008aca:	58 78       	cp.w	r8,7
80008acc:	e0 8a 00 09 	brle	80008ade <_vfprintf_r+0x1eaa>
80008ad0:	fa ca f9 78 	sub	r10,sp,-1672
80008ad4:	02 9b       	mov	r11,r1
80008ad6:	08 9c       	mov	r12,r4
80008ad8:	fe b0 f0 a0 	rcall	80006c18 <__sprint_r>
80008adc:	c2 b1       	brne	80008b32 <_vfprintf_r+0x1efe>
80008ade:	40 bc       	lddsp	r12,sp[0x2c]
80008ae0:	40 36       	lddsp	r6,sp[0xc]
80008ae2:	40 8e       	lddsp	lr,sp[0x20]
80008ae4:	ec 0e 0c 48 	max	r8,r6,lr
80008ae8:	10 0c       	add	r12,r8
80008aea:	50 bc       	stdsp	sp[0x2c],r12
80008aec:	fa f8 06 90 	ld.w	r8,sp[1680]
80008af0:	58 08       	cp.w	r8,0
80008af2:	c0 80       	breq	80008b02 <_vfprintf_r+0x1ece>
80008af4:	fa ca f9 78 	sub	r10,sp,-1672
80008af8:	02 9b       	mov	r11,r1
80008afa:	08 9c       	mov	r12,r4
80008afc:	fe b0 f0 8e 	rcall	80006c18 <__sprint_r>
80008b00:	c1 91       	brne	80008b32 <_vfprintf_r+0x1efe>
80008b02:	30 0b       	mov	r11,0
80008b04:	fa c3 f9 e0 	sub	r3,sp,-1568
80008b08:	fb 4b 06 8c 	st.w	sp[1676],r11
80008b0c:	fe 9f f1 22 	bral	80006d50 <_vfprintf_r+0x11c>
80008b10:	08 95       	mov	r5,r4
80008b12:	fa f8 06 90 	ld.w	r8,sp[1680]
80008b16:	58 08       	cp.w	r8,0
80008b18:	c0 80       	breq	80008b28 <_vfprintf_r+0x1ef4>
80008b1a:	08 9c       	mov	r12,r4
80008b1c:	fa ca f9 78 	sub	r10,sp,-1672
80008b20:	02 9b       	mov	r11,r1
80008b22:	fe b0 f0 7b 	rcall	80006c18 <__sprint_r>
80008b26:	c0 61       	brne	80008b32 <_vfprintf_r+0x1efe>
80008b28:	30 08       	mov	r8,0
80008b2a:	fb 48 06 8c 	st.w	sp[1676],r8
80008b2e:	c0 28       	rjmp	80008b32 <_vfprintf_r+0x1efe>
80008b30:	40 41       	lddsp	r1,sp[0x10]
80008b32:	82 68       	ld.sh	r8,r1[0xc]
80008b34:	ed b8 00 06 	bld	r8,0x6
80008b38:	c0 31       	brne	80008b3e <_vfprintf_r+0x1f0a>
80008b3a:	3f fa       	mov	r10,-1
80008b3c:	50 ba       	stdsp	sp[0x2c],r10
80008b3e:	40 bc       	lddsp	r12,sp[0x2c]
80008b40:	fe 3d f9 44 	sub	sp,-1724
80008b44:	d8 32       	popm	r0-r7,pc
80008b46:	d7 03       	nop

80008b48 <__swsetup_r>:
80008b48:	d4 21       	pushm	r4-r7,lr
80008b4a:	e0 68 01 04 	mov	r8,260
80008b4e:	18 96       	mov	r6,r12
80008b50:	16 97       	mov	r7,r11
80008b52:	70 0c       	ld.w	r12,r8[0x0]
80008b54:	58 0c       	cp.w	r12,0
80008b56:	c0 60       	breq	80008b62 <__swsetup_r+0x1a>
80008b58:	78 68       	ld.w	r8,r12[0x18]
80008b5a:	58 08       	cp.w	r8,0
80008b5c:	c0 31       	brne	80008b62 <__swsetup_r+0x1a>
80008b5e:	e0 a0 07 b9 	rcall	80009ad0 <__sinit>
80008b62:	fe c8 cb 92 	sub	r8,pc,-13422
80008b66:	10 37       	cp.w	r7,r8
80008b68:	c0 61       	brne	80008b74 <__swsetup_r+0x2c>
80008b6a:	e0 68 01 04 	mov	r8,260
80008b6e:	70 08       	ld.w	r8,r8[0x0]
80008b70:	70 07       	ld.w	r7,r8[0x0]
80008b72:	c1 28       	rjmp	80008b96 <__swsetup_r+0x4e>
80008b74:	fe c8 cb 84 	sub	r8,pc,-13436
80008b78:	10 37       	cp.w	r7,r8
80008b7a:	c0 61       	brne	80008b86 <__swsetup_r+0x3e>
80008b7c:	e0 68 01 04 	mov	r8,260
80008b80:	70 08       	ld.w	r8,r8[0x0]
80008b82:	70 17       	ld.w	r7,r8[0x4]
80008b84:	c0 98       	rjmp	80008b96 <__swsetup_r+0x4e>
80008b86:	fe c8 cb 76 	sub	r8,pc,-13450
80008b8a:	10 37       	cp.w	r7,r8
80008b8c:	c0 51       	brne	80008b96 <__swsetup_r+0x4e>
80008b8e:	e0 68 01 04 	mov	r8,260
80008b92:	70 08       	ld.w	r8,r8[0x0]
80008b94:	70 27       	ld.w	r7,r8[0x8]
80008b96:	8e 68       	ld.sh	r8,r7[0xc]
80008b98:	ed b8 00 03 	bld	r8,0x3
80008b9c:	c1 e0       	breq	80008bd8 <__swsetup_r+0x90>
80008b9e:	ed b8 00 04 	bld	r8,0x4
80008ba2:	c3 e1       	brne	80008c1e <__swsetup_r+0xd6>
80008ba4:	ed b8 00 02 	bld	r8,0x2
80008ba8:	c1 51       	brne	80008bd2 <__swsetup_r+0x8a>
80008baa:	6e db       	ld.w	r11,r7[0x34]
80008bac:	58 0b       	cp.w	r11,0
80008bae:	c0 a0       	breq	80008bc2 <__swsetup_r+0x7a>
80008bb0:	ee c8 ff bc 	sub	r8,r7,-68
80008bb4:	10 3b       	cp.w	r11,r8
80008bb6:	c0 40       	breq	80008bbe <__swsetup_r+0x76>
80008bb8:	0c 9c       	mov	r12,r6
80008bba:	e0 a0 08 25 	rcall	80009c04 <_free_r>
80008bbe:	30 08       	mov	r8,0
80008bc0:	8f d8       	st.w	r7[0x34],r8
80008bc2:	8e 68       	ld.sh	r8,r7[0xc]
80008bc4:	e0 18 ff db 	andl	r8,0xffdb
80008bc8:	ae 68       	st.h	r7[0xc],r8
80008bca:	30 08       	mov	r8,0
80008bcc:	8f 18       	st.w	r7[0x4],r8
80008bce:	6e 48       	ld.w	r8,r7[0x10]
80008bd0:	8f 08       	st.w	r7[0x0],r8
80008bd2:	8e 68       	ld.sh	r8,r7[0xc]
80008bd4:	a3 b8       	sbr	r8,0x3
80008bd6:	ae 68       	st.h	r7[0xc],r8
80008bd8:	6e 48       	ld.w	r8,r7[0x10]
80008bda:	58 08       	cp.w	r8,0
80008bdc:	c0 b1       	brne	80008bf2 <__swsetup_r+0xaa>
80008bde:	8e 68       	ld.sh	r8,r7[0xc]
80008be0:	e2 18 02 80 	andl	r8,0x280,COH
80008be4:	e0 48 02 00 	cp.w	r8,512
80008be8:	c0 50       	breq	80008bf2 <__swsetup_r+0xaa>
80008bea:	0c 9c       	mov	r12,r6
80008bec:	0e 9b       	mov	r11,r7
80008bee:	e0 a0 0a 4b 	rcall	8000a084 <__smakebuf_r>
80008bf2:	8e 69       	ld.sh	r9,r7[0xc]
80008bf4:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
80008bf8:	c0 70       	breq	80008c06 <__swsetup_r+0xbe>
80008bfa:	30 08       	mov	r8,0
80008bfc:	8f 28       	st.w	r7[0x8],r8
80008bfe:	6e 58       	ld.w	r8,r7[0x14]
80008c00:	5c 38       	neg	r8
80008c02:	8f 68       	st.w	r7[0x18],r8
80008c04:	c0 68       	rjmp	80008c10 <__swsetup_r+0xc8>
80008c06:	ed b9 00 01 	bld	r9,0x1
80008c0a:	ef f8 10 05 	ld.wne	r8,r7[0x14]
80008c0e:	8f 28       	st.w	r7[0x8],r8
80008c10:	6e 48       	ld.w	r8,r7[0x10]
80008c12:	58 08       	cp.w	r8,0
80008c14:	c0 61       	brne	80008c20 <__swsetup_r+0xd8>
80008c16:	8e 68       	ld.sh	r8,r7[0xc]
80008c18:	ed b8 00 07 	bld	r8,0x7
80008c1c:	c0 21       	brne	80008c20 <__swsetup_r+0xd8>
80008c1e:	dc 2a       	popm	r4-r7,pc,r12=-1
80008c20:	d8 2a       	popm	r4-r7,pc,r12=0
80008c22:	d7 03       	nop

80008c24 <quorem>:
80008c24:	d4 31       	pushm	r0-r7,lr
80008c26:	20 2d       	sub	sp,8
80008c28:	18 97       	mov	r7,r12
80008c2a:	78 48       	ld.w	r8,r12[0x10]
80008c2c:	76 46       	ld.w	r6,r11[0x10]
80008c2e:	0c 38       	cp.w	r8,r6
80008c30:	c0 34       	brge	80008c36 <quorem+0x12>
80008c32:	30 0c       	mov	r12,0
80008c34:	c8 58       	rjmp	80008d3e <quorem+0x11a>
80008c36:	ec c2 ff fc 	sub	r2,r6,-4
80008c3a:	f6 c3 ff ec 	sub	r3,r11,-20
80008c3e:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
80008c42:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80008c46:	2f f9       	sub	r9,-1
80008c48:	20 16       	sub	r6,1
80008c4a:	f8 09 0d 08 	divu	r8,r12,r9
80008c4e:	f6 02 00 22 	add	r2,r11,r2<<0x2
80008c52:	ee c4 ff ec 	sub	r4,r7,-20
80008c56:	10 95       	mov	r5,r8
80008c58:	58 08       	cp.w	r8,0
80008c5a:	c4 10       	breq	80008cdc <quorem+0xb8>
80008c5c:	30 09       	mov	r9,0
80008c5e:	06 9a       	mov	r10,r3
80008c60:	08 98       	mov	r8,r4
80008c62:	12 91       	mov	r1,r9
80008c64:	50 0b       	stdsp	sp[0x0],r11
80008c66:	70 0e       	ld.w	lr,r8[0x0]
80008c68:	b1 8e       	lsr	lr,0x10
80008c6a:	50 1e       	stdsp	sp[0x4],lr
80008c6c:	15 0e       	ld.w	lr,r10++
80008c6e:	fc 00 16 10 	lsr	r0,lr,0x10
80008c72:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80008c76:	ea 0e 03 41 	mac	r1,r5,lr
80008c7a:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
80008c7e:	b1 81       	lsr	r1,0x10
80008c80:	40 1b       	lddsp	r11,sp[0x4]
80008c82:	ea 00 02 40 	mul	r0,r5,r0
80008c86:	e2 00 00 00 	add	r0,r1,r0
80008c8a:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
80008c8e:	02 1b       	sub	r11,r1
80008c90:	50 1b       	stdsp	sp[0x4],r11
80008c92:	70 0b       	ld.w	r11,r8[0x0]
80008c94:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80008c98:	02 09       	add	r9,r1
80008c9a:	f2 0e 01 0e 	sub	lr,r9,lr
80008c9e:	b0 1e       	st.h	r8[0x2],lr
80008ca0:	fc 09 14 10 	asr	r9,lr,0x10
80008ca4:	40 1e       	lddsp	lr,sp[0x4]
80008ca6:	fc 09 00 09 	add	r9,lr,r9
80008caa:	b0 09       	st.h	r8[0x0],r9
80008cac:	e0 01 16 10 	lsr	r1,r0,0x10
80008cb0:	2f c8       	sub	r8,-4
80008cb2:	b1 49       	asr	r9,0x10
80008cb4:	04 3a       	cp.w	r10,r2
80008cb6:	fe 98 ff d8 	brls	80008c66 <quorem+0x42>
80008cba:	40 0b       	lddsp	r11,sp[0x0]
80008cbc:	58 0c       	cp.w	r12,0
80008cbe:	c0 f1       	brne	80008cdc <quorem+0xb8>
80008cc0:	ec c8 ff fb 	sub	r8,r6,-5
80008cc4:	ee 08 00 28 	add	r8,r7,r8<<0x2
80008cc8:	c0 28       	rjmp	80008ccc <quorem+0xa8>
80008cca:	20 16       	sub	r6,1
80008ccc:	20 48       	sub	r8,4
80008cce:	08 38       	cp.w	r8,r4
80008cd0:	e0 88 00 05 	brls	80008cda <quorem+0xb6>
80008cd4:	70 09       	ld.w	r9,r8[0x0]
80008cd6:	58 09       	cp.w	r9,0
80008cd8:	cf 90       	breq	80008cca <quorem+0xa6>
80008cda:	8f 46       	st.w	r7[0x10],r6
80008cdc:	0e 9c       	mov	r12,r7
80008cde:	e0 a0 0c fb 	rcall	8000a6d4 <__mcmp>
80008ce2:	c2 d5       	brlt	80008d3c <quorem+0x118>
80008ce4:	2f f5       	sub	r5,-1
80008ce6:	08 98       	mov	r8,r4
80008ce8:	30 09       	mov	r9,0
80008cea:	07 0b       	ld.w	r11,r3++
80008cec:	f6 0a 16 10 	lsr	r10,r11,0x10
80008cf0:	70 0c       	ld.w	r12,r8[0x0]
80008cf2:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80008cf6:	f8 0e 16 10 	lsr	lr,r12,0x10
80008cfa:	14 1e       	sub	lr,r10
80008cfc:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80008d00:	16 1a       	sub	r10,r11
80008d02:	12 0a       	add	r10,r9
80008d04:	b0 1a       	st.h	r8[0x2],r10
80008d06:	b1 4a       	asr	r10,0x10
80008d08:	fc 0a 00 09 	add	r9,lr,r10
80008d0c:	b0 09       	st.h	r8[0x0],r9
80008d0e:	2f c8       	sub	r8,-4
80008d10:	b1 49       	asr	r9,0x10
80008d12:	04 33       	cp.w	r3,r2
80008d14:	fe 98 ff eb 	brls	80008cea <quorem+0xc6>
80008d18:	ec c8 ff fb 	sub	r8,r6,-5
80008d1c:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
80008d20:	58 09       	cp.w	r9,0
80008d22:	c0 d1       	brne	80008d3c <quorem+0x118>
80008d24:	ee 08 00 28 	add	r8,r7,r8<<0x2
80008d28:	c0 28       	rjmp	80008d2c <quorem+0x108>
80008d2a:	20 16       	sub	r6,1
80008d2c:	20 48       	sub	r8,4
80008d2e:	08 38       	cp.w	r8,r4
80008d30:	e0 88 00 05 	brls	80008d3a <quorem+0x116>
80008d34:	70 09       	ld.w	r9,r8[0x0]
80008d36:	58 09       	cp.w	r9,0
80008d38:	cf 90       	breq	80008d2a <quorem+0x106>
80008d3a:	8f 46       	st.w	r7[0x10],r6
80008d3c:	0a 9c       	mov	r12,r5
80008d3e:	2f ed       	sub	sp,-8
80008d40:	d8 32       	popm	r0-r7,pc
80008d42:	d7 03       	nop

80008d44 <_dtoa_r>:
80008d44:	d4 31       	pushm	r0-r7,lr
80008d46:	21 ad       	sub	sp,104
80008d48:	fa c4 ff 74 	sub	r4,sp,-140
80008d4c:	18 97       	mov	r7,r12
80008d4e:	16 95       	mov	r5,r11
80008d50:	68 2c       	ld.w	r12,r4[0x8]
80008d52:	50 c9       	stdsp	sp[0x30],r9
80008d54:	68 16       	ld.w	r6,r4[0x4]
80008d56:	68 09       	ld.w	r9,r4[0x0]
80008d58:	50 e8       	stdsp	sp[0x38],r8
80008d5a:	14 94       	mov	r4,r10
80008d5c:	51 2c       	stdsp	sp[0x48],r12
80008d5e:	fa e5 00 08 	st.d	sp[8],r4
80008d62:	51 59       	stdsp	sp[0x54],r9
80008d64:	6e 95       	ld.w	r5,r7[0x24]
80008d66:	58 05       	cp.w	r5,0
80008d68:	c0 91       	brne	80008d7a <_dtoa_r+0x36>
80008d6a:	31 0c       	mov	r12,16
80008d6c:	e0 a0 09 ea 	rcall	8000a140 <malloc>
80008d70:	99 35       	st.w	r12[0xc],r5
80008d72:	8f 9c       	st.w	r7[0x24],r12
80008d74:	99 15       	st.w	r12[0x4],r5
80008d76:	99 25       	st.w	r12[0x8],r5
80008d78:	99 05       	st.w	r12[0x0],r5
80008d7a:	6e 99       	ld.w	r9,r7[0x24]
80008d7c:	72 08       	ld.w	r8,r9[0x0]
80008d7e:	58 08       	cp.w	r8,0
80008d80:	c0 f0       	breq	80008d9e <_dtoa_r+0x5a>
80008d82:	72 1a       	ld.w	r10,r9[0x4]
80008d84:	91 1a       	st.w	r8[0x4],r10
80008d86:	30 1a       	mov	r10,1
80008d88:	72 19       	ld.w	r9,r9[0x4]
80008d8a:	f4 09 09 49 	lsl	r9,r10,r9
80008d8e:	10 9b       	mov	r11,r8
80008d90:	91 29       	st.w	r8[0x8],r9
80008d92:	0e 9c       	mov	r12,r7
80008d94:	e0 a0 0c ba 	rcall	8000a708 <_Bfree>
80008d98:	6e 98       	ld.w	r8,r7[0x24]
80008d9a:	30 09       	mov	r9,0
80008d9c:	91 09       	st.w	r8[0x0],r9
80008d9e:	40 28       	lddsp	r8,sp[0x8]
80008da0:	10 94       	mov	r4,r8
80008da2:	58 08       	cp.w	r8,0
80008da4:	c0 64       	brge	80008db0 <_dtoa_r+0x6c>
80008da6:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80008daa:	50 28       	stdsp	sp[0x8],r8
80008dac:	30 18       	mov	r8,1
80008dae:	c0 28       	rjmp	80008db2 <_dtoa_r+0x6e>
80008db0:	30 08       	mov	r8,0
80008db2:	8d 08       	st.w	r6[0x0],r8
80008db4:	fc 1c 7f f0 	movh	r12,0x7ff0
80008db8:	40 26       	lddsp	r6,sp[0x8]
80008dba:	0c 98       	mov	r8,r6
80008dbc:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80008dc0:	18 38       	cp.w	r8,r12
80008dc2:	c2 01       	brne	80008e02 <_dtoa_r+0xbe>
80008dc4:	e0 68 27 0f 	mov	r8,9999
80008dc8:	41 5b       	lddsp	r11,sp[0x54]
80008dca:	97 08       	st.w	r11[0x0],r8
80008dcc:	40 3a       	lddsp	r10,sp[0xc]
80008dce:	58 0a       	cp.w	r10,0
80008dd0:	c0 71       	brne	80008dde <_dtoa_r+0x9a>
80008dd2:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
80008dd6:	c0 41       	brne	80008dde <_dtoa_r+0x9a>
80008dd8:	fe cc ce 18 	sub	r12,pc,-12776
80008ddc:	c0 38       	rjmp	80008de2 <_dtoa_r+0x9e>
80008dde:	fe cc ce 12 	sub	r12,pc,-12782
80008de2:	41 29       	lddsp	r9,sp[0x48]
80008de4:	58 09       	cp.w	r9,0
80008de6:	e0 80 05 9a 	breq	8000991a <_dtoa_r+0xbd6>
80008dea:	f8 c8 ff fd 	sub	r8,r12,-3
80008dee:	f8 c9 ff f8 	sub	r9,r12,-8
80008df2:	11 8b       	ld.ub	r11,r8[0x0]
80008df4:	30 0a       	mov	r10,0
80008df6:	41 25       	lddsp	r5,sp[0x48]
80008df8:	f4 0b 18 00 	cp.b	r11,r10
80008dfc:	f2 08 17 10 	movne	r8,r9
80008e00:	c1 68       	rjmp	80008e2c <_dtoa_r+0xe8>
80008e02:	fa ea 00 08 	ld.d	r10,sp[8]
80008e06:	30 08       	mov	r8,0
80008e08:	fa eb 00 3c 	st.d	sp[60],r10
80008e0c:	30 09       	mov	r9,0
80008e0e:	e0 a0 13 05 	rcall	8000b418 <__avr32_f64_cmp_eq>
80008e12:	c1 00       	breq	80008e32 <_dtoa_r+0xee>
80008e14:	30 18       	mov	r8,1
80008e16:	41 5a       	lddsp	r10,sp[0x54]
80008e18:	95 08       	st.w	r10[0x0],r8
80008e1a:	fe cc cf 7e 	sub	r12,pc,-12418
80008e1e:	41 29       	lddsp	r9,sp[0x48]
80008e20:	f8 08 00 08 	add	r8,r12,r8
80008e24:	58 09       	cp.w	r9,0
80008e26:	e0 80 05 7a 	breq	8000991a <_dtoa_r+0xbd6>
80008e2a:	12 95       	mov	r5,r9
80008e2c:	8b 08       	st.w	r5[0x0],r8
80008e2e:	e0 8f 05 76 	bral	8000991a <_dtoa_r+0xbd6>
80008e32:	fa c8 ff 9c 	sub	r8,sp,-100
80008e36:	fa c9 ff a0 	sub	r9,sp,-96
80008e3a:	fa ea 00 3c 	ld.d	r10,sp[60]
80008e3e:	0e 9c       	mov	r12,r7
80008e40:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80008e44:	e0 a0 0c b4 	rcall	8000a7ac <__d2b>
80008e48:	18 93       	mov	r3,r12
80008e4a:	58 05       	cp.w	r5,0
80008e4c:	c0 d0       	breq	80008e66 <_dtoa_r+0x122>
80008e4e:	fa ea 00 3c 	ld.d	r10,sp[60]
80008e52:	30 04       	mov	r4,0
80008e54:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80008e58:	ea c5 03 ff 	sub	r5,r5,1023
80008e5c:	10 9b       	mov	r11,r8
80008e5e:	51 74       	stdsp	sp[0x5c],r4
80008e60:	ea 1b 3f f0 	orh	r11,0x3ff0
80008e64:	c2 58       	rjmp	80008eae <_dtoa_r+0x16a>
80008e66:	41 88       	lddsp	r8,sp[0x60]
80008e68:	41 9c       	lddsp	r12,sp[0x64]
80008e6a:	10 0c       	add	r12,r8
80008e6c:	f8 c5 fb ce 	sub	r5,r12,-1074
80008e70:	e0 45 00 20 	cp.w	r5,32
80008e74:	e0 8a 00 0e 	brle	80008e90 <_dtoa_r+0x14c>
80008e78:	f8 cc fb ee 	sub	r12,r12,-1042
80008e7c:	40 3b       	lddsp	r11,sp[0xc]
80008e7e:	ea 08 11 40 	rsub	r8,r5,64
80008e82:	f6 0c 0a 4c 	lsr	r12,r11,r12
80008e86:	ec 08 09 46 	lsl	r6,r6,r8
80008e8a:	0c 4c       	or	r12,r6
80008e8c:	c0 78       	rjmp	80008e9a <_dtoa_r+0x156>
80008e8e:	d7 03       	nop
80008e90:	ea 0c 11 20 	rsub	r12,r5,32
80008e94:	40 3a       	lddsp	r10,sp[0xc]
80008e96:	f4 0c 09 4c 	lsl	r12,r10,r12
80008e9a:	fe b0 e7 ac 	rcall	80005df2 <__avr32_u32_to_f64>
80008e9e:	fc 18 fe 10 	movh	r8,0xfe10
80008ea2:	30 19       	mov	r9,1
80008ea4:	ea c5 04 33 	sub	r5,r5,1075
80008ea8:	f0 0b 00 0b 	add	r11,r8,r11
80008eac:	51 79       	stdsp	sp[0x5c],r9
80008eae:	30 08       	mov	r8,0
80008eb0:	fc 19 3f f8 	movh	r9,0x3ff8
80008eb4:	fe b0 e6 34 	rcall	80005b1c <__avr32_f64_sub>
80008eb8:	e0 68 43 61 	mov	r8,17249
80008ebc:	ea 18 63 6f 	orh	r8,0x636f
80008ec0:	e0 69 87 a7 	mov	r9,34727
80008ec4:	ea 19 3f d2 	orh	r9,0x3fd2
80008ec8:	e0 a0 11 be 	rcall	8000b244 <__avr32_f64_mul>
80008ecc:	e0 68 c8 b3 	mov	r8,51379
80008ed0:	ea 18 8b 60 	orh	r8,0x8b60
80008ed4:	e0 69 8a 28 	mov	r9,35368
80008ed8:	ea 19 3f c6 	orh	r9,0x3fc6
80008edc:	fe b0 e6 ee 	rcall	80005cb8 <__avr32_f64_add>
80008ee0:	0a 9c       	mov	r12,r5
80008ee2:	14 90       	mov	r0,r10
80008ee4:	16 91       	mov	r1,r11
80008ee6:	fe b0 e7 8a 	rcall	80005dfa <__avr32_s32_to_f64>
80008eea:	e0 68 79 fb 	mov	r8,31227
80008eee:	ea 18 50 9f 	orh	r8,0x509f
80008ef2:	e0 69 44 13 	mov	r9,17427
80008ef6:	ea 19 3f d3 	orh	r9,0x3fd3
80008efa:	e0 a0 11 a5 	rcall	8000b244 <__avr32_f64_mul>
80008efe:	14 98       	mov	r8,r10
80008f00:	16 99       	mov	r9,r11
80008f02:	00 9a       	mov	r10,r0
80008f04:	02 9b       	mov	r11,r1
80008f06:	fe b0 e6 d9 	rcall	80005cb8 <__avr32_f64_add>
80008f0a:	14 90       	mov	r0,r10
80008f0c:	16 91       	mov	r1,r11
80008f0e:	fe b0 e7 5f 	rcall	80005dcc <__avr32_f64_to_s32>
80008f12:	30 08       	mov	r8,0
80008f14:	18 96       	mov	r6,r12
80008f16:	30 09       	mov	r9,0
80008f18:	00 9a       	mov	r10,r0
80008f1a:	02 9b       	mov	r11,r1
80008f1c:	e0 a0 12 c5 	rcall	8000b4a6 <__avr32_f64_cmp_lt>
80008f20:	c0 c0       	breq	80008f38 <_dtoa_r+0x1f4>
80008f22:	0c 9c       	mov	r12,r6
80008f24:	fe b0 e7 6b 	rcall	80005dfa <__avr32_s32_to_f64>
80008f28:	14 98       	mov	r8,r10
80008f2a:	16 99       	mov	r9,r11
80008f2c:	00 9a       	mov	r10,r0
80008f2e:	02 9b       	mov	r11,r1
80008f30:	e0 a0 12 74 	rcall	8000b418 <__avr32_f64_cmp_eq>
80008f34:	f7 b6 00 01 	subeq	r6,1
80008f38:	59 66       	cp.w	r6,22
80008f3a:	e0 88 00 05 	brls	80008f44 <_dtoa_r+0x200>
80008f3e:	30 18       	mov	r8,1
80008f40:	51 48       	stdsp	sp[0x50],r8
80008f42:	c1 38       	rjmp	80008f68 <_dtoa_r+0x224>
80008f44:	fe c8 ce c0 	sub	r8,pc,-12608
80008f48:	fa ea 00 3c 	ld.d	r10,sp[60]
80008f4c:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
80008f50:	e0 a0 12 ab 	rcall	8000b4a6 <__avr32_f64_cmp_lt>
80008f54:	f9 b4 00 00 	moveq	r4,0
80008f58:	fb f4 0a 14 	st.weq	sp[0x50],r4
80008f5c:	f7 b6 01 01 	subne	r6,1
80008f60:	f9 bc 01 00 	movne	r12,0
80008f64:	fb fc 1a 14 	st.wne	sp[0x50],r12
80008f68:	41 90       	lddsp	r0,sp[0x64]
80008f6a:	20 10       	sub	r0,1
80008f6c:	0a 10       	sub	r0,r5
80008f6e:	c0 46       	brmi	80008f76 <_dtoa_r+0x232>
80008f70:	50 40       	stdsp	sp[0x10],r0
80008f72:	30 00       	mov	r0,0
80008f74:	c0 48       	rjmp	80008f7c <_dtoa_r+0x238>
80008f76:	30 0b       	mov	r11,0
80008f78:	5c 30       	neg	r0
80008f7a:	50 4b       	stdsp	sp[0x10],r11
80008f7c:	ec 02 11 00 	rsub	r2,r6,0
80008f80:	58 06       	cp.w	r6,0
80008f82:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80008f86:	f5 d6 e4 0a 	addge	r10,r10,r6
80008f8a:	fb fa 4a 04 	st.wge	sp[0x10],r10
80008f8e:	fb f6 4a 11 	st.wge	sp[0x44],r6
80008f92:	f9 b2 04 00 	movge	r2,0
80008f96:	e1 d6 e5 10 	sublt	r0,r0,r6
80008f9a:	f9 b9 05 00 	movlt	r9,0
80008f9e:	fb f9 5a 11 	st.wlt	sp[0x44],r9
80008fa2:	40 c8       	lddsp	r8,sp[0x30]
80008fa4:	58 98       	cp.w	r8,9
80008fa6:	e0 8b 00 20 	brhi	80008fe6 <_dtoa_r+0x2a2>
80008faa:	58 58       	cp.w	r8,5
80008fac:	f9 b4 0a 01 	movle	r4,1
80008fb0:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80008fb4:	f7 b5 09 04 	subgt	r5,4
80008fb8:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80008fbc:	f9 b4 09 00 	movgt	r4,0
80008fc0:	40 cc       	lddsp	r12,sp[0x30]
80008fc2:	58 3c       	cp.w	r12,3
80008fc4:	c2 d0       	breq	8000901e <_dtoa_r+0x2da>
80008fc6:	e0 89 00 05 	brgt	80008fd0 <_dtoa_r+0x28c>
80008fca:	58 2c       	cp.w	r12,2
80008fcc:	c1 01       	brne	80008fec <_dtoa_r+0x2a8>
80008fce:	c1 88       	rjmp	80008ffe <_dtoa_r+0x2ba>
80008fd0:	40 cb       	lddsp	r11,sp[0x30]
80008fd2:	58 4b       	cp.w	r11,4
80008fd4:	c0 60       	breq	80008fe0 <_dtoa_r+0x29c>
80008fd6:	58 5b       	cp.w	r11,5
80008fd8:	c0 a1       	brne	80008fec <_dtoa_r+0x2a8>
80008fda:	30 1a       	mov	r10,1
80008fdc:	50 da       	stdsp	sp[0x34],r10
80008fde:	c2 28       	rjmp	80009022 <_dtoa_r+0x2de>
80008fe0:	30 19       	mov	r9,1
80008fe2:	50 d9       	stdsp	sp[0x34],r9
80008fe4:	c0 f8       	rjmp	80009002 <_dtoa_r+0x2be>
80008fe6:	30 08       	mov	r8,0
80008fe8:	30 14       	mov	r4,1
80008fea:	50 c8       	stdsp	sp[0x30],r8
80008fec:	3f f5       	mov	r5,-1
80008fee:	30 1c       	mov	r12,1
80008ff0:	30 0b       	mov	r11,0
80008ff2:	50 95       	stdsp	sp[0x24],r5
80008ff4:	50 dc       	stdsp	sp[0x34],r12
80008ff6:	0a 91       	mov	r1,r5
80008ff8:	31 28       	mov	r8,18
80008ffa:	50 eb       	stdsp	sp[0x38],r11
80008ffc:	c2 08       	rjmp	8000903c <_dtoa_r+0x2f8>
80008ffe:	30 0a       	mov	r10,0
80009000:	50 da       	stdsp	sp[0x34],r10
80009002:	40 e9       	lddsp	r9,sp[0x38]
80009004:	58 09       	cp.w	r9,0
80009006:	e0 89 00 07 	brgt	80009014 <_dtoa_r+0x2d0>
8000900a:	30 18       	mov	r8,1
8000900c:	50 98       	stdsp	sp[0x24],r8
8000900e:	10 91       	mov	r1,r8
80009010:	50 e8       	stdsp	sp[0x38],r8
80009012:	c1 58       	rjmp	8000903c <_dtoa_r+0x2f8>
80009014:	40 e5       	lddsp	r5,sp[0x38]
80009016:	50 95       	stdsp	sp[0x24],r5
80009018:	0a 91       	mov	r1,r5
8000901a:	0a 98       	mov	r8,r5
8000901c:	c1 08       	rjmp	8000903c <_dtoa_r+0x2f8>
8000901e:	30 0c       	mov	r12,0
80009020:	50 dc       	stdsp	sp[0x34],r12
80009022:	40 eb       	lddsp	r11,sp[0x38]
80009024:	ec 0b 00 0b 	add	r11,r6,r11
80009028:	50 9b       	stdsp	sp[0x24],r11
8000902a:	16 98       	mov	r8,r11
8000902c:	2f f8       	sub	r8,-1
8000902e:	58 08       	cp.w	r8,0
80009030:	e0 89 00 05 	brgt	8000903a <_dtoa_r+0x2f6>
80009034:	10 91       	mov	r1,r8
80009036:	30 18       	mov	r8,1
80009038:	c0 28       	rjmp	8000903c <_dtoa_r+0x2f8>
8000903a:	10 91       	mov	r1,r8
8000903c:	30 09       	mov	r9,0
8000903e:	6e 9a       	ld.w	r10,r7[0x24]
80009040:	95 19       	st.w	r10[0x4],r9
80009042:	30 49       	mov	r9,4
80009044:	c0 68       	rjmp	80009050 <_dtoa_r+0x30c>
80009046:	d7 03       	nop
80009048:	6a 1a       	ld.w	r10,r5[0x4]
8000904a:	a1 79       	lsl	r9,0x1
8000904c:	2f fa       	sub	r10,-1
8000904e:	8b 1a       	st.w	r5[0x4],r10
80009050:	6e 95       	ld.w	r5,r7[0x24]
80009052:	f2 ca ff ec 	sub	r10,r9,-20
80009056:	10 3a       	cp.w	r10,r8
80009058:	fe 98 ff f8 	brls	80009048 <_dtoa_r+0x304>
8000905c:	6a 1b       	ld.w	r11,r5[0x4]
8000905e:	0e 9c       	mov	r12,r7
80009060:	e0 a0 0b 6e 	rcall	8000a73c <_Balloc>
80009064:	58 e1       	cp.w	r1,14
80009066:	5f 88       	srls	r8
80009068:	8b 0c       	st.w	r5[0x0],r12
8000906a:	f1 e4 00 04 	and	r4,r8,r4
8000906e:	6e 98       	ld.w	r8,r7[0x24]
80009070:	70 08       	ld.w	r8,r8[0x0]
80009072:	50 88       	stdsp	sp[0x20],r8
80009074:	e0 80 01 82 	breq	80009378 <_dtoa_r+0x634>
80009078:	58 06       	cp.w	r6,0
8000907a:	e0 8a 00 43 	brle	80009100 <_dtoa_r+0x3bc>
8000907e:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
80009082:	fe c8 cf fe 	sub	r8,pc,-12290
80009086:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
8000908a:	fa e5 00 18 	st.d	sp[24],r4
8000908e:	ec 04 14 04 	asr	r4,r6,0x4
80009092:	ed b4 00 04 	bld	r4,0x4
80009096:	c0 30       	breq	8000909c <_dtoa_r+0x358>
80009098:	30 25       	mov	r5,2
8000909a:	c1 08       	rjmp	800090ba <_dtoa_r+0x376>
8000909c:	fe c8 cf 50 	sub	r8,pc,-12464
800090a0:	f0 e8 00 20 	ld.d	r8,r8[32]
800090a4:	fa ea 00 3c 	ld.d	r10,sp[60]
800090a8:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
800090ac:	fe b0 e7 18 	rcall	80005edc <__avr32_f64_div>
800090b0:	30 35       	mov	r5,3
800090b2:	14 98       	mov	r8,r10
800090b4:	16 99       	mov	r9,r11
800090b6:	fa e9 00 08 	st.d	sp[8],r8
800090ba:	fe cc cf 6e 	sub	r12,pc,-12434
800090be:	50 a3       	stdsp	sp[0x28],r3
800090c0:	0c 93       	mov	r3,r6
800090c2:	18 96       	mov	r6,r12
800090c4:	c0 f8       	rjmp	800090e2 <_dtoa_r+0x39e>
800090c6:	fa ea 00 18 	ld.d	r10,sp[24]
800090ca:	ed b4 00 00 	bld	r4,0x0
800090ce:	c0 81       	brne	800090de <_dtoa_r+0x39a>
800090d0:	ec e8 00 00 	ld.d	r8,r6[0]
800090d4:	2f f5       	sub	r5,-1
800090d6:	e0 a0 10 b7 	rcall	8000b244 <__avr32_f64_mul>
800090da:	fa eb 00 18 	st.d	sp[24],r10
800090de:	a1 54       	asr	r4,0x1
800090e0:	2f 86       	sub	r6,-8
800090e2:	58 04       	cp.w	r4,0
800090e4:	cf 11       	brne	800090c6 <_dtoa_r+0x382>
800090e6:	fa e8 00 18 	ld.d	r8,sp[24]
800090ea:	fa ea 00 08 	ld.d	r10,sp[8]
800090ee:	06 96       	mov	r6,r3
800090f0:	fe b0 e6 f6 	rcall	80005edc <__avr32_f64_div>
800090f4:	40 a3       	lddsp	r3,sp[0x28]
800090f6:	14 98       	mov	r8,r10
800090f8:	16 99       	mov	r9,r11
800090fa:	fa e9 00 08 	st.d	sp[8],r8
800090fe:	c2 f8       	rjmp	8000915c <_dtoa_r+0x418>
80009100:	ec 08 11 00 	rsub	r8,r6,0
80009104:	c0 31       	brne	8000910a <_dtoa_r+0x3c6>
80009106:	30 25       	mov	r5,2
80009108:	c2 a8       	rjmp	8000915c <_dtoa_r+0x418>
8000910a:	fe cc cf be 	sub	r12,pc,-12354
8000910e:	f0 04 14 04 	asr	r4,r8,0x4
80009112:	50 1c       	stdsp	sp[0x4],r12
80009114:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009118:	fe c9 d0 94 	sub	r9,pc,-12140
8000911c:	fa ea 00 3c 	ld.d	r10,sp[60]
80009120:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80009124:	e0 a0 10 90 	rcall	8000b244 <__avr32_f64_mul>
80009128:	40 1c       	lddsp	r12,sp[0x4]
8000912a:	50 63       	stdsp	sp[0x18],r3
8000912c:	30 25       	mov	r5,2
8000912e:	0c 93       	mov	r3,r6
80009130:	fa eb 00 08 	st.d	sp[8],r10
80009134:	18 96       	mov	r6,r12
80009136:	c0 f8       	rjmp	80009154 <_dtoa_r+0x410>
80009138:	fa ea 00 08 	ld.d	r10,sp[8]
8000913c:	ed b4 00 00 	bld	r4,0x0
80009140:	c0 81       	brne	80009150 <_dtoa_r+0x40c>
80009142:	ec e8 00 00 	ld.d	r8,r6[0]
80009146:	2f f5       	sub	r5,-1
80009148:	e0 a0 10 7e 	rcall	8000b244 <__avr32_f64_mul>
8000914c:	fa eb 00 08 	st.d	sp[8],r10
80009150:	a1 54       	asr	r4,0x1
80009152:	2f 86       	sub	r6,-8
80009154:	58 04       	cp.w	r4,0
80009156:	cf 11       	brne	80009138 <_dtoa_r+0x3f4>
80009158:	06 96       	mov	r6,r3
8000915a:	40 63       	lddsp	r3,sp[0x18]
8000915c:	41 4a       	lddsp	r10,sp[0x50]
8000915e:	58 0a       	cp.w	r10,0
80009160:	c2 a0       	breq	800091b4 <_dtoa_r+0x470>
80009162:	fa e8 00 08 	ld.d	r8,sp[8]
80009166:	58 01       	cp.w	r1,0
80009168:	5f 94       	srgt	r4
8000916a:	fa e9 00 18 	st.d	sp[24],r8
8000916e:	30 08       	mov	r8,0
80009170:	fc 19 3f f0 	movh	r9,0x3ff0
80009174:	fa ea 00 18 	ld.d	r10,sp[24]
80009178:	e0 a0 11 97 	rcall	8000b4a6 <__avr32_f64_cmp_lt>
8000917c:	f9 bc 00 00 	moveq	r12,0
80009180:	f9 bc 01 01 	movne	r12,1
80009184:	e9 ec 00 0c 	and	r12,r4,r12
80009188:	c1 60       	breq	800091b4 <_dtoa_r+0x470>
8000918a:	40 98       	lddsp	r8,sp[0x24]
8000918c:	58 08       	cp.w	r8,0
8000918e:	e0 8a 00 f1 	brle	80009370 <_dtoa_r+0x62c>
80009192:	30 08       	mov	r8,0
80009194:	fc 19 40 24 	movh	r9,0x4024
80009198:	ec c4 00 01 	sub	r4,r6,1
8000919c:	fa ea 00 18 	ld.d	r10,sp[24]
800091a0:	2f f5       	sub	r5,-1
800091a2:	50 64       	stdsp	sp[0x18],r4
800091a4:	e0 a0 10 50 	rcall	8000b244 <__avr32_f64_mul>
800091a8:	40 94       	lddsp	r4,sp[0x24]
800091aa:	14 98       	mov	r8,r10
800091ac:	16 99       	mov	r9,r11
800091ae:	fa e9 00 08 	st.d	sp[8],r8
800091b2:	c0 38       	rjmp	800091b8 <_dtoa_r+0x474>
800091b4:	50 66       	stdsp	sp[0x18],r6
800091b6:	02 94       	mov	r4,r1
800091b8:	0a 9c       	mov	r12,r5
800091ba:	fe b0 e6 20 	rcall	80005dfa <__avr32_s32_to_f64>
800091be:	fa e8 00 08 	ld.d	r8,sp[8]
800091c2:	e0 a0 10 41 	rcall	8000b244 <__avr32_f64_mul>
800091c6:	30 08       	mov	r8,0
800091c8:	fc 19 40 1c 	movh	r9,0x401c
800091cc:	fe b0 e5 76 	rcall	80005cb8 <__avr32_f64_add>
800091d0:	14 98       	mov	r8,r10
800091d2:	16 99       	mov	r9,r11
800091d4:	fa e9 00 28 	st.d	sp[40],r8
800091d8:	fc 18 fc c0 	movh	r8,0xfcc0
800091dc:	40 a5       	lddsp	r5,sp[0x28]
800091de:	10 05       	add	r5,r8
800091e0:	50 a5       	stdsp	sp[0x28],r5
800091e2:	58 04       	cp.w	r4,0
800091e4:	c2 11       	brne	80009226 <_dtoa_r+0x4e2>
800091e6:	fa ea 00 08 	ld.d	r10,sp[8]
800091ea:	30 08       	mov	r8,0
800091ec:	fc 19 40 14 	movh	r9,0x4014
800091f0:	fe b0 e4 96 	rcall	80005b1c <__avr32_f64_sub>
800091f4:	40 bc       	lddsp	r12,sp[0x2c]
800091f6:	fa eb 00 08 	st.d	sp[8],r10
800091fa:	14 98       	mov	r8,r10
800091fc:	16 99       	mov	r9,r11
800091fe:	18 9a       	mov	r10,r12
80009200:	0a 9b       	mov	r11,r5
80009202:	e0 a0 11 52 	rcall	8000b4a6 <__avr32_f64_cmp_lt>
80009206:	e0 81 02 54 	brne	800096ae <_dtoa_r+0x96a>
8000920a:	0a 98       	mov	r8,r5
8000920c:	40 b9       	lddsp	r9,sp[0x2c]
8000920e:	ee 18 80 00 	eorh	r8,0x8000
80009212:	fa ea 00 08 	ld.d	r10,sp[8]
80009216:	10 95       	mov	r5,r8
80009218:	12 98       	mov	r8,r9
8000921a:	0a 99       	mov	r9,r5
8000921c:	e0 a0 11 45 	rcall	8000b4a6 <__avr32_f64_cmp_lt>
80009220:	e0 81 02 3e 	brne	8000969c <_dtoa_r+0x958>
80009224:	ca 68       	rjmp	80009370 <_dtoa_r+0x62c>
80009226:	fe c9 d1 a2 	sub	r9,pc,-11870
8000922a:	e8 c8 00 01 	sub	r8,r4,1
8000922e:	40 d5       	lddsp	r5,sp[0x34]
80009230:	58 05       	cp.w	r5,0
80009232:	c4 f0       	breq	800092d0 <_dtoa_r+0x58c>
80009234:	30 0c       	mov	r12,0
80009236:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
8000923a:	51 3c       	stdsp	sp[0x4c],r12
8000923c:	30 0a       	mov	r10,0
8000923e:	fc 1b 3f e0 	movh	r11,0x3fe0
80009242:	fe b0 e6 4d 	rcall	80005edc <__avr32_f64_div>
80009246:	fa e8 00 28 	ld.d	r8,sp[40]
8000924a:	40 85       	lddsp	r5,sp[0x20]
8000924c:	fe b0 e4 68 	rcall	80005b1c <__avr32_f64_sub>
80009250:	fa eb 00 28 	st.d	sp[40],r10
80009254:	fa ea 00 08 	ld.d	r10,sp[8]
80009258:	fe b0 e5 ba 	rcall	80005dcc <__avr32_f64_to_s32>
8000925c:	51 6c       	stdsp	sp[0x58],r12
8000925e:	fe b0 e5 ce 	rcall	80005dfa <__avr32_s32_to_f64>
80009262:	14 98       	mov	r8,r10
80009264:	16 99       	mov	r9,r11
80009266:	fa ea 00 08 	ld.d	r10,sp[8]
8000926a:	fe b0 e4 59 	rcall	80005b1c <__avr32_f64_sub>
8000926e:	fa eb 00 08 	st.d	sp[8],r10
80009272:	41 68       	lddsp	r8,sp[0x58]
80009274:	2d 08       	sub	r8,-48
80009276:	0a c8       	st.b	r5++,r8
80009278:	41 39       	lddsp	r9,sp[0x4c]
8000927a:	2f f9       	sub	r9,-1
8000927c:	51 39       	stdsp	sp[0x4c],r9
8000927e:	fa e8 00 28 	ld.d	r8,sp[40]
80009282:	e0 a0 11 12 	rcall	8000b4a6 <__avr32_f64_cmp_lt>
80009286:	e0 81 03 39 	brne	800098f8 <_dtoa_r+0xbb4>
8000928a:	fa e8 00 08 	ld.d	r8,sp[8]
8000928e:	30 0a       	mov	r10,0
80009290:	fc 1b 3f f0 	movh	r11,0x3ff0
80009294:	fe b0 e4 44 	rcall	80005b1c <__avr32_f64_sub>
80009298:	fa e8 00 28 	ld.d	r8,sp[40]
8000929c:	e0 a0 11 05 	rcall	8000b4a6 <__avr32_f64_cmp_lt>
800092a0:	fa ea 00 28 	ld.d	r10,sp[40]
800092a4:	30 08       	mov	r8,0
800092a6:	fc 19 40 24 	movh	r9,0x4024
800092aa:	e0 81 00 da 	brne	8000945e <_dtoa_r+0x71a>
800092ae:	41 3c       	lddsp	r12,sp[0x4c]
800092b0:	08 3c       	cp.w	r12,r4
800092b2:	c5 f4       	brge	80009370 <_dtoa_r+0x62c>
800092b4:	e0 a0 0f c8 	rcall	8000b244 <__avr32_f64_mul>
800092b8:	30 08       	mov	r8,0
800092ba:	fa eb 00 28 	st.d	sp[40],r10
800092be:	fc 19 40 24 	movh	r9,0x4024
800092c2:	fa ea 00 08 	ld.d	r10,sp[8]
800092c6:	e0 a0 0f bf 	rcall	8000b244 <__avr32_f64_mul>
800092ca:	fa eb 00 08 	st.d	sp[8],r10
800092ce:	cc 3b       	rjmp	80009254 <_dtoa_r+0x510>
800092d0:	40 85       	lddsp	r5,sp[0x20]
800092d2:	08 05       	add	r5,r4
800092d4:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
800092d8:	51 35       	stdsp	sp[0x4c],r5
800092da:	fa e8 00 28 	ld.d	r8,sp[40]
800092de:	40 85       	lddsp	r5,sp[0x20]
800092e0:	e0 a0 0f b2 	rcall	8000b244 <__avr32_f64_mul>
800092e4:	fa eb 00 28 	st.d	sp[40],r10
800092e8:	fa ea 00 08 	ld.d	r10,sp[8]
800092ec:	fe b0 e5 70 	rcall	80005dcc <__avr32_f64_to_s32>
800092f0:	51 6c       	stdsp	sp[0x58],r12
800092f2:	fe b0 e5 84 	rcall	80005dfa <__avr32_s32_to_f64>
800092f6:	14 98       	mov	r8,r10
800092f8:	16 99       	mov	r9,r11
800092fa:	fa ea 00 08 	ld.d	r10,sp[8]
800092fe:	fe b0 e4 0f 	rcall	80005b1c <__avr32_f64_sub>
80009302:	fa eb 00 08 	st.d	sp[8],r10
80009306:	41 68       	lddsp	r8,sp[0x58]
80009308:	2d 08       	sub	r8,-48
8000930a:	0a c8       	st.b	r5++,r8
8000930c:	41 3c       	lddsp	r12,sp[0x4c]
8000930e:	18 35       	cp.w	r5,r12
80009310:	c2 81       	brne	80009360 <_dtoa_r+0x61c>
80009312:	30 08       	mov	r8,0
80009314:	fc 19 3f e0 	movh	r9,0x3fe0
80009318:	fa ea 00 28 	ld.d	r10,sp[40]
8000931c:	fe b0 e4 ce 	rcall	80005cb8 <__avr32_f64_add>
80009320:	40 85       	lddsp	r5,sp[0x20]
80009322:	fa e8 00 08 	ld.d	r8,sp[8]
80009326:	08 05       	add	r5,r4
80009328:	e0 a0 10 bf 	rcall	8000b4a6 <__avr32_f64_cmp_lt>
8000932c:	e0 81 00 99 	brne	8000945e <_dtoa_r+0x71a>
80009330:	fa e8 00 28 	ld.d	r8,sp[40]
80009334:	30 0a       	mov	r10,0
80009336:	fc 1b 3f e0 	movh	r11,0x3fe0
8000933a:	fe b0 e3 f1 	rcall	80005b1c <__avr32_f64_sub>
8000933e:	14 98       	mov	r8,r10
80009340:	16 99       	mov	r9,r11
80009342:	fa ea 00 08 	ld.d	r10,sp[8]
80009346:	e0 a0 10 b0 	rcall	8000b4a6 <__avr32_f64_cmp_lt>
8000934a:	c1 30       	breq	80009370 <_dtoa_r+0x62c>
8000934c:	33 09       	mov	r9,48
8000934e:	0a 98       	mov	r8,r5
80009350:	11 7a       	ld.ub	r10,--r8
80009352:	f2 0a 18 00 	cp.b	r10,r9
80009356:	e0 81 02 d1 	brne	800098f8 <_dtoa_r+0xbb4>
8000935a:	10 95       	mov	r5,r8
8000935c:	cf 9b       	rjmp	8000934e <_dtoa_r+0x60a>
8000935e:	d7 03       	nop
80009360:	30 08       	mov	r8,0
80009362:	fc 19 40 24 	movh	r9,0x4024
80009366:	e0 a0 0f 6f 	rcall	8000b244 <__avr32_f64_mul>
8000936a:	fa eb 00 08 	st.d	sp[8],r10
8000936e:	cb db       	rjmp	800092e8 <_dtoa_r+0x5a4>
80009370:	fa ea 00 3c 	ld.d	r10,sp[60]
80009374:	fa eb 00 08 	st.d	sp[8],r10
80009378:	58 e6       	cp.w	r6,14
8000937a:	5f ab       	srle	r11
8000937c:	41 8a       	lddsp	r10,sp[0x60]
8000937e:	30 08       	mov	r8,0
80009380:	f4 09 11 ff 	rsub	r9,r10,-1
80009384:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80009388:	f0 09 18 00 	cp.b	r9,r8
8000938c:	e0 80 00 82 	breq	80009490 <_dtoa_r+0x74c>
80009390:	40 ea       	lddsp	r10,sp[0x38]
80009392:	58 01       	cp.w	r1,0
80009394:	5f a9       	srle	r9
80009396:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
8000939a:	fe ca d3 16 	sub	r10,pc,-11498
8000939e:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
800093a2:	fa e5 00 10 	st.d	sp[16],r4
800093a6:	f0 09 18 00 	cp.b	r9,r8
800093aa:	c1 40       	breq	800093d2 <_dtoa_r+0x68e>
800093ac:	58 01       	cp.w	r1,0
800093ae:	e0 81 01 77 	brne	8000969c <_dtoa_r+0x958>
800093b2:	30 08       	mov	r8,0
800093b4:	fc 19 40 14 	movh	r9,0x4014
800093b8:	08 9a       	mov	r10,r4
800093ba:	0a 9b       	mov	r11,r5
800093bc:	e0 a0 0f 44 	rcall	8000b244 <__avr32_f64_mul>
800093c0:	fa e8 00 08 	ld.d	r8,sp[8]
800093c4:	e0 a0 10 3d 	rcall	8000b43e <__avr32_f64_cmp_ge>
800093c8:	e0 81 01 6a 	brne	8000969c <_dtoa_r+0x958>
800093cc:	02 92       	mov	r2,r1
800093ce:	e0 8f 01 72 	bral	800096b2 <_dtoa_r+0x96e>
800093d2:	40 85       	lddsp	r5,sp[0x20]
800093d4:	30 14       	mov	r4,1
800093d6:	fa e8 00 10 	ld.d	r8,sp[16]
800093da:	fa ea 00 08 	ld.d	r10,sp[8]
800093de:	fe b0 e5 7f 	rcall	80005edc <__avr32_f64_div>
800093e2:	fe b0 e4 f5 	rcall	80005dcc <__avr32_f64_to_s32>
800093e6:	18 92       	mov	r2,r12
800093e8:	fe b0 e5 09 	rcall	80005dfa <__avr32_s32_to_f64>
800093ec:	fa e8 00 10 	ld.d	r8,sp[16]
800093f0:	e0 a0 0f 2a 	rcall	8000b244 <__avr32_f64_mul>
800093f4:	14 98       	mov	r8,r10
800093f6:	16 99       	mov	r9,r11
800093f8:	fa ea 00 08 	ld.d	r10,sp[8]
800093fc:	fe b0 e3 90 	rcall	80005b1c <__avr32_f64_sub>
80009400:	fa eb 00 08 	st.d	sp[8],r10
80009404:	e4 c8 ff d0 	sub	r8,r2,-48
80009408:	0a c8       	st.b	r5++,r8
8000940a:	fc 19 40 24 	movh	r9,0x4024
8000940e:	30 08       	mov	r8,0
80009410:	02 34       	cp.w	r4,r1
80009412:	c3 31       	brne	80009478 <_dtoa_r+0x734>
80009414:	fa e8 00 08 	ld.d	r8,sp[8]
80009418:	fe b0 e4 50 	rcall	80005cb8 <__avr32_f64_add>
8000941c:	16 91       	mov	r1,r11
8000941e:	14 90       	mov	r0,r10
80009420:	14 98       	mov	r8,r10
80009422:	02 99       	mov	r9,r1
80009424:	fa ea 00 10 	ld.d	r10,sp[16]
80009428:	e0 a0 10 3f 	rcall	8000b4a6 <__avr32_f64_cmp_lt>
8000942c:	c1 a1       	brne	80009460 <_dtoa_r+0x71c>
8000942e:	fa e8 00 10 	ld.d	r8,sp[16]
80009432:	00 9a       	mov	r10,r0
80009434:	02 9b       	mov	r11,r1
80009436:	e0 a0 0f f1 	rcall	8000b418 <__avr32_f64_cmp_eq>
8000943a:	e0 80 02 5e 	breq	800098f6 <_dtoa_r+0xbb2>
8000943e:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
80009442:	c0 f1       	brne	80009460 <_dtoa_r+0x71c>
80009444:	e0 8f 02 59 	bral	800098f6 <_dtoa_r+0xbb2>
80009448:	40 8a       	lddsp	r10,sp[0x20]
8000944a:	14 38       	cp.w	r8,r10
8000944c:	c0 30       	breq	80009452 <_dtoa_r+0x70e>
8000944e:	10 95       	mov	r5,r8
80009450:	c0 98       	rjmp	80009462 <_dtoa_r+0x71e>
80009452:	33 08       	mov	r8,48
80009454:	40 89       	lddsp	r9,sp[0x20]
80009456:	2f f6       	sub	r6,-1
80009458:	b2 88       	st.b	r9[0x0],r8
8000945a:	40 88       	lddsp	r8,sp[0x20]
8000945c:	c0 88       	rjmp	8000946c <_dtoa_r+0x728>
8000945e:	40 66       	lddsp	r6,sp[0x18]
80009460:	33 99       	mov	r9,57
80009462:	0a 98       	mov	r8,r5
80009464:	11 7a       	ld.ub	r10,--r8
80009466:	f2 0a 18 00 	cp.b	r10,r9
8000946a:	ce f0       	breq	80009448 <_dtoa_r+0x704>
8000946c:	50 66       	stdsp	sp[0x18],r6
8000946e:	11 89       	ld.ub	r9,r8[0x0]
80009470:	2f f9       	sub	r9,-1
80009472:	b0 89       	st.b	r8[0x0],r9
80009474:	e0 8f 02 42 	bral	800098f8 <_dtoa_r+0xbb4>
80009478:	e0 a0 0e e6 	rcall	8000b244 <__avr32_f64_mul>
8000947c:	2f f4       	sub	r4,-1
8000947e:	fa eb 00 08 	st.d	sp[8],r10
80009482:	30 08       	mov	r8,0
80009484:	30 09       	mov	r9,0
80009486:	e0 a0 0f c9 	rcall	8000b418 <__avr32_f64_cmp_eq>
8000948a:	ca 60       	breq	800093d6 <_dtoa_r+0x692>
8000948c:	e0 8f 02 35 	bral	800098f6 <_dtoa_r+0xbb2>
80009490:	40 d8       	lddsp	r8,sp[0x34]
80009492:	58 08       	cp.w	r8,0
80009494:	c0 51       	brne	8000949e <_dtoa_r+0x75a>
80009496:	04 98       	mov	r8,r2
80009498:	00 95       	mov	r5,r0
8000949a:	40 d4       	lddsp	r4,sp[0x34]
8000949c:	c3 78       	rjmp	8000950a <_dtoa_r+0x7c6>
8000949e:	40 c5       	lddsp	r5,sp[0x30]
800094a0:	58 15       	cp.w	r5,1
800094a2:	e0 89 00 0f 	brgt	800094c0 <_dtoa_r+0x77c>
800094a6:	41 74       	lddsp	r4,sp[0x5c]
800094a8:	58 04       	cp.w	r4,0
800094aa:	c0 40       	breq	800094b2 <_dtoa_r+0x76e>
800094ac:	f4 c9 fb cd 	sub	r9,r10,-1075
800094b0:	c0 48       	rjmp	800094b8 <_dtoa_r+0x774>
800094b2:	41 99       	lddsp	r9,sp[0x64]
800094b4:	f2 09 11 36 	rsub	r9,r9,54
800094b8:	04 98       	mov	r8,r2
800094ba:	00 95       	mov	r5,r0
800094bc:	c1 c8       	rjmp	800094f4 <_dtoa_r+0x7b0>
800094be:	d7 03       	nop
800094c0:	e2 c8 00 01 	sub	r8,r1,1
800094c4:	58 01       	cp.w	r1,0
800094c6:	e0 05 17 40 	movge	r5,r0
800094ca:	e2 09 17 40 	movge	r9,r1
800094ce:	e1 d1 e5 15 	sublt	r5,r0,r1
800094d2:	f9 b9 05 00 	movlt	r9,0
800094d6:	10 32       	cp.w	r2,r8
800094d8:	e5 d8 e4 18 	subge	r8,r2,r8
800094dc:	f1 d2 e5 18 	sublt	r8,r8,r2
800094e0:	e5 d8 e5 02 	addlt	r2,r2,r8
800094e4:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
800094e8:	f9 d8 e5 0c 	addlt	r12,r12,r8
800094ec:	fb fc 5a 11 	st.wlt	sp[0x44],r12
800094f0:	f9 b8 05 00 	movlt	r8,0
800094f4:	40 4b       	lddsp	r11,sp[0x10]
800094f6:	12 0b       	add	r11,r9
800094f8:	50 08       	stdsp	sp[0x0],r8
800094fa:	50 4b       	stdsp	sp[0x10],r11
800094fc:	12 00       	add	r0,r9
800094fe:	30 1b       	mov	r11,1
80009500:	0e 9c       	mov	r12,r7
80009502:	e0 a0 0a d1 	rcall	8000aaa4 <__i2b>
80009506:	40 08       	lddsp	r8,sp[0x0]
80009508:	18 94       	mov	r4,r12
8000950a:	40 4a       	lddsp	r10,sp[0x10]
8000950c:	58 05       	cp.w	r5,0
8000950e:	5f 99       	srgt	r9
80009510:	58 0a       	cp.w	r10,0
80009512:	5f 9a       	srgt	r10
80009514:	f5 e9 00 09 	and	r9,r10,r9
80009518:	c0 80       	breq	80009528 <_dtoa_r+0x7e4>
8000951a:	40 4c       	lddsp	r12,sp[0x10]
8000951c:	f8 05 0d 49 	min	r9,r12,r5
80009520:	12 1c       	sub	r12,r9
80009522:	12 10       	sub	r0,r9
80009524:	50 4c       	stdsp	sp[0x10],r12
80009526:	12 15       	sub	r5,r9
80009528:	58 02       	cp.w	r2,0
8000952a:	e0 8a 00 27 	brle	80009578 <_dtoa_r+0x834>
8000952e:	40 db       	lddsp	r11,sp[0x34]
80009530:	58 0b       	cp.w	r11,0
80009532:	c1 d0       	breq	8000956c <_dtoa_r+0x828>
80009534:	58 08       	cp.w	r8,0
80009536:	e0 8a 00 17 	brle	80009564 <_dtoa_r+0x820>
8000953a:	10 9a       	mov	r10,r8
8000953c:	50 08       	stdsp	sp[0x0],r8
8000953e:	08 9b       	mov	r11,r4
80009540:	0e 9c       	mov	r12,r7
80009542:	e0 a0 0a f7 	rcall	8000ab30 <__pow5mult>
80009546:	06 9a       	mov	r10,r3
80009548:	18 9b       	mov	r11,r12
8000954a:	18 94       	mov	r4,r12
8000954c:	0e 9c       	mov	r12,r7
8000954e:	e0 a0 0a 2b 	rcall	8000a9a4 <__multiply>
80009552:	18 99       	mov	r9,r12
80009554:	06 9b       	mov	r11,r3
80009556:	50 19       	stdsp	sp[0x4],r9
80009558:	0e 9c       	mov	r12,r7
8000955a:	e0 a0 08 d7 	rcall	8000a708 <_Bfree>
8000955e:	40 19       	lddsp	r9,sp[0x4]
80009560:	40 08       	lddsp	r8,sp[0x0]
80009562:	12 93       	mov	r3,r9
80009564:	e4 08 01 0a 	sub	r10,r2,r8
80009568:	c0 80       	breq	80009578 <_dtoa_r+0x834>
8000956a:	c0 28       	rjmp	8000956e <_dtoa_r+0x82a>
8000956c:	04 9a       	mov	r10,r2
8000956e:	06 9b       	mov	r11,r3
80009570:	0e 9c       	mov	r12,r7
80009572:	e0 a0 0a df 	rcall	8000ab30 <__pow5mult>
80009576:	18 93       	mov	r3,r12
80009578:	30 1b       	mov	r11,1
8000957a:	0e 9c       	mov	r12,r7
8000957c:	e0 a0 0a 94 	rcall	8000aaa4 <__i2b>
80009580:	41 1a       	lddsp	r10,sp[0x44]
80009582:	18 92       	mov	r2,r12
80009584:	58 0a       	cp.w	r10,0
80009586:	e0 8a 00 07 	brle	80009594 <_dtoa_r+0x850>
8000958a:	18 9b       	mov	r11,r12
8000958c:	0e 9c       	mov	r12,r7
8000958e:	e0 a0 0a d1 	rcall	8000ab30 <__pow5mult>
80009592:	18 92       	mov	r2,r12
80009594:	40 c9       	lddsp	r9,sp[0x30]
80009596:	58 19       	cp.w	r9,1
80009598:	e0 89 00 14 	brgt	800095c0 <_dtoa_r+0x87c>
8000959c:	40 38       	lddsp	r8,sp[0xc]
8000959e:	58 08       	cp.w	r8,0
800095a0:	c1 01       	brne	800095c0 <_dtoa_r+0x87c>
800095a2:	40 29       	lddsp	r9,sp[0x8]
800095a4:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
800095a8:	c0 c1       	brne	800095c0 <_dtoa_r+0x87c>
800095aa:	12 98       	mov	r8,r9
800095ac:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800095b0:	c0 80       	breq	800095c0 <_dtoa_r+0x87c>
800095b2:	40 4c       	lddsp	r12,sp[0x10]
800095b4:	30 1b       	mov	r11,1
800095b6:	2f fc       	sub	r12,-1
800095b8:	2f f0       	sub	r0,-1
800095ba:	50 4c       	stdsp	sp[0x10],r12
800095bc:	50 6b       	stdsp	sp[0x18],r11
800095be:	c0 38       	rjmp	800095c4 <_dtoa_r+0x880>
800095c0:	30 0a       	mov	r10,0
800095c2:	50 6a       	stdsp	sp[0x18],r10
800095c4:	41 19       	lddsp	r9,sp[0x44]
800095c6:	58 09       	cp.w	r9,0
800095c8:	c0 31       	brne	800095ce <_dtoa_r+0x88a>
800095ca:	30 1c       	mov	r12,1
800095cc:	c0 98       	rjmp	800095de <_dtoa_r+0x89a>
800095ce:	64 48       	ld.w	r8,r2[0x10]
800095d0:	2f c8       	sub	r8,-4
800095d2:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
800095d6:	e0 a0 08 08 	rcall	8000a5e6 <__hi0bits>
800095da:	f8 0c 11 20 	rsub	r12,r12,32
800095de:	40 4b       	lddsp	r11,sp[0x10]
800095e0:	f8 0b 00 08 	add	r8,r12,r11
800095e4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800095e8:	c0 c0       	breq	80009600 <_dtoa_r+0x8bc>
800095ea:	f0 08 11 20 	rsub	r8,r8,32
800095ee:	58 48       	cp.w	r8,4
800095f0:	e0 8a 00 06 	brle	800095fc <_dtoa_r+0x8b8>
800095f4:	20 48       	sub	r8,4
800095f6:	10 0b       	add	r11,r8
800095f8:	50 4b       	stdsp	sp[0x10],r11
800095fa:	c0 78       	rjmp	80009608 <_dtoa_r+0x8c4>
800095fc:	58 48       	cp.w	r8,4
800095fe:	c0 70       	breq	8000960c <_dtoa_r+0x8c8>
80009600:	40 4a       	lddsp	r10,sp[0x10]
80009602:	2e 48       	sub	r8,-28
80009604:	10 0a       	add	r10,r8
80009606:	50 4a       	stdsp	sp[0x10],r10
80009608:	10 00       	add	r0,r8
8000960a:	10 05       	add	r5,r8
8000960c:	58 00       	cp.w	r0,0
8000960e:	e0 8a 00 08 	brle	8000961e <_dtoa_r+0x8da>
80009612:	06 9b       	mov	r11,r3
80009614:	00 9a       	mov	r10,r0
80009616:	0e 9c       	mov	r12,r7
80009618:	e0 a0 09 82 	rcall	8000a91c <__lshift>
8000961c:	18 93       	mov	r3,r12
8000961e:	40 49       	lddsp	r9,sp[0x10]
80009620:	58 09       	cp.w	r9,0
80009622:	e0 8a 00 08 	brle	80009632 <_dtoa_r+0x8ee>
80009626:	04 9b       	mov	r11,r2
80009628:	12 9a       	mov	r10,r9
8000962a:	0e 9c       	mov	r12,r7
8000962c:	e0 a0 09 78 	rcall	8000a91c <__lshift>
80009630:	18 92       	mov	r2,r12
80009632:	41 48       	lddsp	r8,sp[0x50]
80009634:	58 08       	cp.w	r8,0
80009636:	c1 b0       	breq	8000966c <_dtoa_r+0x928>
80009638:	04 9b       	mov	r11,r2
8000963a:	06 9c       	mov	r12,r3
8000963c:	e0 a0 08 4c 	rcall	8000a6d4 <__mcmp>
80009640:	c1 64       	brge	8000966c <_dtoa_r+0x928>
80009642:	06 9b       	mov	r11,r3
80009644:	30 09       	mov	r9,0
80009646:	30 aa       	mov	r10,10
80009648:	0e 9c       	mov	r12,r7
8000964a:	e0 a0 0a 35 	rcall	8000aab4 <__multadd>
8000964e:	20 16       	sub	r6,1
80009650:	18 93       	mov	r3,r12
80009652:	40 dc       	lddsp	r12,sp[0x34]
80009654:	58 0c       	cp.w	r12,0
80009656:	c0 31       	brne	8000965c <_dtoa_r+0x918>
80009658:	40 91       	lddsp	r1,sp[0x24]
8000965a:	c0 98       	rjmp	8000966c <_dtoa_r+0x928>
8000965c:	08 9b       	mov	r11,r4
8000965e:	40 91       	lddsp	r1,sp[0x24]
80009660:	30 09       	mov	r9,0
80009662:	30 aa       	mov	r10,10
80009664:	0e 9c       	mov	r12,r7
80009666:	e0 a0 0a 27 	rcall	8000aab4 <__multadd>
8000966a:	18 94       	mov	r4,r12
8000966c:	58 01       	cp.w	r1,0
8000966e:	5f a9       	srle	r9
80009670:	40 cb       	lddsp	r11,sp[0x30]
80009672:	58 2b       	cp.w	r11,2
80009674:	5f 98       	srgt	r8
80009676:	f3 e8 00 08 	and	r8,r9,r8
8000967a:	c2 50       	breq	800096c4 <_dtoa_r+0x980>
8000967c:	58 01       	cp.w	r1,0
8000967e:	c1 11       	brne	800096a0 <_dtoa_r+0x95c>
80009680:	04 9b       	mov	r11,r2
80009682:	02 99       	mov	r9,r1
80009684:	30 5a       	mov	r10,5
80009686:	0e 9c       	mov	r12,r7
80009688:	e0 a0 0a 16 	rcall	8000aab4 <__multadd>
8000968c:	18 92       	mov	r2,r12
8000968e:	18 9b       	mov	r11,r12
80009690:	06 9c       	mov	r12,r3
80009692:	e0 a0 08 21 	rcall	8000a6d4 <__mcmp>
80009696:	e0 89 00 0f 	brgt	800096b4 <_dtoa_r+0x970>
8000969a:	c0 38       	rjmp	800096a0 <_dtoa_r+0x95c>
8000969c:	30 02       	mov	r2,0
8000969e:	04 94       	mov	r4,r2
800096a0:	40 ea       	lddsp	r10,sp[0x38]
800096a2:	30 09       	mov	r9,0
800096a4:	5c da       	com	r10
800096a6:	40 85       	lddsp	r5,sp[0x20]
800096a8:	50 6a       	stdsp	sp[0x18],r10
800096aa:	50 49       	stdsp	sp[0x10],r9
800096ac:	c0 f9       	rjmp	800098ca <_dtoa_r+0xb86>
800096ae:	08 92       	mov	r2,r4
800096b0:	40 66       	lddsp	r6,sp[0x18]
800096b2:	04 94       	mov	r4,r2
800096b4:	2f f6       	sub	r6,-1
800096b6:	50 66       	stdsp	sp[0x18],r6
800096b8:	33 18       	mov	r8,49
800096ba:	40 85       	lddsp	r5,sp[0x20]
800096bc:	0a c8       	st.b	r5++,r8
800096be:	30 08       	mov	r8,0
800096c0:	50 48       	stdsp	sp[0x10],r8
800096c2:	c0 49       	rjmp	800098ca <_dtoa_r+0xb86>
800096c4:	40 dc       	lddsp	r12,sp[0x34]
800096c6:	58 0c       	cp.w	r12,0
800096c8:	e0 80 00 b5 	breq	80009832 <_dtoa_r+0xaee>
800096cc:	58 05       	cp.w	r5,0
800096ce:	e0 8a 00 08 	brle	800096de <_dtoa_r+0x99a>
800096d2:	08 9b       	mov	r11,r4
800096d4:	0a 9a       	mov	r10,r5
800096d6:	0e 9c       	mov	r12,r7
800096d8:	e0 a0 09 22 	rcall	8000a91c <__lshift>
800096dc:	18 94       	mov	r4,r12
800096de:	40 6b       	lddsp	r11,sp[0x18]
800096e0:	58 0b       	cp.w	r11,0
800096e2:	c0 31       	brne	800096e8 <_dtoa_r+0x9a4>
800096e4:	08 9c       	mov	r12,r4
800096e6:	c1 38       	rjmp	8000970c <_dtoa_r+0x9c8>
800096e8:	68 1b       	ld.w	r11,r4[0x4]
800096ea:	0e 9c       	mov	r12,r7
800096ec:	e0 a0 08 28 	rcall	8000a73c <_Balloc>
800096f0:	68 4a       	ld.w	r10,r4[0x10]
800096f2:	18 95       	mov	r5,r12
800096f4:	e8 cb ff f4 	sub	r11,r4,-12
800096f8:	2f ea       	sub	r10,-2
800096fa:	2f 4c       	sub	r12,-12
800096fc:	a3 6a       	lsl	r10,0x2
800096fe:	fe b0 e8 43 	rcall	80006784 <memcpy>
80009702:	0a 9b       	mov	r11,r5
80009704:	30 1a       	mov	r10,1
80009706:	0e 9c       	mov	r12,r7
80009708:	e0 a0 09 0a 	rcall	8000a91c <__lshift>
8000970c:	50 44       	stdsp	sp[0x10],r4
8000970e:	40 3a       	lddsp	r10,sp[0xc]
80009710:	30 19       	mov	r9,1
80009712:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80009716:	18 94       	mov	r4,r12
80009718:	50 da       	stdsp	sp[0x34],r10
8000971a:	40 85       	lddsp	r5,sp[0x20]
8000971c:	50 99       	stdsp	sp[0x24],r9
8000971e:	50 26       	stdsp	sp[0x8],r6
80009720:	50 e1       	stdsp	sp[0x38],r1
80009722:	04 9b       	mov	r11,r2
80009724:	06 9c       	mov	r12,r3
80009726:	fe b0 fa 7f 	rcall	80008c24 <quorem>
8000972a:	40 4b       	lddsp	r11,sp[0x10]
8000972c:	f8 c0 ff d0 	sub	r0,r12,-48
80009730:	06 9c       	mov	r12,r3
80009732:	e0 a0 07 d1 	rcall	8000a6d4 <__mcmp>
80009736:	08 9a       	mov	r10,r4
80009738:	50 6c       	stdsp	sp[0x18],r12
8000973a:	04 9b       	mov	r11,r2
8000973c:	0e 9c       	mov	r12,r7
8000973e:	e0 a0 08 87 	rcall	8000a84c <__mdiff>
80009742:	18 91       	mov	r1,r12
80009744:	78 38       	ld.w	r8,r12[0xc]
80009746:	58 08       	cp.w	r8,0
80009748:	c0 30       	breq	8000974e <_dtoa_r+0xa0a>
8000974a:	30 16       	mov	r6,1
8000974c:	c0 68       	rjmp	80009758 <_dtoa_r+0xa14>
8000974e:	18 9b       	mov	r11,r12
80009750:	06 9c       	mov	r12,r3
80009752:	e0 a0 07 c1 	rcall	8000a6d4 <__mcmp>
80009756:	18 96       	mov	r6,r12
80009758:	0e 9c       	mov	r12,r7
8000975a:	02 9b       	mov	r11,r1
8000975c:	e0 a0 07 d6 	rcall	8000a708 <_Bfree>
80009760:	40 cc       	lddsp	r12,sp[0x30]
80009762:	ed ec 10 08 	or	r8,r6,r12
80009766:	c0 d1       	brne	80009780 <_dtoa_r+0xa3c>
80009768:	40 db       	lddsp	r11,sp[0x34]
8000976a:	58 0b       	cp.w	r11,0
8000976c:	c0 a1       	brne	80009780 <_dtoa_r+0xa3c>
8000976e:	40 26       	lddsp	r6,sp[0x8]
80009770:	e0 40 00 39 	cp.w	r0,57
80009774:	c3 00       	breq	800097d4 <_dtoa_r+0xa90>
80009776:	40 6a       	lddsp	r10,sp[0x18]
80009778:	58 0a       	cp.w	r10,0
8000977a:	e0 89 00 24 	brgt	800097c2 <_dtoa_r+0xa7e>
8000977e:	c2 f8       	rjmp	800097dc <_dtoa_r+0xa98>
80009780:	40 69       	lddsp	r9,sp[0x18]
80009782:	58 09       	cp.w	r9,0
80009784:	c0 85       	brlt	80009794 <_dtoa_r+0xa50>
80009786:	12 98       	mov	r8,r9
80009788:	40 cc       	lddsp	r12,sp[0x30]
8000978a:	18 48       	or	r8,r12
8000978c:	c1 d1       	brne	800097c6 <_dtoa_r+0xa82>
8000978e:	40 db       	lddsp	r11,sp[0x34]
80009790:	58 0b       	cp.w	r11,0
80009792:	c1 a1       	brne	800097c6 <_dtoa_r+0xa82>
80009794:	0c 99       	mov	r9,r6
80009796:	40 26       	lddsp	r6,sp[0x8]
80009798:	58 09       	cp.w	r9,0
8000979a:	e0 8a 00 21 	brle	800097dc <_dtoa_r+0xa98>
8000979e:	06 9b       	mov	r11,r3
800097a0:	30 1a       	mov	r10,1
800097a2:	0e 9c       	mov	r12,r7
800097a4:	e0 a0 08 bc 	rcall	8000a91c <__lshift>
800097a8:	04 9b       	mov	r11,r2
800097aa:	18 93       	mov	r3,r12
800097ac:	e0 a0 07 94 	rcall	8000a6d4 <__mcmp>
800097b0:	e0 89 00 06 	brgt	800097bc <_dtoa_r+0xa78>
800097b4:	c1 41       	brne	800097dc <_dtoa_r+0xa98>
800097b6:	ed b0 00 00 	bld	r0,0x0
800097ba:	c1 11       	brne	800097dc <_dtoa_r+0xa98>
800097bc:	e0 40 00 39 	cp.w	r0,57
800097c0:	c0 a0       	breq	800097d4 <_dtoa_r+0xa90>
800097c2:	2f f0       	sub	r0,-1
800097c4:	c0 c8       	rjmp	800097dc <_dtoa_r+0xa98>
800097c6:	58 06       	cp.w	r6,0
800097c8:	e0 8a 00 0c 	brle	800097e0 <_dtoa_r+0xa9c>
800097cc:	40 26       	lddsp	r6,sp[0x8]
800097ce:	e0 40 00 39 	cp.w	r0,57
800097d2:	c0 41       	brne	800097da <_dtoa_r+0xa96>
800097d4:	33 98       	mov	r8,57
800097d6:	0a c8       	st.b	r5++,r8
800097d8:	c6 78       	rjmp	800098a6 <_dtoa_r+0xb62>
800097da:	2f f0       	sub	r0,-1
800097dc:	0a c0       	st.b	r5++,r0
800097de:	c7 58       	rjmp	800098c8 <_dtoa_r+0xb84>
800097e0:	0a c0       	st.b	r5++,r0
800097e2:	40 9a       	lddsp	r10,sp[0x24]
800097e4:	40 e9       	lddsp	r9,sp[0x38]
800097e6:	12 3a       	cp.w	r10,r9
800097e8:	c4 30       	breq	8000986e <_dtoa_r+0xb2a>
800097ea:	06 9b       	mov	r11,r3
800097ec:	30 09       	mov	r9,0
800097ee:	30 aa       	mov	r10,10
800097f0:	0e 9c       	mov	r12,r7
800097f2:	e0 a0 09 61 	rcall	8000aab4 <__multadd>
800097f6:	40 48       	lddsp	r8,sp[0x10]
800097f8:	18 93       	mov	r3,r12
800097fa:	08 38       	cp.w	r8,r4
800097fc:	c0 91       	brne	8000980e <_dtoa_r+0xaca>
800097fe:	10 9b       	mov	r11,r8
80009800:	30 09       	mov	r9,0
80009802:	30 aa       	mov	r10,10
80009804:	0e 9c       	mov	r12,r7
80009806:	e0 a0 09 57 	rcall	8000aab4 <__multadd>
8000980a:	50 4c       	stdsp	sp[0x10],r12
8000980c:	c0 e8       	rjmp	80009828 <_dtoa_r+0xae4>
8000980e:	40 4b       	lddsp	r11,sp[0x10]
80009810:	30 09       	mov	r9,0
80009812:	30 aa       	mov	r10,10
80009814:	0e 9c       	mov	r12,r7
80009816:	e0 a0 09 4f 	rcall	8000aab4 <__multadd>
8000981a:	08 9b       	mov	r11,r4
8000981c:	50 4c       	stdsp	sp[0x10],r12
8000981e:	30 09       	mov	r9,0
80009820:	30 aa       	mov	r10,10
80009822:	0e 9c       	mov	r12,r7
80009824:	e0 a0 09 48 	rcall	8000aab4 <__multadd>
80009828:	18 94       	mov	r4,r12
8000982a:	40 9c       	lddsp	r12,sp[0x24]
8000982c:	2f fc       	sub	r12,-1
8000982e:	50 9c       	stdsp	sp[0x24],r12
80009830:	c7 9b       	rjmp	80009722 <_dtoa_r+0x9de>
80009832:	30 18       	mov	r8,1
80009834:	06 90       	mov	r0,r3
80009836:	40 85       	lddsp	r5,sp[0x20]
80009838:	08 93       	mov	r3,r4
8000983a:	0c 94       	mov	r4,r6
8000983c:	10 96       	mov	r6,r8
8000983e:	04 9b       	mov	r11,r2
80009840:	00 9c       	mov	r12,r0
80009842:	fe b0 f9 f1 	rcall	80008c24 <quorem>
80009846:	2d 0c       	sub	r12,-48
80009848:	0a cc       	st.b	r5++,r12
8000984a:	02 36       	cp.w	r6,r1
8000984c:	c0 a4       	brge	80009860 <_dtoa_r+0xb1c>
8000984e:	00 9b       	mov	r11,r0
80009850:	30 09       	mov	r9,0
80009852:	30 aa       	mov	r10,10
80009854:	0e 9c       	mov	r12,r7
80009856:	2f f6       	sub	r6,-1
80009858:	e0 a0 09 2e 	rcall	8000aab4 <__multadd>
8000985c:	18 90       	mov	r0,r12
8000985e:	cf 0b       	rjmp	8000983e <_dtoa_r+0xafa>
80009860:	08 96       	mov	r6,r4
80009862:	30 0b       	mov	r11,0
80009864:	06 94       	mov	r4,r3
80009866:	50 4b       	stdsp	sp[0x10],r11
80009868:	00 93       	mov	r3,r0
8000986a:	18 90       	mov	r0,r12
8000986c:	c0 28       	rjmp	80009870 <_dtoa_r+0xb2c>
8000986e:	40 26       	lddsp	r6,sp[0x8]
80009870:	06 9b       	mov	r11,r3
80009872:	30 1a       	mov	r10,1
80009874:	0e 9c       	mov	r12,r7
80009876:	e0 a0 08 53 	rcall	8000a91c <__lshift>
8000987a:	04 9b       	mov	r11,r2
8000987c:	18 93       	mov	r3,r12
8000987e:	e0 a0 07 2b 	rcall	8000a6d4 <__mcmp>
80009882:	e0 89 00 12 	brgt	800098a6 <_dtoa_r+0xb62>
80009886:	c1 b1       	brne	800098bc <_dtoa_r+0xb78>
80009888:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
8000988c:	c0 d1       	brne	800098a6 <_dtoa_r+0xb62>
8000988e:	c1 78       	rjmp	800098bc <_dtoa_r+0xb78>
80009890:	40 89       	lddsp	r9,sp[0x20]
80009892:	12 38       	cp.w	r8,r9
80009894:	c0 30       	breq	8000989a <_dtoa_r+0xb56>
80009896:	10 95       	mov	r5,r8
80009898:	c0 88       	rjmp	800098a8 <_dtoa_r+0xb64>
8000989a:	2f f6       	sub	r6,-1
8000989c:	50 66       	stdsp	sp[0x18],r6
8000989e:	33 18       	mov	r8,49
800098a0:	40 8c       	lddsp	r12,sp[0x20]
800098a2:	b8 88       	st.b	r12[0x0],r8
800098a4:	c1 38       	rjmp	800098ca <_dtoa_r+0xb86>
800098a6:	33 9a       	mov	r10,57
800098a8:	0a 98       	mov	r8,r5
800098aa:	11 79       	ld.ub	r9,--r8
800098ac:	f4 09 18 00 	cp.b	r9,r10
800098b0:	cf 00       	breq	80009890 <_dtoa_r+0xb4c>
800098b2:	2f f9       	sub	r9,-1
800098b4:	b0 89       	st.b	r8[0x0],r9
800098b6:	c0 98       	rjmp	800098c8 <_dtoa_r+0xb84>
800098b8:	10 95       	mov	r5,r8
800098ba:	c0 28       	rjmp	800098be <_dtoa_r+0xb7a>
800098bc:	33 09       	mov	r9,48
800098be:	0a 98       	mov	r8,r5
800098c0:	11 7a       	ld.ub	r10,--r8
800098c2:	f2 0a 18 00 	cp.b	r10,r9
800098c6:	cf 90       	breq	800098b8 <_dtoa_r+0xb74>
800098c8:	50 66       	stdsp	sp[0x18],r6
800098ca:	04 9b       	mov	r11,r2
800098cc:	0e 9c       	mov	r12,r7
800098ce:	e0 a0 07 1d 	rcall	8000a708 <_Bfree>
800098d2:	58 04       	cp.w	r4,0
800098d4:	c1 20       	breq	800098f8 <_dtoa_r+0xbb4>
800098d6:	40 4b       	lddsp	r11,sp[0x10]
800098d8:	08 3b       	cp.w	r11,r4
800098da:	5f 19       	srne	r9
800098dc:	58 0b       	cp.w	r11,0
800098de:	5f 18       	srne	r8
800098e0:	f3 e8 00 08 	and	r8,r9,r8
800098e4:	c0 40       	breq	800098ec <_dtoa_r+0xba8>
800098e6:	0e 9c       	mov	r12,r7
800098e8:	e0 a0 07 10 	rcall	8000a708 <_Bfree>
800098ec:	08 9b       	mov	r11,r4
800098ee:	0e 9c       	mov	r12,r7
800098f0:	e0 a0 07 0c 	rcall	8000a708 <_Bfree>
800098f4:	c0 28       	rjmp	800098f8 <_dtoa_r+0xbb4>
800098f6:	50 66       	stdsp	sp[0x18],r6
800098f8:	0e 9c       	mov	r12,r7
800098fa:	06 9b       	mov	r11,r3
800098fc:	e0 a0 07 06 	rcall	8000a708 <_Bfree>
80009900:	30 08       	mov	r8,0
80009902:	aa 88       	st.b	r5[0x0],r8
80009904:	40 68       	lddsp	r8,sp[0x18]
80009906:	41 5a       	lddsp	r10,sp[0x54]
80009908:	2f f8       	sub	r8,-1
8000990a:	41 29       	lddsp	r9,sp[0x48]
8000990c:	95 08       	st.w	r10[0x0],r8
8000990e:	40 8c       	lddsp	r12,sp[0x20]
80009910:	58 09       	cp.w	r9,0
80009912:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80009916:	f1 f5 1a 00 	st.wne	r8[0x0],r5
8000991a:	2e 6d       	sub	sp,-104
8000991c:	d8 32       	popm	r0-r7,pc
8000991e:	d7 03       	nop

80009920 <_fflush_r>:
80009920:	d4 21       	pushm	r4-r7,lr
80009922:	16 97       	mov	r7,r11
80009924:	18 96       	mov	r6,r12
80009926:	76 48       	ld.w	r8,r11[0x10]
80009928:	58 08       	cp.w	r8,0
8000992a:	c7 f0       	breq	80009a28 <_fflush_r+0x108>
8000992c:	58 0c       	cp.w	r12,0
8000992e:	c0 50       	breq	80009938 <_fflush_r+0x18>
80009930:	78 68       	ld.w	r8,r12[0x18]
80009932:	58 08       	cp.w	r8,0
80009934:	c0 21       	brne	80009938 <_fflush_r+0x18>
80009936:	cc dc       	rcall	80009ad0 <__sinit>
80009938:	fe c8 d9 68 	sub	r8,pc,-9880
8000993c:	10 37       	cp.w	r7,r8
8000993e:	c0 31       	brne	80009944 <_fflush_r+0x24>
80009940:	6c 07       	ld.w	r7,r6[0x0]
80009942:	c0 c8       	rjmp	8000995a <_fflush_r+0x3a>
80009944:	fe c8 d9 54 	sub	r8,pc,-9900
80009948:	10 37       	cp.w	r7,r8
8000994a:	c0 31       	brne	80009950 <_fflush_r+0x30>
8000994c:	6c 17       	ld.w	r7,r6[0x4]
8000994e:	c0 68       	rjmp	8000995a <_fflush_r+0x3a>
80009950:	fe c8 d9 40 	sub	r8,pc,-9920
80009954:	10 37       	cp.w	r7,r8
80009956:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000995a:	8e 6a       	ld.sh	r10,r7[0xc]
8000995c:	14 98       	mov	r8,r10
8000995e:	ed ba 00 03 	bld	r10,0x3
80009962:	c4 20       	breq	800099e6 <_fflush_r+0xc6>
80009964:	ab ba       	sbr	r10,0xb
80009966:	ae 6a       	st.h	r7[0xc],r10
80009968:	6e 18       	ld.w	r8,r7[0x4]
8000996a:	58 08       	cp.w	r8,0
8000996c:	e0 89 00 06 	brgt	80009978 <_fflush_r+0x58>
80009970:	6f 08       	ld.w	r8,r7[0x40]
80009972:	58 08       	cp.w	r8,0
80009974:	e0 8a 00 5a 	brle	80009a28 <_fflush_r+0x108>
80009978:	6e b8       	ld.w	r8,r7[0x2c]
8000997a:	58 08       	cp.w	r8,0
8000997c:	c5 60       	breq	80009a28 <_fflush_r+0x108>
8000997e:	e2 1a 10 00 	andl	r10,0x1000,COH
80009982:	c0 30       	breq	80009988 <_fflush_r+0x68>
80009984:	6f 55       	ld.w	r5,r7[0x54]
80009986:	c0 f8       	rjmp	800099a4 <_fflush_r+0x84>
80009988:	30 19       	mov	r9,1
8000998a:	6e 8b       	ld.w	r11,r7[0x20]
8000998c:	0c 9c       	mov	r12,r6
8000998e:	5d 18       	icall	r8
80009990:	18 95       	mov	r5,r12
80009992:	5b fc       	cp.w	r12,-1
80009994:	c0 81       	brne	800099a4 <_fflush_r+0x84>
80009996:	6c 38       	ld.w	r8,r6[0xc]
80009998:	59 d8       	cp.w	r8,29
8000999a:	c4 70       	breq	80009a28 <_fflush_r+0x108>
8000999c:	8e 68       	ld.sh	r8,r7[0xc]
8000999e:	a7 a8       	sbr	r8,0x6
800099a0:	ae 68       	st.h	r7[0xc],r8
800099a2:	d8 22       	popm	r4-r7,pc
800099a4:	8e 68       	ld.sh	r8,r7[0xc]
800099a6:	ed b8 00 02 	bld	r8,0x2
800099aa:	c0 91       	brne	800099bc <_fflush_r+0x9c>
800099ac:	6e 18       	ld.w	r8,r7[0x4]
800099ae:	10 15       	sub	r5,r8
800099b0:	6e d8       	ld.w	r8,r7[0x34]
800099b2:	58 08       	cp.w	r8,0
800099b4:	ef f8 10 10 	ld.wne	r8,r7[0x40]
800099b8:	eb d8 e1 15 	subne	r5,r5,r8
800099bc:	6e b8       	ld.w	r8,r7[0x2c]
800099be:	0c 9c       	mov	r12,r6
800099c0:	30 09       	mov	r9,0
800099c2:	0a 9a       	mov	r10,r5
800099c4:	6e 8b       	ld.w	r11,r7[0x20]
800099c6:	5d 18       	icall	r8
800099c8:	8e 68       	ld.sh	r8,r7[0xc]
800099ca:	0a 3c       	cp.w	r12,r5
800099cc:	c2 61       	brne	80009a18 <_fflush_r+0xf8>
800099ce:	ab d8       	cbr	r8,0xb
800099d0:	30 0c       	mov	r12,0
800099d2:	6e 49       	ld.w	r9,r7[0x10]
800099d4:	ae 68       	st.h	r7[0xc],r8
800099d6:	8f 1c       	st.w	r7[0x4],r12
800099d8:	8f 09       	st.w	r7[0x0],r9
800099da:	ed b8 00 0c 	bld	r8,0xc
800099de:	c2 51       	brne	80009a28 <_fflush_r+0x108>
800099e0:	ef 45 00 54 	st.w	r7[84],r5
800099e4:	d8 22       	popm	r4-r7,pc
800099e6:	6e 45       	ld.w	r5,r7[0x10]
800099e8:	58 05       	cp.w	r5,0
800099ea:	c1 f0       	breq	80009a28 <_fflush_r+0x108>
800099ec:	6e 04       	ld.w	r4,r7[0x0]
800099ee:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
800099f2:	8f 05       	st.w	r7[0x0],r5
800099f4:	f9 b8 01 00 	movne	r8,0
800099f8:	ef f8 00 05 	ld.weq	r8,r7[0x14]
800099fc:	0a 14       	sub	r4,r5
800099fe:	8f 28       	st.w	r7[0x8],r8
80009a00:	c1 18       	rjmp	80009a22 <_fflush_r+0x102>
80009a02:	08 99       	mov	r9,r4
80009a04:	0a 9a       	mov	r10,r5
80009a06:	6e a8       	ld.w	r8,r7[0x28]
80009a08:	6e 8b       	ld.w	r11,r7[0x20]
80009a0a:	0c 9c       	mov	r12,r6
80009a0c:	5d 18       	icall	r8
80009a0e:	18 14       	sub	r4,r12
80009a10:	58 0c       	cp.w	r12,0
80009a12:	e0 89 00 07 	brgt	80009a20 <_fflush_r+0x100>
80009a16:	8e 68       	ld.sh	r8,r7[0xc]
80009a18:	a7 a8       	sbr	r8,0x6
80009a1a:	3f fc       	mov	r12,-1
80009a1c:	ae 68       	st.h	r7[0xc],r8
80009a1e:	d8 22       	popm	r4-r7,pc
80009a20:	18 05       	add	r5,r12
80009a22:	58 04       	cp.w	r4,0
80009a24:	fe 99 ff ef 	brgt	80009a02 <_fflush_r+0xe2>
80009a28:	d8 2a       	popm	r4-r7,pc,r12=0
80009a2a:	d7 03       	nop

80009a2c <__sfp_lock_acquire>:
80009a2c:	5e fc       	retal	r12

80009a2e <__sfp_lock_release>:
80009a2e:	5e fc       	retal	r12

80009a30 <_cleanup_r>:
80009a30:	d4 01       	pushm	lr
80009a32:	fe cb e8 6a 	sub	r11,pc,-6038
80009a36:	e0 a0 02 fd 	rcall	8000a030 <_fwalk>
80009a3a:	d8 02       	popm	pc

80009a3c <__sfmoreglue>:
80009a3c:	d4 21       	pushm	r4-r7,lr
80009a3e:	16 95       	mov	r5,r11
80009a40:	f6 06 10 5c 	mul	r6,r11,92
80009a44:	ec cb ff f4 	sub	r11,r6,-12
80009a48:	e0 a0 03 84 	rcall	8000a150 <_malloc_r>
80009a4c:	18 97       	mov	r7,r12
80009a4e:	c0 90       	breq	80009a60 <__sfmoreglue+0x24>
80009a50:	99 15       	st.w	r12[0x4],r5
80009a52:	30 0b       	mov	r11,0
80009a54:	2f 4c       	sub	r12,-12
80009a56:	0c 9a       	mov	r10,r6
80009a58:	8f 2c       	st.w	r7[0x8],r12
80009a5a:	8f 0b       	st.w	r7[0x0],r11
80009a5c:	e0 a0 05 bc 	rcall	8000a5d4 <memset>
80009a60:	0e 9c       	mov	r12,r7
80009a62:	d8 22       	popm	r4-r7,pc

80009a64 <__sfp>:
80009a64:	d4 21       	pushm	r4-r7,lr
80009a66:	fe c8 da 32 	sub	r8,pc,-9678
80009a6a:	18 96       	mov	r6,r12
80009a6c:	70 07       	ld.w	r7,r8[0x0]
80009a6e:	6e 68       	ld.w	r8,r7[0x18]
80009a70:	58 08       	cp.w	r8,0
80009a72:	c0 31       	brne	80009a78 <__sfp+0x14>
80009a74:	0e 9c       	mov	r12,r7
80009a76:	c2 dc       	rcall	80009ad0 <__sinit>
80009a78:	ee c7 ff 28 	sub	r7,r7,-216
80009a7c:	30 05       	mov	r5,0
80009a7e:	6e 2c       	ld.w	r12,r7[0x8]
80009a80:	6e 18       	ld.w	r8,r7[0x4]
80009a82:	c0 68       	rjmp	80009a8e <__sfp+0x2a>
80009a84:	98 69       	ld.sh	r9,r12[0xc]
80009a86:	ea 09 19 00 	cp.h	r9,r5
80009a8a:	c1 10       	breq	80009aac <__sfp+0x48>
80009a8c:	2a 4c       	sub	r12,-92
80009a8e:	20 18       	sub	r8,1
80009a90:	cf a7       	brpl	80009a84 <__sfp+0x20>
80009a92:	6e 08       	ld.w	r8,r7[0x0]
80009a94:	58 08       	cp.w	r8,0
80009a96:	c0 61       	brne	80009aa2 <__sfp+0x3e>
80009a98:	30 4b       	mov	r11,4
80009a9a:	0c 9c       	mov	r12,r6
80009a9c:	cd 0f       	rcall	80009a3c <__sfmoreglue>
80009a9e:	8f 0c       	st.w	r7[0x0],r12
80009aa0:	c0 30       	breq	80009aa6 <__sfp+0x42>
80009aa2:	6e 07       	ld.w	r7,r7[0x0]
80009aa4:	ce db       	rjmp	80009a7e <__sfp+0x1a>
80009aa6:	30 c8       	mov	r8,12
80009aa8:	8d 38       	st.w	r6[0xc],r8
80009aaa:	d8 22       	popm	r4-r7,pc
80009aac:	30 08       	mov	r8,0
80009aae:	f9 48 00 4c 	st.w	r12[76],r8
80009ab2:	99 08       	st.w	r12[0x0],r8
80009ab4:	99 28       	st.w	r12[0x8],r8
80009ab6:	99 18       	st.w	r12[0x4],r8
80009ab8:	99 48       	st.w	r12[0x10],r8
80009aba:	99 58       	st.w	r12[0x14],r8
80009abc:	99 68       	st.w	r12[0x18],r8
80009abe:	99 d8       	st.w	r12[0x34],r8
80009ac0:	99 e8       	st.w	r12[0x38],r8
80009ac2:	f9 48 00 48 	st.w	r12[72],r8
80009ac6:	3f f8       	mov	r8,-1
80009ac8:	b8 78       	st.h	r12[0xe],r8
80009aca:	30 18       	mov	r8,1
80009acc:	b8 68       	st.h	r12[0xc],r8
80009ace:	d8 22       	popm	r4-r7,pc

80009ad0 <__sinit>:
80009ad0:	d4 21       	pushm	r4-r7,lr
80009ad2:	18 96       	mov	r6,r12
80009ad4:	78 67       	ld.w	r7,r12[0x18]
80009ad6:	58 07       	cp.w	r7,0
80009ad8:	c4 91       	brne	80009b6a <__sinit+0x9a>
80009ada:	fe c8 00 aa 	sub	r8,pc,170
80009ade:	30 15       	mov	r5,1
80009ae0:	99 a8       	st.w	r12[0x28],r8
80009ae2:	f9 47 00 d8 	st.w	r12[216],r7
80009ae6:	f9 47 00 dc 	st.w	r12[220],r7
80009aea:	f9 47 00 e0 	st.w	r12[224],r7
80009aee:	99 65       	st.w	r12[0x18],r5
80009af0:	cb af       	rcall	80009a64 <__sfp>
80009af2:	8d 0c       	st.w	r6[0x0],r12
80009af4:	0c 9c       	mov	r12,r6
80009af6:	cb 7f       	rcall	80009a64 <__sfp>
80009af8:	8d 1c       	st.w	r6[0x4],r12
80009afa:	0c 9c       	mov	r12,r6
80009afc:	cb 4f       	rcall	80009a64 <__sfp>
80009afe:	6c 09       	ld.w	r9,r6[0x0]
80009b00:	30 48       	mov	r8,4
80009b02:	93 07       	st.w	r9[0x0],r7
80009b04:	b2 68       	st.h	r9[0xc],r8
80009b06:	93 17       	st.w	r9[0x4],r7
80009b08:	93 27       	st.w	r9[0x8],r7
80009b0a:	6c 18       	ld.w	r8,r6[0x4]
80009b0c:	b2 77       	st.h	r9[0xe],r7
80009b0e:	93 47       	st.w	r9[0x10],r7
80009b10:	93 57       	st.w	r9[0x14],r7
80009b12:	93 67       	st.w	r9[0x18],r7
80009b14:	93 89       	st.w	r9[0x20],r9
80009b16:	91 07       	st.w	r8[0x0],r7
80009b18:	91 17       	st.w	r8[0x4],r7
80009b1a:	91 27       	st.w	r8[0x8],r7
80009b1c:	fe ce eb e4 	sub	lr,pc,-5148
80009b20:	fe cb ec 14 	sub	r11,pc,-5100
80009b24:	93 9e       	st.w	r9[0x24],lr
80009b26:	93 ab       	st.w	r9[0x28],r11
80009b28:	fe ca ec 3c 	sub	r10,pc,-5060
80009b2c:	fe c4 ec 48 	sub	r4,pc,-5048
80009b30:	93 ba       	st.w	r9[0x2c],r10
80009b32:	93 c4       	st.w	r9[0x30],r4
80009b34:	30 99       	mov	r9,9
80009b36:	b0 69       	st.h	r8[0xc],r9
80009b38:	b0 75       	st.h	r8[0xe],r5
80009b3a:	91 c4       	st.w	r8[0x30],r4
80009b3c:	91 47       	st.w	r8[0x10],r7
80009b3e:	91 57       	st.w	r8[0x14],r7
80009b40:	91 67       	st.w	r8[0x18],r7
80009b42:	91 88       	st.w	r8[0x20],r8
80009b44:	91 9e       	st.w	r8[0x24],lr
80009b46:	91 ab       	st.w	r8[0x28],r11
80009b48:	91 ba       	st.w	r8[0x2c],r10
80009b4a:	8d 2c       	st.w	r6[0x8],r12
80009b4c:	31 28       	mov	r8,18
80009b4e:	99 07       	st.w	r12[0x0],r7
80009b50:	b8 68       	st.h	r12[0xc],r8
80009b52:	99 17       	st.w	r12[0x4],r7
80009b54:	99 27       	st.w	r12[0x8],r7
80009b56:	30 28       	mov	r8,2
80009b58:	b8 78       	st.h	r12[0xe],r8
80009b5a:	99 c4       	st.w	r12[0x30],r4
80009b5c:	99 67       	st.w	r12[0x18],r7
80009b5e:	99 9e       	st.w	r12[0x24],lr
80009b60:	99 ab       	st.w	r12[0x28],r11
80009b62:	99 ba       	st.w	r12[0x2c],r10
80009b64:	99 47       	st.w	r12[0x10],r7
80009b66:	99 57       	st.w	r12[0x14],r7
80009b68:	99 8c       	st.w	r12[0x20],r12
80009b6a:	d8 22       	popm	r4-r7,pc

80009b6c <_malloc_trim_r>:
80009b6c:	d4 21       	pushm	r4-r7,lr
80009b6e:	16 95       	mov	r5,r11
80009b70:	18 97       	mov	r7,r12
80009b72:	e0 a0 05 38 	rcall	8000a5e2 <__malloc_lock>
80009b76:	e0 64 01 08 	mov	r4,264
80009b7a:	68 28       	ld.w	r8,r4[0x8]
80009b7c:	70 16       	ld.w	r6,r8[0x4]
80009b7e:	e0 16 ff fc 	andl	r6,0xfffc
80009b82:	ec c8 ff 91 	sub	r8,r6,-111
80009b86:	f0 05 01 05 	sub	r5,r8,r5
80009b8a:	e0 15 ff 80 	andl	r5,0xff80
80009b8e:	ea c5 00 80 	sub	r5,r5,128
80009b92:	e0 45 00 7f 	cp.w	r5,127
80009b96:	e0 8a 00 25 	brle	80009be0 <_malloc_trim_r+0x74>
80009b9a:	30 0b       	mov	r11,0
80009b9c:	0e 9c       	mov	r12,r7
80009b9e:	e0 a0 09 93 	rcall	8000aec4 <_sbrk_r>
80009ba2:	68 28       	ld.w	r8,r4[0x8]
80009ba4:	0c 08       	add	r8,r6
80009ba6:	10 3c       	cp.w	r12,r8
80009ba8:	c1 c1       	brne	80009be0 <_malloc_trim_r+0x74>
80009baa:	ea 0b 11 00 	rsub	r11,r5,0
80009bae:	0e 9c       	mov	r12,r7
80009bb0:	e0 a0 09 8a 	rcall	8000aec4 <_sbrk_r>
80009bb4:	5b fc       	cp.w	r12,-1
80009bb6:	c1 91       	brne	80009be8 <_malloc_trim_r+0x7c>
80009bb8:	30 0b       	mov	r11,0
80009bba:	0e 9c       	mov	r12,r7
80009bbc:	e0 a0 09 84 	rcall	8000aec4 <_sbrk_r>
80009bc0:	68 28       	ld.w	r8,r4[0x8]
80009bc2:	f8 08 01 09 	sub	r9,r12,r8
80009bc6:	58 f9       	cp.w	r9,15
80009bc8:	e0 8a 00 0c 	brle	80009be0 <_malloc_trim_r+0x74>
80009bcc:	a1 a9       	sbr	r9,0x0
80009bce:	91 19       	st.w	r8[0x4],r9
80009bd0:	e0 68 05 14 	mov	r8,1300
80009bd4:	70 09       	ld.w	r9,r8[0x0]
80009bd6:	e0 68 06 38 	mov	r8,1592
80009bda:	f8 09 01 09 	sub	r9,r12,r9
80009bde:	91 09       	st.w	r8[0x0],r9
80009be0:	0e 9c       	mov	r12,r7
80009be2:	e0 a0 05 01 	rcall	8000a5e4 <__malloc_unlock>
80009be6:	d8 2a       	popm	r4-r7,pc,r12=0
80009be8:	68 28       	ld.w	r8,r4[0x8]
80009bea:	0a 16       	sub	r6,r5
80009bec:	a1 a6       	sbr	r6,0x0
80009bee:	91 16       	st.w	r8[0x4],r6
80009bf0:	e0 68 06 38 	mov	r8,1592
80009bf4:	70 09       	ld.w	r9,r8[0x0]
80009bf6:	0a 19       	sub	r9,r5
80009bf8:	0e 9c       	mov	r12,r7
80009bfa:	91 09       	st.w	r8[0x0],r9
80009bfc:	e0 a0 04 f4 	rcall	8000a5e4 <__malloc_unlock>
80009c00:	da 2a       	popm	r4-r7,pc,r12=1
80009c02:	d7 03       	nop

80009c04 <_free_r>:
80009c04:	d4 21       	pushm	r4-r7,lr
80009c06:	16 96       	mov	r6,r11
80009c08:	18 97       	mov	r7,r12
80009c0a:	58 0b       	cp.w	r11,0
80009c0c:	e0 80 00 c0 	breq	80009d8c <_free_r+0x188>
80009c10:	e0 a0 04 e9 	rcall	8000a5e2 <__malloc_lock>
80009c14:	20 86       	sub	r6,8
80009c16:	e0 6a 01 08 	mov	r10,264
80009c1a:	6c 18       	ld.w	r8,r6[0x4]
80009c1c:	74 2e       	ld.w	lr,r10[0x8]
80009c1e:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80009c22:	a1 c8       	cbr	r8,0x0
80009c24:	ec 08 00 09 	add	r9,r6,r8
80009c28:	72 1b       	ld.w	r11,r9[0x4]
80009c2a:	e0 1b ff fc 	andl	r11,0xfffc
80009c2e:	1c 39       	cp.w	r9,lr
80009c30:	c1 e1       	brne	80009c6c <_free_r+0x68>
80009c32:	f6 08 00 08 	add	r8,r11,r8
80009c36:	58 0c       	cp.w	r12,0
80009c38:	c0 81       	brne	80009c48 <_free_r+0x44>
80009c3a:	6c 09       	ld.w	r9,r6[0x0]
80009c3c:	12 16       	sub	r6,r9
80009c3e:	12 08       	add	r8,r9
80009c40:	6c 3b       	ld.w	r11,r6[0xc]
80009c42:	6c 29       	ld.w	r9,r6[0x8]
80009c44:	97 29       	st.w	r11[0x8],r9
80009c46:	93 3b       	st.w	r9[0xc],r11
80009c48:	10 99       	mov	r9,r8
80009c4a:	95 26       	st.w	r10[0x8],r6
80009c4c:	a1 a9       	sbr	r9,0x0
80009c4e:	8d 19       	st.w	r6[0x4],r9
80009c50:	e0 69 05 10 	mov	r9,1296
80009c54:	72 09       	ld.w	r9,r9[0x0]
80009c56:	12 38       	cp.w	r8,r9
80009c58:	c0 63       	brcs	80009c64 <_free_r+0x60>
80009c5a:	e0 68 06 34 	mov	r8,1588
80009c5e:	0e 9c       	mov	r12,r7
80009c60:	70 0b       	ld.w	r11,r8[0x0]
80009c62:	c8 5f       	rcall	80009b6c <_malloc_trim_r>
80009c64:	0e 9c       	mov	r12,r7
80009c66:	e0 a0 04 bf 	rcall	8000a5e4 <__malloc_unlock>
80009c6a:	d8 22       	popm	r4-r7,pc
80009c6c:	93 1b       	st.w	r9[0x4],r11
80009c6e:	58 0c       	cp.w	r12,0
80009c70:	c0 30       	breq	80009c76 <_free_r+0x72>
80009c72:	30 0c       	mov	r12,0
80009c74:	c1 08       	rjmp	80009c94 <_free_r+0x90>
80009c76:	6c 0e       	ld.w	lr,r6[0x0]
80009c78:	f4 c5 ff f8 	sub	r5,r10,-8
80009c7c:	1c 16       	sub	r6,lr
80009c7e:	1c 08       	add	r8,lr
80009c80:	6c 2e       	ld.w	lr,r6[0x8]
80009c82:	0a 3e       	cp.w	lr,r5
80009c84:	f9 bc 00 01 	moveq	r12,1
80009c88:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80009c8c:	eb fe 1a 02 	st.wne	r5[0x8],lr
80009c90:	fd f5 1a 03 	st.wne	lr[0xc],r5
80009c94:	f2 0b 00 0e 	add	lr,r9,r11
80009c98:	7c 1e       	ld.w	lr,lr[0x4]
80009c9a:	ed be 00 00 	bld	lr,0x0
80009c9e:	c1 40       	breq	80009cc6 <_free_r+0xc2>
80009ca0:	16 08       	add	r8,r11
80009ca2:	58 0c       	cp.w	r12,0
80009ca4:	c0 d1       	brne	80009cbe <_free_r+0xba>
80009ca6:	e0 6e 01 08 	mov	lr,264
80009caa:	72 2b       	ld.w	r11,r9[0x8]
80009cac:	2f 8e       	sub	lr,-8
80009cae:	1c 3b       	cp.w	r11,lr
80009cb0:	c0 71       	brne	80009cbe <_free_r+0xba>
80009cb2:	97 36       	st.w	r11[0xc],r6
80009cb4:	97 26       	st.w	r11[0x8],r6
80009cb6:	8d 2b       	st.w	r6[0x8],r11
80009cb8:	8d 3b       	st.w	r6[0xc],r11
80009cba:	30 1c       	mov	r12,1
80009cbc:	c0 58       	rjmp	80009cc6 <_free_r+0xc2>
80009cbe:	72 2b       	ld.w	r11,r9[0x8]
80009cc0:	72 39       	ld.w	r9,r9[0xc]
80009cc2:	93 2b       	st.w	r9[0x8],r11
80009cc4:	97 39       	st.w	r11[0xc],r9
80009cc6:	10 99       	mov	r9,r8
80009cc8:	ec 08 09 08 	st.w	r6[r8],r8
80009ccc:	a1 a9       	sbr	r9,0x0
80009cce:	8d 19       	st.w	r6[0x4],r9
80009cd0:	58 0c       	cp.w	r12,0
80009cd2:	c5 a1       	brne	80009d86 <_free_r+0x182>
80009cd4:	e0 48 01 ff 	cp.w	r8,511
80009cd8:	e0 8b 00 13 	brhi	80009cfe <_free_r+0xfa>
80009cdc:	a3 98       	lsr	r8,0x3
80009cde:	f4 08 00 39 	add	r9,r10,r8<<0x3
80009ce2:	72 2b       	ld.w	r11,r9[0x8]
80009ce4:	8d 39       	st.w	r6[0xc],r9
80009ce6:	8d 2b       	st.w	r6[0x8],r11
80009ce8:	97 36       	st.w	r11[0xc],r6
80009cea:	93 26       	st.w	r9[0x8],r6
80009cec:	a3 48       	asr	r8,0x2
80009cee:	74 19       	ld.w	r9,r10[0x4]
80009cf0:	30 1b       	mov	r11,1
80009cf2:	f6 08 09 48 	lsl	r8,r11,r8
80009cf6:	f3 e8 10 08 	or	r8,r9,r8
80009cfa:	95 18       	st.w	r10[0x4],r8
80009cfc:	c4 58       	rjmp	80009d86 <_free_r+0x182>
80009cfe:	f0 0b 16 09 	lsr	r11,r8,0x9
80009d02:	58 4b       	cp.w	r11,4
80009d04:	e0 8b 00 06 	brhi	80009d10 <_free_r+0x10c>
80009d08:	f0 0b 16 06 	lsr	r11,r8,0x6
80009d0c:	2c 8b       	sub	r11,-56
80009d0e:	c2 08       	rjmp	80009d4e <_free_r+0x14a>
80009d10:	59 4b       	cp.w	r11,20
80009d12:	e0 8b 00 04 	brhi	80009d1a <_free_r+0x116>
80009d16:	2a 5b       	sub	r11,-91
80009d18:	c1 b8       	rjmp	80009d4e <_free_r+0x14a>
80009d1a:	e0 4b 00 54 	cp.w	r11,84
80009d1e:	e0 8b 00 06 	brhi	80009d2a <_free_r+0x126>
80009d22:	f0 0b 16 0c 	lsr	r11,r8,0xc
80009d26:	29 2b       	sub	r11,-110
80009d28:	c1 38       	rjmp	80009d4e <_free_r+0x14a>
80009d2a:	e0 4b 01 54 	cp.w	r11,340
80009d2e:	e0 8b 00 06 	brhi	80009d3a <_free_r+0x136>
80009d32:	f0 0b 16 0f 	lsr	r11,r8,0xf
80009d36:	28 9b       	sub	r11,-119
80009d38:	c0 b8       	rjmp	80009d4e <_free_r+0x14a>
80009d3a:	e0 4b 05 54 	cp.w	r11,1364
80009d3e:	e0 88 00 05 	brls	80009d48 <_free_r+0x144>
80009d42:	37 eb       	mov	r11,126
80009d44:	c0 58       	rjmp	80009d4e <_free_r+0x14a>
80009d46:	d7 03       	nop
80009d48:	f0 0b 16 12 	lsr	r11,r8,0x12
80009d4c:	28 4b       	sub	r11,-124
80009d4e:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
80009d52:	78 29       	ld.w	r9,r12[0x8]
80009d54:	18 39       	cp.w	r9,r12
80009d56:	c0 e1       	brne	80009d72 <_free_r+0x16e>
80009d58:	74 18       	ld.w	r8,r10[0x4]
80009d5a:	a3 4b       	asr	r11,0x2
80009d5c:	30 1c       	mov	r12,1
80009d5e:	f8 0b 09 4b 	lsl	r11,r12,r11
80009d62:	f1 eb 10 0b 	or	r11,r8,r11
80009d66:	12 98       	mov	r8,r9
80009d68:	95 1b       	st.w	r10[0x4],r11
80009d6a:	c0 a8       	rjmp	80009d7e <_free_r+0x17a>
80009d6c:	72 29       	ld.w	r9,r9[0x8]
80009d6e:	18 39       	cp.w	r9,r12
80009d70:	c0 60       	breq	80009d7c <_free_r+0x178>
80009d72:	72 1a       	ld.w	r10,r9[0x4]
80009d74:	e0 1a ff fc 	andl	r10,0xfffc
80009d78:	14 38       	cp.w	r8,r10
80009d7a:	cf 93       	brcs	80009d6c <_free_r+0x168>
80009d7c:	72 38       	ld.w	r8,r9[0xc]
80009d7e:	8d 38       	st.w	r6[0xc],r8
80009d80:	8d 29       	st.w	r6[0x8],r9
80009d82:	93 36       	st.w	r9[0xc],r6
80009d84:	91 26       	st.w	r8[0x8],r6
80009d86:	0e 9c       	mov	r12,r7
80009d88:	e0 a0 04 2e 	rcall	8000a5e4 <__malloc_unlock>
80009d8c:	d8 22       	popm	r4-r7,pc
80009d8e:	d7 03       	nop

80009d90 <__sfvwrite_r>:
80009d90:	d4 31       	pushm	r0-r7,lr
80009d92:	20 3d       	sub	sp,12
80009d94:	14 94       	mov	r4,r10
80009d96:	18 95       	mov	r5,r12
80009d98:	16 97       	mov	r7,r11
80009d9a:	74 28       	ld.w	r8,r10[0x8]
80009d9c:	58 08       	cp.w	r8,0
80009d9e:	e0 80 01 45 	breq	8000a028 <__sfvwrite_r+0x298>
80009da2:	96 68       	ld.sh	r8,r11[0xc]
80009da4:	ed b8 00 03 	bld	r8,0x3
80009da8:	c0 41       	brne	80009db0 <__sfvwrite_r+0x20>
80009daa:	76 48       	ld.w	r8,r11[0x10]
80009dac:	58 08       	cp.w	r8,0
80009dae:	c0 c1       	brne	80009dc6 <__sfvwrite_r+0x36>
80009db0:	0e 9b       	mov	r11,r7
80009db2:	0a 9c       	mov	r12,r5
80009db4:	fe b0 f6 ca 	rcall	80008b48 <__swsetup_r>
80009db8:	c0 70       	breq	80009dc6 <__sfvwrite_r+0x36>
80009dba:	8e 68       	ld.sh	r8,r7[0xc]
80009dbc:	a7 a8       	sbr	r8,0x6
80009dbe:	ae 68       	st.h	r7[0xc],r8
80009dc0:	30 98       	mov	r8,9
80009dc2:	8b 38       	st.w	r5[0xc],r8
80009dc4:	c3 09       	rjmp	8000a024 <__sfvwrite_r+0x294>
80009dc6:	8e 63       	ld.sh	r3,r7[0xc]
80009dc8:	68 00       	ld.w	r0,r4[0x0]
80009dca:	06 96       	mov	r6,r3
80009dcc:	e2 16 00 02 	andl	r6,0x2,COH
80009dd0:	c2 10       	breq	80009e12 <__sfvwrite_r+0x82>
80009dd2:	30 03       	mov	r3,0
80009dd4:	e0 62 04 00 	mov	r2,1024
80009dd8:	06 96       	mov	r6,r3
80009dda:	c0 48       	rjmp	80009de2 <__sfvwrite_r+0x52>
80009ddc:	60 03       	ld.w	r3,r0[0x0]
80009dde:	60 16       	ld.w	r6,r0[0x4]
80009de0:	2f 80       	sub	r0,-8
80009de2:	58 06       	cp.w	r6,0
80009de4:	cf c0       	breq	80009ddc <__sfvwrite_r+0x4c>
80009de6:	e0 46 04 00 	cp.w	r6,1024
80009dea:	ec 09 17 80 	movls	r9,r6
80009dee:	e4 09 17 b0 	movhi	r9,r2
80009df2:	06 9a       	mov	r10,r3
80009df4:	6e a8       	ld.w	r8,r7[0x28]
80009df6:	6e 8b       	ld.w	r11,r7[0x20]
80009df8:	0a 9c       	mov	r12,r5
80009dfa:	5d 18       	icall	r8
80009dfc:	18 16       	sub	r6,r12
80009dfe:	58 0c       	cp.w	r12,0
80009e00:	e0 8a 01 0f 	brle	8000a01e <__sfvwrite_r+0x28e>
80009e04:	68 28       	ld.w	r8,r4[0x8]
80009e06:	18 18       	sub	r8,r12
80009e08:	89 28       	st.w	r4[0x8],r8
80009e0a:	e0 80 01 0f 	breq	8000a028 <__sfvwrite_r+0x298>
80009e0e:	18 03       	add	r3,r12
80009e10:	ce 9b       	rjmp	80009de2 <__sfvwrite_r+0x52>
80009e12:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
80009e16:	c0 70       	breq	80009e24 <__sfvwrite_r+0x94>
80009e18:	50 06       	stdsp	sp[0x0],r6
80009e1a:	0c 93       	mov	r3,r6
80009e1c:	0c 91       	mov	r1,r6
80009e1e:	50 15       	stdsp	sp[0x4],r5
80009e20:	08 92       	mov	r2,r4
80009e22:	c9 e8       	rjmp	80009f5e <__sfvwrite_r+0x1ce>
80009e24:	06 96       	mov	r6,r3
80009e26:	08 91       	mov	r1,r4
80009e28:	c0 48       	rjmp	80009e30 <__sfvwrite_r+0xa0>
80009e2a:	60 03       	ld.w	r3,r0[0x0]
80009e2c:	60 16       	ld.w	r6,r0[0x4]
80009e2e:	2f 80       	sub	r0,-8
80009e30:	58 06       	cp.w	r6,0
80009e32:	cf c0       	breq	80009e2a <__sfvwrite_r+0x9a>
80009e34:	8e 68       	ld.sh	r8,r7[0xc]
80009e36:	6e 24       	ld.w	r4,r7[0x8]
80009e38:	10 99       	mov	r9,r8
80009e3a:	e2 19 02 00 	andl	r9,0x200,COH
80009e3e:	c5 50       	breq	80009ee8 <__sfvwrite_r+0x158>
80009e40:	08 36       	cp.w	r6,r4
80009e42:	c4 33       	brcs	80009ec8 <__sfvwrite_r+0x138>
80009e44:	10 99       	mov	r9,r8
80009e46:	e2 19 04 80 	andl	r9,0x480,COH
80009e4a:	c3 f0       	breq	80009ec8 <__sfvwrite_r+0x138>
80009e4c:	6e 4b       	ld.w	r11,r7[0x10]
80009e4e:	6e 09       	ld.w	r9,r7[0x0]
80009e50:	16 19       	sub	r9,r11
80009e52:	50 09       	stdsp	sp[0x0],r9
80009e54:	6e 59       	ld.w	r9,r7[0x14]
80009e56:	10 9c       	mov	r12,r8
80009e58:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80009e5c:	30 28       	mov	r8,2
80009e5e:	f4 08 0c 08 	divs	r8,r10,r8
80009e62:	fa e9 00 04 	st.d	sp[4],r8
80009e66:	10 94       	mov	r4,r8
80009e68:	40 09       	lddsp	r9,sp[0x0]
80009e6a:	e2 1c 04 00 	andl	r12,0x400,COH
80009e6e:	2f f9       	sub	r9,-1
80009e70:	0c 09       	add	r9,r6
80009e72:	12 38       	cp.w	r8,r9
80009e74:	f2 04 17 30 	movlo	r4,r9
80009e78:	58 0c       	cp.w	r12,0
80009e7a:	c1 00       	breq	80009e9a <__sfvwrite_r+0x10a>
80009e7c:	08 9b       	mov	r11,r4
80009e7e:	0a 9c       	mov	r12,r5
80009e80:	c6 8d       	rcall	8000a150 <_malloc_r>
80009e82:	18 92       	mov	r2,r12
80009e84:	c1 40       	breq	80009eac <__sfvwrite_r+0x11c>
80009e86:	40 0a       	lddsp	r10,sp[0x0]
80009e88:	6e 4b       	ld.w	r11,r7[0x10]
80009e8a:	fe b0 e4 7d 	rcall	80006784 <memcpy>
80009e8e:	8e 68       	ld.sh	r8,r7[0xc]
80009e90:	e0 18 fb 7f 	andl	r8,0xfb7f
80009e94:	a7 b8       	sbr	r8,0x7
80009e96:	ae 68       	st.h	r7[0xc],r8
80009e98:	c0 d8       	rjmp	80009eb2 <__sfvwrite_r+0x122>
80009e9a:	08 9a       	mov	r10,r4
80009e9c:	0a 9c       	mov	r12,r5
80009e9e:	e0 a0 06 8f 	rcall	8000abbc <_realloc_r>
80009ea2:	18 92       	mov	r2,r12
80009ea4:	c0 71       	brne	80009eb2 <__sfvwrite_r+0x122>
80009ea6:	6e 4b       	ld.w	r11,r7[0x10]
80009ea8:	0a 9c       	mov	r12,r5
80009eaa:	ca de       	rcall	80009c04 <_free_r>
80009eac:	30 c8       	mov	r8,12
80009eae:	8b 38       	st.w	r5[0xc],r8
80009eb0:	cb 78       	rjmp	8000a01e <__sfvwrite_r+0x28e>
80009eb2:	40 0a       	lddsp	r10,sp[0x0]
80009eb4:	40 09       	lddsp	r9,sp[0x0]
80009eb6:	e8 0a 01 0a 	sub	r10,r4,r10
80009eba:	e4 09 00 08 	add	r8,r2,r9
80009ebe:	8f 54       	st.w	r7[0x14],r4
80009ec0:	8f 2a       	st.w	r7[0x8],r10
80009ec2:	8f 08       	st.w	r7[0x0],r8
80009ec4:	8f 42       	st.w	r7[0x10],r2
80009ec6:	0c 94       	mov	r4,r6
80009ec8:	08 36       	cp.w	r6,r4
80009eca:	ec 04 17 30 	movlo	r4,r6
80009ece:	06 9b       	mov	r11,r3
80009ed0:	08 9a       	mov	r10,r4
80009ed2:	6e 0c       	ld.w	r12,r7[0x0]
80009ed4:	e0 a0 03 61 	rcall	8000a596 <memmove>
80009ed8:	6e 08       	ld.w	r8,r7[0x0]
80009eda:	08 08       	add	r8,r4
80009edc:	8f 08       	st.w	r7[0x0],r8
80009ede:	6e 28       	ld.w	r8,r7[0x8]
80009ee0:	08 18       	sub	r8,r4
80009ee2:	0c 94       	mov	r4,r6
80009ee4:	8f 28       	st.w	r7[0x8],r8
80009ee6:	c3 08       	rjmp	80009f46 <__sfvwrite_r+0x1b6>
80009ee8:	08 36       	cp.w	r6,r4
80009eea:	5f ba       	srhi	r10
80009eec:	6e 0c       	ld.w	r12,r7[0x0]
80009eee:	6e 48       	ld.w	r8,r7[0x10]
80009ef0:	10 3c       	cp.w	r12,r8
80009ef2:	5f b8       	srhi	r8
80009ef4:	f5 e8 00 08 	and	r8,r10,r8
80009ef8:	f2 08 18 00 	cp.b	r8,r9
80009efc:	c0 e0       	breq	80009f18 <__sfvwrite_r+0x188>
80009efe:	06 9b       	mov	r11,r3
80009f00:	08 9a       	mov	r10,r4
80009f02:	e0 a0 03 4a 	rcall	8000a596 <memmove>
80009f06:	6e 08       	ld.w	r8,r7[0x0]
80009f08:	08 08       	add	r8,r4
80009f0a:	0e 9b       	mov	r11,r7
80009f0c:	8f 08       	st.w	r7[0x0],r8
80009f0e:	0a 9c       	mov	r12,r5
80009f10:	fe b0 fd 08 	rcall	80009920 <_fflush_r>
80009f14:	c1 90       	breq	80009f46 <__sfvwrite_r+0x1b6>
80009f16:	c8 48       	rjmp	8000a01e <__sfvwrite_r+0x28e>
80009f18:	6e 59       	ld.w	r9,r7[0x14]
80009f1a:	12 36       	cp.w	r6,r9
80009f1c:	c0 a3       	brcs	80009f30 <__sfvwrite_r+0x1a0>
80009f1e:	6e a8       	ld.w	r8,r7[0x28]
80009f20:	06 9a       	mov	r10,r3
80009f22:	6e 8b       	ld.w	r11,r7[0x20]
80009f24:	0a 9c       	mov	r12,r5
80009f26:	5d 18       	icall	r8
80009f28:	18 94       	mov	r4,r12
80009f2a:	e0 89 00 0e 	brgt	80009f46 <__sfvwrite_r+0x1b6>
80009f2e:	c7 88       	rjmp	8000a01e <__sfvwrite_r+0x28e>
80009f30:	0c 9a       	mov	r10,r6
80009f32:	06 9b       	mov	r11,r3
80009f34:	e0 a0 03 31 	rcall	8000a596 <memmove>
80009f38:	6e 08       	ld.w	r8,r7[0x0]
80009f3a:	0c 08       	add	r8,r6
80009f3c:	0c 94       	mov	r4,r6
80009f3e:	8f 08       	st.w	r7[0x0],r8
80009f40:	6e 28       	ld.w	r8,r7[0x8]
80009f42:	0c 18       	sub	r8,r6
80009f44:	8f 28       	st.w	r7[0x8],r8
80009f46:	62 28       	ld.w	r8,r1[0x8]
80009f48:	08 18       	sub	r8,r4
80009f4a:	83 28       	st.w	r1[0x8],r8
80009f4c:	c6 e0       	breq	8000a028 <__sfvwrite_r+0x298>
80009f4e:	08 16       	sub	r6,r4
80009f50:	08 03       	add	r3,r4
80009f52:	c6 fb       	rjmp	80009e30 <__sfvwrite_r+0xa0>
80009f54:	60 03       	ld.w	r3,r0[0x0]
80009f56:	60 11       	ld.w	r1,r0[0x4]
80009f58:	30 08       	mov	r8,0
80009f5a:	2f 80       	sub	r0,-8
80009f5c:	50 08       	stdsp	sp[0x0],r8
80009f5e:	58 01       	cp.w	r1,0
80009f60:	cf a0       	breq	80009f54 <__sfvwrite_r+0x1c4>
80009f62:	40 0a       	lddsp	r10,sp[0x0]
80009f64:	58 0a       	cp.w	r10,0
80009f66:	c1 51       	brne	80009f90 <__sfvwrite_r+0x200>
80009f68:	e2 c6 ff ff 	sub	r6,r1,-1
80009f6c:	02 9a       	mov	r10,r1
80009f6e:	30 ab       	mov	r11,10
80009f70:	06 9c       	mov	r12,r3
80009f72:	e0 a0 03 07 	rcall	8000a580 <memchr>
80009f76:	f8 c8 ff ff 	sub	r8,r12,-1
80009f7a:	58 0c       	cp.w	r12,0
80009f7c:	f1 d3 e1 16 	subne	r6,r8,r3
80009f80:	f9 b9 01 01 	movne	r9,1
80009f84:	fb f9 1a 00 	st.wne	sp[0x0],r9
80009f88:	f9 b8 00 01 	moveq	r8,1
80009f8c:	fb f8 0a 00 	st.weq	sp[0x0],r8
80009f90:	02 36       	cp.w	r6,r1
80009f92:	ec 04 17 80 	movls	r4,r6
80009f96:	e2 04 17 b0 	movhi	r4,r1
80009f9a:	6e 59       	ld.w	r9,r7[0x14]
80009f9c:	6e 25       	ld.w	r5,r7[0x8]
80009f9e:	f2 05 00 05 	add	r5,r9,r5
80009fa2:	0a 34       	cp.w	r4,r5
80009fa4:	5f 9a       	srgt	r10
80009fa6:	6e 0c       	ld.w	r12,r7[0x0]
80009fa8:	6e 48       	ld.w	r8,r7[0x10]
80009faa:	10 3c       	cp.w	r12,r8
80009fac:	5f b8       	srhi	r8
80009fae:	f5 e8 00 08 	and	r8,r10,r8
80009fb2:	30 0a       	mov	r10,0
80009fb4:	f4 08 18 00 	cp.b	r8,r10
80009fb8:	c0 e0       	breq	80009fd4 <__sfvwrite_r+0x244>
80009fba:	06 9b       	mov	r11,r3
80009fbc:	0a 9a       	mov	r10,r5
80009fbe:	e0 a0 02 ec 	rcall	8000a596 <memmove>
80009fc2:	6e 08       	ld.w	r8,r7[0x0]
80009fc4:	0a 08       	add	r8,r5
80009fc6:	0e 9b       	mov	r11,r7
80009fc8:	8f 08       	st.w	r7[0x0],r8
80009fca:	40 1c       	lddsp	r12,sp[0x4]
80009fcc:	fe b0 fc aa 	rcall	80009920 <_fflush_r>
80009fd0:	c1 80       	breq	8000a000 <__sfvwrite_r+0x270>
80009fd2:	c2 68       	rjmp	8000a01e <__sfvwrite_r+0x28e>
80009fd4:	12 34       	cp.w	r4,r9
80009fd6:	c0 a5       	brlt	80009fea <__sfvwrite_r+0x25a>
80009fd8:	6e a8       	ld.w	r8,r7[0x28]
80009fda:	06 9a       	mov	r10,r3
80009fdc:	6e 8b       	ld.w	r11,r7[0x20]
80009fde:	40 1c       	lddsp	r12,sp[0x4]
80009fe0:	5d 18       	icall	r8
80009fe2:	18 95       	mov	r5,r12
80009fe4:	e0 89 00 0e 	brgt	8000a000 <__sfvwrite_r+0x270>
80009fe8:	c1 b8       	rjmp	8000a01e <__sfvwrite_r+0x28e>
80009fea:	08 9a       	mov	r10,r4
80009fec:	06 9b       	mov	r11,r3
80009fee:	e0 a0 02 d4 	rcall	8000a596 <memmove>
80009ff2:	6e 08       	ld.w	r8,r7[0x0]
80009ff4:	08 08       	add	r8,r4
80009ff6:	08 95       	mov	r5,r4
80009ff8:	8f 08       	st.w	r7[0x0],r8
80009ffa:	6e 28       	ld.w	r8,r7[0x8]
80009ffc:	08 18       	sub	r8,r4
80009ffe:	8f 28       	st.w	r7[0x8],r8
8000a000:	0a 16       	sub	r6,r5
8000a002:	c0 71       	brne	8000a010 <__sfvwrite_r+0x280>
8000a004:	0e 9b       	mov	r11,r7
8000a006:	40 1c       	lddsp	r12,sp[0x4]
8000a008:	fe b0 fc 8c 	rcall	80009920 <_fflush_r>
8000a00c:	c0 91       	brne	8000a01e <__sfvwrite_r+0x28e>
8000a00e:	50 06       	stdsp	sp[0x0],r6
8000a010:	64 28       	ld.w	r8,r2[0x8]
8000a012:	0a 18       	sub	r8,r5
8000a014:	85 28       	st.w	r2[0x8],r8
8000a016:	c0 90       	breq	8000a028 <__sfvwrite_r+0x298>
8000a018:	0a 11       	sub	r1,r5
8000a01a:	0a 03       	add	r3,r5
8000a01c:	ca 1b       	rjmp	80009f5e <__sfvwrite_r+0x1ce>
8000a01e:	8e 68       	ld.sh	r8,r7[0xc]
8000a020:	a7 a8       	sbr	r8,0x6
8000a022:	ae 68       	st.h	r7[0xc],r8
8000a024:	3f fc       	mov	r12,-1
8000a026:	c0 28       	rjmp	8000a02a <__sfvwrite_r+0x29a>
8000a028:	30 0c       	mov	r12,0
8000a02a:	2f dd       	sub	sp,-12
8000a02c:	d8 32       	popm	r0-r7,pc
8000a02e:	d7 03       	nop

8000a030 <_fwalk>:
8000a030:	d4 31       	pushm	r0-r7,lr
8000a032:	30 05       	mov	r5,0
8000a034:	16 91       	mov	r1,r11
8000a036:	f8 c7 ff 28 	sub	r7,r12,-216
8000a03a:	0a 92       	mov	r2,r5
8000a03c:	fe b0 fc f8 	rcall	80009a2c <__sfp_lock_acquire>
8000a040:	3f f3       	mov	r3,-1
8000a042:	c1 68       	rjmp	8000a06e <_fwalk+0x3e>
8000a044:	6e 26       	ld.w	r6,r7[0x8]
8000a046:	6e 14       	ld.w	r4,r7[0x4]
8000a048:	2f 46       	sub	r6,-12
8000a04a:	c0 c8       	rjmp	8000a062 <_fwalk+0x32>
8000a04c:	8c 08       	ld.sh	r8,r6[0x0]
8000a04e:	e4 08 19 00 	cp.h	r8,r2
8000a052:	c0 70       	breq	8000a060 <_fwalk+0x30>
8000a054:	8c 18       	ld.sh	r8,r6[0x2]
8000a056:	e6 08 19 00 	cp.h	r8,r3
8000a05a:	c0 30       	breq	8000a060 <_fwalk+0x30>
8000a05c:	5d 11       	icall	r1
8000a05e:	18 45       	or	r5,r12
8000a060:	2a 46       	sub	r6,-92
8000a062:	20 14       	sub	r4,1
8000a064:	ec cc 00 0c 	sub	r12,r6,12
8000a068:	58 04       	cp.w	r4,0
8000a06a:	cf 14       	brge	8000a04c <_fwalk+0x1c>
8000a06c:	6e 07       	ld.w	r7,r7[0x0]
8000a06e:	58 07       	cp.w	r7,0
8000a070:	ce a1       	brne	8000a044 <_fwalk+0x14>
8000a072:	fe b0 fc de 	rcall	80009a2e <__sfp_lock_release>
8000a076:	0a 9c       	mov	r12,r5
8000a078:	d8 32       	popm	r0-r7,pc
8000a07a:	d7 03       	nop

8000a07c <_localeconv_r>:
8000a07c:	fe cc e0 44 	sub	r12,pc,-8124
8000a080:	5e fc       	retal	r12
8000a082:	d7 03       	nop

8000a084 <__smakebuf_r>:
8000a084:	d4 21       	pushm	r4-r7,lr
8000a086:	20 fd       	sub	sp,60
8000a088:	96 68       	ld.sh	r8,r11[0xc]
8000a08a:	16 97       	mov	r7,r11
8000a08c:	18 96       	mov	r6,r12
8000a08e:	e2 18 00 02 	andl	r8,0x2,COH
8000a092:	c3 c1       	brne	8000a10a <__smakebuf_r+0x86>
8000a094:	96 7b       	ld.sh	r11,r11[0xe]
8000a096:	f0 0b 19 00 	cp.h	r11,r8
8000a09a:	c0 55       	brlt	8000a0a4 <__smakebuf_r+0x20>
8000a09c:	1a 9a       	mov	r10,sp
8000a09e:	e0 a0 08 9d 	rcall	8000b1d8 <_fstat_r>
8000a0a2:	c0 f4       	brge	8000a0c0 <__smakebuf_r+0x3c>
8000a0a4:	8e 65       	ld.sh	r5,r7[0xc]
8000a0a6:	0a 98       	mov	r8,r5
8000a0a8:	ab b8       	sbr	r8,0xb
8000a0aa:	e2 15 00 80 	andl	r5,0x80,COH
8000a0ae:	ae 68       	st.h	r7[0xc],r8
8000a0b0:	30 04       	mov	r4,0
8000a0b2:	e0 68 04 00 	mov	r8,1024
8000a0b6:	f9 b5 01 40 	movne	r5,64
8000a0ba:	f0 05 17 00 	moveq	r5,r8
8000a0be:	c1 c8       	rjmp	8000a0f6 <__smakebuf_r+0x72>
8000a0c0:	40 18       	lddsp	r8,sp[0x4]
8000a0c2:	e2 18 f0 00 	andl	r8,0xf000,COH
8000a0c6:	e0 48 20 00 	cp.w	r8,8192
8000a0ca:	5f 04       	sreq	r4
8000a0cc:	e0 48 80 00 	cp.w	r8,32768
8000a0d0:	c0 e1       	brne	8000a0ec <__smakebuf_r+0x68>
8000a0d2:	6e b9       	ld.w	r9,r7[0x2c]
8000a0d4:	fe c8 f1 e8 	sub	r8,pc,-3608
8000a0d8:	10 39       	cp.w	r9,r8
8000a0da:	c0 91       	brne	8000a0ec <__smakebuf_r+0x68>
8000a0dc:	8e 68       	ld.sh	r8,r7[0xc]
8000a0de:	e0 65 04 00 	mov	r5,1024
8000a0e2:	ab a8       	sbr	r8,0xa
8000a0e4:	ef 45 00 50 	st.w	r7[80],r5
8000a0e8:	ae 68       	st.h	r7[0xc],r8
8000a0ea:	c0 68       	rjmp	8000a0f6 <__smakebuf_r+0x72>
8000a0ec:	8e 68       	ld.sh	r8,r7[0xc]
8000a0ee:	e0 65 04 00 	mov	r5,1024
8000a0f2:	ab b8       	sbr	r8,0xb
8000a0f4:	ae 68       	st.h	r7[0xc],r8
8000a0f6:	0a 9b       	mov	r11,r5
8000a0f8:	0c 9c       	mov	r12,r6
8000a0fa:	c2 bc       	rcall	8000a150 <_malloc_r>
8000a0fc:	8e 68       	ld.sh	r8,r7[0xc]
8000a0fe:	c0 d1       	brne	8000a118 <__smakebuf_r+0x94>
8000a100:	ed b8 00 09 	bld	r8,0x9
8000a104:	c1 b0       	breq	8000a13a <__smakebuf_r+0xb6>
8000a106:	a1 b8       	sbr	r8,0x1
8000a108:	ae 68       	st.h	r7[0xc],r8
8000a10a:	ee c8 ff b9 	sub	r8,r7,-71
8000a10e:	8f 48       	st.w	r7[0x10],r8
8000a110:	8f 08       	st.w	r7[0x0],r8
8000a112:	30 18       	mov	r8,1
8000a114:	8f 58       	st.w	r7[0x14],r8
8000a116:	c1 28       	rjmp	8000a13a <__smakebuf_r+0xb6>
8000a118:	a7 b8       	sbr	r8,0x7
8000a11a:	8f 4c       	st.w	r7[0x10],r12
8000a11c:	ae 68       	st.h	r7[0xc],r8
8000a11e:	8f 55       	st.w	r7[0x14],r5
8000a120:	fe c8 06 f0 	sub	r8,pc,1776
8000a124:	8f 0c       	st.w	r7[0x0],r12
8000a126:	8d a8       	st.w	r6[0x28],r8
8000a128:	58 04       	cp.w	r4,0
8000a12a:	c0 80       	breq	8000a13a <__smakebuf_r+0xb6>
8000a12c:	8e 7c       	ld.sh	r12,r7[0xe]
8000a12e:	e0 a0 07 47 	rcall	8000afbc <isatty>
8000a132:	c0 40       	breq	8000a13a <__smakebuf_r+0xb6>
8000a134:	8e 68       	ld.sh	r8,r7[0xc]
8000a136:	a1 a8       	sbr	r8,0x0
8000a138:	ae 68       	st.h	r7[0xc],r8
8000a13a:	2f 1d       	sub	sp,-60
8000a13c:	d8 22       	popm	r4-r7,pc
8000a13e:	d7 03       	nop

8000a140 <malloc>:
8000a140:	d4 01       	pushm	lr
8000a142:	e0 68 01 04 	mov	r8,260
8000a146:	18 9b       	mov	r11,r12
8000a148:	70 0c       	ld.w	r12,r8[0x0]
8000a14a:	c0 3c       	rcall	8000a150 <_malloc_r>
8000a14c:	d8 02       	popm	pc
8000a14e:	d7 03       	nop

8000a150 <_malloc_r>:
8000a150:	d4 31       	pushm	r0-r7,lr
8000a152:	f6 c8 ff f5 	sub	r8,r11,-11
8000a156:	18 95       	mov	r5,r12
8000a158:	10 97       	mov	r7,r8
8000a15a:	e0 17 ff f8 	andl	r7,0xfff8
8000a15e:	59 68       	cp.w	r8,22
8000a160:	f9 b7 08 10 	movls	r7,16
8000a164:	16 37       	cp.w	r7,r11
8000a166:	5f 38       	srlo	r8
8000a168:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
8000a16c:	c0 50       	breq	8000a176 <_malloc_r+0x26>
8000a16e:	30 c8       	mov	r8,12
8000a170:	99 38       	st.w	r12[0xc],r8
8000a172:	e0 8f 01 f7 	bral	8000a560 <_malloc_r+0x410>
8000a176:	e0 a0 02 36 	rcall	8000a5e2 <__malloc_lock>
8000a17a:	e0 47 01 f7 	cp.w	r7,503
8000a17e:	e0 8b 00 1d 	brhi	8000a1b8 <_malloc_r+0x68>
8000a182:	ee 03 16 03 	lsr	r3,r7,0x3
8000a186:	e0 68 01 08 	mov	r8,264
8000a18a:	f0 03 00 38 	add	r8,r8,r3<<0x3
8000a18e:	70 36       	ld.w	r6,r8[0xc]
8000a190:	10 36       	cp.w	r6,r8
8000a192:	c0 61       	brne	8000a19e <_malloc_r+0x4e>
8000a194:	ec c8 ff f8 	sub	r8,r6,-8
8000a198:	70 36       	ld.w	r6,r8[0xc]
8000a19a:	10 36       	cp.w	r6,r8
8000a19c:	c0 c0       	breq	8000a1b4 <_malloc_r+0x64>
8000a19e:	6c 18       	ld.w	r8,r6[0x4]
8000a1a0:	e0 18 ff fc 	andl	r8,0xfffc
8000a1a4:	6c 3a       	ld.w	r10,r6[0xc]
8000a1a6:	ec 08 00 09 	add	r9,r6,r8
8000a1aa:	0a 9c       	mov	r12,r5
8000a1ac:	6c 28       	ld.w	r8,r6[0x8]
8000a1ae:	95 28       	st.w	r10[0x8],r8
8000a1b0:	91 3a       	st.w	r8[0xc],r10
8000a1b2:	c4 78       	rjmp	8000a240 <_malloc_r+0xf0>
8000a1b4:	2f e3       	sub	r3,-2
8000a1b6:	c4 d8       	rjmp	8000a250 <_malloc_r+0x100>
8000a1b8:	ee 03 16 09 	lsr	r3,r7,0x9
8000a1bc:	c0 41       	brne	8000a1c4 <_malloc_r+0x74>
8000a1be:	ee 03 16 03 	lsr	r3,r7,0x3
8000a1c2:	c2 68       	rjmp	8000a20e <_malloc_r+0xbe>
8000a1c4:	58 43       	cp.w	r3,4
8000a1c6:	e0 8b 00 06 	brhi	8000a1d2 <_malloc_r+0x82>
8000a1ca:	ee 03 16 06 	lsr	r3,r7,0x6
8000a1ce:	2c 83       	sub	r3,-56
8000a1d0:	c1 f8       	rjmp	8000a20e <_malloc_r+0xbe>
8000a1d2:	59 43       	cp.w	r3,20
8000a1d4:	e0 8b 00 04 	brhi	8000a1dc <_malloc_r+0x8c>
8000a1d8:	2a 53       	sub	r3,-91
8000a1da:	c1 a8       	rjmp	8000a20e <_malloc_r+0xbe>
8000a1dc:	e0 43 00 54 	cp.w	r3,84
8000a1e0:	e0 8b 00 06 	brhi	8000a1ec <_malloc_r+0x9c>
8000a1e4:	ee 03 16 0c 	lsr	r3,r7,0xc
8000a1e8:	29 23       	sub	r3,-110
8000a1ea:	c1 28       	rjmp	8000a20e <_malloc_r+0xbe>
8000a1ec:	e0 43 01 54 	cp.w	r3,340
8000a1f0:	e0 8b 00 06 	brhi	8000a1fc <_malloc_r+0xac>
8000a1f4:	ee 03 16 0f 	lsr	r3,r7,0xf
8000a1f8:	28 93       	sub	r3,-119
8000a1fa:	c0 a8       	rjmp	8000a20e <_malloc_r+0xbe>
8000a1fc:	e0 43 05 54 	cp.w	r3,1364
8000a200:	e0 88 00 04 	brls	8000a208 <_malloc_r+0xb8>
8000a204:	37 e3       	mov	r3,126
8000a206:	c0 48       	rjmp	8000a20e <_malloc_r+0xbe>
8000a208:	ee 03 16 12 	lsr	r3,r7,0x12
8000a20c:	28 43       	sub	r3,-124
8000a20e:	e0 6a 01 08 	mov	r10,264
8000a212:	f4 03 00 3a 	add	r10,r10,r3<<0x3
8000a216:	74 36       	ld.w	r6,r10[0xc]
8000a218:	c1 98       	rjmp	8000a24a <_malloc_r+0xfa>
8000a21a:	6c 19       	ld.w	r9,r6[0x4]
8000a21c:	e0 19 ff fc 	andl	r9,0xfffc
8000a220:	f2 07 01 0b 	sub	r11,r9,r7
8000a224:	58 fb       	cp.w	r11,15
8000a226:	e0 8a 00 04 	brle	8000a22e <_malloc_r+0xde>
8000a22a:	20 13       	sub	r3,1
8000a22c:	c1 18       	rjmp	8000a24e <_malloc_r+0xfe>
8000a22e:	6c 38       	ld.w	r8,r6[0xc]
8000a230:	58 0b       	cp.w	r11,0
8000a232:	c0 b5       	brlt	8000a248 <_malloc_r+0xf8>
8000a234:	6c 2a       	ld.w	r10,r6[0x8]
8000a236:	ec 09 00 09 	add	r9,r6,r9
8000a23a:	0a 9c       	mov	r12,r5
8000a23c:	91 2a       	st.w	r8[0x8],r10
8000a23e:	95 38       	st.w	r10[0xc],r8
8000a240:	72 18       	ld.w	r8,r9[0x4]
8000a242:	a1 a8       	sbr	r8,0x0
8000a244:	93 18       	st.w	r9[0x4],r8
8000a246:	cb c8       	rjmp	8000a3be <_malloc_r+0x26e>
8000a248:	10 96       	mov	r6,r8
8000a24a:	14 36       	cp.w	r6,r10
8000a24c:	ce 71       	brne	8000a21a <_malloc_r+0xca>
8000a24e:	2f f3       	sub	r3,-1
8000a250:	e0 6a 01 08 	mov	r10,264
8000a254:	f4 cc ff f8 	sub	r12,r10,-8
8000a258:	78 26       	ld.w	r6,r12[0x8]
8000a25a:	18 36       	cp.w	r6,r12
8000a25c:	c6 c0       	breq	8000a334 <_malloc_r+0x1e4>
8000a25e:	6c 19       	ld.w	r9,r6[0x4]
8000a260:	e0 19 ff fc 	andl	r9,0xfffc
8000a264:	f2 07 01 08 	sub	r8,r9,r7
8000a268:	58 f8       	cp.w	r8,15
8000a26a:	e0 89 00 8f 	brgt	8000a388 <_malloc_r+0x238>
8000a26e:	99 3c       	st.w	r12[0xc],r12
8000a270:	99 2c       	st.w	r12[0x8],r12
8000a272:	58 08       	cp.w	r8,0
8000a274:	c0 55       	brlt	8000a27e <_malloc_r+0x12e>
8000a276:	ec 09 00 09 	add	r9,r6,r9
8000a27a:	0a 9c       	mov	r12,r5
8000a27c:	ce 2b       	rjmp	8000a240 <_malloc_r+0xf0>
8000a27e:	e0 49 01 ff 	cp.w	r9,511
8000a282:	e0 8b 00 13 	brhi	8000a2a8 <_malloc_r+0x158>
8000a286:	a3 99       	lsr	r9,0x3
8000a288:	f4 09 00 38 	add	r8,r10,r9<<0x3
8000a28c:	70 2b       	ld.w	r11,r8[0x8]
8000a28e:	8d 38       	st.w	r6[0xc],r8
8000a290:	8d 2b       	st.w	r6[0x8],r11
8000a292:	97 36       	st.w	r11[0xc],r6
8000a294:	91 26       	st.w	r8[0x8],r6
8000a296:	a3 49       	asr	r9,0x2
8000a298:	74 18       	ld.w	r8,r10[0x4]
8000a29a:	30 1b       	mov	r11,1
8000a29c:	f6 09 09 49 	lsl	r9,r11,r9
8000a2a0:	f1 e9 10 09 	or	r9,r8,r9
8000a2a4:	95 19       	st.w	r10[0x4],r9
8000a2a6:	c4 78       	rjmp	8000a334 <_malloc_r+0x1e4>
8000a2a8:	f2 0a 16 09 	lsr	r10,r9,0x9
8000a2ac:	58 4a       	cp.w	r10,4
8000a2ae:	e0 8b 00 07 	brhi	8000a2bc <_malloc_r+0x16c>
8000a2b2:	f2 0a 16 06 	lsr	r10,r9,0x6
8000a2b6:	2c 8a       	sub	r10,-56
8000a2b8:	c2 08       	rjmp	8000a2f8 <_malloc_r+0x1a8>
8000a2ba:	d7 03       	nop
8000a2bc:	59 4a       	cp.w	r10,20
8000a2be:	e0 8b 00 04 	brhi	8000a2c6 <_malloc_r+0x176>
8000a2c2:	2a 5a       	sub	r10,-91
8000a2c4:	c1 a8       	rjmp	8000a2f8 <_malloc_r+0x1a8>
8000a2c6:	e0 4a 00 54 	cp.w	r10,84
8000a2ca:	e0 8b 00 06 	brhi	8000a2d6 <_malloc_r+0x186>
8000a2ce:	f2 0a 16 0c 	lsr	r10,r9,0xc
8000a2d2:	29 2a       	sub	r10,-110
8000a2d4:	c1 28       	rjmp	8000a2f8 <_malloc_r+0x1a8>
8000a2d6:	e0 4a 01 54 	cp.w	r10,340
8000a2da:	e0 8b 00 06 	brhi	8000a2e6 <_malloc_r+0x196>
8000a2de:	f2 0a 16 0f 	lsr	r10,r9,0xf
8000a2e2:	28 9a       	sub	r10,-119
8000a2e4:	c0 a8       	rjmp	8000a2f8 <_malloc_r+0x1a8>
8000a2e6:	e0 4a 05 54 	cp.w	r10,1364
8000a2ea:	e0 88 00 04 	brls	8000a2f2 <_malloc_r+0x1a2>
8000a2ee:	37 ea       	mov	r10,126
8000a2f0:	c0 48       	rjmp	8000a2f8 <_malloc_r+0x1a8>
8000a2f2:	f2 0a 16 12 	lsr	r10,r9,0x12
8000a2f6:	28 4a       	sub	r10,-124
8000a2f8:	e0 6b 01 08 	mov	r11,264
8000a2fc:	f6 0a 00 34 	add	r4,r11,r10<<0x3
8000a300:	68 28       	ld.w	r8,r4[0x8]
8000a302:	08 38       	cp.w	r8,r4
8000a304:	c0 e1       	brne	8000a320 <_malloc_r+0x1d0>
8000a306:	76 19       	ld.w	r9,r11[0x4]
8000a308:	a3 4a       	asr	r10,0x2
8000a30a:	30 1e       	mov	lr,1
8000a30c:	fc 0a 09 4a 	lsl	r10,lr,r10
8000a310:	f3 ea 10 0a 	or	r10,r9,r10
8000a314:	10 99       	mov	r9,r8
8000a316:	97 1a       	st.w	r11[0x4],r10
8000a318:	c0 a8       	rjmp	8000a32c <_malloc_r+0x1dc>
8000a31a:	70 28       	ld.w	r8,r8[0x8]
8000a31c:	08 38       	cp.w	r8,r4
8000a31e:	c0 60       	breq	8000a32a <_malloc_r+0x1da>
8000a320:	70 1a       	ld.w	r10,r8[0x4]
8000a322:	e0 1a ff fc 	andl	r10,0xfffc
8000a326:	14 39       	cp.w	r9,r10
8000a328:	cf 93       	brcs	8000a31a <_malloc_r+0x1ca>
8000a32a:	70 39       	ld.w	r9,r8[0xc]
8000a32c:	8d 39       	st.w	r6[0xc],r9
8000a32e:	8d 28       	st.w	r6[0x8],r8
8000a330:	91 36       	st.w	r8[0xc],r6
8000a332:	93 26       	st.w	r9[0x8],r6
8000a334:	e6 08 14 02 	asr	r8,r3,0x2
8000a338:	30 1b       	mov	r11,1
8000a33a:	e0 64 01 08 	mov	r4,264
8000a33e:	f6 08 09 4b 	lsl	r11,r11,r8
8000a342:	68 18       	ld.w	r8,r4[0x4]
8000a344:	10 3b       	cp.w	r11,r8
8000a346:	e0 8b 00 69 	brhi	8000a418 <_malloc_r+0x2c8>
8000a34a:	f7 e8 00 09 	and	r9,r11,r8
8000a34e:	c0 b1       	brne	8000a364 <_malloc_r+0x214>
8000a350:	e0 13 ff fc 	andl	r3,0xfffc
8000a354:	a1 7b       	lsl	r11,0x1
8000a356:	2f c3       	sub	r3,-4
8000a358:	c0 38       	rjmp	8000a35e <_malloc_r+0x20e>
8000a35a:	2f c3       	sub	r3,-4
8000a35c:	a1 7b       	lsl	r11,0x1
8000a35e:	f7 e8 00 09 	and	r9,r11,r8
8000a362:	cf c0       	breq	8000a35a <_malloc_r+0x20a>
8000a364:	e8 03 00 3e 	add	lr,r4,r3<<0x3
8000a368:	06 92       	mov	r2,r3
8000a36a:	1c 91       	mov	r1,lr
8000a36c:	62 36       	ld.w	r6,r1[0xc]
8000a36e:	c2 d8       	rjmp	8000a3c8 <_malloc_r+0x278>
8000a370:	6c 1a       	ld.w	r10,r6[0x4]
8000a372:	e0 1a ff fc 	andl	r10,0xfffc
8000a376:	f4 07 01 08 	sub	r8,r10,r7
8000a37a:	58 f8       	cp.w	r8,15
8000a37c:	e0 8a 00 15 	brle	8000a3a6 <_malloc_r+0x256>
8000a380:	6c 3a       	ld.w	r10,r6[0xc]
8000a382:	6c 29       	ld.w	r9,r6[0x8]
8000a384:	95 29       	st.w	r10[0x8],r9
8000a386:	93 3a       	st.w	r9[0xc],r10
8000a388:	0e 99       	mov	r9,r7
8000a38a:	ec 07 00 07 	add	r7,r6,r7
8000a38e:	a1 a9       	sbr	r9,0x0
8000a390:	99 37       	st.w	r12[0xc],r7
8000a392:	99 27       	st.w	r12[0x8],r7
8000a394:	8d 19       	st.w	r6[0x4],r9
8000a396:	ee 08 09 08 	st.w	r7[r8],r8
8000a39a:	8f 2c       	st.w	r7[0x8],r12
8000a39c:	8f 3c       	st.w	r7[0xc],r12
8000a39e:	a1 a8       	sbr	r8,0x0
8000a3a0:	0a 9c       	mov	r12,r5
8000a3a2:	8f 18       	st.w	r7[0x4],r8
8000a3a4:	c0 d8       	rjmp	8000a3be <_malloc_r+0x26e>
8000a3a6:	6c 39       	ld.w	r9,r6[0xc]
8000a3a8:	58 08       	cp.w	r8,0
8000a3aa:	c0 e5       	brlt	8000a3c6 <_malloc_r+0x276>
8000a3ac:	ec 0a 00 0a 	add	r10,r6,r10
8000a3b0:	74 18       	ld.w	r8,r10[0x4]
8000a3b2:	a1 a8       	sbr	r8,0x0
8000a3b4:	0a 9c       	mov	r12,r5
8000a3b6:	95 18       	st.w	r10[0x4],r8
8000a3b8:	6c 28       	ld.w	r8,r6[0x8]
8000a3ba:	93 28       	st.w	r9[0x8],r8
8000a3bc:	91 39       	st.w	r8[0xc],r9
8000a3be:	c1 3d       	rcall	8000a5e4 <__malloc_unlock>
8000a3c0:	ec cc ff f8 	sub	r12,r6,-8
8000a3c4:	d8 32       	popm	r0-r7,pc
8000a3c6:	12 96       	mov	r6,r9
8000a3c8:	02 36       	cp.w	r6,r1
8000a3ca:	cd 31       	brne	8000a370 <_malloc_r+0x220>
8000a3cc:	2f f2       	sub	r2,-1
8000a3ce:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
8000a3d2:	c0 30       	breq	8000a3d8 <_malloc_r+0x288>
8000a3d4:	2f 81       	sub	r1,-8
8000a3d6:	cc bb       	rjmp	8000a36c <_malloc_r+0x21c>
8000a3d8:	1c 98       	mov	r8,lr
8000a3da:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
8000a3de:	c0 81       	brne	8000a3ee <_malloc_r+0x29e>
8000a3e0:	68 19       	ld.w	r9,r4[0x4]
8000a3e2:	f6 08 11 ff 	rsub	r8,r11,-1
8000a3e6:	f3 e8 00 08 	and	r8,r9,r8
8000a3ea:	89 18       	st.w	r4[0x4],r8
8000a3ec:	c0 78       	rjmp	8000a3fa <_malloc_r+0x2aa>
8000a3ee:	f0 c9 00 08 	sub	r9,r8,8
8000a3f2:	20 13       	sub	r3,1
8000a3f4:	70 08       	ld.w	r8,r8[0x0]
8000a3f6:	12 38       	cp.w	r8,r9
8000a3f8:	cf 10       	breq	8000a3da <_malloc_r+0x28a>
8000a3fa:	a1 7b       	lsl	r11,0x1
8000a3fc:	68 18       	ld.w	r8,r4[0x4]
8000a3fe:	10 3b       	cp.w	r11,r8
8000a400:	e0 8b 00 0c 	brhi	8000a418 <_malloc_r+0x2c8>
8000a404:	58 0b       	cp.w	r11,0
8000a406:	c0 90       	breq	8000a418 <_malloc_r+0x2c8>
8000a408:	04 93       	mov	r3,r2
8000a40a:	c0 38       	rjmp	8000a410 <_malloc_r+0x2c0>
8000a40c:	2f c3       	sub	r3,-4
8000a40e:	a1 7b       	lsl	r11,0x1
8000a410:	f7 e8 00 09 	and	r9,r11,r8
8000a414:	ca 81       	brne	8000a364 <_malloc_r+0x214>
8000a416:	cf bb       	rjmp	8000a40c <_malloc_r+0x2bc>
8000a418:	68 23       	ld.w	r3,r4[0x8]
8000a41a:	66 12       	ld.w	r2,r3[0x4]
8000a41c:	e0 12 ff fc 	andl	r2,0xfffc
8000a420:	0e 32       	cp.w	r2,r7
8000a422:	5f 39       	srlo	r9
8000a424:	e4 07 01 08 	sub	r8,r2,r7
8000a428:	58 f8       	cp.w	r8,15
8000a42a:	5f aa       	srle	r10
8000a42c:	f5 e9 10 09 	or	r9,r10,r9
8000a430:	e0 80 00 9a 	breq	8000a564 <_malloc_r+0x414>
8000a434:	e0 68 06 34 	mov	r8,1588
8000a438:	70 01       	ld.w	r1,r8[0x0]
8000a43a:	e0 68 05 14 	mov	r8,1300
8000a43e:	2f 01       	sub	r1,-16
8000a440:	70 08       	ld.w	r8,r8[0x0]
8000a442:	0e 01       	add	r1,r7
8000a444:	5b f8       	cp.w	r8,-1
8000a446:	c0 40       	breq	8000a44e <_malloc_r+0x2fe>
8000a448:	28 11       	sub	r1,-127
8000a44a:	e0 11 ff 80 	andl	r1,0xff80
8000a44e:	02 9b       	mov	r11,r1
8000a450:	0a 9c       	mov	r12,r5
8000a452:	e0 a0 05 39 	rcall	8000aec4 <_sbrk_r>
8000a456:	18 96       	mov	r6,r12
8000a458:	5b fc       	cp.w	r12,-1
8000a45a:	c7 50       	breq	8000a544 <_malloc_r+0x3f4>
8000a45c:	e6 02 00 08 	add	r8,r3,r2
8000a460:	10 3c       	cp.w	r12,r8
8000a462:	c0 32       	brcc	8000a468 <_malloc_r+0x318>
8000a464:	08 33       	cp.w	r3,r4
8000a466:	c6 f1       	brne	8000a544 <_malloc_r+0x3f4>
8000a468:	e0 6a 06 38 	mov	r10,1592
8000a46c:	74 09       	ld.w	r9,r10[0x0]
8000a46e:	e2 09 00 09 	add	r9,r1,r9
8000a472:	95 09       	st.w	r10[0x0],r9
8000a474:	10 36       	cp.w	r6,r8
8000a476:	c0 a1       	brne	8000a48a <_malloc_r+0x33a>
8000a478:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
8000a47c:	c0 71       	brne	8000a48a <_malloc_r+0x33a>
8000a47e:	e2 02 00 02 	add	r2,r1,r2
8000a482:	68 28       	ld.w	r8,r4[0x8]
8000a484:	a1 a2       	sbr	r2,0x0
8000a486:	91 12       	st.w	r8[0x4],r2
8000a488:	c4 f8       	rjmp	8000a526 <_malloc_r+0x3d6>
8000a48a:	e0 6a 05 14 	mov	r10,1300
8000a48e:	74 0b       	ld.w	r11,r10[0x0]
8000a490:	5b fb       	cp.w	r11,-1
8000a492:	c0 31       	brne	8000a498 <_malloc_r+0x348>
8000a494:	95 06       	st.w	r10[0x0],r6
8000a496:	c0 78       	rjmp	8000a4a4 <_malloc_r+0x354>
8000a498:	ec 09 00 09 	add	r9,r6,r9
8000a49c:	e0 6a 06 38 	mov	r10,1592
8000a4a0:	10 19       	sub	r9,r8
8000a4a2:	95 09       	st.w	r10[0x0],r9
8000a4a4:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
8000a4a8:	f0 09 11 08 	rsub	r9,r8,8
8000a4ac:	58 08       	cp.w	r8,0
8000a4ae:	f2 08 17 10 	movne	r8,r9
8000a4b2:	ed d8 e1 06 	addne	r6,r6,r8
8000a4b6:	28 08       	sub	r8,-128
8000a4b8:	ec 01 00 01 	add	r1,r6,r1
8000a4bc:	0a 9c       	mov	r12,r5
8000a4be:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8000a4c2:	f0 01 01 01 	sub	r1,r8,r1
8000a4c6:	02 9b       	mov	r11,r1
8000a4c8:	e0 a0 04 fe 	rcall	8000aec4 <_sbrk_r>
8000a4cc:	e0 68 06 38 	mov	r8,1592
8000a4d0:	5b fc       	cp.w	r12,-1
8000a4d2:	ec 0c 17 00 	moveq	r12,r6
8000a4d6:	f9 b1 00 00 	moveq	r1,0
8000a4da:	70 09       	ld.w	r9,r8[0x0]
8000a4dc:	0c 1c       	sub	r12,r6
8000a4de:	89 26       	st.w	r4[0x8],r6
8000a4e0:	02 0c       	add	r12,r1
8000a4e2:	12 01       	add	r1,r9
8000a4e4:	a1 ac       	sbr	r12,0x0
8000a4e6:	91 01       	st.w	r8[0x0],r1
8000a4e8:	8d 1c       	st.w	r6[0x4],r12
8000a4ea:	08 33       	cp.w	r3,r4
8000a4ec:	c1 d0       	breq	8000a526 <_malloc_r+0x3d6>
8000a4ee:	58 f2       	cp.w	r2,15
8000a4f0:	e0 8b 00 05 	brhi	8000a4fa <_malloc_r+0x3aa>
8000a4f4:	30 18       	mov	r8,1
8000a4f6:	8d 18       	st.w	r6[0x4],r8
8000a4f8:	c2 68       	rjmp	8000a544 <_malloc_r+0x3f4>
8000a4fa:	30 59       	mov	r9,5
8000a4fc:	20 c2       	sub	r2,12
8000a4fe:	e0 12 ff f8 	andl	r2,0xfff8
8000a502:	e6 02 00 08 	add	r8,r3,r2
8000a506:	91 29       	st.w	r8[0x8],r9
8000a508:	91 19       	st.w	r8[0x4],r9
8000a50a:	66 18       	ld.w	r8,r3[0x4]
8000a50c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a510:	e5 e8 10 08 	or	r8,r2,r8
8000a514:	87 18       	st.w	r3[0x4],r8
8000a516:	58 f2       	cp.w	r2,15
8000a518:	e0 88 00 07 	brls	8000a526 <_malloc_r+0x3d6>
8000a51c:	e6 cb ff f8 	sub	r11,r3,-8
8000a520:	0a 9c       	mov	r12,r5
8000a522:	fe b0 fb 71 	rcall	80009c04 <_free_r>
8000a526:	e0 69 06 30 	mov	r9,1584
8000a52a:	72 0a       	ld.w	r10,r9[0x0]
8000a52c:	e0 68 06 38 	mov	r8,1592
8000a530:	70 08       	ld.w	r8,r8[0x0]
8000a532:	14 38       	cp.w	r8,r10
8000a534:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000a538:	e0 69 06 2c 	mov	r9,1580
8000a53c:	72 0a       	ld.w	r10,r9[0x0]
8000a53e:	14 38       	cp.w	r8,r10
8000a540:	f3 f8 ba 00 	st.whi	r9[0x0],r8
8000a544:	68 28       	ld.w	r8,r4[0x8]
8000a546:	70 18       	ld.w	r8,r8[0x4]
8000a548:	e0 18 ff fc 	andl	r8,0xfffc
8000a54c:	0e 38       	cp.w	r8,r7
8000a54e:	5f 39       	srlo	r9
8000a550:	0e 18       	sub	r8,r7
8000a552:	58 f8       	cp.w	r8,15
8000a554:	5f aa       	srle	r10
8000a556:	f5 e9 10 09 	or	r9,r10,r9
8000a55a:	c0 50       	breq	8000a564 <_malloc_r+0x414>
8000a55c:	0a 9c       	mov	r12,r5
8000a55e:	c4 3c       	rcall	8000a5e4 <__malloc_unlock>
8000a560:	d8 3a       	popm	r0-r7,pc,r12=0
8000a562:	d7 03       	nop
8000a564:	68 26       	ld.w	r6,r4[0x8]
8000a566:	a1 a8       	sbr	r8,0x0
8000a568:	0e 99       	mov	r9,r7
8000a56a:	a1 a9       	sbr	r9,0x0
8000a56c:	8d 19       	st.w	r6[0x4],r9
8000a56e:	ec 07 00 07 	add	r7,r6,r7
8000a572:	0a 9c       	mov	r12,r5
8000a574:	89 27       	st.w	r4[0x8],r7
8000a576:	8f 18       	st.w	r7[0x4],r8
8000a578:	c3 6c       	rcall	8000a5e4 <__malloc_unlock>
8000a57a:	ec cc ff f8 	sub	r12,r6,-8
8000a57e:	d8 32       	popm	r0-r7,pc

8000a580 <memchr>:
8000a580:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
8000a584:	c0 68       	rjmp	8000a590 <memchr+0x10>
8000a586:	20 1a       	sub	r10,1
8000a588:	19 88       	ld.ub	r8,r12[0x0]
8000a58a:	16 38       	cp.w	r8,r11
8000a58c:	5e 0c       	reteq	r12
8000a58e:	2f fc       	sub	r12,-1
8000a590:	58 0a       	cp.w	r10,0
8000a592:	cf a1       	brne	8000a586 <memchr+0x6>
8000a594:	5e fa       	retal	r10

8000a596 <memmove>:
8000a596:	d4 01       	pushm	lr
8000a598:	18 3b       	cp.w	r11,r12
8000a59a:	c1 92       	brcc	8000a5cc <memmove+0x36>
8000a59c:	f6 0a 00 09 	add	r9,r11,r10
8000a5a0:	12 3c       	cp.w	r12,r9
8000a5a2:	c1 52       	brcc	8000a5cc <memmove+0x36>
8000a5a4:	f8 0a 00 0b 	add	r11,r12,r10
8000a5a8:	30 08       	mov	r8,0
8000a5aa:	c0 68       	rjmp	8000a5b6 <memmove+0x20>
8000a5ac:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8000a5b0:	20 1a       	sub	r10,1
8000a5b2:	f6 08 0b 0e 	st.b	r11[r8],lr
8000a5b6:	20 18       	sub	r8,1
8000a5b8:	58 0a       	cp.w	r10,0
8000a5ba:	cf 91       	brne	8000a5ac <memmove+0x16>
8000a5bc:	d8 02       	popm	pc
8000a5be:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000a5c2:	20 1a       	sub	r10,1
8000a5c4:	f8 08 0b 09 	st.b	r12[r8],r9
8000a5c8:	2f f8       	sub	r8,-1
8000a5ca:	c0 28       	rjmp	8000a5ce <memmove+0x38>
8000a5cc:	30 08       	mov	r8,0
8000a5ce:	58 0a       	cp.w	r10,0
8000a5d0:	cf 71       	brne	8000a5be <memmove+0x28>
8000a5d2:	d8 02       	popm	pc

8000a5d4 <memset>:
8000a5d4:	18 98       	mov	r8,r12
8000a5d6:	c0 38       	rjmp	8000a5dc <memset+0x8>
8000a5d8:	10 cb       	st.b	r8++,r11
8000a5da:	20 1a       	sub	r10,1
8000a5dc:	58 0a       	cp.w	r10,0
8000a5de:	cf d1       	brne	8000a5d8 <memset+0x4>
8000a5e0:	5e fc       	retal	r12

8000a5e2 <__malloc_lock>:
8000a5e2:	5e fc       	retal	r12

8000a5e4 <__malloc_unlock>:
8000a5e4:	5e fc       	retal	r12

8000a5e6 <__hi0bits>:
8000a5e6:	18 98       	mov	r8,r12
8000a5e8:	e0 1c 00 00 	andl	r12,0x0
8000a5ec:	f0 09 15 10 	lsl	r9,r8,0x10
8000a5f0:	58 0c       	cp.w	r12,0
8000a5f2:	f2 08 17 00 	moveq	r8,r9
8000a5f6:	f9 bc 00 10 	moveq	r12,16
8000a5fa:	f9 bc 01 00 	movne	r12,0
8000a5fe:	10 9a       	mov	r10,r8
8000a600:	f0 09 15 08 	lsl	r9,r8,0x8
8000a604:	e6 1a ff 00 	andh	r10,0xff00,COH
8000a608:	f7 bc 00 f8 	subeq	r12,-8
8000a60c:	f2 08 17 00 	moveq	r8,r9
8000a610:	10 9a       	mov	r10,r8
8000a612:	f0 09 15 04 	lsl	r9,r8,0x4
8000a616:	e6 1a f0 00 	andh	r10,0xf000,COH
8000a61a:	f7 bc 00 fc 	subeq	r12,-4
8000a61e:	f2 08 17 00 	moveq	r8,r9
8000a622:	10 9a       	mov	r10,r8
8000a624:	f0 09 15 02 	lsl	r9,r8,0x2
8000a628:	e6 1a c0 00 	andh	r10,0xc000,COH
8000a62c:	f7 bc 00 fe 	subeq	r12,-2
8000a630:	f2 08 17 00 	moveq	r8,r9
8000a634:	58 08       	cp.w	r8,0
8000a636:	5e 5c       	retlt	r12
8000a638:	ed b8 00 1e 	bld	r8,0x1e
8000a63c:	f9 bc 01 20 	movne	r12,32
8000a640:	f7 bc 00 ff 	subeq	r12,-1
8000a644:	5e fc       	retal	r12

8000a646 <__lo0bits>:
8000a646:	18 99       	mov	r9,r12
8000a648:	78 08       	ld.w	r8,r12[0x0]
8000a64a:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8000a64e:	c1 50       	breq	8000a678 <__lo0bits+0x32>
8000a650:	ed b8 00 00 	bld	r8,0x0
8000a654:	c0 21       	brne	8000a658 <__lo0bits+0x12>
8000a656:	5e fd       	retal	0
8000a658:	10 9b       	mov	r11,r8
8000a65a:	f0 0a 16 01 	lsr	r10,r8,0x1
8000a65e:	e2 1b 00 02 	andl	r11,0x2,COH
8000a662:	a3 88       	lsr	r8,0x2
8000a664:	58 0b       	cp.w	r11,0
8000a666:	f3 fa 1a 00 	st.wne	r9[0x0],r10
8000a66a:	f9 bc 01 01 	movne	r12,1
8000a66e:	f3 f8 0a 00 	st.weq	r9[0x0],r8
8000a672:	f9 bc 00 02 	moveq	r12,2
8000a676:	5e fc       	retal	r12
8000a678:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
8000a67c:	f0 0b 16 10 	lsr	r11,r8,0x10
8000a680:	58 0a       	cp.w	r10,0
8000a682:	f6 08 17 00 	moveq	r8,r11
8000a686:	f9 bc 00 10 	moveq	r12,16
8000a68a:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
8000a68e:	f0 0a 16 08 	lsr	r10,r8,0x8
8000a692:	58 0b       	cp.w	r11,0
8000a694:	f7 bc 00 f8 	subeq	r12,-8
8000a698:	f4 08 17 00 	moveq	r8,r10
8000a69c:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
8000a6a0:	f0 0a 16 04 	lsr	r10,r8,0x4
8000a6a4:	58 0b       	cp.w	r11,0
8000a6a6:	f7 bc 00 fc 	subeq	r12,-4
8000a6aa:	f4 08 17 00 	moveq	r8,r10
8000a6ae:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
8000a6b2:	f0 0a 16 02 	lsr	r10,r8,0x2
8000a6b6:	58 0b       	cp.w	r11,0
8000a6b8:	f7 bc 00 fe 	subeq	r12,-2
8000a6bc:	f4 08 17 00 	moveq	r8,r10
8000a6c0:	ed b8 00 00 	bld	r8,0x0
8000a6c4:	c0 60       	breq	8000a6d0 <__lo0bits+0x8a>
8000a6c6:	a1 98       	lsr	r8,0x1
8000a6c8:	c0 31       	brne	8000a6ce <__lo0bits+0x88>
8000a6ca:	32 0c       	mov	r12,32
8000a6cc:	5e fc       	retal	r12
8000a6ce:	2f fc       	sub	r12,-1
8000a6d0:	93 08       	st.w	r9[0x0],r8
8000a6d2:	5e fc       	retal	r12

8000a6d4 <__mcmp>:
8000a6d4:	d4 01       	pushm	lr
8000a6d6:	18 98       	mov	r8,r12
8000a6d8:	76 49       	ld.w	r9,r11[0x10]
8000a6da:	78 4c       	ld.w	r12,r12[0x10]
8000a6dc:	12 1c       	sub	r12,r9
8000a6de:	c1 31       	brne	8000a704 <__mcmp+0x30>
8000a6e0:	2f b9       	sub	r9,-5
8000a6e2:	a3 69       	lsl	r9,0x2
8000a6e4:	12 0b       	add	r11,r9
8000a6e6:	f0 09 00 09 	add	r9,r8,r9
8000a6ea:	2e c8       	sub	r8,-20
8000a6ec:	13 4e       	ld.w	lr,--r9
8000a6ee:	17 4a       	ld.w	r10,--r11
8000a6f0:	14 3e       	cp.w	lr,r10
8000a6f2:	c0 60       	breq	8000a6fe <__mcmp+0x2a>
8000a6f4:	f9 bc 03 ff 	movlo	r12,-1
8000a6f8:	f9 bc 02 01 	movhs	r12,1
8000a6fc:	d8 02       	popm	pc
8000a6fe:	10 39       	cp.w	r9,r8
8000a700:	fe 9b ff f6 	brhi	8000a6ec <__mcmp+0x18>
8000a704:	d8 02       	popm	pc
8000a706:	d7 03       	nop

8000a708 <_Bfree>:
8000a708:	d4 21       	pushm	r4-r7,lr
8000a70a:	18 97       	mov	r7,r12
8000a70c:	16 95       	mov	r5,r11
8000a70e:	78 96       	ld.w	r6,r12[0x24]
8000a710:	58 06       	cp.w	r6,0
8000a712:	c0 91       	brne	8000a724 <_Bfree+0x1c>
8000a714:	31 0c       	mov	r12,16
8000a716:	fe b0 fd 15 	rcall	8000a140 <malloc>
8000a71a:	99 36       	st.w	r12[0xc],r6
8000a71c:	8f 9c       	st.w	r7[0x24],r12
8000a71e:	99 16       	st.w	r12[0x4],r6
8000a720:	99 26       	st.w	r12[0x8],r6
8000a722:	99 06       	st.w	r12[0x0],r6
8000a724:	58 05       	cp.w	r5,0
8000a726:	c0 90       	breq	8000a738 <_Bfree+0x30>
8000a728:	6a 19       	ld.w	r9,r5[0x4]
8000a72a:	6e 98       	ld.w	r8,r7[0x24]
8000a72c:	70 38       	ld.w	r8,r8[0xc]
8000a72e:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
8000a732:	8b 0a       	st.w	r5[0x0],r10
8000a734:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
8000a738:	d8 22       	popm	r4-r7,pc
8000a73a:	d7 03       	nop

8000a73c <_Balloc>:
8000a73c:	d4 21       	pushm	r4-r7,lr
8000a73e:	18 97       	mov	r7,r12
8000a740:	16 96       	mov	r6,r11
8000a742:	78 95       	ld.w	r5,r12[0x24]
8000a744:	58 05       	cp.w	r5,0
8000a746:	c0 91       	brne	8000a758 <_Balloc+0x1c>
8000a748:	31 0c       	mov	r12,16
8000a74a:	fe b0 fc fb 	rcall	8000a140 <malloc>
8000a74e:	99 35       	st.w	r12[0xc],r5
8000a750:	8f 9c       	st.w	r7[0x24],r12
8000a752:	99 15       	st.w	r12[0x4],r5
8000a754:	99 25       	st.w	r12[0x8],r5
8000a756:	99 05       	st.w	r12[0x0],r5
8000a758:	6e 95       	ld.w	r5,r7[0x24]
8000a75a:	6a 38       	ld.w	r8,r5[0xc]
8000a75c:	58 08       	cp.w	r8,0
8000a75e:	c0 b1       	brne	8000a774 <_Balloc+0x38>
8000a760:	31 0a       	mov	r10,16
8000a762:	30 4b       	mov	r11,4
8000a764:	0e 9c       	mov	r12,r7
8000a766:	e0 a0 04 93 	rcall	8000b08c <_calloc_r>
8000a76a:	8b 3c       	st.w	r5[0xc],r12
8000a76c:	6e 98       	ld.w	r8,r7[0x24]
8000a76e:	70 3c       	ld.w	r12,r8[0xc]
8000a770:	58 0c       	cp.w	r12,0
8000a772:	c1 b0       	breq	8000a7a8 <_Balloc+0x6c>
8000a774:	6e 98       	ld.w	r8,r7[0x24]
8000a776:	70 38       	ld.w	r8,r8[0xc]
8000a778:	f0 06 00 28 	add	r8,r8,r6<<0x2
8000a77c:	70 0c       	ld.w	r12,r8[0x0]
8000a77e:	58 0c       	cp.w	r12,0
8000a780:	c0 40       	breq	8000a788 <_Balloc+0x4c>
8000a782:	78 09       	ld.w	r9,r12[0x0]
8000a784:	91 09       	st.w	r8[0x0],r9
8000a786:	c0 e8       	rjmp	8000a7a2 <_Balloc+0x66>
8000a788:	0e 9c       	mov	r12,r7
8000a78a:	30 17       	mov	r7,1
8000a78c:	0e 9b       	mov	r11,r7
8000a78e:	ee 06 09 47 	lsl	r7,r7,r6
8000a792:	ee ca ff fb 	sub	r10,r7,-5
8000a796:	a3 6a       	lsl	r10,0x2
8000a798:	e0 a0 04 7a 	rcall	8000b08c <_calloc_r>
8000a79c:	c0 60       	breq	8000a7a8 <_Balloc+0x6c>
8000a79e:	99 16       	st.w	r12[0x4],r6
8000a7a0:	99 27       	st.w	r12[0x8],r7
8000a7a2:	30 08       	mov	r8,0
8000a7a4:	99 38       	st.w	r12[0xc],r8
8000a7a6:	99 48       	st.w	r12[0x10],r8
8000a7a8:	d8 22       	popm	r4-r7,pc
8000a7aa:	d7 03       	nop

8000a7ac <__d2b>:
8000a7ac:	d4 31       	pushm	r0-r7,lr
8000a7ae:	20 2d       	sub	sp,8
8000a7b0:	16 93       	mov	r3,r11
8000a7b2:	12 96       	mov	r6,r9
8000a7b4:	10 95       	mov	r5,r8
8000a7b6:	14 92       	mov	r2,r10
8000a7b8:	30 1b       	mov	r11,1
8000a7ba:	cc 1f       	rcall	8000a73c <_Balloc>
8000a7bc:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
8000a7c0:	50 09       	stdsp	sp[0x0],r9
8000a7c2:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8000a7c6:	b5 a9       	sbr	r9,0x14
8000a7c8:	f0 01 16 14 	lsr	r1,r8,0x14
8000a7cc:	fb f9 1a 00 	st.wne	sp[0x0],r9
8000a7d0:	18 94       	mov	r4,r12
8000a7d2:	58 02       	cp.w	r2,0
8000a7d4:	c1 d0       	breq	8000a80e <__d2b+0x62>
8000a7d6:	fa cc ff f8 	sub	r12,sp,-8
8000a7da:	18 d2       	st.w	--r12,r2
8000a7dc:	c3 5f       	rcall	8000a646 <__lo0bits>
8000a7de:	40 18       	lddsp	r8,sp[0x4]
8000a7e0:	c0 d0       	breq	8000a7fa <__d2b+0x4e>
8000a7e2:	40 09       	lddsp	r9,sp[0x0]
8000a7e4:	f8 0a 11 20 	rsub	r10,r12,32
8000a7e8:	f2 0a 09 4a 	lsl	r10,r9,r10
8000a7ec:	f5 e8 10 08 	or	r8,r10,r8
8000a7f0:	89 58       	st.w	r4[0x14],r8
8000a7f2:	f2 0c 0a 49 	lsr	r9,r9,r12
8000a7f6:	50 09       	stdsp	sp[0x0],r9
8000a7f8:	c0 28       	rjmp	8000a7fc <__d2b+0x50>
8000a7fa:	89 58       	st.w	r4[0x14],r8
8000a7fc:	40 08       	lddsp	r8,sp[0x0]
8000a7fe:	58 08       	cp.w	r8,0
8000a800:	f9 b3 01 02 	movne	r3,2
8000a804:	f9 b3 00 01 	moveq	r3,1
8000a808:	89 68       	st.w	r4[0x18],r8
8000a80a:	89 43       	st.w	r4[0x10],r3
8000a80c:	c0 88       	rjmp	8000a81c <__d2b+0x70>
8000a80e:	1a 9c       	mov	r12,sp
8000a810:	c1 bf       	rcall	8000a646 <__lo0bits>
8000a812:	30 13       	mov	r3,1
8000a814:	40 08       	lddsp	r8,sp[0x0]
8000a816:	2e 0c       	sub	r12,-32
8000a818:	89 43       	st.w	r4[0x10],r3
8000a81a:	89 58       	st.w	r4[0x14],r8
8000a81c:	58 01       	cp.w	r1,0
8000a81e:	c0 90       	breq	8000a830 <__d2b+0x84>
8000a820:	e2 c1 04 33 	sub	r1,r1,1075
8000a824:	18 01       	add	r1,r12
8000a826:	8d 01       	st.w	r6[0x0],r1
8000a828:	f8 0c 11 35 	rsub	r12,r12,53
8000a82c:	8b 0c       	st.w	r5[0x0],r12
8000a82e:	c0 c8       	rjmp	8000a846 <__d2b+0x9a>
8000a830:	e6 c8 ff fc 	sub	r8,r3,-4
8000a834:	f8 cc 04 32 	sub	r12,r12,1074
8000a838:	a5 73       	lsl	r3,0x5
8000a83a:	8d 0c       	st.w	r6[0x0],r12
8000a83c:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
8000a840:	cd 3e       	rcall	8000a5e6 <__hi0bits>
8000a842:	18 13       	sub	r3,r12
8000a844:	8b 03       	st.w	r5[0x0],r3
8000a846:	08 9c       	mov	r12,r4
8000a848:	2f ed       	sub	sp,-8
8000a84a:	d8 32       	popm	r0-r7,pc

8000a84c <__mdiff>:
8000a84c:	d4 31       	pushm	r0-r7,lr
8000a84e:	74 48       	ld.w	r8,r10[0x10]
8000a850:	76 45       	ld.w	r5,r11[0x10]
8000a852:	16 97       	mov	r7,r11
8000a854:	14 96       	mov	r6,r10
8000a856:	10 15       	sub	r5,r8
8000a858:	c1 31       	brne	8000a87e <__mdiff+0x32>
8000a85a:	2f b8       	sub	r8,-5
8000a85c:	ee ce ff ec 	sub	lr,r7,-20
8000a860:	a3 68       	lsl	r8,0x2
8000a862:	f4 08 00 0b 	add	r11,r10,r8
8000a866:	ee 08 00 08 	add	r8,r7,r8
8000a86a:	11 4a       	ld.w	r10,--r8
8000a86c:	17 49       	ld.w	r9,--r11
8000a86e:	12 3a       	cp.w	r10,r9
8000a870:	c0 30       	breq	8000a876 <__mdiff+0x2a>
8000a872:	c0 e2       	brcc	8000a88e <__mdiff+0x42>
8000a874:	c0 78       	rjmp	8000a882 <__mdiff+0x36>
8000a876:	1c 38       	cp.w	r8,lr
8000a878:	fe 9b ff f9 	brhi	8000a86a <__mdiff+0x1e>
8000a87c:	c4 98       	rjmp	8000a90e <__mdiff+0xc2>
8000a87e:	58 05       	cp.w	r5,0
8000a880:	c0 64       	brge	8000a88c <__mdiff+0x40>
8000a882:	0e 98       	mov	r8,r7
8000a884:	30 15       	mov	r5,1
8000a886:	0c 97       	mov	r7,r6
8000a888:	10 96       	mov	r6,r8
8000a88a:	c0 28       	rjmp	8000a88e <__mdiff+0x42>
8000a88c:	30 05       	mov	r5,0
8000a88e:	6e 1b       	ld.w	r11,r7[0x4]
8000a890:	c5 6f       	rcall	8000a73c <_Balloc>
8000a892:	6e 49       	ld.w	r9,r7[0x10]
8000a894:	6c 44       	ld.w	r4,r6[0x10]
8000a896:	99 35       	st.w	r12[0xc],r5
8000a898:	2f b4       	sub	r4,-5
8000a89a:	f2 c5 ff fb 	sub	r5,r9,-5
8000a89e:	ec 04 00 24 	add	r4,r6,r4<<0x2
8000a8a2:	ee 05 00 25 	add	r5,r7,r5<<0x2
8000a8a6:	2e c6       	sub	r6,-20
8000a8a8:	2e c7       	sub	r7,-20
8000a8aa:	f8 c8 ff ec 	sub	r8,r12,-20
8000a8ae:	30 0a       	mov	r10,0
8000a8b0:	0f 0e       	ld.w	lr,r7++
8000a8b2:	0d 0b       	ld.w	r11,r6++
8000a8b4:	fc 02 16 10 	lsr	r2,lr,0x10
8000a8b8:	f6 03 16 10 	lsr	r3,r11,0x10
8000a8bc:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000a8c0:	e4 03 01 03 	sub	r3,r2,r3
8000a8c4:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000a8c8:	fc 0b 01 0b 	sub	r11,lr,r11
8000a8cc:	f6 0a 00 0a 	add	r10,r11,r10
8000a8d0:	b0 1a       	st.h	r8[0x2],r10
8000a8d2:	b1 4a       	asr	r10,0x10
8000a8d4:	e6 0a 00 0a 	add	r10,r3,r10
8000a8d8:	b0 0a       	st.h	r8[0x0],r10
8000a8da:	2f c8       	sub	r8,-4
8000a8dc:	b1 4a       	asr	r10,0x10
8000a8de:	08 36       	cp.w	r6,r4
8000a8e0:	ce 83       	brcs	8000a8b0 <__mdiff+0x64>
8000a8e2:	c0 d8       	rjmp	8000a8fc <__mdiff+0xb0>
8000a8e4:	0f 0b       	ld.w	r11,r7++
8000a8e6:	f6 0e 16 10 	lsr	lr,r11,0x10
8000a8ea:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000a8ee:	16 0a       	add	r10,r11
8000a8f0:	b0 1a       	st.h	r8[0x2],r10
8000a8f2:	b1 4a       	asr	r10,0x10
8000a8f4:	1c 0a       	add	r10,lr
8000a8f6:	b0 0a       	st.h	r8[0x0],r10
8000a8f8:	2f c8       	sub	r8,-4
8000a8fa:	b1 4a       	asr	r10,0x10
8000a8fc:	0a 37       	cp.w	r7,r5
8000a8fe:	cf 33       	brcs	8000a8e4 <__mdiff+0x98>
8000a900:	c0 28       	rjmp	8000a904 <__mdiff+0xb8>
8000a902:	20 19       	sub	r9,1
8000a904:	11 4a       	ld.w	r10,--r8
8000a906:	58 0a       	cp.w	r10,0
8000a908:	cf d0       	breq	8000a902 <__mdiff+0xb6>
8000a90a:	99 49       	st.w	r12[0x10],r9
8000a90c:	d8 32       	popm	r0-r7,pc
8000a90e:	30 0b       	mov	r11,0
8000a910:	c1 6f       	rcall	8000a73c <_Balloc>
8000a912:	30 18       	mov	r8,1
8000a914:	99 48       	st.w	r12[0x10],r8
8000a916:	30 08       	mov	r8,0
8000a918:	99 58       	st.w	r12[0x14],r8
8000a91a:	d8 32       	popm	r0-r7,pc

8000a91c <__lshift>:
8000a91c:	d4 31       	pushm	r0-r7,lr
8000a91e:	16 97       	mov	r7,r11
8000a920:	76 46       	ld.w	r6,r11[0x10]
8000a922:	f4 02 14 05 	asr	r2,r10,0x5
8000a926:	2f f6       	sub	r6,-1
8000a928:	14 93       	mov	r3,r10
8000a92a:	18 94       	mov	r4,r12
8000a92c:	04 06       	add	r6,r2
8000a92e:	76 1b       	ld.w	r11,r11[0x4]
8000a930:	6e 28       	ld.w	r8,r7[0x8]
8000a932:	c0 38       	rjmp	8000a938 <__lshift+0x1c>
8000a934:	2f fb       	sub	r11,-1
8000a936:	a1 78       	lsl	r8,0x1
8000a938:	10 36       	cp.w	r6,r8
8000a93a:	fe 99 ff fd 	brgt	8000a934 <__lshift+0x18>
8000a93e:	08 9c       	mov	r12,r4
8000a940:	cf ee       	rcall	8000a73c <_Balloc>
8000a942:	30 09       	mov	r9,0
8000a944:	18 95       	mov	r5,r12
8000a946:	f8 c8 ff ec 	sub	r8,r12,-20
8000a94a:	12 9a       	mov	r10,r9
8000a94c:	c0 38       	rjmp	8000a952 <__lshift+0x36>
8000a94e:	10 aa       	st.w	r8++,r10
8000a950:	2f f9       	sub	r9,-1
8000a952:	04 39       	cp.w	r9,r2
8000a954:	cf d5       	brlt	8000a94e <__lshift+0x32>
8000a956:	6e 4b       	ld.w	r11,r7[0x10]
8000a958:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
8000a95c:	2f bb       	sub	r11,-5
8000a95e:	ee c9 ff ec 	sub	r9,r7,-20
8000a962:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
8000a966:	58 03       	cp.w	r3,0
8000a968:	c1 30       	breq	8000a98e <__lshift+0x72>
8000a96a:	e6 0c 11 20 	rsub	r12,r3,32
8000a96e:	30 0a       	mov	r10,0
8000a970:	72 02       	ld.w	r2,r9[0x0]
8000a972:	e4 03 09 42 	lsl	r2,r2,r3
8000a976:	04 4a       	or	r10,r2
8000a978:	10 aa       	st.w	r8++,r10
8000a97a:	13 0a       	ld.w	r10,r9++
8000a97c:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000a980:	16 39       	cp.w	r9,r11
8000a982:	cf 73       	brcs	8000a970 <__lshift+0x54>
8000a984:	91 0a       	st.w	r8[0x0],r10
8000a986:	58 0a       	cp.w	r10,0
8000a988:	c0 70       	breq	8000a996 <__lshift+0x7a>
8000a98a:	2f f6       	sub	r6,-1
8000a98c:	c0 58       	rjmp	8000a996 <__lshift+0x7a>
8000a98e:	13 0a       	ld.w	r10,r9++
8000a990:	10 aa       	st.w	r8++,r10
8000a992:	16 39       	cp.w	r9,r11
8000a994:	cf d3       	brcs	8000a98e <__lshift+0x72>
8000a996:	08 9c       	mov	r12,r4
8000a998:	20 16       	sub	r6,1
8000a99a:	0e 9b       	mov	r11,r7
8000a99c:	8b 46       	st.w	r5[0x10],r6
8000a99e:	cb 5e       	rcall	8000a708 <_Bfree>
8000a9a0:	0a 9c       	mov	r12,r5
8000a9a2:	d8 32       	popm	r0-r7,pc

8000a9a4 <__multiply>:
8000a9a4:	d4 31       	pushm	r0-r7,lr
8000a9a6:	20 2d       	sub	sp,8
8000a9a8:	76 49       	ld.w	r9,r11[0x10]
8000a9aa:	74 48       	ld.w	r8,r10[0x10]
8000a9ac:	16 96       	mov	r6,r11
8000a9ae:	14 95       	mov	r5,r10
8000a9b0:	10 39       	cp.w	r9,r8
8000a9b2:	ec 08 17 50 	movlt	r8,r6
8000a9b6:	ea 06 17 50 	movlt	r6,r5
8000a9ba:	f0 05 17 50 	movlt	r5,r8
8000a9be:	6c 28       	ld.w	r8,r6[0x8]
8000a9c0:	76 43       	ld.w	r3,r11[0x10]
8000a9c2:	74 42       	ld.w	r2,r10[0x10]
8000a9c4:	76 1b       	ld.w	r11,r11[0x4]
8000a9c6:	e4 03 00 07 	add	r7,r2,r3
8000a9ca:	10 37       	cp.w	r7,r8
8000a9cc:	f7 bb 09 ff 	subgt	r11,-1
8000a9d0:	cb 6e       	rcall	8000a73c <_Balloc>
8000a9d2:	ee c4 ff fb 	sub	r4,r7,-5
8000a9d6:	f8 c9 ff ec 	sub	r9,r12,-20
8000a9da:	f8 04 00 24 	add	r4,r12,r4<<0x2
8000a9de:	30 0a       	mov	r10,0
8000a9e0:	12 98       	mov	r8,r9
8000a9e2:	c0 28       	rjmp	8000a9e6 <__multiply+0x42>
8000a9e4:	10 aa       	st.w	r8++,r10
8000a9e6:	08 38       	cp.w	r8,r4
8000a9e8:	cf e3       	brcs	8000a9e4 <__multiply+0x40>
8000a9ea:	2f b3       	sub	r3,-5
8000a9ec:	2f b2       	sub	r2,-5
8000a9ee:	ec 03 00 23 	add	r3,r6,r3<<0x2
8000a9f2:	ea 02 00 22 	add	r2,r5,r2<<0x2
8000a9f6:	ec cb ff ec 	sub	r11,r6,-20
8000a9fa:	50 12       	stdsp	sp[0x4],r2
8000a9fc:	ea ca ff ec 	sub	r10,r5,-20
8000aa00:	c4 48       	rjmp	8000aa88 <__multiply+0xe4>
8000aa02:	94 95       	ld.uh	r5,r10[0x2]
8000aa04:	58 05       	cp.w	r5,0
8000aa06:	c2 00       	breq	8000aa46 <__multiply+0xa2>
8000aa08:	12 98       	mov	r8,r9
8000aa0a:	16 96       	mov	r6,r11
8000aa0c:	30 0e       	mov	lr,0
8000aa0e:	50 09       	stdsp	sp[0x0],r9
8000aa10:	0d 02       	ld.w	r2,r6++
8000aa12:	e4 00 16 10 	lsr	r0,r2,0x10
8000aa16:	70 01       	ld.w	r1,r8[0x0]
8000aa18:	70 09       	ld.w	r9,r8[0x0]
8000aa1a:	b1 81       	lsr	r1,0x10
8000aa1c:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
8000aa20:	e0 05 03 41 	mac	r1,r0,r5
8000aa24:	ab 32       	mul	r2,r5
8000aa26:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
8000aa2a:	00 02       	add	r2,r0
8000aa2c:	e4 0e 00 0e 	add	lr,r2,lr
8000aa30:	b0 1e       	st.h	r8[0x2],lr
8000aa32:	b1 8e       	lsr	lr,0x10
8000aa34:	1c 01       	add	r1,lr
8000aa36:	b0 01       	st.h	r8[0x0],r1
8000aa38:	e2 0e 16 10 	lsr	lr,r1,0x10
8000aa3c:	2f c8       	sub	r8,-4
8000aa3e:	06 36       	cp.w	r6,r3
8000aa40:	ce 83       	brcs	8000aa10 <__multiply+0x6c>
8000aa42:	40 09       	lddsp	r9,sp[0x0]
8000aa44:	91 0e       	st.w	r8[0x0],lr
8000aa46:	94 86       	ld.uh	r6,r10[0x0]
8000aa48:	58 06       	cp.w	r6,0
8000aa4a:	c1 d0       	breq	8000aa84 <__multiply+0xe0>
8000aa4c:	72 02       	ld.w	r2,r9[0x0]
8000aa4e:	12 98       	mov	r8,r9
8000aa50:	16 9e       	mov	lr,r11
8000aa52:	30 05       	mov	r5,0
8000aa54:	b0 12       	st.h	r8[0x2],r2
8000aa56:	1d 01       	ld.w	r1,lr++
8000aa58:	90 82       	ld.uh	r2,r8[0x0]
8000aa5a:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
8000aa5e:	ad 30       	mul	r0,r6
8000aa60:	e0 02 00 02 	add	r2,r0,r2
8000aa64:	e4 05 00 05 	add	r5,r2,r5
8000aa68:	b0 05       	st.h	r8[0x0],r5
8000aa6a:	b1 85       	lsr	r5,0x10
8000aa6c:	b1 81       	lsr	r1,0x10
8000aa6e:	2f c8       	sub	r8,-4
8000aa70:	ad 31       	mul	r1,r6
8000aa72:	90 92       	ld.uh	r2,r8[0x2]
8000aa74:	e2 02 00 02 	add	r2,r1,r2
8000aa78:	0a 02       	add	r2,r5
8000aa7a:	e4 05 16 10 	lsr	r5,r2,0x10
8000aa7e:	06 3e       	cp.w	lr,r3
8000aa80:	ce a3       	brcs	8000aa54 <__multiply+0xb0>
8000aa82:	91 02       	st.w	r8[0x0],r2
8000aa84:	2f ca       	sub	r10,-4
8000aa86:	2f c9       	sub	r9,-4
8000aa88:	40 18       	lddsp	r8,sp[0x4]
8000aa8a:	10 3a       	cp.w	r10,r8
8000aa8c:	cb b3       	brcs	8000aa02 <__multiply+0x5e>
8000aa8e:	c0 28       	rjmp	8000aa92 <__multiply+0xee>
8000aa90:	20 17       	sub	r7,1
8000aa92:	58 07       	cp.w	r7,0
8000aa94:	e0 8a 00 05 	brle	8000aa9e <__multiply+0xfa>
8000aa98:	09 48       	ld.w	r8,--r4
8000aa9a:	58 08       	cp.w	r8,0
8000aa9c:	cf a0       	breq	8000aa90 <__multiply+0xec>
8000aa9e:	99 47       	st.w	r12[0x10],r7
8000aaa0:	2f ed       	sub	sp,-8
8000aaa2:	d8 32       	popm	r0-r7,pc

8000aaa4 <__i2b>:
8000aaa4:	d4 21       	pushm	r4-r7,lr
8000aaa6:	16 97       	mov	r7,r11
8000aaa8:	30 1b       	mov	r11,1
8000aaaa:	c4 9e       	rcall	8000a73c <_Balloc>
8000aaac:	30 19       	mov	r9,1
8000aaae:	99 57       	st.w	r12[0x14],r7
8000aab0:	99 49       	st.w	r12[0x10],r9
8000aab2:	d8 22       	popm	r4-r7,pc

8000aab4 <__multadd>:
8000aab4:	d4 31       	pushm	r0-r7,lr
8000aab6:	30 08       	mov	r8,0
8000aab8:	12 95       	mov	r5,r9
8000aaba:	16 97       	mov	r7,r11
8000aabc:	18 96       	mov	r6,r12
8000aabe:	76 44       	ld.w	r4,r11[0x10]
8000aac0:	f6 c9 ff ec 	sub	r9,r11,-20
8000aac4:	72 0b       	ld.w	r11,r9[0x0]
8000aac6:	f6 0c 16 10 	lsr	r12,r11,0x10
8000aaca:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
8000aace:	f4 0c 02 4c 	mul	r12,r10,r12
8000aad2:	f4 0b 03 45 	mac	r5,r10,r11
8000aad6:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
8000aada:	b1 85       	lsr	r5,0x10
8000aadc:	18 05       	add	r5,r12
8000aade:	ea 0c 15 10 	lsl	r12,r5,0x10
8000aae2:	f8 0b 00 0b 	add	r11,r12,r11
8000aae6:	12 ab       	st.w	r9++,r11
8000aae8:	2f f8       	sub	r8,-1
8000aaea:	b1 85       	lsr	r5,0x10
8000aaec:	08 38       	cp.w	r8,r4
8000aaee:	ce b5       	brlt	8000aac4 <__multadd+0x10>
8000aaf0:	58 05       	cp.w	r5,0
8000aaf2:	c1 c0       	breq	8000ab2a <__multadd+0x76>
8000aaf4:	6e 28       	ld.w	r8,r7[0x8]
8000aaf6:	10 34       	cp.w	r4,r8
8000aaf8:	c1 35       	brlt	8000ab1e <__multadd+0x6a>
8000aafa:	6e 1b       	ld.w	r11,r7[0x4]
8000aafc:	0c 9c       	mov	r12,r6
8000aafe:	2f fb       	sub	r11,-1
8000ab00:	c1 ee       	rcall	8000a73c <_Balloc>
8000ab02:	6e 4a       	ld.w	r10,r7[0x10]
8000ab04:	ee cb ff f4 	sub	r11,r7,-12
8000ab08:	18 93       	mov	r3,r12
8000ab0a:	2f ea       	sub	r10,-2
8000ab0c:	2f 4c       	sub	r12,-12
8000ab0e:	a3 6a       	lsl	r10,0x2
8000ab10:	fe b0 de 3a 	rcall	80006784 <memcpy>
8000ab14:	0e 9b       	mov	r11,r7
8000ab16:	0c 9c       	mov	r12,r6
8000ab18:	fe b0 fd f8 	rcall	8000a708 <_Bfree>
8000ab1c:	06 97       	mov	r7,r3
8000ab1e:	e8 c8 ff ff 	sub	r8,r4,-1
8000ab22:	2f b4       	sub	r4,-5
8000ab24:	8f 48       	st.w	r7[0x10],r8
8000ab26:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
8000ab2a:	0e 9c       	mov	r12,r7
8000ab2c:	d8 32       	popm	r0-r7,pc
8000ab2e:	d7 03       	nop

8000ab30 <__pow5mult>:
8000ab30:	d4 31       	pushm	r0-r7,lr
8000ab32:	14 96       	mov	r6,r10
8000ab34:	18 97       	mov	r7,r12
8000ab36:	16 94       	mov	r4,r11
8000ab38:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
8000ab3c:	c0 90       	breq	8000ab4e <__pow5mult+0x1e>
8000ab3e:	20 18       	sub	r8,1
8000ab40:	fe c9 ea c8 	sub	r9,pc,-5432
8000ab44:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
8000ab48:	30 09       	mov	r9,0
8000ab4a:	cb 5f       	rcall	8000aab4 <__multadd>
8000ab4c:	18 94       	mov	r4,r12
8000ab4e:	a3 46       	asr	r6,0x2
8000ab50:	c3 40       	breq	8000abb8 <__pow5mult+0x88>
8000ab52:	6e 95       	ld.w	r5,r7[0x24]
8000ab54:	58 05       	cp.w	r5,0
8000ab56:	c0 91       	brne	8000ab68 <__pow5mult+0x38>
8000ab58:	31 0c       	mov	r12,16
8000ab5a:	fe b0 fa f3 	rcall	8000a140 <malloc>
8000ab5e:	99 35       	st.w	r12[0xc],r5
8000ab60:	8f 9c       	st.w	r7[0x24],r12
8000ab62:	99 15       	st.w	r12[0x4],r5
8000ab64:	99 25       	st.w	r12[0x8],r5
8000ab66:	99 05       	st.w	r12[0x0],r5
8000ab68:	6e 93       	ld.w	r3,r7[0x24]
8000ab6a:	66 25       	ld.w	r5,r3[0x8]
8000ab6c:	58 05       	cp.w	r5,0
8000ab6e:	c0 c1       	brne	8000ab86 <__pow5mult+0x56>
8000ab70:	e0 6b 02 71 	mov	r11,625
8000ab74:	0e 9c       	mov	r12,r7
8000ab76:	c9 7f       	rcall	8000aaa4 <__i2b>
8000ab78:	87 2c       	st.w	r3[0x8],r12
8000ab7a:	30 08       	mov	r8,0
8000ab7c:	18 95       	mov	r5,r12
8000ab7e:	99 08       	st.w	r12[0x0],r8
8000ab80:	c0 38       	rjmp	8000ab86 <__pow5mult+0x56>
8000ab82:	06 9c       	mov	r12,r3
8000ab84:	18 95       	mov	r5,r12
8000ab86:	ed b6 00 00 	bld	r6,0x0
8000ab8a:	c0 b1       	brne	8000aba0 <__pow5mult+0x70>
8000ab8c:	08 9b       	mov	r11,r4
8000ab8e:	0a 9a       	mov	r10,r5
8000ab90:	0e 9c       	mov	r12,r7
8000ab92:	c0 9f       	rcall	8000a9a4 <__multiply>
8000ab94:	08 9b       	mov	r11,r4
8000ab96:	18 93       	mov	r3,r12
8000ab98:	0e 9c       	mov	r12,r7
8000ab9a:	06 94       	mov	r4,r3
8000ab9c:	fe b0 fd b6 	rcall	8000a708 <_Bfree>
8000aba0:	a1 56       	asr	r6,0x1
8000aba2:	c0 b0       	breq	8000abb8 <__pow5mult+0x88>
8000aba4:	6a 03       	ld.w	r3,r5[0x0]
8000aba6:	58 03       	cp.w	r3,0
8000aba8:	ce d1       	brne	8000ab82 <__pow5mult+0x52>
8000abaa:	0a 9a       	mov	r10,r5
8000abac:	0a 9b       	mov	r11,r5
8000abae:	0e 9c       	mov	r12,r7
8000abb0:	cf ae       	rcall	8000a9a4 <__multiply>
8000abb2:	8b 0c       	st.w	r5[0x0],r12
8000abb4:	99 03       	st.w	r12[0x0],r3
8000abb6:	ce 7b       	rjmp	8000ab84 <__pow5mult+0x54>
8000abb8:	08 9c       	mov	r12,r4
8000abba:	d8 32       	popm	r0-r7,pc

8000abbc <_realloc_r>:
8000abbc:	d4 31       	pushm	r0-r7,lr
8000abbe:	20 1d       	sub	sp,4
8000abc0:	16 94       	mov	r4,r11
8000abc2:	18 92       	mov	r2,r12
8000abc4:	14 9b       	mov	r11,r10
8000abc6:	58 04       	cp.w	r4,0
8000abc8:	c0 51       	brne	8000abd2 <_realloc_r+0x16>
8000abca:	fe b0 fa c3 	rcall	8000a150 <_malloc_r>
8000abce:	18 95       	mov	r5,r12
8000abd0:	c5 39       	rjmp	8000ae76 <_realloc_r+0x2ba>
8000abd2:	50 0a       	stdsp	sp[0x0],r10
8000abd4:	fe b0 fd 07 	rcall	8000a5e2 <__malloc_lock>
8000abd8:	40 0b       	lddsp	r11,sp[0x0]
8000abda:	f6 c8 ff f5 	sub	r8,r11,-11
8000abde:	e8 c1 00 08 	sub	r1,r4,8
8000abe2:	10 96       	mov	r6,r8
8000abe4:	62 1c       	ld.w	r12,r1[0x4]
8000abe6:	e0 16 ff f8 	andl	r6,0xfff8
8000abea:	59 68       	cp.w	r8,22
8000abec:	f9 b6 08 10 	movls	r6,16
8000abf0:	16 36       	cp.w	r6,r11
8000abf2:	5f 38       	srlo	r8
8000abf4:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
8000abf8:	c0 50       	breq	8000ac02 <_realloc_r+0x46>
8000abfa:	30 c8       	mov	r8,12
8000abfc:	30 05       	mov	r5,0
8000abfe:	85 38       	st.w	r2[0xc],r8
8000ac00:	c3 b9       	rjmp	8000ae76 <_realloc_r+0x2ba>
8000ac02:	18 90       	mov	r0,r12
8000ac04:	e0 10 ff fc 	andl	r0,0xfffc
8000ac08:	0c 30       	cp.w	r0,r6
8000ac0a:	e0 84 01 0b 	brge	8000ae20 <_realloc_r+0x264>
8000ac0e:	e0 68 01 08 	mov	r8,264
8000ac12:	e2 00 00 09 	add	r9,r1,r0
8000ac16:	70 25       	ld.w	r5,r8[0x8]
8000ac18:	0a 39       	cp.w	r9,r5
8000ac1a:	c0 90       	breq	8000ac2c <_realloc_r+0x70>
8000ac1c:	72 1a       	ld.w	r10,r9[0x4]
8000ac1e:	a1 ca       	cbr	r10,0x0
8000ac20:	f2 0a 00 0a 	add	r10,r9,r10
8000ac24:	74 1a       	ld.w	r10,r10[0x4]
8000ac26:	ed ba 00 00 	bld	r10,0x0
8000ac2a:	c2 20       	breq	8000ac6e <_realloc_r+0xb2>
8000ac2c:	72 1a       	ld.w	r10,r9[0x4]
8000ac2e:	e0 1a ff fc 	andl	r10,0xfffc
8000ac32:	f4 00 00 03 	add	r3,r10,r0
8000ac36:	0a 39       	cp.w	r9,r5
8000ac38:	c1 31       	brne	8000ac5e <_realloc_r+0xa2>
8000ac3a:	ec c7 ff f0 	sub	r7,r6,-16
8000ac3e:	0e 33       	cp.w	r3,r7
8000ac40:	c1 95       	brlt	8000ac72 <_realloc_r+0xb6>
8000ac42:	e2 06 00 09 	add	r9,r1,r6
8000ac46:	0c 13       	sub	r3,r6
8000ac48:	a1 a3       	sbr	r3,0x0
8000ac4a:	93 13       	st.w	r9[0x4],r3
8000ac4c:	91 29       	st.w	r8[0x8],r9
8000ac4e:	04 9c       	mov	r12,r2
8000ac50:	62 18       	ld.w	r8,r1[0x4]
8000ac52:	08 95       	mov	r5,r4
8000ac54:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000ac58:	10 46       	or	r6,r8
8000ac5a:	83 16       	st.w	r1[0x4],r6
8000ac5c:	c0 b9       	rjmp	8000ae72 <_realloc_r+0x2b6>
8000ac5e:	0c 33       	cp.w	r3,r6
8000ac60:	c0 95       	brlt	8000ac72 <_realloc_r+0xb6>
8000ac62:	72 28       	ld.w	r8,r9[0x8]
8000ac64:	02 97       	mov	r7,r1
8000ac66:	72 39       	ld.w	r9,r9[0xc]
8000ac68:	93 28       	st.w	r9[0x8],r8
8000ac6a:	91 39       	st.w	r8[0xc],r9
8000ac6c:	cd c8       	rjmp	8000ae24 <_realloc_r+0x268>
8000ac6e:	30 0a       	mov	r10,0
8000ac70:	14 99       	mov	r9,r10
8000ac72:	ed bc 00 00 	bld	r12,0x0
8000ac76:	e0 80 00 95 	breq	8000ada0 <_realloc_r+0x1e4>
8000ac7a:	62 07       	ld.w	r7,r1[0x0]
8000ac7c:	e2 07 01 07 	sub	r7,r1,r7
8000ac80:	6e 1c       	ld.w	r12,r7[0x4]
8000ac82:	e0 1c ff fc 	andl	r12,0xfffc
8000ac86:	58 09       	cp.w	r9,0
8000ac88:	c5 60       	breq	8000ad34 <_realloc_r+0x178>
8000ac8a:	f8 00 00 03 	add	r3,r12,r0
8000ac8e:	0a 39       	cp.w	r9,r5
8000ac90:	c4 81       	brne	8000ad20 <_realloc_r+0x164>
8000ac92:	14 03       	add	r3,r10
8000ac94:	ec c9 ff f0 	sub	r9,r6,-16
8000ac98:	12 33       	cp.w	r3,r9
8000ac9a:	c4 d5       	brlt	8000ad34 <_realloc_r+0x178>
8000ac9c:	6e 3a       	ld.w	r10,r7[0xc]
8000ac9e:	6e 29       	ld.w	r9,r7[0x8]
8000aca0:	95 29       	st.w	r10[0x8],r9
8000aca2:	93 3a       	st.w	r9[0xc],r10
8000aca4:	ee c5 ff f8 	sub	r5,r7,-8
8000aca8:	e0 ca 00 04 	sub	r10,r0,4
8000acac:	e0 4a 00 24 	cp.w	r10,36
8000acb0:	e0 8b 00 25 	brhi	8000acfa <_realloc_r+0x13e>
8000acb4:	0a 99       	mov	r9,r5
8000acb6:	59 3a       	cp.w	r10,19
8000acb8:	e0 88 00 1a 	brls	8000acec <_realloc_r+0x130>
8000acbc:	09 09       	ld.w	r9,r4++
8000acbe:	8b 09       	st.w	r5[0x0],r9
8000acc0:	09 09       	ld.w	r9,r4++
8000acc2:	8f 39       	st.w	r7[0xc],r9
8000acc4:	ee c9 ff f0 	sub	r9,r7,-16
8000acc8:	59 ba       	cp.w	r10,27
8000acca:	e0 88 00 11 	brls	8000acec <_realloc_r+0x130>
8000acce:	09 0b       	ld.w	r11,r4++
8000acd0:	93 0b       	st.w	r9[0x0],r11
8000acd2:	09 09       	ld.w	r9,r4++
8000acd4:	8f 59       	st.w	r7[0x14],r9
8000acd6:	ee c9 ff e8 	sub	r9,r7,-24
8000acda:	e0 4a 00 24 	cp.w	r10,36
8000acde:	c0 71       	brne	8000acec <_realloc_r+0x130>
8000ace0:	09 0a       	ld.w	r10,r4++
8000ace2:	93 0a       	st.w	r9[0x0],r10
8000ace4:	ee c9 ff e0 	sub	r9,r7,-32
8000ace8:	09 0a       	ld.w	r10,r4++
8000acea:	8f 7a       	st.w	r7[0x1c],r10
8000acec:	09 0a       	ld.w	r10,r4++
8000acee:	12 aa       	st.w	r9++,r10
8000acf0:	68 0a       	ld.w	r10,r4[0x0]
8000acf2:	93 0a       	st.w	r9[0x0],r10
8000acf4:	68 1a       	ld.w	r10,r4[0x4]
8000acf6:	93 1a       	st.w	r9[0x4],r10
8000acf8:	c0 78       	rjmp	8000ad06 <_realloc_r+0x14a>
8000acfa:	50 08       	stdsp	sp[0x0],r8
8000acfc:	08 9b       	mov	r11,r4
8000acfe:	0a 9c       	mov	r12,r5
8000ad00:	fe b0 fc 4b 	rcall	8000a596 <memmove>
8000ad04:	40 08       	lddsp	r8,sp[0x0]
8000ad06:	ee 06 00 09 	add	r9,r7,r6
8000ad0a:	0c 13       	sub	r3,r6
8000ad0c:	a1 a3       	sbr	r3,0x0
8000ad0e:	93 13       	st.w	r9[0x4],r3
8000ad10:	91 29       	st.w	r8[0x8],r9
8000ad12:	04 9c       	mov	r12,r2
8000ad14:	6e 18       	ld.w	r8,r7[0x4]
8000ad16:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000ad1a:	10 46       	or	r6,r8
8000ad1c:	8f 16       	st.w	r7[0x4],r6
8000ad1e:	ca a8       	rjmp	8000ae72 <_realloc_r+0x2b6>
8000ad20:	14 03       	add	r3,r10
8000ad22:	0c 33       	cp.w	r3,r6
8000ad24:	c0 85       	brlt	8000ad34 <_realloc_r+0x178>
8000ad26:	72 28       	ld.w	r8,r9[0x8]
8000ad28:	72 39       	ld.w	r9,r9[0xc]
8000ad2a:	93 28       	st.w	r9[0x8],r8
8000ad2c:	91 39       	st.w	r8[0xc],r9
8000ad2e:	6e 28       	ld.w	r8,r7[0x8]
8000ad30:	6e 39       	ld.w	r9,r7[0xc]
8000ad32:	c0 78       	rjmp	8000ad40 <_realloc_r+0x184>
8000ad34:	f8 00 00 03 	add	r3,r12,r0
8000ad38:	0c 33       	cp.w	r3,r6
8000ad3a:	c3 35       	brlt	8000ada0 <_realloc_r+0x1e4>
8000ad3c:	6e 39       	ld.w	r9,r7[0xc]
8000ad3e:	6e 28       	ld.w	r8,r7[0x8]
8000ad40:	93 28       	st.w	r9[0x8],r8
8000ad42:	91 39       	st.w	r8[0xc],r9
8000ad44:	e0 ca 00 04 	sub	r10,r0,4
8000ad48:	ee cc ff f8 	sub	r12,r7,-8
8000ad4c:	e0 4a 00 24 	cp.w	r10,36
8000ad50:	e0 8b 00 24 	brhi	8000ad98 <_realloc_r+0x1dc>
8000ad54:	59 3a       	cp.w	r10,19
8000ad56:	e0 88 00 1a 	brls	8000ad8a <_realloc_r+0x1ce>
8000ad5a:	09 08       	ld.w	r8,r4++
8000ad5c:	99 08       	st.w	r12[0x0],r8
8000ad5e:	09 08       	ld.w	r8,r4++
8000ad60:	8f 38       	st.w	r7[0xc],r8
8000ad62:	ee cc ff f0 	sub	r12,r7,-16
8000ad66:	59 ba       	cp.w	r10,27
8000ad68:	e0 88 00 11 	brls	8000ad8a <_realloc_r+0x1ce>
8000ad6c:	09 08       	ld.w	r8,r4++
8000ad6e:	99 08       	st.w	r12[0x0],r8
8000ad70:	09 08       	ld.w	r8,r4++
8000ad72:	8f 58       	st.w	r7[0x14],r8
8000ad74:	ee cc ff e8 	sub	r12,r7,-24
8000ad78:	e0 4a 00 24 	cp.w	r10,36
8000ad7c:	c0 71       	brne	8000ad8a <_realloc_r+0x1ce>
8000ad7e:	09 08       	ld.w	r8,r4++
8000ad80:	99 08       	st.w	r12[0x0],r8
8000ad82:	ee cc ff e0 	sub	r12,r7,-32
8000ad86:	09 08       	ld.w	r8,r4++
8000ad88:	8f 78       	st.w	r7[0x1c],r8
8000ad8a:	09 08       	ld.w	r8,r4++
8000ad8c:	18 a8       	st.w	r12++,r8
8000ad8e:	68 08       	ld.w	r8,r4[0x0]
8000ad90:	99 08       	st.w	r12[0x0],r8
8000ad92:	68 18       	ld.w	r8,r4[0x4]
8000ad94:	99 18       	st.w	r12[0x4],r8
8000ad96:	c4 78       	rjmp	8000ae24 <_realloc_r+0x268>
8000ad98:	08 9b       	mov	r11,r4
8000ad9a:	fe b0 fb fe 	rcall	8000a596 <memmove>
8000ad9e:	c4 38       	rjmp	8000ae24 <_realloc_r+0x268>
8000ada0:	04 9c       	mov	r12,r2
8000ada2:	fe b0 f9 d7 	rcall	8000a150 <_malloc_r>
8000ada6:	18 95       	mov	r5,r12
8000ada8:	c3 a0       	breq	8000ae1c <_realloc_r+0x260>
8000adaa:	62 18       	ld.w	r8,r1[0x4]
8000adac:	f8 c9 00 08 	sub	r9,r12,8
8000adb0:	a1 c8       	cbr	r8,0x0
8000adb2:	e2 08 00 08 	add	r8,r1,r8
8000adb6:	10 39       	cp.w	r9,r8
8000adb8:	c0 71       	brne	8000adc6 <_realloc_r+0x20a>
8000adba:	72 13       	ld.w	r3,r9[0x4]
8000adbc:	02 97       	mov	r7,r1
8000adbe:	e0 13 ff fc 	andl	r3,0xfffc
8000adc2:	00 03       	add	r3,r0
8000adc4:	c3 08       	rjmp	8000ae24 <_realloc_r+0x268>
8000adc6:	e0 ca 00 04 	sub	r10,r0,4
8000adca:	e0 4a 00 24 	cp.w	r10,36
8000adce:	e0 8b 00 20 	brhi	8000ae0e <_realloc_r+0x252>
8000add2:	08 99       	mov	r9,r4
8000add4:	18 98       	mov	r8,r12
8000add6:	59 3a       	cp.w	r10,19
8000add8:	e0 88 00 14 	brls	8000ae00 <_realloc_r+0x244>
8000addc:	13 0b       	ld.w	r11,r9++
8000adde:	10 ab       	st.w	r8++,r11
8000ade0:	13 0b       	ld.w	r11,r9++
8000ade2:	10 ab       	st.w	r8++,r11
8000ade4:	59 ba       	cp.w	r10,27
8000ade6:	e0 88 00 0d 	brls	8000ae00 <_realloc_r+0x244>
8000adea:	13 0b       	ld.w	r11,r9++
8000adec:	10 ab       	st.w	r8++,r11
8000adee:	13 0b       	ld.w	r11,r9++
8000adf0:	10 ab       	st.w	r8++,r11
8000adf2:	e0 4a 00 24 	cp.w	r10,36
8000adf6:	c0 51       	brne	8000ae00 <_realloc_r+0x244>
8000adf8:	13 0a       	ld.w	r10,r9++
8000adfa:	10 aa       	st.w	r8++,r10
8000adfc:	13 0a       	ld.w	r10,r9++
8000adfe:	10 aa       	st.w	r8++,r10
8000ae00:	13 0a       	ld.w	r10,r9++
8000ae02:	10 aa       	st.w	r8++,r10
8000ae04:	72 0a       	ld.w	r10,r9[0x0]
8000ae06:	91 0a       	st.w	r8[0x0],r10
8000ae08:	72 19       	ld.w	r9,r9[0x4]
8000ae0a:	91 19       	st.w	r8[0x4],r9
8000ae0c:	c0 48       	rjmp	8000ae14 <_realloc_r+0x258>
8000ae0e:	08 9b       	mov	r11,r4
8000ae10:	fe b0 fb c3 	rcall	8000a596 <memmove>
8000ae14:	08 9b       	mov	r11,r4
8000ae16:	04 9c       	mov	r12,r2
8000ae18:	fe b0 f6 f6 	rcall	80009c04 <_free_r>
8000ae1c:	04 9c       	mov	r12,r2
8000ae1e:	c2 a8       	rjmp	8000ae72 <_realloc_r+0x2b6>
8000ae20:	00 93       	mov	r3,r0
8000ae22:	02 97       	mov	r7,r1
8000ae24:	e6 06 01 09 	sub	r9,r3,r6
8000ae28:	6e 18       	ld.w	r8,r7[0x4]
8000ae2a:	58 f9       	cp.w	r9,15
8000ae2c:	e0 88 00 16 	brls	8000ae58 <_realloc_r+0x29c>
8000ae30:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000ae34:	ed e8 10 08 	or	r8,r6,r8
8000ae38:	8f 18       	st.w	r7[0x4],r8
8000ae3a:	12 98       	mov	r8,r9
8000ae3c:	a1 a8       	sbr	r8,0x0
8000ae3e:	ee 06 00 0b 	add	r11,r7,r6
8000ae42:	f6 09 00 09 	add	r9,r11,r9
8000ae46:	97 18       	st.w	r11[0x4],r8
8000ae48:	72 18       	ld.w	r8,r9[0x4]
8000ae4a:	a1 a8       	sbr	r8,0x0
8000ae4c:	2f 8b       	sub	r11,-8
8000ae4e:	93 18       	st.w	r9[0x4],r8
8000ae50:	04 9c       	mov	r12,r2
8000ae52:	fe b0 f6 d9 	rcall	80009c04 <_free_r>
8000ae56:	c0 b8       	rjmp	8000ae6c <_realloc_r+0x2b0>
8000ae58:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000ae5c:	e7 e8 10 08 	or	r8,r3,r8
8000ae60:	8f 18       	st.w	r7[0x4],r8
8000ae62:	ee 03 00 03 	add	r3,r7,r3
8000ae66:	66 18       	ld.w	r8,r3[0x4]
8000ae68:	a1 a8       	sbr	r8,0x0
8000ae6a:	87 18       	st.w	r3[0x4],r8
8000ae6c:	04 9c       	mov	r12,r2
8000ae6e:	ee c5 ff f8 	sub	r5,r7,-8
8000ae72:	fe b0 fb b9 	rcall	8000a5e4 <__malloc_unlock>
8000ae76:	0a 9c       	mov	r12,r5
8000ae78:	2f fd       	sub	sp,-4
8000ae7a:	d8 32       	popm	r0-r7,pc

8000ae7c <__isinfd>:
8000ae7c:	14 98       	mov	r8,r10
8000ae7e:	fc 19 7f f0 	movh	r9,0x7ff0
8000ae82:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000ae86:	f0 0b 11 00 	rsub	r11,r8,0
8000ae8a:	f7 e8 10 08 	or	r8,r11,r8
8000ae8e:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
8000ae92:	f2 08 01 08 	sub	r8,r9,r8
8000ae96:	f0 0c 11 00 	rsub	r12,r8,0
8000ae9a:	f9 e8 10 08 	or	r8,r12,r8
8000ae9e:	f0 0c 14 1f 	asr	r12,r8,0x1f
8000aea2:	2f fc       	sub	r12,-1
8000aea4:	5e fc       	retal	r12

8000aea6 <__isnand>:
8000aea6:	14 98       	mov	r8,r10
8000aea8:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8000aeac:	f0 0c 11 00 	rsub	r12,r8,0
8000aeb0:	10 4c       	or	r12,r8
8000aeb2:	fc 18 7f f0 	movh	r8,0x7ff0
8000aeb6:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8000aeba:	f0 0c 01 0c 	sub	r12,r8,r12
8000aebe:	bf 9c       	lsr	r12,0x1f
8000aec0:	5e fc       	retal	r12
8000aec2:	d7 03       	nop

8000aec4 <_sbrk_r>:
8000aec4:	d4 21       	pushm	r4-r7,lr
8000aec6:	30 08       	mov	r8,0
8000aec8:	18 97       	mov	r7,r12
8000aeca:	e0 66 06 98 	mov	r6,1688
8000aece:	16 9c       	mov	r12,r11
8000aed0:	8d 08       	st.w	r6[0x0],r8
8000aed2:	ca fc       	rcall	8000b030 <_sbrk>
8000aed4:	5b fc       	cp.w	r12,-1
8000aed6:	c0 51       	brne	8000aee0 <_sbrk_r+0x1c>
8000aed8:	6c 08       	ld.w	r8,r6[0x0]
8000aeda:	58 08       	cp.w	r8,0
8000aedc:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000aee0:	d8 22       	popm	r4-r7,pc
8000aee2:	d7 03       	nop

8000aee4 <__sclose>:
8000aee4:	d4 01       	pushm	lr
8000aee6:	96 7b       	ld.sh	r11,r11[0xe]
8000aee8:	cf ec       	rcall	8000b0e4 <_close_r>
8000aeea:	d8 02       	popm	pc

8000aeec <__sseek>:
8000aeec:	d4 21       	pushm	r4-r7,lr
8000aeee:	16 97       	mov	r7,r11
8000aef0:	96 7b       	ld.sh	r11,r11[0xe]
8000aef2:	c8 5d       	rcall	8000b1fc <_lseek_r>
8000aef4:	8e 68       	ld.sh	r8,r7[0xc]
8000aef6:	10 99       	mov	r9,r8
8000aef8:	ad c8       	cbr	r8,0xc
8000aefa:	ad a9       	sbr	r9,0xc
8000aefc:	5b fc       	cp.w	r12,-1
8000aefe:	ef f8 0c 06 	st.heq	r7[0xc],r8
8000af02:	ef f9 1c 06 	st.hne	r7[0xc],r9
8000af06:	ef fc 1a 15 	st.wne	r7[0x54],r12
8000af0a:	d8 22       	popm	r4-r7,pc

8000af0c <__swrite>:
8000af0c:	d4 21       	pushm	r4-r7,lr
8000af0e:	96 68       	ld.sh	r8,r11[0xc]
8000af10:	16 97       	mov	r7,r11
8000af12:	14 95       	mov	r5,r10
8000af14:	12 94       	mov	r4,r9
8000af16:	e2 18 01 00 	andl	r8,0x100,COH
8000af1a:	18 96       	mov	r6,r12
8000af1c:	c0 50       	breq	8000af26 <__swrite+0x1a>
8000af1e:	30 29       	mov	r9,2
8000af20:	30 0a       	mov	r10,0
8000af22:	96 7b       	ld.sh	r11,r11[0xe]
8000af24:	c6 cd       	rcall	8000b1fc <_lseek_r>
8000af26:	8e 68       	ld.sh	r8,r7[0xc]
8000af28:	ad c8       	cbr	r8,0xc
8000af2a:	08 99       	mov	r9,r4
8000af2c:	0a 9a       	mov	r10,r5
8000af2e:	8e 7b       	ld.sh	r11,r7[0xe]
8000af30:	0c 9c       	mov	r12,r6
8000af32:	ae 68       	st.h	r7[0xc],r8
8000af34:	c9 ac       	rcall	8000b068 <_write_r>
8000af36:	d8 22       	popm	r4-r7,pc

8000af38 <__sread>:
8000af38:	d4 21       	pushm	r4-r7,lr
8000af3a:	16 97       	mov	r7,r11
8000af3c:	96 7b       	ld.sh	r11,r11[0xe]
8000af3e:	c7 1d       	rcall	8000b220 <_read_r>
8000af40:	c0 65       	brlt	8000af4c <__sread+0x14>
8000af42:	6f 58       	ld.w	r8,r7[0x54]
8000af44:	18 08       	add	r8,r12
8000af46:	ef 48 00 54 	st.w	r7[84],r8
8000af4a:	d8 22       	popm	r4-r7,pc
8000af4c:	8e 68       	ld.sh	r8,r7[0xc]
8000af4e:	ad c8       	cbr	r8,0xc
8000af50:	ae 68       	st.h	r7[0xc],r8
8000af52:	d8 22       	popm	r4-r7,pc

8000af54 <strlen>:
8000af54:	30 09       	mov	r9,0
8000af56:	18 98       	mov	r8,r12
8000af58:	c0 28       	rjmp	8000af5c <strlen+0x8>
8000af5a:	2f f8       	sub	r8,-1
8000af5c:	11 8a       	ld.ub	r10,r8[0x0]
8000af5e:	f2 0a 18 00 	cp.b	r10,r9
8000af62:	cf c1       	brne	8000af5a <strlen+0x6>
8000af64:	f0 0c 01 0c 	sub	r12,r8,r12
8000af68:	5e fc       	retal	r12
8000af6a:	d7 03       	nop

8000af6c <_close>:
8000af6c:	30 28       	mov	r8,2
8000af6e:	d6 73       	breakpoint
8000af70:	3f fc       	mov	r12,-1
8000af72:	35 8b       	mov	r11,88
8000af74:	58 0c       	cp.w	r12,0
8000af76:	5e 4c       	retge	r12
8000af78:	e0 6a 06 98 	mov	r10,1688
8000af7c:	95 0b       	st.w	r10[0x0],r11
8000af7e:	5e fc       	retal	r12

8000af80 <_lseek>:
8000af80:	30 58       	mov	r8,5
8000af82:	d6 73       	breakpoint
8000af84:	3f fc       	mov	r12,-1
8000af86:	35 8b       	mov	r11,88
8000af88:	58 0c       	cp.w	r12,0
8000af8a:	5e 4c       	retge	r12
8000af8c:	e0 6a 06 98 	mov	r10,1688
8000af90:	95 0b       	st.w	r10[0x0],r11
8000af92:	5e fc       	retal	r12

8000af94 <_read>:
8000af94:	30 38       	mov	r8,3
8000af96:	d6 73       	breakpoint
8000af98:	3f fc       	mov	r12,-1
8000af9a:	35 8b       	mov	r11,88
8000af9c:	58 0c       	cp.w	r12,0
8000af9e:	5e 4c       	retge	r12
8000afa0:	e0 6a 06 98 	mov	r10,1688
8000afa4:	95 0b       	st.w	r10[0x0],r11
8000afa6:	5e fc       	retal	r12

8000afa8 <_write>:
8000afa8:	30 48       	mov	r8,4
8000afaa:	d6 73       	breakpoint
8000afac:	3f fc       	mov	r12,-1
8000afae:	35 8b       	mov	r11,88
8000afb0:	58 0c       	cp.w	r12,0
8000afb2:	5e 4c       	retge	r12
8000afb4:	e0 6a 06 98 	mov	r10,1688
8000afb8:	95 0b       	st.w	r10[0x0],r11
8000afba:	5e fc       	retal	r12

8000afbc <isatty>:
8000afbc:	30 b8       	mov	r8,11
8000afbe:	d6 73       	breakpoint
8000afc0:	3f fc       	mov	r12,-1
8000afc2:	35 8b       	mov	r11,88
8000afc4:	58 0c       	cp.w	r12,0
8000afc6:	5e 4c       	retge	r12
8000afc8:	e0 6a 06 98 	mov	r10,1688
8000afcc:	95 0b       	st.w	r10[0x0],r11
8000afce:	5e fc       	retal	r12

8000afd0 <_fstat_host>:
8000afd0:	30 98       	mov	r8,9
8000afd2:	d6 73       	breakpoint
8000afd4:	3f fc       	mov	r12,-1
8000afd6:	35 8b       	mov	r11,88
8000afd8:	58 0c       	cp.w	r12,0
8000afda:	5e 4c       	retge	r12
8000afdc:	e0 6a 06 98 	mov	r10,1688
8000afe0:	95 0b       	st.w	r10[0x0],r11
8000afe2:	5e fc       	retal	r12

8000afe4 <_fstat>:
8000afe4:	d4 21       	pushm	r4-r7,lr
8000afe6:	21 0d       	sub	sp,64
8000afe8:	16 97       	mov	r7,r11
8000afea:	1a 9b       	mov	r11,sp
8000afec:	cf 2f       	rcall	8000afd0 <_fstat_host>
8000afee:	c0 34       	brge	8000aff4 <_fstat+0x10>
8000aff0:	3f fc       	mov	r12,-1
8000aff2:	c1 c8       	rjmp	8000b02a <_fstat+0x46>
8000aff4:	40 08       	lddsp	r8,sp[0x0]
8000aff6:	ae 08       	st.h	r7[0x0],r8
8000aff8:	40 18       	lddsp	r8,sp[0x4]
8000affa:	ae 18       	st.h	r7[0x2],r8
8000affc:	40 28       	lddsp	r8,sp[0x8]
8000affe:	8f 18       	st.w	r7[0x4],r8
8000b000:	40 38       	lddsp	r8,sp[0xc]
8000b002:	ae 48       	st.h	r7[0x8],r8
8000b004:	40 48       	lddsp	r8,sp[0x10]
8000b006:	ae 58       	st.h	r7[0xa],r8
8000b008:	40 58       	lddsp	r8,sp[0x14]
8000b00a:	ae 68       	st.h	r7[0xc],r8
8000b00c:	40 68       	lddsp	r8,sp[0x18]
8000b00e:	ae 78       	st.h	r7[0xe],r8
8000b010:	40 88       	lddsp	r8,sp[0x20]
8000b012:	8f 48       	st.w	r7[0x10],r8
8000b014:	40 a8       	lddsp	r8,sp[0x28]
8000b016:	8f b8       	st.w	r7[0x2c],r8
8000b018:	40 c8       	lddsp	r8,sp[0x30]
8000b01a:	8f c8       	st.w	r7[0x30],r8
8000b01c:	40 d8       	lddsp	r8,sp[0x34]
8000b01e:	8f 58       	st.w	r7[0x14],r8
8000b020:	40 e8       	lddsp	r8,sp[0x38]
8000b022:	30 0c       	mov	r12,0
8000b024:	8f 78       	st.w	r7[0x1c],r8
8000b026:	40 f8       	lddsp	r8,sp[0x3c]
8000b028:	8f 98       	st.w	r7[0x24],r8
8000b02a:	2f 0d       	sub	sp,-64
8000b02c:	d8 22       	popm	r4-r7,pc
8000b02e:	d7 03       	nop

8000b030 <_sbrk>:
8000b030:	d4 01       	pushm	lr
8000b032:	e0 68 06 60 	mov	r8,1632
8000b036:	70 09       	ld.w	r9,r8[0x0]
8000b038:	58 09       	cp.w	r9,0
8000b03a:	c0 41       	brne	8000b042 <_sbrk+0x12>
8000b03c:	e0 69 06 a0 	mov	r9,1696
8000b040:	91 09       	st.w	r8[0x0],r9
8000b042:	e0 69 06 60 	mov	r9,1632
8000b046:	e0 6a f0 00 	mov	r10,61440
8000b04a:	72 08       	ld.w	r8,r9[0x0]
8000b04c:	f0 0c 00 0c 	add	r12,r8,r12
8000b050:	14 3c       	cp.w	r12,r10
8000b052:	e0 8b 00 04 	brhi	8000b05a <_sbrk+0x2a>
8000b056:	93 0c       	st.w	r9[0x0],r12
8000b058:	c0 58       	rjmp	8000b062 <_sbrk+0x32>
8000b05a:	c5 5c       	rcall	8000b104 <__errno>
8000b05c:	30 c8       	mov	r8,12
8000b05e:	99 08       	st.w	r12[0x0],r8
8000b060:	3f f8       	mov	r8,-1
8000b062:	10 9c       	mov	r12,r8
8000b064:	d8 02       	popm	pc
8000b066:	d7 03       	nop

8000b068 <_write_r>:
8000b068:	d4 21       	pushm	r4-r7,lr
8000b06a:	16 98       	mov	r8,r11
8000b06c:	18 97       	mov	r7,r12
8000b06e:	10 9c       	mov	r12,r8
8000b070:	30 08       	mov	r8,0
8000b072:	14 9b       	mov	r11,r10
8000b074:	e0 66 06 98 	mov	r6,1688
8000b078:	12 9a       	mov	r10,r9
8000b07a:	8d 08       	st.w	r6[0x0],r8
8000b07c:	c9 6f       	rcall	8000afa8 <_write>
8000b07e:	5b fc       	cp.w	r12,-1
8000b080:	c0 51       	brne	8000b08a <_write_r+0x22>
8000b082:	6c 08       	ld.w	r8,r6[0x0]
8000b084:	58 08       	cp.w	r8,0
8000b086:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b08a:	d8 22       	popm	r4-r7,pc

8000b08c <_calloc_r>:
8000b08c:	d4 21       	pushm	r4-r7,lr
8000b08e:	f4 0b 02 4b 	mul	r11,r10,r11
8000b092:	fe b0 f8 5f 	rcall	8000a150 <_malloc_r>
8000b096:	18 97       	mov	r7,r12
8000b098:	c2 30       	breq	8000b0de <_calloc_r+0x52>
8000b09a:	f8 fa ff fc 	ld.w	r10,r12[-4]
8000b09e:	e0 1a ff fc 	andl	r10,0xfffc
8000b0a2:	20 4a       	sub	r10,4
8000b0a4:	e0 4a 00 24 	cp.w	r10,36
8000b0a8:	e0 8b 00 18 	brhi	8000b0d8 <_calloc_r+0x4c>
8000b0ac:	18 98       	mov	r8,r12
8000b0ae:	59 3a       	cp.w	r10,19
8000b0b0:	e0 88 00 0f 	brls	8000b0ce <_calloc_r+0x42>
8000b0b4:	30 09       	mov	r9,0
8000b0b6:	10 a9       	st.w	r8++,r9
8000b0b8:	10 a9       	st.w	r8++,r9
8000b0ba:	59 ba       	cp.w	r10,27
8000b0bc:	e0 88 00 09 	brls	8000b0ce <_calloc_r+0x42>
8000b0c0:	10 a9       	st.w	r8++,r9
8000b0c2:	10 a9       	st.w	r8++,r9
8000b0c4:	e0 4a 00 24 	cp.w	r10,36
8000b0c8:	c0 31       	brne	8000b0ce <_calloc_r+0x42>
8000b0ca:	10 a9       	st.w	r8++,r9
8000b0cc:	10 a9       	st.w	r8++,r9
8000b0ce:	30 09       	mov	r9,0
8000b0d0:	10 a9       	st.w	r8++,r9
8000b0d2:	91 19       	st.w	r8[0x4],r9
8000b0d4:	91 09       	st.w	r8[0x0],r9
8000b0d6:	c0 48       	rjmp	8000b0de <_calloc_r+0x52>
8000b0d8:	30 0b       	mov	r11,0
8000b0da:	fe b0 fa 7d 	rcall	8000a5d4 <memset>
8000b0de:	0e 9c       	mov	r12,r7
8000b0e0:	d8 22       	popm	r4-r7,pc
8000b0e2:	d7 03       	nop

8000b0e4 <_close_r>:
8000b0e4:	d4 21       	pushm	r4-r7,lr
8000b0e6:	30 08       	mov	r8,0
8000b0e8:	18 97       	mov	r7,r12
8000b0ea:	e0 66 06 98 	mov	r6,1688
8000b0ee:	16 9c       	mov	r12,r11
8000b0f0:	8d 08       	st.w	r6[0x0],r8
8000b0f2:	c3 df       	rcall	8000af6c <_close>
8000b0f4:	5b fc       	cp.w	r12,-1
8000b0f6:	c0 51       	brne	8000b100 <_close_r+0x1c>
8000b0f8:	6c 08       	ld.w	r8,r6[0x0]
8000b0fa:	58 08       	cp.w	r8,0
8000b0fc:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b100:	d8 22       	popm	r4-r7,pc
8000b102:	d7 03       	nop

8000b104 <__errno>:
8000b104:	e0 68 01 04 	mov	r8,260
8000b108:	70 0c       	ld.w	r12,r8[0x0]
8000b10a:	2f 4c       	sub	r12,-12
8000b10c:	5e fc       	retal	r12
8000b10e:	d7 03       	nop

8000b110 <_fclose_r>:
8000b110:	d4 21       	pushm	r4-r7,lr
8000b112:	18 96       	mov	r6,r12
8000b114:	16 97       	mov	r7,r11
8000b116:	58 0b       	cp.w	r11,0
8000b118:	c0 31       	brne	8000b11e <_fclose_r+0xe>
8000b11a:	16 95       	mov	r5,r11
8000b11c:	c5 38       	rjmp	8000b1c2 <_fclose_r+0xb2>
8000b11e:	fe b0 f4 87 	rcall	80009a2c <__sfp_lock_acquire>
8000b122:	58 06       	cp.w	r6,0
8000b124:	c0 70       	breq	8000b132 <_fclose_r+0x22>
8000b126:	6c 68       	ld.w	r8,r6[0x18]
8000b128:	58 08       	cp.w	r8,0
8000b12a:	c0 41       	brne	8000b132 <_fclose_r+0x22>
8000b12c:	0c 9c       	mov	r12,r6
8000b12e:	fe b0 f4 d1 	rcall	80009ad0 <__sinit>
8000b132:	fe c8 f1 62 	sub	r8,pc,-3742
8000b136:	10 37       	cp.w	r7,r8
8000b138:	c0 31       	brne	8000b13e <_fclose_r+0x2e>
8000b13a:	6c 07       	ld.w	r7,r6[0x0]
8000b13c:	c0 c8       	rjmp	8000b154 <_fclose_r+0x44>
8000b13e:	fe c8 f1 4e 	sub	r8,pc,-3762
8000b142:	10 37       	cp.w	r7,r8
8000b144:	c0 31       	brne	8000b14a <_fclose_r+0x3a>
8000b146:	6c 17       	ld.w	r7,r6[0x4]
8000b148:	c0 68       	rjmp	8000b154 <_fclose_r+0x44>
8000b14a:	fe c8 f1 3a 	sub	r8,pc,-3782
8000b14e:	10 37       	cp.w	r7,r8
8000b150:	ed f7 00 02 	ld.weq	r7,r6[0x8]
8000b154:	8e 69       	ld.sh	r9,r7[0xc]
8000b156:	30 08       	mov	r8,0
8000b158:	f0 09 19 00 	cp.h	r9,r8
8000b15c:	c0 51       	brne	8000b166 <_fclose_r+0x56>
8000b15e:	fe b0 f4 68 	rcall	80009a2e <__sfp_lock_release>
8000b162:	30 05       	mov	r5,0
8000b164:	c2 f8       	rjmp	8000b1c2 <_fclose_r+0xb2>
8000b166:	0e 9b       	mov	r11,r7
8000b168:	0c 9c       	mov	r12,r6
8000b16a:	fe b0 f3 db 	rcall	80009920 <_fflush_r>
8000b16e:	6e c8       	ld.w	r8,r7[0x30]
8000b170:	18 95       	mov	r5,r12
8000b172:	58 08       	cp.w	r8,0
8000b174:	c0 60       	breq	8000b180 <_fclose_r+0x70>
8000b176:	6e 8b       	ld.w	r11,r7[0x20]
8000b178:	0c 9c       	mov	r12,r6
8000b17a:	5d 18       	icall	r8
8000b17c:	f9 b5 05 ff 	movlt	r5,-1
8000b180:	8e 68       	ld.sh	r8,r7[0xc]
8000b182:	ed b8 00 07 	bld	r8,0x7
8000b186:	c0 51       	brne	8000b190 <_fclose_r+0x80>
8000b188:	6e 4b       	ld.w	r11,r7[0x10]
8000b18a:	0c 9c       	mov	r12,r6
8000b18c:	fe b0 f5 3c 	rcall	80009c04 <_free_r>
8000b190:	6e db       	ld.w	r11,r7[0x34]
8000b192:	58 0b       	cp.w	r11,0
8000b194:	c0 a0       	breq	8000b1a8 <_fclose_r+0x98>
8000b196:	ee c8 ff bc 	sub	r8,r7,-68
8000b19a:	10 3b       	cp.w	r11,r8
8000b19c:	c0 40       	breq	8000b1a4 <_fclose_r+0x94>
8000b19e:	0c 9c       	mov	r12,r6
8000b1a0:	fe b0 f5 32 	rcall	80009c04 <_free_r>
8000b1a4:	30 08       	mov	r8,0
8000b1a6:	8f d8       	st.w	r7[0x34],r8
8000b1a8:	6f 2b       	ld.w	r11,r7[0x48]
8000b1aa:	58 0b       	cp.w	r11,0
8000b1ac:	c0 70       	breq	8000b1ba <_fclose_r+0xaa>
8000b1ae:	0c 9c       	mov	r12,r6
8000b1b0:	fe b0 f5 2a 	rcall	80009c04 <_free_r>
8000b1b4:	30 08       	mov	r8,0
8000b1b6:	ef 48 00 48 	st.w	r7[72],r8
8000b1ba:	30 08       	mov	r8,0
8000b1bc:	ae 68       	st.h	r7[0xc],r8
8000b1be:	fe b0 f4 38 	rcall	80009a2e <__sfp_lock_release>
8000b1c2:	0a 9c       	mov	r12,r5
8000b1c4:	d8 22       	popm	r4-r7,pc
8000b1c6:	d7 03       	nop

8000b1c8 <fclose>:
8000b1c8:	d4 01       	pushm	lr
8000b1ca:	e0 68 01 04 	mov	r8,260
8000b1ce:	18 9b       	mov	r11,r12
8000b1d0:	70 0c       	ld.w	r12,r8[0x0]
8000b1d2:	c9 ff       	rcall	8000b110 <_fclose_r>
8000b1d4:	d8 02       	popm	pc
8000b1d6:	d7 03       	nop

8000b1d8 <_fstat_r>:
8000b1d8:	d4 21       	pushm	r4-r7,lr
8000b1da:	16 98       	mov	r8,r11
8000b1dc:	18 97       	mov	r7,r12
8000b1de:	10 9c       	mov	r12,r8
8000b1e0:	30 08       	mov	r8,0
8000b1e2:	e0 66 06 98 	mov	r6,1688
8000b1e6:	14 9b       	mov	r11,r10
8000b1e8:	8d 08       	st.w	r6[0x0],r8
8000b1ea:	cf de       	rcall	8000afe4 <_fstat>
8000b1ec:	5b fc       	cp.w	r12,-1
8000b1ee:	c0 51       	brne	8000b1f8 <_fstat_r+0x20>
8000b1f0:	6c 08       	ld.w	r8,r6[0x0]
8000b1f2:	58 08       	cp.w	r8,0
8000b1f4:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b1f8:	d8 22       	popm	r4-r7,pc
8000b1fa:	d7 03       	nop

8000b1fc <_lseek_r>:
8000b1fc:	d4 21       	pushm	r4-r7,lr
8000b1fe:	16 98       	mov	r8,r11
8000b200:	18 97       	mov	r7,r12
8000b202:	10 9c       	mov	r12,r8
8000b204:	30 08       	mov	r8,0
8000b206:	14 9b       	mov	r11,r10
8000b208:	e0 66 06 98 	mov	r6,1688
8000b20c:	12 9a       	mov	r10,r9
8000b20e:	8d 08       	st.w	r6[0x0],r8
8000b210:	cb 8e       	rcall	8000af80 <_lseek>
8000b212:	5b fc       	cp.w	r12,-1
8000b214:	c0 51       	brne	8000b21e <_lseek_r+0x22>
8000b216:	6c 08       	ld.w	r8,r6[0x0]
8000b218:	58 08       	cp.w	r8,0
8000b21a:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b21e:	d8 22       	popm	r4-r7,pc

8000b220 <_read_r>:
8000b220:	d4 21       	pushm	r4-r7,lr
8000b222:	16 98       	mov	r8,r11
8000b224:	18 97       	mov	r7,r12
8000b226:	10 9c       	mov	r12,r8
8000b228:	30 08       	mov	r8,0
8000b22a:	14 9b       	mov	r11,r10
8000b22c:	e0 66 06 98 	mov	r6,1688
8000b230:	12 9a       	mov	r10,r9
8000b232:	8d 08       	st.w	r6[0x0],r8
8000b234:	cb 0e       	rcall	8000af94 <_read>
8000b236:	5b fc       	cp.w	r12,-1
8000b238:	c0 51       	brne	8000b242 <_read_r+0x22>
8000b23a:	6c 08       	ld.w	r8,r6[0x0]
8000b23c:	58 08       	cp.w	r8,0
8000b23e:	ef f8 1a 03 	st.wne	r7[0xc],r8
8000b242:	d8 22       	popm	r4-r7,pc

8000b244 <__avr32_f64_mul>:
8000b244:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8000b248:	e0 80 00 dc 	breq	8000b400 <__avr32_f64_mul_op1_zero>
8000b24c:	d4 21       	pushm	r4-r7,lr
8000b24e:	f7 e9 20 0e 	eor	lr,r11,r9
8000b252:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8000b256:	30 15       	mov	r5,1
8000b258:	c4 30       	breq	8000b2de <__avr32_f64_mul_op1_subnormal>
8000b25a:	ab 6b       	lsl	r11,0xa
8000b25c:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
8000b260:	ab 6a       	lsl	r10,0xa
8000b262:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8000b266:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8000b26a:	c5 c0       	breq	8000b322 <__avr32_f64_mul_op2_subnormal>
8000b26c:	a1 78       	lsl	r8,0x1
8000b26e:	5c f9       	rol	r9
8000b270:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8000b274:	e0 47 07 ff 	cp.w	r7,2047
8000b278:	c7 70       	breq	8000b366 <__avr32_f64_mul_op_nan_or_inf>
8000b27a:	e0 46 07 ff 	cp.w	r6,2047
8000b27e:	c7 40       	breq	8000b366 <__avr32_f64_mul_op_nan_or_inf>
8000b280:	ee 06 00 0c 	add	r12,r7,r6
8000b284:	e0 2c 03 fe 	sub	r12,1022
8000b288:	f6 08 06 44 	mulu.d	r4,r11,r8
8000b28c:	f4 09 07 44 	macu.d	r4,r10,r9
8000b290:	f4 08 06 46 	mulu.d	r6,r10,r8
8000b294:	f6 09 06 4a 	mulu.d	r10,r11,r9
8000b298:	08 07       	add	r7,r4
8000b29a:	f4 05 00 4a 	adc	r10,r10,r5
8000b29e:	5c 0b       	acr	r11
8000b2a0:	ed bb 00 14 	bld	r11,0x14
8000b2a4:	c0 50       	breq	8000b2ae <__avr32_f64_mul+0x6a>
8000b2a6:	a1 77       	lsl	r7,0x1
8000b2a8:	5c fa       	rol	r10
8000b2aa:	5c fb       	rol	r11
8000b2ac:	20 1c       	sub	r12,1
8000b2ae:	58 0c       	cp.w	r12,0
8000b2b0:	e0 8a 00 6f 	brle	8000b38e <__avr32_f64_mul_res_subnormal>
8000b2b4:	e0 4c 07 ff 	cp.w	r12,2047
8000b2b8:	e0 84 00 9c 	brge	8000b3f0 <__avr32_f64_mul_res_inf>
8000b2bc:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
8000b2c0:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8000b2c4:	ef e6 12 17 	or	r7,r7,r6>>0x1
8000b2c8:	ee 17 80 00 	eorh	r7,0x8000
8000b2cc:	f1 b7 04 20 	satu	r7,0x1
8000b2d0:	0e 0a       	add	r10,r7
8000b2d2:	5c 0b       	acr	r11
8000b2d4:	ed be 00 1f 	bld	lr,0x1f
8000b2d8:	ef bb 00 1f 	bst	r11,0x1f
8000b2dc:	d8 22       	popm	r4-r7,pc

8000b2de <__avr32_f64_mul_op1_subnormal>:
8000b2de:	e4 1b 00 0f 	andh	r11,0xf
8000b2e2:	f4 0c 12 00 	clz	r12,r10
8000b2e6:	f6 06 12 00 	clz	r6,r11
8000b2ea:	f7 bc 03 e1 	sublo	r12,-31
8000b2ee:	f8 06 17 30 	movlo	r6,r12
8000b2f2:	f7 b6 02 01 	subhs	r6,1
8000b2f6:	e0 46 00 20 	cp.w	r6,32
8000b2fa:	c0 d4       	brge	8000b314 <__avr32_f64_mul_op1_subnormal+0x36>
8000b2fc:	ec 0c 11 20 	rsub	r12,r6,32
8000b300:	f6 06 09 4b 	lsl	r11,r11,r6
8000b304:	f4 0c 0a 4c 	lsr	r12,r10,r12
8000b308:	18 4b       	or	r11,r12
8000b30a:	f4 06 09 4a 	lsl	r10,r10,r6
8000b30e:	20 b6       	sub	r6,11
8000b310:	0c 17       	sub	r7,r6
8000b312:	ca ab       	rjmp	8000b266 <__avr32_f64_mul+0x22>
8000b314:	f4 06 09 4b 	lsl	r11,r10,r6
8000b318:	c6 40       	breq	8000b3e0 <__avr32_f64_mul_res_zero>
8000b31a:	30 0a       	mov	r10,0
8000b31c:	20 b6       	sub	r6,11
8000b31e:	0c 17       	sub	r7,r6
8000b320:	ca 3b       	rjmp	8000b266 <__avr32_f64_mul+0x22>

8000b322 <__avr32_f64_mul_op2_subnormal>:
8000b322:	e4 19 00 0f 	andh	r9,0xf
8000b326:	f0 0c 12 00 	clz	r12,r8
8000b32a:	f2 05 12 00 	clz	r5,r9
8000b32e:	f7 bc 03 ea 	sublo	r12,-22
8000b332:	f8 05 17 30 	movlo	r5,r12
8000b336:	f7 b5 02 0a 	subhs	r5,10
8000b33a:	e0 45 00 20 	cp.w	r5,32
8000b33e:	c0 d4       	brge	8000b358 <__avr32_f64_mul_op2_subnormal+0x36>
8000b340:	ea 0c 11 20 	rsub	r12,r5,32
8000b344:	f2 05 09 49 	lsl	r9,r9,r5
8000b348:	f0 0c 0a 4c 	lsr	r12,r8,r12
8000b34c:	18 49       	or	r9,r12
8000b34e:	f0 05 09 48 	lsl	r8,r8,r5
8000b352:	20 25       	sub	r5,2
8000b354:	0a 16       	sub	r6,r5
8000b356:	c8 fb       	rjmp	8000b274 <__avr32_f64_mul+0x30>
8000b358:	f0 05 09 49 	lsl	r9,r8,r5
8000b35c:	c4 20       	breq	8000b3e0 <__avr32_f64_mul_res_zero>
8000b35e:	30 08       	mov	r8,0
8000b360:	20 25       	sub	r5,2
8000b362:	0a 16       	sub	r6,r5
8000b364:	c8 8b       	rjmp	8000b274 <__avr32_f64_mul+0x30>

8000b366 <__avr32_f64_mul_op_nan_or_inf>:
8000b366:	e4 19 00 0f 	andh	r9,0xf
8000b36a:	e4 1b 00 0f 	andh	r11,0xf
8000b36e:	14 4b       	or	r11,r10
8000b370:	10 49       	or	r9,r8
8000b372:	e0 47 07 ff 	cp.w	r7,2047
8000b376:	c0 91       	brne	8000b388 <__avr32_f64_mul_op1_not_naninf>
8000b378:	58 0b       	cp.w	r11,0
8000b37a:	c3 81       	brne	8000b3ea <__avr32_f64_mul_res_nan>
8000b37c:	e0 46 07 ff 	cp.w	r6,2047
8000b380:	c3 81       	brne	8000b3f0 <__avr32_f64_mul_res_inf>
8000b382:	58 09       	cp.w	r9,0
8000b384:	c3 60       	breq	8000b3f0 <__avr32_f64_mul_res_inf>
8000b386:	c3 28       	rjmp	8000b3ea <__avr32_f64_mul_res_nan>

8000b388 <__avr32_f64_mul_op1_not_naninf>:
8000b388:	58 09       	cp.w	r9,0
8000b38a:	c3 30       	breq	8000b3f0 <__avr32_f64_mul_res_inf>
8000b38c:	c2 f8       	rjmp	8000b3ea <__avr32_f64_mul_res_nan>

8000b38e <__avr32_f64_mul_res_subnormal>:
8000b38e:	5c 3c       	neg	r12
8000b390:	2f fc       	sub	r12,-1
8000b392:	f1 bc 04 c0 	satu	r12,0x6
8000b396:	e0 4c 00 20 	cp.w	r12,32
8000b39a:	c1 14       	brge	8000b3bc <__avr32_f64_mul_res_subnormal+0x2e>
8000b39c:	f8 08 11 20 	rsub	r8,r12,32
8000b3a0:	0e 46       	or	r6,r7
8000b3a2:	ee 0c 0a 47 	lsr	r7,r7,r12
8000b3a6:	f4 08 09 49 	lsl	r9,r10,r8
8000b3aa:	12 47       	or	r7,r9
8000b3ac:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000b3b0:	f6 08 09 49 	lsl	r9,r11,r8
8000b3b4:	12 4a       	or	r10,r9
8000b3b6:	f6 0c 0a 4b 	lsr	r11,r11,r12
8000b3ba:	c8 3b       	rjmp	8000b2c0 <__avr32_f64_mul+0x7c>
8000b3bc:	f8 08 11 20 	rsub	r8,r12,32
8000b3c0:	f9 b9 00 00 	moveq	r9,0
8000b3c4:	c0 30       	breq	8000b3ca <__avr32_f64_mul_res_subnormal+0x3c>
8000b3c6:	f6 08 09 49 	lsl	r9,r11,r8
8000b3ca:	0e 46       	or	r6,r7
8000b3cc:	ed ea 10 16 	or	r6,r6,r10<<0x1
8000b3d0:	f4 0c 0a 4a 	lsr	r10,r10,r12
8000b3d4:	f3 ea 10 07 	or	r7,r9,r10
8000b3d8:	f6 0c 0a 4a 	lsr	r10,r11,r12
8000b3dc:	30 0b       	mov	r11,0
8000b3de:	c7 1b       	rjmp	8000b2c0 <__avr32_f64_mul+0x7c>

8000b3e0 <__avr32_f64_mul_res_zero>:
8000b3e0:	1c 9b       	mov	r11,lr
8000b3e2:	e6 1b 80 00 	andh	r11,0x8000,COH
8000b3e6:	30 0a       	mov	r10,0
8000b3e8:	d8 22       	popm	r4-r7,pc

8000b3ea <__avr32_f64_mul_res_nan>:
8000b3ea:	3f fb       	mov	r11,-1
8000b3ec:	3f fa       	mov	r10,-1
8000b3ee:	d8 22       	popm	r4-r7,pc

8000b3f0 <__avr32_f64_mul_res_inf>:
8000b3f0:	f0 6b 00 00 	mov	r11,-1048576
8000b3f4:	ed be 00 1f 	bld	lr,0x1f
8000b3f8:	ef bb 00 1f 	bst	r11,0x1f
8000b3fc:	30 0a       	mov	r10,0
8000b3fe:	d8 22       	popm	r4-r7,pc

8000b400 <__avr32_f64_mul_op1_zero>:
8000b400:	f7 e9 20 0b 	eor	r11,r11,r9
8000b404:	e6 1b 80 00 	andh	r11,0x8000,COH
8000b408:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
8000b40c:	e0 4c 07 ff 	cp.w	r12,2047
8000b410:	5e 1c       	retne	r12
8000b412:	3f fa       	mov	r10,-1
8000b414:	3f fb       	mov	r11,-1
8000b416:	5e fc       	retal	r12

8000b418 <__avr32_f64_cmp_eq>:
8000b418:	10 3a       	cp.w	r10,r8
8000b41a:	f2 0b 13 00 	cpc	r11,r9
8000b41e:	c0 80       	breq	8000b42e <__avr32_f64_cmp_eq+0x16>
8000b420:	a1 7b       	lsl	r11,0x1
8000b422:	a1 79       	lsl	r9,0x1
8000b424:	14 4b       	or	r11,r10
8000b426:	12 4b       	or	r11,r9
8000b428:	10 4b       	or	r11,r8
8000b42a:	5e 0f       	reteq	1
8000b42c:	5e fd       	retal	0
8000b42e:	a1 7b       	lsl	r11,0x1
8000b430:	fc 1c ff e0 	movh	r12,0xffe0
8000b434:	58 0a       	cp.w	r10,0
8000b436:	f8 0b 13 00 	cpc	r11,r12
8000b43a:	5e 8f       	retls	1
8000b43c:	5e fd       	retal	0

8000b43e <__avr32_f64_cmp_ge>:
8000b43e:	1a de       	st.w	--sp,lr
8000b440:	1a d7       	st.w	--sp,r7
8000b442:	a1 7b       	lsl	r11,0x1
8000b444:	5f 3c       	srlo	r12
8000b446:	a1 79       	lsl	r9,0x1
8000b448:	5f 37       	srlo	r7
8000b44a:	5c fc       	rol	r12
8000b44c:	fc 1e ff e0 	movh	lr,0xffe0
8000b450:	58 0a       	cp.w	r10,0
8000b452:	fc 0b 13 00 	cpc	r11,lr
8000b456:	e0 8b 00 1d 	brhi	8000b490 <__avr32_f64_cmp_ge+0x52>
8000b45a:	58 08       	cp.w	r8,0
8000b45c:	fc 09 13 00 	cpc	r9,lr
8000b460:	e0 8b 00 18 	brhi	8000b490 <__avr32_f64_cmp_ge+0x52>
8000b464:	58 0b       	cp.w	r11,0
8000b466:	f5 ba 00 00 	subfeq	r10,0
8000b46a:	c1 50       	breq	8000b494 <__avr32_f64_cmp_ge+0x56>
8000b46c:	1b 07       	ld.w	r7,sp++
8000b46e:	1b 0e       	ld.w	lr,sp++
8000b470:	58 3c       	cp.w	r12,3
8000b472:	c0 a0       	breq	8000b486 <__avr32_f64_cmp_ge+0x48>
8000b474:	58 1c       	cp.w	r12,1
8000b476:	c0 33       	brcs	8000b47c <__avr32_f64_cmp_ge+0x3e>
8000b478:	5e 0f       	reteq	1
8000b47a:	5e 1d       	retne	0
8000b47c:	10 3a       	cp.w	r10,r8
8000b47e:	f2 0b 13 00 	cpc	r11,r9
8000b482:	5e 2f       	reths	1
8000b484:	5e 3d       	retlo	0
8000b486:	14 38       	cp.w	r8,r10
8000b488:	f6 09 13 00 	cpc	r9,r11
8000b48c:	5e 2f       	reths	1
8000b48e:	5e 3d       	retlo	0
8000b490:	1b 07       	ld.w	r7,sp++
8000b492:	d8 0a       	popm	pc,r12=0
8000b494:	58 17       	cp.w	r7,1
8000b496:	5f 0c       	sreq	r12
8000b498:	58 09       	cp.w	r9,0
8000b49a:	f5 b8 00 00 	subfeq	r8,0
8000b49e:	1b 07       	ld.w	r7,sp++
8000b4a0:	1b 0e       	ld.w	lr,sp++
8000b4a2:	5e 0f       	reteq	1
8000b4a4:	5e fc       	retal	r12

8000b4a6 <__avr32_f64_cmp_lt>:
8000b4a6:	1a de       	st.w	--sp,lr
8000b4a8:	1a d7       	st.w	--sp,r7
8000b4aa:	a1 7b       	lsl	r11,0x1
8000b4ac:	5f 3c       	srlo	r12
8000b4ae:	a1 79       	lsl	r9,0x1
8000b4b0:	5f 37       	srlo	r7
8000b4b2:	5c fc       	rol	r12
8000b4b4:	fc 1e ff e0 	movh	lr,0xffe0
8000b4b8:	58 0a       	cp.w	r10,0
8000b4ba:	fc 0b 13 00 	cpc	r11,lr
8000b4be:	e0 8b 00 1d 	brhi	8000b4f8 <__avr32_f64_cmp_lt+0x52>
8000b4c2:	58 08       	cp.w	r8,0
8000b4c4:	fc 09 13 00 	cpc	r9,lr
8000b4c8:	e0 8b 00 18 	brhi	8000b4f8 <__avr32_f64_cmp_lt+0x52>
8000b4cc:	58 0b       	cp.w	r11,0
8000b4ce:	f5 ba 00 00 	subfeq	r10,0
8000b4d2:	c1 50       	breq	8000b4fc <__avr32_f64_cmp_lt+0x56>
8000b4d4:	1b 07       	ld.w	r7,sp++
8000b4d6:	1b 0e       	ld.w	lr,sp++
8000b4d8:	58 3c       	cp.w	r12,3
8000b4da:	c0 a0       	breq	8000b4ee <__avr32_f64_cmp_lt+0x48>
8000b4dc:	58 1c       	cp.w	r12,1
8000b4de:	c0 33       	brcs	8000b4e4 <__avr32_f64_cmp_lt+0x3e>
8000b4e0:	5e 0d       	reteq	0
8000b4e2:	5e 1f       	retne	1
8000b4e4:	10 3a       	cp.w	r10,r8
8000b4e6:	f2 0b 13 00 	cpc	r11,r9
8000b4ea:	5e 2d       	reths	0
8000b4ec:	5e 3f       	retlo	1
8000b4ee:	14 38       	cp.w	r8,r10
8000b4f0:	f6 09 13 00 	cpc	r9,r11
8000b4f4:	5e 2d       	reths	0
8000b4f6:	5e 3f       	retlo	1
8000b4f8:	1b 07       	ld.w	r7,sp++
8000b4fa:	d8 0a       	popm	pc,r12=0
8000b4fc:	58 17       	cp.w	r7,1
8000b4fe:	5f 1c       	srne	r12
8000b500:	58 09       	cp.w	r9,0
8000b502:	f5 b8 00 00 	subfeq	r8,0
8000b506:	1b 07       	ld.w	r7,sp++
8000b508:	1b 0e       	ld.w	lr,sp++
8000b50a:	5e 0d       	reteq	0
8000b50c:	5e fc       	retal	r12

8000b50e <__avr32_umod64>:
8000b50e:	d4 31       	pushm	r0-r7,lr
8000b510:	1a 97       	mov	r7,sp
8000b512:	20 3d       	sub	sp,12
8000b514:	10 9c       	mov	r12,r8
8000b516:	12 95       	mov	r5,r9
8000b518:	14 9e       	mov	lr,r10
8000b51a:	16 91       	mov	r1,r11
8000b51c:	16 96       	mov	r6,r11
8000b51e:	58 09       	cp.w	r9,0
8000b520:	e0 81 00 81 	brne	8000b622 <__avr32_umod64+0x114>
8000b524:	16 38       	cp.w	r8,r11
8000b526:	e0 88 00 12 	brls	8000b54a <__avr32_umod64+0x3c>
8000b52a:	f0 08 12 00 	clz	r8,r8
8000b52e:	c4 e0       	breq	8000b5ca <__avr32_umod64+0xbc>
8000b530:	f6 08 09 46 	lsl	r6,r11,r8
8000b534:	f8 08 09 4c 	lsl	r12,r12,r8
8000b538:	f0 0b 11 20 	rsub	r11,r8,32
8000b53c:	f4 08 09 4e 	lsl	lr,r10,r8
8000b540:	f4 0b 0a 4b 	lsr	r11,r10,r11
8000b544:	f7 e6 10 06 	or	r6,r11,r6
8000b548:	c4 18       	rjmp	8000b5ca <__avr32_umod64+0xbc>
8000b54a:	58 08       	cp.w	r8,0
8000b54c:	c0 51       	brne	8000b556 <__avr32_umod64+0x48>
8000b54e:	30 19       	mov	r9,1
8000b550:	f2 08 0d 08 	divu	r8,r9,r8
8000b554:	10 9c       	mov	r12,r8
8000b556:	f8 08 12 00 	clz	r8,r12
8000b55a:	c0 31       	brne	8000b560 <__avr32_umod64+0x52>
8000b55c:	18 16       	sub	r6,r12
8000b55e:	c3 68       	rjmp	8000b5ca <__avr32_umod64+0xbc>
8000b560:	f0 03 11 20 	rsub	r3,r8,32
8000b564:	f4 03 0a 4b 	lsr	r11,r10,r3
8000b568:	f8 08 09 4c 	lsl	r12,r12,r8
8000b56c:	ec 08 09 49 	lsl	r9,r6,r8
8000b570:	ec 03 0a 43 	lsr	r3,r6,r3
8000b574:	f7 e9 10 09 	or	r9,r11,r9
8000b578:	f8 05 16 10 	lsr	r5,r12,0x10
8000b57c:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000b580:	e6 05 0d 02 	divu	r2,r3,r5
8000b584:	f2 0e 16 10 	lsr	lr,r9,0x10
8000b588:	ec 02 02 4b 	mul	r11,r6,r2
8000b58c:	fd e3 11 0e 	or	lr,lr,r3<<0x10
8000b590:	16 3e       	cp.w	lr,r11
8000b592:	c0 72       	brcc	8000b5a0 <__avr32_umod64+0x92>
8000b594:	18 0e       	add	lr,r12
8000b596:	18 3e       	cp.w	lr,r12
8000b598:	c0 43       	brcs	8000b5a0 <__avr32_umod64+0x92>
8000b59a:	16 3e       	cp.w	lr,r11
8000b59c:	fd dc e3 0e 	addcs	lr,lr,r12
8000b5a0:	fc 0b 01 03 	sub	r3,lr,r11
8000b5a4:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8000b5a8:	e6 05 0d 02 	divu	r2,r3,r5
8000b5ac:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000b5b0:	a5 36       	mul	r6,r2
8000b5b2:	0c 39       	cp.w	r9,r6
8000b5b4:	c0 72       	brcc	8000b5c2 <__avr32_umod64+0xb4>
8000b5b6:	18 09       	add	r9,r12
8000b5b8:	18 39       	cp.w	r9,r12
8000b5ba:	c0 43       	brcs	8000b5c2 <__avr32_umod64+0xb4>
8000b5bc:	0c 39       	cp.w	r9,r6
8000b5be:	f3 dc e3 09 	addcs	r9,r9,r12
8000b5c2:	f2 06 01 06 	sub	r6,r9,r6
8000b5c6:	f4 08 09 4e 	lsl	lr,r10,r8
8000b5ca:	f8 0a 16 10 	lsr	r10,r12,0x10
8000b5ce:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000b5d2:	ec 0a 0d 02 	divu	r2,r6,r10
8000b5d6:	fc 09 16 10 	lsr	r9,lr,0x10
8000b5da:	ea 02 02 4b 	mul	r11,r5,r2
8000b5de:	f3 e3 11 09 	or	r9,r9,r3<<0x10
8000b5e2:	16 39       	cp.w	r9,r11
8000b5e4:	c0 72       	brcc	8000b5f2 <__avr32_umod64+0xe4>
8000b5e6:	18 09       	add	r9,r12
8000b5e8:	18 39       	cp.w	r9,r12
8000b5ea:	c0 43       	brcs	8000b5f2 <__avr32_umod64+0xe4>
8000b5ec:	16 39       	cp.w	r9,r11
8000b5ee:	f3 dc e3 09 	addcs	r9,r9,r12
8000b5f2:	f2 0b 01 0b 	sub	r11,r9,r11
8000b5f6:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8000b5fa:	f6 0a 0d 0a 	divu	r10,r11,r10
8000b5fe:	fd eb 11 0e 	or	lr,lr,r11<<0x10
8000b602:	ea 0a 02 4a 	mul	r10,r5,r10
8000b606:	14 3e       	cp.w	lr,r10
8000b608:	c0 72       	brcc	8000b616 <__avr32_umod64+0x108>
8000b60a:	18 0e       	add	lr,r12
8000b60c:	18 3e       	cp.w	lr,r12
8000b60e:	c0 43       	brcs	8000b616 <__avr32_umod64+0x108>
8000b610:	14 3e       	cp.w	lr,r10
8000b612:	fd dc e3 0e 	addcs	lr,lr,r12
8000b616:	fc 0a 01 0a 	sub	r10,lr,r10
8000b61a:	30 0b       	mov	r11,0
8000b61c:	f4 08 0a 4a 	lsr	r10,r10,r8
8000b620:	c7 b8       	rjmp	8000b716 <__avr32_umod64+0x208>
8000b622:	16 39       	cp.w	r9,r11
8000b624:	e0 8b 00 79 	brhi	8000b716 <__avr32_umod64+0x208>
8000b628:	f2 09 12 00 	clz	r9,r9
8000b62c:	c1 21       	brne	8000b650 <__avr32_umod64+0x142>
8000b62e:	10 3a       	cp.w	r10,r8
8000b630:	5f 2b       	srhs	r11
8000b632:	0a 31       	cp.w	r1,r5
8000b634:	5f ba       	srhi	r10
8000b636:	f7 ea 10 0a 	or	r10,r11,r10
8000b63a:	f2 0a 18 00 	cp.b	r10,r9
8000b63e:	c0 60       	breq	8000b64a <__avr32_umod64+0x13c>
8000b640:	fc 08 01 0c 	sub	r12,lr,r8
8000b644:	e2 05 01 46 	sbc	r6,r1,r5
8000b648:	18 9e       	mov	lr,r12
8000b64a:	0c 9b       	mov	r11,r6
8000b64c:	1c 9a       	mov	r10,lr
8000b64e:	c6 48       	rjmp	8000b716 <__avr32_umod64+0x208>
8000b650:	ea 09 09 4c 	lsl	r12,r5,r9
8000b654:	f2 06 11 20 	rsub	r6,r9,32
8000b658:	f6 09 09 4b 	lsl	r11,r11,r9
8000b65c:	f0 09 09 42 	lsl	r2,r8,r9
8000b660:	ef 46 ff f4 	st.w	r7[-12],r6
8000b664:	f0 06 0a 48 	lsr	r8,r8,r6
8000b668:	18 48       	or	r8,r12
8000b66a:	e2 06 0a 4c 	lsr	r12,r1,r6
8000b66e:	f4 09 09 43 	lsl	r3,r10,r9
8000b672:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000b676:	f4 06 0a 4a 	lsr	r10,r10,r6
8000b67a:	16 4a       	or	r10,r11
8000b67c:	f0 0b 16 10 	lsr	r11,r8,0x10
8000b680:	f8 0b 0d 04 	divu	r4,r12,r11
8000b684:	f4 0c 16 10 	lsr	r12,r10,0x10
8000b688:	08 91       	mov	r1,r4
8000b68a:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
8000b68e:	e8 0e 02 46 	mul	r6,r4,lr
8000b692:	0c 3c       	cp.w	r12,r6
8000b694:	c0 a2       	brcc	8000b6a8 <__avr32_umod64+0x19a>
8000b696:	20 11       	sub	r1,1
8000b698:	10 0c       	add	r12,r8
8000b69a:	10 3c       	cp.w	r12,r8
8000b69c:	c0 63       	brcs	8000b6a8 <__avr32_umod64+0x19a>
8000b69e:	0c 3c       	cp.w	r12,r6
8000b6a0:	f7 b1 03 01 	sublo	r1,1
8000b6a4:	f9 d8 e3 0c 	addcs	r12,r12,r8
8000b6a8:	0c 1c       	sub	r12,r6
8000b6aa:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
8000b6ae:	f8 0b 0d 04 	divu	r4,r12,r11
8000b6b2:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
8000b6b6:	08 96       	mov	r6,r4
8000b6b8:	e8 0e 02 4e 	mul	lr,r4,lr
8000b6bc:	1c 3b       	cp.w	r11,lr
8000b6be:	c0 a2       	brcc	8000b6d2 <__avr32_umod64+0x1c4>
8000b6c0:	20 16       	sub	r6,1
8000b6c2:	10 0b       	add	r11,r8
8000b6c4:	10 3b       	cp.w	r11,r8
8000b6c6:	c0 63       	brcs	8000b6d2 <__avr32_umod64+0x1c4>
8000b6c8:	1c 3b       	cp.w	r11,lr
8000b6ca:	f7 b6 03 01 	sublo	r6,1
8000b6ce:	f7 d8 e3 0b 	addcs	r11,r11,r8
8000b6d2:	ed e1 11 01 	or	r1,r6,r1<<0x10
8000b6d6:	1c 1b       	sub	r11,lr
8000b6d8:	e2 02 06 40 	mulu.d	r0,r1,r2
8000b6dc:	00 9e       	mov	lr,r0
8000b6de:	02 9c       	mov	r12,r1
8000b6e0:	16 3c       	cp.w	r12,r11
8000b6e2:	e0 8b 00 08 	brhi	8000b6f2 <__avr32_umod64+0x1e4>
8000b6e6:	5f 06       	sreq	r6
8000b6e8:	06 30       	cp.w	r0,r3
8000b6ea:	5f ba       	srhi	r10
8000b6ec:	ed ea 00 0a 	and	r10,r6,r10
8000b6f0:	c0 60       	breq	8000b6fc <__avr32_umod64+0x1ee>
8000b6f2:	fc 02 01 04 	sub	r4,lr,r2
8000b6f6:	f8 08 01 4c 	sbc	r12,r12,r8
8000b6fa:	08 9e       	mov	lr,r4
8000b6fc:	e6 0e 01 0a 	sub	r10,r3,lr
8000b700:	f6 0c 01 4c 	sbc	r12,r11,r12
8000b704:	ee f1 ff f4 	ld.w	r1,r7[-12]
8000b708:	f8 09 0a 4b 	lsr	r11,r12,r9
8000b70c:	f4 09 0a 4a 	lsr	r10,r10,r9
8000b710:	f8 01 09 4c 	lsl	r12,r12,r1
8000b714:	18 4a       	or	r10,r12
8000b716:	2f dd       	sub	sp,-12
8000b718:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

8000b800 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
8000b800:	c0 08       	rjmp	8000b800 <_evba>
	...

8000b804 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
8000b804:	c0 08       	rjmp	8000b804 <_handle_TLB_Multiple_Hit>
	...

8000b808 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
8000b808:	c0 08       	rjmp	8000b808 <_handle_Bus_Error_Data_Fetch>
	...

8000b80c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8000b80c:	c0 08       	rjmp	8000b80c <_handle_Bus_Error_Instruction_Fetch>
	...

8000b810 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
8000b810:	c0 08       	rjmp	8000b810 <_handle_NMI>
	...

8000b814 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
8000b814:	c0 08       	rjmp	8000b814 <_handle_Instruction_Address>
	...

8000b818 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
8000b818:	c0 08       	rjmp	8000b818 <_handle_ITLB_Protection>
	...

8000b81c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8000b81c:	c0 08       	rjmp	8000b81c <_handle_Breakpoint>
	...

8000b820 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
8000b820:	c0 08       	rjmp	8000b820 <_handle_Illegal_Opcode>
	...

8000b824 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
8000b824:	c0 08       	rjmp	8000b824 <_handle_Unimplemented_Instruction>
	...

8000b828 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
8000b828:	c0 08       	rjmp	8000b828 <_handle_Privilege_Violation>
	...

8000b82c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8000b82c:	c0 08       	rjmp	8000b82c <_handle_Floating_Point>
	...

8000b830 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
8000b830:	c0 08       	rjmp	8000b830 <_handle_Coprocessor_Absent>
	...

8000b834 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
8000b834:	c0 08       	rjmp	8000b834 <_handle_Data_Address_Read>
	...

8000b838 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
8000b838:	c0 08       	rjmp	8000b838 <_handle_Data_Address_Write>
	...

8000b83c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8000b83c:	c0 08       	rjmp	8000b83c <_handle_DTLB_Protection_Read>
	...

8000b840 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
8000b840:	c0 08       	rjmp	8000b840 <_handle_DTLB_Protection_Write>
	...

8000b844 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
8000b844:	c0 08       	rjmp	8000b844 <_handle_DTLB_Modified>
	...

8000b850 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
8000b850:	c0 08       	rjmp	8000b850 <_handle_ITLB_Miss>
	...

8000b860 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
8000b860:	c0 08       	rjmp	8000b860 <_handle_DTLB_Miss_Read>
	...

8000b870 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
8000b870:	c0 08       	rjmp	8000b870 <_handle_DTLB_Miss_Write>
	...

8000b900 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
8000b900:	c0 08       	rjmp	8000b900 <_handle_Supervisor_Call>
8000b902:	d7 03       	nop

8000b904 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b904:	30 0c       	mov	r12,0
8000b906:	fe b0 cb 49 	rcall	80004f98 <_get_interrupt_handler>
8000b90a:	58 0c       	cp.w	r12,0
8000b90c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b910:	d6 03       	rete

8000b912 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b912:	30 1c       	mov	r12,1
8000b914:	fe b0 cb 42 	rcall	80004f98 <_get_interrupt_handler>
8000b918:	58 0c       	cp.w	r12,0
8000b91a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b91e:	d6 03       	rete

8000b920 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b920:	30 2c       	mov	r12,2
8000b922:	fe b0 cb 3b 	rcall	80004f98 <_get_interrupt_handler>
8000b926:	58 0c       	cp.w	r12,0
8000b928:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b92c:	d6 03       	rete

8000b92e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8000b92e:	30 3c       	mov	r12,3
8000b930:	fe b0 cb 34 	rcall	80004f98 <_get_interrupt_handler>
8000b934:	58 0c       	cp.w	r12,0
8000b936:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8000b93a:	d6 03       	rete
8000b93c:	d7 03       	nop
8000b93e:	d7 03       	nop
8000b940:	d7 03       	nop
8000b942:	d7 03       	nop
8000b944:	d7 03       	nop
8000b946:	d7 03       	nop
8000b948:	d7 03       	nop
8000b94a:	d7 03       	nop
8000b94c:	d7 03       	nop
8000b94e:	d7 03       	nop
8000b950:	d7 03       	nop
8000b952:	d7 03       	nop
8000b954:	d7 03       	nop
8000b956:	d7 03       	nop
8000b958:	d7 03       	nop
8000b95a:	d7 03       	nop
8000b95c:	d7 03       	nop
8000b95e:	d7 03       	nop
8000b960:	d7 03       	nop
8000b962:	d7 03       	nop
8000b964:	d7 03       	nop
8000b966:	d7 03       	nop
8000b968:	d7 03       	nop
8000b96a:	d7 03       	nop
8000b96c:	d7 03       	nop
8000b96e:	d7 03       	nop
8000b970:	d7 03       	nop
8000b972:	d7 03       	nop
8000b974:	d7 03       	nop
8000b976:	d7 03       	nop
8000b978:	d7 03       	nop
8000b97a:	d7 03       	nop
8000b97c:	d7 03       	nop
8000b97e:	d7 03       	nop
8000b980:	d7 03       	nop
8000b982:	d7 03       	nop
8000b984:	d7 03       	nop
8000b986:	d7 03       	nop
8000b988:	d7 03       	nop
8000b98a:	d7 03       	nop
8000b98c:	d7 03       	nop
8000b98e:	d7 03       	nop
8000b990:	d7 03       	nop
8000b992:	d7 03       	nop
8000b994:	d7 03       	nop
8000b996:	d7 03       	nop
8000b998:	d7 03       	nop
8000b99a:	d7 03       	nop
8000b99c:	d7 03       	nop
8000b99e:	d7 03       	nop
8000b9a0:	d7 03       	nop
8000b9a2:	d7 03       	nop
8000b9a4:	d7 03       	nop
8000b9a6:	d7 03       	nop
8000b9a8:	d7 03       	nop
8000b9aa:	d7 03       	nop
8000b9ac:	d7 03       	nop
8000b9ae:	d7 03       	nop
8000b9b0:	d7 03       	nop
8000b9b2:	d7 03       	nop
8000b9b4:	d7 03       	nop
8000b9b6:	d7 03       	nop
8000b9b8:	d7 03       	nop
8000b9ba:	d7 03       	nop
8000b9bc:	d7 03       	nop
8000b9be:	d7 03       	nop
8000b9c0:	d7 03       	nop
8000b9c2:	d7 03       	nop
8000b9c4:	d7 03       	nop
8000b9c6:	d7 03       	nop
8000b9c8:	d7 03       	nop
8000b9ca:	d7 03       	nop
8000b9cc:	d7 03       	nop
8000b9ce:	d7 03       	nop
8000b9d0:	d7 03       	nop
8000b9d2:	d7 03       	nop
8000b9d4:	d7 03       	nop
8000b9d6:	d7 03       	nop
8000b9d8:	d7 03       	nop
8000b9da:	d7 03       	nop
8000b9dc:	d7 03       	nop
8000b9de:	d7 03       	nop
8000b9e0:	d7 03       	nop
8000b9e2:	d7 03       	nop
8000b9e4:	d7 03       	nop
8000b9e6:	d7 03       	nop
8000b9e8:	d7 03       	nop
8000b9ea:	d7 03       	nop
8000b9ec:	d7 03       	nop
8000b9ee:	d7 03       	nop
8000b9f0:	d7 03       	nop
8000b9f2:	d7 03       	nop
8000b9f4:	d7 03       	nop
8000b9f6:	d7 03       	nop
8000b9f8:	d7 03       	nop
8000b9fa:	d7 03       	nop
8000b9fc:	d7 03       	nop
8000b9fe:	d7 03       	nop
