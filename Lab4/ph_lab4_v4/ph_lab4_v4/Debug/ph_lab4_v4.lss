
ph_lab4_v4.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002010  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0001129c  80002010  80002010  00002410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80013400  80013400  00013800  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000720  80013600  80013600  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  00000004  00000004  00000000  2**0
                  ALLOC
  6 .data         000005d4  00000008  80013d20  00014408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .balign       00000004  000005dc  800142f4  000149dc  2**0
                  ALLOC
  8 .bss          00000c78  000005e0  000005e0  00000000  2**2
                  ALLOC
  9 .heap         0000dda8  00001258  00001258  00000000  2**0
                  ALLOC
 10 .comment      00000030  00000000  00000000  000149dc  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00001b40  00000000  00000000  00014a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00003a5d  00000000  00000000  00016550  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0003925b  00000000  00000000  00019fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00007225  00000000  00000000  00053208  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00019930  00000000  00000000  0005a42d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004f0c  00000000  00000000  00073d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b62f  00000000  00000000  00078c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000db50  00000000  00000000  0008429b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macinfo 017689a7  00000000  00000000  00091deb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .stack        00001000  0000f000  0000f000  00000000  2**0
                  ALLOC
 21 .debug_ranges 00001b48  00000000  00000000  017fa798  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_start>:

  .global _start
  .type _start, @function
_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80000000:	48 1f       	lddpc	pc,80000004 <_start+0x4>
80000002:	d7 03       	nop
80000004:	80 00       	ld.sh	r0,r0[0x0]
80000006:	a2 cc       	st.b	r1[0x4],r12

80000008 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000008:	e0 8f 10 00 	bral	80002008 <program_start>
	...

80002008 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002008:	fe ff 00 04 	ld.w	pc,pc[4]
8000200c:	80 00       	ld.sh	r0,r0[0x0]
8000200e:	a2 cc       	st.b	r1[0x4],r12

Disassembly of section .text:

80002010 <sd_mmc_spi_internal_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_internal_init(void)
{
80002010:	eb cd 40 80 	pushm	r7,lr
80002014:	1a 97       	mov	r7,sp
80002016:	20 3d       	sub	sp,12
  uint16_t retry;
  int i;
  int if_cond;

  // Start at low frequency
  sd_mmc_opt.baudrate = 400000;
80002018:	fe f8 02 c8 	ld.w	r8,pc[712]
8000201c:	e6 69 1a 80 	mov	r9,400000
80002020:	91 19       	st.w	r8[0x4],r9
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
80002022:	fe f8 02 c2 	ld.w	r8,pc[706]
80002026:	70 08       	ld.w	r8,r8[0x0]
80002028:	10 9a       	mov	r10,r8
8000202a:	fe fb 02 b6 	ld.w	r11,pc[694]
8000202e:	fe 7c 28 00 	mov	r12,-55296
80002032:	f0 1f 00 ae 	mcall	800022e8 <sd_mmc_spi_internal_init+0x2d8>

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002036:	30 1b       	mov	r11,1
80002038:	fe 7c 28 00 	mov	r12,-55296
8000203c:	f0 1f 00 ac 	mcall	800022ec <sd_mmc_spi_internal_init+0x2dc>
  for(i = 0; i < 10; ++i) {
80002040:	30 08       	mov	r8,0
80002042:	ef 48 ff f8 	st.w	r7[-8],r8
80002046:	c0 c8       	rjmp	8000205e <sd_mmc_spi_internal_init+0x4e>
    spi_write(SD_MMC_SPI,0xFF);
80002048:	e0 6b 00 ff 	mov	r11,255
8000204c:	fe 7c 28 00 	mov	r12,-55296
80002050:	f0 1f 00 a8 	mcall	800022f0 <sd_mmc_spi_internal_init+0x2e0>
  sd_mmc_opt.baudrate = 400000;
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);

  /* card needs 74 cycles minimum to start up */
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
  for(i = 0; i < 10; ++i) {
80002054:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002058:	2f f8       	sub	r8,-1
8000205a:	ef 48 ff f8 	st.w	r7[-8],r8
8000205e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002062:	58 98       	cp.w	r8,9
80002064:	fe 9a ff f2 	brle	80002048 <sd_mmc_spi_internal_init+0x38>
    spi_write(SD_MMC_SPI,0xFF);
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002068:	30 1b       	mov	r11,1
8000206a:	fe 7c 28 00 	mov	r12,-55296
8000206e:	f0 1f 00 a2 	mcall	800022f4 <sd_mmc_spi_internal_init+0x2e4>

  // RESET THE MEMORY CARD
  sd_mmc_spi_init_done = false;
80002072:	fe f9 02 86 	ld.w	r9,pc[646]
80002076:	30 08       	mov	r8,0
80002078:	b2 88       	st.b	r9[0x0],r8
  card_type = MMC_CARD;
8000207a:	fe f9 02 82 	ld.w	r9,pc[642]
8000207e:	30 08       	mov	r8,0
80002080:	b2 88       	st.b	r9[0x0],r8
  retry = 0;
80002082:	30 08       	mov	r8,0
80002084:	ef 58 ff f6 	st.h	r7[-10],r8
  do
  {
    // reset card and go to SPI mode
    r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
80002088:	30 0b       	mov	r11,0
8000208a:	30 0c       	mov	r12,0
8000208c:	f0 1f 00 9d 	mcall	80002300 <sd_mmc_spi_internal_init+0x2f0>
80002090:	18 98       	mov	r8,r12
80002092:	fe f9 02 72 	ld.w	r9,pc[626]
80002096:	b2 88       	st.b	r9[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002098:	e0 6b 00 ff 	mov	r11,255
8000209c:	fe 7c 28 00 	mov	r12,-55296
800020a0:	f0 1f 00 94 	mcall	800022f0 <sd_mmc_spi_internal_init+0x2e0>
    // do retry counter
    retry++;
800020a4:	ef 08 ff f6 	ld.sh	r8,r7[-10]
800020a8:	2f f8       	sub	r8,-1
800020aa:	ef 58 ff f6 	st.h	r7[-10],r8
    if(retry > 100)
800020ae:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800020b2:	36 48       	mov	r8,100
800020b4:	f0 09 19 00 	cp.h	r9,r8
800020b8:	e0 88 00 04 	brls	800020c0 <sd_mmc_spi_internal_init+0xb0>
      return false;
800020bc:	30 08       	mov	r8,0
800020be:	c0 d9       	rjmp	800022d8 <sd_mmc_spi_internal_init+0x2c8>
  }
  while(r1 != 0x01);   // check memory enters idle_state
800020c0:	fe f8 02 44 	ld.w	r8,pc[580]
800020c4:	11 89       	ld.ub	r9,r8[0x0]
800020c6:	30 18       	mov	r8,1
800020c8:	f0 09 18 00 	cp.b	r9,r8
800020cc:	cd e1       	brne	80002088 <sd_mmc_spi_internal_init+0x78>

  if_cond = sd_mmc_spi_get_if();
800020ce:	f0 1f 00 8f 	mcall	80002308 <sd_mmc_spi_internal_init+0x2f8>
800020d2:	18 98       	mov	r8,r12
800020d4:	ef 48 ff fc 	st.w	r7[-4],r8
  if(if_cond == -1) {
800020d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020dc:	5b f8       	cp.w	r8,-1
800020de:	c0 31       	brne	800020e4 <sd_mmc_spi_internal_init+0xd4>
      return false; // card is bad
800020e0:	30 08       	mov	r8,0
800020e2:	cf b8       	rjmp	800022d8 <sd_mmc_spi_internal_init+0x2c8>
  } else if (if_cond == 1) {
800020e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800020e8:	58 18       	cp.w	r8,1
800020ea:	c0 61       	brne	800020f6 <sd_mmc_spi_internal_init+0xe6>
      card_type = SD_CARD_2;
800020ec:	fe f9 02 10 	ld.w	r9,pc[528]
800020f0:	30 28       	mov	r8,2
800020f2:	b2 88       	st.b	r9[0x0],r8
800020f4:	c4 c8       	rjmp	8000218c <sd_mmc_spi_internal_init+0x17c>
  } else {
    // IDENTIFICATION OF THE CARD TYPE (SD or MMC)
    // Both cards will accept CMD55 command but only the SD card will respond to ACMD41
    r1 = sd_mmc_spi_send_command(SD_APP_CMD55,0);
800020f6:	30 0b       	mov	r11,0
800020f8:	33 7c       	mov	r12,55
800020fa:	f0 1f 00 82 	mcall	80002300 <sd_mmc_spi_internal_init+0x2f0>
800020fe:	18 98       	mov	r8,r12
80002100:	fe f9 02 04 	ld.w	r9,pc[516]
80002104:	b2 88       	st.b	r9[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002106:	e0 6b 00 ff 	mov	r11,255
8000210a:	fe 7c 28 00 	mov	r12,-55296
8000210e:	f0 1f 00 79 	mcall	800022f0 <sd_mmc_spi_internal_init+0x2e0>

    r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
80002112:	30 0b       	mov	r11,0
80002114:	32 9c       	mov	r12,41
80002116:	f0 1f 00 7b 	mcall	80002300 <sd_mmc_spi_internal_init+0x2f0>
8000211a:	18 98       	mov	r8,r12
8000211c:	4f a9       	lddpc	r9,80002304 <sd_mmc_spi_internal_init+0x2f4>
8000211e:	b2 88       	st.b	r9[0x0],r8
    spi_write(SD_MMC_SPI,0xFF);  // write dummy byte
80002120:	e0 6b 00 ff 	mov	r11,255
80002124:	fe 7c 28 00 	mov	r12,-55296
80002128:	f0 1f 00 72 	mcall	800022f0 <sd_mmc_spi_internal_init+0x2e0>

    if ((r1&0xFE) == 0) {   // ignore "in_idle_state" flag bit
8000212c:	4f 68       	lddpc	r8,80002304 <sd_mmc_spi_internal_init+0x2f4>
8000212e:	11 88       	ld.ub	r8,r8[0x0]
80002130:	e2 18 00 fe 	andl	r8,0xfe,COH
80002134:	c0 51       	brne	8000213e <sd_mmc_spi_internal_init+0x12e>
      card_type = SD_CARD;    // card has accepted the command, this is a SD card
80002136:	4f 29       	lddpc	r9,800022fc <sd_mmc_spi_internal_init+0x2ec>
80002138:	30 18       	mov	r8,1
8000213a:	b2 88       	st.b	r9[0x0],r8
8000213c:	c2 88       	rjmp	8000218c <sd_mmc_spi_internal_init+0x17c>
    } else {
      card_type = MMC_CARD;   // card has not responded, this is a MMC card
8000213e:	4f 09       	lddpc	r9,800022fc <sd_mmc_spi_internal_init+0x2ec>
80002140:	30 08       	mov	r8,0
80002142:	b2 88       	st.b	r9[0x0],r8
      // reset card again
      retry = 0;
80002144:	30 08       	mov	r8,0
80002146:	ef 58 ff f6 	st.h	r7[-10],r8
      do {
        // reset card again
        r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0);
8000214a:	30 0b       	mov	r11,0
8000214c:	30 0c       	mov	r12,0
8000214e:	f0 1f 00 6d 	mcall	80002300 <sd_mmc_spi_internal_init+0x2f0>
80002152:	18 98       	mov	r8,r12
80002154:	4e c9       	lddpc	r9,80002304 <sd_mmc_spi_internal_init+0x2f4>
80002156:	b2 88       	st.b	r9[0x0],r8
        spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002158:	e0 6b 00 ff 	mov	r11,255
8000215c:	fe 7c 28 00 	mov	r12,-55296
80002160:	f0 1f 00 64 	mcall	800022f0 <sd_mmc_spi_internal_init+0x2e0>
        // do retry counter
        retry++;
80002164:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002168:	2f f8       	sub	r8,-1
8000216a:	ef 58 ff f6 	st.h	r7[-10],r8
        if(retry > 100)
8000216e:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80002172:	36 48       	mov	r8,100
80002174:	f0 09 19 00 	cp.h	r9,r8
80002178:	e0 88 00 04 	brls	80002180 <sd_mmc_spi_internal_init+0x170>
          return false;
8000217c:	30 08       	mov	r8,0
8000217e:	ca d8       	rjmp	800022d8 <sd_mmc_spi_internal_init+0x2c8>
      }
      while(r1 != 0x01);   // check memory enters idle_state
80002180:	4e 18       	lddpc	r8,80002304 <sd_mmc_spi_internal_init+0x2f4>
80002182:	11 89       	ld.ub	r9,r8[0x0]
80002184:	30 18       	mov	r8,1
80002186:	f0 09 18 00 	cp.b	r9,r8
8000218a:	ce 01       	brne	8000214a <sd_mmc_spi_internal_init+0x13a>
    }
  }

  // CONTINUE INTERNAL INITIALIZATION OF THE CARD
  // Continue sending CMD1 while memory card is in idle state
  retry = 0;
8000218c:	30 08       	mov	r8,0
8000218e:	ef 58 ff f6 	st.h	r7[-10],r8
  do {
    switch(card_type) {
80002192:	4d b8       	lddpc	r8,800022fc <sd_mmc_spi_internal_init+0x2ec>
80002194:	11 88       	ld.ub	r8,r8[0x0]
80002196:	58 18       	cp.w	r8,1
80002198:	c1 30       	breq	800021be <sd_mmc_spi_internal_init+0x1ae>
8000219a:	58 28       	cp.w	r8,2
8000219c:	c2 30       	breq	800021e2 <sd_mmc_spi_internal_init+0x1d2>
8000219e:	58 08       	cp.w	r8,0
800021a0:	c3 31       	brne	80002206 <sd_mmc_spi_internal_init+0x1f6>
    case MMC_CARD:
      r1 = sd_mmc_spi_send_command(MMC_SEND_OP_COND, 0);
800021a2:	30 0b       	mov	r11,0
800021a4:	30 1c       	mov	r12,1
800021a6:	f0 1f 00 57 	mcall	80002300 <sd_mmc_spi_internal_init+0x2f0>
800021aa:	18 98       	mov	r8,r12
800021ac:	4d 69       	lddpc	r9,80002304 <sd_mmc_spi_internal_init+0x2f4>
800021ae:	b2 88       	st.b	r9[0x0],r8
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800021b0:	e0 6b 00 ff 	mov	r11,255
800021b4:	fe 7c 28 00 	mov	r12,-55296
800021b8:	f0 1f 00 4e 	mcall	800022f0 <sd_mmc_spi_internal_init+0x2e0>
      break;
800021bc:	c2 58       	rjmp	80002206 <sd_mmc_spi_internal_init+0x1f6>
    case SD_CARD:
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800021be:	30 0b       	mov	r11,0
800021c0:	33 7c       	mov	r12,55
800021c2:	f0 1f 00 50 	mcall	80002300 <sd_mmc_spi_internal_init+0x2f0>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0);
800021c6:	30 0b       	mov	r11,0
800021c8:	32 9c       	mov	r12,41
800021ca:	f0 1f 00 4e 	mcall	80002300 <sd_mmc_spi_internal_init+0x2f0>
800021ce:	18 98       	mov	r8,r12
800021d0:	4c d9       	lddpc	r9,80002304 <sd_mmc_spi_internal_init+0x2f4>
800021d2:	b2 88       	st.b	r9[0x0],r8
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800021d4:	e0 6b 00 ff 	mov	r11,255
800021d8:	fe 7c 28 00 	mov	r12,-55296
800021dc:	f0 1f 00 45 	mcall	800022f0 <sd_mmc_spi_internal_init+0x2e0>
      break;
800021e0:	c1 38       	rjmp	80002206 <sd_mmc_spi_internal_init+0x1f6>
    case SD_CARD_2:
      // set high capacity bit mask
      sd_mmc_spi_send_command(SD_APP_CMD55,0);
800021e2:	30 0b       	mov	r11,0
800021e4:	33 7c       	mov	r12,55
800021e6:	f0 1f 00 47 	mcall	80002300 <sd_mmc_spi_internal_init+0x2f0>
      r1 = sd_mmc_spi_send_command(SD_SEND_OP_COND_ACMD, 0x40000000);
800021ea:	fc 1b 40 00 	movh	r11,0x4000
800021ee:	32 9c       	mov	r12,41
800021f0:	f0 1f 00 44 	mcall	80002300 <sd_mmc_spi_internal_init+0x2f0>
800021f4:	18 98       	mov	r8,r12
800021f6:	4c 49       	lddpc	r9,80002304 <sd_mmc_spi_internal_init+0x2f4>
800021f8:	b2 88       	st.b	r9[0x0],r8
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
800021fa:	e0 6b 00 ff 	mov	r11,255
800021fe:	fe 7c 28 00 	mov	r12,-55296
80002202:	f0 1f 00 3c 	mcall	800022f0 <sd_mmc_spi_internal_init+0x2e0>
      break;
    }
     // do retry counter
     retry++;
80002206:	ef 08 ff f6 	ld.sh	r8,r7[-10]
8000220a:	2f f8       	sub	r8,-1
8000220c:	ef 58 ff f6 	st.h	r7[-10],r8
     if(retry == 50000)    // measured approx. 500 on several cards
80002210:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80002214:	fe 78 c3 50 	mov	r8,-15536
80002218:	f0 09 19 00 	cp.h	r9,r8
8000221c:	c0 31       	brne	80002222 <sd_mmc_spi_internal_init+0x212>
        return false;
8000221e:	30 08       	mov	r8,0
80002220:	c5 c8       	rjmp	800022d8 <sd_mmc_spi_internal_init+0x2c8>
  } while (r1);
80002222:	4b 98       	lddpc	r8,80002304 <sd_mmc_spi_internal_init+0x2f4>
80002224:	11 88       	ld.ub	r8,r8[0x0]
80002226:	58 08       	cp.w	r8,0
80002228:	cb 51       	brne	80002192 <sd_mmc_spi_internal_init+0x182>

  // CHECK FOR SDHC
  if(card_type == SD_CARD_2) {
8000222a:	4b 58       	lddpc	r8,800022fc <sd_mmc_spi_internal_init+0x2ec>
8000222c:	11 89       	ld.ub	r9,r8[0x0]
8000222e:	30 28       	mov	r8,2
80002230:	f0 09 18 00 	cp.b	r9,r8
80002234:	c1 31       	brne	8000225a <sd_mmc_spi_internal_init+0x24a>
    if_cond = sd_mmc_spi_check_hc();
80002236:	f0 1f 00 36 	mcall	8000230c <sd_mmc_spi_internal_init+0x2fc>
8000223a:	18 98       	mov	r8,r12
8000223c:	ef 48 ff fc 	st.w	r7[-4],r8
    if (if_cond == -1) {
80002240:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002244:	5b f8       	cp.w	r8,-1
80002246:	c0 31       	brne	8000224c <sd_mmc_spi_internal_init+0x23c>
      return false;
80002248:	30 08       	mov	r8,0
8000224a:	c4 78       	rjmp	800022d8 <sd_mmc_spi_internal_init+0x2c8>
    } else if (if_cond == 1){
8000224c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002250:	58 18       	cp.w	r8,1
80002252:	c0 41       	brne	8000225a <sd_mmc_spi_internal_init+0x24a>
          card_type = SD_CARD_2_SDHC;
80002254:	4a a9       	lddpc	r9,800022fc <sd_mmc_spi_internal_init+0x2ec>
80002256:	30 38       	mov	r8,3
80002258:	b2 88       	st.b	r9[0x0],r8
      }
  }

  // DISABLE CRC TO SIMPLIFY AND SPEED UP COMMUNICATIONS
  r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0);  // disable CRC (should be already initialized on SPI init)
8000225a:	30 0b       	mov	r11,0
8000225c:	33 bc       	mov	r12,59
8000225e:	f0 1f 00 29 	mcall	80002300 <sd_mmc_spi_internal_init+0x2f0>
80002262:	18 98       	mov	r8,r12
80002264:	4a 89       	lddpc	r9,80002304 <sd_mmc_spi_internal_init+0x2f4>
80002266:	b2 88       	st.b	r9[0x0],r8
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002268:	e0 6b 00 ff 	mov	r11,255
8000226c:	fe 7c 28 00 	mov	r12,-55296
80002270:	f0 1f 00 20 	mcall	800022f0 <sd_mmc_spi_internal_init+0x2e0>

  // SET BLOCK LENGTH TO 512 BYTES
  r1 = sd_mmc_spi_send_command(MMC_SET_BLOCKLEN, 512);
80002274:	e0 6b 02 00 	mov	r11,512
80002278:	31 0c       	mov	r12,16
8000227a:	f0 1f 00 22 	mcall	80002300 <sd_mmc_spi_internal_init+0x2f0>
8000227e:	18 98       	mov	r8,r12
80002280:	4a 19       	lddpc	r9,80002304 <sd_mmc_spi_internal_init+0x2f4>
80002282:	b2 88       	st.b	r9[0x0],r8
  spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002284:	e0 6b 00 ff 	mov	r11,255
80002288:	fe 7c 28 00 	mov	r12,-55296
8000228c:	f0 1f 00 19 	mcall	800022f0 <sd_mmc_spi_internal_init+0x2e0>
  if (r1 != 0x00)
80002290:	49 d8       	lddpc	r8,80002304 <sd_mmc_spi_internal_init+0x2f4>
80002292:	11 88       	ld.ub	r8,r8[0x0]
80002294:	58 08       	cp.w	r8,0
80002296:	c0 30       	breq	8000229c <sd_mmc_spi_internal_init+0x28c>
    return false;    // card unsupported if block length of 512b is not accepted
80002298:	30 08       	mov	r8,0
8000229a:	c1 f8       	rjmp	800022d8 <sd_mmc_spi_internal_init+0x2c8>

  // GET CARD SPECIFIC DATA
  if (false ==  sd_mmc_spi_get_csd(csd))
8000229c:	49 dc       	lddpc	r12,80002310 <sd_mmc_spi_internal_init+0x300>
8000229e:	f0 1f 00 1e 	mcall	80002314 <sd_mmc_spi_internal_init+0x304>
800022a2:	18 98       	mov	r8,r12
800022a4:	ec 18 00 01 	eorl	r8,0x1
800022a8:	5c 58       	castu.b	r8
800022aa:	c0 30       	breq	800022b0 <sd_mmc_spi_internal_init+0x2a0>
    return false;
800022ac:	30 08       	mov	r8,0
800022ae:	c1 58       	rjmp	800022d8 <sd_mmc_spi_internal_init+0x2c8>

  // GET CARD CAPACITY and NUMBER OF SECTORS
  sd_mmc_spi_get_capacity();
800022b0:	f0 1f 00 1a 	mcall	80002318 <sd_mmc_spi_internal_init+0x308>
#if (defined SD_MMC_READ_CID) && (SD_MMC_READ_CID == true)
  if (false ==  sd_mmc_spi_get_cid(cid))
    return false;
#endif

  sd_mmc_spi_init_done = true;
800022b4:	49 19       	lddpc	r9,800022f8 <sd_mmc_spi_internal_init+0x2e8>
800022b6:	30 18       	mov	r8,1
800022b8:	b2 88       	st.b	r9[0x0],r8

  // Set SPI Speed to MAX
  sd_mmc_opt.baudrate = SD_MMC_SPI_MASTER_SPEED;
800022ba:	48 a8       	lddpc	r8,800022e0 <sd_mmc_spi_internal_init+0x2d0>
800022bc:	e0 69 1b 00 	mov	r9,6912
800022c0:	ea 19 00 b7 	orh	r9,0xb7
800022c4:	91 19       	st.w	r8[0x4],r9
  spi_setupChipReg(SD_MMC_SPI, &sd_mmc_opt, sd_mmc_pba_hz);
800022c6:	48 88       	lddpc	r8,800022e4 <sd_mmc_spi_internal_init+0x2d4>
800022c8:	70 08       	ld.w	r8,r8[0x0]
800022ca:	10 9a       	mov	r10,r8
800022cc:	48 5b       	lddpc	r11,800022e0 <sd_mmc_spi_internal_init+0x2d0>
800022ce:	fe 7c 28 00 	mov	r12,-55296
800022d2:	f0 1f 00 06 	mcall	800022e8 <sd_mmc_spi_internal_init+0x2d8>
  return true;
800022d6:	30 18       	mov	r8,1
}
800022d8:	10 9c       	mov	r12,r8
800022da:	2f dd       	sub	sp,-12
800022dc:	e3 cd 80 80 	ldm	sp++,r7,pc
800022e0:	00 00       	add	r0,r0
800022e2:	05 e4       	ld.ub	r4,r2[0x6]
800022e4:	00 00       	add	r0,r0
800022e6:	05 f4       	ld.ub	r4,r2[0x7]
800022e8:	80 00       	ld.sh	r0,r0[0x0]
800022ea:	32 a0       	mov	r0,42
800022ec:	80 00       	ld.sh	r0,r0[0x0]
800022ee:	31 9c       	mov	r12,25
800022f0:	80 00       	ld.sh	r0,r0[0x0]
800022f2:	34 3e       	mov	lr,67
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	32 34       	mov	r4,35
800022f8:	00 00       	add	r0,r0
800022fa:	05 f8       	ld.ub	r8,r2[0x7]
800022fc:	00 00       	add	r0,r0
800022fe:	0e f6       	st.b	--r7,r6
80002300:	80 00       	ld.sh	r0,r0[0x0]
80002302:	23 5c       	sub	r12,53
80002304:	00 00       	add	r0,r0
80002306:	0f 08       	ld.w	r8,r7++
80002308:	80 00       	ld.sh	r0,r0[0x0]
8000230a:	25 10       	sub	r0,81
8000230c:	80 00       	ld.sh	r0,r0[0x0]
8000230e:	25 f0       	sub	r0,95
80002310:	00 00       	add	r0,r0
80002312:	0e f8       	st.b	--r7,r8
80002314:	80 00       	ld.sh	r0,r0[0x0]
80002316:	26 ac       	sub	r12,106
80002318:	80 00       	ld.sh	r0,r0[0x0]
8000231a:	27 f0       	sub	r0,127

8000231c <sd_mmc_spi_init>:
//!
//!
//! @return bit
//!   The memory is ready     -> true (always)
bool sd_mmc_spi_init(spi_options_t spiOptions, unsigned int pba_hz)
{
8000231c:	eb cd 40 80 	pushm	r7,lr
80002320:	1a 97       	mov	r7,sp
80002322:	20 1d       	sub	sp,4
80002324:	ee c8 ff f8 	sub	r8,r7,-8
80002328:	ef 4c ff fc 	st.w	r7[-4],r12
  // Keep SPI options internally
  sd_mmc_pba_hz = pba_hz;
8000232c:	48 89       	lddpc	r9,8000234c <sd_mmc_spi_init+0x30>
8000232e:	ee fa ff fc 	ld.w	r10,r7[-4]
80002332:	93 0a       	st.w	r9[0x0],r10
  memcpy( &sd_mmc_opt, &spiOptions, sizeof(spi_options_t) );
80002334:	31 0a       	mov	r10,16
80002336:	10 9b       	mov	r11,r8
80002338:	48 6c       	lddpc	r12,80002350 <sd_mmc_spi_init+0x34>
8000233a:	f0 1f 00 07 	mcall	80002354 <sd_mmc_spi_init+0x38>

  // Initialize the SD/MMC controller.
  return sd_mmc_spi_internal_init();
8000233e:	f0 1f 00 07 	mcall	80002358 <sd_mmc_spi_init+0x3c>
80002342:	18 98       	mov	r8,r12
}
80002344:	10 9c       	mov	r12,r8
80002346:	2f fd       	sub	sp,-4
80002348:	e3 cd 80 80 	ldm	sp++,r7,pc
8000234c:	00 00       	add	r0,r0
8000234e:	05 f4       	ld.ub	r4,r2[0x7]
80002350:	00 00       	add	r0,r0
80002352:	05 e4       	ld.ub	r4,r2[0x6]
80002354:	80 00       	ld.sh	r0,r0[0x0]
80002356:	d8 b2       	popm	r0-r7,r10,pc
80002358:	80 00       	ld.sh	r0,r0[0x0]
8000235a:	20 10       	sub	r0,1

8000235c <sd_mmc_spi_send_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF if time out error)
uint8_t sd_mmc_spi_send_command(uint8_t command, uint32_t arg)
{
8000235c:	eb cd 40 80 	pushm	r7,lr
80002360:	1a 97       	mov	r7,sp
80002362:	20 2d       	sub	sp,8
80002364:	18 98       	mov	r8,r12
80002366:	ef 4b ff f8 	st.w	r7[-8],r11
8000236a:	ef 68 ff fc 	st.b	r7[-4],r8
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000236e:	30 1b       	mov	r11,1
80002370:	fe 7c 28 00 	mov	r12,-55296
80002374:	f0 1f 00 0c 	mcall	800023a4 <sd_mmc_spi_send_command+0x48>
  r1 = sd_mmc_spi_command(command, arg);
80002378:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000237c:	ee fb ff f8 	ld.w	r11,r7[-8]
80002380:	10 9c       	mov	r12,r8
80002382:	f0 1f 00 0a 	mcall	800023a8 <sd_mmc_spi_send_command+0x4c>
80002386:	18 98       	mov	r8,r12
80002388:	48 99       	lddpc	r9,800023ac <sd_mmc_spi_send_command+0x50>
8000238a:	b2 88       	st.b	r9[0x0],r8
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000238c:	30 1b       	mov	r11,1
8000238e:	fe 7c 28 00 	mov	r12,-55296
80002392:	f0 1f 00 08 	mcall	800023b0 <sd_mmc_spi_send_command+0x54>
  return r1;
80002396:	48 68       	lddpc	r8,800023ac <sd_mmc_spi_send_command+0x50>
80002398:	11 88       	ld.ub	r8,r8[0x0]
}
8000239a:	10 9c       	mov	r12,r8
8000239c:	2f ed       	sub	sp,-8
8000239e:	e3 cd 80 80 	ldm	sp++,r7,pc
800023a2:	00 00       	add	r0,r0
800023a4:	80 00       	ld.sh	r0,r0[0x0]
800023a6:	31 9c       	mov	r12,25
800023a8:	80 00       	ld.sh	r0,r0[0x0]
800023aa:	23 b4       	sub	r4,59
800023ac:	00 00       	add	r0,r0
800023ae:	0f 08       	ld.w	r8,r7++
800023b0:	80 00       	ld.sh	r0,r0[0x0]
800023b2:	32 34       	mov	r4,35

800023b4 <sd_mmc_spi_command>:
//! @param  arg       argument of the command
//!
//! @return uint8_t
//!         R1 response (R1 == 0xFF time out error)
uint8_t sd_mmc_spi_command(uint8_t command, uint32_t arg)
{
800023b4:	eb cd 40 80 	pushm	r7,lr
800023b8:	1a 97       	mov	r7,sp
800023ba:	20 3d       	sub	sp,12
800023bc:	18 98       	mov	r8,r12
800023be:	ef 4b ff f4 	st.w	r7[-12],r11
800023c2:	ef 68 ff f8 	st.b	r7[-8],r8
  uint8_t retry;

  spi_write(SD_MMC_SPI, 0xFF);            // write dummy byte
800023c6:	e0 6b 00 ff 	mov	r11,255
800023ca:	fe 7c 28 00 	mov	r12,-55296
800023ce:	f0 1f 00 3b 	mcall	800024b8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, command | 0x40);  // send command
800023d2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800023d6:	a7 a8       	sbr	r8,0x6
800023d8:	5c 58       	castu.b	r8
800023da:	10 9b       	mov	r11,r8
800023dc:	fe 7c 28 00 	mov	r12,-55296
800023e0:	f0 1f 00 36 	mcall	800024b8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, arg>>24);         // send parameter
800023e4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800023e8:	b9 88       	lsr	r8,0x18
800023ea:	5c 88       	casts.h	r8
800023ec:	5c 78       	castu.h	r8
800023ee:	10 9b       	mov	r11,r8
800023f0:	fe 7c 28 00 	mov	r12,-55296
800023f4:	f0 1f 00 31 	mcall	800024b8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, arg>>16);
800023f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800023fc:	b1 88       	lsr	r8,0x10
800023fe:	5c 88       	casts.h	r8
80002400:	5c 78       	castu.h	r8
80002402:	10 9b       	mov	r11,r8
80002404:	fe 7c 28 00 	mov	r12,-55296
80002408:	f0 1f 00 2c 	mcall	800024b8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, arg>>8 );
8000240c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002410:	a9 88       	lsr	r8,0x8
80002412:	5c 88       	casts.h	r8
80002414:	5c 78       	castu.h	r8
80002416:	10 9b       	mov	r11,r8
80002418:	fe 7c 28 00 	mov	r12,-55296
8000241c:	f0 1f 00 27 	mcall	800024b8 <sd_mmc_spi_command+0x104>
  spi_write(SD_MMC_SPI, arg    );
80002420:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002424:	5c 88       	casts.h	r8
80002426:	5c 78       	castu.h	r8
80002428:	10 9b       	mov	r11,r8
8000242a:	fe 7c 28 00 	mov	r12,-55296
8000242e:	f0 1f 00 23 	mcall	800024b8 <sd_mmc_spi_command+0x104>
  switch(command)
80002432:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80002436:	58 08       	cp.w	r8,0
80002438:	c0 40       	breq	80002440 <sd_mmc_spi_command+0x8c>
8000243a:	58 88       	cp.w	r8,8
8000243c:	c0 90       	breq	8000244e <sd_mmc_spi_command+0x9a>
8000243e:	c0 f8       	rjmp	8000245c <sd_mmc_spi_command+0xa8>
  {
      case MMC_GO_IDLE_STATE:
         spi_write(SD_MMC_SPI, 0x95);
80002440:	e0 6b 00 95 	mov	r11,149
80002444:	fe 7c 28 00 	mov	r12,-55296
80002448:	f0 1f 00 1c 	mcall	800024b8 <sd_mmc_spi_command+0x104>
         break;
8000244c:	c0 e8       	rjmp	80002468 <sd_mmc_spi_command+0xb4>
      case MMC_SEND_IF_COND:
         spi_write(SD_MMC_SPI, 0x87);
8000244e:	e0 6b 00 87 	mov	r11,135
80002452:	fe 7c 28 00 	mov	r12,-55296
80002456:	f0 1f 00 19 	mcall	800024b8 <sd_mmc_spi_command+0x104>
         break;
8000245a:	c0 78       	rjmp	80002468 <sd_mmc_spi_command+0xb4>
      default:
         spi_write(SD_MMC_SPI, 0xff);
8000245c:	e0 6b 00 ff 	mov	r11,255
80002460:	fe 7c 28 00 	mov	r12,-55296
80002464:	f0 1f 00 15 	mcall	800024b8 <sd_mmc_spi_command+0x104>
  }

  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
80002468:	30 08       	mov	r8,0
8000246a:	ef 68 ff ff 	st.b	r7[-1],r8
  r1    = 0xFF;
8000246e:	49 49       	lddpc	r9,800024bc <sd_mmc_spi_command+0x108>
80002470:	3f f8       	mov	r8,-1
80002472:	b2 88       	st.b	r9[0x0],r8
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002474:	c0 d8       	rjmp	8000248e <sd_mmc_spi_command+0xda>
  {
    retry++;
80002476:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000247a:	2f f8       	sub	r8,-1
8000247c:	ef 68 ff ff 	st.b	r7[-1],r8
    if(retry > 10) break;
80002480:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002484:	30 a8       	mov	r8,10
80002486:	f0 09 18 00 	cp.b	r9,r8
8000248a:	e0 8b 00 10 	brhi	800024aa <sd_mmc_spi_command+0xf6>
  // end command
  // wait for response
  // if more than 8 retries, card has timed-out and return the received 0xFF
  retry = 0;
  r1    = 0xFF;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
8000248e:	e0 6c 00 ff 	mov	r12,255
80002492:	f0 1f 00 0c 	mcall	800024c0 <sd_mmc_spi_command+0x10c>
80002496:	18 98       	mov	r8,r12
80002498:	48 99       	lddpc	r9,800024bc <sd_mmc_spi_command+0x108>
8000249a:	b2 88       	st.b	r9[0x0],r8
8000249c:	48 88       	lddpc	r8,800024bc <sd_mmc_spi_command+0x108>
8000249e:	11 89       	ld.ub	r9,r8[0x0]
800024a0:	3f f8       	mov	r8,-1
800024a2:	f0 09 18 00 	cp.b	r9,r8
800024a6:	ce 80       	breq	80002476 <sd_mmc_spi_command+0xc2>
800024a8:	c0 28       	rjmp	800024ac <sd_mmc_spi_command+0xf8>
  {
    retry++;
    if(retry > 10) break;
800024aa:	d7 03       	nop
  }
  return r1;
800024ac:	48 48       	lddpc	r8,800024bc <sd_mmc_spi_command+0x108>
800024ae:	11 88       	ld.ub	r8,r8[0x0]
}
800024b0:	10 9c       	mov	r12,r8
800024b2:	2f dd       	sub	sp,-12
800024b4:	e3 cd 80 80 	ldm	sp++,r7,pc
800024b8:	80 00       	ld.sh	r0,r0[0x0]
800024ba:	34 3e       	mov	lr,67
800024bc:	00 00       	add	r0,r0
800024be:	0f 08       	ld.w	r8,r7++
800024c0:	80 00       	ld.sh	r0,r0[0x0]
800024c2:	24 c4       	sub	r4,76

800024c4 <sd_mmc_spi_send_and_read>:
//! @param  data_to_send   byte to send over SPI
//!
//! @return uint8_t
//!   Byte read from the slave
uint8_t sd_mmc_spi_send_and_read(uint8_t data_to_send)
{
800024c4:	eb cd 40 80 	pushm	r7,lr
800024c8:	1a 97       	mov	r7,sp
800024ca:	20 2d       	sub	sp,8
800024cc:	18 98       	mov	r8,r12
800024ce:	ef 68 ff f8 	st.b	r7[-8],r8
   unsigned short data_read;
   spi_write(SD_MMC_SPI, data_to_send);
800024d2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800024d6:	10 9b       	mov	r11,r8
800024d8:	fe 7c 28 00 	mov	r12,-55296
800024dc:	f0 1f 00 0b 	mcall	80002508 <sd_mmc_spi_send_and_read+0x44>
   if( SPI_ERROR_TIMEOUT == spi_read(SD_MMC_SPI, &data_read) )
800024e0:	ee c8 00 02 	sub	r8,r7,2
800024e4:	10 9b       	mov	r11,r8
800024e6:	fe 7c 28 00 	mov	r12,-55296
800024ea:	f0 1f 00 09 	mcall	8000250c <sd_mmc_spi_send_and_read+0x48>
800024ee:	18 98       	mov	r8,r12
800024f0:	58 18       	cp.w	r8,1
800024f2:	c0 41       	brne	800024fa <sd_mmc_spi_send_and_read+0x36>
     return 0xFF;
800024f4:	e0 68 00 ff 	mov	r8,255
800024f8:	c0 48       	rjmp	80002500 <sd_mmc_spi_send_and_read+0x3c>
   return data_read;
800024fa:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800024fe:	5c 58       	castu.b	r8
}
80002500:	10 9c       	mov	r12,r8
80002502:	2f ed       	sub	sp,-8
80002504:	e3 cd 80 80 	ldm	sp++,r7,pc
80002508:	80 00       	ld.sh	r0,r0[0x0]
8000250a:	34 3e       	mov	lr,67
8000250c:	80 00       	ld.sh	r0,r0[0x0]
8000250e:	34 96       	mov	r6,73

80002510 <sd_mmc_spi_get_if>:
//!                true
//!                SD_MMC


int sd_mmc_spi_get_if(void)
{
80002510:	eb cd 40 80 	pushm	r7,lr
80002514:	1a 97       	mov	r7,sp
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002516:	f0 1f 00 31 	mcall	800025d8 <sd_mmc_spi_get_if+0xc8>
8000251a:	18 98       	mov	r8,r12
8000251c:	ec 18 00 01 	eorl	r8,0x1
80002520:	5c 58       	castu.b	r8
80002522:	c0 30       	breq	80002528 <sd_mmc_spi_get_if+0x18>
    return SD_FAILURE;
80002524:	3f f8       	mov	r8,-1
80002526:	c5 58       	rjmp	800025d0 <sd_mmc_spi_get_if+0xc0>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002528:	30 1b       	mov	r11,1
8000252a:	fe 7c 28 00 	mov	r12,-55296
8000252e:	f0 1f 00 2c 	mcall	800025dc <sd_mmc_spi_get_if+0xcc>
  r1 = sd_mmc_spi_command(MMC_SEND_IF_COND, 0x000001AA);
80002532:	e0 6b 01 aa 	mov	r11,426
80002536:	30 8c       	mov	r12,8
80002538:	f0 1f 00 2a 	mcall	800025e0 <sd_mmc_spi_get_if+0xd0>
8000253c:	18 98       	mov	r8,r12
8000253e:	4a a9       	lddpc	r9,800025e4 <sd_mmc_spi_get_if+0xd4>
80002540:	b2 88       	st.b	r9[0x0],r8
  // check for valid response
  if((r1 & MMC_R1_ILLEGAL_COM) != 0) {
80002542:	4a 98       	lddpc	r8,800025e4 <sd_mmc_spi_get_if+0xd4>
80002544:	11 88       	ld.ub	r8,r8[0x0]
80002546:	e2 18 00 04 	andl	r8,0x4,COH
8000254a:	c0 80       	breq	8000255a <sd_mmc_spi_get_if+0x4a>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000254c:	30 1b       	mov	r11,1
8000254e:	fe 7c 28 00 	mov	r12,-55296
80002552:	f0 1f 00 26 	mcall	800025e8 <sd_mmc_spi_get_if+0xd8>
    return SD_MMC;
80002556:	30 08       	mov	r8,0
80002558:	c3 c8       	rjmp	800025d0 <sd_mmc_spi_get_if+0xc0>
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000255a:	e0 6c 00 ff 	mov	r12,255
8000255e:	f0 1f 00 24 	mcall	800025ec <sd_mmc_spi_get_if+0xdc>
80002562:	18 98       	mov	r8,r12
80002564:	4a 09       	lddpc	r9,800025e4 <sd_mmc_spi_get_if+0xd4>
80002566:	b2 88       	st.b	r9[0x0],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002568:	e0 6c 00 ff 	mov	r12,255
8000256c:	f0 1f 00 20 	mcall	800025ec <sd_mmc_spi_get_if+0xdc>
80002570:	18 98       	mov	r8,r12
80002572:	49 d9       	lddpc	r9,800025e4 <sd_mmc_spi_get_if+0xd4>
80002574:	b2 88       	st.b	r9[0x0],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002576:	e0 6c 00 ff 	mov	r12,255
8000257a:	f0 1f 00 1d 	mcall	800025ec <sd_mmc_spi_get_if+0xdc>
8000257e:	18 98       	mov	r8,r12
80002580:	49 99       	lddpc	r9,800025e4 <sd_mmc_spi_get_if+0xd4>
80002582:	b2 88       	st.b	r9[0x0],r8
  if((r1 & 0x01) == 0) {
80002584:	49 88       	lddpc	r8,800025e4 <sd_mmc_spi_get_if+0xd4>
80002586:	11 88       	ld.ub	r8,r8[0x0]
80002588:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000258c:	c0 81       	brne	8000259c <sd_mmc_spi_get_if+0x8c>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000258e:	30 1b       	mov	r11,1
80002590:	fe 7c 28 00 	mov	r12,-55296
80002594:	f0 1f 00 15 	mcall	800025e8 <sd_mmc_spi_get_if+0xd8>
    return SD_FAILURE;
80002598:	3f f8       	mov	r8,-1
8000259a:	c1 b8       	rjmp	800025d0 <sd_mmc_spi_get_if+0xc0>
  }
  r1 = sd_mmc_spi_send_and_read(0xFF);
8000259c:	e0 6c 00 ff 	mov	r12,255
800025a0:	f0 1f 00 13 	mcall	800025ec <sd_mmc_spi_get_if+0xdc>
800025a4:	18 98       	mov	r8,r12
800025a6:	49 09       	lddpc	r9,800025e4 <sd_mmc_spi_get_if+0xd4>
800025a8:	b2 88       	st.b	r9[0x0],r8
  if(r1 != 0xaa) {
800025aa:	48 f8       	lddpc	r8,800025e4 <sd_mmc_spi_get_if+0xd4>
800025ac:	11 89       	ld.ub	r9,r8[0x0]
800025ae:	3a a8       	mov	r8,-86
800025b0:	f0 09 18 00 	cp.b	r9,r8
800025b4:	c0 80       	breq	800025c4 <sd_mmc_spi_get_if+0xb4>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025b6:	30 1b       	mov	r11,1
800025b8:	fe 7c 28 00 	mov	r12,-55296
800025bc:	f0 1f 00 0b 	mcall	800025e8 <sd_mmc_spi_get_if+0xd8>
    return SD_FAILURE; /* wrong test pattern */
800025c0:	3f f8       	mov	r8,-1
800025c2:	c0 78       	rjmp	800025d0 <sd_mmc_spi_get_if+0xc0>
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800025c4:	30 1b       	mov	r11,1
800025c6:	fe 7c 28 00 	mov	r12,-55296
800025ca:	f0 1f 00 08 	mcall	800025e8 <sd_mmc_spi_get_if+0xd8>
  return true;
800025ce:	30 18       	mov	r8,1
}
800025d0:	10 9c       	mov	r12,r8
800025d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800025d6:	00 00       	add	r0,r0
800025d8:	80 00       	ld.sh	r0,r0[0x0]
800025da:	29 e0       	sub	r0,-98
800025dc:	80 00       	ld.sh	r0,r0[0x0]
800025de:	31 9c       	mov	r12,25
800025e0:	80 00       	ld.sh	r0,r0[0x0]
800025e2:	23 b4       	sub	r4,59
800025e4:	00 00       	add	r0,r0
800025e6:	0f 08       	ld.w	r8,r7++
800025e8:	80 00       	ld.sh	r0,r0[0x0]
800025ea:	32 34       	mov	r4,35
800025ec:	80 00       	ld.sh	r0,r0[0x0]
800025ee:	24 c4       	sub	r4,76

800025f0 <sd_mmc_spi_check_hc>:
//!           SD_CARD      Detected card is SD
//!           ERROR


int sd_mmc_spi_check_hc(void)
{
800025f0:	eb cd 40 80 	pushm	r7,lr
800025f4:	1a 97       	mov	r7,sp
800025f6:	20 1d       	sub	sp,4
  unsigned char hc_bit;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800025f8:	f0 1f 00 27 	mcall	80002694 <sd_mmc_spi_check_hc+0xa4>
800025fc:	18 98       	mov	r8,r12
800025fe:	ec 18 00 01 	eorl	r8,0x1
80002602:	5c 58       	castu.b	r8
80002604:	c0 30       	breq	8000260a <sd_mmc_spi_check_hc+0x1a>
    return SD_FAILURE;
80002606:	3f f8       	mov	r8,-1
80002608:	c4 18       	rjmp	8000268a <sd_mmc_spi_check_hc+0x9a>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
8000260a:	30 1b       	mov	r11,1
8000260c:	fe 7c 28 00 	mov	r12,-55296
80002610:	f0 1f 00 22 	mcall	80002698 <sd_mmc_spi_check_hc+0xa8>
  r1 = sd_mmc_spi_command(SD_READ_OCR, 0);
80002614:	30 0b       	mov	r11,0
80002616:	33 ac       	mov	r12,58
80002618:	f0 1f 00 21 	mcall	8000269c <sd_mmc_spi_check_hc+0xac>
8000261c:	18 98       	mov	r8,r12
8000261e:	4a 19       	lddpc	r9,800026a0 <sd_mmc_spi_check_hc+0xb0>
80002620:	b2 88       	st.b	r9[0x0],r8
  // check for valid response
  if(r1 != 0) {
80002622:	4a 08       	lddpc	r8,800026a0 <sd_mmc_spi_check_hc+0xb0>
80002624:	11 88       	ld.ub	r8,r8[0x0]
80002626:	58 08       	cp.w	r8,0
80002628:	c0 80       	breq	80002638 <sd_mmc_spi_check_hc+0x48>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
8000262a:	30 1b       	mov	r11,1
8000262c:	fe 7c 28 00 	mov	r12,-55296
80002630:	f0 1f 00 1d 	mcall	800026a4 <sd_mmc_spi_check_hc+0xb4>
    return SD_FAILURE;
80002634:	3f f8       	mov	r8,-1
80002636:	c2 a8       	rjmp	8000268a <sd_mmc_spi_check_hc+0x9a>
  }
  hc_bit = sd_mmc_spi_send_and_read(0xFF);
80002638:	e0 6c 00 ff 	mov	r12,255
8000263c:	f0 1f 00 1b 	mcall	800026a8 <sd_mmc_spi_check_hc+0xb8>
80002640:	18 98       	mov	r8,r12
80002642:	ef 68 ff ff 	st.b	r7[-1],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002646:	e0 6c 00 ff 	mov	r12,255
8000264a:	f0 1f 00 18 	mcall	800026a8 <sd_mmc_spi_check_hc+0xb8>
8000264e:	18 98       	mov	r8,r12
80002650:	49 49       	lddpc	r9,800026a0 <sd_mmc_spi_check_hc+0xb0>
80002652:	b2 88       	st.b	r9[0x0],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002654:	e0 6c 00 ff 	mov	r12,255
80002658:	f0 1f 00 14 	mcall	800026a8 <sd_mmc_spi_check_hc+0xb8>
8000265c:	18 98       	mov	r8,r12
8000265e:	49 19       	lddpc	r9,800026a0 <sd_mmc_spi_check_hc+0xb0>
80002660:	b2 88       	st.b	r9[0x0],r8
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002662:	e0 6c 00 ff 	mov	r12,255
80002666:	f0 1f 00 11 	mcall	800026a8 <sd_mmc_spi_check_hc+0xb8>
8000266a:	18 98       	mov	r8,r12
8000266c:	48 d9       	lddpc	r9,800026a0 <sd_mmc_spi_check_hc+0xb0>
8000266e:	b2 88       	st.b	r9[0x0],r8
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002670:	30 1b       	mov	r11,1
80002672:	fe 7c 28 00 	mov	r12,-55296
80002676:	f0 1f 00 0c 	mcall	800026a4 <sd_mmc_spi_check_hc+0xb4>
  if(hc_bit & 0x40) {
8000267a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000267e:	e2 18 00 40 	andl	r8,0x40,COH
80002682:	c0 30       	breq	80002688 <sd_mmc_spi_check_hc+0x98>
      return SDHC_CARD;
80002684:	30 18       	mov	r8,1
80002686:	c0 28       	rjmp	8000268a <sd_mmc_spi_check_hc+0x9a>
  }
  return 0;
80002688:	30 08       	mov	r8,0
}
8000268a:	10 9c       	mov	r12,r8
8000268c:	2f fd       	sub	sp,-4
8000268e:	e3 cd 80 80 	ldm	sp++,r7,pc
80002692:	00 00       	add	r0,r0
80002694:	80 00       	ld.sh	r0,r0[0x0]
80002696:	29 e0       	sub	r0,-98
80002698:	80 00       	ld.sh	r0,r0[0x0]
8000269a:	31 9c       	mov	r12,25
8000269c:	80 00       	ld.sh	r0,r0[0x0]
8000269e:	23 b4       	sub	r4,59
800026a0:	00 00       	add	r0,r0
800026a2:	0f 08       	ld.w	r8,r7++
800026a4:	80 00       	ld.sh	r0,r0[0x0]
800026a6:	32 34       	mov	r4,35
800026a8:	80 00       	ld.sh	r0,r0[0x0]
800026aa:	24 c4       	sub	r4,76

800026ac <sd_mmc_spi_get_csd>:
//! @param  buffer to fill
//!
//! @return bit
//!         true / false
bool sd_mmc_spi_get_csd(uint8_t *buffer)
{
800026ac:	eb cd 40 80 	pushm	r7,lr
800026b0:	1a 97       	mov	r7,sp
800026b2:	20 2d       	sub	sp,8
800026b4:	ef 4c ff f8 	st.w	r7[-8],r12
uint8_t retry;
unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
800026b8:	f0 1f 00 45 	mcall	800027cc <sd_mmc_spi_get_csd+0x120>
800026bc:	18 98       	mov	r8,r12
800026be:	ec 18 00 01 	eorl	r8,0x1
800026c2:	5c 58       	castu.b	r8
800026c4:	c0 30       	breq	800026ca <sd_mmc_spi_get_csd+0x1e>
    return false;
800026c6:	30 08       	mov	r8,0
800026c8:	c7 d8       	rjmp	800027c2 <sd_mmc_spi_get_csd+0x116>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
800026ca:	30 1b       	mov	r11,1
800026cc:	fe 7c 28 00 	mov	r12,-55296
800026d0:	f0 1f 00 40 	mcall	800027d0 <sd_mmc_spi_get_csd+0x124>
  // issue command
  r1 = sd_mmc_spi_command(MMC_SEND_CSD, 0);
800026d4:	30 0b       	mov	r11,0
800026d6:	30 9c       	mov	r12,9
800026d8:	f0 1f 00 3f 	mcall	800027d4 <sd_mmc_spi_get_csd+0x128>
800026dc:	18 98       	mov	r8,r12
800026de:	4b f9       	lddpc	r9,800027d8 <sd_mmc_spi_get_csd+0x12c>
800026e0:	b2 88       	st.b	r9[0x0],r8
  // check for valid response
  if(r1 != 0x00)
800026e2:	4b e8       	lddpc	r8,800027d8 <sd_mmc_spi_get_csd+0x12c>
800026e4:	11 88       	ld.ub	r8,r8[0x0]
800026e6:	58 08       	cp.w	r8,0
800026e8:	c0 b0       	breq	800026fe <sd_mmc_spi_get_csd+0x52>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800026ea:	30 1b       	mov	r11,1
800026ec:	fe 7c 28 00 	mov	r12,-55296
800026f0:	f0 1f 00 3b 	mcall	800027dc <sd_mmc_spi_get_csd+0x130>
    sd_mmc_spi_init_done = false;
800026f4:	4b b9       	lddpc	r9,800027e0 <sd_mmc_spi_get_csd+0x134>
800026f6:	30 08       	mov	r8,0
800026f8:	b2 88       	st.b	r9[0x0],r8
    return false;
800026fa:	30 08       	mov	r8,0
800026fc:	c6 38       	rjmp	800027c2 <sd_mmc_spi_get_csd+0x116>
  }
  // wait for block start
  retry = 0;
800026fe:	30 08       	mov	r8,0
80002700:	ef 68 ff ff 	st.b	r7[-1],r8
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
80002704:	c1 48       	rjmp	8000272c <sd_mmc_spi_get_csd+0x80>
  {
    if (retry > 8)
80002706:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000270a:	30 88       	mov	r8,8
8000270c:	f0 09 18 00 	cp.b	r9,r8
80002710:	e0 88 00 09 	brls	80002722 <sd_mmc_spi_get_csd+0x76>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002714:	30 1b       	mov	r11,1
80002716:	fe 7c 28 00 	mov	r12,-55296
8000271a:	f0 1f 00 31 	mcall	800027dc <sd_mmc_spi_get_csd+0x130>
      return false;
8000271e:	30 08       	mov	r8,0
80002720:	c5 18       	rjmp	800027c2 <sd_mmc_spi_get_csd+0x116>
    }
    retry++;
80002722:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80002726:	2f f8       	sub	r8,-1
80002728:	ef 68 ff ff 	st.b	r7[-1],r8
    sd_mmc_spi_init_done = false;
    return false;
  }
  // wait for block start
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != MMC_STARTBLOCK_READ)
8000272c:	e0 6c 00 ff 	mov	r12,255
80002730:	f0 1f 00 2d 	mcall	800027e4 <sd_mmc_spi_get_csd+0x138>
80002734:	18 98       	mov	r8,r12
80002736:	4a 99       	lddpc	r9,800027d8 <sd_mmc_spi_get_csd+0x12c>
80002738:	b2 88       	st.b	r9[0x0],r8
8000273a:	4a 88       	lddpc	r8,800027d8 <sd_mmc_spi_get_csd+0x12c>
8000273c:	11 89       	ld.ub	r9,r8[0x0]
8000273e:	3f e8       	mov	r8,-2
80002740:	f0 09 18 00 	cp.b	r9,r8
80002744:	ce 11       	brne	80002706 <sd_mmc_spi_get_csd+0x5a>
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
80002746:	30 08       	mov	r8,0
80002748:	ef 68 ff ff 	st.b	r7[-1],r8
8000274c:	c1 c8       	rjmp	80002784 <sd_mmc_spi_get_csd+0xd8>
  {
   spi_write(SD_MMC_SPI,0xFF);
8000274e:	e0 6b 00 ff 	mov	r11,255
80002752:	fe 7c 28 00 	mov	r12,-55296
80002756:	f0 1f 00 25 	mcall	800027e8 <sd_mmc_spi_get_csd+0x13c>
   spi_read(SD_MMC_SPI,&data_read);
8000275a:	ee c8 00 04 	sub	r8,r7,4
8000275e:	10 9b       	mov	r11,r8
80002760:	fe 7c 28 00 	mov	r12,-55296
80002764:	f0 1f 00 22 	mcall	800027ec <sd_mmc_spi_get_csd+0x140>
    buffer[retry] = data_read;
80002768:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000276c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002770:	10 09       	add	r9,r8
80002772:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80002776:	5c 58       	castu.b	r8
80002778:	b2 88       	st.b	r9[0x0],r8
      return false;
    }
    retry++;
  }
  // store valid data block
  for (retry = 0; retry <16; retry++)
8000277a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000277e:	2f f8       	sub	r8,-1
80002780:	ef 68 ff ff 	st.b	r7[-1],r8
80002784:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80002788:	30 f8       	mov	r8,15
8000278a:	f0 09 18 00 	cp.b	r9,r8
8000278e:	fe 98 ff e0 	brls	8000274e <sd_mmc_spi_get_csd+0xa2>
  {
   spi_write(SD_MMC_SPI,0xFF);
   spi_read(SD_MMC_SPI,&data_read);
    buffer[retry] = data_read;
  }
   spi_write(SD_MMC_SPI,0xFF);   // load CRC (not used)
80002792:	e0 6b 00 ff 	mov	r11,255
80002796:	fe 7c 28 00 	mov	r12,-55296
8000279a:	f0 1f 00 14 	mcall	800027e8 <sd_mmc_spi_get_csd+0x13c>
   spi_write(SD_MMC_SPI,0xFF);
8000279e:	e0 6b 00 ff 	mov	r11,255
800027a2:	fe 7c 28 00 	mov	r12,-55296
800027a6:	f0 1f 00 11 	mcall	800027e8 <sd_mmc_spi_get_csd+0x13c>
   spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
800027aa:	e0 6b 00 ff 	mov	r11,255
800027ae:	fe 7c 28 00 	mov	r12,-55296
800027b2:	f0 1f 00 0e 	mcall	800027e8 <sd_mmc_spi_get_csd+0x13c>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
800027b6:	30 1b       	mov	r11,1
800027b8:	fe 7c 28 00 	mov	r12,-55296
800027bc:	f0 1f 00 08 	mcall	800027dc <sd_mmc_spi_get_csd+0x130>
  return true;
800027c0:	30 18       	mov	r8,1
}
800027c2:	10 9c       	mov	r12,r8
800027c4:	2f ed       	sub	sp,-8
800027c6:	e3 cd 80 80 	ldm	sp++,r7,pc
800027ca:	00 00       	add	r0,r0
800027cc:	80 00       	ld.sh	r0,r0[0x0]
800027ce:	29 e0       	sub	r0,-98
800027d0:	80 00       	ld.sh	r0,r0[0x0]
800027d2:	31 9c       	mov	r12,25
800027d4:	80 00       	ld.sh	r0,r0[0x0]
800027d6:	23 b4       	sub	r4,59
800027d8:	00 00       	add	r0,r0
800027da:	0f 08       	ld.w	r8,r7++
800027dc:	80 00       	ld.sh	r0,r0[0x0]
800027de:	32 34       	mov	r4,35
800027e0:	00 00       	add	r0,r0
800027e2:	05 f8       	ld.ub	r8,r2[0x7]
800027e4:	80 00       	ld.sh	r0,r0[0x0]
800027e6:	24 c4       	sub	r4,76
800027e8:	80 00       	ld.sh	r0,r0[0x0]
800027ea:	34 3e       	mov	lr,67
800027ec:	80 00       	ld.sh	r0,r0[0x0]
800027ee:	34 96       	mov	r6,73

800027f0 <sd_mmc_spi_get_capacity>:
//!         [39]    == data[11] && 0x80
//!
//! @return bit
//!         true
void sd_mmc_spi_get_capacity(void)
{
800027f0:	eb cd 40 8f 	pushm	r0-r3,r7,lr
800027f4:	1a 97       	mov	r7,sp
800027f6:	20 2d       	sub	sp,8
  uint8_t  read_bl_len;
  uint8_t  erase_grp_size;
  uint8_t  erase_grp_mult;

  // extract variables from CSD array
  read_bl_len = csd[5] & 0x0F;
800027f8:	4f 4c       	lddpc	r12,800029c8 <sd_mmc_spi_get_capacity+0x1d8>
800027fa:	19 dc       	ld.ub	r12,r12[0x5]
800027fc:	f9 dc c0 04 	bfextu	r12,r12,0x0,0x4
80002800:	ef 6c ff fd 	st.b	r7[-3],r12
  if (card_type == SD_CARD_2_SDHC) {
80002804:	4f 2c       	lddpc	r12,800029cc <sd_mmc_spi_get_capacity+0x1dc>
80002806:	19 8e       	ld.ub	lr,r12[0x0]
80002808:	30 3c       	mov	r12,3
8000280a:	f8 0e 18 00 	cp.b	lr,r12
8000280e:	c4 71       	brne	8000289c <sd_mmc_spi_get_capacity+0xac>
    c_size = ((csd[7] & 0x3F) << 16) | (csd[8] << 8) | csd[9];
80002810:	4e ec       	lddpc	r12,800029c8 <sd_mmc_spi_get_capacity+0x1d8>
80002812:	19 fc       	ld.ub	r12,r12[0x7]
80002814:	f9 dc c0 06 	bfextu	r12,r12,0x0,0x6
80002818:	f8 0e 15 10 	lsl	lr,r12,0x10
8000281c:	4e bc       	lddpc	r12,800029c8 <sd_mmc_spi_get_capacity+0x1d8>
8000281e:	f9 3c 00 08 	ld.ub	r12,r12[8]
80002822:	a9 6c       	lsl	r12,0x8
80002824:	18 4e       	or	lr,r12
80002826:	4e 9c       	lddpc	r12,800029c8 <sd_mmc_spi_get_capacity+0x1d8>
80002828:	f9 3c 00 09 	ld.ub	r12,r12[9]
8000282c:	fd ec 10 0c 	or	r12,lr,r12
80002830:	ef 4c ff f8 	st.w	r7[-8],r12
    ++c_size;
80002834:	ee fc ff f8 	ld.w	r12,r7[-8]
80002838:	2f fc       	sub	r12,-1
8000283a:	ef 4c ff f8 	st.w	r7[-8],r12
    capacity = (uint64_t)c_size << 19;
8000283e:	ee f2 ff f8 	ld.w	r2,r7[-8]
80002842:	30 03       	mov	r3,0
80002844:	e4 0c 16 0d 	lsr	r12,r2,0xd
80002848:	e6 0b 15 13 	lsl	r11,r3,0x13
8000284c:	f9 eb 10 0b 	or	r11,r12,r11
80002850:	e4 0a 15 13 	lsl	r10,r2,0x13
80002854:	4d fc       	lddpc	r12,800029d0 <sd_mmc_spi_get_capacity+0x1e0>
80002856:	f8 eb 00 00 	st.d	r12[0],r10
    capacity_mult = (c_size >> 13) & 0x01FF;
8000285a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000285e:	ad 9a       	lsr	r10,0xd
80002860:	5c 8a       	casts.h	r10
80002862:	5c 8a       	casts.h	r10
80002864:	f5 da c0 09 	bfextu	r10,r10,0x0,0x9
80002868:	4d bb       	lddpc	r11,800029d4 <sd_mmc_spi_get_capacity+0x1e4>
8000286a:	b6 0a       	st.h	r11[0x0],r10
    sd_mmc_spi_last_block_address = (capacity >> 9) + (capacity_mult << 23) - 1;
8000286c:	4d 9a       	lddpc	r10,800029d0 <sd_mmc_spi_get_capacity+0x1e0>
8000286e:	f4 ea 00 00 	ld.d	r10,r10[0]
80002872:	f6 0c 15 17 	lsl	r12,r11,0x17
80002876:	f4 08 16 09 	lsr	r8,r10,0x9
8000287a:	f9 e8 10 08 	or	r8,r12,r8
8000287e:	f6 09 16 09 	lsr	r9,r11,0x9
80002882:	10 99       	mov	r9,r8
80002884:	4d 48       	lddpc	r8,800029d4 <sd_mmc_spi_get_capacity+0x1e4>
80002886:	90 08       	ld.sh	r8,r8[0x0]
80002888:	5c 88       	casts.h	r8
8000288a:	5c 78       	castu.h	r8
8000288c:	b7 78       	lsl	r8,0x17
8000288e:	f2 08 00 08 	add	r8,r9,r8
80002892:	f0 c9 00 01 	sub	r9,r8,1
80002896:	4d 18       	lddpc	r8,800029d8 <sd_mmc_spi_get_capacity+0x1e8>
80002898:	91 09       	st.w	r8[0x0],r9
8000289a:	c5 28       	rjmp	8000293e <sd_mmc_spi_get_capacity+0x14e>
  } else {
    c_size      = ((csd[6] & 0x03) << 10) + (csd[7] << 2) + ((csd[8] & 0xC0) >> 6);
8000289c:	4c b8       	lddpc	r8,800029c8 <sd_mmc_spi_get_capacity+0x1d8>
8000289e:	11 e8       	ld.ub	r8,r8[0x6]
800028a0:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800028a4:	f0 09 15 0a 	lsl	r9,r8,0xa
800028a8:	4c 88       	lddpc	r8,800029c8 <sd_mmc_spi_get_capacity+0x1d8>
800028aa:	11 f8       	ld.ub	r8,r8[0x7]
800028ac:	a3 68       	lsl	r8,0x2
800028ae:	10 09       	add	r9,r8
800028b0:	4c 68       	lddpc	r8,800029c8 <sd_mmc_spi_get_capacity+0x1d8>
800028b2:	f1 38 00 08 	ld.ub	r8,r8[8]
800028b6:	a7 88       	lsr	r8,0x6
800028b8:	5c 58       	castu.b	r8
800028ba:	f2 08 00 08 	add	r8,r9,r8
800028be:	ef 48 ff f8 	st.w	r7[-8],r8
    c_size_mult = ((csd[9] & 0x03) << 1) + ((csd[10] & 0x80) >> 7);
800028c2:	4c 28       	lddpc	r8,800029c8 <sd_mmc_spi_get_capacity+0x1d8>
800028c4:	f1 38 00 09 	ld.ub	r8,r8[9]
800028c8:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
800028cc:	a1 78       	lsl	r8,0x1
800028ce:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800028d2:	4b e8       	lddpc	r8,800029c8 <sd_mmc_spi_get_capacity+0x1d8>
800028d4:	f1 38 00 0a 	ld.ub	r8,r8[10]
800028d8:	a7 98       	lsr	r8,0x7
800028da:	5c 58       	castu.b	r8
800028dc:	f2 08 00 08 	add	r8,r9,r8
800028e0:	ef 68 ff fc 	st.b	r7[-4],r8
    sd_mmc_spi_last_block_address = ((uint32_t)(c_size + 1) * (uint32_t)((1 << (c_size_mult + 2)))) - 1;
800028e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800028e8:	f0 c9 ff ff 	sub	r9,r8,-1
800028ec:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800028f0:	2f e8       	sub	r8,-2
800028f2:	f2 08 09 48 	lsl	r8,r9,r8
800028f6:	f0 c9 00 01 	sub	r9,r8,1
800028fa:	4b 88       	lddpc	r8,800029d8 <sd_mmc_spi_get_capacity+0x1e8>
800028fc:	91 09       	st.w	r8[0x0],r9
    capacity = (1 << read_bl_len) * (sd_mmc_spi_last_block_address + 1);
800028fe:	4b 78       	lddpc	r8,800029d8 <sd_mmc_spi_get_capacity+0x1e8>
80002900:	70 08       	ld.w	r8,r8[0x0]
80002902:	f0 c9 ff ff 	sub	r9,r8,-1
80002906:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000290a:	f2 08 09 48 	lsl	r8,r9,r8
8000290e:	10 90       	mov	r0,r8
80002910:	30 01       	mov	r1,0
80002912:	4b 08       	lddpc	r8,800029d0 <sd_mmc_spi_get_capacity+0x1e0>
80002914:	f0 e1 00 00 	st.d	r8[0],r0
    capacity_mult = 0;
80002918:	4a f9       	lddpc	r9,800029d4 <sd_mmc_spi_get_capacity+0x1e4>
8000291a:	30 08       	mov	r8,0
8000291c:	b2 08       	st.h	r9[0x0],r8
    if (read_bl_len > 9) {  // 9 means 2^9 = 512b
8000291e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002922:	30 98       	mov	r8,9
80002924:	f0 09 18 00 	cp.b	r9,r8
80002928:	e0 88 00 0b 	brls	8000293e <sd_mmc_spi_get_capacity+0x14e>
      sd_mmc_spi_last_block_address <<= (read_bl_len - 9);
8000292c:	4a b8       	lddpc	r8,800029d8 <sd_mmc_spi_get_capacity+0x1e8>
8000292e:	70 09       	ld.w	r9,r8[0x0]
80002930:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80002934:	20 98       	sub	r8,9
80002936:	f2 08 09 49 	lsl	r9,r9,r8
8000293a:	4a 88       	lddpc	r8,800029d8 <sd_mmc_spi_get_capacity+0x1e8>
8000293c:	91 09       	st.w	r8[0x0],r9
    }
  }
  if (card_type == MMC_CARD)
8000293e:	4a 48       	lddpc	r8,800029cc <sd_mmc_spi_get_capacity+0x1dc>
80002940:	11 88       	ld.ub	r8,r8[0x0]
80002942:	58 08       	cp.w	r8,0
80002944:	c1 c1       	brne	8000297c <sd_mmc_spi_get_capacity+0x18c>
  {
    erase_grp_size = ((csd[10] & 0x7C) >> 2);
80002946:	4a 18       	lddpc	r8,800029c8 <sd_mmc_spi_get_capacity+0x1d8>
80002948:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000294c:	e2 18 00 7c 	andl	r8,0x7c,COH
80002950:	a3 48       	asr	r8,0x2
80002952:	ef 68 ff fe 	st.b	r7[-2],r8
    erase_grp_mult = ((csd[10] & 0x03) << 3) | ((csd[11] & 0xE0) >> 5);
80002956:	49 d8       	lddpc	r8,800029c8 <sd_mmc_spi_get_capacity+0x1d8>
80002958:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000295c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80002960:	a3 78       	lsl	r8,0x3
80002962:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80002966:	49 98       	lddpc	r8,800029c8 <sd_mmc_spi_get_capacity+0x1d8>
80002968:	f1 38 00 0b 	ld.ub	r8,r8[11]
8000296c:	a5 98       	lsr	r8,0x5
8000296e:	5c 58       	castu.b	r8
80002970:	f3 e8 10 08 	or	r8,r9,r8
80002974:	5c 58       	castu.b	r8
80002976:	ef 68 ff ff 	st.b	r7[-1],r8
8000297a:	c1 58       	rjmp	800029a4 <sd_mmc_spi_get_capacity+0x1b4>
  }
  else
  {
    erase_grp_size = ((csd[10] & 0x3F) << 1) + ((csd[11] & 0x80) >> 7);
8000297c:	49 38       	lddpc	r8,800029c8 <sd_mmc_spi_get_capacity+0x1d8>
8000297e:	f1 38 00 0a 	ld.ub	r8,r8[10]
80002982:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80002986:	a1 78       	lsl	r8,0x1
80002988:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000298c:	48 f8       	lddpc	r8,800029c8 <sd_mmc_spi_get_capacity+0x1d8>
8000298e:	f1 38 00 0b 	ld.ub	r8,r8[11]
80002992:	a7 98       	lsr	r8,0x7
80002994:	5c 58       	castu.b	r8
80002996:	f2 08 00 08 	add	r8,r9,r8
8000299a:	ef 68 ff fe 	st.b	r7[-2],r8
    erase_grp_mult = 0;
8000299e:	30 08       	mov	r8,0
800029a0:	ef 68 ff ff 	st.b	r7[-1],r8
  }
  erase_group_size = (erase_grp_size + 1) * (erase_grp_mult + 1);
800029a4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800029a8:	2f f8       	sub	r8,-1
800029aa:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800029ae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800029b2:	2f f8       	sub	r8,-1
800029b4:	5c 88       	casts.h	r8
800029b6:	f2 08 02 48 	mul	r8,r9,r8
800029ba:	5c 88       	casts.h	r8
800029bc:	48 89       	lddpc	r9,800029dc <sd_mmc_spi_get_capacity+0x1ec>
800029be:	b2 08       	st.h	r9[0x0],r8
}
800029c0:	2f ed       	sub	sp,-8
800029c2:	e3 cd 80 8f 	ldm	sp++,r0-r3,r7,pc
800029c6:	00 00       	add	r0,r0
800029c8:	00 00       	add	r0,r0
800029ca:	0e f8       	st.b	--r7,r8
800029cc:	00 00       	add	r0,r0
800029ce:	0e f6       	st.b	--r7,r6
800029d0:	00 00       	add	r0,r0
800029d2:	0e e4       	st.h	--r7,r4
800029d4:	00 00       	add	r0,r0
800029d6:	0e ec       	st.h	--r7,r12
800029d8:	00 00       	add	r0,r0
800029da:	0e f0       	st.b	--r7,r0
800029dc:	00 00       	add	r0,r0
800029de:	0e ee       	st.h	--r7,lr

800029e0 <sd_mmc_spi_wait_not_busy>:
//! @brief This function waits until the SD/MMC is not busy.
//!
//! @return bit
//!          true when card is not busy
bool sd_mmc_spi_wait_not_busy(void)
{
800029e0:	eb cd 40 80 	pushm	r7,lr
800029e4:	1a 97       	mov	r7,sp
800029e6:	20 1d       	sub	sp,4
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
800029e8:	30 1b       	mov	r11,1
800029ea:	fe 7c 28 00 	mov	r12,-55296
800029ee:	f0 1f 00 18 	mcall	80002a4c <sd_mmc_spi_wait_not_busy+0x6c>
  retry = 0;
800029f2:	30 08       	mov	r8,0
800029f4:	ef 48 ff fc 	st.w	r7[-4],r8
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
800029f8:	c1 28       	rjmp	80002a1c <sd_mmc_spi_wait_not_busy+0x3c>
  {
    retry++;
800029fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029fe:	2f f8       	sub	r8,-1
80002a00:	ef 48 ff fc 	st.w	r7[-4],r8
    if (retry == 200000)
80002a04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002a08:	e2 58 0d 40 	cp.w	r8,200000
80002a0c:	c0 81       	brne	80002a1c <sd_mmc_spi_wait_not_busy+0x3c>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002a0e:	30 1b       	mov	r11,1
80002a10:	fe 7c 28 00 	mov	r12,-55296
80002a14:	f0 1f 00 0f 	mcall	80002a50 <sd_mmc_spi_wait_not_busy+0x70>
      return false;
80002a18:	30 08       	mov	r8,0
80002a1a:	c1 48       	rjmp	80002a42 <sd_mmc_spi_wait_not_busy+0x62>
  uint32_t retry;

  // Select the SD_MMC memory gl_ptr_mem points to
  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
  retry = 0;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) != 0xFF)
80002a1c:	e0 6c 00 ff 	mov	r12,255
80002a20:	f0 1f 00 0d 	mcall	80002a54 <sd_mmc_spi_wait_not_busy+0x74>
80002a24:	18 98       	mov	r8,r12
80002a26:	48 d9       	lddpc	r9,80002a58 <sd_mmc_spi_wait_not_busy+0x78>
80002a28:	b2 88       	st.b	r9[0x0],r8
80002a2a:	48 c8       	lddpc	r8,80002a58 <sd_mmc_spi_wait_not_busy+0x78>
80002a2c:	11 89       	ld.ub	r9,r8[0x0]
80002a2e:	3f f8       	mov	r8,-1
80002a30:	f0 09 18 00 	cp.b	r9,r8
80002a34:	ce 31       	brne	800029fa <sd_mmc_spi_wait_not_busy+0x1a>
    {
      spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
      return false;
    }
  }
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002a36:	30 1b       	mov	r11,1
80002a38:	fe 7c 28 00 	mov	r12,-55296
80002a3c:	f0 1f 00 05 	mcall	80002a50 <sd_mmc_spi_wait_not_busy+0x70>
  return true;
80002a40:	30 18       	mov	r8,1
}
80002a42:	10 9c       	mov	r12,r8
80002a44:	2f fd       	sub	sp,-4
80002a46:	e3 cd 80 80 	ldm	sp++,r7,pc
80002a4a:	00 00       	add	r0,r0
80002a4c:	80 00       	ld.sh	r0,r0[0x0]
80002a4e:	31 9c       	mov	r12,25
80002a50:	80 00       	ld.sh	r0,r0[0x0]
80002a52:	32 34       	mov	r4,35
80002a54:	80 00       	ld.sh	r0,r0[0x0]
80002a56:	24 c4       	sub	r4,76
80002a58:	00 00       	add	r0,r0
80002a5a:	0f 08       	ld.w	r8,r7++

80002a5c <sd_mmc_spi_check_presence>:
//!
//! @return bit
//!   The memory is present (true)
//!   The memory does not respond (disconnected) (false)
bool sd_mmc_spi_check_presence(void)
{
80002a5c:	eb cd 40 80 	pushm	r7,lr
80002a60:	1a 97       	mov	r7,sp
80002a62:	20 1d       	sub	sp,4
  uint16_t retry;

  retry = 0;
80002a64:	30 08       	mov	r8,0
80002a66:	ef 58 ff fe 	st.h	r7[-2],r8
  if (sd_mmc_spi_init_done == false)
80002a6a:	4a 08       	lddpc	r8,80002ae8 <sd_mmc_spi_check_presence+0x8c>
80002a6c:	11 88       	ld.ub	r8,r8[0x0]
80002a6e:	ec 18 00 01 	eorl	r8,0x1
80002a72:	5c 58       	castu.b	r8
80002a74:	c2 50       	breq	80002abe <sd_mmc_spi_check_presence+0x62>
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002a76:	c1 58       	rjmp	80002aa0 <sd_mmc_spi_check_presence+0x44>
    {
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
80002a78:	e0 6b 00 ff 	mov	r11,255
80002a7c:	fe 7c 28 00 	mov	r12,-55296
80002a80:	f0 1f 00 1b 	mcall	80002aec <sd_mmc_spi_check_presence+0x90>
      retry++;
80002a84:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002a88:	2f f8       	sub	r8,-1
80002a8a:	ef 58 ff fe 	st.h	r7[-2],r8
      if (retry > 10)
80002a8e:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80002a92:	30 a8       	mov	r8,10
80002a94:	f0 09 19 00 	cp.h	r9,r8
80002a98:	e0 88 00 04 	brls	80002aa0 <sd_mmc_spi_check_presence+0x44>
        return false;
80002a9c:	30 08       	mov	r8,0
80002a9e:	c2 18       	rjmp	80002ae0 <sd_mmc_spi_check_presence+0x84>
  retry = 0;
  if (sd_mmc_spi_init_done == false)
  {
    // If memory is not initialized, try to initialize it (CMD0)
    // If no valid response, there is no card
    while ((r1 = sd_mmc_spi_send_command(MMC_GO_IDLE_STATE, 0)) != 0x01)
80002aa0:	30 0b       	mov	r11,0
80002aa2:	30 0c       	mov	r12,0
80002aa4:	f0 1f 00 13 	mcall	80002af0 <sd_mmc_spi_check_presence+0x94>
80002aa8:	18 98       	mov	r8,r12
80002aaa:	49 39       	lddpc	r9,80002af4 <sd_mmc_spi_check_presence+0x98>
80002aac:	b2 88       	st.b	r9[0x0],r8
80002aae:	49 28       	lddpc	r8,80002af4 <sd_mmc_spi_check_presence+0x98>
80002ab0:	11 89       	ld.ub	r9,r8[0x0]
80002ab2:	30 18       	mov	r8,1
80002ab4:	f0 09 18 00 	cp.b	r9,r8
80002ab8:	ce 01       	brne	80002a78 <sd_mmc_spi_check_presence+0x1c>
      spi_write(SD_MMC_SPI,0xFF);            // write dummy byte
      retry++;
      if (retry > 10)
        return false;
    }
    return true;
80002aba:	30 18       	mov	r8,1
80002abc:	c1 28       	rjmp	80002ae0 <sd_mmc_spi_check_presence+0x84>
  }
  else
  {
    // If memory already initialized, send a CRC command (CMD59) (supported only if card is initialized)
    if ((r1 = sd_mmc_spi_send_command(MMC_CRC_ON_OFF, 0)) == 0x00)
80002abe:	30 0b       	mov	r11,0
80002ac0:	33 bc       	mov	r12,59
80002ac2:	f0 1f 00 0c 	mcall	80002af0 <sd_mmc_spi_check_presence+0x94>
80002ac6:	18 98       	mov	r8,r12
80002ac8:	48 b9       	lddpc	r9,80002af4 <sd_mmc_spi_check_presence+0x98>
80002aca:	b2 88       	st.b	r9[0x0],r8
80002acc:	48 a8       	lddpc	r8,80002af4 <sd_mmc_spi_check_presence+0x98>
80002ace:	11 88       	ld.ub	r8,r8[0x0]
80002ad0:	58 08       	cp.w	r8,0
80002ad2:	c0 31       	brne	80002ad8 <sd_mmc_spi_check_presence+0x7c>
      return true;
80002ad4:	30 18       	mov	r8,1
80002ad6:	c0 58       	rjmp	80002ae0 <sd_mmc_spi_check_presence+0x84>
    sd_mmc_spi_init_done = false;
80002ad8:	48 49       	lddpc	r9,80002ae8 <sd_mmc_spi_check_presence+0x8c>
80002ada:	30 08       	mov	r8,0
80002adc:	b2 88       	st.b	r9[0x0],r8
    return false;
80002ade:	30 08       	mov	r8,0
  }
}
80002ae0:	10 9c       	mov	r12,r8
80002ae2:	2f fd       	sub	sp,-4
80002ae4:	e3 cd 80 80 	ldm	sp++,r7,pc
80002ae8:	00 00       	add	r0,r0
80002aea:	05 f8       	ld.ub	r8,r2[0x7]
80002aec:	80 00       	ld.sh	r0,r0[0x0]
80002aee:	34 3e       	mov	lr,67
80002af0:	80 00       	ld.sh	r0,r0[0x0]
80002af2:	23 5c       	sub	r12,53
80002af4:	00 00       	add	r0,r0
80002af6:	0f 08       	ld.w	r8,r7++

80002af8 <sd_mmc_spi_mem_check>:
//!
//! @return bit
//!   The memory is ready     -> true
//!   The memory check failed -> false
bool sd_mmc_spi_mem_check(void)
{
80002af8:	eb cd 40 80 	pushm	r7,lr
80002afc:	1a 97       	mov	r7,sp
  if (sd_mmc_spi_check_presence())
80002afe:	f0 1f 00 0b 	mcall	80002b28 <sd_mmc_spi_mem_check+0x30>
80002b02:	18 98       	mov	r8,r12
80002b04:	58 08       	cp.w	r8,0
80002b06:	c0 d0       	breq	80002b20 <sd_mmc_spi_mem_check+0x28>
  {
    if (sd_mmc_spi_init_done == false)
80002b08:	48 98       	lddpc	r8,80002b2c <sd_mmc_spi_mem_check+0x34>
80002b0a:	11 88       	ld.ub	r8,r8[0x0]
80002b0c:	ec 18 00 01 	eorl	r8,0x1
80002b10:	5c 58       	castu.b	r8
80002b12:	c0 50       	breq	80002b1c <sd_mmc_spi_mem_check+0x24>
    {
      return sd_mmc_spi_internal_init();
80002b14:	f0 1f 00 07 	mcall	80002b30 <sd_mmc_spi_mem_check+0x38>
80002b18:	18 98       	mov	r8,r12
80002b1a:	c0 48       	rjmp	80002b22 <sd_mmc_spi_mem_check+0x2a>
    }
    else
      return true;
80002b1c:	30 18       	mov	r8,1
80002b1e:	c0 28       	rjmp	80002b22 <sd_mmc_spi_mem_check+0x2a>
  }
  return false;
80002b20:	30 08       	mov	r8,0
}
80002b22:	10 9c       	mov	r12,r8
80002b24:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b28:	80 00       	ld.sh	r0,r0[0x0]
80002b2a:	2a 5c       	sub	r12,-91
80002b2c:	00 00       	add	r0,r0
80002b2e:	05 f8       	ld.ub	r8,r2[0x7]
80002b30:	80 00       	ld.sh	r0,r0[0x0]
80002b32:	20 10       	sub	r0,1

80002b34 <sd_mmc_spi_read_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_read_open (uint32_t pos)
{
80002b34:	eb cd 40 80 	pushm	r7,lr
80002b38:	1a 97       	mov	r7,sp
80002b3a:	20 1d       	sub	sp,4
80002b3c:	ef 4c ff fc 	st.w	r7[-4],r12
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9;        // gl_ptr_mem = pos * 512
80002b40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b44:	f0 09 15 09 	lsl	r9,r8,0x9
80002b48:	48 58       	lddpc	r8,80002b5c <sd_mmc_spi_read_open+0x28>
80002b4a:	91 09       	st.w	r8[0x0],r9

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
80002b4c:	f0 1f 00 05 	mcall	80002b60 <sd_mmc_spi_read_open+0x2c>
80002b50:	18 98       	mov	r8,r12
}
80002b52:	10 9c       	mov	r12,r8
80002b54:	2f fd       	sub	sp,-4
80002b56:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b5a:	00 00       	add	r0,r0
80002b5c:	00 00       	add	r0,r0
80002b5e:	05 e0       	ld.ub	r0,r2[0x6]
80002b60:	80 00       	ld.sh	r0,r0[0x0]
80002b62:	29 e0       	sub	r0,-98

80002b64 <sd_mmc_spi_read_close>:

//!
//! @brief This function unselects the current SD_MMC memory.
//!
bool sd_mmc_spi_read_close (void)
{
80002b64:	eb cd 40 80 	pushm	r7,lr
80002b68:	1a 97       	mov	r7,sp
  if (false == sd_mmc_spi_wait_not_busy())
80002b6a:	f0 1f 00 07 	mcall	80002b84 <sd_mmc_spi_read_close+0x20>
80002b6e:	18 98       	mov	r8,r12
80002b70:	ec 18 00 01 	eorl	r8,0x1
80002b74:	5c 58       	castu.b	r8
80002b76:	c0 30       	breq	80002b7c <sd_mmc_spi_read_close+0x18>
    return false;
80002b78:	30 08       	mov	r8,0
80002b7a:	c0 28       	rjmp	80002b7e <sd_mmc_spi_read_close+0x1a>
  return true;
80002b7c:	30 18       	mov	r8,1
}
80002b7e:	10 9c       	mov	r12,r8
80002b80:	e3 cd 80 80 	ldm	sp++,r7,pc
80002b84:	80 00       	ld.sh	r0,r0[0x0]
80002b86:	29 e0       	sub	r0,-98

80002b88 <sd_mmc_spi_write_open>:
//! @param  pos   Sector address
//!
//! @return bit
//!   The open succeeded      -> true
bool sd_mmc_spi_write_open (uint32_t pos)
{
80002b88:	eb cd 40 80 	pushm	r7,lr
80002b8c:	1a 97       	mov	r7,sp
80002b8e:	20 1d       	sub	sp,4
80002b90:	ef 4c ff fc 	st.w	r7[-4],r12
  // Set the global memory ptr at a Byte address.
  gl_ptr_mem = pos << 9; // gl_ptr_mem = pos * 512
80002b94:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b98:	f0 09 15 09 	lsl	r9,r8,0x9
80002b9c:	48 58       	lddpc	r8,80002bb0 <sd_mmc_spi_write_open+0x28>
80002b9e:	91 09       	st.w	r8[0x0],r9

  // wait for MMC not busy
  return sd_mmc_spi_wait_not_busy();
80002ba0:	f0 1f 00 05 	mcall	80002bb4 <sd_mmc_spi_write_open+0x2c>
80002ba4:	18 98       	mov	r8,r12
}
80002ba6:	10 9c       	mov	r12,r8
80002ba8:	2f fd       	sub	sp,-4
80002baa:	e3 cd 80 80 	ldm	sp++,r7,pc
80002bae:	00 00       	add	r0,r0
80002bb0:	00 00       	add	r0,r0
80002bb2:	05 e0       	ld.ub	r0,r2[0x6]
80002bb4:	80 00       	ld.sh	r0,r0[0x0]
80002bb6:	29 e0       	sub	r0,-98

80002bb8 <sd_mmc_spi_write_close>:
//!
//! @brief This function fills the end of the logical sector (512B) and launch
//! page programming.
//!
void sd_mmc_spi_write_close (void)
{
80002bb8:	eb cd 40 80 	pushm	r7,lr
80002bbc:	1a 97       	mov	r7,sp

}
80002bbe:	e3 cd 80 80 	ldm	sp++,r7,pc
80002bc2:	d7 03       	nop

80002bc4 <sd_mmc_spi_read_sector_to_ram>:
//! @return bit
//!   The read succeeded   -> true
//!   The read failed (bad address, etc.)  -> false
//!/
bool sd_mmc_spi_read_sector_to_ram(void *ram)
{
80002bc4:	eb cd 40 80 	pushm	r7,lr
80002bc8:	1a 97       	mov	r7,sp
80002bca:	20 4d       	sub	sp,16
80002bcc:	ef 4c ff f0 	st.w	r7[-16],r12
  uint8_t *_ram = ram;
80002bd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80002bd4:	ef 48 ff f8 	st.w	r7[-8],r8
  uint16_t  i;
  uint16_t  read_time_out;
  unsigned short data_read;
  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002bd8:	f0 1f 00 5e 	mcall	80002d50 <sd_mmc_spi_read_sector_to_ram+0x18c>
80002bdc:	18 98       	mov	r8,r12
80002bde:	ec 18 00 01 	eorl	r8,0x1
80002be2:	5c 58       	castu.b	r8
80002be4:	c0 30       	breq	80002bea <sd_mmc_spi_read_sector_to_ram+0x26>
    return false;
80002be6:	30 08       	mov	r8,0
80002be8:	ca f8       	rjmp	80002d46 <sd_mmc_spi_read_sector_to_ram+0x182>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002bea:	30 1b       	mov	r11,1
80002bec:	fe 7c 28 00 	mov	r12,-55296
80002bf0:	f0 1f 00 59 	mcall	80002d54 <sd_mmc_spi_read_sector_to_ram+0x190>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002bf4:	4d 98       	lddpc	r8,80002d58 <sd_mmc_spi_read_sector_to_ram+0x194>
80002bf6:	11 89       	ld.ub	r9,r8[0x0]
80002bf8:	30 38       	mov	r8,3
80002bfa:	f0 09 18 00 	cp.b	r9,r8
80002bfe:	c0 c1       	brne	80002c16 <sd_mmc_spi_read_sector_to_ram+0x52>
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem>>9);
80002c00:	4d 78       	lddpc	r8,80002d5c <sd_mmc_spi_read_sector_to_ram+0x198>
80002c02:	70 08       	ld.w	r8,r8[0x0]
80002c04:	a9 98       	lsr	r8,0x9
80002c06:	10 9b       	mov	r11,r8
80002c08:	31 1c       	mov	r12,17
80002c0a:	f0 1f 00 56 	mcall	80002d60 <sd_mmc_spi_read_sector_to_ram+0x19c>
80002c0e:	18 98       	mov	r8,r12
80002c10:	4d 59       	lddpc	r9,80002d64 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80002c12:	b2 88       	st.b	r9[0x0],r8
80002c14:	c0 a8       	rjmp	80002c28 <sd_mmc_spi_read_sector_to_ram+0x64>
  } else {
    r1 = sd_mmc_spi_command(MMC_READ_SINGLE_BLOCK, gl_ptr_mem);
80002c16:	4d 28       	lddpc	r8,80002d5c <sd_mmc_spi_read_sector_to_ram+0x198>
80002c18:	70 08       	ld.w	r8,r8[0x0]
80002c1a:	10 9b       	mov	r11,r8
80002c1c:	31 1c       	mov	r12,17
80002c1e:	f0 1f 00 51 	mcall	80002d60 <sd_mmc_spi_read_sector_to_ram+0x19c>
80002c22:	18 98       	mov	r8,r12
80002c24:	4d 09       	lddpc	r9,80002d64 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80002c26:	b2 88       	st.b	r9[0x0],r8
  }

  // check for valid response
  if (r1 != 0x00)
80002c28:	4c f8       	lddpc	r8,80002d64 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80002c2a:	11 88       	ld.ub	r8,r8[0x0]
80002c2c:	58 08       	cp.w	r8,0
80002c2e:	c0 80       	breq	80002c3e <sd_mmc_spi_read_sector_to_ram+0x7a>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002c30:	30 1b       	mov	r11,1
80002c32:	fe 7c 28 00 	mov	r12,-55296
80002c36:	f0 1f 00 4d 	mcall	80002d68 <sd_mmc_spi_read_sector_to_ram+0x1a4>
    return false;
80002c3a:	30 08       	mov	r8,0
80002c3c:	c8 58       	rjmp	80002d46 <sd_mmc_spi_read_sector_to_ram+0x182>
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
80002c3e:	e0 68 75 30 	mov	r8,30000
80002c42:	ef 58 ff fe 	st.h	r7[-2],r8
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002c46:	c1 38       	rjmp	80002c6c <sd_mmc_spi_read_sector_to_ram+0xa8>
  {
     read_time_out--;
80002c48:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002c4c:	20 18       	sub	r8,1
80002c4e:	ef 58 ff fe 	st.h	r7[-2],r8
     if (read_time_out == 0)   // TIME-OUT
80002c52:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80002c56:	30 08       	mov	r8,0
80002c58:	f0 09 19 00 	cp.h	r9,r8
80002c5c:	c0 81       	brne	80002c6c <sd_mmc_spi_read_sector_to_ram+0xa8>
     {
       spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS); // unselect SD_MMC_SPI
80002c5e:	30 1b       	mov	r11,1
80002c60:	fe 7c 28 00 	mov	r12,-55296
80002c64:	f0 1f 00 41 	mcall	80002d68 <sd_mmc_spi_read_sector_to_ram+0x1a4>
       return false;
80002c68:	30 08       	mov	r8,0
80002c6a:	c6 e8       	rjmp	80002d46 <sd_mmc_spi_read_sector_to_ram+0x182>
    return false;
  }

  // wait for token (may be a datablock start token OR a data error token !)
  read_time_out = 30000;
  while((r1 = sd_mmc_spi_send_and_read(0xFF)) == 0xFF)
80002c6c:	e0 6c 00 ff 	mov	r12,255
80002c70:	f0 1f 00 3f 	mcall	80002d6c <sd_mmc_spi_read_sector_to_ram+0x1a8>
80002c74:	18 98       	mov	r8,r12
80002c76:	4b c9       	lddpc	r9,80002d64 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80002c78:	b2 88       	st.b	r9[0x0],r8
80002c7a:	4b b8       	lddpc	r8,80002d64 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80002c7c:	11 89       	ld.ub	r9,r8[0x0]
80002c7e:	3f f8       	mov	r8,-1
80002c80:	f0 09 18 00 	cp.b	r9,r8
80002c84:	ce 20       	breq	80002c48 <sd_mmc_spi_read_sector_to_ram+0x84>
       return false;
     }
  }

  // check token
  if (r1 != MMC_STARTBLOCK_READ)
80002c86:	4b 88       	lddpc	r8,80002d64 <sd_mmc_spi_read_sector_to_ram+0x1a0>
80002c88:	11 89       	ld.ub	r9,r8[0x0]
80002c8a:	3f e8       	mov	r8,-2
80002c8c:	f0 09 18 00 	cp.b	r9,r8
80002c90:	c0 e0       	breq	80002cac <sd_mmc_spi_read_sector_to_ram+0xe8>
  {
    spi_write(SD_MMC_SPI,0xFF);
80002c92:	e0 6b 00 ff 	mov	r11,255
80002c96:	fe 7c 28 00 	mov	r12,-55296
80002c9a:	f0 1f 00 36 	mcall	80002d70 <sd_mmc_spi_read_sector_to_ram+0x1ac>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002c9e:	30 1b       	mov	r11,1
80002ca0:	fe 7c 28 00 	mov	r12,-55296
80002ca4:	f0 1f 00 31 	mcall	80002d68 <sd_mmc_spi_read_sector_to_ram+0x1a4>
    return false;
80002ca8:	30 08       	mov	r8,0
80002caa:	c4 e8       	rjmp	80002d46 <sd_mmc_spi_read_sector_to_ram+0x182>
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80002cac:	30 08       	mov	r8,0
80002cae:	ef 58 ff fc 	st.h	r7[-4],r8
80002cb2:	c1 e8       	rjmp	80002cee <sd_mmc_spi_read_sector_to_ram+0x12a>
  {
    spi_write(SD_MMC_SPI,0xFF);
80002cb4:	e0 6b 00 ff 	mov	r11,255
80002cb8:	fe 7c 28 00 	mov	r12,-55296
80002cbc:	f0 1f 00 2d 	mcall	80002d70 <sd_mmc_spi_read_sector_to_ram+0x1ac>
    spi_read(SD_MMC_SPI,&data_read);
80002cc0:	ee c8 00 0a 	sub	r8,r7,10
80002cc4:	10 9b       	mov	r11,r8
80002cc6:	fe 7c 28 00 	mov	r12,-55296
80002cca:	f0 1f 00 2b 	mcall	80002d74 <sd_mmc_spi_read_sector_to_ram+0x1b0>
    *_ram++=data_read;
80002cce:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002cd2:	5c 58       	castu.b	r8
80002cd4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002cd8:	b2 88       	st.b	r9[0x0],r8
80002cda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002cde:	2f f8       	sub	r8,-1
80002ce0:	ef 48 ff f8 	st.w	r7[-8],r8
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
    return false;
  }

  // store datablock
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80002ce4:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80002ce8:	2f f8       	sub	r8,-1
80002cea:	ef 58 ff fc 	st.h	r7[-4],r8
80002cee:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80002cf2:	e0 68 01 ff 	mov	r8,511
80002cf6:	f0 09 19 00 	cp.h	r9,r8
80002cfa:	fe 98 ff dd 	brls	80002cb4 <sd_mmc_spi_read_sector_to_ram+0xf0>
  {
    spi_write(SD_MMC_SPI,0xFF);
    spi_read(SD_MMC_SPI,&data_read);
    *_ram++=data_read;
  }
  gl_ptr_mem += 512;     // Update the memory pointer.
80002cfe:	49 88       	lddpc	r8,80002d5c <sd_mmc_spi_read_sector_to_ram+0x198>
80002d00:	70 08       	ld.w	r8,r8[0x0]
80002d02:	f0 c9 fe 00 	sub	r9,r8,-512
80002d06:	49 68       	lddpc	r8,80002d5c <sd_mmc_spi_read_sector_to_ram+0x198>
80002d08:	91 09       	st.w	r8[0x0],r9

  // load 16-bit CRC (ignored)
  spi_write(SD_MMC_SPI,0xFF);
80002d0a:	e0 6b 00 ff 	mov	r11,255
80002d0e:	fe 7c 28 00 	mov	r12,-55296
80002d12:	f0 1f 00 18 	mcall	80002d70 <sd_mmc_spi_read_sector_to_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);
80002d16:	e0 6b 00 ff 	mov	r11,255
80002d1a:	fe 7c 28 00 	mov	r12,-55296
80002d1e:	f0 1f 00 15 	mcall	80002d70 <sd_mmc_spi_read_sector_to_ram+0x1ac>

  // continue delivering some clock cycles
  spi_write(SD_MMC_SPI,0xFF);
80002d22:	e0 6b 00 ff 	mov	r11,255
80002d26:	fe 7c 28 00 	mov	r12,-55296
80002d2a:	f0 1f 00 12 	mcall	80002d70 <sd_mmc_spi_read_sector_to_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);
80002d2e:	e0 6b 00 ff 	mov	r11,255
80002d32:	fe 7c 28 00 	mov	r12,-55296
80002d36:	f0 1f 00 0f 	mcall	80002d70 <sd_mmc_spi_read_sector_to_ram+0x1ac>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002d3a:	30 1b       	mov	r11,1
80002d3c:	fe 7c 28 00 	mov	r12,-55296
80002d40:	f0 1f 00 0a 	mcall	80002d68 <sd_mmc_spi_read_sector_to_ram+0x1a4>

  return true;   // Read done.
80002d44:	30 18       	mov	r8,1
}
80002d46:	10 9c       	mov	r12,r8
80002d48:	2f cd       	sub	sp,-16
80002d4a:	e3 cd 80 80 	ldm	sp++,r7,pc
80002d4e:	00 00       	add	r0,r0
80002d50:	80 00       	ld.sh	r0,r0[0x0]
80002d52:	29 e0       	sub	r0,-98
80002d54:	80 00       	ld.sh	r0,r0[0x0]
80002d56:	31 9c       	mov	r12,25
80002d58:	00 00       	add	r0,r0
80002d5a:	0e f6       	st.b	--r7,r6
80002d5c:	00 00       	add	r0,r0
80002d5e:	05 e0       	ld.ub	r0,r2[0x6]
80002d60:	80 00       	ld.sh	r0,r0[0x0]
80002d62:	23 b4       	sub	r4,59
80002d64:	00 00       	add	r0,r0
80002d66:	0f 08       	ld.w	r8,r7++
80002d68:	80 00       	ld.sh	r0,r0[0x0]
80002d6a:	32 34       	mov	r4,35
80002d6c:	80 00       	ld.sh	r0,r0[0x0]
80002d6e:	24 c4       	sub	r4,76
80002d70:	80 00       	ld.sh	r0,r0[0x0]
80002d72:	34 3e       	mov	lr,67
80002d74:	80 00       	ld.sh	r0,r0[0x0]
80002d76:	34 96       	mov	r6,73

80002d78 <sd_mmc_spi_write_sector_from_ram>:
//! @return bit
//!   The write succeeded   -> true
//!   The write failed      -> false
//!
bool sd_mmc_spi_write_sector_from_ram(const void *ram)
{
80002d78:	eb cd 40 80 	pushm	r7,lr
80002d7c:	1a 97       	mov	r7,sp
80002d7e:	20 3d       	sub	sp,12
80002d80:	ef 4c ff f4 	st.w	r7[-12],r12
  const uint8_t *_ram = ram;
80002d84:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002d88:	ef 48 ff f8 	st.w	r7[-8],r8
  uint16_t i;

  // wait for MMC not busy
  if (false == sd_mmc_spi_wait_not_busy())
80002d8c:	f0 1f 00 5f 	mcall	80002f08 <sd_mmc_spi_write_sector_from_ram+0x190>
80002d90:	18 98       	mov	r8,r12
80002d92:	ec 18 00 01 	eorl	r8,0x1
80002d96:	5c 58       	castu.b	r8
80002d98:	c0 30       	breq	80002d9e <sd_mmc_spi_write_sector_from_ram+0x26>
    return false;
80002d9a:	30 08       	mov	r8,0
80002d9c:	cb 18       	rjmp	80002efe <sd_mmc_spi_write_sector_from_ram+0x186>

  spi_selectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);    // select SD_MMC_SPI
80002d9e:	30 1b       	mov	r11,1
80002da0:	fe 7c 28 00 	mov	r12,-55296
80002da4:	f0 1f 00 5a 	mcall	80002f0c <sd_mmc_spi_write_sector_from_ram+0x194>

  // issue command
  if(card_type == SD_CARD_2_SDHC) {
80002da8:	4d a8       	lddpc	r8,80002f10 <sd_mmc_spi_write_sector_from_ram+0x198>
80002daa:	11 89       	ld.ub	r9,r8[0x0]
80002dac:	30 38       	mov	r8,3
80002dae:	f0 09 18 00 	cp.b	r9,r8
80002db2:	c0 c1       	brne	80002dca <sd_mmc_spi_write_sector_from_ram+0x52>
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem>>9);
80002db4:	4d 88       	lddpc	r8,80002f14 <sd_mmc_spi_write_sector_from_ram+0x19c>
80002db6:	70 08       	ld.w	r8,r8[0x0]
80002db8:	a9 98       	lsr	r8,0x9
80002dba:	10 9b       	mov	r11,r8
80002dbc:	31 8c       	mov	r12,24
80002dbe:	f0 1f 00 57 	mcall	80002f18 <sd_mmc_spi_write_sector_from_ram+0x1a0>
80002dc2:	18 98       	mov	r8,r12
80002dc4:	4d 69       	lddpc	r9,80002f1c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80002dc6:	b2 88       	st.b	r9[0x0],r8
80002dc8:	c0 a8       	rjmp	80002ddc <sd_mmc_spi_write_sector_from_ram+0x64>
  } else {
    r1 = sd_mmc_spi_command(MMC_WRITE_BLOCK, gl_ptr_mem);
80002dca:	4d 38       	lddpc	r8,80002f14 <sd_mmc_spi_write_sector_from_ram+0x19c>
80002dcc:	70 08       	ld.w	r8,r8[0x0]
80002dce:	10 9b       	mov	r11,r8
80002dd0:	31 8c       	mov	r12,24
80002dd2:	f0 1f 00 52 	mcall	80002f18 <sd_mmc_spi_write_sector_from_ram+0x1a0>
80002dd6:	18 98       	mov	r8,r12
80002dd8:	4d 19       	lddpc	r9,80002f1c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80002dda:	b2 88       	st.b	r9[0x0],r8
  }

  // check for valid response
  if(r1 != 0x00)
80002ddc:	4d 08       	lddpc	r8,80002f1c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80002dde:	11 88       	ld.ub	r8,r8[0x0]
80002de0:	58 08       	cp.w	r8,0
80002de2:	c0 80       	breq	80002df2 <sd_mmc_spi_write_sector_from_ram+0x7a>
  {
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002de4:	30 1b       	mov	r11,1
80002de6:	fe 7c 28 00 	mov	r12,-55296
80002dea:	f0 1f 00 4e 	mcall	80002f20 <sd_mmc_spi_write_sector_from_ram+0x1a8>
    return false;
80002dee:	30 08       	mov	r8,0
80002df0:	c8 78       	rjmp	80002efe <sd_mmc_spi_write_sector_from_ram+0x186>
  }
  // send dummy
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction
80002df2:	e0 6b 00 ff 	mov	r11,255
80002df6:	fe 7c 28 00 	mov	r12,-55296
80002dfa:	f0 1f 00 4b 	mcall	80002f24 <sd_mmc_spi_write_sector_from_ram+0x1ac>

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
80002dfe:	e0 6b 00 fe 	mov	r11,254
80002e02:	fe 7c 28 00 	mov	r12,-55296
80002e06:	f0 1f 00 48 	mcall	80002f24 <sd_mmc_spi_write_sector_from_ram+0x1ac>
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80002e0a:	30 08       	mov	r8,0
80002e0c:	ef 58 ff fe 	st.h	r7[-2],r8
80002e10:	c1 38       	rjmp	80002e36 <sd_mmc_spi_write_sector_from_ram+0xbe>
  {
    spi_write(SD_MMC_SPI,*_ram++);
80002e12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002e16:	11 88       	ld.ub	r8,r8[0x0]
80002e18:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002e1c:	2f f9       	sub	r9,-1
80002e1e:	ef 49 ff f8 	st.w	r7[-8],r9
80002e22:	10 9b       	mov	r11,r8
80002e24:	fe 7c 28 00 	mov	r12,-55296
80002e28:	f0 1f 00 3f 	mcall	80002f24 <sd_mmc_spi_write_sector_from_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);   // give clock again to end transaction

  // send data start token
  spi_write(SD_MMC_SPI,MMC_STARTBLOCK_WRITE);
  // write data
  for(i=0;i<MMC_SECTOR_SIZE;i++)
80002e2c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002e30:	2f f8       	sub	r8,-1
80002e32:	ef 58 ff fe 	st.h	r7[-2],r8
80002e36:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80002e3a:	e0 68 01 ff 	mov	r8,511
80002e3e:	f0 09 19 00 	cp.h	r9,r8
80002e42:	fe 98 ff e8 	brls	80002e12 <sd_mmc_spi_write_sector_from_ram+0x9a>
  {
    spi_write(SD_MMC_SPI,*_ram++);
  }

  spi_write(SD_MMC_SPI,0xFF);    // send CRC (field required but value ignored)
80002e46:	e0 6b 00 ff 	mov	r11,255
80002e4a:	fe 7c 28 00 	mov	r12,-55296
80002e4e:	f0 1f 00 36 	mcall	80002f24 <sd_mmc_spi_write_sector_from_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);
80002e52:	e0 6b 00 ff 	mov	r11,255
80002e56:	fe 7c 28 00 	mov	r12,-55296
80002e5a:	f0 1f 00 33 	mcall	80002f24 <sd_mmc_spi_write_sector_from_ram+0x1ac>

  // read data response token
  r1 = sd_mmc_spi_send_and_read(0xFF);
80002e5e:	e0 6c 00 ff 	mov	r12,255
80002e62:	f0 1f 00 32 	mcall	80002f28 <sd_mmc_spi_write_sector_from_ram+0x1b0>
80002e66:	18 98       	mov	r8,r12
80002e68:	4a d9       	lddpc	r9,80002f1c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80002e6a:	b2 88       	st.b	r9[0x0],r8
  if( (r1&MMC_DR_MASK) != MMC_DR_ACCEPT)
80002e6c:	4a c8       	lddpc	r8,80002f1c <sd_mmc_spi_write_sector_from_ram+0x1a4>
80002e6e:	11 88       	ld.ub	r8,r8[0x0]
80002e70:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80002e74:	58 58       	cp.w	r8,5
80002e76:	c1 40       	breq	80002e9e <sd_mmc_spi_write_sector_from_ram+0x126>
  {
    spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80002e78:	e0 6b 00 ff 	mov	r11,255
80002e7c:	fe 7c 28 00 	mov	r12,-55296
80002e80:	f0 1f 00 29 	mcall	80002f24 <sd_mmc_spi_write_sector_from_ram+0x1ac>
    spi_write(SD_MMC_SPI,0xFF);
80002e84:	e0 6b 00 ff 	mov	r11,255
80002e88:	fe 7c 28 00 	mov	r12,-55296
80002e8c:	f0 1f 00 26 	mcall	80002f24 <sd_mmc_spi_write_sector_from_ram+0x1ac>
    spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);
80002e90:	30 1b       	mov	r11,1
80002e92:	fe 7c 28 00 	mov	r12,-55296
80002e96:	f0 1f 00 23 	mcall	80002f20 <sd_mmc_spi_write_sector_from_ram+0x1a8>
    return false;         // return ERROR byte
80002e9a:	30 08       	mov	r8,0
80002e9c:	c3 18       	rjmp	80002efe <sd_mmc_spi_write_sector_from_ram+0x186>
  }

  spi_write(SD_MMC_SPI,0xFF);    // send dummy bytes
80002e9e:	e0 6b 00 ff 	mov	r11,255
80002ea2:	fe 7c 28 00 	mov	r12,-55296
80002ea6:	f0 1f 00 20 	mcall	80002f24 <sd_mmc_spi_write_sector_from_ram+0x1ac>
  spi_write(SD_MMC_SPI,0xFF);
80002eaa:	e0 6b 00 ff 	mov	r11,255
80002eae:	fe 7c 28 00 	mov	r12,-55296
80002eb2:	f0 1f 00 1d 	mcall	80002f24 <sd_mmc_spi_write_sector_from_ram+0x1ac>

  // release chip select
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
80002eb6:	30 1b       	mov	r11,1
80002eb8:	fe 7c 28 00 	mov	r12,-55296
80002ebc:	f0 1f 00 19 	mcall	80002f20 <sd_mmc_spi_write_sector_from_ram+0x1a8>
  gl_ptr_mem += 512;        // Update the memory pointer.
80002ec0:	49 58       	lddpc	r8,80002f14 <sd_mmc_spi_write_sector_from_ram+0x19c>
80002ec2:	70 08       	ld.w	r8,r8[0x0]
80002ec4:	f0 c9 fe 00 	sub	r9,r8,-512
80002ec8:	49 38       	lddpc	r8,80002f14 <sd_mmc_spi_write_sector_from_ram+0x19c>
80002eca:	91 09       	st.w	r8[0x0],r9

  // wait card not busy after last programming operation
  i=0;
80002ecc:	30 08       	mov	r8,0
80002ece:	ef 58 ff fe 	st.h	r7[-2],r8
  while (false == sd_mmc_spi_wait_not_busy())
80002ed2:	c0 e8       	rjmp	80002eee <sd_mmc_spi_write_sector_from_ram+0x176>
  {
    i++;
80002ed4:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002ed8:	2f f8       	sub	r8,-1
80002eda:	ef 58 ff fe 	st.h	r7[-2],r8
    if (i == 10)
80002ede:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80002ee2:	30 a8       	mov	r8,10
80002ee4:	f0 09 19 00 	cp.h	r9,r8
80002ee8:	c0 31       	brne	80002eee <sd_mmc_spi_write_sector_from_ram+0x176>
      return false;
80002eea:	30 08       	mov	r8,0
80002eec:	c0 98       	rjmp	80002efe <sd_mmc_spi_write_sector_from_ram+0x186>
  spi_unselectChip(SD_MMC_SPI, SD_MMC_SPI_NPCS);  // unselect SD_MMC_SPI
  gl_ptr_mem += 512;        // Update the memory pointer.

  // wait card not busy after last programming operation
  i=0;
  while (false == sd_mmc_spi_wait_not_busy())
80002eee:	f0 1f 00 07 	mcall	80002f08 <sd_mmc_spi_write_sector_from_ram+0x190>
80002ef2:	18 98       	mov	r8,r12
80002ef4:	ec 18 00 01 	eorl	r8,0x1
80002ef8:	5c 58       	castu.b	r8
80002efa:	ce d1       	brne	80002ed4 <sd_mmc_spi_write_sector_from_ram+0x15c>
    i++;
    if (i == 10)
      return false;
  }

  return true;                  // Write done
80002efc:	30 18       	mov	r8,1
}
80002efe:	10 9c       	mov	r12,r8
80002f00:	2f dd       	sub	sp,-12
80002f02:	e3 cd 80 80 	ldm	sp++,r7,pc
80002f06:	00 00       	add	r0,r0
80002f08:	80 00       	ld.sh	r0,r0[0x0]
80002f0a:	29 e0       	sub	r0,-98
80002f0c:	80 00       	ld.sh	r0,r0[0x0]
80002f0e:	31 9c       	mov	r12,25
80002f10:	00 00       	add	r0,r0
80002f12:	0e f6       	st.b	--r7,r6
80002f14:	00 00       	add	r0,r0
80002f16:	05 e0       	ld.ub	r0,r2[0x6]
80002f18:	80 00       	ld.sh	r0,r0[0x0]
80002f1a:	23 b4       	sub	r4,59
80002f1c:	00 00       	add	r0,r0
80002f1e:	0f 08       	ld.w	r8,r7++
80002f20:	80 00       	ld.sh	r0,r0[0x0]
80002f22:	32 34       	mov	r4,35
80002f24:	80 00       	ld.sh	r0,r0[0x0]
80002f26:	34 3e       	mov	lr,67
80002f28:	80 00       	ld.sh	r0,r0[0x0]
80002f2a:	24 c4       	sub	r4,76

80002f2c <adc_configure>:
 * If not called, ADC channels will have side effects
 *
 * \param *adc Base address of the ADC
 */
void adc_configure(volatile avr32_adc_t *adc)
{
80002f2c:	eb cd 40 80 	pushm	r7,lr
80002f30:	1a 97       	mov	r7,sp
80002f32:	20 1d       	sub	sp,4
80002f34:	ef 4c ff fc 	st.w	r7[-4],r12
	adc->mr |= 1 << AVR32_ADC_LOWRES_OFFSET;
#endif

	/* Set Sample/Hold time to max so that the ADC capacitor should be
	 * loaded entirely */
	adc->mr |= 0xF << AVR32_ADC_SHTIM_OFFSET;
80002f38:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f3c:	70 18       	ld.w	r8,r8[0x4]
80002f3e:	10 99       	mov	r9,r8
80002f40:	ea 19 0f 00 	orh	r9,0xf00
80002f44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f48:	91 19       	st.w	r8[0x4],r9

	/* Set Startup to max so that the ADC capacitor should be loaded
	 * entirely */
	adc->mr |= 0x1F << AVR32_ADC_STARTUP_OFFSET;
80002f4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f4e:	70 18       	ld.w	r8,r8[0x4]
80002f50:	10 99       	mov	r9,r8
80002f52:	ea 19 00 1f 	orh	r9,0x1f
80002f56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f5a:	91 19       	st.w	r8[0x4],r9
}
80002f5c:	2f fd       	sub	sp,-4
80002f5e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002f62 <adc_start>:

/** \brief Start analog to digital conversion
 * \param *adc Base address of the ADC
 */
void adc_start(volatile avr32_adc_t *adc)
{
80002f62:	eb cd 40 80 	pushm	r7,lr
80002f66:	1a 97       	mov	r7,sp
80002f68:	20 1d       	sub	sp,4
80002f6a:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert( adc != NULL );

	/* start conversion */
	adc->cr = AVR32_ADC_START_MASK;
80002f6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f72:	30 29       	mov	r9,2
80002f74:	91 09       	st.w	r8[0x0],r9
}
80002f76:	2f fd       	sub	sp,-4
80002f78:	e3 cd 80 80 	ldm	sp++,r7,pc

80002f7c <adc_enable>:
 *
 * \param *adc Base address of the ADC
 * \param  channel   channel to enable (0 to 7)
 */
void adc_enable(volatile avr32_adc_t *adc, uint16_t channel)
{
80002f7c:	eb cd 40 80 	pushm	r7,lr
80002f80:	1a 97       	mov	r7,sp
80002f82:	20 2d       	sub	sp,8
80002f84:	ef 4c ff fc 	st.w	r7[-4],r12
80002f88:	16 98       	mov	r8,r11
80002f8a:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* enable channel */
	adc->cher = (1 << channel);
80002f8e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80002f92:	30 19       	mov	r9,1
80002f94:	f2 08 09 48 	lsl	r8,r9,r8
80002f98:	10 99       	mov	r9,r8
80002f9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002f9e:	91 49       	st.w	r8[0x10],r9
}
80002fa0:	2f ed       	sub	sp,-8
80002fa2:	e3 cd 80 80 	ldm	sp++,r7,pc

80002fa6 <adc_check_eoc>:
 * \param  channel   channel to check (0 to 7)
 * \return bool      true if conversion not running
 *                   false if conversion running
 */
bool adc_check_eoc(volatile avr32_adc_t *adc, uint16_t channel)
{
80002fa6:	eb cd 40 80 	pushm	r7,lr
80002faa:	1a 97       	mov	r7,sp
80002fac:	20 2d       	sub	sp,8
80002fae:	ef 4c ff fc 	st.w	r7[-4],r12
80002fb2:	16 98       	mov	r8,r11
80002fb4:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB ); /* check if channel exist
	                                              **/

	/* get SR register : EOC bit for channel */
	return ((adc->sr & (1 << channel)) ? true : false);
80002fb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002fbc:	70 79       	ld.w	r9,r8[0x1c]
80002fbe:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80002fc2:	30 1a       	mov	r10,1
80002fc4:	f4 08 09 48 	lsl	r8,r10,r8
80002fc8:	f3 e8 00 08 	and	r8,r9,r8
80002fcc:	5f 18       	srne	r8
80002fce:	5c 58       	castu.b	r8
}
80002fd0:	10 9c       	mov	r12,r8
80002fd2:	2f ed       	sub	sp,-8
80002fd4:	e3 cd 80 80 	ldm	sp++,r7,pc

80002fd8 <adc_get_value>:
 * \param *adc Base address of the ADC
 * \param  channel   channel to handle (0 to 7)
 * \return The value acquired (unsigned long)
 */
uint32_t adc_get_value(volatile avr32_adc_t *adc, uint16_t channel)
{
80002fd8:	eb cd 40 80 	pushm	r7,lr
80002fdc:	1a 97       	mov	r7,sp
80002fde:	20 2d       	sub	sp,8
80002fe0:	ef 4c ff fc 	st.w	r7[-4],r12
80002fe4:	16 98       	mov	r8,r11
80002fe6:	ef 58 ff f8 	st.h	r7[-8],r8
	Assert( adc != NULL );
	Assert( channel <= AVR32_ADC_CHANNELS_MSB );

	/* wait for end of conversion */
	while (adc_check_eoc(adc, channel) != true) {
80002fea:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80002fee:	10 9b       	mov	r11,r8
80002ff0:	ee fc ff fc 	ld.w	r12,r7[-4]
80002ff4:	f0 1f 00 0b 	mcall	80003020 <adc_get_value+0x48>
80002ff8:	18 98       	mov	r8,r12
80002ffa:	ec 18 00 01 	eorl	r8,0x1
80002ffe:	5c 58       	castu.b	r8
80003000:	cf 51       	brne	80002fea <adc_get_value+0x12>
	}

	return *((uint32_t *)((&(adc->cdr0)) + channel));
80003002:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003006:	f0 c9 ff d0 	sub	r9,r8,-48
8000300a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8000300e:	a3 68       	lsl	r8,0x2
80003010:	f2 08 00 08 	add	r8,r9,r8
80003014:	70 08       	ld.w	r8,r8[0x0]
}
80003016:	10 9c       	mov	r12,r8
80003018:	2f ed       	sub	sp,-8
8000301a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000301e:	00 00       	add	r0,r0
80003020:	80 00       	ld.sh	r0,r0[0x0]
80003022:	2f a6       	sub	r6,-6

80003024 <getBaudDiv>:
/** The SPI mutex. */
xSemaphoreHandle xSPIMutex;
#endif

int16_t getBaudDiv(const uint32_t baudrate, uint32_t pb_hz)
{
80003024:	eb cd 40 80 	pushm	r7,lr
80003028:	1a 97       	mov	r7,sp
8000302a:	20 3d       	sub	sp,12
8000302c:	ef 4c ff f8 	st.w	r7[-8],r12
80003030:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t baudDiv = div_ceil(pb_hz, baudrate);
80003034:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003038:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000303c:	f2 08 00 08 	add	r8,r9,r8
80003040:	20 18       	sub	r8,1
80003042:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003046:	f0 09 0d 08 	divu	r8,r8,r9
8000304a:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv <= 0 || baudDiv > 255) {
8000304e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003052:	58 08       	cp.w	r8,0
80003054:	c0 70       	breq	80003062 <getBaudDiv+0x3e>
80003056:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000305a:	e0 48 00 ff 	cp.w	r8,255
8000305e:	e0 88 00 04 	brls	80003066 <getBaudDiv+0x42>
		return -1;
80003062:	3f f8       	mov	r8,-1
80003064:	c0 48       	rjmp	8000306c <getBaudDiv+0x48>
	}

	return baudDiv;
80003066:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000306a:	5c 88       	casts.h	r8
}
8000306c:	10 9c       	mov	r12,r8
8000306e:	2f dd       	sub	sp,-12
80003070:	e3 cd 80 80 	ldm	sp++,r7,pc

80003074 <spi_initMaster>:
	return SPI_OK;
}

spi_status_t spi_initMaster(volatile avr32_spi_t *spi,
		const spi_options_t *options)
{
80003074:	eb cd 40 80 	pushm	r7,lr
80003078:	1a 97       	mov	r7,sp
8000307a:	20 3d       	sub	sp,12
8000307c:	ef 4c ff f8 	st.w	r7[-8],r12
80003080:	ef 4b ff f4 	st.w	r7[-12],r11
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (options->modfdis > 1) {
80003084:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003088:	f1 39 00 0d 	ld.ub	r9,r8[13]
8000308c:	30 18       	mov	r8,1
8000308e:	f0 09 18 00 	cp.b	r9,r8
80003092:	e0 88 00 04 	brls	8000309a <spi_initMaster+0x26>
		return SPI_ERROR_ARGUMENT;
80003096:	30 28       	mov	r8,2
80003098:	c3 48       	rjmp	80003100 <spi_initMaster+0x8c>
	}

	/* Reset. */
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
8000309a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000309e:	e0 69 00 80 	mov	r9,128
800030a2:	91 09       	st.w	r8[0x0],r9

	/* Master Mode. */
	u_avr32_spi_mr.mr = spi->mr;
800030a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030a8:	70 18       	ld.w	r8,r8[0x4]
800030aa:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.mstr = 1;
800030ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030b2:	30 19       	mov	r9,1
800030b4:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800030b8:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.modfdis = options->modfdis;
800030bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800030c0:	f1 38 00 0d 	ld.ub	r8,r8[13]
800030c4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800030c8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800030cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030d0:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
800030d4:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.llb = 0;
800030d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030dc:	30 09       	mov	r9,0
800030de:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
800030e2:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800030e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800030ea:	30 f9       	mov	r9,15
800030ec:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
800030f0:	ef 48 ff fc 	st.w	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
800030f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800030f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800030fc:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
800030fe:	30 08       	mov	r8,0
}
80003100:	10 9c       	mov	r12,r8
80003102:	2f dd       	sub	sp,-12
80003104:	e3 cd 80 80 	ldm	sp++,r7,pc

80003108 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
		uint8_t variable_ps,
		uint8_t pcs_decode,
		uint8_t delay)
{
80003108:	eb cd 40 80 	pushm	r7,lr
8000310c:	1a 97       	mov	r7,sp
8000310e:	20 5d       	sub	sp,20
80003110:	ef 4c ff f8 	st.w	r7[-8],r12
80003114:	12 98       	mov	r8,r9
80003116:	16 99       	mov	r9,r11
80003118:	ef 69 ff f4 	st.b	r7[-12],r9
8000311c:	14 99       	mov	r9,r10
8000311e:	ef 69 ff f0 	st.b	r7[-16],r9
80003122:	ef 68 ff ec 	st.b	r7[-20],r8
	u_avr32_spi_mr_t u_avr32_spi_mr;

	if (variable_ps > 1 ||
80003126:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000312a:	30 18       	mov	r8,1
8000312c:	f0 09 18 00 	cp.b	r9,r8
80003130:	e0 8b 00 09 	brhi	80003142 <spi_selectionMode+0x3a>
80003134:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80003138:	30 18       	mov	r8,1
8000313a:	f0 09 18 00 	cp.b	r9,r8
8000313e:	e0 88 00 04 	brls	80003146 <spi_selectionMode+0x3e>
			pcs_decode > 1) {
		return SPI_ERROR_ARGUMENT;
80003142:	30 28       	mov	r8,2
80003144:	c2 88       	rjmp	80003194 <spi_selectionMode+0x8c>
	}

	u_avr32_spi_mr.mr = spi->mr;
80003146:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000314a:	70 18       	ld.w	r8,r8[0x4]
8000314c:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.ps = variable_ps;
80003150:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80003154:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003158:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000315c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003160:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80003164:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80003168:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000316c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003170:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003174:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003178:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
8000317c:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_spi_mr.MR.dlybcs = delay;
80003180:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80003184:	ef 68 ff fc 	st.b	r7[-4],r8
	spi->mr = u_avr32_spi_mr.mr;
80003188:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000318c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003190:	91 19       	st.w	r8[0x4],r9

	return SPI_OK;
80003192:	30 08       	mov	r8,0
}
80003194:	10 9c       	mov	r12,r8
80003196:	2f bd       	sub	sp,-20
80003198:	e3 cd 80 80 	ldm	sp++,r7,pc

8000319c <spi_selectChip>:

spi_status_t spi_selectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
8000319c:	eb cd 40 80 	pushm	r7,lr
800031a0:	1a 97       	mov	r7,sp
800031a2:	20 2d       	sub	sp,8
800031a4:	ef 4c ff fc 	st.w	r7[-4],r12
800031a8:	16 98       	mov	r8,r11
800031aa:	ef 68 ff f8 	st.b	r7[-8],r8
	while (pdFALSE == xSemaphoreTake(xSPIMutex, 20)) {
	}
#endif

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
800031ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031b2:	70 18       	ld.w	r8,r8[0x4]
800031b4:	10 99       	mov	r9,r8
800031b6:	ea 19 00 0f 	orh	r9,0xf
800031ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031be:	91 19       	st.w	r8[0x4],r9

	if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
800031c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031c4:	70 18       	ld.w	r8,r8[0x4]
800031c6:	e2 18 00 04 	andl	r8,0x4,COH
800031ca:	c1 90       	breq	800031fc <spi_selectChip+0x60>
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
800031cc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800031d0:	30 e8       	mov	r8,14
800031d2:	f0 09 18 00 	cp.b	r9,r8
800031d6:	e0 88 00 04 	brls	800031de <spi_selectChip+0x42>
			return SPI_ERROR_ARGUMENT;
800031da:	30 28       	mov	r8,2
800031dc:	c2 88       	rjmp	8000322c <spi_selectChip+0x90>
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800031de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031e2:	70 19       	ld.w	r9,r8[0x4]
				(chip << AVR32_SPI_MR_PCS_OFFSET);
800031e4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800031e8:	b1 68       	lsl	r8,0x10
		/* The signal is decoded; allow up to 15 chips. */
		if (chip > 14) {
			return SPI_ERROR_ARGUMENT;
		}

		spi->mr &= ~AVR32_SPI_MR_PCS_MASK |
800031ea:	ea 18 ff f0 	orh	r8,0xfff0
800031ee:	e8 18 ff ff 	orl	r8,0xffff
800031f2:	10 69       	and	r9,r8
800031f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800031f8:	91 19       	st.w	r8[0x4],r9
800031fa:	c1 88       	rjmp	8000322a <spi_selectChip+0x8e>
				(chip << AVR32_SPI_MR_PCS_OFFSET);
	} else {
		if (chip > 3) {
800031fc:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80003200:	30 38       	mov	r8,3
80003202:	f0 09 18 00 	cp.b	r9,r8
80003206:	e0 88 00 04 	brls	8000320e <spi_selectChip+0x72>
			return SPI_ERROR_ARGUMENT;
8000320a:	30 28       	mov	r8,2
8000320c:	c1 08       	rjmp	8000322c <spi_selectChip+0x90>
		}

		spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
8000320e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003212:	70 19       	ld.w	r9,r8[0x4]
80003214:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80003218:	2f 08       	sub	r8,-16
8000321a:	30 1a       	mov	r10,1
8000321c:	f4 08 09 48 	lsl	r8,r10,r8
80003220:	5c d8       	com	r8
80003222:	10 69       	and	r9,r8
80003224:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003228:	91 19       	st.w	r8[0x4],r9
	}

	return SPI_OK;
8000322a:	30 08       	mov	r8,0
}
8000322c:	10 9c       	mov	r12,r8
8000322e:	2f ed       	sub	sp,-8
80003230:	e3 cd 80 80 	ldm	sp++,r7,pc

80003234 <spi_unselectChip>:

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
80003234:	eb cd 40 80 	pushm	r7,lr
80003238:	1a 97       	mov	r7,sp
8000323a:	20 3d       	sub	sp,12
8000323c:	ef 4c ff f8 	st.w	r7[-8],r12
80003240:	16 98       	mov	r8,r11
80003242:	ef 68 ff f4 	st.b	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
80003246:	e0 68 3a 98 	mov	r8,15000
8000324a:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000324e:	c0 f8       	rjmp	8000326c <spi_unselectChip+0x38>
		if (!timeout--) {
80003250:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003254:	58 08       	cp.w	r8,0
80003256:	5f 08       	sreq	r8
80003258:	5c 58       	castu.b	r8
8000325a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000325e:	20 19       	sub	r9,1
80003260:	ef 49 ff fc 	st.w	r7[-4],r9
80003264:	58 08       	cp.w	r8,0
80003266:	c0 30       	breq	8000326c <spi_unselectChip+0x38>
			return SPI_ERROR_TIMEOUT;
80003268:	30 18       	mov	r8,1
8000326a:	c1 68       	rjmp	80003296 <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, uint8_t chip)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8000326c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003270:	70 48       	ld.w	r8,r8[0x10]
80003272:	e2 18 02 00 	andl	r8,0x200,COH
80003276:	ce d0       	breq	80003250 <spi_unselectChip+0x1c>
			return SPI_ERROR_TIMEOUT;
		}
	}

	/* Assert all lines; no peripheral is selected. */
	spi->mr |= AVR32_SPI_MR_PCS_MASK;
80003278:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000327c:	70 18       	ld.w	r8,r8[0x4]
8000327e:	10 99       	mov	r9,r8
80003280:	ea 19 00 0f 	orh	r9,0xf
80003284:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003288:	91 19       	st.w	r8[0x4],r9

	/* Last transfer, so de-assert the current NPCS if CSAAT is set. */
	spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
8000328a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000328e:	fc 19 01 00 	movh	r9,0x100
80003292:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
	xSemaphoreGive(xSPIMutex);
#endif

	return SPI_OK;
80003294:	30 08       	mov	r8,0
}
80003296:	10 9c       	mov	r12,r8
80003298:	2f dd       	sub	sp,-12
8000329a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000329e:	d7 03       	nop

800032a0 <spi_setupChipReg>:

spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
		const spi_options_t *options,
		uint32_t pb_hz)
{
800032a0:	eb cd 40 80 	pushm	r7,lr
800032a4:	1a 97       	mov	r7,sp
800032a6:	20 5d       	sub	sp,20
800032a8:	ef 4c ff f4 	st.w	r7[-12],r12
800032ac:	ef 4b ff f0 	st.w	r7[-16],r11
800032b0:	ef 4a ff ec 	st.w	r7[-20],r10
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800032b4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800032b8:	f1 39 00 0c 	ld.ub	r9,r8[12]
800032bc:	30 38       	mov	r8,3
800032be:	f0 09 18 00 	cp.b	r9,r8
800032c2:	e0 8b 00 1d 	brhi	800032fc <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
800032c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800032ca:	f1 39 00 0b 	ld.ub	r9,r8[11]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800032ce:	30 18       	mov	r8,1
800032d0:	f0 09 18 00 	cp.b	r9,r8
800032d4:	e0 8b 00 14 	brhi	800032fc <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800032d8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800032dc:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800032e0:	30 78       	mov	r8,7
800032e2:	f0 09 18 00 	cp.b	r9,r8
800032e6:	e0 88 00 0b 	brls	800032fc <spi_setupChipReg+0x5c>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
800032ea:	ee f8 ff f0 	ld.w	r8,r7[-16]
800032ee:	f1 39 00 08 	ld.ub	r9,r8[8]
		const spi_options_t *options,
		uint32_t pb_hz)
{
	u_avr32_spi_csr_t u_avr32_spi_csr;

	if (options->spi_mode > 3 ||
800032f2:	31 08       	mov	r8,16
800032f4:	f0 09 18 00 	cp.b	r9,r8
800032f8:	e0 88 00 04 	brls	80003300 <spi_setupChipReg+0x60>
			options->stay_act > 1 ||
			options->bits < 8 || options->bits > 16) {
		return SPI_ERROR_ARGUMENT;
800032fc:	30 28       	mov	r8,2
800032fe:	c8 d8       	rjmp	80003418 <spi_setupChipReg+0x178>
	}

	int baudDiv = getBaudDiv(options->baudrate, pb_hz);
80003300:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003304:	70 18       	ld.w	r8,r8[0x4]
80003306:	ee fb ff ec 	ld.w	r11,r7[-20]
8000330a:	10 9c       	mov	r12,r8
8000330c:	f0 1f 00 45 	mcall	80003420 <spi_setupChipReg+0x180>
80003310:	18 98       	mov	r8,r12
80003312:	ef 48 ff fc 	st.w	r7[-4],r8

	if (baudDiv < 0) {
80003316:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000331a:	58 08       	cp.w	r8,0
8000331c:	c0 34       	brge	80003322 <spi_setupChipReg+0x82>
		return SPI_ERROR_ARGUMENT;
8000331e:	30 28       	mov	r8,2
80003320:	c7 c8       	rjmp	80003418 <spi_setupChipReg+0x178>
	}

	/* Will use CSR0 offsets; these are the same for CSR0 to CSR3. */
	u_avr32_spi_csr.csr = 0;
80003322:	30 08       	mov	r8,0
80003324:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
80003328:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000332c:	f1 38 00 0c 	ld.ub	r8,r8[12]
80003330:	a1 98       	lsr	r8,0x1
80003332:	5c 58       	castu.b	r8
80003334:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003338:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000333c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003340:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80003344:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80003348:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000334c:	f1 38 00 0c 	ld.ub	r8,r8[12]
80003350:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003354:	5f 08       	sreq	r8
80003356:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000335a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000335e:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80003362:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80003366:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000336a:	f1 38 00 0b 	ld.ub	r8,r8[11]
8000336e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003372:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000337a:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
8000337e:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80003382:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003386:	f1 38 00 08 	ld.ub	r8,r8[8]
8000338a:	20 88       	sub	r8,8
8000338c:	5c 58       	castu.b	r8
8000338e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80003392:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80003396:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000339a:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
8000339e:	ef 48 ff f8 	st.w	r7[-8],r8
	u_avr32_spi_csr.CSR.scbr   = baudDiv;
800033a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800033a6:	5c 58       	castu.b	r8
800033a8:	ef 68 ff fa 	st.b	r7[-6],r8
	u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
800033ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
800033b0:	f1 38 00 09 	ld.ub	r8,r8[9]
800033b4:	ef 68 ff f9 	st.b	r7[-7],r8
	u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
800033b8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800033bc:	f1 38 00 0a 	ld.ub	r8,r8[10]
800033c0:	ef 68 ff f8 	st.b	r7[-8],r8

	switch (options->reg) {
800033c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800033c8:	11 88       	ld.ub	r8,r8[0x0]
800033ca:	58 18       	cp.w	r8,1
800033cc:	c1 10       	breq	800033ee <spi_setupChipReg+0x14e>
800033ce:	e0 89 00 05 	brgt	800033d8 <spi_setupChipReg+0x138>
800033d2:	58 08       	cp.w	r8,0
800033d4:	c0 70       	breq	800033e2 <spi_setupChipReg+0x142>
800033d6:	c1 e8       	rjmp	80003412 <spi_setupChipReg+0x172>
800033d8:	58 28       	cp.w	r8,2
800033da:	c1 00       	breq	800033fa <spi_setupChipReg+0x15a>
800033dc:	58 38       	cp.w	r8,3
800033de:	c1 40       	breq	80003406 <spi_setupChipReg+0x166>
800033e0:	c1 98       	rjmp	80003412 <spi_setupChipReg+0x172>
	case 0:
		spi->csr0 = u_avr32_spi_csr.csr;
800033e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800033e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800033ea:	91 c9       	st.w	r8[0x30],r9
		break;
800033ec:	c1 58       	rjmp	80003416 <spi_setupChipReg+0x176>

	case 1:
		spi->csr1 = u_avr32_spi_csr.csr;
800033ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
800033f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800033f6:	91 d9       	st.w	r8[0x34],r9
		break;
800033f8:	c0 f8       	rjmp	80003416 <spi_setupChipReg+0x176>

	case 2:
		spi->csr2 = u_avr32_spi_csr.csr;
800033fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
800033fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003402:	91 e9       	st.w	r8[0x38],r9
		break;
80003404:	c0 98       	rjmp	80003416 <spi_setupChipReg+0x176>

	case 3:
		spi->csr3 = u_avr32_spi_csr.csr;
80003406:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000340a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000340e:	91 f9       	st.w	r8[0x3c],r9
		break;
80003410:	c0 38       	rjmp	80003416 <spi_setupChipReg+0x176>

	default:
		return SPI_ERROR_ARGUMENT;
80003412:	30 28       	mov	r8,2
80003414:	c0 28       	rjmp	80003418 <spi_setupChipReg+0x178>
			}
		}
	}
#endif

	return SPI_OK;
80003416:	30 08       	mov	r8,0
}
80003418:	10 9c       	mov	r12,r8
8000341a:	2f bd       	sub	sp,-20
8000341c:	e3 cd 80 80 	ldm	sp++,r7,pc
80003420:	80 00       	ld.sh	r0,r0[0x0]
80003422:	30 24       	mov	r4,2

80003424 <spi_enable>:

void spi_enable(volatile avr32_spi_t *spi)
{
80003424:	eb cd 40 80 	pushm	r7,lr
80003428:	1a 97       	mov	r7,sp
8000342a:	20 1d       	sub	sp,4
8000342c:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SPIEN_MASK;
80003430:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003434:	30 19       	mov	r9,1
80003436:	91 09       	st.w	r8[0x0],r9
}
80003438:	2f fd       	sub	sp,-4
8000343a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000343e <spi_write>:
{
	return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
}

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
8000343e:	eb cd 40 80 	pushm	r7,lr
80003442:	1a 97       	mov	r7,sp
80003444:	20 3d       	sub	sp,12
80003446:	ef 4c ff f8 	st.w	r7[-8],r12
8000344a:	16 98       	mov	r8,r11
8000344c:	ef 58 ff f4 	st.h	r7[-12],r8
	uint32_t timeout = SPI_TIMEOUT;
80003450:	e0 68 3a 98 	mov	r8,15000
80003454:	ef 48 ff fc 	st.w	r7[-4],r8

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003458:	c0 f8       	rjmp	80003476 <spi_write+0x38>
		if (!timeout--) {
8000345a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000345e:	58 08       	cp.w	r8,0
80003460:	5f 08       	sreq	r8
80003462:	5c 58       	castu.b	r8
80003464:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003468:	20 19       	sub	r9,1
8000346a:	ef 49 ff fc 	st.w	r7[-4],r9
8000346e:	58 08       	cp.w	r8,0
80003470:	c0 30       	breq	80003476 <spi_write+0x38>
			return SPI_ERROR_TIMEOUT;
80003472:	30 18       	mov	r8,1
80003474:	c0 d8       	rjmp	8000348e <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
	uint32_t timeout = SPI_TIMEOUT;

	while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80003476:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000347a:	70 48       	ld.w	r8,r8[0x10]
8000347c:	e2 18 00 02 	andl	r8,0x2,COH
80003480:	ce d0       	breq	8000345a <spi_write+0x1c>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
80003482:	ef 19 ff f4 	ld.uh	r9,r7[-12]
80003486:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000348a:	91 39       	st.w	r8[0xc],r9

	return SPI_OK;
8000348c:	30 08       	mov	r8,0
}
8000348e:	10 9c       	mov	r12,r8
80003490:	2f dd       	sub	sp,-12
80003492:	e3 cd 80 80 	ldm	sp++,r7,pc

80003496 <spi_read>:
{
	return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
}

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
80003496:	eb cd 40 80 	pushm	r7,lr
8000349a:	1a 97       	mov	r7,sp
8000349c:	20 3d       	sub	sp,12
8000349e:	ef 4c ff f8 	st.w	r7[-8],r12
800034a2:	ef 4b ff f4 	st.w	r7[-12],r11
	unsigned int timeout = SPI_TIMEOUT;
800034a6:	e0 68 3a 98 	mov	r8,15000
800034aa:	ef 48 ff fc 	st.w	r7[-4],r8

	while ((spi->sr &
800034ae:	c0 f8       	rjmp	800034cc <spi_read+0x36>
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
			(AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
		if (!timeout--) {
800034b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034b4:	58 08       	cp.w	r8,0
800034b6:	5f 08       	sreq	r8
800034b8:	5c 58       	castu.b	r8
800034ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800034be:	20 19       	sub	r9,1
800034c0:	ef 49 ff fc 	st.w	r7[-4],r9
800034c4:	58 08       	cp.w	r8,0
800034c6:	c0 30       	breq	800034cc <spi_read+0x36>
			return SPI_ERROR_TIMEOUT;
800034c8:	30 18       	mov	r8,1
800034ca:	c1 18       	rjmp	800034ec <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, uint16_t *data)
{
	unsigned int timeout = SPI_TIMEOUT;

	while ((spi->sr &
800034cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034d0:	70 48       	ld.w	r8,r8[0x10]
800034d2:	e2 18 02 01 	andl	r8,0x201,COH
800034d6:	e0 48 02 01 	cp.w	r8,513
800034da:	ce b1       	brne	800034b0 <spi_read+0x1a>
		if (!timeout--) {
			return SPI_ERROR_TIMEOUT;
		}
	}

	*data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800034dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800034e0:	70 28       	ld.w	r8,r8[0x8]
800034e2:	5c 88       	casts.h	r8
800034e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800034e8:	b2 08       	st.h	r9[0x0],r8

	return SPI_OK;
800034ea:	30 08       	mov	r8,0
}
800034ec:	10 9c       	mov	r12,r8
800034ee:	2f dd       	sub	sp,-12
800034f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800034f4 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800034f4:	eb cd 40 80 	pushm	r7,lr
800034f8:	1a 97       	mov	r7,sp
800034fa:	20 1d       	sub	sp,4
800034fc:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80003500:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003504:	e6 18 00 01 	andh	r8,0x1,COH
80003508:	5f 08       	sreq	r8
8000350a:	5c 58       	castu.b	r8
}
8000350c:	10 9c       	mov	r12,r8
8000350e:	2f fd       	sub	sp,-4
80003510:	e3 cd 80 80 	ldm	sp++,r7,pc

80003514 <tc_configure_interrupts>:
  return tc->channel[channel].imr;
}


int tc_configure_interrupts(volatile avr32_tc_t *tc, unsigned int channel, const tc_interrupt_t *bitfield)
{
80003514:	eb cd 40 80 	pushm	r7,lr
80003518:	1a 97       	mov	r7,sp
8000351a:	20 4d       	sub	sp,16
8000351c:	ef 4c ff f8 	st.w	r7[-8],r12
80003520:	ef 4b ff f4 	st.w	r7[-12],r11
80003524:	ef 4a ff f0 	st.w	r7[-16],r10
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80003528:	e1 b8 00 00 	mfsr	r8,0x0
8000352c:	10 9c       	mov	r12,r8
8000352e:	f0 1f 00 73 	mcall	800036f8 <tc_configure_interrupts+0x1e4>
80003532:	18 98       	mov	r8,r12
80003534:	ef 68 ff ff 	st.b	r7[-1],r8

  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80003538:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000353c:	58 28       	cp.w	r8,2
8000353e:	e0 88 00 04 	brls	80003546 <tc_configure_interrupts+0x32>
    return TC_INVALID_ARGUMENT;
80003542:	3f f8       	mov	r8,-1
80003544:	cd 68       	rjmp	800036f0 <tc_configure_interrupts+0x1dc>

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
80003546:	ee fb ff f4 	ld.w	r11,r7[-12]
8000354a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000354e:	70 08       	ld.w	r8,r8[0x0]
80003550:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
80003554:	5c 58       	castu.b	r8
80003556:	f0 09 15 07 	lsl	r9,r8,0x7
                             bitfield->ldrbs << AVR32_TC_LDRBS_OFFSET |
8000355a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000355e:	70 08       	ld.w	r8,r8[0x0]
80003560:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80003564:	5c 58       	castu.b	r8
80003566:	a7 68       	lsl	r8,0x6
80003568:	10 49       	or	r9,r8
                             bitfield->ldras << AVR32_TC_LDRAS_OFFSET |
8000356a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000356e:	70 08       	ld.w	r8,r8[0x0]
80003570:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
80003574:	5c 58       	castu.b	r8
80003576:	a5 78       	lsl	r8,0x5
80003578:	10 49       	or	r9,r8
                             bitfield->cpcs << AVR32_TC_CPCS_OFFSET |
8000357a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000357e:	70 08       	ld.w	r8,r8[0x0]
80003580:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80003584:	5c 58       	castu.b	r8
80003586:	a5 68       	lsl	r8,0x4
80003588:	10 49       	or	r9,r8
                             bitfield->cpbs << AVR32_TC_CPBS_OFFSET |
8000358a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000358e:	70 08       	ld.w	r8,r8[0x0]
80003590:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80003594:	5c 58       	castu.b	r8
80003596:	a3 78       	lsl	r8,0x3
80003598:	10 49       	or	r9,r8
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
8000359a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000359e:	70 08       	ld.w	r8,r8[0x0]
800035a0:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
800035a4:	5c 58       	castu.b	r8
800035a6:	a3 68       	lsl	r8,0x2
800035a8:	10 49       	or	r9,r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
800035aa:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035ae:	70 08       	ld.w	r8,r8[0x0]
800035b0:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
800035b4:	5c 58       	castu.b	r8
800035b6:	a1 78       	lsl	r8,0x1
800035b8:	10 49       	or	r9,r8
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;
800035ba:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035be:	70 08       	ld.w	r8,r8[0x0]
800035c0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800035c4:	5c 58       	castu.b	r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // Enable the appropriate interrupts.
  tc->channel[channel].ier = bitfield->etrgs << AVR32_TC_ETRGS_OFFSET |
800035c6:	f3 e8 10 08 	or	r8,r9,r8
800035ca:	10 99       	mov	r9,r8
800035cc:	ee fa ff f8 	ld.w	r10,r7[-8]
800035d0:	f6 08 15 06 	lsl	r8,r11,0x6
800035d4:	f4 08 00 08 	add	r8,r10,r8
800035d8:	2d c8       	sub	r8,-36
800035da:	91 09       	st.w	r8[0x0],r9
                             bitfield->cpas << AVR32_TC_CPAS_OFFSET |
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
800035dc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800035e0:	30 08       	mov	r8,0
800035e2:	f0 09 18 00 	cp.b	r9,r8
800035e6:	c0 20       	breq	800035ea <tc_configure_interrupts+0xd6>
800035e8:	d3 03       	ssrf	0x10
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800035ea:	ee fb ff f4 	ld.w	r11,r7[-12]
800035ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800035f2:	70 08       	ld.w	r8,r8[0x0]
800035f4:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800035f8:	5c 58       	castu.b	r8
800035fa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800035fe:	c0 41       	brne	80003606 <tc_configure_interrupts+0xf2>
80003600:	e0 69 00 80 	mov	r9,128
80003604:	c0 28       	rjmp	80003608 <tc_configure_interrupts+0xf4>
80003606:	30 09       	mov	r9,0
                             (~bitfield->ldrbs & 1) << AVR32_TC_LDRBS_OFFSET |
80003608:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000360c:	70 08       	ld.w	r8,r8[0x0]
8000360e:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80003612:	5c 58       	castu.b	r8
80003614:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003618:	c0 31       	brne	8000361e <tc_configure_interrupts+0x10a>
8000361a:	34 08       	mov	r8,64
8000361c:	c0 28       	rjmp	80003620 <tc_configure_interrupts+0x10c>
8000361e:	30 08       	mov	r8,0
80003620:	10 49       	or	r9,r8
                             (~bitfield->ldras & 1) << AVR32_TC_LDRAS_OFFSET |
80003622:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003626:	70 08       	ld.w	r8,r8[0x0]
80003628:	f1 d8 c0 a1 	bfextu	r8,r8,0x5,0x1
8000362c:	5c 58       	castu.b	r8
8000362e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003632:	c0 31       	brne	80003638 <tc_configure_interrupts+0x124>
80003634:	32 08       	mov	r8,32
80003636:	c0 28       	rjmp	8000363a <tc_configure_interrupts+0x126>
80003638:	30 08       	mov	r8,0
8000363a:	10 49       	or	r9,r8
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
8000363c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003640:	70 08       	ld.w	r8,r8[0x0]
80003642:	f1 d8 c0 81 	bfextu	r8,r8,0x4,0x1
80003646:	5c 58       	castu.b	r8
80003648:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000364c:	c0 31       	brne	80003652 <tc_configure_interrupts+0x13e>
8000364e:	31 08       	mov	r8,16
80003650:	c0 28       	rjmp	80003654 <tc_configure_interrupts+0x140>
80003652:	30 08       	mov	r8,0
80003654:	10 49       	or	r9,r8
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
80003656:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000365a:	70 08       	ld.w	r8,r8[0x0]
8000365c:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80003660:	5c 58       	castu.b	r8
80003662:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003666:	c0 31       	brne	8000366c <tc_configure_interrupts+0x158>
80003668:	30 88       	mov	r8,8
8000366a:	c0 28       	rjmp	8000366e <tc_configure_interrupts+0x15a>
8000366c:	30 08       	mov	r8,0
8000366e:	10 49       	or	r9,r8
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
80003670:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003674:	70 08       	ld.w	r8,r8[0x0]
80003676:	f1 d8 c0 41 	bfextu	r8,r8,0x2,0x1
8000367a:	5c 58       	castu.b	r8
8000367c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80003680:	c0 31       	brne	80003686 <tc_configure_interrupts+0x172>
80003682:	30 48       	mov	r8,4
80003684:	c0 28       	rjmp	80003688 <tc_configure_interrupts+0x174>
80003686:	30 08       	mov	r8,0
80003688:	10 49       	or	r9,r8
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
8000368a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000368e:	70 08       	ld.w	r8,r8[0x0]
80003690:	f1 d8 c0 21 	bfextu	r8,r8,0x1,0x1
80003694:	5c 58       	castu.b	r8
80003696:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000369a:	c0 31       	brne	800036a0 <tc_configure_interrupts+0x18c>
8000369c:	30 28       	mov	r8,2
8000369e:	c0 28       	rjmp	800036a2 <tc_configure_interrupts+0x18e>
800036a0:	30 08       	mov	r8,0
800036a2:	10 49       	or	r9,r8
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
800036a4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800036a8:	70 08       	ld.w	r8,r8[0x0]
800036aa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800036ae:	5c 58       	castu.b	r8
800036b0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800036b4:	5f 08       	sreq	r8
                             bitfield->lovrs << AVR32_TC_LOVRS_OFFSET |
                             bitfield->covfs << AVR32_TC_COVFS_OFFSET;

  // Disable the appropriate interrupts.
  if (global_interrupt_enabled) Disable_global_interrupt();
  tc->channel[channel].idr = (~bitfield->etrgs & 1) << AVR32_TC_ETRGS_OFFSET |
800036b6:	f3 e8 10 08 	or	r8,r9,r8
800036ba:	10 99       	mov	r9,r8
800036bc:	ee fa ff f8 	ld.w	r10,r7[-8]
800036c0:	f6 08 15 06 	lsl	r8,r11,0x6
800036c4:	f4 08 00 08 	add	r8,r10,r8
800036c8:	2d 88       	sub	r8,-40
800036ca:	91 09       	st.w	r8[0x0],r9
                             (~bitfield->cpcs & 1) << AVR32_TC_CPCS_OFFSET |
                             (~bitfield->cpbs & 1) << AVR32_TC_CPBS_OFFSET |
                             (~bitfield->cpas & 1) << AVR32_TC_CPAS_OFFSET |
                             (~bitfield->lovrs & 1) << AVR32_TC_LOVRS_OFFSET |
                             (~bitfield->covfs & 1) << AVR32_TC_COVFS_OFFSET;
  tc->channel[channel].sr;
800036cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800036d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800036d4:	a1 78       	lsl	r8,0x1
800036d6:	2f f8       	sub	r8,-1
800036d8:	a5 78       	lsl	r8,0x5
800036da:	f2 08 00 08 	add	r8,r9,r8
800036de:	70 08       	ld.w	r8,r8[0x0]
  if (global_interrupt_enabled) Enable_global_interrupt();
800036e0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800036e4:	30 08       	mov	r8,0
800036e6:	f0 09 18 00 	cp.b	r9,r8
800036ea:	c0 20       	breq	800036ee <tc_configure_interrupts+0x1da>
800036ec:	d5 03       	csrf	0x10

  return 0;
800036ee:	30 08       	mov	r8,0
}
800036f0:	10 9c       	mov	r12,r8
800036f2:	2f cd       	sub	sp,-16
800036f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800036f8:	80 00       	ld.sh	r0,r0[0x0]
800036fa:	34 f4       	mov	r4,79

800036fc <tc_init_waveform>:
  return 0;
}


int tc_init_waveform(volatile avr32_tc_t *tc, const tc_waveform_opt_t *opt)
{
800036fc:	eb cd 40 80 	pushm	r7,lr
80003700:	1a 97       	mov	r7,sp
80003702:	20 2d       	sub	sp,8
80003704:	ef 4c ff fc 	st.w	r7[-4],r12
80003708:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
8000370c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003710:	70 08       	ld.w	r8,r8[0x0]
80003712:	58 28       	cp.w	r8,2
80003714:	e0 88 00 04 	brls	8000371c <tc_init_waveform+0x20>
    return TC_INVALID_ARGUMENT;
80003718:	3f f8       	mov	r8,-1
8000371a:	c9 78       	rjmp	80003848 <tc_init_waveform+0x14c>

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
8000371c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003720:	70 09       	ld.w	r9,r8[0x0]
80003722:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003726:	70 18       	ld.w	r8,r8[0x4]
80003728:	f1 d8 c3 c2 	bfextu	r8,r8,0x1e,0x2
8000372c:	5c 58       	castu.b	r8
8000372e:	f0 0a 15 1e 	lsl	r10,r8,0x1e
                                  opt->beevt << AVR32_TC_BEEVT_OFFSET |
80003732:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003736:	70 18       	ld.w	r8,r8[0x4]
80003738:	f1 d8 c3 82 	bfextu	r8,r8,0x1c,0x2
8000373c:	5c 58       	castu.b	r8
8000373e:	bd 68       	lsl	r8,0x1c
80003740:	10 4a       	or	r10,r8
                                  opt->bcpc << AVR32_TC_BCPC_OFFSET |
80003742:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003746:	70 18       	ld.w	r8,r8[0x4]
80003748:	f1 d8 c3 42 	bfextu	r8,r8,0x1a,0x2
8000374c:	5c 58       	castu.b	r8
8000374e:	bb 68       	lsl	r8,0x1a
80003750:	10 4a       	or	r10,r8
                                  opt->bcpb << AVR32_TC_BCPB_OFFSET |
80003752:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003756:	70 18       	ld.w	r8,r8[0x4]
80003758:	f1 d8 c3 02 	bfextu	r8,r8,0x18,0x2
8000375c:	5c 58       	castu.b	r8
8000375e:	b9 68       	lsl	r8,0x18
80003760:	10 4a       	or	r10,r8
                                  opt->aswtrg << AVR32_TC_ASWTRG_OFFSET |
80003762:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003766:	70 18       	ld.w	r8,r8[0x4]
80003768:	f1 d8 c2 c2 	bfextu	r8,r8,0x16,0x2
8000376c:	5c 58       	castu.b	r8
8000376e:	b7 68       	lsl	r8,0x16
80003770:	10 4a       	or	r10,r8
                                  opt->aeevt << AVR32_TC_AEEVT_OFFSET |
80003772:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003776:	70 18       	ld.w	r8,r8[0x4]
80003778:	f1 d8 c2 82 	bfextu	r8,r8,0x14,0x2
8000377c:	5c 58       	castu.b	r8
8000377e:	b5 68       	lsl	r8,0x14
80003780:	10 4a       	or	r10,r8
                                  opt->acpc << AVR32_TC_ACPC_OFFSET |
80003782:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003786:	70 18       	ld.w	r8,r8[0x4]
80003788:	f1 d8 c2 42 	bfextu	r8,r8,0x12,0x2
8000378c:	5c 58       	castu.b	r8
8000378e:	b3 68       	lsl	r8,0x12
80003790:	10 4a       	or	r10,r8
                                  opt->acpa << AVR32_TC_ACPA_OFFSET |
80003792:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003796:	70 18       	ld.w	r8,r8[0x4]
80003798:	f1 d8 c2 02 	bfextu	r8,r8,0x10,0x2
8000379c:	5c 58       	castu.b	r8
8000379e:	b1 68       	lsl	r8,0x10
800037a0:	f5 e8 10 08 	or	r8,r10,r8
                                  1 << AVR32_TC_WAVE_OFFSET |
800037a4:	10 9a       	mov	r10,r8
800037a6:	af ba       	sbr	r10,0xf
                                  opt->wavsel << AVR32_TC_WAVSEL_OFFSET |
800037a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037ac:	70 18       	ld.w	r8,r8[0x4]
800037ae:	f1 d8 c1 a2 	bfextu	r8,r8,0xd,0x2
800037b2:	5c 58       	castu.b	r8
800037b4:	ad 78       	lsl	r8,0xd
800037b6:	10 4a       	or	r10,r8
                                  opt->enetrg << AVR32_TC_ENETRG_OFFSET |
800037b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037bc:	70 18       	ld.w	r8,r8[0x4]
800037be:	f1 d8 c1 81 	bfextu	r8,r8,0xc,0x1
800037c2:	5c 58       	castu.b	r8
800037c4:	ad 68       	lsl	r8,0xc
800037c6:	10 4a       	or	r10,r8
                                  opt->eevt << AVR32_TC_EEVT_OFFSET |
800037c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037cc:	70 18       	ld.w	r8,r8[0x4]
800037ce:	f1 d8 c1 42 	bfextu	r8,r8,0xa,0x2
800037d2:	5c 58       	castu.b	r8
800037d4:	ab 68       	lsl	r8,0xa
800037d6:	10 4a       	or	r10,r8
                                  opt->eevtedg << AVR32_TC_EEVTEDG_OFFSET |
800037d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037dc:	70 18       	ld.w	r8,r8[0x4]
800037de:	f1 d8 c1 02 	bfextu	r8,r8,0x8,0x2
800037e2:	5c 58       	castu.b	r8
800037e4:	a9 68       	lsl	r8,0x8
800037e6:	10 4a       	or	r10,r8
                                  opt->cpcdis << AVR32_TC_CPCDIS_OFFSET |
800037e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037ec:	70 18       	ld.w	r8,r8[0x4]
800037ee:	f1 d8 c0 e1 	bfextu	r8,r8,0x7,0x1
800037f2:	5c 58       	castu.b	r8
800037f4:	a7 78       	lsl	r8,0x7
800037f6:	10 4a       	or	r10,r8
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
800037f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800037fc:	70 18       	ld.w	r8,r8[0x4]
800037fe:	f1 d8 c0 c1 	bfextu	r8,r8,0x6,0x1
80003802:	5c 58       	castu.b	r8
80003804:	a7 68       	lsl	r8,0x6
80003806:	10 4a       	or	r10,r8
                                  opt->burst << AVR32_TC_BURST_OFFSET |
80003808:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000380c:	70 18       	ld.w	r8,r8[0x4]
8000380e:	f1 d8 c0 82 	bfextu	r8,r8,0x4,0x2
80003812:	5c 58       	castu.b	r8
80003814:	a5 68       	lsl	r8,0x4
80003816:	10 4a       	or	r10,r8
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
80003818:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000381c:	70 18       	ld.w	r8,r8[0x4]
8000381e:	f1 d8 c0 61 	bfextu	r8,r8,0x3,0x1
80003822:	5c 58       	castu.b	r8
80003824:	a3 78       	lsl	r8,0x3
80003826:	10 4a       	or	r10,r8
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;
80003828:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000382c:	70 18       	ld.w	r8,r8[0x4]
8000382e:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80003832:	5c 58       	castu.b	r8
  // Check for valid input.
  if (opt->channel >= TC_NUMBER_OF_CHANNELS)
    return TC_INVALID_ARGUMENT;

  // GENERATE SIGNALS: Waveform operating mode.
  tc->channel[opt->channel].cmr = opt->bswtrg << AVR32_TC_BSWTRG_OFFSET |
80003834:	f5 e8 10 08 	or	r8,r10,r8
80003838:	10 9a       	mov	r10,r8
8000383a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000383e:	a5 69       	lsl	r9,0x4
80003840:	2f f9       	sub	r9,-1
80003842:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                                  opt->cpcstop << AVR32_TC_CPCSTOP_OFFSET |
                                  opt->burst << AVR32_TC_BURST_OFFSET |
                                  opt->clki << AVR32_TC_CLKI_OFFSET |
                                  opt->tcclks << AVR32_TC_TCCLKS_OFFSET;

  return 0;
80003846:	30 08       	mov	r8,0
}
80003848:	10 9c       	mov	r12,r8
8000384a:	2f ed       	sub	sp,-8
8000384c:	e3 cd 80 80 	ldm	sp++,r7,pc

80003850 <tc_start>:


int tc_start(volatile avr32_tc_t *tc, unsigned int channel)
{
80003850:	eb cd 40 80 	pushm	r7,lr
80003854:	1a 97       	mov	r7,sp
80003856:	20 2d       	sub	sp,8
80003858:	ef 4c ff fc 	st.w	r7[-4],r12
8000385c:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
80003860:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003864:	58 28       	cp.w	r8,2
80003866:	e0 88 00 04 	brls	8000386e <tc_start+0x1e>
    return TC_INVALID_ARGUMENT;
8000386a:	3f f8       	mov	r8,-1
8000386c:	c0 b8       	rjmp	80003882 <tc_start+0x32>

  // Enable, reset and start the selected timer/counter channel.
  tc->channel[channel].ccr = AVR32_TC_SWTRG_MASK | AVR32_TC_CLKEN_MASK;
8000386e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003872:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003876:	a7 68       	lsl	r8,0x6
80003878:	f2 08 00 08 	add	r8,r9,r8
8000387c:	30 59       	mov	r9,5
8000387e:	91 09       	st.w	r8[0x0],r9

  return 0;
80003880:	30 08       	mov	r8,0
}
80003882:	10 9c       	mov	r12,r8
80003884:	2f ed       	sub	sp,-8
80003886:	e3 cd 80 80 	ldm	sp++,r7,pc

8000388a <tc_read_sr>:
  tc->bcr = AVR32_TC_BCR_SYNC_MASK;
}


int tc_read_sr(volatile avr32_tc_t *tc, unsigned int channel)
{
8000388a:	eb cd 40 80 	pushm	r7,lr
8000388e:	1a 97       	mov	r7,sp
80003890:	20 2d       	sub	sp,8
80003892:	ef 4c ff fc 	st.w	r7[-4],r12
80003896:	ef 4b ff f8 	st.w	r7[-8],r11
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
8000389a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000389e:	58 28       	cp.w	r8,2
800038a0:	e0 88 00 04 	brls	800038a8 <tc_read_sr+0x1e>
    return TC_INVALID_ARGUMENT;
800038a4:	3f f8       	mov	r8,-1
800038a6:	c0 b8       	rjmp	800038bc <tc_read_sr+0x32>

  return tc->channel[channel].sr;
800038a8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800038b0:	a1 78       	lsl	r8,0x1
800038b2:	2f f8       	sub	r8,-1
800038b4:	a5 78       	lsl	r8,0x5
800038b6:	f2 08 00 08 	add	r8,r9,r8
800038ba:	70 08       	ld.w	r8,r8[0x0]
}
800038bc:	10 9c       	mov	r12,r8
800038be:	2f ed       	sub	sp,-8
800038c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800038c4 <tc_write_rc>:
  return value;
}


int tc_write_rc(volatile avr32_tc_t *tc, unsigned int channel, unsigned short value)
{
800038c4:	eb cd 40 80 	pushm	r7,lr
800038c8:	1a 97       	mov	r7,sp
800038ca:	20 3d       	sub	sp,12
800038cc:	ef 4c ff fc 	st.w	r7[-4],r12
800038d0:	ef 4b ff f8 	st.w	r7[-8],r11
800038d4:	14 98       	mov	r8,r10
800038d6:	ef 58 ff f4 	st.h	r7[-12],r8
  // Check for valid input.
  if (channel >= TC_NUMBER_OF_CHANNELS)
800038da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800038de:	58 28       	cp.w	r8,2
800038e0:	e0 88 00 04 	brls	800038e8 <tc_write_rc+0x24>
    return TC_INVALID_ARGUMENT;
800038e4:	3f f8       	mov	r8,-1
800038e6:	c2 78       	rjmp	80003934 <tc_write_rc+0x70>

  // This function is only available in WAVEFORM mode.
  if (Tst_bits(tc->channel[channel].cmr, AVR32_TC_WAVE_MASK))
800038e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800038ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800038f0:	a5 69       	lsl	r9,0x4
800038f2:	2f f9       	sub	r9,-1
800038f4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800038f8:	e2 18 80 00 	andl	r8,0x8000,COH
800038fc:	c1 a0       	breq	80003930 <tc_write_rc+0x6c>
    Wr_bitfield(tc->channel[channel].rc, AVR32_TC_RC_MASK, value);
800038fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003902:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003906:	ee fa ff fc 	ld.w	r10,r7[-4]
8000390a:	a7 69       	lsl	r9,0x6
8000390c:	f4 09 00 09 	add	r9,r10,r9
80003910:	2e 49       	sub	r9,-28
80003912:	72 09       	ld.w	r9,r9[0x0]
80003914:	12 9a       	mov	r10,r9
80003916:	e0 1a 00 00 	andl	r10,0x0
8000391a:	ef 19 ff f4 	ld.uh	r9,r7[-12]
8000391e:	f5 e9 10 09 	or	r9,r10,r9
80003922:	ee fa ff fc 	ld.w	r10,r7[-4]
80003926:	a7 68       	lsl	r8,0x6
80003928:	f4 08 00 08 	add	r8,r10,r8
8000392c:	2e 48       	sub	r8,-28
8000392e:	91 09       	st.w	r8[0x0],r9

  return value;
80003930:	ef 18 ff f4 	ld.uh	r8,r7[-12]
}
80003934:	10 9c       	mov	r12,r8
80003936:	2f dd       	sub	sp,-12
80003938:	e3 cd 80 80 	ldm	sp++,r7,pc

8000393c <fat_check_device>:
//! @verbatim
//! This function updates all navigator data when the device state change.
//! @endverbatim
//!
bool  fat_check_device( void )
{
8000393c:	eb cd 40 80 	pushm	r7,lr
80003940:	1a 97       	mov	r7,sp
80003942:	20 2d       	sub	sp,8
   uint8_t retry=0;
80003944:	30 08       	mov	r8,0
80003946:	ef 68 ff fa 	st.b	r7[-6],r8
   uint8_t i;
#endif
   Ctrl_status status;

   // Possibility to ignore the disk check. Used to take time during multi read/write access
   if( g_b_no_check_disk )
8000394a:	4c 18       	lddpc	r8,80003a4c <fat_check_device+0x110>
8000394c:	11 88       	ld.ub	r8,r8[0x0]
8000394e:	58 08       	cp.w	r8,0
80003950:	c0 30       	breq	80003956 <fat_check_device+0x1a>
      return true;
80003952:	30 18       	mov	r8,1
80003954:	c7 78       	rjmp	80003a42 <fat_check_device+0x106>

   if( 0xFF == fs_g_nav.u8_lun )
80003956:	4b f8       	lddpc	r8,80003a50 <fat_check_device+0x114>
80003958:	11 89       	ld.ub	r9,r8[0x0]
8000395a:	3f f8       	mov	r8,-1
8000395c:	f0 09 18 00 	cp.b	r9,r8
80003960:	c0 61       	brne	8000396c <fat_check_device+0x30>
   {
      fs_g_status = FS_ERR_HW;
80003962:	4b d9       	lddpc	r9,80003a54 <fat_check_device+0x118>
80003964:	30 18       	mov	r8,1
80003966:	b2 88       	st.b	r9[0x0],r8
      return false;                                // No device selected
80003968:	30 08       	mov	r8,0
8000396a:	c6 c8       	rjmp	80003a42 <fat_check_device+0x106>
   }

   for( retry=0 ; retry<100 ; retry++ )
8000396c:	30 08       	mov	r8,0
8000396e:	ef 68 ff fa 	st.b	r7[-6],r8
80003972:	c5 e8       	rjmp	80003a2e <fat_check_device+0xf2>
   {
      // Check device
      status = mem_test_unit_ready( fs_g_nav.u8_lun );
80003974:	4b 78       	lddpc	r8,80003a50 <fat_check_device+0x114>
80003976:	11 88       	ld.ub	r8,r8[0x0]
80003978:	10 9c       	mov	r12,r8
8000397a:	f0 1f 00 38 	mcall	80003a58 <fat_check_device+0x11c>
8000397e:	18 98       	mov	r8,r12
80003980:	ef 48 ff fc 	st.w	r7[-4],r8
      if( CTRL_GOOD       == status )
80003984:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003988:	58 08       	cp.w	r8,0
8000398a:	c0 31       	brne	80003990 <fat_check_device+0x54>
         return true;                              // drive ready
8000398c:	30 18       	mov	r8,1
8000398e:	c5 a8       	rjmp	80003a42 <fat_check_device+0x106>

      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
80003990:	4b 39       	lddpc	r9,80003a5c <fat_check_device+0x120>
80003992:	30 08       	mov	r8,0
80003994:	b2 88       	st.b	r9[0x0],r8
      Fat_file_close();                            // By default the file is not open
80003996:	4b 39       	lddpc	r9,80003a60 <fat_check_device+0x124>
80003998:	30 08       	mov	r8,0
8000399a:	b2 88       	st.b	r9[0x0],r8
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
8000399c:	30 08       	mov	r8,0
8000399e:	ef 68 ff fb 	st.b	r7[-5],r8
800039a2:	c2 08       	rjmp	800039e2 <fat_check_device+0xa6>
      {
         if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
800039a4:	4a b8       	lddpc	r8,80003a50 <fat_check_device+0x114>
800039a6:	11 89       	ld.ub	r9,r8[0x0]
800039a8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800039ac:	4a ea       	lddpc	r10,80003a64 <fat_check_device+0x128>
800039ae:	f0 08 10 34 	mul	r8,r8,52
800039b2:	f4 08 00 08 	add	r8,r10,r8
800039b6:	11 88       	ld.ub	r8,r8[0x0]
800039b8:	f0 09 18 00 	cp.b	r9,r8
800039bc:	c0 e1       	brne	800039d8 <fat_check_device+0x9c>
         {
            fs_g_navext_fast[i].u8_type_fat     = FS_TYPE_FAT_UNM;   // By default the fat isn't mounted
800039be:	ef 3a ff fb 	ld.ub	r10,r7[-5]
800039c2:	4a a9       	lddpc	r9,80003a68 <fat_check_device+0x12c>
800039c4:	30 08       	mov	r8,0
800039c6:	f2 0a 0b 28 	st.b	r9[r10<<0x2],r8
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
800039ca:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800039ce:	4a 89       	lddpc	r9,80003a6c <fat_check_device+0x130>
800039d0:	a5 68       	lsl	r8,0x4
800039d2:	10 09       	add	r9,r8
800039d4:	30 08       	mov	r8,0
800039d6:	b2 88       	st.b	r9[0x0],r8
      //* HERE error or state change
      // Clean all navigator data which use this device
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
      Fat_file_close();                            // By default the file is not open
#if (FS_NB_NAVIGATOR > 1)
      for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
800039d8:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800039dc:	2f f8       	sub	r8,-1
800039de:	ef 68 ff fb 	st.b	r7[-5],r8
800039e2:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800039e6:	30 18       	mov	r8,1
800039e8:	f0 09 18 00 	cp.b	r9,r8
800039ec:	cd c1       	brne	800039a4 <fat_check_device+0x68>
            fs_g_navext_entry[i].u8_open_mode   = 0;                 // By default the file is not open
         }
      }
#endif
      // If the internal cache corresponding at device then clean it
      if( fs_g_nav.u8_lun == fs_g_sectorcache.u8_lun )
800039ee:	49 98       	lddpc	r8,80003a50 <fat_check_device+0x114>
800039f0:	11 89       	ld.ub	r9,r8[0x0]
800039f2:	4a 08       	lddpc	r8,80003a70 <fat_check_device+0x134>
800039f4:	11 88       	ld.ub	r8,r8[0x0]
800039f6:	f0 09 18 00 	cp.b	r9,r8
800039fa:	c0 31       	brne	80003a00 <fat_check_device+0xc4>
      {
         fat_cache_reset();
800039fc:	f0 1f 00 1e 	mcall	80003a74 <fat_check_device+0x138>
      }
      fat_cache_clusterlist_reset();
80003a00:	f0 1f 00 1e 	mcall	80003a78 <fat_check_device+0x13c>

      fs_g_status = FS_ERR_HW;                     // By default HW error
80003a04:	49 49       	lddpc	r9,80003a54 <fat_check_device+0x118>
80003a06:	30 18       	mov	r8,1
80003a08:	b2 88       	st.b	r9[0x0],r8
      if( CTRL_BUSY == status )
80003a0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a0e:	58 38       	cp.w	r8,3
80003a10:	c0 71       	brne	80003a1e <fat_check_device+0xe2>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80003a12:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80003a16:	2f f8       	sub	r8,-1
80003a18:	ef 68 ff fa 	st.b	r7[-6],r8
80003a1c:	c0 98       	rjmp	80003a2e <fat_check_device+0xf2>

      fs_g_status = FS_ERR_HW;                     // By default HW error
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
80003a1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003a22:	58 28       	cp.w	r8,2
80003a24:	c0 d1       	brne	80003a3e <fat_check_device+0x102>
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
80003a26:	48 c9       	lddpc	r9,80003a54 <fat_check_device+0x118>
80003a28:	31 88       	mov	r8,24
80003a2a:	b2 88       	st.b	r9[0x0],r8
      break;                                       // FAIL or NOT PRESENT = fatal error = no retry
80003a2c:	c0 a8       	rjmp	80003a40 <fat_check_device+0x104>
   {
      fs_g_status = FS_ERR_HW;
      return false;                                // No device selected
   }

   for( retry=0 ; retry<100 ; retry++ )
80003a2e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80003a32:	36 38       	mov	r8,99
80003a34:	f0 09 18 00 	cp.b	r9,r8
80003a38:	fe 98 ff 9e 	brls	80003974 <fat_check_device+0x38>
80003a3c:	c0 28       	rjmp	80003a40 <fat_check_device+0x104>
      if( CTRL_BUSY == status )
         continue;                                 // If device busy then retry

      if( CTRL_NO_PRESENT == status )
         fs_g_status = FS_ERR_HW_NO_PRESENT;       // Update error flag
      break;                                       // FAIL or NOT PRESENT = fatal error = no retry
80003a3e:	d7 03       	nop
   }
   return false;
80003a40:	30 08       	mov	r8,0
}
80003a42:	10 9c       	mov	r12,r8
80003a44:	2f ed       	sub	sp,-8
80003a46:	e3 cd 80 80 	ldm	sp++,r7,pc
80003a4a:	00 00       	add	r0,r0
80003a4c:	00 00       	add	r0,r0
80003a4e:	0f 22       	ld.uh	r2,r7++
80003a50:	00 00       	add	r0,r0
80003a52:	11 50       	ld.sh	r0,--r8
80003a54:	00 00       	add	r0,r0
80003a56:	11 a0       	ld.ub	r0,r8[0x2]
80003a58:	80 00       	ld.sh	r0,r0[0x0]
80003a5a:	5b 64       	cp.w	r4,-10
80003a5c:	00 00       	add	r0,r0
80003a5e:	11 9c       	ld.ub	r12,r8[0x1]
80003a60:	00 00       	add	r0,r0
80003a62:	0f 10       	ld.sh	r0,r7++
80003a64:	00 00       	add	r0,r0
80003a66:	11 a4       	ld.ub	r4,r8[0x2]
80003a68:	00 00       	add	r0,r0
80003a6a:	11 98       	ld.ub	r8,r8[0x1]
80003a6c:	00 00       	add	r0,r0
80003a6e:	11 88       	ld.ub	r8,r8[0x0]
80003a70:	00 00       	add	r0,r0
80003a72:	11 d8       	ld.ub	r8,r8[0x5]
80003a74:	80 00       	ld.sh	r0,r0[0x0]
80003a76:	58 6c       	cp.w	r12,6
80003a78:	80 00       	ld.sh	r0,r0[0x0]
80003a7a:	47 14       	lddsp	r4,sp[0x1c4]

80003a7c <fat_check_mount>:
//!
//! @return    true  partition mounted
//! @return    false otherwise
//!
bool  fat_check_mount( void )
{
80003a7c:	eb cd 40 80 	pushm	r7,lr
80003a80:	1a 97       	mov	r7,sp
   if( !fat_check_device() )
80003a82:	f0 1f 00 0f 	mcall	80003abc <fat_check_mount+0x40>
80003a86:	18 98       	mov	r8,r12
80003a88:	ec 18 00 01 	eorl	r8,0x1
80003a8c:	5c 58       	castu.b	r8
80003a8e:	c0 30       	breq	80003a94 <fat_check_mount+0x18>
      return false;
80003a90:	30 08       	mov	r8,0
80003a92:	c1 28       	rjmp	80003ab6 <fat_check_mount+0x3a>
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80003a94:	48 b8       	lddpc	r8,80003ac0 <fat_check_mount+0x44>
80003a96:	11 88       	ld.ub	r8,r8[0x0]
80003a98:	58 08       	cp.w	r8,0
80003a9a:	c0 d1       	brne	80003ab4 <fat_check_mount+0x38>
   {
      if( !fat_mount() )
80003a9c:	f0 1f 00 0a 	mcall	80003ac4 <fat_check_mount+0x48>
80003aa0:	18 98       	mov	r8,r12
80003aa2:	ec 18 00 01 	eorl	r8,0x1
80003aa6:	5c 58       	castu.b	r8
80003aa8:	c0 60       	breq	80003ab4 <fat_check_mount+0x38>
      {
         fs_g_status = FS_ERR_NO_MOUNT;
80003aaa:	48 89       	lddpc	r9,80003ac8 <fat_check_mount+0x4c>
80003aac:	30 e8       	mov	r8,14
80003aae:	b2 88       	st.b	r9[0x0],r8
         return false;
80003ab0:	30 08       	mov	r8,0
80003ab2:	c0 28       	rjmp	80003ab6 <fat_check_mount+0x3a>
      }
   }
   return true;
80003ab4:	30 18       	mov	r8,1
}
80003ab6:	10 9c       	mov	r12,r8
80003ab8:	e3 cd 80 80 	ldm	sp++,r7,pc
80003abc:	80 00       	ld.sh	r0,r0[0x0]
80003abe:	39 3c       	mov	r12,-109
80003ac0:	00 00       	add	r0,r0
80003ac2:	11 9c       	ld.ub	r12,r8[0x1]
80003ac4:	80 00       	ld.sh	r0,r0[0x0]
80003ac6:	5c cc       	swap.bh	r12
80003ac8:	00 00       	add	r0,r0
80003aca:	11 a0       	ld.ub	r0,r8[0x2]

80003acc <fat_check_noopen>:
//!
//! @return    true  no file opened
//! @return    false otherwise
//!
bool  fat_check_noopen( void )
{
80003acc:	eb cd 40 80 	pushm	r7,lr
80003ad0:	1a 97       	mov	r7,sp
   if( !fat_check_device() )
80003ad2:	f0 1f 00 0f 	mcall	80003b0c <fat_check_noopen+0x40>
80003ad6:	18 98       	mov	r8,r12
80003ad8:	ec 18 00 01 	eorl	r8,0x1
80003adc:	5c 58       	castu.b	r8
80003ade:	c0 30       	breq	80003ae4 <fat_check_noopen+0x18>
      return true;
80003ae0:	30 18       	mov	r8,1
80003ae2:	c1 18       	rjmp	80003b04 <fat_check_noopen+0x38>
   if (FS_TYPE_FAT_UNM == fs_g_nav_fast.u8_type_fat)
80003ae4:	48 b8       	lddpc	r8,80003b10 <fat_check_noopen+0x44>
80003ae6:	11 88       	ld.ub	r8,r8[0x0]
80003ae8:	58 08       	cp.w	r8,0
80003aea:	c0 31       	brne	80003af0 <fat_check_noopen+0x24>
      return true;
80003aec:	30 18       	mov	r8,1
80003aee:	c0 b8       	rjmp	80003b04 <fat_check_noopen+0x38>
   if( Fat_file_is_open() )
80003af0:	48 98       	lddpc	r8,80003b14 <fat_check_noopen+0x48>
80003af2:	11 88       	ld.ub	r8,r8[0x0]
80003af4:	58 08       	cp.w	r8,0
80003af6:	c0 60       	breq	80003b02 <fat_check_noopen+0x36>
   {
      fs_g_status = FS_ERR_TOO_FILE_OPEN;  // The navigation have already open a file
80003af8:	48 89       	lddpc	r9,80003b18 <fat_check_noopen+0x4c>
80003afa:	30 58       	mov	r8,5
80003afc:	b2 88       	st.b	r9[0x0],r8
      return false;
80003afe:	30 08       	mov	r8,0
80003b00:	c0 28       	rjmp	80003b04 <fat_check_noopen+0x38>
   }
   return true;
80003b02:	30 18       	mov	r8,1
}
80003b04:	10 9c       	mov	r12,r8
80003b06:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b0a:	00 00       	add	r0,r0
80003b0c:	80 00       	ld.sh	r0,r0[0x0]
80003b0e:	39 3c       	mov	r12,-109
80003b10:	00 00       	add	r0,r0
80003b12:	11 9c       	ld.ub	r12,r8[0x1]
80003b14:	00 00       	add	r0,r0
80003b16:	0f 10       	ld.sh	r0,r7++
80003b18:	00 00       	add	r0,r0
80003b1a:	11 a0       	ld.ub	r0,r8[0x2]

80003b1c <fat_check_open>:
//!
//! @return    true  a file is opened
//! @return    false otherwise
//!
bool  fat_check_open( void )
{
80003b1c:	eb cd 40 80 	pushm	r7,lr
80003b20:	1a 97       	mov	r7,sp
   if( Fat_file_isnot_open() )
80003b22:	48 78       	lddpc	r8,80003b3c <fat_check_open+0x20>
80003b24:	11 88       	ld.ub	r8,r8[0x0]
80003b26:	58 08       	cp.w	r8,0
80003b28:	c0 61       	brne	80003b34 <fat_check_open+0x18>
   {
      fs_g_status = FS_ERR_FILE_NO_OPEN;
80003b2a:	48 69       	lddpc	r9,80003b40 <fat_check_open+0x24>
80003b2c:	31 78       	mov	r8,23
80003b2e:	b2 88       	st.b	r9[0x0],r8
      return false;
80003b30:	30 08       	mov	r8,0
80003b32:	c0 28       	rjmp	80003b36 <fat_check_open+0x1a>
   }
   return true;
80003b34:	30 18       	mov	r8,1
}
80003b36:	10 9c       	mov	r12,r8
80003b38:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b3c:	00 00       	add	r0,r0
80003b3e:	0f 10       	ld.sh	r0,r7++
80003b40:	00 00       	add	r0,r0
80003b42:	11 a0       	ld.ub	r0,r8[0x2]

80003b44 <fat_check_select>:
//!
//! @return    true  a file is selected
//! @return    false otherwise
//!
bool  fat_check_select( void )
{
80003b44:	eb cd 40 80 	pushm	r7,lr
80003b48:	1a 97       	mov	r7,sp
   if (FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file)
80003b4a:	48 88       	lddpc	r8,80003b68 <fat_check_select+0x24>
80003b4c:	90 19       	ld.sh	r9,r8[0x2]
80003b4e:	3f f8       	mov	r8,-1
80003b50:	f0 09 19 00 	cp.h	r9,r8
80003b54:	c0 61       	brne	80003b60 <fat_check_select+0x1c>
   {
      fs_g_status = FS_ERR_NO_FILE_SEL;
80003b56:	48 69       	lddpc	r9,80003b6c <fat_check_select+0x28>
80003b58:	30 f8       	mov	r8,15
80003b5a:	b2 88       	st.b	r9[0x0],r8
      return false;
80003b5c:	30 08       	mov	r8,0
80003b5e:	c0 28       	rjmp	80003b62 <fat_check_select+0x1e>
   }
   return true;
80003b60:	30 18       	mov	r8,1
}
80003b62:	10 9c       	mov	r12,r8
80003b64:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b68:	00 00       	add	r0,r0
80003b6a:	11 9c       	ld.ub	r12,r8[0x1]
80003b6c:	00 00       	add	r0,r0
80003b6e:	11 a0       	ld.ub	r0,r8[0x2]

80003b70 <fat_check_mount_noopen>:
//!
//! @return    true  partition mounted and no file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_noopen( void )
{
80003b70:	eb cd 40 80 	pushm	r7,lr
80003b74:	1a 97       	mov	r7,sp
   if( !fat_check_mount() )
80003b76:	f0 1f 00 08 	mcall	80003b94 <fat_check_mount_noopen+0x24>
80003b7a:	18 98       	mov	r8,r12
80003b7c:	ec 18 00 01 	eorl	r8,0x1
80003b80:	5c 58       	castu.b	r8
80003b82:	c0 30       	breq	80003b88 <fat_check_mount_noopen+0x18>
      return false;
80003b84:	30 08       	mov	r8,0
80003b86:	c0 48       	rjmp	80003b8e <fat_check_mount_noopen+0x1e>
   return fat_check_noopen();
80003b88:	f0 1f 00 04 	mcall	80003b98 <fat_check_mount_noopen+0x28>
80003b8c:	18 98       	mov	r8,r12
}
80003b8e:	10 9c       	mov	r12,r8
80003b90:	e3 cd 80 80 	ldm	sp++,r7,pc
80003b94:	80 00       	ld.sh	r0,r0[0x0]
80003b96:	3a 7c       	mov	r12,-89
80003b98:	80 00       	ld.sh	r0,r0[0x0]
80003b9a:	3a cc       	mov	r12,-84

80003b9c <fat_check_mount_select_noopen>:
//!
//! @return    true  partition mounted and no file is opened and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select_noopen( void )
{
80003b9c:	eb cd 40 80 	pushm	r7,lr
80003ba0:	1a 97       	mov	r7,sp
   if( !fat_check_mount() )
80003ba2:	f0 1f 00 0d 	mcall	80003bd4 <fat_check_mount_select_noopen+0x38>
80003ba6:	18 98       	mov	r8,r12
80003ba8:	ec 18 00 01 	eorl	r8,0x1
80003bac:	5c 58       	castu.b	r8
80003bae:	c0 30       	breq	80003bb4 <fat_check_mount_select_noopen+0x18>
      return false;
80003bb0:	30 08       	mov	r8,0
80003bb2:	c0 d8       	rjmp	80003bcc <fat_check_mount_select_noopen+0x30>
   if( !fat_check_select() )
80003bb4:	f0 1f 00 09 	mcall	80003bd8 <fat_check_mount_select_noopen+0x3c>
80003bb8:	18 98       	mov	r8,r12
80003bba:	ec 18 00 01 	eorl	r8,0x1
80003bbe:	5c 58       	castu.b	r8
80003bc0:	c0 30       	breq	80003bc6 <fat_check_mount_select_noopen+0x2a>
      return false;
80003bc2:	30 08       	mov	r8,0
80003bc4:	c0 48       	rjmp	80003bcc <fat_check_mount_select_noopen+0x30>
   return fat_check_noopen();
80003bc6:	f0 1f 00 06 	mcall	80003bdc <fat_check_mount_select_noopen+0x40>
80003bca:	18 98       	mov	r8,r12
}
80003bcc:	10 9c       	mov	r12,r8
80003bce:	e3 cd 80 80 	ldm	sp++,r7,pc
80003bd2:	00 00       	add	r0,r0
80003bd4:	80 00       	ld.sh	r0,r0[0x0]
80003bd6:	3a 7c       	mov	r12,-89
80003bd8:	80 00       	ld.sh	r0,r0[0x0]
80003bda:	3b 44       	mov	r4,-76
80003bdc:	80 00       	ld.sh	r0,r0[0x0]
80003bde:	3a cc       	mov	r12,-84

80003be0 <fat_check_mount_select_open>:
//!
//! @return    true  partition mounted and a file is opened
//! @return    false otherwise
//!
bool  fat_check_mount_select_open( void )
{
80003be0:	eb cd 40 80 	pushm	r7,lr
80003be4:	1a 97       	mov	r7,sp
   if( !fat_check_mount() )
80003be6:	f0 1f 00 0d 	mcall	80003c18 <fat_check_mount_select_open+0x38>
80003bea:	18 98       	mov	r8,r12
80003bec:	ec 18 00 01 	eorl	r8,0x1
80003bf0:	5c 58       	castu.b	r8
80003bf2:	c0 30       	breq	80003bf8 <fat_check_mount_select_open+0x18>
      return false;
80003bf4:	30 08       	mov	r8,0
80003bf6:	c0 d8       	rjmp	80003c10 <fat_check_mount_select_open+0x30>
   if( !fat_check_select() )
80003bf8:	f0 1f 00 09 	mcall	80003c1c <fat_check_mount_select_open+0x3c>
80003bfc:	18 98       	mov	r8,r12
80003bfe:	ec 18 00 01 	eorl	r8,0x1
80003c02:	5c 58       	castu.b	r8
80003c04:	c0 30       	breq	80003c0a <fat_check_mount_select_open+0x2a>
      return false;
80003c06:	30 08       	mov	r8,0
80003c08:	c0 48       	rjmp	80003c10 <fat_check_mount_select_open+0x30>
   return fat_check_open();
80003c0a:	f0 1f 00 06 	mcall	80003c20 <fat_check_mount_select_open+0x40>
80003c0e:	18 98       	mov	r8,r12
}
80003c10:	10 9c       	mov	r12,r8
80003c12:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c16:	00 00       	add	r0,r0
80003c18:	80 00       	ld.sh	r0,r0[0x0]
80003c1a:	3a 7c       	mov	r12,-89
80003c1c:	80 00       	ld.sh	r0,r0[0x0]
80003c1e:	3b 44       	mov	r4,-76
80003c20:	80 00       	ld.sh	r0,r0[0x0]
80003c22:	3b 1c       	mov	r12,-79

80003c24 <fat_check_mount_select>:
//!
//! @return    true  partition mounted and a file is selected
//! @return    false otherwise
//!
bool  fat_check_mount_select( void )
{
80003c24:	eb cd 40 80 	pushm	r7,lr
80003c28:	1a 97       	mov	r7,sp
   if( !fat_check_mount() )
80003c2a:	f0 1f 00 08 	mcall	80003c48 <fat_check_mount_select+0x24>
80003c2e:	18 98       	mov	r8,r12
80003c30:	ec 18 00 01 	eorl	r8,0x1
80003c34:	5c 58       	castu.b	r8
80003c36:	c0 30       	breq	80003c3c <fat_check_mount_select+0x18>
      return false;
80003c38:	30 08       	mov	r8,0
80003c3a:	c0 48       	rjmp	80003c42 <fat_check_mount_select+0x1e>
   return fat_check_select();
80003c3c:	f0 1f 00 04 	mcall	80003c4c <fat_check_mount_select+0x28>
80003c40:	18 98       	mov	r8,r12
}
80003c42:	10 9c       	mov	r12,r8
80003c44:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c48:	80 00       	ld.sh	r0,r0[0x0]
80003c4a:	3a 7c       	mov	r12,-89
80003c4c:	80 00       	ld.sh	r0,r0[0x0]
80003c4e:	3b 44       	mov	r4,-76

80003c50 <fat_check_is_file>:
//!
//! @return    true  It is a file and not a directory
//! @return    false otherwise
//!
bool  fat_check_is_file( void )
{
80003c50:	eb cd 40 80 	pushm	r7,lr
80003c54:	1a 97       	mov	r7,sp
   if( Fat_is_not_a_file )
80003c56:	48 a8       	lddpc	r8,80003c7c <fat_check_is_file+0x2c>
80003c58:	11 a8       	ld.ub	r8,r8[0x2]
80003c5a:	e2 18 00 10 	andl	r8,0x10,COH
80003c5e:	c0 61       	brne	80003c6a <fat_check_is_file+0x1a>
80003c60:	48 78       	lddpc	r8,80003c7c <fat_check_is_file+0x2c>
80003c62:	11 a8       	ld.ub	r8,r8[0x2]
80003c64:	e2 18 00 08 	andl	r8,0x8,COH
80003c68:	c0 60       	breq	80003c74 <fat_check_is_file+0x24>
   {
      fs_g_status = FS_ERR_NO_FILE;   // It isn't a file, it is a directory or a volume id
80003c6a:	48 69       	lddpc	r9,80003c80 <fat_check_is_file+0x30>
80003c6c:	31 38       	mov	r8,19
80003c6e:	b2 88       	st.b	r9[0x0],r8
      return false;
80003c70:	30 08       	mov	r8,0
80003c72:	c0 28       	rjmp	80003c76 <fat_check_is_file+0x26>
   }
   return true;
80003c74:	30 18       	mov	r8,1
}
80003c76:	10 9c       	mov	r12,r8
80003c78:	e3 cd 80 80 	ldm	sp++,r7,pc
80003c7c:	00 00       	add	r0,r0
80003c7e:	0f 10       	ld.sh	r0,r7++
80003c80:	00 00       	add	r0,r0
80003c82:	11 a0       	ld.ub	r0,r8[0x2]

80003c84 <fat_cluster_list>:
//!   fs_g_seg.u32_addr          The memory segment address corresponding at the beginning of cluster list (only for action FS_CLUST_ACT_SEG & FS_CLUST_ACT_ONE)
//!   fs_g_seg.u32_size_or_pos   The memory segment size corresponding at cluster list read or cleared (unit 512B)
//! @endverbatim
//!
bool  fat_cluster_list( uint8_t opt_action, bool b_for_file )
{
80003c84:	eb cd 40 80 	pushm	r7,lr
80003c88:	1a 97       	mov	r7,sp
80003c8a:	20 4d       	sub	sp,16
80003c8c:	18 99       	mov	r9,r12
80003c8e:	16 98       	mov	r8,r11
80003c90:	ef 69 ff f4 	st.b	r7[-12],r9
80003c94:	ef 68 ff f0 	st.b	r7[-16],r8
   _MEM_TYPE_FAST_ uint32_t u32_tmp;
   _MEM_TYPE_FAST_ uint8_t u8_cluster_status;

   fs_g_status = FS_ERR_FS;      // By default system error
80003c98:	fe f9 04 58 	ld.w	r9,pc[1112]
80003c9c:	30 88       	mov	r8,8
80003c9e:	b2 88       	st.b	r9[0x0],r8

   if(  Is_fat32
80003ca0:	fe f8 04 54 	ld.w	r8,pc[1108]
80003ca4:	11 89       	ld.ub	r9,r8[0x0]
80003ca6:	30 38       	mov	r8,3
80003ca8:	f0 09 18 00 	cp.b	r9,r8
80003cac:	c1 21       	brne	80003cd0 <fat_cluster_list+0x4c>
80003cae:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003cb2:	30 38       	mov	r8,3
80003cb4:	f0 09 18 00 	cp.b	r9,r8
80003cb8:	c0 c1       	brne	80003cd0 <fat_cluster_list+0x4c>
   &&  (FS_CLUST_ACT_CLR == opt_action) )
   {
#if (FSFEATURE_WRITE_COMPLET == (FS_LEVEL_FEATURES & FSFEATURE_WRITE_COMPLET) )
      // Clear free space information storage in FAT32
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80003cba:	3f fc       	mov	r12,-1
80003cbc:	f0 1f 01 0f 	mcall	800040f8 <fat_cluster_list+0x474>
80003cc0:	18 98       	mov	r8,r12
80003cc2:	ec 18 00 01 	eorl	r8,0x1
80003cc6:	5c 58       	castu.b	r8
80003cc8:	c0 40       	breq	80003cd0 <fat_cluster_list+0x4c>
         return false;
80003cca:	30 08       	mov	r8,0
80003ccc:	e0 8f 02 0d 	bral	800040e6 <fat_cluster_list+0x462>
#else
      return false;
#endif
   }

   if ( 0 == fs_g_seg.u32_addr )
80003cd0:	fe f8 04 2c 	ld.w	r8,pc[1068]
80003cd4:	70 08       	ld.w	r8,r8[0x0]
80003cd6:	58 08       	cp.w	r8,0
80003cd8:	c5 71       	brne	80003d86 <fat_cluster_list+0x102>
   {
      // Cluster list of root directory
      if( FS_CLUST_ACT_CLR == opt_action )
80003cda:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003cde:	30 38       	mov	r8,3
80003ce0:	f0 09 18 00 	cp.b	r9,r8
80003ce4:	c0 41       	brne	80003cec <fat_cluster_list+0x68>
         return false;           // Impossible to erase ROOT DIR
80003ce6:	30 08       	mov	r8,0
80003ce8:	e0 8f 01 ff 	bral	800040e6 <fat_cluster_list+0x462>

      if ( Is_fat12 || Is_fat16 )
80003cec:	fe f8 04 08 	ld.w	r8,pc[1032]
80003cf0:	11 89       	ld.ub	r9,r8[0x0]
80003cf2:	30 18       	mov	r8,1
80003cf4:	f0 09 18 00 	cp.b	r9,r8
80003cf8:	c0 80       	breq	80003d08 <fat_cluster_list+0x84>
80003cfa:	fe f8 03 fa 	ld.w	r8,pc[1018]
80003cfe:	11 89       	ld.ub	r9,r8[0x0]
80003d00:	30 28       	mov	r8,2
80003d02:	f0 09 18 00 	cp.b	r9,r8
80003d06:	c3 21       	brne	80003d6a <fat_cluster_list+0xe6>
      {
         // For a FAT 12 & 16, the root dir isn't a cluster list
         // Check the position
         if ( fs_g_seg.u32_size_or_pos < fs_g_nav.rootdir.seg.u16_size )
80003d08:	fe f8 03 f4 	ld.w	r8,pc[1012]
80003d0c:	70 19       	ld.w	r9,r8[0x4]
80003d0e:	fe f8 03 f2 	ld.w	r8,pc[1010]
80003d12:	f1 08 00 1a 	ld.sh	r8,r8[26]
80003d16:	5c 78       	castu.h	r8
80003d18:	10 39       	cp.w	r9,r8
80003d1a:	c2 12       	brcc	80003d5c <fat_cluster_list+0xd8>
         {
            // Compute the start address and the size
            fs_g_seg.u32_addr = fs_g_nav.u32_ptr_fat + fs_g_nav.rootdir.seg.u16_pos + fs_g_seg.u32_size_or_pos;
80003d1c:	fe f8 03 e4 	ld.w	r8,pc[996]
80003d20:	70 49       	ld.w	r9,r8[0x10]
80003d22:	fe f8 03 de 	ld.w	r8,pc[990]
80003d26:	f1 08 00 18 	ld.sh	r8,r8[24]
80003d2a:	5c 78       	castu.h	r8
80003d2c:	10 09       	add	r9,r8
80003d2e:	fe f8 03 ce 	ld.w	r8,pc[974]
80003d32:	70 18       	ld.w	r8,r8[0x4]
80003d34:	10 09       	add	r9,r8
80003d36:	fe f8 03 c6 	ld.w	r8,pc[966]
80003d3a:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = fs_g_nav.rootdir.seg.u16_size - fs_g_seg.u32_size_or_pos;
80003d3c:	fe f8 03 c4 	ld.w	r8,pc[964]
80003d40:	f1 08 00 1a 	ld.sh	r8,r8[26]
80003d44:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80003d48:	fe f8 03 b4 	ld.w	r8,pc[948]
80003d4c:	70 18       	ld.w	r8,r8[0x4]
80003d4e:	10 19       	sub	r9,r8
80003d50:	fe f8 03 ac 	ld.w	r8,pc[940]
80003d54:	91 19       	st.w	r8[0x4],r9
            return true;
80003d56:	30 18       	mov	r8,1
80003d58:	e0 8f 01 c7 	bral	800040e6 <fat_cluster_list+0x462>
         } else {
            fs_g_status = FS_ERR_OUT_LIST;
80003d5c:	fe f9 03 94 	ld.w	r9,pc[916]
80003d60:	31 a8       	mov	r8,26
80003d62:	b2 88       	st.b	r9[0x0],r8
            return false;        // Position outside the root area
80003d64:	30 08       	mov	r8,0
80003d66:	e0 8f 01 c0 	bral	800040e6 <fat_cluster_list+0x462>
         }
      }
      if ( Is_fat32 )
80003d6a:	fe f8 03 8a 	ld.w	r8,pc[906]
80003d6e:	11 89       	ld.ub	r9,r8[0x0]
80003d70:	30 38       	mov	r8,3
80003d72:	f0 09 18 00 	cp.b	r9,r8
80003d76:	c0 e1       	brne	80003d92 <fat_cluster_list+0x10e>
      {
         // For FAT 32, the root is a cluster list and the first cluster is reading during the mount
         fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80003d78:	fe f8 03 88 	ld.w	r8,pc[904]
80003d7c:	70 69       	ld.w	r9,r8[0x18]
80003d7e:	fe f8 03 86 	ld.w	r8,pc[902]
80003d82:	91 09       	st.w	r8[0x0],r9
80003d84:	c0 78       	rjmp	80003d92 <fat_cluster_list+0x10e>
      }
   } else {
      // It is the first cluster of a cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80003d86:	fe f8 03 76 	ld.w	r8,pc[886]
80003d8a:	70 09       	ld.w	r9,r8[0x0]
80003d8c:	fe f8 03 78 	ld.w	r8,pc[888]
80003d90:	91 09       	st.w	r8[0x0],r9
   }

   // Management of cluster list caches
   if( FS_CLUST_ACT_CLR != opt_action )
80003d92:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003d96:	30 38       	mov	r8,3
80003d98:	f0 09 18 00 	cp.b	r9,r8
80003d9c:	c0 c0       	breq	80003db4 <fat_cluster_list+0x130>
   {
      if( fat_cache_clusterlist_update_read( b_for_file ) )
80003d9e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80003da2:	10 9c       	mov	r12,r8
80003da4:	f0 1f 00 d9 	mcall	80004108 <fat_cluster_list+0x484>
80003da8:	18 98       	mov	r8,r12
80003daa:	58 08       	cp.w	r8,0
80003dac:	c0 80       	breq	80003dbc <fat_cluster_list+0x138>
         return true;            // Segment found in cache
80003dae:	30 18       	mov	r8,1
80003db0:	e0 8f 01 9b 	bral	800040e6 <fat_cluster_list+0x462>
      // Segment not found & cache ready to update
   }else{
      fat_cache_clusterlist_reset();   // It is a clear action then clear cluster list caches
80003db4:	f0 1f 00 d6 	mcall	8000410c <fat_cluster_list+0x488>
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      fat_clear_info_fat_mod();        // Init cache on fat modification range
80003db8:	f0 1f 00 d6 	mcall	80004110 <fat_cluster_list+0x48c>
#endif  // FS_LEVEL_FEATURES
   }

   // Init loop with a start segment no found
   MSB0( fs_g_seg.u32_addr ) = 0xFF;
80003dbc:	fe f9 03 40 	ld.w	r9,pc[832]
80003dc0:	3f f8       	mov	r8,-1
80003dc2:	b2 88       	st.b	r9[0x0],r8

   //**** Loop to read the cluster list
   while ( 1 )
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
80003dc4:	fe f8 03 38 	ld.w	r8,pc[824]
80003dc8:	70 19       	ld.w	r9,r8[0x4]
80003dca:	fe f8 03 36 	ld.w	r8,pc[822]
80003dce:	11 98       	ld.ub	r8,r8[0x1]
80003dd0:	10 39       	cp.w	r9,r8
80003dd2:	e0 82 00 9b 	brhs	80003f08 <fat_cluster_list+0x284>
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80003dd6:	fe f8 03 2e 	ld.w	r8,pc[814]
80003dda:	70 08       	ld.w	r8,r8[0x0]
80003ddc:	f0 c9 00 02 	sub	r9,r8,2
80003de0:	fe f8 03 20 	ld.w	r8,pc[800]
80003de4:	11 98       	ld.ub	r8,r8[0x1]
80003de6:	b1 39       	mul	r9,r8
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;
80003de8:	fe f8 03 18 	ld.w	r8,pc[792]
80003dec:	70 48       	ld.w	r8,r8[0x10]
80003dee:	10 09       	add	r9,r8
80003df0:	fe f8 03 10 	ld.w	r8,pc[784]
80003df4:	70 58       	ld.w	r8,r8[0x14]
80003df6:	10 09       	add	r9,r8
   {
      if ( fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus )
      {
         // The segment starts in this cluster
         // Compute the sector address of this cluster
         fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80003df8:	fe f8 03 04 	ld.w	r8,pc[772]
80003dfc:	70 18       	ld.w	r8,r8[0x4]
80003dfe:	10 09       	add	r9,r8
80003e00:	fe f8 02 fc 	ld.w	r8,pc[764]
80003e04:	91 09       	st.w	r8[0x0],r9
                           + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data + fs_g_seg.u32_size_or_pos;

         if ( FS_CLUST_ACT_ONE == opt_action )
80003e06:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003e0a:	30 28       	mov	r8,2
80003e0c:	f0 09 18 00 	cp.b	r9,r8
80003e10:	c1 51       	brne	80003e3a <fat_cluster_list+0x1b6>
         {
            // Compute the maximum size
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus-fs_g_seg.u32_size_or_pos;
80003e12:	fe f8 02 ee 	ld.w	r8,pc[750]
80003e16:	11 98       	ld.ub	r8,r8[0x1]
80003e18:	10 99       	mov	r9,r8
80003e1a:	fe f8 02 e2 	ld.w	r8,pc[738]
80003e1e:	70 18       	ld.w	r8,r8[0x4]
80003e20:	10 19       	sub	r9,r8
80003e22:	fe f8 02 da 	ld.w	r8,pc[730]
80003e26:	91 19       	st.w	r8[0x4],r9
            fat_cache_clusterlist_update_finish();
80003e28:	f0 1f 00 bb 	mcall	80004114 <fat_cluster_list+0x490>
            // Send a size of one sector
            fs_g_seg.u32_size_or_pos = 1;
80003e2c:	fe f8 02 d0 	ld.w	r8,pc[720]
80003e30:	30 19       	mov	r9,1
80003e32:	91 19       	st.w	r8[0x4],r9
            return true;
80003e34:	30 18       	mov	r8,1
80003e36:	e0 8f 01 58 	bral	800040e6 <fat_cluster_list+0x462>
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );
80003e3a:	fe f8 02 c6 	ld.w	r8,pc[710]
80003e3e:	11 98       	ld.ub	r8,r8[0x1]
80003e40:	10 99       	mov	r9,r8
80003e42:	fe f8 02 ba 	ld.w	r8,pc[698]
80003e46:	2f c8       	sub	r8,-4
80003e48:	2f d8       	sub	r8,-3
80003e4a:	11 88       	ld.ub	r8,r8[0x0]
80003e4c:	f2 08 01 08 	sub	r8,r9,r8
80003e50:	10 99       	mov	r9,r8
80003e52:	fe f8 02 aa 	ld.w	r8,pc[682]
80003e56:	91 19       	st.w	r8[0x4],r9

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80003e58:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003e5c:	30 18       	mov	r8,1
80003e5e:	f0 09 18 00 	cp.b	r9,r8
80003e62:	c5 31       	brne	80003f08 <fat_cluster_list+0x284>
         &&  (!Is_fat12) )
80003e64:	fe f8 02 90 	ld.w	r8,pc[656]
80003e68:	11 89       	ld.ub	r9,r8[0x0]
         }
         // Update the segment size
         fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus - LSB0( fs_g_seg.u32_size_or_pos );

         // Take time, during read cluster list on FAT 16 & 32
         if( (FS_CLUST_ACT_SEG == opt_action)
80003e6a:	30 18       	mov	r8,1
80003e6c:	f0 09 18 00 	cp.b	r9,r8
80003e70:	c4 c0       	breq	80003f08 <fat_cluster_list+0x284>
         &&  (!Is_fat12) )
         {
            // Init loop with the current cluster
            u32_tmp = fs_g_cluster.u32_pos;
80003e72:	fe f8 02 92 	ld.w	r8,pc[658]
80003e76:	70 08       	ld.w	r8,r8[0x0]
80003e78:	ef 48 ff f8 	st.w	r7[-8],r8
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80003e7c:	30 0c       	mov	r12,0
80003e7e:	f0 1f 00 a7 	mcall	80004118 <fat_cluster_list+0x494>
80003e82:	18 98       	mov	r8,r12
80003e84:	ec 18 00 01 	eorl	r8,0x1
80003e88:	5c 58       	castu.b	r8
80003e8a:	c0 50       	breq	80003e94 <fat_cluster_list+0x210>
               return false;
80003e8c:	30 08       	mov	r8,0
80003e8e:	e0 8f 01 2c 	bral	800040e6 <fat_cluster_list+0x462>
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
                  break;
               }
               if( !fat_cluster_readnext() )
                  return false;
            }
80003e92:	d7 03       	nop
            if( !fat_cluster_val( FS_CLUST_VAL_READ ))
               return false;
            // Read cluster list, while this one is continue
            while(1)
            {
               if ( (++fs_g_cluster.u32_pos) != fs_g_cluster.u32_val )
80003e94:	fe f8 02 70 	ld.w	r8,pc[624]
80003e98:	70 08       	ld.w	r8,r8[0x0]
80003e9a:	f0 c9 ff ff 	sub	r9,r8,-1
80003e9e:	fe f8 02 66 	ld.w	r8,pc[614]
80003ea2:	91 09       	st.w	r8[0x0],r9
80003ea4:	fe f8 02 60 	ld.w	r8,pc[608]
80003ea8:	70 09       	ld.w	r9,r8[0x0]
80003eaa:	fe f8 02 5a 	ld.w	r8,pc[602]
80003eae:	70 18       	ld.w	r8,r8[0x4]
80003eb0:	10 39       	cp.w	r9,r8
80003eb2:	c2 20       	breq	80003ef6 <fat_cluster_list+0x272>
               {
                  fs_g_cluster.u32_pos--;                   // Recompute previous value
80003eb4:	fe f8 02 50 	ld.w	r8,pc[592]
80003eb8:	70 08       	ld.w	r8,r8[0x0]
80003eba:	f0 c9 00 01 	sub	r9,r8,1
80003ebe:	fe f8 02 46 	ld.w	r8,pc[582]
80003ec2:	91 09       	st.w	r8[0x0],r9
                  u32_tmp = fs_g_cluster.u32_pos - u32_tmp; // Compute the size of cluster list
80003ec4:	fe f8 02 40 	ld.w	r8,pc[576]
80003ec8:	70 09       	ld.w	r9,r8[0x0]
80003eca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ece:	f2 08 01 08 	sub	r8,r9,r8
80003ed2:	ef 48 ff f8 	st.w	r7[-8],r8
                  fs_g_seg.u32_size_or_pos += u32_tmp * fs_g_nav.u8_BPB_SecPerClus;
80003ed6:	fe f8 02 26 	ld.w	r8,pc[550]
80003eda:	70 19       	ld.w	r9,r8[0x4]
80003edc:	fe f8 02 24 	ld.w	r8,pc[548]
80003ee0:	11 98       	ld.ub	r8,r8[0x1]
80003ee2:	10 9a       	mov	r10,r8
80003ee4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003ee8:	f4 08 02 48 	mul	r8,r10,r8
80003eec:	10 09       	add	r9,r8
80003eee:	fe f8 02 0e 	ld.w	r8,pc[526]
80003ef2:	91 19       	st.w	r8[0x4],r9
                  break;
80003ef4:	c0 a8       	rjmp	80003f08 <fat_cluster_list+0x284>
               }
               if( !fat_cluster_readnext() )
80003ef6:	f0 1f 00 8a 	mcall	8000411c <fat_cluster_list+0x498>
80003efa:	18 98       	mov	r8,r12
80003efc:	ec 18 00 01 	eorl	r8,0x1
80003f00:	5c 58       	castu.b	r8
80003f02:	cc 80       	breq	80003e92 <fat_cluster_list+0x20e>
                  return false;
80003f04:	30 08       	mov	r8,0
80003f06:	cf 08       	rjmp	800040e6 <fat_cluster_list+0x462>
            }
         }
      }
      // Get the cluster value
      if( !fat_cluster_val( FS_CLUST_VAL_READ ))
80003f08:	30 0c       	mov	r12,0
80003f0a:	f0 1f 00 84 	mcall	80004118 <fat_cluster_list+0x494>
80003f0e:	18 98       	mov	r8,r12
80003f10:	ec 18 00 01 	eorl	r8,0x1
80003f14:	5c 58       	castu.b	r8
80003f16:	c0 30       	breq	80003f1c <fat_cluster_list+0x298>
         return false;
80003f18:	30 08       	mov	r8,0
80003f1a:	ce 68       	rjmp	800040e6 <fat_cluster_list+0x462>

      // Read and check the status of the new cluster
      u8_cluster_status = fat_checkcluster();
80003f1c:	f0 1f 00 81 	mcall	80004120 <fat_cluster_list+0x49c>
80003f20:	18 98       	mov	r8,r12
80003f22:	ef 68 ff ff 	st.b	r7[-1],r8
      if (FS_CLUS_BAD == u8_cluster_status)
80003f26:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003f2a:	30 18       	mov	r8,1
80003f2c:	f0 09 18 00 	cp.b	r9,r8
80003f30:	c0 31       	brne	80003f36 <fat_cluster_list+0x2b2>
         return false; // error, end of cluster list
80003f32:	30 08       	mov	r8,0
80003f34:	cd 98       	rjmp	800040e6 <fat_cluster_list+0x462>

      if (0xFF == MSB0(fs_g_seg.u32_addr))
80003f36:	4f 28       	lddpc	r8,800040fc <fat_cluster_list+0x478>
80003f38:	11 89       	ld.ub	r9,r8[0x0]
80003f3a:	3f f8       	mov	r8,-1
80003f3c:	f0 09 18 00 	cp.b	r9,r8
80003f40:	c7 91       	brne	80004032 <fat_cluster_list+0x3ae>
      {
         // The beginning of the segment isn't found
         if (FS_CLUS_END == u8_cluster_status)
80003f42:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80003f46:	30 28       	mov	r8,2
80003f48:	f0 09 18 00 	cp.b	r9,r8
80003f4c:	c4 91       	brne	80003fde <fat_cluster_list+0x35a>
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining
80003f4e:	4e c8       	lddpc	r8,800040fc <fat_cluster_list+0x478>
80003f50:	70 18       	ld.w	r8,r8[0x4]
80003f52:	ef 48 ff f8 	st.w	r7[-8],r8

            // Compute the sector address of this last cluster to take time during a future request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
80003f56:	4f 48       	lddpc	r8,80004124 <fat_cluster_list+0x4a0>
80003f58:	11 88       	ld.ub	r8,r8[0x0]
80003f5a:	10 99       	mov	r9,r8
80003f5c:	4f 28       	lddpc	r8,80004124 <fat_cluster_list+0x4a0>
80003f5e:	11 88       	ld.ub	r8,r8[0x0]
80003f60:	10 9a       	mov	r10,r8
80003f62:	4f 2b       	lddpc	r11,80004128 <fat_cluster_list+0x4a4>
80003f64:	14 98       	mov	r8,r10
80003f66:	a3 68       	lsl	r8,0x2
80003f68:	14 08       	add	r8,r10
80003f6a:	a3 68       	lsl	r8,0x2
80003f6c:	f6 08 00 08 	add	r8,r11,r8
80003f70:	2f 88       	sub	r8,-8
80003f72:	70 0a       	ld.w	r10,r8[0x0]
80003f74:	4e 28       	lddpc	r8,800040fc <fat_cluster_list+0x478>
80003f76:	70 18       	ld.w	r8,r8[0x4]
80003f78:	10 1a       	sub	r10,r8
80003f7a:	4e cb       	lddpc	r11,80004128 <fat_cluster_list+0x4a4>
80003f7c:	12 98       	mov	r8,r9
80003f7e:	a3 68       	lsl	r8,0x2
80003f80:	12 08       	add	r8,r9
80003f82:	a3 68       	lsl	r8,0x2
80003f84:	f6 08 00 08 	add	r8,r11,r8
80003f88:	2f 88       	sub	r8,-8
80003f8a:	91 0a       	st.w	r8[0x0],r10
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80003f8c:	4d e8       	lddpc	r8,80004104 <fat_cluster_list+0x480>
80003f8e:	70 08       	ld.w	r8,r8[0x0]
80003f90:	f0 c9 00 02 	sub	r9,r8,2
80003f94:	4d b8       	lddpc	r8,80004100 <fat_cluster_list+0x47c>
80003f96:	11 98       	ld.ub	r8,r8[0x1]
80003f98:	b1 39       	mul	r9,r8
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
80003f9a:	4d a8       	lddpc	r8,80004100 <fat_cluster_list+0x47c>
80003f9c:	70 48       	ld.w	r8,r8[0x10]
80003f9e:	10 09       	add	r9,r8
         {
            u32_tmp = fs_g_seg.u32_size_or_pos;       // Save number of sector remaining

            // Compute the sector address of this last cluster to take time during a future request with the same cluster list
            fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start -= fs_g_seg.u32_size_or_pos;
            fs_g_seg.u32_addr = ((fs_g_cluster.u32_pos - 2) * fs_g_nav.u8_BPB_SecPerClus)
80003fa0:	4d 88       	lddpc	r8,80004100 <fat_cluster_list+0x47c>
80003fa2:	70 58       	ld.w	r8,r8[0x14]
80003fa4:	10 09       	add	r9,r8
80003fa6:	4d 68       	lddpc	r8,800040fc <fat_cluster_list+0x478>
80003fa8:	91 09       	st.w	r8[0x0],r9
                              + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
            fs_g_seg.u32_size_or_pos = fs_g_nav.u8_BPB_SecPerClus;
80003faa:	4d 68       	lddpc	r8,80004100 <fat_cluster_list+0x47c>
80003fac:	11 98       	ld.ub	r8,r8[0x1]
80003fae:	10 99       	mov	r9,r8
80003fb0:	4d 38       	lddpc	r8,800040fc <fat_cluster_list+0x478>
80003fb2:	91 19       	st.w	r8[0x4],r9
            if (FS_CLUST_ACT_CLR != opt_action)
80003fb4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003fb8:	30 38       	mov	r8,3
80003fba:	f0 09 18 00 	cp.b	r9,r8
80003fbe:	c0 30       	breq	80003fc4 <fat_cluster_list+0x340>
               fat_cache_clusterlist_update_finish();
80003fc0:	f0 1f 00 55 	mcall	80004114 <fat_cluster_list+0x490>

            // The position is outside the cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_pos; // Send the last cluster value
80003fc4:	4d 08       	lddpc	r8,80004104 <fat_cluster_list+0x480>
80003fc6:	70 09       	ld.w	r9,r8[0x0]
80003fc8:	4c d8       	lddpc	r8,800040fc <fat_cluster_list+0x478>
80003fca:	91 09       	st.w	r8[0x0],r9
            fs_g_seg.u32_size_or_pos = u32_tmp;       // Restore number of sector remaining
80003fcc:	4c c8       	lddpc	r8,800040fc <fat_cluster_list+0x478>
80003fce:	ee f9 ff f8 	ld.w	r9,r7[-8]
80003fd2:	91 19       	st.w	r8[0x4],r9
            fs_g_status = FS_ERR_OUT_LIST;
80003fd4:	4c 79       	lddpc	r9,800040f0 <fat_cluster_list+0x46c>
80003fd6:	31 a8       	mov	r8,26
80003fd8:	b2 88       	st.b	r9[0x0],r8
            return false;
80003fda:	30 08       	mov	r8,0
80003fdc:	c8 58       	rjmp	800040e6 <fat_cluster_list+0x462>
         }
         // Good cluster then continue
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
80003fde:	4c 88       	lddpc	r8,800040fc <fat_cluster_list+0x478>
80003fe0:	70 19       	ld.w	r9,r8[0x4]
80003fe2:	4c 88       	lddpc	r8,80004100 <fat_cluster_list+0x47c>
80003fe4:	11 98       	ld.ub	r8,r8[0x1]
80003fe6:	10 19       	sub	r9,r8
80003fe8:	4c 58       	lddpc	r8,800040fc <fat_cluster_list+0x478>
80003fea:	91 19       	st.w	r8[0x4],r9
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80003fec:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80003ff0:	30 38       	mov	r8,3
80003ff2:	f0 09 18 00 	cp.b	r9,r8
80003ff6:	c7 21       	brne	800040da <fat_cluster_list+0x456>
         {
            if( fs_g_seg.u32_size_or_pos == 0)
80003ff8:	4c 18       	lddpc	r8,800040fc <fat_cluster_list+0x478>
80003ffa:	70 18       	ld.w	r8,r8[0x4]
80003ffc:	58 08       	cp.w	r8,0
80003ffe:	c6 e1       	brne	800040da <fat_cluster_list+0x456>
            {
               // At cluster position, set the flag end of cluster list
               fs_g_seg.u32_addr = fs_g_cluster.u32_val; // Save the next cluster
80004000:	4c 18       	lddpc	r8,80004104 <fat_cluster_list+0x480>
80004002:	70 19       	ld.w	r9,r8[0x4]
80004004:	4b e8       	lddpc	r8,800040fc <fat_cluster_list+0x478>
80004006:	91 09       	st.w	r8[0x0],r9
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;
80004008:	4b f8       	lddpc	r8,80004104 <fat_cluster_list+0x480>
8000400a:	e0 69 ff ff 	mov	r9,65535
8000400e:	ea 19 0f ff 	orh	r9,0xfff
80004012:	91 19       	st.w	r8[0x4],r9
               if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80004014:	30 1c       	mov	r12,1
80004016:	f0 1f 00 41 	mcall	80004118 <fat_cluster_list+0x494>
8000401a:	18 98       	mov	r8,r12
8000401c:	ec 18 00 01 	eorl	r8,0x1
80004020:	5c 58       	castu.b	r8
80004022:	c0 30       	breq	80004028 <fat_cluster_list+0x3a4>
                  return false;
80004024:	30 08       	mov	r8,0
80004026:	c6 08       	rjmp	800040e6 <fat_cluster_list+0x462>
               fs_g_cluster.u32_val = fs_g_seg.u32_addr; // Restore the next cluster
80004028:	4b 58       	lddpc	r8,800040fc <fat_cluster_list+0x478>
8000402a:	70 09       	ld.w	r9,r8[0x0]
8000402c:	4b 68       	lddpc	r8,80004104 <fat_cluster_list+0x480>
8000402e:	91 19       	st.w	r8[0x4],r9
80004030:	c5 58       	rjmp	800040da <fat_cluster_list+0x456>
#endif  // FS_LEVEL_FEATURES
      }
      else
      {
         // The beginning of segment is found
         if (FS_CLUST_ACT_SEG == opt_action)
80004032:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80004036:	30 18       	mov	r8,1
80004038:	f0 09 18 00 	cp.b	r9,r8
8000403c:	c0 d1       	brne	80004056 <fat_cluster_list+0x3d2>
         {
            if ( (fs_g_cluster.u32_pos+1) != fs_g_cluster.u32_val )
8000403e:	4b 28       	lddpc	r8,80004104 <fat_cluster_list+0x480>
80004040:	70 08       	ld.w	r8,r8[0x0]
80004042:	f0 c9 ff ff 	sub	r9,r8,-1
80004046:	4b 08       	lddpc	r8,80004104 <fat_cluster_list+0x480>
80004048:	70 18       	ld.w	r8,r8[0x4]
8000404a:	10 39       	cp.w	r9,r8
8000404c:	c0 50       	breq	80004056 <fat_cluster_list+0x3d2>
            {
               // The cluster is not a continue cluster or a invalid cluster
               fat_cache_clusterlist_update_finish();
8000404e:	f0 1f 00 32 	mcall	80004114 <fat_cluster_list+0x490>
               return true;                              // End of segment
80004052:	30 18       	mov	r8,1
80004054:	c4 98       	rjmp	800040e6 <fat_cluster_list+0x462>
            }
         }
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
         if (FS_CLUST_ACT_CLR == opt_action)
80004056:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000405a:	30 38       	mov	r8,3
8000405c:	f0 09 18 00 	cp.b	r9,r8
80004060:	c2 21       	brne	800040a4 <fat_cluster_list+0x420>
         {
            //** Clear cluster position
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // Save the next cluster
80004062:	4a 98       	lddpc	r8,80004104 <fat_cluster_list+0x480>
80004064:	70 19       	ld.w	r9,r8[0x4]
80004066:	4a 68       	lddpc	r8,800040fc <fat_cluster_list+0x478>
80004068:	91 09       	st.w	r8[0x0],r9
            fs_g_cluster.u32_val = 0;                    // by default free cluster
8000406a:	4a 78       	lddpc	r8,80004104 <fat_cluster_list+0x480>
8000406c:	30 09       	mov	r9,0
8000406e:	91 19       	st.w	r8[0x4],r9
            // If it is the first cluster (fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus)
            // and doesn't start at the beginning of cluster (fs_g_seg.u32_size_or_pos != fs_g_nav.u8_BPB_SecPerClus)
            if (fs_g_seg.u32_size_or_pos < fs_g_nav.u8_BPB_SecPerClus)
80004070:	4a 38       	lddpc	r8,800040fc <fat_cluster_list+0x478>
80004072:	70 19       	ld.w	r9,r8[0x4]
80004074:	4a 38       	lddpc	r8,80004100 <fat_cluster_list+0x47c>
80004076:	11 98       	ld.ub	r8,r8[0x1]
80004078:	10 39       	cp.w	r9,r8
8000407a:	c0 72       	brcc	80004088 <fat_cluster_list+0x404>
            {
               fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;  // End of cluster list allocated
8000407c:	4a 28       	lddpc	r8,80004104 <fat_cluster_list+0x480>
8000407e:	e0 69 ff ff 	mov	r9,65535
80004082:	ea 19 0f ff 	orh	r9,0xfff
80004086:	91 19       	st.w	r8[0x4],r9
            }
            if( !fat_cluster_val( FS_CLUST_VAL_WRITE ))
80004088:	30 1c       	mov	r12,1
8000408a:	f0 1f 00 24 	mcall	80004118 <fat_cluster_list+0x494>
8000408e:	18 98       	mov	r8,r12
80004090:	ec 18 00 01 	eorl	r8,0x1
80004094:	5c 58       	castu.b	r8
80004096:	c0 30       	breq	8000409c <fat_cluster_list+0x418>
               return false;
80004098:	30 08       	mov	r8,0
8000409a:	c2 68       	rjmp	800040e6 <fat_cluster_list+0x462>
            fs_g_cluster.u32_val = fs_g_seg.u32_addr;    // Restore the next cluster
8000409c:	49 88       	lddpc	r8,800040fc <fat_cluster_list+0x478>
8000409e:	70 09       	ld.w	r9,r8[0x0]
800040a0:	49 98       	lddpc	r8,80004104 <fat_cluster_list+0x480>
800040a2:	91 19       	st.w	r8[0x4],r9
            // !!!! because it isn't possible that MSB0( fs_g_cluster.val ) = 0xFF.
         }
#endif  // FS_LEVEL_FEATURES

         // Check the end of cluster list
         if (FS_CLUS_END == u8_cluster_status)
800040a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800040a8:	30 28       	mov	r8,2
800040aa:	f0 09 18 00 	cp.b	r9,r8
800040ae:	c0 f1       	brne	800040cc <fat_cluster_list+0x448>
         {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
            if (FS_CLUST_ACT_CLR == opt_action)
800040b0:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800040b4:	30 38       	mov	r8,3
800040b6:	f0 09 18 00 	cp.b	r9,r8
800040ba:	c0 51       	brne	800040c4 <fat_cluster_list+0x440>
            {
               return fat_update_fat2();
800040bc:	f0 1f 00 1c 	mcall	8000412c <fat_cluster_list+0x4a8>
800040c0:	18 98       	mov	r8,r12
800040c2:	c1 28       	rjmp	800040e6 <fat_cluster_list+0x462>
            }
#endif  // FS_LEVEL_FEATURES
            fat_cache_clusterlist_update_finish();
800040c4:	f0 1f 00 14 	mcall	80004114 <fat_cluster_list+0x490>
            return true; // End of segment
800040c8:	30 18       	mov	r8,1
800040ca:	c0 e8       	rjmp	800040e6 <fat_cluster_list+0x462>
         }

         // Update the segment size
         fs_g_seg.u32_size_or_pos += fs_g_nav.u8_BPB_SecPerClus;
800040cc:	48 c8       	lddpc	r8,800040fc <fat_cluster_list+0x478>
800040ce:	70 19       	ld.w	r9,r8[0x4]
800040d0:	48 c8       	lddpc	r8,80004100 <fat_cluster_list+0x47c>
800040d2:	11 98       	ld.ub	r8,r8[0x1]
800040d4:	10 09       	add	r9,r8
800040d6:	48 a8       	lddpc	r8,800040fc <fat_cluster_list+0x478>
800040d8:	91 19       	st.w	r8[0x4],r9
      }
      // HERE, Continue to read the cluster list
      // The next cluster is the value of previous cluster
      fs_g_cluster.u32_pos = fs_g_cluster.u32_val;
800040da:	48 b8       	lddpc	r8,80004104 <fat_cluster_list+0x480>
800040dc:	70 19       	ld.w	r9,r8[0x4]
800040de:	48 a8       	lddpc	r8,80004104 <fat_cluster_list+0x480>
800040e0:	91 09       	st.w	r8[0x0],r9
   }  // End of main loop
800040e2:	fe 9f fe 71 	bral	80003dc4 <fat_cluster_list+0x140>
}
800040e6:	10 9c       	mov	r12,r8
800040e8:	2f cd       	sub	sp,-16
800040ea:	e3 cd 80 80 	ldm	sp++,r7,pc
800040ee:	00 00       	add	r0,r0
800040f0:	00 00       	add	r0,r0
800040f2:	11 a0       	ld.ub	r0,r8[0x2]
800040f4:	00 00       	add	r0,r0
800040f6:	11 9c       	ld.ub	r12,r8[0x1]
800040f8:	80 00       	ld.sh	r0,r0[0x0]
800040fa:	62 a8       	ld.w	r8,r1[0x28]
800040fc:	00 00       	add	r0,r0
800040fe:	11 f8       	ld.ub	r8,r8[0x7]
80004100:	00 00       	add	r0,r0
80004102:	11 50       	ld.sh	r0,--r8
80004104:	00 00       	add	r0,r0
80004106:	11 f0       	ld.ub	r0,r8[0x7]
80004108:	80 00       	ld.sh	r0,r0[0x0]
8000410a:	4a 48       	lddpc	r8,80004198 <fat_cluster_val+0x68>
8000410c:	80 00       	ld.sh	r0,r0[0x0]
8000410e:	47 14       	lddsp	r4,sp[0x1c4]
80004110:	80 00       	ld.sh	r0,r0[0x0]
80004112:	70 84       	ld.w	r4,r8[0x20]
80004114:	80 00       	ld.sh	r0,r0[0x0]
80004116:	48 78       	lddpc	r8,80004130 <fat_cluster_val>
80004118:	80 00       	ld.sh	r0,r0[0x0]
8000411a:	41 30       	lddsp	r0,sp[0x4c]
8000411c:	80 00       	ld.sh	r0,r0[0x0]
8000411e:	45 80       	lddsp	r0,sp[0x160]
80004120:	80 00       	ld.sh	r0,r0[0x0]
80004122:	46 68       	lddsp	r8,sp[0x198]
80004124:	00 00       	add	r0,r0
80004126:	11 a2       	ld.ub	r2,r8[0x2]
80004128:	00 00       	add	r0,r0
8000412a:	0f 24       	ld.uh	r4,r7++
8000412c:	80 00       	ld.sh	r0,r0[0x0]
8000412e:	70 a4       	ld.w	r4,r8[0x28]

80004130 <fat_cluster_val>:
//!   fs_g_u16_pos_fat        position in FAT of the cluster to read or write
//!                           value init in case of the fat_cluster_readnext() routine is used after
//! @endverbatim
//!
bool  fat_cluster_val( bool b_mode )
{
80004130:	eb cd 40 80 	pushm	r7,lr
80004134:	1a 97       	mov	r7,sp
80004136:	20 4d       	sub	sp,16
80004138:	18 98       	mov	r8,r12
8000413a:	ef 68 ff f0 	st.b	r7[-16],r8
   _MEM_TYPE_FAST_ uint32_t   u32_offset_fat =0;
8000413e:	30 08       	mov	r8,0
80004140:	ef 48 ff f4 	st.w	r7[-12],r8
   _MEM_TYPE_FAST_ uint8_t    u8_data1, u8_data2,u8_data3,u8_data4;
   _MEM_TYPE_FAST_ PTR_CACHE u8_ptr_cluster;

   //**** Compute the cluster position in FAT (sector address & position in sector)
   if ( Is_fat32 )
80004144:	fe f8 04 14 	ld.w	r8,pc[1044]
80004148:	11 89       	ld.ub	r9,r8[0x0]
8000414a:	30 38       	mov	r8,3
8000414c:	f0 09 18 00 	cp.b	r9,r8
80004150:	c1 41       	brne	80004178 <fat_cluster_val+0x48>
   {
      // FAT 32
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos * 4 / FS_CACHE_SIZE;
      // Optimization of -> u32_offset_fat = fs_g_cluster.pos / 128
      u32_offset_fat = fs_g_cluster.u32_pos >> (8-1);
80004152:	fe f8 04 0a 	ld.w	r8,pc[1034]
80004156:	70 08       	ld.w	r8,r8[0x0]
80004158:	a7 98       	lsr	r8,0x7
8000415a:	ef 48 ff f4 	st.w	r7[-12],r8

      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 4) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 128) * 4
      fs_g_u16_pos_fat = ((uint16_t)(LSB0(fs_g_cluster.u32_pos) & 0x7F))<< 2;
8000415e:	fe f8 03 fe 	ld.w	r8,pc[1022]
80004162:	2f d8       	sub	r8,-3
80004164:	11 88       	ld.ub	r8,r8[0x0]
80004166:	5c 88       	casts.h	r8
80004168:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000416c:	a3 68       	lsl	r8,0x2
8000416e:	5c 88       	casts.h	r8
80004170:	fe f9 03 f0 	ld.w	r9,pc[1008]
80004174:	b2 08       	st.h	r9[0x0],r8
80004176:	c4 08       	rjmp	800041f6 <fat_cluster_val+0xc6>
   }
   else if ( Is_fat16 )
80004178:	fe f8 03 e0 	ld.w	r8,pc[992]
8000417c:	11 89       	ld.ub	r9,r8[0x0]
8000417e:	30 28       	mov	r8,2
80004180:	f0 09 18 00 	cp.b	r9,r8
80004184:	c1 11       	brne	800041a6 <fat_cluster_val+0x76>
   {
      // FAT 16
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos * 2 / FS_CACHE_SIZE = fs_g_cluster.u32_pos / 256;
      u32_offset_fat = LSB1(fs_g_cluster.u32_pos);
80004186:	fe f8 03 d6 	ld.w	r8,pc[982]
8000418a:	2f e8       	sub	r8,-2
8000418c:	11 88       	ld.ub	r8,r8[0x0]
8000418e:	ef 48 ff f4 	st.w	r7[-12],r8
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos * 2) % FS_CACHE_SIZE;
      // Optimization of -> fs_g_u16_pos_fat = (fs_g_cluster.u32_pos % 256) * 2
      fs_g_u16_pos_fat = ((uint16_t)LSB0(fs_g_cluster.u32_pos)) <<1;
80004192:	fe f8 03 ca 	ld.w	r8,pc[970]
80004196:	2f d8       	sub	r8,-3
80004198:	11 88       	ld.ub	r8,r8[0x0]
8000419a:	a1 78       	lsl	r8,0x1
8000419c:	5c 88       	casts.h	r8
8000419e:	fe f9 03 c2 	ld.w	r9,pc[962]
800041a2:	b2 08       	st.h	r9[0x0],r8
800041a4:	c2 98       	rjmp	800041f6 <fat_cluster_val+0xc6>
   }
   else if ( Is_fat12 )
800041a6:	fe f8 03 b2 	ld.w	r8,pc[946]
800041aa:	11 89       	ld.ub	r9,r8[0x0]
800041ac:	30 18       	mov	r8,1
800041ae:	f0 09 18 00 	cp.b	r9,r8
800041b2:	c2 21       	brne	800041f6 <fat_cluster_val+0xc6>
   {
      // FAT 12
      // Optimization of -> fs_g_u16_pos_fat = fs_g_cluster.u32_pos + (fs_g_cluster.u32_pos/ 2)
      fs_g_u16_pos_fat = (uint16_t)fs_g_cluster.u32_pos + ((uint16_t)fs_g_cluster.u32_pos >>1);
800041b4:	fe f8 03 a8 	ld.w	r8,pc[936]
800041b8:	70 08       	ld.w	r8,r8[0x0]
800041ba:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800041be:	fe f8 03 9e 	ld.w	r8,pc[926]
800041c2:	70 08       	ld.w	r8,r8[0x0]
800041c4:	5c 88       	casts.h	r8
800041c6:	5c 78       	castu.h	r8
800041c8:	a1 98       	lsr	r8,0x1
800041ca:	5c 88       	casts.h	r8
800041cc:	f2 08 00 08 	add	r8,r9,r8
800041d0:	5c 88       	casts.h	r8
800041d2:	fe f9 03 8e 	ld.w	r9,pc[910]
800041d6:	b2 08       	st.h	r9[0x0],r8
      // Optimization of -> u32_offset_fat = fs_g_cluster.u32_pos / FS_CACHE_SIZE
      u32_offset_fat = MSB(fs_g_u16_pos_fat) >> 1;
800041d8:	fe f8 03 88 	ld.w	r8,pc[904]
800041dc:	11 88       	ld.ub	r8,r8[0x0]
800041de:	a1 98       	lsr	r8,0x1
800041e0:	5c 58       	castu.b	r8
800041e2:	ef 48 ff f4 	st.w	r7[-12],r8
      // Optimization of -> fs_g_u16_pos_fat = fs_g_u16_pos_fat % FS_CACHE_SIZE
      MSB( fs_g_u16_pos_fat ) &= 0x01;
800041e6:	fe f9 03 7a 	ld.w	r9,pc[890]
800041ea:	fe f8 03 76 	ld.w	r8,pc[886]
800041ee:	11 88       	ld.ub	r8,r8[0x0]
800041f0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800041f4:	b2 88       	st.b	r9[0x0],r8
   }

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
   if (b_mode)
800041f6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800041fa:	30 08       	mov	r8,0
800041fc:	f0 09 18 00 	cp.b	r9,r8
80004200:	c3 a0       	breq	80004274 <fat_cluster_val+0x144>
   {
      // Update information about FAT modification
      if( fs_g_u32_first_mod_fat > u32_offset_fat )
80004202:	fe f8 03 62 	ld.w	r8,pc[866]
80004206:	70 09       	ld.w	r9,r8[0x0]
80004208:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000420c:	10 39       	cp.w	r9,r8
8000420e:	e0 88 00 07 	brls	8000421c <fat_cluster_val+0xec>
      {
         fs_g_u32_first_mod_fat = u32_offset_fat;
80004212:	fe f8 03 52 	ld.w	r8,pc[850]
80004216:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000421a:	91 09       	st.w	r8[0x0],r9
      }
      if( fs_g_u32_last_mod_fat < u32_offset_fat )
8000421c:	fe f8 03 4c 	ld.w	r8,pc[844]
80004220:	70 09       	ld.w	r9,r8[0x0]
80004222:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004226:	10 39       	cp.w	r9,r8
80004228:	c0 62       	brcc	80004234 <fat_cluster_val+0x104>
      {
         fs_g_u32_last_mod_fat = u32_offset_fat;
8000422a:	fe f8 03 3e 	ld.w	r8,pc[830]
8000422e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80004232:	91 09       	st.w	r8[0x0],r9
      }
      if ( Is_fat12 )
80004234:	fe f8 03 24 	ld.w	r8,pc[804]
80004238:	11 89       	ld.ub	r9,r8[0x0]
8000423a:	30 18       	mov	r8,1
8000423c:	f0 09 18 00 	cp.b	r9,r8
80004240:	c1 a1       	brne	80004274 <fat_cluster_val+0x144>
      {  // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004242:	fe f8 03 1e 	ld.w	r8,pc[798]
80004246:	90 09       	ld.sh	r9,r8[0x0]
80004248:	e0 68 01 ff 	mov	r8,511
8000424c:	f0 09 19 00 	cp.h	r9,r8
80004250:	c1 21       	brne	80004274 <fat_cluster_val+0x144>
         {  // Count the next FAT sector
            if( fs_g_u32_last_mod_fat < (u32_offset_fat+1) )
80004252:	ee f8 ff f4 	ld.w	r8,r7[-12]
80004256:	f0 c9 ff ff 	sub	r9,r8,-1
8000425a:	fe f8 03 0e 	ld.w	r8,pc[782]
8000425e:	70 08       	ld.w	r8,r8[0x0]
80004260:	10 39       	cp.w	r9,r8
80004262:	e0 88 00 09 	brls	80004274 <fat_cluster_val+0x144>
            {
               fs_g_u32_last_mod_fat = (u32_offset_fat+1);
80004266:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000426a:	f0 c9 ff ff 	sub	r9,r8,-1
8000426e:	fe f8 02 fa 	ld.w	r8,pc[762]
80004272:	91 09       	st.w	r8[0x0],r9
      }
   }
#endif  // FS_LEVEL_FEATURES

   //**** Read cluster sector in FAT
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + u32_offset_fat;   // Computed logical sector address
80004274:	fe f8 02 f8 	ld.w	r8,pc[760]
80004278:	70 49       	ld.w	r9,r8[0x10]
8000427a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000427e:	10 09       	add	r9,r8
80004280:	fe f8 02 f0 	ld.w	r8,pc[752]
80004284:	91 09       	st.w	r8[0x0],r9
   if( !fat_cache_read_sector( true ))
80004286:	30 1c       	mov	r12,1
80004288:	f0 1f 00 bb 	mcall	80004574 <fat_cluster_val+0x444>
8000428c:	18 98       	mov	r8,r12
8000428e:	ec 18 00 01 	eorl	r8,0x1
80004292:	5c 58       	castu.b	r8
80004294:	c0 40       	breq	8000429c <fat_cluster_val+0x16c>
      return false;
80004296:	30 08       	mov	r8,0
80004298:	e0 8f 01 5c 	bral	80004550 <fat_cluster_val+0x420>

   // Read cluster information
   u8_ptr_cluster = &fs_g_sector[fs_g_u16_pos_fat];
8000429c:	fe f8 02 c4 	ld.w	r8,pc[708]
800042a0:	90 08       	ld.sh	r8,r8[0x0]
800042a2:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800042a6:	fe f8 02 d2 	ld.w	r8,pc[722]
800042aa:	f2 08 00 08 	add	r8,r9,r8
800042ae:	ef 48 ff fc 	st.w	r7[-4],r8
   u8_data1 = u8_ptr_cluster[0];
800042b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800042b6:	11 88       	ld.ub	r8,r8[0x0]
800042b8:	ef 68 ff f8 	st.b	r7[-8],r8
   // Remark: if (fs_g_u16_pos_fat+1)=512 then it isn't a mistake, because this value will be erase in next lines
   u8_data2 = u8_ptr_cluster[1];
800042bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800042c0:	2f f8       	sub	r8,-1
800042c2:	11 88       	ld.ub	r8,r8[0x0]
800042c4:	ef 68 ff f9 	st.b	r7[-7],r8
   u8_data3 = u8_ptr_cluster[2];
800042c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800042cc:	2f e8       	sub	r8,-2
800042ce:	11 88       	ld.ub	r8,r8[0x0]
800042d0:	ef 68 ff fa 	st.b	r7[-6],r8
   u8_data4 = u8_ptr_cluster[3];
800042d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800042d8:	2f d8       	sub	r8,-3
800042da:	11 88       	ld.ub	r8,r8[0x0]
800042dc:	ef 68 ff fb 	st.b	r7[-5],r8

   if ( Is_fat12 )
800042e0:	fe f8 02 78 	ld.w	r8,pc[632]
800042e4:	11 89       	ld.ub	r9,r8[0x0]
800042e6:	30 18       	mov	r8,1
800042e8:	f0 09 18 00 	cp.b	r9,r8
800042ec:	c2 01       	brne	8000432c <fat_cluster_val+0x1fc>
   {   // A cluster may be stored on two sectors
      if(  fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
800042ee:	fe f8 02 72 	ld.w	r8,pc[626]
800042f2:	90 09       	ld.sh	r9,r8[0x0]
800042f4:	e0 68 01 ff 	mov	r8,511
800042f8:	f0 09 19 00 	cp.h	r9,r8
800042fc:	c1 81       	brne	8000432c <fat_cluster_val+0x1fc>
      {  // Go to next sector
         fs_gu32_addrsector++;
800042fe:	fe f8 02 72 	ld.w	r8,pc[626]
80004302:	70 08       	ld.w	r8,r8[0x0]
80004304:	f0 c9 ff ff 	sub	r9,r8,-1
80004308:	fe f8 02 68 	ld.w	r8,pc[616]
8000430c:	91 09       	st.w	r8[0x0],r9
         if( !fat_cache_read_sector( true ))
8000430e:	30 1c       	mov	r12,1
80004310:	f0 1f 00 99 	mcall	80004574 <fat_cluster_val+0x444>
80004314:	18 98       	mov	r8,r12
80004316:	ec 18 00 01 	eorl	r8,0x1
8000431a:	5c 58       	castu.b	r8
8000431c:	c0 30       	breq	80004322 <fat_cluster_val+0x1f2>
           return false;
8000431e:	30 08       	mov	r8,0
80004320:	c1 89       	rjmp	80004550 <fat_cluster_val+0x420>
         u8_data2 = fs_g_sector[0];
80004322:	fe f8 02 56 	ld.w	r8,pc[598]
80004326:	11 88       	ld.ub	r8,r8[0x0]
80004328:	ef 68 ff f9 	st.b	r7[-7],r8
      }
   }

   if (false == b_mode)
8000432c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80004330:	ec 18 00 01 	eorl	r8,0x1
80004334:	5c 58       	castu.b	r8
80004336:	c6 e0       	breq	80004412 <fat_cluster_val+0x2e2>
   {
      //**** Read the cluster value
      LSB0( fs_g_cluster.u32_val ) = u8_data1;  // FAT 12,16,32
80004338:	fe f8 02 24 	ld.w	r8,pc[548]
8000433c:	2f c8       	sub	r8,-4
8000433e:	f0 c9 ff fd 	sub	r9,r8,-3
80004342:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004346:	b2 88       	st.b	r9[0x0],r8
      LSB1( fs_g_cluster.u32_val ) = u8_data2;  // FAT 12,16,32
80004348:	fe f8 02 14 	ld.w	r8,pc[532]
8000434c:	2f c8       	sub	r8,-4
8000434e:	f0 c9 ff fe 	sub	r9,r8,-2
80004352:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004356:	b2 88       	st.b	r9[0x0],r8

      if ( Is_fat32 )
80004358:	fe f8 02 00 	ld.w	r8,pc[512]
8000435c:	11 89       	ld.ub	r9,r8[0x0]
8000435e:	30 38       	mov	r8,3
80004360:	f0 09 18 00 	cp.b	r9,r8
80004364:	c1 11       	brne	80004386 <fat_cluster_val+0x256>
      {  // FAT 32
         LSB2( fs_g_cluster.u32_val ) = u8_data3;
80004366:	4f e8       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
80004368:	2f c8       	sub	r8,-4
8000436a:	f0 c9 ff ff 	sub	r9,r8,-1
8000436e:	ef 38 ff fa 	ld.ub	r8,r7[-6]
80004372:	b2 88       	st.b	r9[0x0],r8
         LSB3( fs_g_cluster.u32_val ) = u8_data4 & 0x0F; // The high 4 bits are reserved
80004374:	4f a8       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
80004376:	f0 c9 ff fc 	sub	r9,r8,-4
8000437a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000437e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004382:	b2 88       	st.b	r9[0x0],r8
80004384:	ce 58       	rjmp	8000454e <fat_cluster_val+0x41e>
      }
      else
      {  // FAT 12 & 16 don't use the high bytes
         LSB2( fs_g_cluster.u32_val ) = 0;
80004386:	4f 68       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
80004388:	2f c8       	sub	r8,-4
8000438a:	f0 c9 ff ff 	sub	r9,r8,-1
8000438e:	30 08       	mov	r8,0
80004390:	b2 88       	st.b	r9[0x0],r8
         LSB3( fs_g_cluster.u32_val ) = 0;
80004392:	4f 38       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
80004394:	f0 c9 ff fc 	sub	r9,r8,-4
80004398:	30 08       	mov	r8,0
8000439a:	b2 88       	st.b	r9[0x0],r8

         // FAT 12 translate 16bits value to 12bits
         if ( Is_fat12 )
8000439c:	4e f8       	lddpc	r8,80004558 <fat_cluster_val+0x428>
8000439e:	11 89       	ld.ub	r9,r8[0x0]
800043a0:	30 18       	mov	r8,1
800043a2:	f0 09 18 00 	cp.b	r9,r8
800043a6:	e0 81 00 d4 	brne	8000454e <fat_cluster_val+0x41e>
         {
            if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
800043aa:	4e d8       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
800043ac:	2f d8       	sub	r8,-3
800043ae:	11 88       	ld.ub	r8,r8[0x0]
800043b0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800043b4:	5c 58       	castu.b	r8
800043b6:	c2 20       	breq	800043fa <fat_cluster_val+0x2ca>
            {  // Read cluster is ODD
               LSB0( fs_g_cluster.u32_val ) = (LSB1( fs_g_cluster.u32_val ) <<4 ) + (LSB0( fs_g_cluster.u32_val ) >>4 );
800043b8:	4e 98       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
800043ba:	2f c8       	sub	r8,-4
800043bc:	f0 ca ff fd 	sub	r10,r8,-3
800043c0:	4e 78       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
800043c2:	2f c8       	sub	r8,-4
800043c4:	2f e8       	sub	r8,-2
800043c6:	11 88       	ld.ub	r8,r8[0x0]
800043c8:	a5 68       	lsl	r8,0x4
800043ca:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800043ce:	4e 48       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
800043d0:	2f c8       	sub	r8,-4
800043d2:	2f d8       	sub	r8,-3
800043d4:	11 88       	ld.ub	r8,r8[0x0]
800043d6:	a5 88       	lsr	r8,0x4
800043d8:	5c 58       	castu.b	r8
800043da:	f2 08 00 08 	add	r8,r9,r8
800043de:	5c 58       	castu.b	r8
800043e0:	b4 88       	st.b	r10[0x0],r8
               LSB1( fs_g_cluster.u32_val ) =  LSB1( fs_g_cluster.u32_val ) >>4 ;
800043e2:	4d f8       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
800043e4:	2f c8       	sub	r8,-4
800043e6:	f0 c9 ff fe 	sub	r9,r8,-2
800043ea:	4d d8       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
800043ec:	2f c8       	sub	r8,-4
800043ee:	2f e8       	sub	r8,-2
800043f0:	11 88       	ld.ub	r8,r8[0x0]
800043f2:	a5 88       	lsr	r8,0x4
800043f4:	5c 58       	castu.b	r8
800043f6:	b2 88       	st.b	r9[0x0],r8
800043f8:	ca b8       	rjmp	8000454e <fat_cluster_val+0x41e>
            }
            else
            {  // Read cluster is EVEN
               LSB1( fs_g_cluster.u32_val ) &= 0x0F;
800043fa:	4d 98       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
800043fc:	2f c8       	sub	r8,-4
800043fe:	f0 c9 ff fe 	sub	r9,r8,-2
80004402:	4d 78       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
80004404:	2f c8       	sub	r8,-4
80004406:	2f e8       	sub	r8,-2
80004408:	11 88       	ld.ub	r8,r8[0x0]
8000440a:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000440e:	b2 88       	st.b	r9[0x0],r8
80004410:	c9 f8       	rjmp	8000454e <fat_cluster_val+0x41e>
         }
      }
   } else {
#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
      //**** Write the cluster value
      if ( Is_fat12 )
80004412:	4d 28       	lddpc	r8,80004558 <fat_cluster_val+0x428>
80004414:	11 89       	ld.ub	r9,r8[0x0]
80004416:	30 18       	mov	r8,1
80004418:	f0 09 18 00 	cp.b	r9,r8
8000441c:	c6 11       	brne	800044de <fat_cluster_val+0x3ae>
      {
         // FAT 12, translate cluster value
         if ( 0x01 & LSB0(fs_g_cluster.u32_pos) )
8000441e:	4d 08       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
80004420:	2f d8       	sub	r8,-3
80004422:	11 88       	ld.ub	r8,r8[0x0]
80004424:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80004428:	5c 58       	castu.b	r8
8000442a:	c2 00       	breq	8000446a <fat_cluster_val+0x33a>
         {  // Cluster writing is ODD
            u8_data1 = (u8_data1 & 0x0F) + (LSB0( fs_g_cluster.u32_val )<<4);
8000442c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004430:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80004434:	4c a9       	lddpc	r9,8000455c <fat_cluster_val+0x42c>
80004436:	2f c9       	sub	r9,-4
80004438:	2f d9       	sub	r9,-3
8000443a:	13 89       	ld.ub	r9,r9[0x0]
8000443c:	a5 69       	lsl	r9,0x4
8000443e:	5c 59       	castu.b	r9
80004440:	12 08       	add	r8,r9
80004442:	ef 68 ff f8 	st.b	r7[-8],r8
            u8_data2 = (LSB1( fs_g_cluster.u32_val )<<4) + (LSB0( fs_g_cluster.u32_val )>>4) ;
80004446:	4c 68       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
80004448:	2f c8       	sub	r8,-4
8000444a:	2f e8       	sub	r8,-2
8000444c:	11 88       	ld.ub	r8,r8[0x0]
8000444e:	a5 68       	lsl	r8,0x4
80004450:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80004454:	4c 28       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
80004456:	2f c8       	sub	r8,-4
80004458:	2f d8       	sub	r8,-3
8000445a:	11 88       	ld.ub	r8,r8[0x0]
8000445c:	a5 88       	lsr	r8,0x4
8000445e:	5c 58       	castu.b	r8
80004460:	f2 08 00 08 	add	r8,r9,r8
80004464:	ef 68 ff f9 	st.b	r7[-7],r8
80004468:	c1 58       	rjmp	80004492 <fat_cluster_val+0x362>
         } else {
            // Cluster writing is EVEN
            u8_data1 = LSB0( fs_g_cluster.u32_val );
8000446a:	4b d8       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
8000446c:	2f c8       	sub	r8,-4
8000446e:	2f d8       	sub	r8,-3
80004470:	11 88       	ld.ub	r8,r8[0x0]
80004472:	ef 68 ff f8 	st.b	r7[-8],r8
            u8_data2 = (u8_data2 & 0xF0) + (LSB1( fs_g_cluster.u32_val ) & 0x0F) ;
80004476:	ef 39 ff f9 	ld.ub	r9,r7[-7]
8000447a:	e2 19 00 f0 	andl	r9,0xf0,COH
8000447e:	4b 88       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
80004480:	2f c8       	sub	r8,-4
80004482:	2f e8       	sub	r8,-2
80004484:	11 88       	ld.ub	r8,r8[0x0]
80004486:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000448a:	f2 08 00 08 	add	r8,r9,r8
8000448e:	ef 68 ff f9 	st.b	r7[-7],r8
         }

         // A cluster may be stored on two sectors
         if( fs_g_u16_pos_fat == (FS_CACHE_SIZE-1) )
80004492:	4b 48       	lddpc	r8,80004560 <fat_cluster_val+0x430>
80004494:	90 09       	ld.sh	r9,r8[0x0]
80004496:	e0 68 01 ff 	mov	r8,511
8000449a:	f0 09 19 00 	cp.h	r9,r8
8000449e:	c4 a1       	brne	80004532 <fat_cluster_val+0x402>
         {
            fs_g_sector[0] = u8_data2;
800044a0:	4b 69       	lddpc	r9,80004578 <fat_cluster_val+0x448>
800044a2:	ef 38 ff f9 	ld.ub	r8,r7[-7]
800044a6:	b2 88       	st.b	r9[0x0],r8
            fat_cache_mark_sector_as_dirty();
800044a8:	f0 1f 00 35 	mcall	8000457c <fat_cluster_val+0x44c>
            // Go to previous sector
            fs_gu32_addrsector--;
800044ac:	4b 18       	lddpc	r8,80004570 <fat_cluster_val+0x440>
800044ae:	70 08       	ld.w	r8,r8[0x0]
800044b0:	f0 c9 00 01 	sub	r9,r8,1
800044b4:	4a f8       	lddpc	r8,80004570 <fat_cluster_val+0x440>
800044b6:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( true ))
800044b8:	30 1c       	mov	r12,1
800044ba:	f0 1f 00 2f 	mcall	80004574 <fat_cluster_val+0x444>
800044be:	18 98       	mov	r8,r12
800044c0:	ec 18 00 01 	eorl	r8,0x1
800044c4:	5c 58       	castu.b	r8
800044c6:	c0 30       	breq	800044cc <fat_cluster_val+0x39c>
              return false;
800044c8:	30 08       	mov	r8,0
800044ca:	c4 38       	rjmp	80004550 <fat_cluster_val+0x420>
            // Modify the previous sector
            fs_g_sector[ FS_CACHE_SIZE-1 ] = u8_data1;
800044cc:	4a b9       	lddpc	r9,80004578 <fat_cluster_val+0x448>
800044ce:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800044d2:	f3 68 01 ff 	st.b	r9[511],r8
            fat_cache_mark_sector_as_dirty();
800044d6:	f0 1f 00 2a 	mcall	8000457c <fat_cluster_val+0x44c>
            return true;
800044da:	30 18       	mov	r8,1
800044dc:	c3 a8       	rjmp	80004550 <fat_cluster_val+0x420>
         }
      }
      else
      {
         // FAT 16 & 32
         u8_data1 = LSB0( fs_g_cluster.u32_val );
800044de:	4a 08       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
800044e0:	2f c8       	sub	r8,-4
800044e2:	2f d8       	sub	r8,-3
800044e4:	11 88       	ld.ub	r8,r8[0x0]
800044e6:	ef 68 ff f8 	st.b	r7[-8],r8
         u8_data2 = LSB1( fs_g_cluster.u32_val );
800044ea:	49 d8       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
800044ec:	2f c8       	sub	r8,-4
800044ee:	2f e8       	sub	r8,-2
800044f0:	11 88       	ld.ub	r8,r8[0x0]
800044f2:	ef 68 ff f9 	st.b	r7[-7],r8
         if ( Is_fat32 )
800044f6:	49 98       	lddpc	r8,80004558 <fat_cluster_val+0x428>
800044f8:	11 89       	ld.ub	r9,r8[0x0]
800044fa:	30 38       	mov	r8,3
800044fc:	f0 09 18 00 	cp.b	r9,r8
80004500:	c1 91       	brne	80004532 <fat_cluster_val+0x402>
         {  // FAT 32
            u8_ptr_cluster[2] = LSB2( fs_g_cluster.u32_val );
80004502:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004506:	f0 c9 ff fe 	sub	r9,r8,-2
8000450a:	49 58       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
8000450c:	2f c8       	sub	r8,-4
8000450e:	2f f8       	sub	r8,-1
80004510:	11 88       	ld.ub	r8,r8[0x0]
80004512:	b2 88       	st.b	r9[0x0],r8
            u8_ptr_cluster[3] = LSB3( fs_g_cluster.u32_val ) + (u8_data4 & 0xF0); // The high 4 bits are reserved
80004514:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004518:	f0 ca ff fd 	sub	r10,r8,-3
8000451c:	49 08       	lddpc	r8,8000455c <fat_cluster_val+0x42c>
8000451e:	2f c8       	sub	r8,-4
80004520:	11 89       	ld.ub	r9,r8[0x0]
80004522:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80004526:	e2 18 00 f0 	andl	r8,0xf0,COH
8000452a:	f2 08 00 08 	add	r8,r9,r8
8000452e:	5c 58       	castu.b	r8
80004530:	b4 88       	st.b	r10[0x0],r8
         }
      }
      // Here for FAT 32, 16 & 12 (only if the cluster values are in the same sector)
      u8_ptr_cluster[0] = u8_data1;
80004532:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004536:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000453a:	b2 88       	st.b	r9[0x0],r8
      u8_ptr_cluster[1] = u8_data2;
8000453c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004540:	f0 c9 ff ff 	sub	r9,r8,-1
80004544:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80004548:	b2 88       	st.b	r9[0x0],r8
      fat_cache_mark_sector_as_dirty();
8000454a:	f0 1f 00 0d 	mcall	8000457c <fat_cluster_val+0x44c>
      fs_g_status = FS_ERR_COMMAND;
      return false;
#endif  // FS_LEVEL_FEATURES
   }

   return true;
8000454e:	30 18       	mov	r8,1
}
80004550:	10 9c       	mov	r12,r8
80004552:	2f cd       	sub	sp,-16
80004554:	e3 cd 80 80 	ldm	sp++,r7,pc
80004558:	00 00       	add	r0,r0
8000455a:	11 9c       	ld.ub	r12,r8[0x1]
8000455c:	00 00       	add	r0,r0
8000455e:	11 f0       	ld.ub	r0,r8[0x7]
80004560:	00 00       	add	r0,r0
80004562:	0f 20       	ld.uh	r0,r7++
80004564:	00 00       	add	r0,r0
80004566:	11 84       	ld.ub	r4,r8[0x0]
80004568:	00 00       	add	r0,r0
8000456a:	0f 4c       	ld.w	r12,--r7
8000456c:	00 00       	add	r0,r0
8000456e:	11 50       	ld.sh	r0,--r8
80004570:	00 00       	add	r0,r0
80004572:	0f 0c       	ld.w	r12,r7++
80004574:	80 00       	ld.sh	r0,r0[0x0]
80004576:	57 c0       	stdsp	sp[0x1f0],r0
80004578:	00 00       	add	r0,r0
8000457a:	0f 50       	ld.sh	r0,--r7
8000457c:	80 00       	ld.sh	r0,r0[0x0]
8000457e:	58 b0       	cp.w	r0,11

80004580 <fat_cluster_readnext>:
//!   fs_g_u16_pos_fat        read cluster position in FAT
//!   fs_g_cluster.u32_val    value of cluster read
//! @endverbatim
//!
bool  fat_cluster_readnext( void )
{
80004580:	eb cd 40 80 	pushm	r7,lr
80004584:	1a 97       	mov	r7,sp
   // Compute the next cluster position in FAT
   if ( Is_fat32 )
80004586:	4b 38       	lddpc	r8,80004650 <fat_cluster_readnext+0xd0>
80004588:	11 89       	ld.ub	r9,r8[0x0]
8000458a:	30 38       	mov	r8,3
8000458c:	f0 09 18 00 	cp.b	r9,r8
80004590:	c0 81       	brne	800045a0 <fat_cluster_readnext+0x20>
   {
      fs_g_u16_pos_fat += 4;
80004592:	4b 18       	lddpc	r8,80004654 <fat_cluster_readnext+0xd4>
80004594:	90 08       	ld.sh	r8,r8[0x0]
80004596:	2f c8       	sub	r8,-4
80004598:	5c 88       	casts.h	r8
8000459a:	4a f9       	lddpc	r9,80004654 <fat_cluster_readnext+0xd4>
8000459c:	b2 08       	st.h	r9[0x0],r8
8000459e:	c0 78       	rjmp	800045ac <fat_cluster_readnext+0x2c>
   }else{
      // Is_fat16
      fs_g_u16_pos_fat += 2;
800045a0:	4a d8       	lddpc	r8,80004654 <fat_cluster_readnext+0xd4>
800045a2:	90 08       	ld.sh	r8,r8[0x0]
800045a4:	2f e8       	sub	r8,-2
800045a6:	5c 88       	casts.h	r8
800045a8:	4a b9       	lddpc	r9,80004654 <fat_cluster_readnext+0xd4>
800045aa:	b2 08       	st.h	r9[0x0],r8
   }

   // Check if next cluster is in internal cache
   if( FS_CACHE_SIZE == fs_g_u16_pos_fat )
800045ac:	4a a8       	lddpc	r8,80004654 <fat_cluster_readnext+0xd4>
800045ae:	90 09       	ld.sh	r9,r8[0x0]
800045b0:	e0 68 02 00 	mov	r8,512
800045b4:	f0 09 19 00 	cp.h	r9,r8
800045b8:	c1 41       	brne	800045e0 <fat_cluster_readnext+0x60>
   {
      // Update cache
      fs_g_u16_pos_fat = 0;
800045ba:	4a 79       	lddpc	r9,80004654 <fat_cluster_readnext+0xd4>
800045bc:	30 08       	mov	r8,0
800045be:	b2 08       	st.h	r9[0x0],r8
      fs_gu32_addrsector++;
800045c0:	4a 68       	lddpc	r8,80004658 <fat_cluster_readnext+0xd8>
800045c2:	70 08       	ld.w	r8,r8[0x0]
800045c4:	f0 c9 ff ff 	sub	r9,r8,-1
800045c8:	4a 48       	lddpc	r8,80004658 <fat_cluster_readnext+0xd8>
800045ca:	91 09       	st.w	r8[0x0],r9
      if( !fat_cache_read_sector( true ))
800045cc:	30 1c       	mov	r12,1
800045ce:	f0 1f 00 24 	mcall	8000465c <fat_cluster_readnext+0xdc>
800045d2:	18 98       	mov	r8,r12
800045d4:	ec 18 00 01 	eorl	r8,0x1
800045d8:	5c 58       	castu.b	r8
800045da:	c0 30       	breq	800045e0 <fat_cluster_readnext+0x60>
         return false;
800045dc:	30 08       	mov	r8,0
800045de:	c3 68       	rjmp	8000464a <fat_cluster_readnext+0xca>
   }

   //**** Read the cluster value
   LSB0( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+0];  // FAT 16,32
800045e0:	4a 08       	lddpc	r8,80004660 <fat_cluster_readnext+0xe0>
800045e2:	2f c8       	sub	r8,-4
800045e4:	f0 c9 ff fd 	sub	r9,r8,-3
800045e8:	49 b8       	lddpc	r8,80004654 <fat_cluster_readnext+0xd4>
800045ea:	90 08       	ld.sh	r8,r8[0x0]
800045ec:	5c 78       	castu.h	r8
800045ee:	49 ea       	lddpc	r10,80004664 <fat_cluster_readnext+0xe4>
800045f0:	f4 08 07 08 	ld.ub	r8,r10[r8]
800045f4:	b2 88       	st.b	r9[0x0],r8
   LSB1( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+1];  // FAT 16,32
800045f6:	49 b8       	lddpc	r8,80004660 <fat_cluster_readnext+0xe0>
800045f8:	2f c8       	sub	r8,-4
800045fa:	f0 c9 ff fe 	sub	r9,r8,-2
800045fe:	49 68       	lddpc	r8,80004654 <fat_cluster_readnext+0xd4>
80004600:	90 08       	ld.sh	r8,r8[0x0]
80004602:	5c 78       	castu.h	r8
80004604:	2f f8       	sub	r8,-1
80004606:	49 8a       	lddpc	r10,80004664 <fat_cluster_readnext+0xe4>
80004608:	f4 08 07 08 	ld.ub	r8,r10[r8]
8000460c:	b2 88       	st.b	r9[0x0],r8

   if ( Is_fat32 )
8000460e:	49 18       	lddpc	r8,80004650 <fat_cluster_readnext+0xd0>
80004610:	11 89       	ld.ub	r9,r8[0x0]
80004612:	30 38       	mov	r8,3
80004614:	f0 09 18 00 	cp.b	r9,r8
80004618:	c1 81       	brne	80004648 <fat_cluster_readnext+0xc8>
   {  // FAT 32
      LSB2( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+2];
8000461a:	49 28       	lddpc	r8,80004660 <fat_cluster_readnext+0xe0>
8000461c:	2f c8       	sub	r8,-4
8000461e:	f0 c9 ff ff 	sub	r9,r8,-1
80004622:	48 d8       	lddpc	r8,80004654 <fat_cluster_readnext+0xd4>
80004624:	90 08       	ld.sh	r8,r8[0x0]
80004626:	5c 78       	castu.h	r8
80004628:	2f e8       	sub	r8,-2
8000462a:	48 fa       	lddpc	r10,80004664 <fat_cluster_readnext+0xe4>
8000462c:	f4 08 07 08 	ld.ub	r8,r10[r8]
80004630:	b2 88       	st.b	r9[0x0],r8
      LSB3( fs_g_cluster.u32_val ) = fs_g_sector[fs_g_u16_pos_fat+3];
80004632:	48 c8       	lddpc	r8,80004660 <fat_cluster_readnext+0xe0>
80004634:	f0 c9 ff fc 	sub	r9,r8,-4
80004638:	48 78       	lddpc	r8,80004654 <fat_cluster_readnext+0xd4>
8000463a:	90 08       	ld.sh	r8,r8[0x0]
8000463c:	5c 78       	castu.h	r8
8000463e:	2f d8       	sub	r8,-3
80004640:	48 9a       	lddpc	r10,80004664 <fat_cluster_readnext+0xe4>
80004642:	f4 08 07 08 	ld.ub	r8,r10[r8]
80004646:	b2 88       	st.b	r9[0x0],r8
   }
   return true;
80004648:	30 18       	mov	r8,1
}
8000464a:	10 9c       	mov	r12,r8
8000464c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004650:	00 00       	add	r0,r0
80004652:	11 9c       	ld.ub	r12,r8[0x1]
80004654:	00 00       	add	r0,r0
80004656:	0f 20       	ld.uh	r0,r7++
80004658:	00 00       	add	r0,r0
8000465a:	0f 0c       	ld.w	r12,r7++
8000465c:	80 00       	ld.sh	r0,r0[0x0]
8000465e:	57 c0       	stdsp	sp[0x1f0],r0
80004660:	00 00       	add	r0,r0
80004662:	11 f0       	ld.ub	r0,r8[0x7]
80004664:	00 00       	add	r0,r0
80004666:	0f 50       	ld.sh	r0,--r7

80004668 <fat_checkcluster>:
//! IN :
//!   fs_g_cluster.u32_val       value to check
//! @endverbatim
//!
uint8_t    fat_checkcluster( void )
{
80004668:	eb cd 40 80 	pushm	r7,lr
8000466c:	1a 97       	mov	r7,sp
  if ( !fs_g_cluster.u32_val )
8000466e:	4a 88       	lddpc	r8,8000470c <fat_checkcluster+0xa4>
80004670:	70 18       	ld.w	r8,r8[0x4]
80004672:	58 08       	cp.w	r8,0
80004674:	c0 31       	brne	8000467a <fat_checkcluster+0x12>
    return FS_CLUS_BAD;
80004676:	30 18       	mov	r8,1
80004678:	c4 78       	rjmp	80004706 <fat_checkcluster+0x9e>

  // Cluster bad if (FAT12 == 0x0FF7) (FAT16 == 0xFFF7) (FAT32 == 0x0FFFFFF7)
  // Last cluster if (FAT12 > 0x0FF7) (FAT16 > 0xFFF7) (FAT32 > 0x0FFFFFF7)
  if ( Is_fat32 )
8000467a:	4a 68       	lddpc	r8,80004710 <fat_checkcluster+0xa8>
8000467c:	11 89       	ld.ub	r9,r8[0x0]
8000467e:	30 38       	mov	r8,3
80004680:	f0 09 18 00 	cp.b	r9,r8
80004684:	c1 61       	brne	800046b0 <fat_checkcluster+0x48>
  {
    if (fs_g_cluster.u32_val >= 0x0FFFFFF8)
80004686:	4a 28       	lddpc	r8,8000470c <fat_checkcluster+0xa4>
80004688:	70 18       	ld.w	r8,r8[0x4]
8000468a:	e0 69 ff f7 	mov	r9,65527
8000468e:	ea 19 0f ff 	orh	r9,0xfff
80004692:	12 38       	cp.w	r8,r9
80004694:	e0 88 00 04 	brls	8000469c <fat_checkcluster+0x34>
      return FS_CLUS_END;
80004698:	30 28       	mov	r8,2
8000469a:	c3 68       	rjmp	80004706 <fat_checkcluster+0x9e>
    else if (fs_g_cluster.u32_val == 0x0FFFFFF7)
8000469c:	49 c8       	lddpc	r8,8000470c <fat_checkcluster+0xa4>
8000469e:	70 18       	ld.w	r8,r8[0x4]
800046a0:	e0 69 ff f7 	mov	r9,65527
800046a4:	ea 19 0f ff 	orh	r9,0xfff
800046a8:	12 38       	cp.w	r8,r9
800046aa:	c2 d1       	brne	80004704 <fat_checkcluster+0x9c>
      return FS_CLUS_BAD;
800046ac:	30 18       	mov	r8,1
800046ae:	c2 c8       	rjmp	80004706 <fat_checkcluster+0x9e>
  }
  else if ( Is_fat16 )
800046b0:	49 88       	lddpc	r8,80004710 <fat_checkcluster+0xa8>
800046b2:	11 89       	ld.ub	r9,r8[0x0]
800046b4:	30 28       	mov	r8,2
800046b6:	f0 09 18 00 	cp.b	r9,r8
800046ba:	c1 01       	brne	800046da <fat_checkcluster+0x72>
  {
    if (fs_g_cluster.u32_val >= 0xFFF8)
800046bc:	49 48       	lddpc	r8,8000470c <fat_checkcluster+0xa4>
800046be:	70 18       	ld.w	r8,r8[0x4]
800046c0:	e0 48 ff f7 	cp.w	r8,65527
800046c4:	e0 88 00 04 	brls	800046cc <fat_checkcluster+0x64>
      return FS_CLUS_END;
800046c8:	30 28       	mov	r8,2
800046ca:	c1 e8       	rjmp	80004706 <fat_checkcluster+0x9e>
    else if (fs_g_cluster.u32_val == 0xFFF7)
800046cc:	49 08       	lddpc	r8,8000470c <fat_checkcluster+0xa4>
800046ce:	70 18       	ld.w	r8,r8[0x4]
800046d0:	e0 48 ff f7 	cp.w	r8,65527
800046d4:	c1 81       	brne	80004704 <fat_checkcluster+0x9c>
      return FS_CLUS_BAD;
800046d6:	30 18       	mov	r8,1
800046d8:	c1 78       	rjmp	80004706 <fat_checkcluster+0x9e>
  }
  else if ( Is_fat12 )
800046da:	48 e8       	lddpc	r8,80004710 <fat_checkcluster+0xa8>
800046dc:	11 89       	ld.ub	r9,r8[0x0]
800046de:	30 18       	mov	r8,1
800046e0:	f0 09 18 00 	cp.b	r9,r8
800046e4:	c1 01       	brne	80004704 <fat_checkcluster+0x9c>
  {
    if (fs_g_cluster.u32_val >= 0xFF8)
800046e6:	48 a8       	lddpc	r8,8000470c <fat_checkcluster+0xa4>
800046e8:	70 18       	ld.w	r8,r8[0x4]
800046ea:	e0 48 0f f7 	cp.w	r8,4087
800046ee:	e0 88 00 04 	brls	800046f6 <fat_checkcluster+0x8e>
      return FS_CLUS_END;
800046f2:	30 28       	mov	r8,2
800046f4:	c0 98       	rjmp	80004706 <fat_checkcluster+0x9e>
    else if (fs_g_cluster.u32_val == 0xFF7)
800046f6:	48 68       	lddpc	r8,8000470c <fat_checkcluster+0xa4>
800046f8:	70 18       	ld.w	r8,r8[0x4]
800046fa:	e0 48 0f f7 	cp.w	r8,4087
800046fe:	c0 31       	brne	80004704 <fat_checkcluster+0x9c>
      return FS_CLUS_BAD;
80004700:	30 18       	mov	r8,1
80004702:	c0 28       	rjmp	80004706 <fat_checkcluster+0x9e>
  }

  return FS_CLUS_OK;
80004704:	30 08       	mov	r8,0
}
80004706:	10 9c       	mov	r12,r8
80004708:	e3 cd 80 80 	ldm	sp++,r7,pc
8000470c:	00 00       	add	r0,r0
8000470e:	11 f0       	ld.ub	r0,r8[0x7]
80004710:	00 00       	add	r0,r0
80004712:	11 9c       	ld.ub	r12,r8[0x1]

80004714 <fat_cache_clusterlist_reset>:
//! @{

//! This function resets the cluster list caches
//!
void  fat_cache_clusterlist_reset( void )
{
80004714:	eb cd 40 80 	pushm	r7,lr
80004718:	1a 97       	mov	r7,sp
8000471a:	20 1d       	sub	sp,4
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
8000471c:	4a 09       	lddpc	r9,8000479c <fat_cache_clusterlist_reset+0x88>
8000471e:	30 08       	mov	r8,0
80004720:	b2 88       	st.b	r9[0x0],r8
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80004722:	30 08       	mov	r8,0
80004724:	ef 68 ff ff 	st.b	r7[-1],r8
80004728:	c2 f8       	rjmp	80004786 <fat_cache_clusterlist_reset+0x72>
   {
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
8000472a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000472e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80004732:	30 08       	mov	r8,0
80004734:	f0 0a 18 00 	cp.b	r10,r8
80004738:	5f 08       	sreq	r8
8000473a:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8000473e:	49 9b       	lddpc	r11,800047a0 <fat_cache_clusterlist_reset+0x8c>
80004740:	12 98       	mov	r8,r9
80004742:	a3 68       	lsl	r8,0x2
80004744:	12 08       	add	r8,r9
80004746:	a3 68       	lsl	r8,0x2
80004748:	f6 08 00 09 	add	r9,r11,r8
8000474c:	14 98       	mov	r8,r10
8000474e:	b2 88       	st.b	r9[0x0],r8
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
80004750:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004754:	49 3a       	lddpc	r10,800047a0 <fat_cache_clusterlist_reset+0x8c>
80004756:	12 98       	mov	r8,r9
80004758:	a3 68       	lsl	r8,0x2
8000475a:	12 08       	add	r8,r9
8000475c:	a3 68       	lsl	r8,0x2
8000475e:	f4 08 00 09 	add	r9,r10,r8
80004762:	3f f8       	mov	r8,-1
80004764:	b2 a8       	st.b	r9[0x2],r8
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
80004766:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000476a:	48 ea       	lddpc	r10,800047a0 <fat_cache_clusterlist_reset+0x8c>
8000476c:	12 98       	mov	r8,r9
8000476e:	a3 68       	lsl	r8,0x2
80004770:	12 08       	add	r8,r9
80004772:	a3 68       	lsl	r8,0x2
80004774:	f4 08 00 09 	add	r9,r10,r8
80004778:	3f f8       	mov	r8,-1
8000477a:	b2 98       	st.b	r9[0x1],r8
//!
void  fat_cache_clusterlist_reset( void )
{
   uint8_t u8_i;
   fs_g_u8_current_cache=0;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
8000477c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004780:	2f f8       	sub	r8,-1
80004782:	ef 68 ff ff 	st.b	r7[-1],r8
80004786:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000478a:	30 18       	mov	r8,1
8000478c:	f0 09 18 00 	cp.b	r9,r8
80004790:	fe 98 ff cd 	brls	8000472a <fat_cache_clusterlist_reset+0x16>
      // The cache list is split in two cache (file cluster list and directory cluster list)
      fs_g_cache_clusterlist[u8_i].b_cache_file = (u8_i<FS_NB_CACHE_CLUSLIST)?true:false;
      fs_g_cache_clusterlist[u8_i].u8_lun = 0xFF;
      fs_g_cache_clusterlist[u8_i].u8_level_use = 0xFF;
   }
}
80004794:	2f fd       	sub	sp,-4
80004796:	e3 cd 80 80 	ldm	sp++,r7,pc
8000479a:	00 00       	add	r0,r0
8000479c:	00 00       	add	r0,r0
8000479e:	11 a2       	ld.ub	r2,r8[0x2]
800047a0:	00 00       	add	r0,r0
800047a2:	0f 24       	ld.uh	r4,r7++

800047a4 <fat_cache_clusterlist_update_start>:
//! This function initializes a cache in cluster list caches
//!
//! @param     b_for_file  If true then it is a file cluster list else a directory cluster list  <br>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
800047a4:	eb cd 40 80 	pushm	r7,lr
800047a8:	1a 97       	mov	r7,sp
800047aa:	20 2d       	sub	sp,8
800047ac:	18 98       	mov	r8,r12
800047ae:	ef 68 ff f8 	st.b	r7[-8],r8
   // Get the OLD cache (=max level used)
   uint8_t u8_i;
   for( u8_i=0; u8_i<((FS_NB_CACHE_CLUSLIST*2)-1); u8_i++ ) // (FS_NB_CACHE_CLUSLIST*2)-1, in case of error
800047b2:	30 08       	mov	r8,0
800047b4:	ef 68 ff ff 	st.b	r7[-1],r8
800047b8:	c1 58       	rjmp	800047e2 <fat_cache_clusterlist_update_start+0x3e>
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file )
800047ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800047be:	4a ba       	lddpc	r10,80004868 <fat_cache_clusterlist_update_start+0xc4>
800047c0:	12 98       	mov	r8,r9
800047c2:	a3 68       	lsl	r8,0x2
800047c4:	12 08       	add	r8,r9
800047c6:	a3 68       	lsl	r8,0x2
800047c8:	f4 08 00 08 	add	r8,r10,r8
800047cc:	11 88       	ld.ub	r8,r8[0x0]
800047ce:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800047d2:	f0 09 18 00 	cp.b	r9,r8
800047d6:	c0 d0       	breq	800047f0 <fat_cache_clusterlist_update_start+0x4c>
//!
void  fat_cache_clusterlist_update_start( bool b_for_file )
{
   // Get the OLD cache (=max level used)
   uint8_t u8_i;
   for( u8_i=0; u8_i<((FS_NB_CACHE_CLUSLIST*2)-1); u8_i++ ) // (FS_NB_CACHE_CLUSLIST*2)-1, in case of error
800047d8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800047dc:	2f f8       	sub	r8,-1
800047de:	ef 68 ff ff 	st.b	r7[-1],r8
800047e2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800047e6:	30 08       	mov	r8,0
800047e8:	f0 09 18 00 	cp.b	r9,r8
800047ec:	ce 70       	breq	800047ba <fat_cache_clusterlist_update_start+0x16>
800047ee:	c0 28       	rjmp	800047f2 <fat_cache_clusterlist_update_start+0x4e>
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file )
      {
#if (FS_NB_CACHE_CLUSLIST>1)
         if( (FS_NB_CACHE_CLUSLIST-2) < fs_g_cache_clusterlist[u8_i].u8_level_use )
#endif
            break;
800047f0:	d7 03       	nop
      }
   }
   fs_g_u8_current_cache = u8_i;
800047f2:	49 f9       	lddpc	r9,8000486c <fat_cache_clusterlist_update_start+0xc8>
800047f4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800047f8:	b2 88       	st.b	r9[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].b_cache_file = b_for_file;
800047fa:	49 d8       	lddpc	r8,8000486c <fat_cache_clusterlist_update_start+0xc8>
800047fc:	11 88       	ld.ub	r8,r8[0x0]
800047fe:	10 99       	mov	r9,r8
80004800:	49 aa       	lddpc	r10,80004868 <fat_cache_clusterlist_update_start+0xc4>
80004802:	12 98       	mov	r8,r9
80004804:	a3 68       	lsl	r8,0x2
80004806:	12 08       	add	r8,r9
80004808:	a3 68       	lsl	r8,0x2
8000480a:	f4 08 00 09 	add	r9,r10,r8
8000480e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004812:	b2 88       	st.b	r9[0x0],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
80004814:	49 68       	lddpc	r8,8000486c <fat_cache_clusterlist_update_start+0xc8>
80004816:	11 88       	ld.ub	r8,r8[0x0]
80004818:	10 99       	mov	r9,r8
8000481a:	49 4a       	lddpc	r10,80004868 <fat_cache_clusterlist_update_start+0xc4>
8000481c:	12 98       	mov	r8,r9
8000481e:	a3 68       	lsl	r8,0x2
80004820:	12 08       	add	r8,r9
80004822:	a3 68       	lsl	r8,0x2
80004824:	f4 08 00 09 	add	r9,r10,r8
80004828:	3f f8       	mov	r8,-1
8000482a:	b2 a8       	st.b	r9[0x2],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;
8000482c:	49 08       	lddpc	r8,8000486c <fat_cache_clusterlist_update_start+0xc8>
8000482e:	11 88       	ld.ub	r8,r8[0x0]
80004830:	10 99       	mov	r9,r8
80004832:	49 08       	lddpc	r8,80004870 <fat_cache_clusterlist_update_start+0xcc>
80004834:	70 0b       	ld.w	r11,r8[0x0]
80004836:	48 da       	lddpc	r10,80004868 <fat_cache_clusterlist_update_start+0xc4>
80004838:	12 98       	mov	r8,r9
8000483a:	a3 68       	lsl	r8,0x2
8000483c:	12 08       	add	r8,r9
8000483e:	2f f8       	sub	r8,-1
80004840:	f4 08 09 2b 	st.w	r10[r8<<0x2],r11
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start    = fs_g_seg.u32_size_or_pos;
80004844:	48 a8       	lddpc	r8,8000486c <fat_cache_clusterlist_update_start+0xc8>
80004846:	11 88       	ld.ub	r8,r8[0x0]
80004848:	10 99       	mov	r9,r8
8000484a:	48 b8       	lddpc	r8,80004874 <fat_cache_clusterlist_update_start+0xd0>
8000484c:	70 1a       	ld.w	r10,r8[0x4]
8000484e:	48 7b       	lddpc	r11,80004868 <fat_cache_clusterlist_update_start+0xc4>
80004850:	12 98       	mov	r8,r9
80004852:	a3 68       	lsl	r8,0x2
80004854:	12 08       	add	r8,r9
80004856:	a3 68       	lsl	r8,0x2
80004858:	f6 08 00 08 	add	r8,r11,r8
8000485c:	2f 88       	sub	r8,-8
8000485e:	91 0a       	st.w	r8[0x0],r10
}
80004860:	2f ed       	sub	sp,-8
80004862:	e3 cd 80 80 	ldm	sp++,r7,pc
80004866:	00 00       	add	r0,r0
80004868:	00 00       	add	r0,r0
8000486a:	0f 24       	ld.uh	r4,r7++
8000486c:	00 00       	add	r0,r0
8000486e:	11 a2       	ld.ub	r2,r8[0x2]
80004870:	00 00       	add	r0,r0
80004872:	11 f0       	ld.ub	r0,r8[0x7]
80004874:	00 00       	add	r0,r0
80004876:	11 f8       	ld.ub	r8,r8[0x7]

80004878 <fat_cache_clusterlist_update_finish>:


//! This function updates a cache of cluster list caches
//!
void  fat_cache_clusterlist_update_finish( void )
{
80004878:	eb cd 40 80 	pushm	r7,lr
8000487c:	1a 97       	mov	r7,sp
8000487e:	20 1d       	sub	sp,4
   uint8_t u8_cluster_offset = fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start % fs_g_nav.u8_BPB_SecPerClus;
80004880:	4b 28       	lddpc	r8,80004948 <fat_cache_clusterlist_update_finish+0xd0>
80004882:	11 88       	ld.ub	r8,r8[0x0]
80004884:	10 99       	mov	r9,r8
80004886:	4b 2a       	lddpc	r10,8000494c <fat_cache_clusterlist_update_finish+0xd4>
80004888:	12 98       	mov	r8,r9
8000488a:	a3 68       	lsl	r8,0x2
8000488c:	12 08       	add	r8,r9
8000488e:	a3 68       	lsl	r8,0x2
80004890:	f4 08 00 08 	add	r8,r10,r8
80004894:	2f 88       	sub	r8,-8
80004896:	70 08       	ld.w	r8,r8[0x0]
80004898:	4a e9       	lddpc	r9,80004950 <fat_cache_clusterlist_update_finish+0xd8>
8000489a:	13 99       	ld.ub	r9,r9[0x1]
8000489c:	f0 09 0d 08 	divu	r8,r8,r9
800048a0:	12 98       	mov	r8,r9
800048a2:	ef 68 ff ff 	st.b	r7[-1],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = fs_g_nav.u8_lun;          // valid cache
800048a6:	4a 98       	lddpc	r8,80004948 <fat_cache_clusterlist_update_finish+0xd0>
800048a8:	11 88       	ld.ub	r8,r8[0x0]
800048aa:	10 99       	mov	r9,r8
800048ac:	4a 98       	lddpc	r8,80004950 <fat_cache_clusterlist_update_finish+0xd8>
800048ae:	11 8a       	ld.ub	r10,r8[0x0]
800048b0:	4a 7b       	lddpc	r11,8000494c <fat_cache_clusterlist_update_finish+0xd4>
800048b2:	12 98       	mov	r8,r9
800048b4:	a3 68       	lsl	r8,0x2
800048b6:	12 08       	add	r8,r9
800048b8:	a3 68       	lsl	r8,0x2
800048ba:	f6 08 00 09 	add	r9,r11,r8
800048be:	14 98       	mov	r8,r10
800048c0:	b2 a8       	st.b	r9[0x2],r8
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start   -= u8_cluster_offset;
800048c2:	4a 28       	lddpc	r8,80004948 <fat_cache_clusterlist_update_finish+0xd0>
800048c4:	11 88       	ld.ub	r8,r8[0x0]
800048c6:	10 99       	mov	r9,r8
800048c8:	4a 08       	lddpc	r8,80004948 <fat_cache_clusterlist_update_finish+0xd0>
800048ca:	11 88       	ld.ub	r8,r8[0x0]
800048cc:	10 9a       	mov	r10,r8
800048ce:	4a 0b       	lddpc	r11,8000494c <fat_cache_clusterlist_update_finish+0xd4>
800048d0:	14 98       	mov	r8,r10
800048d2:	a3 68       	lsl	r8,0x2
800048d4:	14 08       	add	r8,r10
800048d6:	a3 68       	lsl	r8,0x2
800048d8:	f6 08 00 08 	add	r8,r11,r8
800048dc:	2f 88       	sub	r8,-8
800048de:	70 0a       	ld.w	r10,r8[0x0]
800048e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800048e4:	10 1a       	sub	r10,r8
800048e6:	49 ab       	lddpc	r11,8000494c <fat_cache_clusterlist_update_finish+0xd4>
800048e8:	12 98       	mov	r8,r9
800048ea:	a3 68       	lsl	r8,0x2
800048ec:	12 08       	add	r8,r9
800048ee:	a3 68       	lsl	r8,0x2
800048f0:	f6 08 00 08 	add	r8,r11,r8
800048f4:	2f 88       	sub	r8,-8
800048f6:	91 0a       	st.w	r8[0x0],r10
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_addr     = fs_g_seg.u32_addr - u8_cluster_offset;
800048f8:	49 48       	lddpc	r8,80004948 <fat_cache_clusterlist_update_finish+0xd0>
800048fa:	11 88       	ld.ub	r8,r8[0x0]
800048fc:	10 99       	mov	r9,r8
800048fe:	49 68       	lddpc	r8,80004954 <fat_cache_clusterlist_update_finish+0xdc>
80004900:	70 0a       	ld.w	r10,r8[0x0]
80004902:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004906:	10 1a       	sub	r10,r8
80004908:	49 1b       	lddpc	r11,8000494c <fat_cache_clusterlist_update_finish+0xd4>
8000490a:	12 98       	mov	r8,r9
8000490c:	a3 68       	lsl	r8,0x2
8000490e:	12 08       	add	r8,r9
80004910:	a3 68       	lsl	r8,0x2
80004912:	f6 08 00 08 	add	r8,r11,r8
80004916:	2f 48       	sub	r8,-12
80004918:	91 0a       	st.w	r8[0x0],r10
   fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_size     = fs_g_seg.u32_size_or_pos + u8_cluster_offset;
8000491a:	48 c8       	lddpc	r8,80004948 <fat_cache_clusterlist_update_finish+0xd0>
8000491c:	11 88       	ld.ub	r8,r8[0x0]
8000491e:	10 99       	mov	r9,r8
80004920:	48 d8       	lddpc	r8,80004954 <fat_cache_clusterlist_update_finish+0xdc>
80004922:	70 1a       	ld.w	r10,r8[0x4]
80004924:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004928:	10 0a       	add	r10,r8
8000492a:	48 9b       	lddpc	r11,8000494c <fat_cache_clusterlist_update_finish+0xd4>
8000492c:	12 98       	mov	r8,r9
8000492e:	a3 68       	lsl	r8,0x2
80004930:	12 08       	add	r8,r9
80004932:	a3 68       	lsl	r8,0x2
80004934:	f6 08 00 08 	add	r8,r11,r8
80004938:	2f 08       	sub	r8,-16
8000493a:	91 0a       	st.w	r8[0x0],r10

   // Update the "level used" of cache
   fat_cache_clusterlist_update_select();
8000493c:	f0 1f 00 07 	mcall	80004958 <fat_cache_clusterlist_update_finish+0xe0>
}
80004940:	2f fd       	sub	sp,-4
80004942:	e3 cd 80 80 	ldm	sp++,r7,pc
80004946:	00 00       	add	r0,r0
80004948:	00 00       	add	r0,r0
8000494a:	11 a2       	ld.ub	r2,r8[0x2]
8000494c:	00 00       	add	r0,r0
8000494e:	0f 24       	ld.uh	r4,r7++
80004950:	00 00       	add	r0,r0
80004952:	11 50       	ld.sh	r0,--r8
80004954:	00 00       	add	r0,r0
80004956:	11 f8       	ld.ub	r8,r8[0x7]
80004958:	80 00       	ld.sh	r0,r0[0x0]
8000495a:	49 5c       	lddpc	r12,800049ac <fat_cache_clusterlist_update_select+0x50>

8000495c <fat_cache_clusterlist_update_select>:


//! This function signals that a cache is used
//!
void  fat_cache_clusterlist_update_select( void )
{
8000495c:	eb cd 40 80 	pushm	r7,lr
80004960:	1a 97       	mov	r7,sp
80004962:	20 1d       	sub	sp,4
   uint8_t u8_i;
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
80004964:	4b 78       	lddpc	r8,80004a40 <fat_cache_clusterlist_update_select+0xe4>
80004966:	11 88       	ld.ub	r8,r8[0x0]
80004968:	10 99       	mov	r9,r8
8000496a:	4b 7a       	lddpc	r10,80004a44 <fat_cache_clusterlist_update_select+0xe8>
8000496c:	12 98       	mov	r8,r9
8000496e:	a3 68       	lsl	r8,0x2
80004970:	12 08       	add	r8,r9
80004972:	a3 68       	lsl	r8,0x2
80004974:	f4 08 00 08 	add	r8,r10,r8
80004978:	11 88       	ld.ub	r8,r8[0x0]
8000497a:	ef 68 ff ff 	st.b	r7[-1],r8
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
8000497e:	4b 18       	lddpc	r8,80004a40 <fat_cache_clusterlist_update_select+0xe4>
80004980:	11 88       	ld.ub	r8,r8[0x0]
80004982:	10 99       	mov	r9,r8
80004984:	4b 0a       	lddpc	r10,80004a44 <fat_cache_clusterlist_update_select+0xe8>
80004986:	12 98       	mov	r8,r9
80004988:	a3 68       	lsl	r8,0x2
8000498a:	12 08       	add	r8,r9
8000498c:	a3 68       	lsl	r8,0x2
8000498e:	f4 08 00 08 	add	r8,r10,r8
80004992:	11 98       	ld.ub	r8,r8[0x1]
80004994:	ef 68 ff fe 	st.b	r7[-2],r8
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80004998:	30 08       	mov	r8,0
8000499a:	ef 68 ff fd 	st.b	r7[-3],r8
8000499e:	c3 b8       	rjmp	80004a14 <fat_cache_clusterlist_update_select+0xb8>
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
800049a0:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800049a4:	4a 8a       	lddpc	r10,80004a44 <fat_cache_clusterlist_update_select+0xe8>
800049a6:	12 98       	mov	r8,r9
800049a8:	a3 68       	lsl	r8,0x2
800049aa:	12 08       	add	r8,r9
800049ac:	a3 68       	lsl	r8,0x2
800049ae:	f4 08 00 08 	add	r8,r10,r8
800049b2:	11 88       	ld.ub	r8,r8[0x0]
800049b4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800049b8:	f0 09 18 00 	cp.b	r9,r8
800049bc:	c2 71       	brne	80004a0a <fat_cache_clusterlist_update_select+0xae>
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
800049be:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800049c2:	4a 1a       	lddpc	r10,80004a44 <fat_cache_clusterlist_update_select+0xe8>
800049c4:	12 98       	mov	r8,r9
800049c6:	a3 68       	lsl	r8,0x2
800049c8:	12 08       	add	r8,r9
800049ca:	a3 68       	lsl	r8,0x2
800049cc:	f4 08 00 08 	add	r8,r10,r8
800049d0:	11 98       	ld.ub	r8,r8[0x1]
800049d2:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800049d6:	f0 09 18 00 	cp.b	r9,r8
800049da:	e0 88 00 18 	brls	80004a0a <fat_cache_clusterlist_update_select+0xae>
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
800049de:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800049e2:	49 9a       	lddpc	r10,80004a44 <fat_cache_clusterlist_update_select+0xe8>
800049e4:	12 98       	mov	r8,r9
800049e6:	a3 68       	lsl	r8,0x2
800049e8:	12 08       	add	r8,r9
800049ea:	a3 68       	lsl	r8,0x2
800049ec:	f4 08 00 08 	add	r8,r10,r8
800049f0:	11 98       	ld.ub	r8,r8[0x1]
800049f2:	2f f8       	sub	r8,-1
800049f4:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
800049f8:	49 3b       	lddpc	r11,80004a44 <fat_cache_clusterlist_update_select+0xe8>
800049fa:	12 98       	mov	r8,r9
800049fc:	a3 68       	lsl	r8,0x2
800049fe:	12 08       	add	r8,r9
80004a00:	a3 68       	lsl	r8,0x2
80004a02:	f6 08 00 09 	add	r9,r11,r8
80004a06:	14 98       	mov	r8,r10
80004a08:	b2 98       	st.b	r9[0x1],r8
   uint8_t u8_level_to_update;
   bool b_file_cache;

   b_file_cache         = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].b_cache_file;
   u8_level_to_update   = fs_g_cache_clusterlist[ fs_g_u8_current_cache ].u8_level_use;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80004a0a:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80004a0e:	2f f8       	sub	r8,-1
80004a10:	ef 68 ff fd 	st.b	r7[-3],r8
80004a14:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80004a18:	30 18       	mov	r8,1
80004a1a:	f0 09 18 00 	cp.b	r9,r8
80004a1e:	fe 98 ff c1 	brls	800049a0 <fat_cache_clusterlist_update_select+0x44>
   {
      if( fs_g_cache_clusterlist[u8_i].b_cache_file == b_file_cache )
         if( u8_level_to_update > fs_g_cache_clusterlist[u8_i].u8_level_use )
           fs_g_cache_clusterlist[u8_i].u8_level_use++;
   }
   fs_g_cache_clusterlist[  fs_g_u8_current_cache  ].u8_level_use = 0;
80004a22:	48 88       	lddpc	r8,80004a40 <fat_cache_clusterlist_update_select+0xe4>
80004a24:	11 88       	ld.ub	r8,r8[0x0]
80004a26:	10 99       	mov	r9,r8
80004a28:	48 7a       	lddpc	r10,80004a44 <fat_cache_clusterlist_update_select+0xe8>
80004a2a:	12 98       	mov	r8,r9
80004a2c:	a3 68       	lsl	r8,0x2
80004a2e:	12 08       	add	r8,r9
80004a30:	a3 68       	lsl	r8,0x2
80004a32:	f4 08 00 09 	add	r9,r10,r8
80004a36:	30 08       	mov	r8,0
80004a38:	b2 98       	st.b	r9[0x1],r8
}
80004a3a:	2f fd       	sub	sp,-4
80004a3c:	e3 cd 80 80 	ldm	sp++,r7,pc
80004a40:	00 00       	add	r0,r0
80004a42:	11 a2       	ld.ub	r2,r8[0x2]
80004a44:	00 00       	add	r0,r0
80004a46:	0f 24       	ld.uh	r4,r7++

80004a48 <fat_cache_clusterlist_update_read>:
//!
//! @return    true  cluster list found and global variable fs_g_seg updated
//! @return    false no found in cluster list caches
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
80004a48:	eb cd 40 80 	pushm	r7,lr
80004a4c:	1a 97       	mov	r7,sp
80004a4e:	20 3d       	sub	sp,12
80004a50:	18 98       	mov	r8,r12
80004a52:	ef 68 ff f4 	st.b	r7[-12],r8
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80004a56:	30 08       	mov	r8,0
80004a58:	ef 68 ff ff 	st.b	r7[-1],r8
80004a5c:	c1 29       	rjmp	80004c80 <fat_cache_clusterlist_update_read+0x238>
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80004a5e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004a62:	fe fa 02 42 	ld.w	r10,pc[578]
80004a66:	12 98       	mov	r8,r9
80004a68:	a3 68       	lsl	r8,0x2
80004a6a:	12 08       	add	r8,r9
80004a6c:	a3 68       	lsl	r8,0x2
80004a6e:	f4 08 00 08 	add	r8,r10,r8
80004a72:	11 88       	ld.ub	r8,r8[0x0]
80004a74:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80004a78:	f0 09 18 00 	cp.b	r9,r8
80004a7c:	e0 81 00 fd 	brne	80004c76 <fat_cache_clusterlist_update_read+0x22e>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
80004a80:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004a84:	fe fa 02 20 	ld.w	r10,pc[544]
80004a88:	12 98       	mov	r8,r9
80004a8a:	a3 68       	lsl	r8,0x2
80004a8c:	12 08       	add	r8,r9
80004a8e:	a3 68       	lsl	r8,0x2
80004a90:	f4 08 00 08 	add	r8,r10,r8
80004a94:	11 a9       	ld.ub	r9,r8[0x2]
80004a96:	fe f8 02 12 	ld.w	r8,pc[530]
80004a9a:	11 88       	ld.ub	r8,r8[0x0]
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
   {
      if( (fs_g_cache_clusterlist[u8_i].b_cache_file == b_for_file)
80004a9c:	f0 09 18 00 	cp.b	r9,r8
80004aa0:	e0 81 00 eb 	brne	80004c76 <fat_cache_clusterlist_update_read+0x22e>
      &&  (fs_g_cache_clusterlist[u8_i].u8_lun == fs_g_nav.u8_lun ) )
      {
         if( fs_g_cache_clusterlist[u8_i].u32_cluster == fs_g_cluster.u32_pos )
80004aa4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004aa8:	4f fa       	lddpc	r10,80004ca4 <fat_cache_clusterlist_update_read+0x25c>
80004aaa:	12 98       	mov	r8,r9
80004aac:	a3 68       	lsl	r8,0x2
80004aae:	12 08       	add	r8,r9
80004ab0:	2f f8       	sub	r8,-1
80004ab2:	f4 08 03 29 	ld.w	r9,r10[r8<<0x2]
80004ab6:	4f e8       	lddpc	r8,80004cac <fat_cache_clusterlist_update_read+0x264>
80004ab8:	70 08       	ld.w	r8,r8[0x0]
80004aba:	10 39       	cp.w	r9,r8
80004abc:	e0 81 00 dd 	brne	80004c76 <fat_cache_clusterlist_update_read+0x22e>
         {
            if( fs_g_cache_clusterlist[u8_i].u32_start <= fs_g_seg.u32_size_or_pos )
80004ac0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004ac4:	4f 8a       	lddpc	r10,80004ca4 <fat_cache_clusterlist_update_read+0x25c>
80004ac6:	12 98       	mov	r8,r9
80004ac8:	a3 68       	lsl	r8,0x2
80004aca:	12 08       	add	r8,r9
80004acc:	a3 68       	lsl	r8,0x2
80004ace:	f4 08 00 08 	add	r8,r10,r8
80004ad2:	2f 88       	sub	r8,-8
80004ad4:	70 09       	ld.w	r9,r8[0x0]
80004ad6:	4f 78       	lddpc	r8,80004cb0 <fat_cache_clusterlist_update_read+0x268>
80004ad8:	70 18       	ld.w	r8,r8[0x4]
80004ada:	10 39       	cp.w	r9,r8
80004adc:	e0 8b 00 cd 	brhi	80004c76 <fat_cache_clusterlist_update_read+0x22e>
            {
               // The segment research is in or after the cache
               if( fs_g_cache_clusterlist[u8_i].u32_size  > (fs_g_seg.u32_size_or_pos-fs_g_cache_clusterlist[u8_i].u32_start) )
80004ae0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004ae4:	4f 0a       	lddpc	r10,80004ca4 <fat_cache_clusterlist_update_read+0x25c>
80004ae6:	12 98       	mov	r8,r9
80004ae8:	a3 68       	lsl	r8,0x2
80004aea:	12 08       	add	r8,r9
80004aec:	a3 68       	lsl	r8,0x2
80004aee:	f4 08 00 08 	add	r8,r10,r8
80004af2:	2f 08       	sub	r8,-16
80004af4:	70 0a       	ld.w	r10,r8[0x0]
80004af6:	4e f8       	lddpc	r8,80004cb0 <fat_cache_clusterlist_update_read+0x268>
80004af8:	70 1b       	ld.w	r11,r8[0x4]
80004afa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004afe:	4e ac       	lddpc	r12,80004ca4 <fat_cache_clusterlist_update_read+0x25c>
80004b00:	12 98       	mov	r8,r9
80004b02:	a3 68       	lsl	r8,0x2
80004b04:	12 08       	add	r8,r9
80004b06:	a3 68       	lsl	r8,0x2
80004b08:	f8 08 00 08 	add	r8,r12,r8
80004b0c:	2f 88       	sub	r8,-8
80004b0e:	70 08       	ld.w	r8,r8[0x0]
80004b10:	f6 08 01 08 	sub	r8,r11,r8
80004b14:	10 3a       	cp.w	r10,r8
80004b16:	e0 88 00 3b 	brls	80004b8c <fat_cache_clusterlist_update_read+0x144>
               {
                  //** The segment research is in cache, then compute the segment infos
                  fs_g_seg.u32_size_or_pos -= fs_g_cache_clusterlist[u8_i].u32_start;
80004b1a:	4e 68       	lddpc	r8,80004cb0 <fat_cache_clusterlist_update_read+0x268>
80004b1c:	70 1a       	ld.w	r10,r8[0x4]
80004b1e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004b22:	4e 1b       	lddpc	r11,80004ca4 <fat_cache_clusterlist_update_read+0x25c>
80004b24:	12 98       	mov	r8,r9
80004b26:	a3 68       	lsl	r8,0x2
80004b28:	12 08       	add	r8,r9
80004b2a:	a3 68       	lsl	r8,0x2
80004b2c:	f6 08 00 08 	add	r8,r11,r8
80004b30:	2f 88       	sub	r8,-8
80004b32:	70 08       	ld.w	r8,r8[0x0]
80004b34:	f4 08 01 09 	sub	r9,r10,r8
80004b38:	4d e8       	lddpc	r8,80004cb0 <fat_cache_clusterlist_update_read+0x268>
80004b3a:	91 19       	st.w	r8[0x4],r9
                  fs_g_seg.u32_addr = fs_g_cache_clusterlist[u8_i].u32_addr + fs_g_seg.u32_size_or_pos;
80004b3c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004b40:	4d 9a       	lddpc	r10,80004ca4 <fat_cache_clusterlist_update_read+0x25c>
80004b42:	12 98       	mov	r8,r9
80004b44:	a3 68       	lsl	r8,0x2
80004b46:	12 08       	add	r8,r9
80004b48:	a3 68       	lsl	r8,0x2
80004b4a:	f4 08 00 08 	add	r8,r10,r8
80004b4e:	2f 48       	sub	r8,-12
80004b50:	70 09       	ld.w	r9,r8[0x0]
80004b52:	4d 88       	lddpc	r8,80004cb0 <fat_cache_clusterlist_update_read+0x268>
80004b54:	70 18       	ld.w	r8,r8[0x4]
80004b56:	10 09       	add	r9,r8
80004b58:	4d 68       	lddpc	r8,80004cb0 <fat_cache_clusterlist_update_read+0x268>
80004b5a:	91 09       	st.w	r8[0x0],r9
                  fs_g_seg.u32_size_or_pos = fs_g_cache_clusterlist[u8_i].u32_size - fs_g_seg.u32_size_or_pos;
80004b5c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004b60:	4d 1a       	lddpc	r10,80004ca4 <fat_cache_clusterlist_update_read+0x25c>
80004b62:	12 98       	mov	r8,r9
80004b64:	a3 68       	lsl	r8,0x2
80004b66:	12 08       	add	r8,r9
80004b68:	a3 68       	lsl	r8,0x2
80004b6a:	f4 08 00 08 	add	r8,r10,r8
80004b6e:	2f 08       	sub	r8,-16
80004b70:	70 09       	ld.w	r9,r8[0x0]
80004b72:	4d 08       	lddpc	r8,80004cb0 <fat_cache_clusterlist_update_read+0x268>
80004b74:	70 18       	ld.w	r8,r8[0x4]
80004b76:	10 19       	sub	r9,r8
80004b78:	4c e8       	lddpc	r8,80004cb0 <fat_cache_clusterlist_update_read+0x268>
80004b7a:	91 19       	st.w	r8[0x4],r9
                  fs_g_u8_current_cache = u8_i;
80004b7c:	4c e9       	lddpc	r9,80004cb4 <fat_cache_clusterlist_update_read+0x26c>
80004b7e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004b82:	b2 88       	st.b	r9[0x0],r8
                  fat_cache_clusterlist_update_select();
80004b84:	f0 1f 00 4d 	mcall	80004cb8 <fat_cache_clusterlist_update_read+0x270>
                  return true;   // the segment is in cluster list cache
80004b88:	30 18       	mov	r8,1
80004b8a:	c8 88       	rjmp	80004c9a <fat_cache_clusterlist_update_read+0x252>
               }else{
                  //** It is after the cache then get cache information and continue to read the cluster list in FAT
                  // Store the result in this cache
                  fs_g_u8_current_cache = u8_i;
80004b8c:	4c a9       	lddpc	r9,80004cb4 <fat_cache_clusterlist_update_read+0x26c>
80004b8e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004b92:	b2 88       	st.b	r9[0x0],r8
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;   // invalid cache
80004b94:	4c 88       	lddpc	r8,80004cb4 <fat_cache_clusterlist_update_read+0x26c>
80004b96:	11 88       	ld.ub	r8,r8[0x0]
80004b98:	10 99       	mov	r9,r8
80004b9a:	4c 3a       	lddpc	r10,80004ca4 <fat_cache_clusterlist_update_read+0x25c>
80004b9c:	12 98       	mov	r8,r9
80004b9e:	a3 68       	lsl	r8,0x2
80004ba0:	12 08       	add	r8,r9
80004ba2:	a3 68       	lsl	r8,0x2
80004ba4:	f4 08 00 09 	add	r9,r10,r8
80004ba8:	3f f8       	mov	r8,-1
80004baa:	b2 a8       	st.b	r9[0x2],r8
                  // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // It is the same cluster start

                  // Get cache information to take time during the next FAT access
                  // Compute the cluster number corresponding at the last cluster of the cluster list cache
                  fs_g_cluster.u32_pos     = ((fs_g_cache_clusterlist[u8_i].u32_addr -fs_g_nav.u32_ptr_fat - fs_g_nav.u32_offset_data + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004bac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004bb0:	4b da       	lddpc	r10,80004ca4 <fat_cache_clusterlist_update_read+0x25c>
80004bb2:	12 98       	mov	r8,r9
80004bb4:	a3 68       	lsl	r8,0x2
80004bb6:	12 08       	add	r8,r9
80004bb8:	a3 68       	lsl	r8,0x2
80004bba:	f4 08 00 08 	add	r8,r10,r8
80004bbe:	2f 48       	sub	r8,-12
80004bc0:	70 09       	ld.w	r9,r8[0x0]
80004bc2:	4b a8       	lddpc	r8,80004ca8 <fat_cache_clusterlist_update_read+0x260>
80004bc4:	70 48       	ld.w	r8,r8[0x10]
80004bc6:	10 19       	sub	r9,r8
80004bc8:	4b 88       	lddpc	r8,80004ca8 <fat_cache_clusterlist_update_read+0x260>
80004bca:	70 58       	ld.w	r8,r8[0x14]
80004bcc:	f2 08 01 0a 	sub	r10,r9,r8
80004bd0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004bd4:	4b 4b       	lddpc	r11,80004ca4 <fat_cache_clusterlist_update_read+0x25c>
80004bd6:	12 98       	mov	r8,r9
80004bd8:	a3 68       	lsl	r8,0x2
80004bda:	12 08       	add	r8,r9
80004bdc:	a3 68       	lsl	r8,0x2
80004bde:	f6 08 00 08 	add	r8,r11,r8
80004be2:	2f 08       	sub	r8,-16
80004be4:	70 08       	ld.w	r8,r8[0x0]
80004be6:	f4 08 00 08 	add	r8,r10,r8
80004bea:	20 18       	sub	r8,1
80004bec:	4a f9       	lddpc	r9,80004ca8 <fat_cache_clusterlist_update_read+0x260>
80004bee:	13 99       	ld.ub	r9,r9[0x1]
80004bf0:	f0 09 0d 08 	divu	r8,r8,r9
80004bf4:	f0 c9 ff fe 	sub	r9,r8,-2
80004bf8:	4a d8       	lddpc	r8,80004cac <fat_cache_clusterlist_update_read+0x264>
80004bfa:	91 09       	st.w	r8[0x0],r9
                                             / fs_g_nav.u8_BPB_SecPerClus) +2;
                  u32_tmp  = fs_g_seg.u32_size_or_pos;                                 // save position ask
80004bfc:	4a d8       	lddpc	r8,80004cb0 <fat_cache_clusterlist_update_read+0x268>
80004bfe:	70 18       	ld.w	r8,r8[0x4]
80004c00:	ef 48 ff f8 	st.w	r7[-8],r8
                  // Compute the position of the end of cluster list cache, and decrement the position asked
                  fs_g_seg.u32_size_or_pos-= ((fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start + fs_g_cache_clusterlist[u8_i].u32_size -1)
80004c04:	4a b8       	lddpc	r8,80004cb0 <fat_cache_clusterlist_update_read+0x268>
80004c06:	70 1a       	ld.w	r10,r8[0x4]
80004c08:	4a b8       	lddpc	r8,80004cb4 <fat_cache_clusterlist_update_read+0x26c>
80004c0a:	11 88       	ld.ub	r8,r8[0x0]
80004c0c:	10 99       	mov	r9,r8
80004c0e:	4a 6b       	lddpc	r11,80004ca4 <fat_cache_clusterlist_update_read+0x25c>
80004c10:	12 98       	mov	r8,r9
80004c12:	a3 68       	lsl	r8,0x2
80004c14:	12 08       	add	r8,r9
80004c16:	a3 68       	lsl	r8,0x2
80004c18:	f6 08 00 08 	add	r8,r11,r8
80004c1c:	2f 88       	sub	r8,-8
80004c1e:	70 0b       	ld.w	r11,r8[0x0]
80004c20:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004c24:	4a 0c       	lddpc	r12,80004ca4 <fat_cache_clusterlist_update_read+0x25c>
80004c26:	12 98       	mov	r8,r9
80004c28:	a3 68       	lsl	r8,0x2
80004c2a:	12 08       	add	r8,r9
80004c2c:	a3 68       	lsl	r8,0x2
80004c2e:	f8 08 00 08 	add	r8,r12,r8
80004c32:	2f 08       	sub	r8,-16
80004c34:	70 08       	ld.w	r8,r8[0x0]
80004c36:	f6 08 00 08 	add	r8,r11,r8
80004c3a:	20 18       	sub	r8,1
80004c3c:	49 b9       	lddpc	r9,80004ca8 <fat_cache_clusterlist_update_read+0x260>
80004c3e:	13 99       	ld.ub	r9,r9[0x1]
80004c40:	f0 09 0d 08 	divu	r8,r8,r9
80004c44:	10 99       	mov	r9,r8
80004c46:	49 98       	lddpc	r8,80004ca8 <fat_cache_clusterlist_update_read+0x260>
80004c48:	11 98       	ld.ub	r8,r8[0x1]
80004c4a:	f2 08 02 48 	mul	r8,r9,r8
80004c4e:	f4 08 01 09 	sub	r9,r10,r8
80004c52:	49 88       	lddpc	r8,80004cb0 <fat_cache_clusterlist_update_read+0x268>
80004c54:	91 19       	st.w	r8[0x4],r9
                                             / fs_g_nav.u8_BPB_SecPerClus)
                                             * fs_g_nav.u8_BPB_SecPerClus;
                  fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start = u32_tmp;   // Update cache with the position asked
80004c56:	49 88       	lddpc	r8,80004cb4 <fat_cache_clusterlist_update_read+0x26c>
80004c58:	11 88       	ld.ub	r8,r8[0x0]
80004c5a:	10 99       	mov	r9,r8
80004c5c:	49 2a       	lddpc	r10,80004ca4 <fat_cache_clusterlist_update_read+0x25c>
80004c5e:	12 98       	mov	r8,r9
80004c60:	a3 68       	lsl	r8,0x2
80004c62:	12 08       	add	r8,r9
80004c64:	a3 68       	lsl	r8,0x2
80004c66:	f4 08 00 08 	add	r8,r10,r8
80004c6a:	2f 88       	sub	r8,-8
80004c6c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004c70:	91 09       	st.w	r8[0x0],r9
                  return false;                                                        // The segment isn't in cluster list cache
80004c72:	30 08       	mov	r8,0
80004c74:	c1 38       	rjmp	80004c9a <fat_cache_clusterlist_update_read+0x252>
//!
bool  fat_cache_clusterlist_update_read( bool b_for_file )
{
   uint32_t u32_tmp;
   uint8_t u8_i;
   for( u8_i=0; u8_i<(FS_NB_CACHE_CLUSLIST*2); u8_i++ )
80004c76:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80004c7a:	2f f8       	sub	r8,-1
80004c7c:	ef 68 ff ff 	st.b	r7[-1],r8
80004c80:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80004c84:	30 18       	mov	r8,1
80004c86:	f0 09 18 00 	cp.b	r9,r8
80004c8a:	fe 98 fe ea 	brls	80004a5e <fat_cache_clusterlist_update_read+0x16>
            }
         }
      }
   }
   // No found in cache then read FAT and store the result in cache
   fat_cache_clusterlist_update_start(b_for_file);
80004c8e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80004c92:	10 9c       	mov	r12,r8
80004c94:	f0 1f 00 0a 	mcall	80004cbc <fat_cache_clusterlist_update_read+0x274>
   return false;
80004c98:	30 08       	mov	r8,0
}
80004c9a:	10 9c       	mov	r12,r8
80004c9c:	2f dd       	sub	sp,-12
80004c9e:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ca2:	00 00       	add	r0,r0
80004ca4:	00 00       	add	r0,r0
80004ca6:	0f 24       	ld.uh	r4,r7++
80004ca8:	00 00       	add	r0,r0
80004caa:	11 50       	ld.sh	r0,--r8
80004cac:	00 00       	add	r0,r0
80004cae:	11 f0       	ld.ub	r0,r8[0x7]
80004cb0:	00 00       	add	r0,r0
80004cb2:	11 f8       	ld.ub	r8,r8[0x7]
80004cb4:	00 00       	add	r0,r0
80004cb6:	11 a2       	ld.ub	r2,r8[0x2]
80004cb8:	80 00       	ld.sh	r0,r0[0x0]
80004cba:	49 5c       	lddpc	r12,80004d0c <fat_read_file+0x4c>
80004cbc:	80 00       	ld.sh	r0,r0[0x0]
80004cbe:	47 a4       	lddsp	r4,sp[0x1e8]

80004cc0 <fat_read_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in file (unit byte)
//! @endverbatim
//!
bool  fat_read_file( uint8_t mode )
{
80004cc0:	eb cd 40 80 	pushm	r7,lr
80004cc4:	1a 97       	mov	r7,sp
80004cc6:	20 2d       	sub	sp,8
80004cc8:	18 98       	mov	r8,r12
80004cca:	ef 68 ff f8 	st.b	r7[-8],r8
   uint32_t   u32_sector_pos;

   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;
80004cce:	4b f8       	lddpc	r8,80004dc8 <fat_read_file+0x108>
80004cd0:	70 38       	ld.w	r8,r8[0xc]
80004cd2:	a9 98       	lsr	r8,0x9
80004cd4:	ef 48 ff fc 	st.w	r7[-4],r8

   if(FS_CLUST_ACT_ONE  == mode)
80004cd8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80004cdc:	30 28       	mov	r8,2
80004cde:	f0 09 18 00 	cp.b	r9,r8
80004ce2:	c1 61       	brne	80004d0e <fat_read_file+0x4e>
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004ce4:	4b a8       	lddpc	r8,80004dcc <fat_read_file+0x10c>
80004ce6:	11 89       	ld.ub	r9,r8[0x0]
80004ce8:	4b a8       	lddpc	r8,80004dd0 <fat_read_file+0x110>
80004cea:	11 88       	ld.ub	r8,r8[0x0]
80004cec:	f0 09 18 00 	cp.b	r9,r8
80004cf0:	c2 51       	brne	80004d3a <fat_read_file+0x7a>
      &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav_entry.u32_cluster )
80004cf2:	4b 78       	lddpc	r8,80004dcc <fat_read_file+0x10c>
80004cf4:	70 39       	ld.w	r9,r8[0xc]
80004cf6:	4b 58       	lddpc	r8,80004dc8 <fat_read_file+0x108>
80004cf8:	70 18       	ld.w	r8,r8[0x4]
   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;

   if(FS_CLUST_ACT_ONE  == mode)
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004cfa:	10 39       	cp.w	r9,r8
80004cfc:	c1 f1       	brne	80004d3a <fat_read_file+0x7a>
      &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav_entry.u32_cluster )
      &&  (fs_g_sectorcache.u32_clusterlist_pos    == u32_sector_pos ) )
80004cfe:	4b 48       	lddpc	r8,80004dcc <fat_read_file+0x10c>
80004d00:	70 49       	ld.w	r9,r8[0x10]
   // Compute sector position
   u32_sector_pos = fs_g_nav_entry.u32_pos_in_file >> FS_512B_SHIFT_BIT;

   if(FS_CLUST_ACT_ONE  == mode)
   {
      if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004d02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d06:	10 39       	cp.w	r9,r8
80004d08:	c1 91       	brne	80004d3a <fat_read_file+0x7a>
      &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav_entry.u32_cluster )
      &&  (fs_g_sectorcache.u32_clusterlist_pos    == u32_sector_pos ) )
      {
         return true;      // The internal cache contains the sector requested
80004d0a:	30 18       	mov	r8,1
80004d0c:	c5 a8       	rjmp	80004dc0 <fat_read_file+0x100>
      }
   }
   else
   {
      if( FS_CLUST_ACT_CLR == mode )
80004d0e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80004d12:	30 38       	mov	r8,3
80004d14:	f0 09 18 00 	cp.b	r9,r8
80004d18:	c1 11       	brne	80004d3a <fat_read_file+0x7a>
      {
         // Clear cluster list
         if( 0 == fs_g_nav_entry.u32_cluster )
80004d1a:	4a c8       	lddpc	r8,80004dc8 <fat_read_file+0x108>
80004d1c:	70 18       	ld.w	r8,r8[0x4]
80004d1e:	58 08       	cp.w	r8,0
80004d20:	c0 31       	brne	80004d26 <fat_read_file+0x66>
            return true;   // No cluster list is linked with the file, then no clear is necessary
80004d22:	30 18       	mov	r8,1
80004d24:	c4 e8       	rjmp	80004dc0 <fat_read_file+0x100>

         if(0 != (fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK) )
80004d26:	4a 98       	lddpc	r8,80004dc8 <fat_read_file+0x108>
80004d28:	70 38       	ld.w	r8,r8[0xc]
80004d2a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80004d2e:	c0 60       	breq	80004d3a <fat_read_file+0x7a>
         {
            // The actual sector is used, then start clear on the next sector
            u32_sector_pos++;
80004d30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004d34:	2f f8       	sub	r8,-1
80004d36:	ef 48 ff fc 	st.w	r7[-4],r8
         }
      }
   }

   // Get the segment which start at the current position
   fs_g_seg.u32_addr = fs_g_nav_entry.u32_cluster;
80004d3a:	4a 48       	lddpc	r8,80004dc8 <fat_read_file+0x108>
80004d3c:	70 19       	ld.w	r9,r8[0x4]
80004d3e:	4a 68       	lddpc	r8,80004dd4 <fat_read_file+0x114>
80004d40:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_sector_pos;
80004d42:	4a 58       	lddpc	r8,80004dd4 <fat_read_file+0x114>
80004d44:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d48:	91 19       	st.w	r8[0x4],r9
   if( FS_CLUST_ACT_ONE != mode )
80004d4a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80004d4e:	30 28       	mov	r8,2
80004d50:	f0 09 18 00 	cp.b	r9,r8
80004d54:	c0 c0       	breq	80004d6c <fat_read_file+0xac>
   {
      if( fat_cluster_list( mode, true ) )
80004d56:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80004d5a:	30 1b       	mov	r11,1
80004d5c:	10 9c       	mov	r12,r8
80004d5e:	f0 1f 00 1f 	mcall	80004dd8 <fat_read_file+0x118>
80004d62:	18 98       	mov	r8,r12
80004d64:	58 08       	cp.w	r8,0
80004d66:	c1 e0       	breq	80004da2 <fat_read_file+0xe2>
         return true;      // Get or clear segment OK
80004d68:	30 18       	mov	r8,1
80004d6a:	c2 b8       	rjmp	80004dc0 <fat_read_file+0x100>
   }
   else
   {
      if( fat_cluster_list( FS_CLUST_ACT_SEG, true ) )   // Read all segment
80004d6c:	30 1b       	mov	r11,1
80004d6e:	30 1c       	mov	r12,1
80004d70:	f0 1f 00 1a 	mcall	80004dd8 <fat_read_file+0x118>
80004d74:	18 98       	mov	r8,r12
80004d76:	58 08       	cp.w	r8,0
80004d78:	c1 50       	breq	80004da2 <fat_read_file+0xe2>
      {
         // Read the sector corresponding at the position file (= first sector of segment)
         fs_gu32_addrsector = fs_g_seg.u32_addr ;
80004d7a:	49 78       	lddpc	r8,80004dd4 <fat_read_file+0x114>
80004d7c:	70 09       	ld.w	r9,r8[0x0]
80004d7e:	49 88       	lddpc	r8,80004ddc <fat_read_file+0x11c>
80004d80:	91 09       	st.w	r8[0x0],r9
         if( fat_cache_read_sector( true ) )
80004d82:	30 1c       	mov	r12,1
80004d84:	f0 1f 00 17 	mcall	80004de0 <fat_read_file+0x120>
80004d88:	18 98       	mov	r8,r12
80004d8a:	58 08       	cp.w	r8,0
80004d8c:	c0 b0       	breq	80004da2 <fat_read_file+0xe2>
         {
            fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav_entry.u32_cluster;
80004d8e:	48 f8       	lddpc	r8,80004dc8 <fat_read_file+0x108>
80004d90:	70 19       	ld.w	r9,r8[0x4]
80004d92:	48 f8       	lddpc	r8,80004dcc <fat_read_file+0x10c>
80004d94:	91 39       	st.w	r8[0xc],r9
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
80004d96:	48 e8       	lddpc	r8,80004dcc <fat_read_file+0x10c>
80004d98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004d9c:	91 49       	st.w	r8[0x10],r9
            return true;
80004d9e:	30 18       	mov	r8,1
80004da0:	c1 08       	rjmp	80004dc0 <fat_read_file+0x100>
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
80004da2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80004da6:	30 38       	mov	r8,3
80004da8:	f0 09 18 00 	cp.b	r9,r8
80004dac:	c0 91       	brne	80004dbe <fat_read_file+0xfe>
   &&  (FS_ERR_OUT_LIST  == fs_g_status) )
80004dae:	48 e8       	lddpc	r8,80004de4 <fat_read_file+0x124>
80004db0:	11 89       	ld.ub	r9,r8[0x0]
            fs_g_sectorcache.u32_clusterlist_pos    = u32_sector_pos;
            return true;
         }
      }
   }
   if( (FS_CLUST_ACT_CLR == mode       )
80004db2:	31 a8       	mov	r8,26
80004db4:	f0 09 18 00 	cp.b	r9,r8
80004db8:	c0 31       	brne	80004dbe <fat_read_file+0xfe>
   &&  (FS_ERR_OUT_LIST  == fs_g_status) )
   {
      // It is possible to clear nothing
      return true;
80004dba:	30 18       	mov	r8,1
80004dbc:	c0 28       	rjmp	80004dc0 <fat_read_file+0x100>
   }
   return false;
80004dbe:	30 08       	mov	r8,0
}
80004dc0:	10 9c       	mov	r12,r8
80004dc2:	2f ed       	sub	sp,-8
80004dc4:	e3 cd 80 80 	ldm	sp++,r7,pc
80004dc8:	00 00       	add	r0,r0
80004dca:	0f 10       	ld.sh	r0,r7++
80004dcc:	00 00       	add	r0,r0
80004dce:	11 d8       	ld.ub	r8,r8[0x5]
80004dd0:	00 00       	add	r0,r0
80004dd2:	11 50       	ld.sh	r0,--r8
80004dd4:	00 00       	add	r0,r0
80004dd6:	11 f8       	ld.ub	r8,r8[0x7]
80004dd8:	80 00       	ld.sh	r0,r0[0x0]
80004dda:	3c 84       	mov	r4,-56
80004ddc:	00 00       	add	r0,r0
80004dde:	0f 0c       	ld.w	r12,r7++
80004de0:	80 00       	ld.sh	r0,r0[0x0]
80004de2:	57 c0       	stdsp	sp[0x1f0],r0
80004de4:	00 00       	add	r0,r0
80004de6:	11 a0       	ld.ub	r0,r8[0x2]

80004de8 <fat_write_file>:
//!   fs_g_nav_entry.u32_cluster       First cluster of selected file
//!   fs_g_nav_entry.u32_pos_in_file   Position in the file (unit byte)
//! @endverbatim
//!
bool  fat_write_file( uint8_t mode , uint32_t u32_nb_sector_write )
{
80004de8:	eb cd 40 80 	pushm	r7,lr
80004dec:	1a 97       	mov	r7,sp
80004dee:	20 2d       	sub	sp,8
80004df0:	18 98       	mov	r8,r12
80004df2:	ef 4b ff f8 	st.w	r7[-8],r11
80004df6:	ef 68 ff fc 	st.b	r7[-4],r8
   if( 0 == fs_g_nav_entry.u32_cluster )
80004dfa:	4d 18       	lddpc	r8,80004f3c <fat_write_file+0x154>
80004dfc:	70 18       	ld.w	r8,r8[0x4]
80004dfe:	58 08       	cp.w	r8,0
80004e00:	c0 b1       	brne	80004e16 <fat_write_file+0x2e>
   {
      // File don't have a cluster list, then alloc the first cluster list of the file
      MSB0(fs_g_seg.u32_addr)    = 0xFF;     // It is a new cluster list
80004e02:	4d 09       	lddpc	r9,80004f40 <fat_write_file+0x158>
80004e04:	3f f8       	mov	r8,-1
80004e06:	b2 88       	st.b	r9[0x0],r8
      // Update cluster list caches
      // fs_g_cluster.u32_pos    = ?         // To fill after alloc
      fs_g_seg.u32_size_or_pos   = 0;
80004e08:	4c e8       	lddpc	r8,80004f40 <fat_write_file+0x158>
80004e0a:	30 09       	mov	r9,0
80004e0c:	91 19       	st.w	r8[0x4],r9
      fat_cache_clusterlist_update_start(true);
80004e0e:	30 1c       	mov	r12,1
80004e10:	f0 1f 00 4d 	mcall	80004f44 <fat_write_file+0x15c>
80004e14:	c3 a8       	rjmp	80004e88 <fat_write_file+0xa0>
   }
   else
   {
      if( fat_read_file( mode ) )
80004e16:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004e1a:	10 9c       	mov	r12,r8
80004e1c:	f0 1f 00 4b 	mcall	80004f48 <fat_write_file+0x160>
80004e20:	18 98       	mov	r8,r12
80004e22:	58 08       	cp.w	r8,0
80004e24:	c0 30       	breq	80004e2a <fat_write_file+0x42>
         return true;      // A segment is available (no alloc necessary)
80004e26:	30 18       	mov	r8,1
80004e28:	c8 68       	rjmp	80004f34 <fat_write_file+0x14c>

      if( FS_ERR_OUT_LIST != fs_g_status )
80004e2a:	4c 98       	lddpc	r8,80004f4c <fat_write_file+0x164>
80004e2c:	11 89       	ld.ub	r9,r8[0x0]
80004e2e:	31 a8       	mov	r8,26
80004e30:	f0 09 18 00 	cp.b	r9,r8
80004e34:	c0 30       	breq	80004e3a <fat_write_file+0x52>
      {
         return false;     // Error system
80004e36:	30 08       	mov	r8,0
80004e38:	c7 e8       	rjmp	80004f34 <fat_write_file+0x14c>
      }
      // fat_read_file is outsize the list then the current cluster list cache contains the last cluster

      // Initialize cluster list caches before alloc routine
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u8_lun       = 0xFF;                     // invalid cache
80004e3a:	4c 68       	lddpc	r8,80004f50 <fat_write_file+0x168>
80004e3c:	11 88       	ld.ub	r8,r8[0x0]
80004e3e:	10 99       	mov	r9,r8
80004e40:	4c 5a       	lddpc	r10,80004f54 <fat_write_file+0x16c>
80004e42:	12 98       	mov	r8,r9
80004e44:	a3 68       	lsl	r8,0x2
80004e46:	12 08       	add	r8,r9
80004e48:	a3 68       	lsl	r8,0x2
80004e4a:	f4 08 00 09 	add	r9,r10,r8
80004e4e:	3f f8       	mov	r8,-1
80004e50:	b2 a8       	st.b	r9[0x2],r8
      // fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster  = fs_g_cluster.u32_pos;  // it is the same
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_start += fs_g_nav.u8_BPB_SecPerClus; // Position of next cluster (the first new)
80004e52:	4c 08       	lddpc	r8,80004f50 <fat_write_file+0x168>
80004e54:	11 88       	ld.ub	r8,r8[0x0]
80004e56:	10 99       	mov	r9,r8
80004e58:	4b e8       	lddpc	r8,80004f50 <fat_write_file+0x168>
80004e5a:	11 88       	ld.ub	r8,r8[0x0]
80004e5c:	10 9a       	mov	r10,r8
80004e5e:	4b eb       	lddpc	r11,80004f54 <fat_write_file+0x16c>
80004e60:	14 98       	mov	r8,r10
80004e62:	a3 68       	lsl	r8,0x2
80004e64:	14 08       	add	r8,r10
80004e66:	a3 68       	lsl	r8,0x2
80004e68:	f6 08 00 08 	add	r8,r11,r8
80004e6c:	2f 88       	sub	r8,-8
80004e6e:	70 0a       	ld.w	r10,r8[0x0]
80004e70:	4b a8       	lddpc	r8,80004f58 <fat_write_file+0x170>
80004e72:	11 98       	ld.ub	r8,r8[0x1]
80004e74:	10 0a       	add	r10,r8
80004e76:	4b 8b       	lddpc	r11,80004f54 <fat_write_file+0x16c>
80004e78:	12 98       	mov	r8,r9
80004e7a:	a3 68       	lsl	r8,0x2
80004e7c:	12 08       	add	r8,r9
80004e7e:	a3 68       	lsl	r8,0x2
80004e80:	f6 08 00 08 	add	r8,r11,r8
80004e84:	2f 88       	sub	r8,-8
80004e86:	91 0a       	st.w	r8[0x0],r10
   }

   // Alloc a cluster list
   if( FS_CLUST_ACT_SEG == mode )
80004e88:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004e8c:	30 18       	mov	r8,1
80004e8e:	f0 09 18 00 	cp.b	r9,r8
80004e92:	c0 61       	brne	80004e9e <fat_write_file+0xb6>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write;
80004e94:	4a b8       	lddpc	r8,80004f40 <fat_write_file+0x158>
80004e96:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004e9a:	91 19       	st.w	r8[0x4],r9
80004e9c:	c0 48       	rjmp	80004ea4 <fat_write_file+0xbc>
   }else{
      fs_g_seg.u32_size_or_pos = 1;                                                          // only one sector
80004e9e:	4a 98       	lddpc	r8,80004f40 <fat_write_file+0x158>
80004ea0:	30 19       	mov	r9,1
80004ea2:	91 19       	st.w	r8[0x4],r9
   }

   //note: fs_g_seg.u32_addr is already initialized with the last cluster value (see fat_cluster_list())
   if( !fat_allocfreespace())
80004ea4:	f0 1f 00 2e 	mcall	80004f5c <fat_write_file+0x174>
80004ea8:	18 98       	mov	r8,r12
80004eaa:	ec 18 00 01 	eorl	r8,0x1
80004eae:	5c 58       	castu.b	r8
80004eb0:	c0 30       	breq	80004eb6 <fat_write_file+0xce>
      return false;
80004eb2:	30 08       	mov	r8,0
80004eb4:	c4 08       	rjmp	80004f34 <fat_write_file+0x14c>
   //note: fs_g_seg.u32_addr is the first cluster of the cluster list allocated by alloc_free_space()
   //note: fs_g_seg.u32_size_or_pos = number of sectors remaining

   if( 0 == fs_g_nav_entry.u32_cluster )
80004eb6:	4a 28       	lddpc	r8,80004f3c <fat_write_file+0x154>
80004eb8:	70 18       	ld.w	r8,r8[0x4]
80004eba:	58 08       	cp.w	r8,0
80004ebc:	c1 11       	brne	80004ede <fat_write_file+0xf6>
   {
      // It is the first cluster list of file, then update following values in cluster list cache
      // fs_g_seg.u32_addr = already contains the first cluster of the file (see alloc_free_space())
      fs_g_cache_clusterlist[fs_g_u8_current_cache].u32_cluster = fs_g_seg.u32_addr;
80004ebe:	4a 58       	lddpc	r8,80004f50 <fat_write_file+0x168>
80004ec0:	11 88       	ld.ub	r8,r8[0x0]
80004ec2:	10 99       	mov	r9,r8
80004ec4:	49 f8       	lddpc	r8,80004f40 <fat_write_file+0x158>
80004ec6:	70 0b       	ld.w	r11,r8[0x0]
80004ec8:	4a 3a       	lddpc	r10,80004f54 <fat_write_file+0x16c>
80004eca:	12 98       	mov	r8,r9
80004ecc:	a3 68       	lsl	r8,0x2
80004ece:	12 08       	add	r8,r9
80004ed0:	2f f8       	sub	r8,-1
80004ed2:	f4 08 09 2b 	st.w	r10[r8<<0x2],r11
      // Update file entry
      fs_g_nav_entry.u32_cluster = fs_g_seg.u32_addr;
80004ed6:	49 b8       	lddpc	r8,80004f40 <fat_write_file+0x158>
80004ed8:	70 09       	ld.w	r9,r8[0x0]
80004eda:	49 98       	lddpc	r8,80004f3c <fat_write_file+0x154>
80004edc:	91 19       	st.w	r8[0x4],r9
   }

   // Update cluster list cache
   if( FS_CLUST_ACT_SEG == mode )
80004ede:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80004ee2:	30 18       	mov	r8,1
80004ee4:	f0 09 18 00 	cp.b	r9,r8
80004ee8:	c0 91       	brne	80004efa <fat_write_file+0x112>
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write - fs_g_seg.u32_size_or_pos;
80004eea:	49 68       	lddpc	r8,80004f40 <fat_write_file+0x158>
80004eec:	70 18       	ld.w	r8,r8[0x4]
80004eee:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004ef2:	10 19       	sub	r9,r8
80004ef4:	49 38       	lddpc	r8,80004f40 <fat_write_file+0x158>
80004ef6:	91 19       	st.w	r8[0x4],r9
80004ef8:	c0 78       	rjmp	80004f06 <fat_write_file+0x11e>
   }else{
      fs_g_seg.u32_size_or_pos = 1 - fs_g_seg.u32_size_or_pos;
80004efa:	49 28       	lddpc	r8,80004f40 <fat_write_file+0x158>
80004efc:	70 18       	ld.w	r8,r8[0x4]
80004efe:	f0 09 11 01 	rsub	r9,r8,1
80004f02:	49 08       	lddpc	r8,80004f40 <fat_write_file+0x158>
80004f04:	91 19       	st.w	r8[0x4],r9
   }
   fs_g_seg.u32_addr = ((fs_g_seg.u32_addr - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004f06:	48 f8       	lddpc	r8,80004f40 <fat_write_file+0x158>
80004f08:	70 08       	ld.w	r8,r8[0x0]
80004f0a:	f0 c9 00 02 	sub	r9,r8,2
80004f0e:	49 38       	lddpc	r8,80004f58 <fat_write_file+0x170>
80004f10:	11 98       	ld.ub	r8,r8[0x1]
80004f12:	b1 39       	mul	r9,r8
                     + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
80004f14:	49 18       	lddpc	r8,80004f58 <fat_write_file+0x170>
80004f16:	70 48       	ld.w	r8,r8[0x10]
80004f18:	10 09       	add	r9,r8
   {
      fs_g_seg.u32_size_or_pos = u32_nb_sector_write - fs_g_seg.u32_size_or_pos;
   }else{
      fs_g_seg.u32_size_or_pos = 1 - fs_g_seg.u32_size_or_pos;
   }
   fs_g_seg.u32_addr = ((fs_g_seg.u32_addr - 2) * fs_g_nav.u8_BPB_SecPerClus)
80004f1a:	49 08       	lddpc	r8,80004f58 <fat_write_file+0x170>
80004f1c:	70 58       	ld.w	r8,r8[0x14]
80004f1e:	10 09       	add	r9,r8
80004f20:	48 88       	lddpc	r8,80004f40 <fat_write_file+0x158>
80004f22:	91 09       	st.w	r8[0x0],r9
                     + fs_g_nav.u32_ptr_fat + fs_g_nav.u32_offset_data;
   fat_cache_clusterlist_update_finish();
80004f24:	f0 1f 00 0f 	mcall	80004f60 <fat_write_file+0x178>

   return fat_read_file( mode );    // load the new cluster list
80004f28:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80004f2c:	10 9c       	mov	r12,r8
80004f2e:	f0 1f 00 07 	mcall	80004f48 <fat_write_file+0x160>
80004f32:	18 98       	mov	r8,r12
}
80004f34:	10 9c       	mov	r12,r8
80004f36:	2f ed       	sub	sp,-8
80004f38:	e3 cd 80 80 	ldm	sp++,r7,pc
80004f3c:	00 00       	add	r0,r0
80004f3e:	0f 10       	ld.sh	r0,r7++
80004f40:	00 00       	add	r0,r0
80004f42:	11 f8       	ld.ub	r8,r8[0x7]
80004f44:	80 00       	ld.sh	r0,r0[0x0]
80004f46:	47 a4       	lddsp	r4,sp[0x1e8]
80004f48:	80 00       	ld.sh	r0,r0[0x0]
80004f4a:	4c c0       	lddpc	r0,80005078 <fat_entry_check+0x64>
80004f4c:	00 00       	add	r0,r0
80004f4e:	11 a0       	ld.ub	r0,r8[0x2]
80004f50:	00 00       	add	r0,r0
80004f52:	11 a2       	ld.ub	r2,r8[0x2]
80004f54:	00 00       	add	r0,r0
80004f56:	0f 24       	ld.uh	r4,r7++
80004f58:	00 00       	add	r0,r0
80004f5a:	11 50       	ld.sh	r0,--r8
80004f5c:	80 00       	ld.sh	r0,r0[0x0]
80004f5e:	6e 90       	ld.w	r0,r7[0x24]
80004f60:	80 00       	ld.sh	r0,r0[0x0]
80004f62:	48 78       	lddpc	r8,80004f7c <fat_read_dir+0x18>

80004f64 <fat_read_dir>:
//!   fs_g_nav.u32_cluster_sel_dir           First cluster of current directory
//!   fs_g_nav_fast.u16_entry_pos_sel_file   Position in directory (unit entry)
//! @endverbatim
//!
bool  fat_read_dir( void )
{
80004f64:	eb cd 40 80 	pushm	r7,lr
80004f68:	1a 97       	mov	r7,sp
80004f6a:	20 1d       	sub	sp,4
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);
80004f6c:	4a 38       	lddpc	r8,80004ff8 <fat_read_dir+0x94>
80004f6e:	90 18       	ld.sh	r8,r8[0x2]
80004f70:	5c 78       	castu.h	r8
80004f72:	a5 88       	lsr	r8,0x4
80004f74:	5c 88       	casts.h	r8
80004f76:	5c 78       	castu.h	r8
80004f78:	ef 48 ff fc 	st.w	r7[-4],r8

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004f7c:	4a 08       	lddpc	r8,80004ffc <fat_read_dir+0x98>
80004f7e:	11 89       	ld.ub	r9,r8[0x0]
80004f80:	4a 08       	lddpc	r8,80005000 <fat_read_dir+0x9c>
80004f82:	11 88       	ld.ub	r8,r8[0x0]
80004f84:	f0 09 18 00 	cp.b	r9,r8
80004f88:	c0 f1       	brne	80004fa6 <fat_read_dir+0x42>
   &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav.u32_cluster_sel_dir )
80004f8a:	49 d8       	lddpc	r8,80004ffc <fat_read_dir+0x98>
80004f8c:	70 39       	ld.w	r9,r8[0xc]
80004f8e:	49 d8       	lddpc	r8,80005000 <fat_read_dir+0x9c>
80004f90:	70 88       	ld.w	r8,r8[0x20]
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004f92:	10 39       	cp.w	r9,r8
80004f94:	c0 91       	brne	80004fa6 <fat_read_dir+0x42>
   &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav.u32_cluster_sel_dir )
   &&  (fs_g_sectorcache.u32_clusterlist_pos    == u32_cluster_pos ) )
80004f96:	49 a8       	lddpc	r8,80004ffc <fat_read_dir+0x98>
80004f98:	70 49       	ld.w	r9,r8[0x10]
   uint32_t u32_cluster_pos;

   // Compute the cluster list position corresponding of the current entry
   u32_cluster_pos = fs_g_nav_fast.u16_entry_pos_sel_file >> (FS_512B_SHIFT_BIT - FS_SHIFT_B_TO_FILE_ENTRY);

   if( (fs_g_sectorcache.u8_lun                 == fs_g_nav.u8_lun )
80004f9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80004f9e:	10 39       	cp.w	r9,r8
80004fa0:	c0 31       	brne	80004fa6 <fat_read_dir+0x42>
   &&  (fs_g_sectorcache.u32_clusterlist_start  == fs_g_nav.u32_cluster_sel_dir )
   &&  (fs_g_sectorcache.u32_clusterlist_pos    == u32_cluster_pos ) )
   {
         return true;      // The internal cache contains the sector asked
80004fa2:	30 18       	mov	r8,1
80004fa4:	c2 58       	rjmp	80004fee <fat_read_dir+0x8a>
   }

   // Get sector address corresponding at cluster list position
   fs_g_seg.u32_addr = fs_g_nav.u32_cluster_sel_dir;
80004fa6:	49 78       	lddpc	r8,80005000 <fat_read_dir+0x9c>
80004fa8:	70 89       	ld.w	r9,r8[0x20]
80004faa:	49 78       	lddpc	r8,80005004 <fat_read_dir+0xa0>
80004fac:	91 09       	st.w	r8[0x0],r9
   fs_g_seg.u32_size_or_pos = u32_cluster_pos;
80004fae:	49 68       	lddpc	r8,80005004 <fat_read_dir+0xa0>
80004fb0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004fb4:	91 19       	st.w	r8[0x4],r9
   if( fat_cluster_list( FS_CLUST_ACT_ONE, false ) )
80004fb6:	30 0b       	mov	r11,0
80004fb8:	30 2c       	mov	r12,2
80004fba:	f0 1f 00 14 	mcall	80005008 <fat_read_dir+0xa4>
80004fbe:	18 98       	mov	r8,r12
80004fc0:	58 08       	cp.w	r8,0
80004fc2:	c1 50       	breq	80004fec <fat_read_dir+0x88>
   {
      // Read the sector
      fs_gu32_addrsector = fs_g_seg.u32_addr;
80004fc4:	49 08       	lddpc	r8,80005004 <fat_read_dir+0xa0>
80004fc6:	70 09       	ld.w	r9,r8[0x0]
80004fc8:	49 18       	lddpc	r8,8000500c <fat_read_dir+0xa8>
80004fca:	91 09       	st.w	r8[0x0],r9
      if( fat_cache_read_sector( true ) )
80004fcc:	30 1c       	mov	r12,1
80004fce:	f0 1f 00 11 	mcall	80005010 <fat_read_dir+0xac>
80004fd2:	18 98       	mov	r8,r12
80004fd4:	58 08       	cp.w	r8,0
80004fd6:	c0 b0       	breq	80004fec <fat_read_dir+0x88>
      {
         // Update information about internal sector cache
         fs_g_sectorcache.u32_clusterlist_start  = fs_g_nav.u32_cluster_sel_dir;
80004fd8:	48 a8       	lddpc	r8,80005000 <fat_read_dir+0x9c>
80004fda:	70 89       	ld.w	r9,r8[0x20]
80004fdc:	48 88       	lddpc	r8,80004ffc <fat_read_dir+0x98>
80004fde:	91 39       	st.w	r8[0xc],r9
         fs_g_sectorcache.u32_clusterlist_pos    = u32_cluster_pos;
80004fe0:	48 78       	lddpc	r8,80004ffc <fat_read_dir+0x98>
80004fe2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80004fe6:	91 49       	st.w	r8[0x10],r9
         return true;
80004fe8:	30 18       	mov	r8,1
80004fea:	c0 28       	rjmp	80004fee <fat_read_dir+0x8a>
      }
   }
   return false;
80004fec:	30 08       	mov	r8,0
}
80004fee:	10 9c       	mov	r12,r8
80004ff0:	2f fd       	sub	sp,-4
80004ff2:	e3 cd 80 80 	ldm	sp++,r7,pc
80004ff6:	00 00       	add	r0,r0
80004ff8:	00 00       	add	r0,r0
80004ffa:	11 9c       	ld.ub	r12,r8[0x1]
80004ffc:	00 00       	add	r0,r0
80004ffe:	11 d8       	ld.ub	r8,r8[0x5]
80005000:	00 00       	add	r0,r0
80005002:	11 50       	ld.sh	r0,--r8
80005004:	00 00       	add	r0,r0
80005006:	11 f8       	ld.ub	r8,r8[0x7]
80005008:	80 00       	ld.sh	r0,r0[0x0]
8000500a:	3c 84       	mov	r4,-56
8000500c:	00 00       	add	r0,r0
8000500e:	0f 0c       	ld.w	r12,r7++
80005010:	80 00       	ld.sh	r0,r0[0x0]
80005012:	57 c0       	stdsp	sp[0x1f0],r0

80005014 <fat_entry_check>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_check( bool b_type )
{
80005014:	eb cd 40 80 	pushm	r7,lr
80005018:	1a 97       	mov	r7,sp
8000501a:	20 3d       	sub	sp,12
8000501c:	18 98       	mov	r8,r12
8000501e:	ef 68 ff f4 	st.b	r7[-12],r8
   PTR_CACHE u8_ptr_entry;
   uint8_t u8_first_byte, u8_seconde_byte;
   uint8_t u8_attribut;

   u8_ptr_entry = fat_get_ptr_entry();
80005022:	f0 1f 00 2e 	mcall	800050d8 <fat_entry_check+0xc4>
80005026:	18 98       	mov	r8,r12
80005028:	ef 48 ff f8 	st.w	r7[-8],r8

   u8_first_byte = u8_ptr_entry[0];
8000502c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005030:	11 88       	ld.ub	r8,r8[0x0]
80005032:	ef 68 ff fd 	st.b	r7[-3],r8
   if ( FS_ENTRY_END == u8_first_byte )
80005036:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000503a:	30 08       	mov	r8,0
8000503c:	f0 09 18 00 	cp.b	r9,r8
80005040:	c0 61       	brne	8000504c <fat_entry_check+0x38>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;   // end of directory
80005042:	4a 79       	lddpc	r9,800050dc <fat_entry_check+0xc8>
80005044:	30 a8       	mov	r8,10
80005046:	b2 88       	st.b	r9[0x0],r8
      return false;
80005048:	30 08       	mov	r8,0
8000504a:	c4 38       	rjmp	800050d0 <fat_entry_check+0xbc>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;        // by default BAD ENTRY
8000504c:	4a 49       	lddpc	r9,800050dc <fat_entry_check+0xc8>
8000504e:	30 b8       	mov	r8,11
80005050:	b2 88       	st.b	r9[0x0],r8
   if ( FS_ENTRY_DEL == u8_first_byte )      { return false;   } // entry deleted
80005052:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005056:	3e 58       	mov	r8,-27
80005058:	f0 09 18 00 	cp.b	r9,r8
8000505c:	c0 31       	brne	80005062 <fat_entry_check+0x4e>
8000505e:	30 08       	mov	r8,0
80005060:	c3 88       	rjmp	800050d0 <fat_entry_check+0xbc>
   if (   '.'  == u8_first_byte )            { return false;   } // current dir "."
80005062:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005066:	32 e8       	mov	r8,46
80005068:	f0 09 18 00 	cp.b	r9,r8
8000506c:	c0 31       	brne	80005072 <fat_entry_check+0x5e>
8000506e:	30 08       	mov	r8,0
80005070:	c3 08       	rjmp	800050d0 <fat_entry_check+0xbc>
   u8_seconde_byte = u8_ptr_entry[1];
80005072:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005076:	2f f8       	sub	r8,-1
80005078:	11 88       	ld.ub	r8,r8[0x0]
8000507a:	ef 68 ff fe 	st.b	r7[-2],r8
   if ( ('.'  == u8_first_byte)
8000507e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80005082:	32 e8       	mov	r8,46
80005084:	f0 09 18 00 	cp.b	r9,r8
80005088:	c0 91       	brne	8000509a <fat_entry_check+0x86>
8000508a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000508e:	32 e8       	mov	r8,46
80005090:	f0 09 18 00 	cp.b	r9,r8
80005094:	c0 31       	brne	8000509a <fat_entry_check+0x86>
   &&   ('.'  == u8_seconde_byte) )          { return false;   } // current dir ".."
80005096:	30 08       	mov	r8,0
80005098:	c1 c8       	rjmp	800050d0 <fat_entry_check+0xbc>

   // Check Attribute
   u8_attribut = u8_ptr_entry[11];
8000509a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000509e:	2f 58       	sub	r8,-11
800050a0:	11 88       	ld.ub	r8,r8[0x0]
800050a2:	ef 68 ff ff 	st.b	r7[-1],r8
   if ( FS_ATTR_VOLUME_ID & u8_attribut )    { return false;   } // volume id
800050a6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800050aa:	e2 18 00 08 	andl	r8,0x8,COH
800050ae:	c0 30       	breq	800050b4 <fat_entry_check+0xa0>
800050b0:	30 08       	mov	r8,0
800050b2:	c0 f8       	rjmp	800050d0 <fat_entry_check+0xbc>
   // Optimization, this line isn't necessary because the next test control this case
   // if ( FS_ATTR_LFN_ENTRY == *u8_ptr_entry) { return false;   } // long file name

   // Check entry type
   if( FS_ATTR_DIRECTORY & u8_attribut )
800050b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800050b8:	e2 18 00 10 	andl	r8,0x10,COH
800050bc:	c0 80       	breq	800050cc <fat_entry_check+0xb8>
   {
      return (FS_DIR == b_type);
800050be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800050c2:	ec 18 00 01 	eorl	r8,0x1
800050c6:	5c 58       	castu.b	r8
800050c8:	5c 58       	castu.b	r8
800050ca:	c0 38       	rjmp	800050d0 <fat_entry_check+0xbc>
   }else{
      return (FS_FILE == b_type);
800050cc:	ef 38 ff f4 	ld.ub	r8,r7[-12]
   }
}
800050d0:	10 9c       	mov	r12,r8
800050d2:	2f dd       	sub	sp,-12
800050d4:	e3 cd 80 80 	ldm	sp++,r7,pc
800050d8:	80 00       	ld.sh	r0,r0[0x0]
800050da:	57 98       	stdsp	sp[0x1e4],r8
800050dc:	00 00       	add	r0,r0
800050de:	11 a0       	ld.ub	r0,r8[0x2]

800050e0 <fat_get_entry_info>:
//! OUT:
//!   fs_g_nav_entry. u32_cluster, u8_attr, u32_size
//! @endverbatim
//!
void  fat_get_entry_info( void )
{
800050e0:	eb cd 40 80 	pushm	r7,lr
800050e4:	1a 97       	mov	r7,sp
800050e6:	20 1d       	sub	sp,4
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
800050e8:	f0 1f 00 32 	mcall	800051b0 <fat_get_entry_info+0xd0>
800050ec:	18 98       	mov	r8,r12
800050ee:	ef 48 ff fc 	st.w	r7[-4],r8

   // Get Attribute
   ptr_entry+= 11;
800050f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800050f6:	2f 58       	sub	r8,-11
800050f8:	ef 48 ff fc 	st.w	r7[-4],r8
   fs_g_nav_entry.u8_attr = ptr_entry[0];
800050fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005100:	11 88       	ld.ub	r8,r8[0x0]
80005102:	4a d9       	lddpc	r9,800051b4 <fat_get_entry_info+0xd4>
80005104:	b2 a8       	st.b	r9[0x2],r8

   // Get the first cluster of the file cluster list
   ptr_entry += (20-11);
80005106:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000510a:	2f 78       	sub	r8,-9
8000510c:	ef 48 ff fc 	st.w	r7[-4],r8
   LSB2(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
80005110:	4a 98       	lddpc	r8,800051b4 <fat_get_entry_info+0xd4>
80005112:	2f c8       	sub	r8,-4
80005114:	f0 c9 ff ff 	sub	r9,r8,-1
80005118:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000511c:	11 88       	ld.ub	r8,r8[0x0]
8000511e:	b2 88       	st.b	r9[0x0],r8
   LSB3(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
80005120:	4a 58       	lddpc	r8,800051b4 <fat_get_entry_info+0xd4>
80005122:	f0 c9 ff fc 	sub	r9,r8,-4
80005126:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000512a:	2f f8       	sub	r8,-1
8000512c:	11 88       	ld.ub	r8,r8[0x0]
8000512e:	b2 88       	st.b	r9[0x0],r8
   ptr_entry += (26-20);
80005130:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005134:	2f a8       	sub	r8,-6
80005136:	ef 48 ff fc 	st.w	r7[-4],r8
   LSB0(fs_g_nav_entry.u32_cluster) = ptr_entry[0];
8000513a:	49 f8       	lddpc	r8,800051b4 <fat_get_entry_info+0xd4>
8000513c:	2f c8       	sub	r8,-4
8000513e:	f0 c9 ff fd 	sub	r9,r8,-3
80005142:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005146:	11 88       	ld.ub	r8,r8[0x0]
80005148:	b2 88       	st.b	r9[0x0],r8
   LSB1(fs_g_nav_entry.u32_cluster) = ptr_entry[1];
8000514a:	49 b8       	lddpc	r8,800051b4 <fat_get_entry_info+0xd4>
8000514c:	2f c8       	sub	r8,-4
8000514e:	f0 c9 ff fe 	sub	r9,r8,-2
80005152:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005156:	2f f8       	sub	r8,-1
80005158:	11 88       	ld.ub	r8,r8[0x0]
8000515a:	b2 88       	st.b	r9[0x0],r8

   // Get the size of file
   ptr_entry += (28-26);
8000515c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005160:	2f e8       	sub	r8,-2
80005162:	ef 48 ff fc 	st.w	r7[-4],r8
   LSB0(fs_g_nav_entry.u32_size) = ptr_entry[0];
80005166:	49 48       	lddpc	r8,800051b4 <fat_get_entry_info+0xd4>
80005168:	2f 88       	sub	r8,-8
8000516a:	f0 c9 ff fd 	sub	r9,r8,-3
8000516e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005172:	11 88       	ld.ub	r8,r8[0x0]
80005174:	b2 88       	st.b	r9[0x0],r8
   LSB1(fs_g_nav_entry.u32_size) = ptr_entry[1];
80005176:	49 08       	lddpc	r8,800051b4 <fat_get_entry_info+0xd4>
80005178:	2f 88       	sub	r8,-8
8000517a:	f0 c9 ff fe 	sub	r9,r8,-2
8000517e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005182:	2f f8       	sub	r8,-1
80005184:	11 88       	ld.ub	r8,r8[0x0]
80005186:	b2 88       	st.b	r9[0x0],r8
   LSB2(fs_g_nav_entry.u32_size) = ptr_entry[2];
80005188:	48 b8       	lddpc	r8,800051b4 <fat_get_entry_info+0xd4>
8000518a:	2f 88       	sub	r8,-8
8000518c:	f0 c9 ff ff 	sub	r9,r8,-1
80005190:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005194:	2f e8       	sub	r8,-2
80005196:	11 88       	ld.ub	r8,r8[0x0]
80005198:	b2 88       	st.b	r9[0x0],r8
   LSB3(fs_g_nav_entry.u32_size) = ptr_entry[3];
8000519a:	48 78       	lddpc	r8,800051b4 <fat_get_entry_info+0xd4>
8000519c:	f0 c9 ff f8 	sub	r9,r8,-8
800051a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051a4:	2f d8       	sub	r8,-3
800051a6:	11 88       	ld.ub	r8,r8[0x0]
800051a8:	b2 88       	st.b	r9[0x0],r8
}
800051aa:	2f fd       	sub	sp,-4
800051ac:	e3 cd 80 80 	ldm	sp++,r7,pc
800051b0:	80 00       	ld.sh	r0,r0[0x0]
800051b2:	57 98       	stdsp	sp[0x1e4],r8
800051b4:	00 00       	add	r0,r0
800051b6:	0f 10       	ld.sh	r0,r7++

800051b8 <fat_clear_entry_info_and_ptr>:


//! This function resets the selection pointers
//!
void  fat_clear_entry_info_and_ptr( void )
{
800051b8:	eb cd 40 80 	pushm	r7,lr
800051bc:	1a 97       	mov	r7,sp
   fs_g_nav_fast.u16_entry_pos_sel_file= FS_NO_SEL;
800051be:	49 09       	lddpc	r9,800051fc <fat_clear_entry_info_and_ptr+0x44>
800051c0:	3f f8       	mov	r8,-1
800051c2:	b2 18       	st.h	r9[0x2],r8
   fs_g_nav.u16_pos_sel_file           = FS_NO_SEL;
800051c4:	48 f9       	lddpc	r9,80005200 <fat_clear_entry_info_and_ptr+0x48>
800051c6:	3f f8       	mov	r8,-1
800051c8:	f3 58 00 24 	st.h	r9[36],r8
   if( !fs_g_nav.b_mode_nav_single )
800051cc:	48 d8       	lddpc	r8,80005200 <fat_clear_entry_info_and_ptr+0x48>
800051ce:	f1 38 00 2d 	ld.ub	r8,r8[45]
800051d2:	58 08       	cp.w	r8,0
800051d4:	c0 51       	brne	800051de <fat_clear_entry_info_and_ptr+0x26>
   {
      fs_g_nav.b_mode_nav                 = FS_DIR;
800051d6:	48 b9       	lddpc	r9,80005200 <fat_clear_entry_info_and_ptr+0x48>
800051d8:	30 08       	mov	r8,0
800051da:	f3 68 00 2c 	st.b	r9[44],r8
   }
   fs_g_nav_entry.u8_attr     = 0;
800051de:	48 a9       	lddpc	r9,80005204 <fat_clear_entry_info_and_ptr+0x4c>
800051e0:	30 08       	mov	r8,0
800051e2:	b2 a8       	st.b	r9[0x2],r8
   fs_g_nav_entry.u32_cluster = 0;
800051e4:	48 88       	lddpc	r8,80005204 <fat_clear_entry_info_and_ptr+0x4c>
800051e6:	30 09       	mov	r9,0
800051e8:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;
800051ea:	48 78       	lddpc	r8,80005204 <fat_clear_entry_info_and_ptr+0x4c>
800051ec:	30 09       	mov	r9,0
800051ee:	91 29       	st.w	r8[0x8],r9
   Fat_file_close();
800051f0:	48 59       	lddpc	r9,80005204 <fat_clear_entry_info_and_ptr+0x4c>
800051f2:	30 08       	mov	r8,0
800051f4:	b2 88       	st.b	r9[0x0],r8
}
800051f6:	e3 cd 80 80 	ldm	sp++,r7,pc
800051fa:	00 00       	add	r0,r0
800051fc:	00 00       	add	r0,r0
800051fe:	11 9c       	ld.ub	r12,r8[0x1]
80005200:	00 00       	add	r0,r0
80005202:	11 50       	ld.sh	r0,--r8
80005204:	00 00       	add	r0,r0
80005206:	0f 10       	ld.sh	r0,r7++

80005208 <fat_write_entry_file>:
//! OUT:
//!   fs_g_sector    Updated
//! @endverbatim
//!
void  fat_write_entry_file( void )
{
80005208:	eb cd 40 80 	pushm	r7,lr
8000520c:	1a 97       	mov	r7,sp
8000520e:	20 1d       	sub	sp,4
   PTR_CACHE ptr_entry;

   fat_cache_mark_sector_as_dirty();
80005210:	f0 1f 00 32 	mcall	800052d8 <fat_write_entry_file+0xd0>
   ptr_entry = fat_get_ptr_entry();
80005214:	f0 1f 00 32 	mcall	800052dc <fat_write_entry_file+0xd4>
80005218:	18 98       	mov	r8,r12
8000521a:	ef 48 ff fc 	st.w	r7[-4],r8
      if( 0 == fs_g_nav_entry.u32_size )
         fs_g_nav_entry.u32_cluster = 0;
   }

   //! Write the Attribute
   ptr_entry+= 11;
8000521e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005222:	2f 58       	sub	r8,-11
80005224:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = fs_g_nav_entry.u8_attr;
80005228:	4a e8       	lddpc	r8,800052e0 <fat_write_entry_file+0xd8>
8000522a:	11 a8       	ld.ub	r8,r8[0x2]
8000522c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005230:	b2 88       	st.b	r9[0x0],r8

   // Write the first cluster of file cluster list
   ptr_entry += (20-11);
80005232:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005236:	2f 78       	sub	r8,-9
80005238:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = LSB2(fs_g_nav_entry.u32_cluster);
8000523c:	4a 98       	lddpc	r8,800052e0 <fat_write_entry_file+0xd8>
8000523e:	2f c8       	sub	r8,-4
80005240:	2f f8       	sub	r8,-1
80005242:	11 88       	ld.ub	r8,r8[0x0]
80005244:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005248:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[1] = LSB3(fs_g_nav_entry.u32_cluster);
8000524a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000524e:	f0 c9 ff ff 	sub	r9,r8,-1
80005252:	4a 48       	lddpc	r8,800052e0 <fat_write_entry_file+0xd8>
80005254:	2f c8       	sub	r8,-4
80005256:	11 88       	ld.ub	r8,r8[0x0]
80005258:	b2 88       	st.b	r9[0x0],r8
   ptr_entry += (26-20);
8000525a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000525e:	2f a8       	sub	r8,-6
80005260:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_cluster);
80005264:	49 f8       	lddpc	r8,800052e0 <fat_write_entry_file+0xd8>
80005266:	2f c8       	sub	r8,-4
80005268:	2f d8       	sub	r8,-3
8000526a:	11 88       	ld.ub	r8,r8[0x0]
8000526c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005270:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_cluster);
80005272:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005276:	f0 c9 ff ff 	sub	r9,r8,-1
8000527a:	49 a8       	lddpc	r8,800052e0 <fat_write_entry_file+0xd8>
8000527c:	2f c8       	sub	r8,-4
8000527e:	2f e8       	sub	r8,-2
80005280:	11 88       	ld.ub	r8,r8[0x0]
80005282:	b2 88       	st.b	r9[0x0],r8

   //! Write the size of file
   ptr_entry += (28-26);
80005284:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005288:	2f e8       	sub	r8,-2
8000528a:	ef 48 ff fc 	st.w	r7[-4],r8
   ptr_entry[0] = LSB0(fs_g_nav_entry.u32_size);
8000528e:	49 58       	lddpc	r8,800052e0 <fat_write_entry_file+0xd8>
80005290:	2f 88       	sub	r8,-8
80005292:	2f d8       	sub	r8,-3
80005294:	11 88       	ld.ub	r8,r8[0x0]
80005296:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000529a:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[1] = LSB1(fs_g_nav_entry.u32_size);
8000529c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052a0:	f0 c9 ff ff 	sub	r9,r8,-1
800052a4:	48 f8       	lddpc	r8,800052e0 <fat_write_entry_file+0xd8>
800052a6:	2f 88       	sub	r8,-8
800052a8:	2f e8       	sub	r8,-2
800052aa:	11 88       	ld.ub	r8,r8[0x0]
800052ac:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[2] = LSB2(fs_g_nav_entry.u32_size);
800052ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052b2:	f0 c9 ff fe 	sub	r9,r8,-2
800052b6:	48 b8       	lddpc	r8,800052e0 <fat_write_entry_file+0xd8>
800052b8:	2f 88       	sub	r8,-8
800052ba:	2f f8       	sub	r8,-1
800052bc:	11 88       	ld.ub	r8,r8[0x0]
800052be:	b2 88       	st.b	r9[0x0],r8
   ptr_entry[3] = LSB3(fs_g_nav_entry.u32_size);
800052c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800052c4:	f0 c9 ff fd 	sub	r9,r8,-3
800052c8:	48 68       	lddpc	r8,800052e0 <fat_write_entry_file+0xd8>
800052ca:	2f 88       	sub	r8,-8
800052cc:	11 88       	ld.ub	r8,r8[0x0]
800052ce:	b2 88       	st.b	r9[0x0],r8
}
800052d0:	2f fd       	sub	sp,-4
800052d2:	e3 cd 80 80 	ldm	sp++,r7,pc
800052d6:	00 00       	add	r0,r0
800052d8:	80 00       	ld.sh	r0,r0[0x0]
800052da:	58 b0       	cp.w	r0,11
800052dc:	80 00       	ld.sh	r0,r0[0x0]
800052de:	57 98       	stdsp	sp[0x1e4],r8
800052e0:	00 00       	add	r0,r0
800052e2:	0f 10       	ld.sh	r0,r7++

800052e4 <fat_entry_shortname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_shortname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode )
{
800052e4:	eb cd 40 80 	pushm	r7,lr
800052e8:	1a 97       	mov	r7,sp
800052ea:	20 6d       	sub	sp,24
800052ec:	ef 4c ff f0 	st.w	r7[-16],r12
800052f0:	16 99       	mov	r9,r11
800052f2:	14 98       	mov	r8,r10
800052f4:	ef 69 ff ec 	st.b	r7[-20],r9
800052f8:	ef 68 ff e8 	st.b	r7[-24],r8
   bool b_extension_nostart = true;
800052fc:	30 18       	mov	r8,1
800052fe:	ef 68 ff f4 	st.b	r7[-12],r8
   uint8_t u8_pos_name;
   uint8_t u8_entry_char, u8_szname_char;
   PTR_CACHE ptr_entry;
   uint8_t u8_pos_entry;

   fs_g_status = FS_ERR_NAME_INCORRECT;  // by default the name don't corresponding at filter name
80005302:	4e e9       	lddpc	r9,800054b8 <fat_entry_shortname+0x1d4>
80005304:	31 68       	mov	r8,22
80005306:	b2 88       	st.b	r9[0x0],r8

   u8_pos_name = 0;
80005308:	30 08       	mov	r8,0
8000530a:	ef 68 ff f5 	st.b	r7[-11],r8
   u8_pos_entry = 0;
8000530e:	30 08       	mov	r8,0
80005310:	ef 68 ff ff 	st.b	r7[-1],r8
   ptr_entry = fat_get_ptr_entry();
80005314:	f0 1f 00 6a 	mcall	800054bc <fat_entry_shortname+0x1d8>
80005318:	18 98       	mov	r8,r12
8000531a:	ef 48 ff f8 	st.w	r7[-8],r8

   // for each characters of short name
   while( 1 )
   {
      if( FS_SIZE_SFNAME == u8_pos_entry )
8000531e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005322:	30 b8       	mov	r8,11
80005324:	f0 09 18 00 	cp.b	r9,r8
80005328:	c0 51       	brne	80005332 <fat_entry_shortname+0x4e>
      {
         u8_entry_char = 0;   // end of name
8000532a:	30 08       	mov	r8,0
8000532c:	ef 68 ff f6 	st.b	r7[-10],r8
80005330:	c3 88       	rjmp	800053a0 <fat_entry_shortname+0xbc>
      }
      else
      {
         u8_entry_char = ptr_entry[ u8_pos_entry ];
80005332:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005336:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000533a:	f2 08 00 08 	add	r8,r9,r8
8000533e:	11 88       	ld.ub	r8,r8[0x0]
80005340:	ef 68 ff f6 	st.b	r7[-10],r8
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
80005344:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005348:	30 88       	mov	r8,8
8000534a:	f0 09 18 00 	cp.b	r9,r8
8000534e:	c0 71       	brne	8000535c <fat_entry_shortname+0x78>
80005350:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80005354:	30 08       	mov	r8,0
80005356:	f0 09 18 00 	cp.b	r9,r8
8000535a:	c0 71       	brne	80005368 <fat_entry_shortname+0x84>
8000535c:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80005360:	32 08       	mov	r8,32
80005362:	f0 09 18 00 	cp.b	r9,r8
80005366:	c1 d1       	brne	800053a0 <fat_entry_shortname+0xbc>
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
80005368:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000536c:	30 88       	mov	r8,8
8000536e:	f0 09 18 00 	cp.b	r9,r8
80005372:	e0 8b 00 14 	brhi	8000539a <fat_entry_shortname+0xb6>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
80005376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000537a:	2f 88       	sub	r8,-8
8000537c:	11 89       	ld.ub	r9,r8[0x0]
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
8000537e:	32 08       	mov	r8,32
80005380:	f0 09 18 00 	cp.b	r9,r8
80005384:	c0 b0       	breq	8000539a <fat_entry_shortname+0xb6>
            &&  (' ' != ptr_entry[ FS_SIZE_SFNAME_WITHOUT_EXT ]) )   // extension exists
            {
               // go to extension position
               b_extension_nostart = false;
80005386:	30 08       	mov	r8,0
80005388:	ef 68 ff f4 	st.b	r7[-12],r8
               u8_pos_entry = FS_SIZE_SFNAME_WITHOUT_EXT-1;
8000538c:	30 78       	mov	r8,7
8000538e:	ef 68 ff ff 	st.b	r7[-1],r8
               u8_entry_char = '.';
80005392:	32 e8       	mov	r8,46
80005394:	ef 68 ff f6 	st.b	r7[-10],r8
         u8_entry_char = ptr_entry[ u8_pos_entry ];
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT == u8_pos_entry) && b_extension_nostart)  // end of name and '.' character not written
         ||  ( ' ' == u8_entry_char) )
         {
            // end of name or extension
            if( (FS_SIZE_SFNAME_WITHOUT_EXT >= u8_pos_entry)         // End of name without extension
80005398:	c0 48       	rjmp	800053a0 <fat_entry_shortname+0xbc>
               u8_pos_entry = FS_SIZE_SFNAME_WITHOUT_EXT-1;
               u8_entry_char = '.';
            }
            else
            {
               u8_entry_char = 0;                                    // end of name
8000539a:	30 08       	mov	r8,0
8000539c:	ef 68 ff f6 	st.b	r7[-10],r8
            }
         }
      }

      if( FS_NAME_GET == b_mode )
800053a0:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800053a4:	30 08       	mov	r8,0
800053a6:	f0 09 18 00 	cp.b	r9,r8
800053aa:	c2 a0       	breq	800053fe <fat_entry_shortname+0x11a>
      {
         if( !g_b_string_length )
800053ac:	4c 58       	lddpc	r8,800054c0 <fat_entry_shortname+0x1dc>
800053ae:	11 88       	ld.ub	r8,r8[0x0]
800053b0:	ec 18 00 01 	eorl	r8,0x1
800053b4:	5c 58       	castu.b	r8
800053b6:	c5 30       	breq	8000545c <fat_entry_shortname+0x178>
         {
            if(u8_pos_name >= (u8_size_max-1))
800053b8:	ef 39 ff f5 	ld.ub	r9,r7[-11]
800053bc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
800053c0:	20 18       	sub	r8,1
800053c2:	10 39       	cp.w	r9,r8
800053c4:	c0 45       	brlt	800053cc <fat_entry_shortname+0xe8>
               u8_entry_char = 0;                                    // buffer full then force end of string
800053c6:	30 08       	mov	r8,0
800053c8:	ef 68 ff f6 	st.b	r7[-10],r8

            if( ('A'<=u8_entry_char) && (u8_entry_char<='Z'))
800053cc:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800053d0:	34 08       	mov	r8,64
800053d2:	f0 09 18 00 	cp.b	r9,r8
800053d6:	e0 88 00 0e 	brls	800053f2 <fat_entry_shortname+0x10e>
800053da:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800053de:	35 a8       	mov	r8,90
800053e0:	f0 09 18 00 	cp.b	r9,r8
800053e4:	e0 8b 00 07 	brhi	800053f2 <fat_entry_shortname+0x10e>
               u8_entry_char += ('a'-'A');                           // display short name in down case
800053e8:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800053ec:	2e 08       	sub	r8,-32
800053ee:	ef 68 ff f6 	st.b	r7[-10],r8

            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u8_entry_char;
            }else{
               sz_name[0] = u8_entry_char;
800053f2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800053f6:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800053fa:	b2 88       	st.b	r9[0x0],r8
800053fc:	c3 08       	rjmp	8000545c <fat_entry_shortname+0x178>

         if( Is_unicode )
         {
            u8_szname_char = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u8_szname_char = sz_name[0];
800053fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005402:	11 88       	ld.ub	r8,r8[0x0]
80005404:	ef 68 ff f7 	st.b	r7[-9],r8
         }
         if ('*' == u8_szname_char)
80005408:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000540c:	32 a8       	mov	r8,42
8000540e:	f0 09 18 00 	cp.b	r9,r8
80005412:	c0 31       	brne	80005418 <fat_entry_shortname+0x134>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
80005414:	30 18       	mov	r8,1
80005416:	c4 c8       	rjmp	800054ae <fat_entry_shortname+0x1ca>
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
80005418:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000541c:	30 08       	mov	r8,0
8000541e:	f0 09 18 00 	cp.b	r9,r8
80005422:	c0 d1       	brne	8000543c <fat_entry_shortname+0x158>
80005424:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80005428:	35 c8       	mov	r8,92
8000542a:	f0 09 18 00 	cp.b	r9,r8
8000542e:	c1 70       	breq	8000545c <fat_entry_shortname+0x178>
80005430:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80005434:	32 f8       	mov	r8,47
80005436:	f0 09 18 00 	cp.b	r9,r8
8000543a:	c1 10       	breq	8000545c <fat_entry_shortname+0x178>
         {
            if((u8_szname_char != u8_entry_char)
8000543c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80005440:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80005444:	f0 09 18 00 	cp.b	r9,r8
80005448:	c0 a0       	breq	8000545c <fat_entry_shortname+0x178>
            && (u8_szname_char != (u8_entry_char+('a'-'A'))) )  // no case sensitive
8000544a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000544e:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80005452:	2e 08       	sub	r8,-32
            return true;   //*** The name is correct ***
         }

         if( (0 != u8_entry_char) || (('\\' != u8_szname_char) && ('/' != u8_szname_char)) )
         {
            if((u8_szname_char != u8_entry_char)
80005454:	10 39       	cp.w	r9,r8
80005456:	c0 30       	breq	8000545c <fat_entry_shortname+0x178>
            && (u8_szname_char != (u8_entry_char+('a'-'A'))) )  // no case sensitive
               return false;  // short name not equal
80005458:	30 08       	mov	r8,0
8000545a:	c2 a8       	rjmp	800054ae <fat_entry_shortname+0x1ca>
         }
      }

      // For each characters
      if (0 == u8_entry_char)
8000545c:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80005460:	30 08       	mov	r8,0
80005462:	f0 09 18 00 	cp.b	r9,r8
80005466:	c0 e1       	brne	80005482 <fat_entry_shortname+0x19e>
      {
         if( g_b_string_length )
80005468:	49 68       	lddpc	r8,800054c0 <fat_entry_shortname+0x1dc>
8000546a:	11 88       	ld.ub	r8,r8[0x0]
8000546c:	58 08       	cp.w	r8,0
8000546e:	c0 80       	breq	8000547e <fat_entry_shortname+0x19a>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;      // Get length name
80005470:	ee f9 ff f0 	ld.w	r9,r7[-16]
80005474:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80005478:	2f f8       	sub	r8,-1
8000547a:	5c 88       	casts.h	r8
8000547c:	b2 08       	st.h	r9[0x0],r8
         }
         return true;   // End of test correct or end of get name
8000547e:	30 18       	mov	r8,1
80005480:	c1 78       	rjmp	800054ae <fat_entry_shortname+0x1ca>
      }
      if( !g_b_string_length )
80005482:	49 08       	lddpc	r8,800054c0 <fat_entry_shortname+0x1dc>
80005484:	11 88       	ld.ub	r8,r8[0x0]
80005486:	ec 18 00 01 	eorl	r8,0x1
8000548a:	5c 58       	castu.b	r8
8000548c:	c0 60       	breq	80005498 <fat_entry_shortname+0x1b4>
      {
         sz_name += (Is_unicode? 2 : 1 );
8000548e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80005492:	2f f8       	sub	r8,-1
80005494:	ef 48 ff f0 	st.w	r7[-16],r8
      }
      u8_pos_name++;
80005498:	ef 38 ff f5 	ld.ub	r8,r7[-11]
8000549c:	2f f8       	sub	r8,-1
8000549e:	ef 68 ff f5 	st.b	r7[-11],r8
      u8_pos_entry++;
800054a2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800054a6:	2f f8       	sub	r8,-1
800054a8:	ef 68 ff ff 	st.b	r7[-1],r8
   }
800054ac:	c3 9b       	rjmp	8000531e <fat_entry_shortname+0x3a>
}
800054ae:	10 9c       	mov	r12,r8
800054b0:	2f ad       	sub	sp,-24
800054b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800054b6:	00 00       	add	r0,r0
800054b8:	00 00       	add	r0,r0
800054ba:	11 a0       	ld.ub	r0,r8[0x2]
800054bc:	80 00       	ld.sh	r0,r0[0x0]
800054be:	57 98       	stdsp	sp[0x1e4],r8
800054c0:	00 00       	add	r0,r0
800054c2:	11 a1       	ld.ub	r1,r8[0x2]

800054c4 <fat_entry_longname>:
//!   fs_g_sector       The directory sector corresponding at the current position
//!   fs_g_nav_fast.u16_entry_pos_sel_file    Position in directory of the entry file (unit entry)
//! @endverbatim
//!
bool  fat_entry_longname( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case )
{
800054c4:	eb cd 40 80 	pushm	r7,lr
800054c8:	1a 97       	mov	r7,sp
800054ca:	20 7d       	sub	sp,28
800054cc:	ef 4c ff f0 	st.w	r7[-16],r12
800054d0:	12 98       	mov	r8,r9
800054d2:	16 99       	mov	r9,r11
800054d4:	ef 69 ff ec 	st.b	r7[-20],r9
800054d8:	14 99       	mov	r9,r10
800054da:	ef 69 ff e8 	st.b	r7[-24],r9
800054de:	ef 68 ff e4 	st.b	r7[-28],r8
   uint8_t u8_pos_name;
   PTR_CACHE ptr_entry;
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();
800054e2:	f0 1f 00 99 	mcall	80005744 <fat_entry_longname+0x280>
800054e6:	18 98       	mov	r8,r12
800054e8:	ef 48 ff f8 	st.w	r7[-8],r8

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
800054ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054f0:	11 88       	ld.ub	r8,r8[0x0]
800054f2:	58 08       	cp.w	r8,0
800054f4:	c1 00       	breq	80005514 <fat_entry_longname+0x50>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
800054f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800054fa:	11 89       	ld.ub	r9,r8[0x0]
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
800054fc:	3e 58       	mov	r8,-27
800054fe:	f0 09 18 00 	cp.b	r9,r8
80005502:	c0 90       	breq	80005514 <fat_entry_longname+0x50>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
80005504:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005508:	2f 58       	sub	r8,-11
8000550a:	11 89       	ld.ub	r9,r8[0x0]
   uint16_t u16_unicode_entry;
   uint16_t u16_unicode_szname;

   ptr_entry = fat_get_ptr_entry();

   if( (FS_ENTRY_END == *ptr_entry )            // end of directory
8000550c:	30 f8       	mov	r8,15
8000550e:	f0 09 18 00 	cp.b	r9,r8
80005512:	c0 70       	breq	80005520 <fat_entry_longname+0x5c>
   ||  (FS_ENTRY_DEL == *ptr_entry )            // entry deleted
   ||  (FS_ATTR_LFN_ENTRY != ptr_entry[11]) )   // no long name
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80005514:	fe f9 02 34 	ld.w	r9,pc[564]
80005518:	30 b8       	mov	r8,11
8000551a:	b2 88       	st.b	r9[0x0],r8
      return false;
8000551c:	30 08       	mov	r8,0
8000551e:	c0 e9       	rjmp	8000573a <fat_entry_longname+0x276>
   }

   if( g_b_string_length )
80005520:	fe f8 02 2c 	ld.w	r8,pc[556]
80005524:	11 88       	ld.ub	r8,r8[0x0]
80005526:	58 08       	cp.w	r8,0
80005528:	c0 d0       	breq	80005542 <fat_entry_longname+0x7e>
   {
      if ( 0 == (FS_ENTRY_LFN_LAST & *ptr_entry))
8000552a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000552e:	11 88       	ld.ub	r8,r8[0x0]
80005530:	e2 18 00 40 	andl	r8,0x40,COH
80005534:	c0 71       	brne	80005542 <fat_entry_longname+0x7e>
      {
         // no necessary -> ((FS_STR_UNICODE)sz_name)[0] = FS_SIZE_LFN_ENTRY;
         fs_g_status = FS_NO_LAST_LFN_ENTRY;
80005536:	fe f9 02 12 	ld.w	r9,pc[530]
8000553a:	31 08       	mov	r8,16
8000553c:	b2 88       	st.b	r9[0x0],r8
         return false;                          // Other entry long name
8000553e:	30 08       	mov	r8,0
80005540:	cf d8       	rjmp	8000573a <fat_entry_longname+0x276>
      }
   }

   ptr_entry++;                                 // The long name start at offset 1 of the entry file
80005542:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005546:	2f f8       	sub	r8,-1
80005548:	ef 48 ff f8 	st.w	r7[-8],r8

   u8_pos_name=0;
8000554c:	30 08       	mov	r8,0
8000554e:	ef 68 ff f7 	st.b	r7[-9],r8
   while( 1 )
   {
      LSB(u16_unicode_entry) = ptr_entry[0];
80005552:	ee c8 00 0c 	sub	r8,r7,12
80005556:	f0 c9 ff ff 	sub	r9,r8,-1
8000555a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000555e:	11 88       	ld.ub	r8,r8[0x0]
80005560:	b2 88       	st.b	r9[0x0],r8
      MSB(u16_unicode_entry) = ptr_entry[1];
80005562:	ee c9 00 0c 	sub	r9,r7,12
80005566:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000556a:	2f f8       	sub	r8,-1
8000556c:	11 88       	ld.ub	r8,r8[0x0]
8000556e:	b2 88       	st.b	r9[0x0],r8
      if( FS_NAME_GET == b_mode )
80005570:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80005574:	30 08       	mov	r8,0
80005576:	f0 09 18 00 	cp.b	r9,r8
8000557a:	c1 b0       	breq	800055b0 <fat_entry_longname+0xec>
      {
         if( !g_b_string_length )
8000557c:	4f 48       	lddpc	r8,8000574c <fat_entry_longname+0x288>
8000557e:	11 88       	ld.ub	r8,r8[0x0]
80005580:	ec 18 00 01 	eorl	r8,0x1
80005584:	5c 58       	castu.b	r8
80005586:	c5 a0       	breq	8000563a <fat_entry_longname+0x176>
         {
            // Check the end of buffer
            if( u8_pos_name>=(u8_size_max-1) )
80005588:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000558c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80005590:	20 18       	sub	r8,1
80005592:	10 39       	cp.w	r9,r8
80005594:	c0 75       	brlt	800055a2 <fat_entry_longname+0xde>
               // Write end of string
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
80005596:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000559a:	30 08       	mov	r8,0
8000559c:	b2 88       	st.b	r9[0x0],r8
               }
               return true;                     // the buffer is full
8000559e:	30 18       	mov	r8,1
800055a0:	cc d8       	rjmp	8000573a <fat_entry_longname+0x276>
            // Read and store the long name
            if( Is_unicode )
            {
               ((FS_STR_UNICODE)sz_name)[0] = u16_unicode_entry;
            }else{
               sz_name[0] = (uint8_t)u16_unicode_entry;
800055a2:	ef 08 ff f4 	ld.sh	r8,r7[-12]
800055a6:	5c 58       	castu.b	r8
800055a8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800055ac:	b2 88       	st.b	r9[0x0],r8
800055ae:	c4 68       	rjmp	8000563a <fat_entry_longname+0x176>
      {
         if( Is_unicode )
         {
            u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_unicode_szname = sz_name[0];
800055b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800055b4:	11 88       	ld.ub	r8,r8[0x0]
800055b6:	ef 58 ff fe 	st.h	r7[-2],r8
         }
         // Check the name
         if( '*' == u16_unicode_szname )
800055ba:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800055be:	32 a8       	mov	r8,42
800055c0:	f0 09 19 00 	cp.h	r9,r8
800055c4:	c0 31       	brne	800055ca <fat_entry_longname+0x106>
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
800055c6:	30 18       	mov	r8,1
800055c8:	cb 98       	rjmp	8000573a <fat_entry_longname+0x276>
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800055ca:	ef 08 ff f4 	ld.sh	r8,r7[-12]
800055ce:	58 08       	cp.w	r8,0
800055d0:	c0 d1       	brne	800055ea <fat_entry_longname+0x126>
800055d2:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800055d6:	35 c8       	mov	r8,92
800055d8:	f0 09 19 00 	cp.h	r9,r8
800055dc:	c2 f0       	breq	8000563a <fat_entry_longname+0x176>
800055de:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800055e2:	32 f8       	mov	r8,47
800055e4:	f0 09 19 00 	cp.h	r9,r8
800055e8:	c2 90       	breq	8000563a <fat_entry_longname+0x176>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
800055ea:	ef 19 ff fe 	ld.uh	r9,r7[-2]
800055ee:	ef 08 ff f4 	ld.sh	r8,r7[-12]
800055f2:	5c 78       	castu.h	r8
800055f4:	2e 08       	sub	r8,-32
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
800055f6:	10 39       	cp.w	r9,r8
800055f8:	c0 71       	brne	80005606 <fat_entry_longname+0x142>
800055fa:	ef 39 ff e4 	ld.ub	r9,r7[-28]
800055fe:	30 08       	mov	r8,0
80005600:	f0 09 18 00 	cp.b	r9,r8
80005604:	c1 b0       	breq	8000563a <fat_entry_longname+0x176>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
80005606:	ef 19 ff fe 	ld.uh	r9,r7[-2]
8000560a:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000560e:	5c 78       	castu.h	r8
80005610:	22 08       	sub	r8,32
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80005612:	10 39       	cp.w	r9,r8
80005614:	c0 71       	brne	80005622 <fat_entry_longname+0x15e>
80005616:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8000561a:	30 08       	mov	r8,0
8000561c:	f0 09 18 00 	cp.b	r9,r8
80005620:	c0 d0       	breq	8000563a <fat_entry_longname+0x176>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
80005622:	ef 08 ff f4 	ld.sh	r8,r7[-12]
         if( '*' == u16_unicode_szname )
         {  // end of filter name which authorize all next character
            return true;   //*** The name is correct ***
         }

         if( ((0 != u16_unicode_entry ) || (( '\\' != u16_unicode_szname) && ( '/' != u16_unicode_szname)) )
80005626:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000562a:	f0 09 19 00 	cp.h	r9,r8
8000562e:	c0 60       	breq	8000563a <fat_entry_longname+0x176>
         &&  ((u16_unicode_szname != (u16_unicode_entry+('a'-'A'))) || b_match_case)
         &&  ((u16_unicode_szname != (u16_unicode_entry-('a'-'A'))) || b_match_case)
         &&  (u16_unicode_szname != u16_unicode_entry) )
         {
           fs_g_status = FS_ERR_NAME_INCORRECT; //  The name don't corresponding at filter name
80005630:	4c 69       	lddpc	r9,80005748 <fat_entry_longname+0x284>
80005632:	31 68       	mov	r8,22
80005634:	b2 88       	st.b	r9[0x0],r8
           return false;
80005636:	30 08       	mov	r8,0
80005638:	c8 18       	rjmp	8000573a <fat_entry_longname+0x276>
         }
      }

      if( 0 == u16_unicode_entry)
8000563a:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000563e:	58 08       	cp.w	r8,0
80005640:	c0 e1       	brne	8000565c <fat_entry_longname+0x198>
      {
         if( g_b_string_length )
80005642:	4c 38       	lddpc	r8,8000574c <fat_entry_longname+0x288>
80005644:	11 88       	ld.ub	r8,r8[0x0]
80005646:	58 08       	cp.w	r8,0
80005648:	c0 80       	breq	80005658 <fat_entry_longname+0x194>
         {
            ((FS_STR_UNICODE)sz_name)[0] = u8_pos_name+1;
8000564a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000564e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005652:	2f f8       	sub	r8,-1
80005654:	5c 88       	casts.h	r8
80005656:	b2 08       	st.h	r9[0x0],r8
         }
         return true;                           // Last long name entry
80005658:	30 18       	mov	r8,1
8000565a:	c7 08       	rjmp	8000573a <fat_entry_longname+0x276>
      }
      if( 4 == u8_pos_name )
8000565c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80005660:	30 48       	mov	r8,4
80005662:	f0 09 18 00 	cp.b	r9,r8
80005666:	c0 61       	brne	80005672 <fat_entry_longname+0x1ae>
         ptr_entry += 3;                        // Go to second character
80005668:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000566c:	2f d8       	sub	r8,-3
8000566e:	ef 48 ff f8 	st.w	r7[-8],r8

      if( 10 == u8_pos_name )
80005672:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80005676:	30 a8       	mov	r8,10
80005678:	f0 09 18 00 	cp.b	r9,r8
8000567c:	c0 61       	brne	80005688 <fat_entry_longname+0x1c4>
         ptr_entry += 2;                        // Go to third character
8000567e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005682:	2f e8       	sub	r8,-2
80005684:	ef 48 ff f8 	st.w	r7[-8],r8

      if( 12 == u8_pos_name )
80005688:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000568c:	30 c8       	mov	r8,12
8000568e:	f0 09 18 00 	cp.b	r9,r8
80005692:	c3 e1       	brne	8000570e <fat_entry_longname+0x24a>
      {  // End of entry long name
         ptr_entry -= (FS_SIZE_FILE_ENTRY-2);   // Go to the first byte of the file entry
80005694:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005698:	21 e8       	sub	r8,30
8000569a:	ef 48 ff f8 	st.w	r7[-8],r8
         if ( 0 == (FS_ENTRY_LFN_LAST & ptr_entry[0]))
8000569e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800056a2:	11 88       	ld.ub	r8,r8[0x0]
800056a4:	e2 18 00 40 	andl	r8,0x40,COH
800056a8:	c0 61       	brne	800056b4 <fat_entry_longname+0x1f0>
         {
            fs_g_status = FS_NO_LAST_LFN_ENTRY;
800056aa:	4a 89       	lddpc	r9,80005748 <fat_entry_longname+0x284>
800056ac:	31 08       	mov	r8,16
800056ae:	b2 88       	st.b	r9[0x0],r8
            return false;                       // Other long name entry is present
800056b0:	30 08       	mov	r8,0
800056b2:	c4 48       	rjmp	8000573a <fat_entry_longname+0x276>
         }
         else
         {  // It is the last long name entry
            // then it is the end of name
            if( (FS_NAME_GET == b_mode) && g_b_string_length )
800056b4:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800056b8:	30 08       	mov	r8,0
800056ba:	f0 09 18 00 	cp.b	r9,r8
800056be:	c0 b0       	breq	800056d4 <fat_entry_longname+0x210>
800056c0:	4a 38       	lddpc	r8,8000574c <fat_entry_longname+0x288>
800056c2:	11 88       	ld.ub	r8,r8[0x0]
800056c4:	58 08       	cp.w	r8,0
800056c6:	c0 70       	breq	800056d4 <fat_entry_longname+0x210>
            {
               ((FS_STR_UNICODE)sz_name)[0] = 14;
800056c8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800056cc:	30 e8       	mov	r8,14
800056ce:	b2 08       	st.h	r9[0x0],r8
               return true;
800056d0:	30 18       	mov	r8,1
800056d2:	c3 48       	rjmp	8000573a <fat_entry_longname+0x276>
            }
            sz_name += (Is_unicode? 2 : 1 );
800056d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800056d8:	2f f8       	sub	r8,-1
800056da:	ef 48 ff f0 	st.w	r7[-16],r8
            if( FS_NAME_GET == b_mode )
800056de:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800056e2:	30 08       	mov	r8,0
800056e4:	f0 09 18 00 	cp.b	r9,r8
800056e8:	c0 70       	breq	800056f6 <fat_entry_longname+0x232>
               // Write end of string UNICODE
               if( Is_unicode )
               {
                  ((FS_STR_UNICODE)sz_name)[0] = 0;
               }else{
                  sz_name[0] = 0;
800056ea:	ee f9 ff f0 	ld.w	r9,r7[-16]
800056ee:	30 08       	mov	r8,0
800056f0:	b2 88       	st.b	r9[0x0],r8
               }
               return true;
800056f2:	30 18       	mov	r8,1
800056f4:	c2 38       	rjmp	8000573a <fat_entry_longname+0x276>
               // if it is the end of filter
               if( Is_unicode )
               {
                  u16_unicode_szname = ((FS_STR_UNICODE)sz_name)[0];
               }else{
                  u16_unicode_szname = sz_name[0];
800056f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800056fa:	11 88       	ld.ub	r8,r8[0x0]
800056fc:	ef 58 ff fe 	st.h	r7[-2],r8
               }
               return fat_check_eof_name(u16_unicode_szname);
80005700:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80005704:	10 9c       	mov	r12,r8
80005706:	f0 1f 00 13 	mcall	80005750 <fat_entry_longname+0x28c>
8000570a:	18 98       	mov	r8,r12
8000570c:	c1 78       	rjmp	8000573a <fat_entry_longname+0x276>
            }
         }
      }

      if( !g_b_string_length )
8000570e:	49 08       	lddpc	r8,8000574c <fat_entry_longname+0x288>
80005710:	11 88       	ld.ub	r8,r8[0x0]
80005712:	ec 18 00 01 	eorl	r8,0x1
80005716:	5c 58       	castu.b	r8
80005718:	c0 60       	breq	80005724 <fat_entry_longname+0x260>
      {
         sz_name += (Is_unicode? 2 : 1 );
8000571a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000571e:	2f f8       	sub	r8,-1
80005720:	ef 48 ff f0 	st.w	r7[-16],r8
      }
      u8_pos_name++;
80005724:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80005728:	2f f8       	sub	r8,-1
8000572a:	ef 68 ff f7 	st.b	r7[-9],r8
      ptr_entry+=2;
8000572e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005732:	2f e8       	sub	r8,-2
80005734:	ef 48 ff f8 	st.w	r7[-8],r8
   }
80005738:	c0 db       	rjmp	80005552 <fat_entry_longname+0x8e>
}
8000573a:	10 9c       	mov	r12,r8
8000573c:	2f 9d       	sub	sp,-28
8000573e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005742:	00 00       	add	r0,r0
80005744:	80 00       	ld.sh	r0,r0[0x0]
80005746:	57 98       	stdsp	sp[0x1e4],r8
80005748:	00 00       	add	r0,r0
8000574a:	11 a0       	ld.ub	r0,r8[0x2]
8000574c:	00 00       	add	r0,r0
8000574e:	11 a1       	ld.ub	r1,r8[0x2]
80005750:	80 00       	ld.sh	r0,r0[0x0]
80005752:	57 54       	stdsp	sp[0x1d4],r4

80005754 <fat_check_eof_name>:
//!
//! @return    true, it is a character to signal a end of name (0,'\\','/')
//! @return    false, otherwise
//!
bool  fat_check_eof_name( uint16_t character )
{
80005754:	eb cd 40 80 	pushm	r7,lr
80005758:	1a 97       	mov	r7,sp
8000575a:	20 1d       	sub	sp,4
8000575c:	18 98       	mov	r8,r12
8000575e:	ef 58 ff fc 	st.h	r7[-4],r8
   return (('\0'==character)||('\\'==character)||('/'==character));
80005762:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80005766:	30 08       	mov	r8,0
80005768:	f0 09 19 00 	cp.h	r9,r8
8000576c:	c0 d0       	breq	80005786 <fat_check_eof_name+0x32>
8000576e:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80005772:	35 c8       	mov	r8,92
80005774:	f0 09 19 00 	cp.h	r9,r8
80005778:	c0 70       	breq	80005786 <fat_check_eof_name+0x32>
8000577a:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000577e:	32 f8       	mov	r8,47
80005780:	f0 09 19 00 	cp.h	r9,r8
80005784:	c0 31       	brne	8000578a <fat_check_eof_name+0x36>
80005786:	30 18       	mov	r8,1
80005788:	c0 28       	rjmp	8000578c <fat_check_eof_name+0x38>
8000578a:	30 08       	mov	r8,0
8000578c:	5c 58       	castu.b	r8
}
8000578e:	10 9c       	mov	r12,r8
80005790:	2f fd       	sub	sp,-4
80005792:	e3 cd 80 80 	ldm	sp++,r7,pc
80005796:	d7 03       	nop

80005798 <fat_get_ptr_entry>:
//! This function returns a cache pointer on the current entry
//!
//! @return a pointer on the internal cache
//!
PTR_CACHE fat_get_ptr_entry( void )
{
80005798:	eb cd 40 80 	pushm	r7,lr
8000579c:	1a 97       	mov	r7,sp
   return &fs_g_sector[(fs_g_nav_fast.u16_entry_pos_sel_file * FS_SIZE_FILE_ENTRY) & FS_512B_MASK];
8000579e:	48 78       	lddpc	r8,800057b8 <fat_get_ptr_entry+0x20>
800057a0:	90 18       	ld.sh	r8,r8[0x2]
800057a2:	5c 78       	castu.h	r8
800057a4:	a5 78       	lsl	r8,0x5
800057a6:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
800057aa:	48 58       	lddpc	r8,800057bc <fat_get_ptr_entry+0x24>
800057ac:	f2 08 00 08 	add	r8,r9,r8
}
800057b0:	10 9c       	mov	r12,r8
800057b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800057b6:	00 00       	add	r0,r0
800057b8:	00 00       	add	r0,r0
800057ba:	11 9c       	ld.ub	r12,r8[0x1]
800057bc:	00 00       	add	r0,r0
800057be:	0f 50       	ld.sh	r0,--r7

800057c0 <fat_cache_read_sector>:
//!   fs_g_nav.u8_lun      drive number to read
//!   fs_gu32_addrsector   address to read (unit sector)
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
800057c0:	eb cd 40 80 	pushm	r7,lr
800057c4:	1a 97       	mov	r7,sp
800057c6:	20 1d       	sub	sp,4
800057c8:	18 98       	mov	r8,r12
800057ca:	ef 68 ff fc 	st.b	r7[-4],r8
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
800057ce:	4a 08       	lddpc	r8,8000584c <fat_cache_read_sector+0x8c>
800057d0:	11 89       	ld.ub	r9,r8[0x0]
800057d2:	4a 08       	lddpc	r8,80005850 <fat_cache_read_sector+0x90>
800057d4:	11 88       	ld.ub	r8,r8[0x0]
800057d6:	f0 09 18 00 	cp.b	r9,r8
800057da:	c0 91       	brne	800057ec <fat_cache_read_sector+0x2c>
   &&  (fs_g_sectorcache.u32_addr   == fs_gu32_addrsector ) )
800057dc:	49 c8       	lddpc	r8,8000584c <fat_cache_read_sector+0x8c>
800057de:	70 19       	ld.w	r9,r8[0x4]
800057e0:	49 d8       	lddpc	r8,80005854 <fat_cache_read_sector+0x94>
800057e2:	70 08       	ld.w	r8,r8[0x0]
//! @endverbatim
//!
bool  fat_cache_read_sector( bool b_load )
{
   // Check if the sector asked is the same in cache
   if( (fs_g_sectorcache.u8_lun     == fs_g_nav.u8_lun )
800057e4:	10 39       	cp.w	r9,r8
800057e6:	c0 31       	brne	800057ec <fat_cache_read_sector+0x2c>
   &&  (fs_g_sectorcache.u32_addr   == fs_gu32_addrsector ) )
   {
      return true;
800057e8:	30 18       	mov	r8,1
800057ea:	c2 c8       	rjmp	80005842 <fat_cache_read_sector+0x82>
   }

   // Write previous cache before fill cache with a new sector
   if( !fat_cache_flush())
800057ec:	f0 1f 00 1b 	mcall	80005858 <fat_cache_read_sector+0x98>
800057f0:	18 98       	mov	r8,r12
800057f2:	ec 18 00 01 	eorl	r8,0x1
800057f6:	5c 58       	castu.b	r8
800057f8:	c0 30       	breq	800057fe <fat_cache_read_sector+0x3e>
      return false;
800057fa:	30 08       	mov	r8,0
800057fc:	c2 38       	rjmp	80005842 <fat_cache_read_sector+0x82>

   // Delete informations about the caches
   fat_cache_reset();
800057fe:	f0 1f 00 18 	mcall	8000585c <fat_cache_read_sector+0x9c>

   // Init sector cache
   fs_g_sectorcache.u32_addr = fs_gu32_addrsector;
80005802:	49 58       	lddpc	r8,80005854 <fat_cache_read_sector+0x94>
80005804:	70 09       	ld.w	r9,r8[0x0]
80005806:	49 28       	lddpc	r8,8000584c <fat_cache_read_sector+0x8c>
80005808:	91 19       	st.w	r8[0x4],r9
   if( b_load )
8000580a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000580e:	30 08       	mov	r8,0
80005810:	f0 09 18 00 	cp.b	r9,r8
80005814:	c1 20       	breq	80005838 <fat_cache_read_sector+0x78>
   {
      // Load the sector from memory
      if( CTRL_GOOD != memory_2_ram( fs_g_nav.u8_lun  , fs_g_sectorcache.u32_addr, fs_g_sector))
80005816:	48 e8       	lddpc	r8,8000584c <fat_cache_read_sector+0x8c>
80005818:	70 19       	ld.w	r9,r8[0x4]
8000581a:	48 e8       	lddpc	r8,80005850 <fat_cache_read_sector+0x90>
8000581c:	11 88       	ld.ub	r8,r8[0x0]
8000581e:	49 1a       	lddpc	r10,80005860 <fat_cache_read_sector+0xa0>
80005820:	12 9b       	mov	r11,r9
80005822:	10 9c       	mov	r12,r8
80005824:	f0 1f 00 10 	mcall	80005864 <fat_cache_read_sector+0xa4>
80005828:	18 98       	mov	r8,r12
8000582a:	58 08       	cp.w	r8,0
8000582c:	c0 60       	breq	80005838 <fat_cache_read_sector+0x78>
      {
         fs_g_status = FS_ERR_HW;
8000582e:	48 f9       	lddpc	r9,80005868 <fat_cache_read_sector+0xa8>
80005830:	30 18       	mov	r8,1
80005832:	b2 88       	st.b	r9[0x0],r8
         return false;
80005834:	30 08       	mov	r8,0
80005836:	c0 68       	rjmp	80005842 <fat_cache_read_sector+0x82>
      }
   }
   // Valid sector cache
   fs_g_sectorcache.u8_lun = fs_g_nav.u8_lun;
80005838:	48 68       	lddpc	r8,80005850 <fat_cache_read_sector+0x90>
8000583a:	11 88       	ld.ub	r8,r8[0x0]
8000583c:	48 49       	lddpc	r9,8000584c <fat_cache_read_sector+0x8c>
8000583e:	b2 88       	st.b	r9[0x0],r8
   return true;
80005840:	30 18       	mov	r8,1
}
80005842:	10 9c       	mov	r12,r8
80005844:	2f fd       	sub	sp,-4
80005846:	e3 cd 80 80 	ldm	sp++,r7,pc
8000584a:	00 00       	add	r0,r0
8000584c:	00 00       	add	r0,r0
8000584e:	11 d8       	ld.ub	r8,r8[0x5]
80005850:	00 00       	add	r0,r0
80005852:	11 50       	ld.sh	r0,--r8
80005854:	00 00       	add	r0,r0
80005856:	0f 0c       	ld.w	r12,r7++
80005858:	80 00       	ld.sh	r0,r0[0x0]
8000585a:	58 c8       	cp.w	r8,12
8000585c:	80 00       	ld.sh	r0,r0[0x0]
8000585e:	58 6c       	cp.w	r12,6
80005860:	00 00       	add	r0,r0
80005862:	0f 50       	ld.sh	r0,--r7
80005864:	80 00       	ld.sh	r0,r0[0x0]
80005866:	5c 1c       	scr	r12
80005868:	00 00       	add	r0,r0
8000586a:	11 a0       	ld.ub	r0,r8[0x2]

8000586c <fat_cache_reset>:


//! This function resets the sector cache
//!
void  fat_cache_reset( void )
{
8000586c:	eb cd 40 80 	pushm	r7,lr
80005870:	1a 97       	mov	r7,sp
   fs_g_sectorcache.u8_lun                = FS_BUF_SECTOR_EMPTY;
80005872:	48 79       	lddpc	r9,8000588c <fat_cache_reset+0x20>
80005874:	3f f8       	mov	r8,-1
80005876:	b2 88       	st.b	r9[0x0],r8
   fs_g_sectorcache.u8_dirty              = false;
80005878:	48 59       	lddpc	r9,8000588c <fat_cache_reset+0x20>
8000587a:	30 08       	mov	r8,0
8000587c:	f3 68 00 08 	st.b	r9[8],r8
   fs_g_sectorcache.u32_clusterlist_start = 0xFFFFFFFF;
80005880:	48 38       	lddpc	r8,8000588c <fat_cache_reset+0x20>
80005882:	3f f9       	mov	r9,-1
80005884:	91 39       	st.w	r8[0xc],r9
}
80005886:	e3 cd 80 80 	ldm	sp++,r7,pc
8000588a:	00 00       	add	r0,r0
8000588c:	00 00       	add	r0,r0
8000588e:	11 d8       	ld.ub	r8,r8[0x5]

80005890 <fat_cache_clear>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the sector cache
//!
void  fat_cache_clear( void )
{
80005890:	eb cd 40 80 	pushm	r7,lr
80005894:	1a 97       	mov	r7,sp
   memset( fs_g_sector , 0 , FS_CACHE_SIZE );
80005896:	e0 6a 02 00 	mov	r10,512
8000589a:	30 0b       	mov	r11,0
8000589c:	48 3c       	lddpc	r12,800058a8 <fat_cache_clear+0x18>
8000589e:	f0 1f 00 04 	mcall	800058ac <fat_cache_clear+0x1c>
}
800058a2:	e3 cd 80 80 	ldm	sp++,r7,pc
800058a6:	00 00       	add	r0,r0
800058a8:	00 00       	add	r0,r0
800058aa:	0f 50       	ld.sh	r0,--r7
800058ac:	80 00       	ld.sh	r0,r0[0x0]
800058ae:	d9 fa       	popm	r0-r11,pc,r12=0

800058b0 <fat_cache_mark_sector_as_dirty>:


//! This function sets a flag to signal that sector cache is modified
//!
void  fat_cache_mark_sector_as_dirty( void )
{
800058b0:	eb cd 40 80 	pushm	r7,lr
800058b4:	1a 97       	mov	r7,sp
   fs_g_sectorcache.u8_dirty = true;
800058b6:	48 49       	lddpc	r9,800058c4 <fat_cache_mark_sector_as_dirty+0x14>
800058b8:	30 18       	mov	r8,1
800058ba:	f3 68 00 08 	st.b	r9[8],r8
}
800058be:	e3 cd 80 80 	ldm	sp++,r7,pc
800058c2:	00 00       	add	r0,r0
800058c4:	00 00       	add	r0,r0
800058c6:	11 d8       	ld.ub	r8,r8[0x5]

800058c8 <fat_cache_flush>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_cache_flush( void )
{
800058c8:	eb cd 40 80 	pushm	r7,lr
800058cc:	1a 97       	mov	r7,sp
   // If the cache is modified, then write the sector cache on the device
   if ( true == fs_g_sectorcache.u8_dirty )
800058ce:	49 78       	lddpc	r8,80005928 <fat_cache_flush+0x60>
800058d0:	f1 39 00 08 	ld.ub	r9,r8[8]
800058d4:	30 18       	mov	r8,1
800058d6:	f0 09 18 00 	cp.b	r9,r8
800058da:	c2 31       	brne	80005920 <fat_cache_flush+0x58>
   {
      fs_g_sectorcache.u8_dirty = false; // Always clear, although an error occur
800058dc:	49 39       	lddpc	r9,80005928 <fat_cache_flush+0x60>
800058de:	30 08       	mov	r8,0
800058e0:	f3 68 00 08 	st.b	r9[8],r8
      if( mem_wr_protect( fs_g_sectorcache.u8_lun  ))
800058e4:	49 18       	lddpc	r8,80005928 <fat_cache_flush+0x60>
800058e6:	11 88       	ld.ub	r8,r8[0x0]
800058e8:	10 9c       	mov	r12,r8
800058ea:	f0 1f 00 11 	mcall	8000592c <fat_cache_flush+0x64>
800058ee:	18 98       	mov	r8,r12
800058f0:	58 08       	cp.w	r8,0
800058f2:	c0 60       	breq	800058fe <fat_cache_flush+0x36>
      {
         fs_g_status = FS_LUN_WP;
800058f4:	48 f9       	lddpc	r9,80005930 <fat_cache_flush+0x68>
800058f6:	31 48       	mov	r8,20
800058f8:	b2 88       	st.b	r9[0x0],r8
         return false;
800058fa:	30 08       	mov	r8,0
800058fc:	c1 38       	rjmp	80005922 <fat_cache_flush+0x5a>
      }
      if (CTRL_GOOD != ram_2_memory( fs_g_sectorcache.u8_lun , fs_g_sectorcache.u32_addr , fs_g_sector ))
800058fe:	48 b8       	lddpc	r8,80005928 <fat_cache_flush+0x60>
80005900:	70 19       	ld.w	r9,r8[0x4]
80005902:	48 a8       	lddpc	r8,80005928 <fat_cache_flush+0x60>
80005904:	11 88       	ld.ub	r8,r8[0x0]
80005906:	48 ca       	lddpc	r10,80005934 <fat_cache_flush+0x6c>
80005908:	12 9b       	mov	r11,r9
8000590a:	10 9c       	mov	r12,r8
8000590c:	f0 1f 00 0b 	mcall	80005938 <fat_cache_flush+0x70>
80005910:	18 98       	mov	r8,r12
80005912:	58 08       	cp.w	r8,0
80005914:	c0 60       	breq	80005920 <fat_cache_flush+0x58>
      {
         fs_g_status = FS_ERR_HW;
80005916:	48 79       	lddpc	r9,80005930 <fat_cache_flush+0x68>
80005918:	30 18       	mov	r8,1
8000591a:	b2 88       	st.b	r9[0x0],r8
         return false;
8000591c:	30 08       	mov	r8,0
8000591e:	c0 28       	rjmp	80005922 <fat_cache_flush+0x5a>
      }
   }
   return true;
80005920:	30 18       	mov	r8,1
}
80005922:	10 9c       	mov	r12,r8
80005924:	e3 cd 80 80 	ldm	sp++,r7,pc
80005928:	00 00       	add	r0,r0
8000592a:	11 d8       	ld.ub	r8,r8[0x5]
8000592c:	80 00       	ld.sh	r0,r0[0x0]
8000592e:	5b d4       	cp.w	r4,-3
80005930:	00 00       	add	r0,r0
80005932:	11 a0       	ld.ub	r0,r8[0x2]
80005934:	00 00       	add	r0,r0
80005936:	0f 50       	ld.sh	r0,--r7
80005938:	80 00       	ld.sh	r0,r0[0x0]
8000593a:	5c 74       	castu.h	r4

8000593c <fat_check_nav_access_file>:
//!            mode true,  File opened then write access not possibles <br>
//!            mode false, File opened in write mode then read access not possibles <br>
//! @return    true, access file possibles
//!
bool  fat_check_nav_access_file( bool mode )
{
8000593c:	eb cd 40 80 	pushm	r7,lr
80005940:	1a 97       	mov	r7,sp
80005942:	20 2d       	sub	sp,8
80005944:	18 98       	mov	r8,r12
80005946:	ef 68 ff f8 	st.b	r7[-8],r8
   uint8_t i;

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
8000594a:	30 08       	mov	r8,0
8000594c:	ef 68 ff ff 	st.b	r7[-1],r8
80005950:	c5 68       	rjmp	800059fc <fat_check_nav_access_file+0xc0>
   {
      // Disk mounted ?
      if( FS_TYPE_FAT_UNM != fs_g_navext_fast[i].u8_type_fat )
80005952:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005956:	4b 08       	lddpc	r8,80005a14 <fat_check_nav_access_file+0xd8>
80005958:	f0 09 07 28 	ld.ub	r8,r8[r9<<0x2]
8000595c:	58 08       	cp.w	r8,0
8000595e:	c4 a0       	breq	800059f2 <fat_check_nav_access_file+0xb6>
      // Is it the same disk ?
      if( fs_g_nav.u8_lun == fs_g_navext[i].u8_lun )
80005960:	4a e8       	lddpc	r8,80005a18 <fat_check_nav_access_file+0xdc>
80005962:	11 89       	ld.ub	r9,r8[0x0]
80005964:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005968:	4a da       	lddpc	r10,80005a1c <fat_check_nav_access_file+0xe0>
8000596a:	f0 08 10 34 	mul	r8,r8,52
8000596e:	f4 08 00 08 	add	r8,r10,r8
80005972:	11 88       	ld.ub	r8,r8[0x0]
80005974:	f0 09 18 00 	cp.b	r9,r8
80005978:	c3 d1       	brne	800059f2 <fat_check_nav_access_file+0xb6>
#if (FS_MULTI_PARTITION == true)
      // Is it the same partition ?
      if( fs_g_nav.u8_partition == fs_g_navext[i].u8_partition )
#endif
      // Is it the same directory ?
      if( fs_g_nav.u32_cluster_sel_dir == fs_g_navext[i].u32_cluster_sel_dir )
8000597a:	4a 88       	lddpc	r8,80005a18 <fat_check_nav_access_file+0xdc>
8000597c:	70 89       	ld.w	r9,r8[0x20]
8000597e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005982:	4a 7a       	lddpc	r10,80005a1c <fat_check_nav_access_file+0xe0>
80005984:	f0 08 10 34 	mul	r8,r8,52
80005988:	f4 08 00 08 	add	r8,r10,r8
8000598c:	2e 08       	sub	r8,-32
8000598e:	70 08       	ld.w	r8,r8[0x0]
80005990:	10 39       	cp.w	r9,r8
80005992:	c3 01       	brne	800059f2 <fat_check_nav_access_file+0xb6>
      // Is it the same file ?
      if( fs_g_nav_fast.u16_entry_pos_sel_file == fs_g_navext_fast[i].u16_entry_pos_sel_file )
80005994:	4a 38       	lddpc	r8,80005a20 <fat_check_nav_access_file+0xe4>
80005996:	90 19       	ld.sh	r9,r8[0x2]
80005998:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000599c:	49 ea       	lddpc	r10,80005a14 <fat_check_nav_access_file+0xd8>
8000599e:	a3 68       	lsl	r8,0x2
800059a0:	f4 08 00 08 	add	r8,r10,r8
800059a4:	90 18       	ld.sh	r8,r8[0x2]
800059a6:	f0 09 19 00 	cp.h	r9,r8
800059aa:	c2 41       	brne	800059f2 <fat_check_nav_access_file+0xb6>
      {
         if( mode )
800059ac:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800059b0:	30 08       	mov	r8,0
800059b2:	f0 09 18 00 	cp.b	r9,r8
800059b6:	c0 f0       	breq	800059d4 <fat_check_nav_access_file+0x98>
         {
            // Is it open ?
            if( fs_g_navext_entry[i].u8_open_mode!=0 )
800059b8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800059bc:	49 a9       	lddpc	r9,80005a24 <fat_check_nav_access_file+0xe8>
800059be:	a5 68       	lsl	r8,0x4
800059c0:	f2 08 00 08 	add	r8,r9,r8
800059c4:	11 88       	ld.ub	r8,r8[0x0]
800059c6:	58 08       	cp.w	r8,0
800059c8:	c1 50       	breq	800059f2 <fat_check_nav_access_file+0xb6>
            {
               fs_g_status = FS_ERR_FILE_OPEN;
800059ca:	49 89       	lddpc	r9,80005a28 <fat_check_nav_access_file+0xec>
800059cc:	32 88       	mov	r8,40
800059ce:	b2 88       	st.b	r9[0x0],r8
               return false;  // File opened then write access not possible
800059d0:	30 08       	mov	r8,0
800059d2:	c1 c8       	rjmp	80005a0a <fat_check_nav_access_file+0xce>
            }
         }
         else
         {
            // Is it open in write mode ?
            if( fs_g_navext_entry[i].u8_open_mode & FOPEN_WRITE_ACCESS )
800059d4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800059d8:	49 39       	lddpc	r9,80005a24 <fat_check_nav_access_file+0xe8>
800059da:	a5 68       	lsl	r8,0x4
800059dc:	f2 08 00 08 	add	r8,r9,r8
800059e0:	11 88       	ld.ub	r8,r8[0x0]
800059e2:	e2 18 00 02 	andl	r8,0x2,COH
800059e6:	c0 60       	breq	800059f2 <fat_check_nav_access_file+0xb6>
            {
               fs_g_status = FS_ERR_FILE_OPEN_WR;
800059e8:	49 09       	lddpc	r9,80005a28 <fat_check_nav_access_file+0xec>
800059ea:	32 98       	mov	r8,41
800059ec:	b2 88       	st.b	r9[0x0],r8
               return false;  // File opened in write mode then read access not possible
800059ee:	30 08       	mov	r8,0
800059f0:	c0 d8       	rjmp	80005a0a <fat_check_nav_access_file+0xce>
bool  fat_check_nav_access_file( bool mode )
{
   uint8_t i;

   // For each navigators
   for( i=0 ; i!=(FS_NB_NAVIGATOR-1) ; i++ )
800059f2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800059f6:	2f f8       	sub	r8,-1
800059f8:	ef 68 ff ff 	st.b	r7[-1],r8
800059fc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005a00:	30 18       	mov	r8,1
80005a02:	f0 09 18 00 	cp.b	r9,r8
80005a06:	ca 61       	brne	80005952 <fat_check_nav_access_file+0x16>
               return false;  // File opened in write mode then read access not possible
            }
         }
      }
   }
   return true;
80005a08:	30 18       	mov	r8,1
}
80005a0a:	10 9c       	mov	r12,r8
80005a0c:	2f ed       	sub	sp,-8
80005a0e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005a12:	00 00       	add	r0,r0
80005a14:	00 00       	add	r0,r0
80005a16:	11 98       	ld.ub	r8,r8[0x1]
80005a18:	00 00       	add	r0,r0
80005a1a:	11 50       	ld.sh	r0,--r8
80005a1c:	00 00       	add	r0,r0
80005a1e:	11 a4       	ld.ub	r4,r8[0x2]
80005a20:	00 00       	add	r0,r0
80005a22:	11 9c       	ld.ub	r12,r8[0x1]
80005a24:	00 00       	add	r0,r0
80005a26:	11 88       	ld.ub	r8,r8[0x0]
80005a28:	00 00       	add	r0,r0
80005a2a:	11 a0       	ld.ub	r0,r8[0x2]

80005a2c <fat_invert_nav>:
//! This function inverts the current navigation with another
//!
//! @param     u8_idnav    Id navigator to invert
//!
void  fat_invert_nav( uint8_t u8_idnav )
{
80005a2c:	eb cd 40 80 	pushm	r7,lr
80005a30:	1a 97       	mov	r7,sp
80005a32:	20 ed       	sub	sp,56
80005a34:	18 98       	mov	r8,r12
80005a36:	ef 68 ff c8 	st.b	r7[-56],r8
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
80005a3a:	ef 39 ff c8 	ld.ub	r9,r7[-56]
80005a3e:	30 08       	mov	r8,0
80005a40:	f0 09 18 00 	cp.b	r9,r8
80005a44:	c6 a0       	breq	80005b18 <fat_invert_nav+0xec>
      return;
   u8_idnav--;
80005a46:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80005a4a:	20 18       	sub	r8,1
80005a4c:	ef 68 ff c8 	st.b	r7[-56],r8

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav,                     sizeof(Fs_management));
80005a50:	ee c8 00 34 	sub	r8,r7,52
80005a54:	33 4a       	mov	r10,52
80005a56:	4b 3b       	lddpc	r11,80005b20 <fat_invert_nav+0xf4>
80005a58:	10 9c       	mov	r12,r8
80005a5a:	f0 1f 00 33 	mcall	80005b24 <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav,                    (uint8_t*)&fs_g_navext[u8_idnav],        sizeof(Fs_management));
80005a5e:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80005a62:	f0 09 10 34 	mul	r9,r8,52
80005a66:	4b 18       	lddpc	r8,80005b28 <fat_invert_nav+0xfc>
80005a68:	f2 08 00 08 	add	r8,r9,r8
80005a6c:	33 4a       	mov	r10,52
80005a6e:	10 9b       	mov	r11,r8
80005a70:	4a cc       	lddpc	r12,80005b20 <fat_invert_nav+0xf4>
80005a72:	f0 1f 00 2d 	mcall	80005b24 <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext[u8_idnav],       Temp,                               sizeof(Fs_management));
80005a76:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80005a7a:	f0 09 10 34 	mul	r9,r8,52
80005a7e:	4a b8       	lddpc	r8,80005b28 <fat_invert_nav+0xfc>
80005a80:	f2 08 00 08 	add	r8,r9,r8
80005a84:	ee c9 00 34 	sub	r9,r7,52
80005a88:	33 4a       	mov	r10,52
80005a8a:	12 9b       	mov	r11,r9
80005a8c:	10 9c       	mov	r12,r8
80005a8e:	f0 1f 00 26 	mcall	80005b24 <fat_invert_nav+0xf8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_entry,               sizeof(Fs_management_entry));
80005a92:	ee c8 00 34 	sub	r8,r7,52
80005a96:	31 0a       	mov	r10,16
80005a98:	4a 5b       	lddpc	r11,80005b2c <fat_invert_nav+0x100>
80005a9a:	10 9c       	mov	r12,r8
80005a9c:	f0 1f 00 22 	mcall	80005b24 <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_entry,              (uint8_t*)&fs_g_navext_entry[u8_idnav],  sizeof(Fs_management_entry));
80005aa0:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80005aa4:	f0 09 15 04 	lsl	r9,r8,0x4
80005aa8:	4a 28       	lddpc	r8,80005b30 <fat_invert_nav+0x104>
80005aaa:	f2 08 00 08 	add	r8,r9,r8
80005aae:	31 0a       	mov	r10,16
80005ab0:	10 9b       	mov	r11,r8
80005ab2:	49 fc       	lddpc	r12,80005b2c <fat_invert_nav+0x100>
80005ab4:	f0 1f 00 1c 	mcall	80005b24 <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));
80005ab8:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80005abc:	f0 09 15 04 	lsl	r9,r8,0x4
80005ac0:	49 c8       	lddpc	r8,80005b30 <fat_invert_nav+0x104>
80005ac2:	f2 08 00 08 	add	r8,r9,r8
80005ac6:	ee c9 00 34 	sub	r9,r7,52
80005aca:	31 0a       	mov	r10,16
80005acc:	12 9b       	mov	r11,r9
80005ace:	10 9c       	mov	r12,r8
80005ad0:	f0 1f 00 15 	mcall	80005b24 <fat_invert_nav+0xf8>

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
80005ad4:	ee c8 00 34 	sub	r8,r7,52
80005ad8:	30 4a       	mov	r10,4
80005ada:	49 7b       	lddpc	r11,80005b34 <fat_invert_nav+0x108>
80005adc:	10 9c       	mov	r12,r8
80005ade:	f0 1f 00 12 	mcall	80005b24 <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
80005ae2:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80005ae6:	f0 09 15 02 	lsl	r9,r8,0x2
80005aea:	49 48       	lddpc	r8,80005b38 <fat_invert_nav+0x10c>
80005aec:	f2 08 00 08 	add	r8,r9,r8
80005af0:	30 4a       	mov	r10,4
80005af2:	10 9b       	mov	r11,r8
80005af4:	49 0c       	lddpc	r12,80005b34 <fat_invert_nav+0x108>
80005af6:	f0 1f 00 0c 	mcall	80005b24 <fat_invert_nav+0xf8>
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
80005afa:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80005afe:	f0 09 15 02 	lsl	r9,r8,0x2
80005b02:	48 e8       	lddpc	r8,80005b38 <fat_invert_nav+0x10c>
80005b04:	f2 08 00 08 	add	r8,r9,r8
80005b08:	ee c9 00 34 	sub	r9,r7,52
80005b0c:	30 4a       	mov	r10,4
80005b0e:	12 9b       	mov	r11,r9
80005b10:	10 9c       	mov	r12,r8
80005b12:	f0 1f 00 05 	mcall	80005b24 <fat_invert_nav+0xf8>
80005b16:	c0 28       	rjmp	80005b1a <fat_invert_nav+0xee>
void  fat_invert_nav( uint8_t u8_idnav )
{
   _MEM_TYPE_SLOW_ uint8_t Temp[Max(Max(sizeof(Fs_management),sizeof(Fs_management_entry)),sizeof(Fs_management_fast))];

   if( u8_idnav == 0 )
      return;
80005b18:	d7 03       	nop
   memcpy_ram2ram((uint8_t*)&fs_g_navext_entry[u8_idnav], Temp,                               sizeof(Fs_management_entry));

   memcpy_ram2ram(Temp,                              (uint8_t*)&fs_g_nav_fast,                sizeof(Fs_management_fast));
   memcpy_ram2ram((uint8_t*)&fs_g_nav_fast,               (uint8_t*)&fs_g_navext_fast[u8_idnav],   sizeof(Fs_management_fast));
   memcpy_ram2ram((uint8_t*)&fs_g_navext_fast[u8_idnav],  Temp,                               sizeof(Fs_management_fast));
}
80005b1a:	2f 2d       	sub	sp,-56
80005b1c:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b20:	00 00       	add	r0,r0
80005b22:	11 50       	ld.sh	r0,--r8
80005b24:	80 00       	ld.sh	r0,r0[0x0]
80005b26:	d8 b2       	popm	r0-r7,r10,pc
80005b28:	00 00       	add	r0,r0
80005b2a:	11 a4       	ld.ub	r4,r8[0x2]
80005b2c:	00 00       	add	r0,r0
80005b2e:	0f 10       	ld.sh	r0,r7++
80005b30:	00 00       	add	r0,r0
80005b32:	11 88       	ld.ub	r8,r8[0x0]
80005b34:	00 00       	add	r0,r0
80005b36:	11 9c       	ld.ub	r12,r8[0x1]
80005b38:	00 00       	add	r0,r0
80005b3a:	11 98       	ld.ub	r8,r8[0x1]
80005b3c:	22 53       	sub	r3,37
80005b3e:	44 2f       	lddsp	pc,sp[0x108]
80005b40:	4d 4d       	lddpc	sp,80005c90 <ram_2_memory+0x1c>
80005b42:	43 20       	lddsp	r0,sp[0xc8]
80005b44:	43 61       	lddsp	r1,sp[0xd8]
80005b46:	72 64       	ld.w	r4,r9[0x18]
80005b48:	20 6f       	sub	pc,6
80005b4a:	76 65       	ld.w	r5,r11[0x18]
80005b4c:	72 20       	ld.w	r0,r9[0x8]
80005b4e:	53 50       	stdsp	sp[0xd4],r0
80005b50:	49 22       	lddpc	r2,80005b98 <mem_test_unit_ready+0x34>
	...

80005b54 <get_nb_lun>:

#endif  // FREERTOS_USED


U8 get_nb_lun(void)
{
80005b54:	eb cd 40 80 	pushm	r7,lr
80005b58:	1a 97       	mov	r7,sp

  Ctrl_access_unlock();

  return nb_lun;
#else
  return MAX_LUN;
80005b5a:	30 18       	mov	r8,1
#endif
}
80005b5c:	10 9c       	mov	r12,r8
80005b5e:	e3 cd 80 80 	ldm	sp++,r7,pc
80005b62:	d7 03       	nop

80005b64 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
80005b64:	eb cd 40 80 	pushm	r7,lr
80005b68:	1a 97       	mov	r7,sp
80005b6a:	20 2d       	sub	sp,8
80005b6c:	18 98       	mov	r8,r12
80005b6e:	ef 68 ff f8 	st.b	r7[-8],r8
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80005b72:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005b76:	30 08       	mov	r8,0
80005b78:	f0 09 18 00 	cp.b	r9,r8
80005b7c:	c0 b1       	brne	80005b92 <mem_test_unit_ready+0x2e>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
80005b7e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005b82:	48 99       	lddpc	r9,80005ba4 <mem_test_unit_ready+0x40>
80005b84:	a5 78       	lsl	r8,0x5
80005b86:	f2 08 00 08 	add	r8,r9,r8
80005b8a:	70 08       	ld.w	r8,r8[0x0]
80005b8c:	5d 18       	icall	r8
80005b8e:	18 98       	mov	r8,r12
80005b90:	c0 28       	rjmp	80005b94 <mem_test_unit_ready+0x30>
{
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
80005b92:	30 18       	mov	r8,1
80005b94:	ef 48 ff fc 	st.w	r7[-4],r8
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
80005b98:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005b9c:	10 9c       	mov	r12,r8
80005b9e:	2f ed       	sub	sp,-8
80005ba0:	e3 cd 80 80 	ldm	sp++,r7,pc
80005ba4:	80 01       	ld.sh	r1,r0[0x0]
80005ba6:	36 00       	mov	r0,96

80005ba8 <mem_sector_size>:
  return status;
}


U8 mem_sector_size(U8 lun)
{
80005ba8:	eb cd 40 80 	pushm	r7,lr
80005bac:	1a 97       	mov	r7,sp
80005bae:	20 2d       	sub	sp,8
80005bb0:	18 98       	mov	r8,r12
80005bb2:	ef 68 ff f8 	st.b	r7[-8],r8
  U8 sector_size;

  if (!Ctrl_access_lock()) return 0;

  sector_size =
80005bb6:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005bba:	30 08       	mov	r8,0
80005bbc:	f0 09 18 00 	cp.b	r9,r8
80005bc0:	5f 08       	sreq	r8
80005bc2:	ef 68 ff ff 	st.b	r7[-1],r8
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
80005bc6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80005bca:	10 9c       	mov	r12,r8
80005bcc:	2f ed       	sub	sp,-8
80005bce:	e3 cd 80 80 	ldm	sp++,r7,pc
80005bd2:	d7 03       	nop

80005bd4 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
80005bd4:	eb cd 40 80 	pushm	r7,lr
80005bd8:	1a 97       	mov	r7,sp
80005bda:	20 2d       	sub	sp,8
80005bdc:	18 98       	mov	r8,r12
80005bde:	ef 68 ff f8 	st.b	r7[-8],r8
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
80005be2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005be6:	30 08       	mov	r8,0
80005be8:	f0 09 18 00 	cp.b	r9,r8
80005bec:	c0 c1       	brne	80005c04 <mem_wr_protect+0x30>
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
80005bee:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005bf2:	48 a9       	lddpc	r9,80005c18 <mem_wr_protect+0x44>
80005bf4:	a5 78       	lsl	r8,0x5
80005bf6:	f2 08 00 08 	add	r8,r9,r8
80005bfa:	2f 48       	sub	r8,-12
80005bfc:	70 08       	ld.w	r8,r8[0x0]
80005bfe:	5d 18       	icall	r8
80005c00:	18 98       	mov	r8,r12
80005c02:	c0 28       	rjmp	80005c06 <mem_wr_protect+0x32>
{
  bool wr_protect;

  if (!Ctrl_access_lock()) return true;

  wr_protect =
80005c04:	30 18       	mov	r8,1
80005c06:	ef 68 ff ff 	st.b	r7[-1],r8
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
80005c0a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80005c0e:	10 9c       	mov	r12,r8
80005c10:	2f ed       	sub	sp,-8
80005c12:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c16:	00 00       	add	r0,r0
80005c18:	80 01       	ld.sh	r1,r0[0x0]
80005c1a:	36 00       	mov	r0,96

80005c1c <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
80005c1c:	eb cd 40 80 	pushm	r7,lr
80005c20:	1a 97       	mov	r7,sp
80005c22:	20 4d       	sub	sp,16
80005c24:	18 98       	mov	r8,r12
80005c26:	ef 4b ff f4 	st.w	r7[-12],r11
80005c2a:	ef 4a ff f0 	st.w	r7[-16],r10
80005c2e:	ef 68 ff f8 	st.b	r7[-8],r8
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
80005c32:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005c36:	30 08       	mov	r8,0
80005c38:	f0 09 18 00 	cp.b	r9,r8
80005c3c:	c1 01       	brne	80005c5c <memory_2_ram+0x40>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
80005c3e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005c42:	48 c9       	lddpc	r9,80005c70 <memory_2_ram+0x54>
80005c44:	a5 78       	lsl	r8,0x5
80005c46:	f2 08 00 08 	add	r8,r9,r8
80005c4a:	2e c8       	sub	r8,-20
80005c4c:	70 08       	ld.w	r8,r8[0x0]
80005c4e:	ee fb ff f0 	ld.w	r11,r7[-16]
80005c52:	ee fc ff f4 	ld.w	r12,r7[-12]
80005c56:	5d 18       	icall	r8
80005c58:	18 98       	mov	r8,r12
80005c5a:	c0 28       	rjmp	80005c5e <memory_2_ram+0x42>
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
80005c5c:	30 18       	mov	r8,1
80005c5e:	ef 48 ff fc 	st.w	r7[-4],r8
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
80005c62:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005c66:	10 9c       	mov	r12,r8
80005c68:	2f cd       	sub	sp,-16
80005c6a:	e3 cd 80 80 	ldm	sp++,r7,pc
80005c6e:	00 00       	add	r0,r0
80005c70:	80 01       	ld.sh	r1,r0[0x0]
80005c72:	36 00       	mov	r0,96

80005c74 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
80005c74:	eb cd 40 80 	pushm	r7,lr
80005c78:	1a 97       	mov	r7,sp
80005c7a:	20 4d       	sub	sp,16
80005c7c:	18 98       	mov	r8,r12
80005c7e:	ef 4b ff f4 	st.w	r7[-12],r11
80005c82:	ef 4a ff f0 	st.w	r7[-16],r10
80005c86:	ef 68 ff f8 	st.b	r7[-8],r8
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
80005c8a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80005c8e:	30 08       	mov	r8,0
80005c90:	f0 09 18 00 	cp.b	r9,r8
80005c94:	c1 01       	brne	80005cb4 <ram_2_memory+0x40>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
80005c96:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80005c9a:	48 c9       	lddpc	r9,80005cc8 <ram_2_memory+0x54>
80005c9c:	a5 78       	lsl	r8,0x5
80005c9e:	f2 08 00 08 	add	r8,r9,r8
80005ca2:	2e 88       	sub	r8,-24
80005ca4:	70 08       	ld.w	r8,r8[0x0]
80005ca6:	ee fb ff f0 	ld.w	r11,r7[-16]
80005caa:	ee fc ff f4 	ld.w	r12,r7[-12]
80005cae:	5d 18       	icall	r8
80005cb0:	18 98       	mov	r8,r12
80005cb2:	c0 28       	rjmp	80005cb6 <ram_2_memory+0x42>
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
80005cb4:	30 18       	mov	r8,1
80005cb6:	ef 48 ff fc 	st.w	r7[-4],r8
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
80005cba:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005cbe:	10 9c       	mov	r12,r8
80005cc0:	2f cd       	sub	sp,-16
80005cc2:	e3 cd 80 80 	ldm	sp++,r7,pc
80005cc6:	00 00       	add	r0,r0
80005cc8:	80 01       	ld.sh	r1,r0[0x0]
80005cca:	36 00       	mov	r0,96

80005ccc <fat_mount>:
//! If the FS_MULTI_PARTITION option is disabled
//! then the mount routine selects the first partition supported by file system. <br>
//! @endverbatim
//!
bool  fat_mount( void )
{
80005ccc:	eb cd 40 80 	pushm	r7,lr
80005cd0:	1a 97       	mov	r7,sp
80005cd2:	20 2d       	sub	sp,8
   uint8_t  u8_tmp;
   uint16_t u16_tmp;
   uint32_t u32_tmp;

   // Select the root directory
   fs_g_nav.u32_cluster_sel_dir   = 0;
80005cd4:	fe f8 05 b0 	ld.w	r8,pc[1456]
80005cd8:	30 09       	mov	r9,0
80005cda:	91 89       	st.w	r8[0x20],r9
   // No selected file
   fat_clear_entry_info_and_ptr();
80005cdc:	f0 1f 01 6b 	mcall	80006288 <fat_mount+0x5bc>

   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
80005ce0:	fe f9 05 ac 	ld.w	r9,pc[1452]
80005ce4:	30 08       	mov	r8,0
80005ce6:	b2 88       	st.b	r9[0x0],r8
   fs_gu32_addrsector = 0;    // Start read at the beginning of memory
80005ce8:	fe f8 05 a8 	ld.w	r8,pc[1448]
80005cec:	30 09       	mov	r9,0
80005cee:	91 09       	st.w	r8[0x0],r9

   // Check if the drive is available
   if( !fat_check_device() )
80005cf0:	f0 1f 01 69 	mcall	80006294 <fat_mount+0x5c8>
80005cf4:	18 98       	mov	r8,r12
80005cf6:	ec 18 00 01 	eorl	r8,0x1
80005cfa:	5c 58       	castu.b	r8
80005cfc:	c0 40       	breq	80005d04 <fat_mount+0x38>
      return false;
80005cfe:	30 08       	mov	r8,0
80005d00:	e0 8f 02 be 	bral	8000627c <fat_mount+0x5b0>

   while( 1 )  // Search a valid partition
   {
      // Read one sector
      if( !fat_cache_read_sector( true ))
80005d04:	30 1c       	mov	r12,1
80005d06:	f0 1f 01 65 	mcall	80006298 <fat_mount+0x5cc>
80005d0a:	18 98       	mov	r8,r12
80005d0c:	ec 18 00 01 	eorl	r8,0x1
80005d10:	5c 58       	castu.b	r8
80005d12:	c0 40       	breq	80005d1a <fat_mount+0x4e>
         return false;
80005d14:	30 08       	mov	r8,0
80005d16:	e0 8f 02 b3 	bral	8000627c <fat_mount+0x5b0>

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005d1a:	fe f8 05 82 	ld.w	r8,pc[1410]
80005d1e:	f1 39 01 fe 	ld.ub	r9,r8[510]
80005d22:	35 58       	mov	r8,85
80005d24:	f0 09 18 00 	cp.b	r9,r8
80005d28:	c1 00       	breq	80005d48 <fat_mount+0x7c>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
80005d2a:	fe f8 05 72 	ld.w	r8,pc[1394]
80005d2e:	f1 39 01 ff 	ld.ub	r9,r8[511]
      // Read one sector
      if( !fat_cache_read_sector( true ))
         return false;

      // Check PBR/MBR signature
      if ( (fs_g_sector[510] != FS_BR_SIGNATURE_LOW  )
80005d32:	3a a8       	mov	r8,-86
80005d34:	f0 09 18 00 	cp.b	r9,r8
80005d38:	c0 80       	breq	80005d48 <fat_mount+0x7c>
      &&   (fs_g_sector[511] != FS_BR_SIGNATURE_HIGH ) )
      {
         fs_g_status = FS_ERR_NO_FORMAT;
80005d3a:	fe f9 05 66 	ld.w	r9,pc[1382]
80005d3e:	30 28       	mov	r8,2
80005d40:	b2 88       	st.b	r9[0x0],r8
         return false;
80005d42:	30 08       	mov	r8,0
80005d44:	e0 8f 02 9c 	bral	8000627c <fat_mount+0x5b0>
      }

      if ( 0 == fs_gu32_addrsector )
80005d48:	fe f8 05 48 	ld.w	r8,pc[1352]
80005d4c:	70 08       	ld.w	r8,r8[0x0]
80005d4e:	58 08       	cp.w	r8,0
80005d50:	e0 81 00 f2 	brne	80005f34 <fat_mount+0x268>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
80005d54:	30 08       	mov	r8,0
80005d56:	ef 68 ff ff 	st.b	r7[-1],r8
80005d5a:	c8 a8       	rjmp	80005e6e <fat_mount+0x1a2>
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005d5c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005d60:	a5 68       	lsl	r8,0x4
80005d62:	5c 88       	casts.h	r8
80005d64:	f0 c8 fe 42 	sub	r8,r8,-446
80005d68:	5c 88       	casts.h	r8
80005d6a:	5c 78       	castu.h	r8
80005d6c:	fe f9 05 30 	ld.w	r9,pc[1328]
80005d70:	f2 08 07 09 	ld.ub	r9,r9[r8]
80005d74:	38 08       	mov	r8,-128
80005d76:	f0 09 18 00 	cp.b	r9,r8
80005d7a:	c0 f0       	breq	80005d98 <fat_mount+0xcc>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
80005d7c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005d80:	a5 68       	lsl	r8,0x4
80005d82:	5c 88       	casts.h	r8
80005d84:	f0 c8 fe 42 	sub	r8,r8,-446
80005d88:	5c 88       	casts.h	r8
80005d8a:	5c 78       	castu.h	r8
80005d8c:	fe f9 05 10 	ld.w	r9,pc[1296]
80005d90:	f2 08 07 08 	ld.ub	r8,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005d94:	58 08       	cp.w	r8,0
80005d96:	c6 71       	brne	80005e64 <fat_mount+0x198>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
80005d98:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005d9c:	a5 68       	lsl	r8,0x4
80005d9e:	5c 88       	casts.h	r8
80005da0:	f0 c8 fe 42 	sub	r8,r8,-446
80005da4:	5c 88       	casts.h	r8
80005da6:	5c 78       	castu.h	r8
80005da8:	2f c8       	sub	r8,-4
80005daa:	fe f9 04 f2 	ld.w	r9,pc[1266]
80005dae:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005db2:	30 18       	mov	r8,1
80005db4:	f0 09 18 00 	cp.b	r9,r8
80005db8:	c6 20       	breq	80005e7c <fat_mount+0x1b0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
80005dba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005dbe:	a5 68       	lsl	r8,0x4
80005dc0:	5c 88       	casts.h	r8
80005dc2:	f0 c8 fe 42 	sub	r8,r8,-446
80005dc6:	5c 88       	casts.h	r8
80005dc8:	5c 78       	castu.h	r8
80005dca:	2f c8       	sub	r8,-4
80005dcc:	fe f9 04 d0 	ld.w	r9,pc[1232]
80005dd0:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005dd4:	30 48       	mov	r8,4
80005dd6:	f0 09 18 00 	cp.b	r9,r8
80005dda:	c5 10       	breq	80005e7c <fat_mount+0x1b0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M    )||
80005ddc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005de0:	a5 68       	lsl	r8,0x4
80005de2:	5c 88       	casts.h	r8
80005de4:	f0 c8 fe 42 	sub	r8,r8,-446
80005de8:	5c 88       	casts.h	r8
80005dea:	5c 78       	castu.h	r8
80005dec:	2f c8       	sub	r8,-4
80005dee:	fe f9 04 ae 	ld.w	r9,pc[1198]
80005df2:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005df6:	30 68       	mov	r8,6
80005df8:	f0 09 18 00 	cp.b	r9,r8
80005dfc:	c4 00       	breq	80005e7c <fat_mount+0x1b0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M_BIS)||
80005dfe:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005e02:	a5 68       	lsl	r8,0x4
80005e04:	5c 88       	casts.h	r8
80005e06:	f0 c8 fe 42 	sub	r8,r8,-446
80005e0a:	5c 88       	casts.h	r8
80005e0c:	5c 78       	castu.h	r8
80005e0e:	2f c8       	sub	r8,-4
80005e10:	fe f9 04 8c 	ld.w	r9,pc[1164]
80005e14:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005e18:	30 e8       	mov	r8,14
80005e1a:	f0 09 18 00 	cp.b	r9,r8
80005e1e:	c2 f0       	breq	80005e7c <fat_mount+0x1b0>
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_NO_BOOTABLE          )  )
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M_BIS)||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT32           )||
80005e20:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005e24:	a5 68       	lsl	r8,0x4
80005e26:	5c 88       	casts.h	r8
80005e28:	f0 c8 fe 42 	sub	r8,r8,-446
80005e2c:	5c 88       	casts.h	r8
80005e2e:	5c 78       	castu.h	r8
80005e30:	2f c8       	sub	r8,-4
80005e32:	fe f9 04 6a 	ld.w	r9,pc[1130]
80005e36:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005e3a:	30 b8       	mov	r8,11
80005e3c:	f0 09 18 00 	cp.b	r9,r8
80005e40:	c1 e0       	breq	80005e7c <fat_mount+0x1b0>
            &&   ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT12           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_INF32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M    )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT16_SUP32M_BIS)||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT32           )||
                  (fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+4] == FS_PART_TYPE_FAT32_BIS       )) )
80005e42:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005e46:	a5 68       	lsl	r8,0x4
80005e48:	5c 88       	casts.h	r8
80005e4a:	f0 c8 fe 42 	sub	r8,r8,-446
80005e4e:	5c 88       	casts.h	r8
80005e50:	5c 78       	castu.h	r8
80005e52:	2f c8       	sub	r8,-4
80005e54:	fe f9 04 48 	ld.w	r9,pc[1096]
80005e58:	f2 08 07 09 	ld.ub	r9,r9[r8]
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
         {
            // The first sector must be a MBR, then check the partition entry in the MBR
            if ( ((fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+0] == FS_PART_BOOTABLE             )||
80005e5c:	30 c8       	mov	r8,12
80005e5e:	f0 09 18 00 	cp.b	r9,r8
80005e62:	c0 d0       	breq	80005e7c <fat_mount+0x1b0>
         //** first sector then check a MBR structure
         // Search the first partition supported
#if (FS_MULTI_PARTITION == true)
         u16_tmp=0;  // Init to "no valid partition found"
#endif
         for( u8_tmp=0 ; u8_tmp!=4 ; u8_tmp++ )
80005e64:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005e68:	2f f8       	sub	r8,-1
80005e6a:	ef 68 ff ff 	st.b	r7[-1],r8
80005e6e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005e72:	30 48       	mov	r8,4
80005e74:	f0 09 18 00 	cp.b	r9,r8
80005e78:	fe 91 ff 72 	brne	80005d5c <fat_mount+0x90>
#else
               break;
#endif
            }
         }
         if( u8_tmp != 4 )
80005e7c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80005e80:	30 48       	mov	r8,4
80005e82:	f0 09 18 00 	cp.b	r9,r8
80005e86:	c5 70       	breq	80005f34 <fat_mount+0x268>
         {
            // Partition found -> Get partition position (unit sector) at offset 8
            LSB0(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+8];
80005e88:	fe f8 04 08 	ld.w	r8,pc[1032]
80005e8c:	f0 c9 ff fd 	sub	r9,r8,-3
80005e90:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005e94:	a5 68       	lsl	r8,0x4
80005e96:	5c 88       	casts.h	r8
80005e98:	f0 c8 fe 42 	sub	r8,r8,-446
80005e9c:	5c 88       	casts.h	r8
80005e9e:	5c 78       	castu.h	r8
80005ea0:	2f 88       	sub	r8,-8
80005ea2:	fe fa 03 fa 	ld.w	r10,pc[1018]
80005ea6:	f4 08 07 08 	ld.ub	r8,r10[r8]
80005eaa:	b2 88       	st.b	r9[0x0],r8
            LSB1(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+9];
80005eac:	fe f8 03 e4 	ld.w	r8,pc[996]
80005eb0:	f0 c9 ff fe 	sub	r9,r8,-2
80005eb4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005eb8:	a5 68       	lsl	r8,0x4
80005eba:	5c 88       	casts.h	r8
80005ebc:	f0 c8 fe 42 	sub	r8,r8,-446
80005ec0:	5c 88       	casts.h	r8
80005ec2:	5c 78       	castu.h	r8
80005ec4:	2f 78       	sub	r8,-9
80005ec6:	fe fa 03 d6 	ld.w	r10,pc[982]
80005eca:	f4 08 07 08 	ld.ub	r8,r10[r8]
80005ece:	b2 88       	st.b	r9[0x0],r8
            LSB2(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+10];
80005ed0:	fe f8 03 c0 	ld.w	r8,pc[960]
80005ed4:	f0 c9 ff ff 	sub	r9,r8,-1
80005ed8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005edc:	a5 68       	lsl	r8,0x4
80005ede:	5c 88       	casts.h	r8
80005ee0:	f0 c8 fe 42 	sub	r8,r8,-446
80005ee4:	5c 88       	casts.h	r8
80005ee6:	5c 78       	castu.h	r8
80005ee8:	2f 68       	sub	r8,-10
80005eea:	fe fa 03 b2 	ld.w	r10,pc[946]
80005eee:	f4 08 07 08 	ld.ub	r8,r10[r8]
80005ef2:	b2 88       	st.b	r9[0x0],r8
            LSB3(fs_gu32_addrsector) = fs_g_sector[FS_MBR_OFFSET_PART_ENTRY(u8_tmp)+11];
80005ef4:	fe f9 03 9c 	ld.w	r9,pc[924]
80005ef8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80005efc:	a5 68       	lsl	r8,0x4
80005efe:	5c 88       	casts.h	r8
80005f00:	f0 c8 fe 42 	sub	r8,r8,-446
80005f04:	5c 88       	casts.h	r8
80005f06:	5c 78       	castu.h	r8
80005f08:	2f 58       	sub	r8,-11
80005f0a:	fe fa 03 92 	ld.w	r10,pc[914]
80005f0e:	f4 08 07 08 	ld.ub	r8,r10[r8]
80005f12:	b2 88       	st.b	r9[0x0],r8
            fs_gu32_addrsector *= mem_sector_size( fs_g_nav.u8_lun );
80005f14:	fe f8 03 70 	ld.w	r8,pc[880]
80005f18:	11 88       	ld.ub	r8,r8[0x0]
80005f1a:	10 9c       	mov	r12,r8
80005f1c:	f0 1f 00 e2 	mcall	800062a4 <fat_mount+0x5d8>
80005f20:	18 98       	mov	r8,r12
80005f22:	10 99       	mov	r9,r8
80005f24:	fe f8 03 6c 	ld.w	r8,pc[876]
80005f28:	70 08       	ld.w	r8,r8[0x0]
80005f2a:	b1 39       	mul	r9,r8
80005f2c:	fe f8 03 64 	ld.w	r8,pc[868]
80005f30:	91 09       	st.w	r8[0x0],r9
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }
80005f32:	ce 9a       	rjmp	80005d04 <fat_mount+0x38>
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80005f34:	fe f8 03 68 	ld.w	r8,pc[872]
80005f38:	11 89       	ld.ub	r9,r8[0x0]
80005f3a:	3e b8       	mov	r8,-21
80005f3c:	f0 09 18 00 	cp.b	r9,r8
80005f40:	c4 21       	brne	80005fc4 <fat_mount+0x2f8>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
80005f42:	fe f8 03 5a 	ld.w	r8,pc[858]
80005f46:	11 a9       	ld.ub	r9,r8[0x2]
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80005f48:	39 08       	mov	r8,-112
80005f4a:	f0 09 18 00 	cp.b	r9,r8
80005f4e:	c3 b1       	brne	80005fc4 <fat_mount+0x2f8>
           (fs_g_sector[2] == 0x90) &&          // PBR Byte 2
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
80005f50:	fe f8 03 4c 	ld.w	r8,pc[844]
80005f54:	f1 38 00 15 	ld.ub	r8,r8[21]
80005f58:	e2 18 00 f0 	andl	r8,0xf0,COH
         }
#endif
      }

      //** Check a PBR structure
      if ( (fs_g_sector[0] == 0xEB) &&          // PBR Byte 0
80005f5c:	e0 48 00 f0 	cp.w	r8,240
80005f60:	c3 21       	brne	80005fc4 <fat_mount+0x2f8>
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
      return false;
   }

   fs_g_status = FS_ERR_NO_SUPPORT_PART;  // by default partition no supported
80005f62:	fe f9 03 3e 	ld.w	r9,pc[830]
80005f66:	30 48       	mov	r8,4
80005f68:	b2 88       	st.b	r9[0x0],r8

   // Get sector size of File System (unit 512B)
   // To translate from sector disk unit to sector 512B unit
   u8_sector_size = HIGH_16_BPB_BytsPerSec/2;
80005f6a:	fe f8 03 32 	ld.w	r8,pc[818]
80005f6e:	f1 38 00 0c 	ld.ub	r8,r8[12]
80005f72:	a1 98       	lsr	r8,0x1
80005f74:	ef 68 ff fe 	st.b	r7[-2],r8

   // Read BPB_SecPerClus (unit sector)
   fs_g_nav.u8_BPB_SecPerClus = U8_BPB_SecPerClus * u8_sector_size;
80005f78:	fe f8 03 24 	ld.w	r8,pc[804]
80005f7c:	f1 38 00 0d 	ld.ub	r8,r8[13]
80005f80:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80005f84:	f2 08 02 48 	mul	r8,r9,r8
80005f88:	5c 58       	castu.b	r8
80005f8a:	fe f9 02 fa 	ld.w	r9,pc[762]
80005f8e:	b2 98       	st.b	r9[0x1],r8

   //** FAT Type determination (algorithm of "Hardware White Paper FAT")
   // Get FAT size (unit sector)
   u32_tmp=0;
80005f90:	30 08       	mov	r8,0
80005f92:	ef 48 ff f8 	st.w	r7[-8],r8
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
80005f96:	ee c8 00 08 	sub	r8,r7,8
80005f9a:	f0 c9 ff fd 	sub	r9,r8,-3
80005f9e:	fe f8 02 fe 	ld.w	r8,pc[766]
80005fa2:	f1 38 00 16 	ld.ub	r8,r8[22]
80005fa6:	b2 88       	st.b	r9[0x0],r8
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
80005fa8:	ee c8 00 08 	sub	r8,r7,8
80005fac:	f0 c9 ff fe 	sub	r9,r8,-2
80005fb0:	fe f8 02 ec 	ld.w	r8,pc[748]
80005fb4:	f1 38 00 17 	ld.ub	r8,r8[23]
80005fb8:	b2 88       	st.b	r9[0x0],r8
   if ( 0==u32_tmp )
80005fba:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005fbe:	58 08       	cp.w	r8,0
80005fc0:	c0 90       	breq	80005fd2 <fat_mount+0x306>
80005fc2:	c2 a8       	rjmp	80006016 <fat_mount+0x34a>
           ((fs_g_sector[21] & 0xF0) == 0xF0) ) // PBR Byte 21 : Media byte
      {
         break;   // valid PBR found
      }
      // PBR not found
      fs_g_status = FS_ERR_NO_PART;
80005fc4:	fe f9 02 dc 	ld.w	r9,pc[732]
80005fc8:	30 38       	mov	r8,3
80005fca:	b2 88       	st.b	r9[0x0],r8
      return false;
80005fcc:	30 08       	mov	r8,0
80005fce:	e0 8f 01 57 	bral	8000627c <fat_mount+0x5b0>
   u32_tmp=0;
   LSB0( u32_tmp ) = LOW_16_BPB_FATSz16;
   LSB1( u32_tmp ) = HIGH_16_BPB_FATSz16;
   if ( 0==u32_tmp )
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_FATSz32;
80005fd2:	ee c8 00 08 	sub	r8,r7,8
80005fd6:	f0 c9 ff fd 	sub	r9,r8,-3
80005fda:	fe f8 02 c2 	ld.w	r8,pc[706]
80005fde:	f1 38 00 24 	ld.ub	r8,r8[36]
80005fe2:	b2 88       	st.b	r9[0x0],r8
      LSB1( u32_tmp ) = LOW1_32_BPB_FATSz32;
80005fe4:	ee c8 00 08 	sub	r8,r7,8
80005fe8:	f0 c9 ff fe 	sub	r9,r8,-2
80005fec:	fe f8 02 b0 	ld.w	r8,pc[688]
80005ff0:	f1 38 00 25 	ld.ub	r8,r8[37]
80005ff4:	b2 88       	st.b	r9[0x0],r8
      LSB2( u32_tmp ) = LOW2_32_BPB_FATSz32;
80005ff6:	ee c8 00 08 	sub	r8,r7,8
80005ffa:	f0 c9 ff ff 	sub	r9,r8,-1
80005ffe:	fe f8 02 9e 	ld.w	r8,pc[670]
80006002:	f1 38 00 26 	ld.ub	r8,r8[38]
80006006:	b2 88       	st.b	r9[0x0],r8
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
80006008:	ee c9 00 08 	sub	r9,r7,8
8000600c:	fe f8 02 90 	ld.w	r8,pc[656]
80006010:	f1 38 00 27 	ld.ub	r8,r8[39]
80006014:	b2 88       	st.b	r9[0x0],r8
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;
80006016:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000601a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000601e:	b1 39       	mul	r9,r8
80006020:	fe f8 02 64 	ld.w	r8,pc[612]
80006024:	91 19       	st.w	r8[0x4],r9

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80006026:	fe f8 02 76 	ld.w	r8,pc[630]
8000602a:	f1 38 00 13 	ld.ub	r8,r8[19]
8000602e:	58 08       	cp.w	r8,0
80006030:	c2 a1       	brne	80006084 <fat_mount+0x3b8>
80006032:	fe f8 02 6a 	ld.w	r8,pc[618]
80006036:	f1 38 00 14 	ld.ub	r8,r8[20]
8000603a:	58 08       	cp.w	r8,0
8000603c:	c2 41       	brne	80006084 <fat_mount+0x3b8>
   {
      LSB0( u32_tmp ) = LOW0_32_BPB_TotSec32;
8000603e:	ee c8 00 08 	sub	r8,r7,8
80006042:	f0 c9 ff fd 	sub	r9,r8,-3
80006046:	fe f8 02 56 	ld.w	r8,pc[598]
8000604a:	f1 38 00 20 	ld.ub	r8,r8[32]
8000604e:	b2 88       	st.b	r9[0x0],r8
      LSB1( u32_tmp ) = LOW1_32_BPB_TotSec32;
80006050:	ee c8 00 08 	sub	r8,r7,8
80006054:	f0 c9 ff fe 	sub	r9,r8,-2
80006058:	fe f8 02 44 	ld.w	r8,pc[580]
8000605c:	f1 38 00 21 	ld.ub	r8,r8[33]
80006060:	b2 88       	st.b	r9[0x0],r8
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
80006062:	ee c8 00 08 	sub	r8,r7,8
80006066:	f0 c9 ff ff 	sub	r9,r8,-1
8000606a:	fe f8 02 32 	ld.w	r8,pc[562]
8000606e:	f1 38 00 22 	ld.ub	r8,r8[34]
80006072:	b2 88       	st.b	r9[0x0],r8
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
80006074:	ee c9 00 08 	sub	r9,r7,8
80006078:	fe f8 02 24 	ld.w	r8,pc[548]
8000607c:	f1 38 00 23 	ld.ub	r8,r8[35]
80006080:	b2 88       	st.b	r9[0x0],r8
      LSB3( u32_tmp ) = LOW3_32_BPB_FATSz32;
   }
   fs_g_nav.u32_fat_size = u32_tmp * u8_sector_size;

   // Get total count of sectors in partition
   if ( (0==LOW_16_BPB_TotSec16) && (0==HIGH_16_BPB_TotSec16) )
80006082:	c1 d8       	rjmp	800060bc <fat_mount+0x3f0>
      LSB2( u32_tmp ) = LOW2_32_BPB_TotSec32;
      LSB3( u32_tmp ) = LOW3_32_BPB_TotSec32;
   }
   else
   {
      LSB0( u32_tmp ) = LOW_16_BPB_TotSec16;
80006084:	ee c8 00 08 	sub	r8,r7,8
80006088:	f0 c9 ff fd 	sub	r9,r8,-3
8000608c:	fe f8 02 10 	ld.w	r8,pc[528]
80006090:	f1 38 00 13 	ld.ub	r8,r8[19]
80006094:	b2 88       	st.b	r9[0x0],r8
      LSB1( u32_tmp ) = HIGH_16_BPB_TotSec16;
80006096:	ee c8 00 08 	sub	r8,r7,8
8000609a:	f0 c9 ff fe 	sub	r9,r8,-2
8000609e:	fe f8 01 fe 	ld.w	r8,pc[510]
800060a2:	f1 38 00 14 	ld.ub	r8,r8[20]
800060a6:	b2 88       	st.b	r9[0x0],r8
      LSB2( u32_tmp ) = 0;
800060a8:	ee c8 00 08 	sub	r8,r7,8
800060ac:	f0 c9 ff ff 	sub	r9,r8,-1
800060b0:	30 08       	mov	r8,0
800060b2:	b2 88       	st.b	r9[0x0],r8
      LSB3( u32_tmp ) = 0;
800060b4:	ee c9 00 08 	sub	r9,r7,8
800060b8:	30 08       	mov	r8,0
800060ba:	b2 88       	st.b	r9[0x0],r8
   }
   u32_tmp *= u8_sector_size;   // Translate from sector disk unit to sector 512B unit
800060bc:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800060c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800060c4:	f2 08 02 48 	mul	r8,r9,r8
800060c8:	ef 48 ff f8 	st.w	r7[-8],r8

   // Compute the offset (unit 512B) between the end of FAT (beginning of root dir in FAT1x) and the beginning of PBR
   fs_g_nav.rootdir.seg.u16_pos = FS_NB_FAT * (uint16_t)fs_g_nav.u32_fat_size;
800060cc:	4e e8       	lddpc	r8,80006284 <fat_mount+0x5b8>
800060ce:	70 18       	ld.w	r8,r8[0x4]
800060d0:	5c 88       	casts.h	r8
800060d2:	a1 78       	lsl	r8,0x1
800060d4:	5c 88       	casts.h	r8
800060d6:	4e c9       	lddpc	r9,80006284 <fat_mount+0x5b8>
800060d8:	f3 58 00 18 	st.h	r9[24],r8

   // Compute the root directory size (unit sector), for FAT32 is always 0
   LSB( u16_tmp ) = LOW_16_BPB_RootEntCnt;
800060dc:	ee c8 00 04 	sub	r8,r7,4
800060e0:	f0 c9 ff ff 	sub	r9,r8,-1
800060e4:	4e e8       	lddpc	r8,8000629c <fat_mount+0x5d0>
800060e6:	f1 38 00 11 	ld.ub	r8,r8[17]
800060ea:	b2 88       	st.b	r9[0x0],r8
   MSB( u16_tmp ) = HIGH_16_BPB_RootEntCnt;
800060ec:	ee c9 00 04 	sub	r9,r7,4
800060f0:	4e b8       	lddpc	r8,8000629c <fat_mount+0x5d0>
800060f2:	f1 38 00 12 	ld.ub	r8,r8[18]
800060f6:	b2 88       	st.b	r9[0x0],r8
   fs_g_nav.rootdir.seg.u16_size = ((u16_tmp * FS_SIZE_FILE_ENTRY) + ((FS_512B*u8_sector_size)-1)) / (FS_512B*u8_sector_size);
800060f8:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800060fc:	f0 09 15 04 	lsl	r9,r8,0x4
80006100:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80006104:	5c 78       	castu.h	r8
80006106:	f2 08 00 08 	add	r8,r9,r8
8000610a:	a5 78       	lsl	r8,0x5
8000610c:	20 18       	sub	r8,1
8000610e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006112:	a9 79       	lsl	r9,0x9
80006114:	f0 09 0c 08 	divs	r8,r8,r9
80006118:	5c 88       	casts.h	r8
8000611a:	4d b9       	lddpc	r9,80006284 <fat_mount+0x5b8>
8000611c:	f3 58 00 1a 	st.h	r9[26],r8
   fs_g_nav.rootdir.seg.u16_size *= u8_sector_size;
80006120:	4d 98       	lddpc	r8,80006284 <fat_mount+0x5b8>
80006122:	f1 09 00 1a 	ld.sh	r9,r8[26]
80006126:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000612a:	f2 08 02 48 	mul	r8,r9,r8
8000612e:	5c 88       	casts.h	r8
80006130:	4d 59       	lddpc	r9,80006284 <fat_mount+0x5b8>
80006132:	f3 58 00 1a 	st.h	r9[26],r8

   // Get number of reserved sector
   LSB( u16_tmp ) = LOW_16_BPB_ResvSecCnt;
80006136:	ee c8 00 04 	sub	r8,r7,4
8000613a:	f0 c9 ff ff 	sub	r9,r8,-1
8000613e:	4d 88       	lddpc	r8,8000629c <fat_mount+0x5d0>
80006140:	f1 38 00 0e 	ld.ub	r8,r8[14]
80006144:	b2 88       	st.b	r9[0x0],r8
   MSB( u16_tmp ) = HIGH_16_BPB_ResvSecCnt;
80006146:	ee c9 00 04 	sub	r9,r7,4
8000614a:	4d 58       	lddpc	r8,8000629c <fat_mount+0x5d0>
8000614c:	f1 38 00 0f 	ld.ub	r8,r8[15]
80006150:	b2 88       	st.b	r9[0x0],r8
   // Get FSInfo position
   fs_g_nav.u16_offset_FSInfo = (u16_tmp-LOW_16_BPB_FSInfo)*u8_sector_size;
80006152:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80006156:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000615a:	4d 18       	lddpc	r8,8000629c <fat_mount+0x5d0>
8000615c:	f1 38 00 30 	ld.ub	r8,r8[48]
80006160:	f2 08 01 08 	sub	r8,r9,r8
80006164:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80006168:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000616c:	f2 08 02 48 	mul	r8,r9,r8
80006170:	5c 88       	casts.h	r8
80006172:	4c 59       	lddpc	r9,80006284 <fat_mount+0x5b8>
80006174:	b2 48       	st.h	r9[0x8],r8
   u16_tmp *= u8_sector_size; // number of reserved sector translated in unit 512B
80006176:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000617a:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000617e:	f2 08 02 48 	mul	r8,r9,r8
80006182:	5c 88       	casts.h	r8
80006184:	ef 58 ff fc 	st.h	r7[-4],r8

   // Compute the FAT address (unit 512B)
   fs_g_nav.u32_ptr_fat = fs_gu32_addrsector + u16_tmp;
80006188:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000618c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80006190:	4c 08       	lddpc	r8,80006290 <fat_mount+0x5c4>
80006192:	70 08       	ld.w	r8,r8[0x0]
80006194:	10 09       	add	r9,r8
80006196:	4b c8       	lddpc	r8,80006284 <fat_mount+0x5b8>
80006198:	91 49       	st.w	r8[0x10],r9

   // Compute the offset (unit 512B) between the first data cluster and the FAT beginning
   fs_g_nav.u32_offset_data = (FS_NB_FAT * fs_g_nav.u32_fat_size) + (uint32_t)fs_g_nav.rootdir.seg.u16_size;
8000619a:	4b b8       	lddpc	r8,80006284 <fat_mount+0x5b8>
8000619c:	70 18       	ld.w	r8,r8[0x4]
8000619e:	f0 09 15 01 	lsl	r9,r8,0x1
800061a2:	4b 98       	lddpc	r8,80006284 <fat_mount+0x5b8>
800061a4:	f1 08 00 1a 	ld.sh	r8,r8[26]
800061a8:	5c 78       	castu.h	r8
800061aa:	10 09       	add	r9,r8
800061ac:	4b 68       	lddpc	r8,80006284 <fat_mount+0x5b8>
800061ae:	91 59       	st.w	r8[0x14],r9

   // Compute the data region (clusters space = Total - Sector used) size (unit 512B)
   u32_tmp -= ((uint32_t)u16_tmp + fs_g_nav.u32_offset_data);
800061b0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800061b4:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800061b8:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800061bc:	4b 28       	lddpc	r8,80006284 <fat_mount+0x5b8>
800061be:	70 58       	ld.w	r8,r8[0x14]
800061c0:	f4 08 00 08 	add	r8,r10,r8
800061c4:	f2 08 01 08 	sub	r8,r9,r8
800061c8:	ef 48 ff f8 	st.w	r7[-8],r8

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
800061cc:	4a e8       	lddpc	r8,80006284 <fat_mount+0x5b8>
800061ce:	11 98       	ld.ub	r8,r8[0x1]
800061d0:	58 08       	cp.w	r8,0
800061d2:	c0 31       	brne	800061d8 <fat_mount+0x50c>
     return false;
800061d4:	30 08       	mov	r8,0
800061d6:	c5 38       	rjmp	8000627c <fat_mount+0x5b0>
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
800061d8:	4a b8       	lddpc	r8,80006284 <fat_mount+0x5b8>
800061da:	11 98       	ld.ub	r8,r8[0x1]
800061dc:	ef 68 ff ff 	st.b	r7[-1],r8
800061e0:	c0 b8       	rjmp	800061f6 <fat_mount+0x52a>
   {
     u32_tmp  >>= 1;   // This computation round down
800061e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800061e6:	a1 98       	lsr	r8,0x1
800061e8:	ef 48 ff f8 	st.w	r7[-8],r8

   // Compute the count of CLUSTER in the data region
   // !!!Optimization -> u32_CountofCluster (unit 512B)/ fs_g_nav.u8_BPB_SecPerClus (unit 512B & power of 2)
   if (!fs_g_nav.u8_BPB_SecPerClus)
     return false;
   for( u8_tmp = fs_g_nav.u8_BPB_SecPerClus; u8_tmp!=1 ; u8_tmp >>= 1 )
800061ec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800061f0:	a1 98       	lsr	r8,0x1
800061f2:	ef 68 ff ff 	st.b	r7[-1],r8
800061f6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800061fa:	30 18       	mov	r8,1
800061fc:	f0 09 18 00 	cp.b	r9,r8
80006200:	cf 11       	brne	800061e2 <fat_mount+0x516>
   {
     u32_tmp  >>= 1;   // This computation round down
   }
   fs_g_nav.u32_CountofCluster = u32_tmp+2; // The total of cluster include the two reserved clusters
80006202:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006206:	f0 c9 ff fe 	sub	r9,r8,-2
8000620a:	49 f8       	lddpc	r8,80006284 <fat_mount+0x5b8>
8000620c:	91 39       	st.w	r8[0xc],r9

   // Determine the FAT type
   if (u32_tmp < FS_FAT12_MAX_CLUSTERS)
8000620e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006212:	e0 48 0f f4 	cp.w	r8,4084
80006216:	e0 8b 00 06 	brhi	80006222 <fat_mount+0x556>
   {
      // Is FAT 12
#if (FS_FAT_12 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_12;
8000621a:	49 d9       	lddpc	r9,8000628c <fat_mount+0x5c0>
8000621c:	30 18       	mov	r8,1
8000621e:	b2 88       	st.b	r9[0x0],r8
80006220:	c2 d8       	rjmp	8000627a <fat_mount+0x5ae>
   } else {
   if (u32_tmp < FS_FAT16_MAX_CLUSTERS)
80006222:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006226:	e0 48 ff f4 	cp.w	r8,65524
8000622a:	e0 8b 00 06 	brhi	80006236 <fat_mount+0x56a>
   {
      // Is FAT 16
#if (FS_FAT_16 == false)
      return FS_NO_SUPPORT_PART;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_16;
8000622e:	49 89       	lddpc	r9,8000628c <fat_mount+0x5c0>
80006230:	30 28       	mov	r8,2
80006232:	b2 88       	st.b	r9[0x0],r8
80006234:	c2 38       	rjmp	8000627a <fat_mount+0x5ae>
   } else {
      // Is FAT 32
#if (FS_FAT_32 == false)
      return false;
#endif
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_32;
80006236:	49 69       	lddpc	r9,8000628c <fat_mount+0x5c0>
80006238:	30 38       	mov	r8,3
8000623a:	b2 88       	st.b	r9[0x0],r8
      // In FAT32, the root dir is like another directory, this one have a cluster list
      // Get the first cluster number of root
      LSB0( fs_g_nav.rootdir.u32_cluster ) = LOW0_32_BPB_RootClus;
8000623c:	49 28       	lddpc	r8,80006284 <fat_mount+0x5b8>
8000623e:	2e 88       	sub	r8,-24
80006240:	f0 c9 ff fd 	sub	r9,r8,-3
80006244:	49 68       	lddpc	r8,8000629c <fat_mount+0x5d0>
80006246:	f1 38 00 2c 	ld.ub	r8,r8[44]
8000624a:	b2 88       	st.b	r9[0x0],r8
      LSB1( fs_g_nav.rootdir.u32_cluster ) = LOW1_32_BPB_RootClus;
8000624c:	48 e8       	lddpc	r8,80006284 <fat_mount+0x5b8>
8000624e:	2e 88       	sub	r8,-24
80006250:	f0 c9 ff fe 	sub	r9,r8,-2
80006254:	49 28       	lddpc	r8,8000629c <fat_mount+0x5d0>
80006256:	f1 38 00 2d 	ld.ub	r8,r8[45]
8000625a:	b2 88       	st.b	r9[0x0],r8
      LSB2( fs_g_nav.rootdir.u32_cluster ) = LOW2_32_BPB_RootClus;
8000625c:	48 a8       	lddpc	r8,80006284 <fat_mount+0x5b8>
8000625e:	2e 88       	sub	r8,-24
80006260:	f0 c9 ff ff 	sub	r9,r8,-1
80006264:	48 e8       	lddpc	r8,8000629c <fat_mount+0x5d0>
80006266:	f1 38 00 2e 	ld.ub	r8,r8[46]
8000626a:	b2 88       	st.b	r9[0x0],r8
      LSB3( fs_g_nav.rootdir.u32_cluster ) = LOW3_32_BPB_RootClus;
8000626c:	48 68       	lddpc	r8,80006284 <fat_mount+0x5b8>
8000626e:	f0 c9 ff e8 	sub	r9,r8,-24
80006272:	48 b8       	lddpc	r8,8000629c <fat_mount+0x5d0>
80006274:	f1 38 00 2f 	ld.ub	r8,r8[47]
80006278:	b2 88       	st.b	r9[0x0],r8
   }
   }

   return true;
8000627a:	30 18       	mov	r8,1
}
8000627c:	10 9c       	mov	r12,r8
8000627e:	2f ed       	sub	sp,-8
80006280:	e3 cd 80 80 	ldm	sp++,r7,pc
80006284:	00 00       	add	r0,r0
80006286:	11 50       	ld.sh	r0,--r8
80006288:	80 00       	ld.sh	r0,r0[0x0]
8000628a:	51 b8       	stdsp	sp[0x6c],r8
8000628c:	00 00       	add	r0,r0
8000628e:	11 9c       	ld.ub	r12,r8[0x1]
80006290:	00 00       	add	r0,r0
80006292:	0f 0c       	ld.w	r12,r7++
80006294:	80 00       	ld.sh	r0,r0[0x0]
80006296:	39 3c       	mov	r12,-109
80006298:	80 00       	ld.sh	r0,r0[0x0]
8000629a:	57 c0       	stdsp	sp[0x1f0],r0
8000629c:	00 00       	add	r0,r0
8000629e:	0f 50       	ld.sh	r0,--r7
800062a0:	00 00       	add	r0,r0
800062a2:	11 a0       	ld.ub	r0,r8[0x2]
800062a4:	80 00       	ld.sh	r0,r0[0x0]
800062a6:	5b a8       	cp.w	r8,-6

800062a8 <fat_write_fat32_FSInfo>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_write_fat32_FSInfo( uint32_t u32_nb_free_cluster )
{
800062a8:	eb cd 40 80 	pushm	r7,lr
800062ac:	1a 97       	mov	r7,sp
800062ae:	20 1d       	sub	sp,4
800062b0:	ef 4c ff fc 	st.w	r7[-4],r12
   // Init sector
   fs_gu32_addrsector = fs_g_nav.u32_ptr_fat - fs_g_nav.u16_offset_FSInfo;
800062b4:	4a a8       	lddpc	r8,8000635c <fat_write_fat32_FSInfo+0xb4>
800062b6:	70 49       	ld.w	r9,r8[0x10]
800062b8:	4a 98       	lddpc	r8,8000635c <fat_write_fat32_FSInfo+0xb4>
800062ba:	90 48       	ld.sh	r8,r8[0x8]
800062bc:	5c 78       	castu.h	r8
800062be:	10 19       	sub	r9,r8
800062c0:	4a 88       	lddpc	r8,80006360 <fat_write_fat32_FSInfo+0xb8>
800062c2:	91 09       	st.w	r8[0x0],r9

   if( !fat_cache_read_sector( false ))
800062c4:	30 0c       	mov	r12,0
800062c6:	f0 1f 00 28 	mcall	80006364 <fat_write_fat32_FSInfo+0xbc>
800062ca:	18 98       	mov	r8,r12
800062cc:	ec 18 00 01 	eorl	r8,0x1
800062d0:	5c 58       	castu.b	r8
800062d2:	c0 30       	breq	800062d8 <fat_write_fat32_FSInfo+0x30>
      return false;
800062d4:	30 08       	mov	r8,0
800062d6:	c3 f8       	rjmp	80006354 <fat_write_fat32_FSInfo+0xac>
   fat_cache_mark_sector_as_dirty();
800062d8:	f0 1f 00 24 	mcall	80006368 <fat_write_fat32_FSInfo+0xc0>
   fat_cache_clear();
800062dc:	f0 1f 00 24 	mcall	8000636c <fat_write_fat32_FSInfo+0xc4>

   // Fill sector
   // offset 00-04, This lead signature
   memcpy_code2ram( &fs_g_sector[0], const_FSI_LeadSig, sizeof(const_FSI_LeadSig) );
800062e0:	30 4a       	mov	r10,4
800062e2:	4a 4b       	lddpc	r11,80006370 <fat_write_fat32_FSInfo+0xc8>
800062e4:	4a 4c       	lddpc	r12,80006374 <fat_write_fat32_FSInfo+0xcc>
800062e6:	f0 1f 00 25 	mcall	80006378 <fat_write_fat32_FSInfo+0xd0>
   // offset 004-483, reserved (fill with 0)
   // offset 484-487, signature
   memcpy_code2ram( &fs_g_sector[484], const_FSI_StrucSig, sizeof(const_FSI_StrucSig) );
800062ea:	4a 38       	lddpc	r8,80006374 <fat_write_fat32_FSInfo+0xcc>
800062ec:	f0 c8 fe 1c 	sub	r8,r8,-484
800062f0:	30 4a       	mov	r10,4
800062f2:	4a 3b       	lddpc	r11,8000637c <fat_write_fat32_FSInfo+0xd4>
800062f4:	10 9c       	mov	r12,r8
800062f6:	f0 1f 00 21 	mcall	80006378 <fat_write_fat32_FSInfo+0xd0>
   // offset 488-491, free cluster count (by default NO value)
   fs_g_sector[488] = LSB0(u32_nb_free_cluster);
800062fa:	ee c8 00 04 	sub	r8,r7,4
800062fe:	2f d8       	sub	r8,-3
80006300:	11 88       	ld.ub	r8,r8[0x0]
80006302:	49 d9       	lddpc	r9,80006374 <fat_write_fat32_FSInfo+0xcc>
80006304:	f3 68 01 e8 	st.b	r9[488],r8
   fs_g_sector[489] = LSB1(u32_nb_free_cluster);
80006308:	ee c8 00 04 	sub	r8,r7,4
8000630c:	2f e8       	sub	r8,-2
8000630e:	11 88       	ld.ub	r8,r8[0x0]
80006310:	49 99       	lddpc	r9,80006374 <fat_write_fat32_FSInfo+0xcc>
80006312:	f3 68 01 e9 	st.b	r9[489],r8
   fs_g_sector[490] = LSB2(u32_nb_free_cluster);
80006316:	ee c8 00 04 	sub	r8,r7,4
8000631a:	2f f8       	sub	r8,-1
8000631c:	11 88       	ld.ub	r8,r8[0x0]
8000631e:	49 69       	lddpc	r9,80006374 <fat_write_fat32_FSInfo+0xcc>
80006320:	f3 68 01 ea 	st.b	r9[490],r8
   fs_g_sector[491] = LSB3(u32_nb_free_cluster);
80006324:	ee c8 00 04 	sub	r8,r7,4
80006328:	11 88       	ld.ub	r8,r8[0x0]
8000632a:	49 39       	lddpc	r9,80006374 <fat_write_fat32_FSInfo+0xcc>
8000632c:	f3 68 01 eb 	st.b	r9[491],r8
   // offset 492-495, indicates the cluster number at which the driver should start looking for free clusters (by default NO value)
   memset( &fs_g_sector[492] , 0xFF , 4 );
80006330:	49 18       	lddpc	r8,80006374 <fat_write_fat32_FSInfo+0xcc>
80006332:	f0 c8 fe 14 	sub	r8,r8,-492
80006336:	30 4a       	mov	r10,4
80006338:	e0 6b 00 ff 	mov	r11,255
8000633c:	10 9c       	mov	r12,r8
8000633e:	f0 1f 00 11 	mcall	80006380 <fat_write_fat32_FSInfo+0xd8>
   // offset 496-509, reserved (fill with 0)
   // offset 510-511, Signature
   fs_g_sector[510] = FS_BR_SIGNATURE_LOW;
80006342:	48 d9       	lddpc	r9,80006374 <fat_write_fat32_FSInfo+0xcc>
80006344:	35 58       	mov	r8,85
80006346:	f3 68 01 fe 	st.b	r9[510],r8
   fs_g_sector[511] = FS_BR_SIGNATURE_HIGH;
8000634a:	48 b9       	lddpc	r9,80006374 <fat_write_fat32_FSInfo+0xcc>
8000634c:	3a a8       	mov	r8,-86
8000634e:	f3 68 01 ff 	st.b	r9[511],r8
   return true;
80006352:	30 18       	mov	r8,1
}
80006354:	10 9c       	mov	r12,r8
80006356:	2f fd       	sub	sp,-4
80006358:	e3 cd 80 80 	ldm	sp++,r7,pc
8000635c:	00 00       	add	r0,r0
8000635e:	11 50       	ld.sh	r0,--r8
80006360:	00 00       	add	r0,r0
80006362:	0f 0c       	ld.w	r12,r7++
80006364:	80 00       	ld.sh	r0,r0[0x0]
80006366:	57 c0       	stdsp	sp[0x1f0],r0
80006368:	80 00       	ld.sh	r0,r0[0x0]
8000636a:	58 b0       	cp.w	r0,11
8000636c:	80 00       	ld.sh	r0,r0[0x0]
8000636e:	58 90       	cp.w	r0,9
80006370:	80 01       	ld.sh	r1,r0[0x0]
80006372:	36 20       	mov	r0,98
80006374:	00 00       	add	r0,r0
80006376:	0f 50       	ld.sh	r0,--r7
80006378:	80 00       	ld.sh	r0,r0[0x0]
8000637a:	d8 b2       	popm	r0-r7,r10,pc
8000637c:	80 01       	ld.sh	r1,r0[0x0]
8000637e:	36 24       	mov	r4,98
80006380:	80 00       	ld.sh	r0,r0[0x0]
80006382:	d9 fa       	popm	r0-r11,pc,r12=0

80006384 <fat_create_entry_file_name>:
//! b_unicode is a global flag to select UNICODE or ASCII
//! The name must be terminated by NULL and it can't have two dot characters.
//! @endverbatim
//!
bool  fat_create_entry_file_name( FS_STRING sz_name )
{
80006384:	eb cd 40 80 	pushm	r7,lr
80006388:	1a 97       	mov	r7,sp
8000638a:	20 2d       	sub	sp,8
8000638c:	ef 4c ff f8 	st.w	r7[-8],r12
   uint8_t u8_i, u8_nb;
   uint8_t u8_crc, u8_nb_entry;

   // Compute the number of entry for this name
   u8_nb_entry = fat_check_name( sz_name  );
80006390:	ee fc ff f8 	ld.w	r12,r7[-8]
80006394:	f0 1f 00 43 	mcall	800064a0 <fat_create_entry_file_name+0x11c>
80006398:	18 98       	mov	r8,r12
8000639a:	ef 68 ff ff 	st.b	r7[-1],r8
   if( 0 == u8_nb_entry )
8000639e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800063a2:	30 08       	mov	r8,0
800063a4:	f0 09 18 00 	cp.b	r9,r8
800063a8:	c0 31       	brne	800063ae <fat_create_entry_file_name+0x2a>
      return false;
800063aa:	30 08       	mov	r8,0
800063ac:	c7 58       	rjmp	80006496 <fat_create_entry_file_name+0x112>

   // Search a unique short entry
   u8_nb = fat_find_short_entry_name( sz_name  );
800063ae:	ee fc ff f8 	ld.w	r12,r7[-8]
800063b2:	f0 1f 00 3d 	mcall	800064a4 <fat_create_entry_file_name+0x120>
800063b6:	18 98       	mov	r8,r12
800063b8:	ef 68 ff fd 	st.b	r7[-3],r8
   if( 0 == u8_nb )
800063bc:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800063c0:	30 08       	mov	r8,0
800063c2:	f0 09 18 00 	cp.b	r9,r8
800063c6:	c0 61       	brne	800063d2 <fat_create_entry_file_name+0x4e>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
800063c8:	4b 89       	lddpc	r9,800064a8 <fat_create_entry_file_name+0x124>
800063ca:	32 a8       	mov	r8,42
800063cc:	b2 88       	st.b	r9[0x0],r8
      return false;  // All short name exist
800063ce:	30 08       	mov	r8,0
800063d0:	c6 38       	rjmp	80006496 <fat_create_entry_file_name+0x112>
   }

   // Alloc a space for entries
   if( !fat_alloc_entry_free( u8_nb_entry ))
800063d2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800063d6:	10 9c       	mov	r12,r8
800063d8:	f0 1f 00 35 	mcall	800064ac <fat_create_entry_file_name+0x128>
800063dc:	18 98       	mov	r8,r12
800063de:	ec 18 00 01 	eorl	r8,0x1
800063e2:	5c 58       	castu.b	r8
800063e4:	c0 30       	breq	800063ea <fat_create_entry_file_name+0x66>
      return false;
800063e6:	30 08       	mov	r8,0
800063e8:	c5 78       	rjmp	80006496 <fat_create_entry_file_name+0x112>
   // Remark: here the pointer of entry is on the last free entry of new space allocated

   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
800063ea:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800063ee:	30 09       	mov	r9,0
800063f0:	10 9a       	mov	r10,r8
800063f2:	30 0b       	mov	r11,0
800063f4:	ee fc ff f8 	ld.w	r12,r7[-8]
800063f8:	f0 1f 00 2e 	mcall	800064b0 <fat_create_entry_file_name+0x12c>
800063fc:	18 98       	mov	r8,r12
800063fe:	ef 68 ff fe 	st.b	r7[-2],r8
   u8_nb_entry--;
80006402:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006406:	20 18       	sub	r8,1
80006408:	ef 68 ff ff 	st.b	r7[-1],r8

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
8000640c:	30 18       	mov	r8,1
8000640e:	ef 68 ff fc 	st.b	r7[-4],r8
80006412:	c3 08       	rjmp	80006472 <fat_create_entry_file_name+0xee>
   {
      // Go to previous entry
      fs_g_nav_fast.u16_entry_pos_sel_file--;
80006414:	4a 88       	lddpc	r8,800064b4 <fat_create_entry_file_name+0x130>
80006416:	90 18       	ld.sh	r8,r8[0x2]
80006418:	20 18       	sub	r8,1
8000641a:	5c 88       	casts.h	r8
8000641c:	4a 69       	lddpc	r9,800064b4 <fat_create_entry_file_name+0x130>
8000641e:	b2 18       	st.h	r9[0x2],r8
      if( !fat_read_dir())
80006420:	f0 1f 00 26 	mcall	800064b8 <fat_create_entry_file_name+0x134>
80006424:	18 98       	mov	r8,r12
80006426:	ec 18 00 01 	eorl	r8,0x1
8000642a:	5c 58       	castu.b	r8
8000642c:	c0 30       	breq	80006432 <fat_create_entry_file_name+0xae>
         return false;
8000642e:	30 08       	mov	r8,0
80006430:	c3 38       	rjmp	80006496 <fat_create_entry_file_name+0x112>
      // Write a long name entry
      if( u8_i == u8_nb_entry )
80006432:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006436:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000643a:	f0 09 18 00 	cp.b	r9,r8
8000643e:	c0 61       	brne	8000644a <fat_create_entry_file_name+0xc6>
      {
         u8_i += FS_ENTRY_LFN_LAST;
80006440:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006444:	2c 08       	sub	r8,-64
80006446:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
8000644a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000644e:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006452:	12 9a       	mov	r10,r9
80006454:	10 9b       	mov	r11,r8
80006456:	ee fc ff f8 	ld.w	r12,r7[-8]
8000645a:	f0 1f 00 19 	mcall	800064bc <fat_create_entry_file_name+0x138>
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
8000645e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006462:	2f 38       	sub	r8,-13
80006464:	ef 48 ff f8 	st.w	r7[-8],r8
   // Add short name entry
   u8_crc = fat_create_short_entry_name( sz_name , 0 , u8_nb, false  );
   u8_nb_entry--;

   // For each long name entry
   for( u8_i=1 ; u8_i<=u8_nb_entry ; u8_i++ )
80006468:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000646c:	2f f8       	sub	r8,-1
8000646e:	ef 68 ff fc 	st.b	r7[-4],r8
80006472:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006476:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000647a:	f0 09 18 00 	cp.b	r9,r8
8000647e:	fe 98 ff cb 	brls	80006414 <fat_create_entry_file_name+0x90>
      }
      fat_create_long_name_entry( sz_name , u8_crc , u8_i );
      sz_name += FS_SIZE_LFN_ENTRY*(Is_unicode? 2 : 1 );
  }
  // Go back to the short name entry
  fs_g_nav_fast.u16_entry_pos_sel_file += u8_nb_entry;
80006482:	48 d8       	lddpc	r8,800064b4 <fat_create_entry_file_name+0x130>
80006484:	90 19       	ld.sh	r9,r8[0x2]
80006486:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000648a:	f2 08 00 08 	add	r8,r9,r8
8000648e:	5c 88       	casts.h	r8
80006490:	48 99       	lddpc	r9,800064b4 <fat_create_entry_file_name+0x130>
80006492:	b2 18       	st.h	r9[0x2],r8
  return true;
80006494:	30 18       	mov	r8,1
}
80006496:	10 9c       	mov	r12,r8
80006498:	2f ed       	sub	sp,-8
8000649a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000649e:	00 00       	add	r0,r0
800064a0:	80 00       	ld.sh	r0,r0[0x0]
800064a2:	6a 98       	ld.w	r8,r5[0x24]
800064a4:	80 00       	ld.sh	r0,r0[0x0]
800064a6:	69 58       	ld.w	r8,r4[0x54]
800064a8:	00 00       	add	r0,r0
800064aa:	11 a0       	ld.ub	r0,r8[0x2]
800064ac:	80 00       	ld.sh	r0,r0[0x0]
800064ae:	6c 08       	ld.w	r8,r6[0x0]
800064b0:	80 00       	ld.sh	r0,r0[0x0]
800064b2:	66 1c       	ld.w	r12,r3[0x4]
800064b4:	00 00       	add	r0,r0
800064b6:	11 9c       	ld.ub	r12,r8[0x1]
800064b8:	80 00       	ld.sh	r0,r0[0x0]
800064ba:	4f 64       	lddpc	r4,80006690 <fat_create_short_entry_name+0x74>
800064bc:	80 00       	ld.sh	r0,r0[0x0]
800064be:	64 c0       	ld.w	r0,r2[0x30]

800064c0 <fat_create_long_name_entry>:
//! @verbatim
//! OUT: Update the entry in internal cache sector with a new long name entry
//! @endverbatim
//!
void  fat_create_long_name_entry( FS_STRING sz_name , uint8_t u8_crc , uint8_t u8_id  )
{
800064c0:	eb cd 40 80 	pushm	r7,lr
800064c4:	1a 97       	mov	r7,sp
800064c6:	20 6d       	sub	sp,24
800064c8:	ef 4c ff f0 	st.w	r7[-16],r12
800064cc:	16 99       	mov	r9,r11
800064ce:	14 98       	mov	r8,r10
800064d0:	ef 69 ff ec 	st.b	r7[-20],r9
800064d4:	ef 68 ff e8 	st.b	r7[-24],r8
   PTR_CACHE ptr_entry;
   bool b_end_of_name = false;
800064d8:	30 08       	mov	r8,0
800064da:	ef 68 ff ff 	st.b	r7[-1],r8

   fat_cache_mark_sector_as_dirty();
800064de:	f0 1f 00 4e 	mcall	80006614 <fat_create_long_name_entry+0x154>
   ptr_entry = fat_get_ptr_entry();
800064e2:	f0 1f 00 4e 	mcall	80006618 <fat_create_long_name_entry+0x158>
800064e6:	18 98       	mov	r8,r12
800064e8:	ef 48 ff f8 	st.w	r7[-8],r8
   *ptr_entry = u8_id;
800064ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800064f0:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800064f4:	b2 88       	st.b	r9[0x0],r8
   ptr_entry++;   // The long name start at offset 1 of the entry file
800064f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800064fa:	2f f8       	sub	r8,-1
800064fc:	ef 48 ff f8 	st.w	r7[-8],r8

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
80006500:	30 18       	mov	r8,1
80006502:	ef 68 ff e8 	st.b	r7[-24],r8
80006506:	c7 c8       	rjmp	800065fe <fat_create_long_name_entry+0x13e>
   {
      // fields with no character
      if( 11 == u8_id)
80006508:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000650c:	30 b8       	mov	r8,11
8000650e:	f0 09 18 00 	cp.b	r9,r8
80006512:	c0 61       	brne	8000651e <fat_create_long_name_entry+0x5e>
      {
         *ptr_entry = FS_ATTR_LFN_ENTRY;  // Attribute field
80006514:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006518:	30 f8       	mov	r8,15
8000651a:	b2 88       	st.b	r9[0x0],r8
         continue;
8000651c:	c6 78       	rjmp	800065ea <fat_create_long_name_entry+0x12a>
      }
      if( (12 == u8_id)
8000651e:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80006522:	30 c8       	mov	r8,12
80006524:	f0 09 18 00 	cp.b	r9,r8
80006528:	c5 c0       	breq	800065e0 <fat_create_long_name_entry+0x120>
8000652a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000652e:	31 a8       	mov	r8,26
80006530:	f0 09 18 00 	cp.b	r9,r8
80006534:	c5 80       	breq	800065e4 <fat_create_long_name_entry+0x124>
80006536:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000653a:	31 b8       	mov	r8,27
8000653c:	f0 09 18 00 	cp.b	r9,r8
80006540:	c5 40       	breq	800065e8 <fat_create_long_name_entry+0x128>
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
      }
      if( 13 == u8_id)
80006542:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80006546:	30 d8       	mov	r8,13
80006548:	f0 09 18 00 	cp.b	r9,r8
8000654c:	c0 71       	brne	8000655a <fat_create_long_name_entry+0x9a>
      {
         *ptr_entry = u8_crc;             // CRC field
8000654e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006552:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80006556:	b2 88       	st.b	r9[0x0],r8
         continue;
80006558:	c4 98       	rjmp	800065ea <fat_create_long_name_entry+0x12a>
      }

      // fields with a character
      if( !b_end_of_name )
8000655a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000655e:	ec 18 00 01 	eorl	r8,0x1
80006562:	5c 58       	castu.b	r8
80006564:	c3 90       	breq	800065d6 <fat_create_long_name_entry+0x116>
         uint16_t u16_tmp;
         if( Is_unicode )
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
80006566:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000656a:	11 88       	ld.ub	r8,r8[0x0]
8000656c:	ef 58 ff f6 	st.h	r7[-10],r8
         }
         if(('\\' == u16_tmp )
80006570:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80006574:	35 c8       	mov	r8,92
80006576:	f0 09 19 00 	cp.h	r9,r8
8000657a:	c0 70       	breq	80006588 <fat_create_long_name_entry+0xc8>
         || ('/'  == u16_tmp ) )
8000657c:	ef 09 ff f6 	ld.sh	r9,r7[-10]
         {
            u16_tmp = ((FS_STR_UNICODE)sz_name)[0];
         }else{
            u16_tmp = sz_name[0];
         }
         if(('\\' == u16_tmp )
80006580:	32 f8       	mov	r8,47
80006582:	f0 09 19 00 	cp.h	r9,r8
80006586:	c0 41       	brne	8000658e <fat_create_long_name_entry+0xce>
         || ('/'  == u16_tmp ) )
         {  // end of name
            u16_tmp = 0;                  // Set a end of name flag
80006588:	30 08       	mov	r8,0
8000658a:	ef 58 ff f6 	st.h	r7[-10],r8
         }
         if( 0 == u16_tmp )
8000658e:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80006592:	58 08       	cp.w	r8,0
80006594:	c0 41       	brne	8000659c <fat_create_long_name_entry+0xdc>
         {
            b_end_of_name = true;
80006596:	30 18       	mov	r8,1
80006598:	ef 68 ff ff 	st.b	r7[-1],r8
         }
         *ptr_entry = LSB(u16_tmp);
8000659c:	ee c8 00 0a 	sub	r8,r7,10
800065a0:	2f f8       	sub	r8,-1
800065a2:	11 88       	ld.ub	r8,r8[0x0]
800065a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800065a8:	b2 88       	st.b	r9[0x0],r8
         ptr_entry++;
800065aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800065ae:	2f f8       	sub	r8,-1
800065b0:	ef 48 ff f8 	st.w	r7[-8],r8
         *ptr_entry = MSB(u16_tmp);
800065b4:	ee c8 00 0a 	sub	r8,r7,10
800065b8:	11 88       	ld.ub	r8,r8[0x0]
800065ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800065be:	b2 88       	st.b	r9[0x0],r8
         u8_id++;
800065c0:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800065c4:	2f f8       	sub	r8,-1
800065c6:	ef 68 ff e8 	st.b	r7[-24],r8
         sz_name += (Is_unicode? 2 : 1 );
800065ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800065ce:	2f f8       	sub	r8,-1
800065d0:	ef 48 ff f0 	st.w	r7[-16],r8
800065d4:	c0 b8       	rjmp	800065ea <fat_create_long_name_entry+0x12a>
      }
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
800065d6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800065da:	3f f8       	mov	r8,-1
800065dc:	b2 88       	st.b	r9[0x0],r8
800065de:	c0 68       	rjmp	800065ea <fat_create_long_name_entry+0x12a>
      ||  (26 == u8_id)
      ||  (27 == u8_id) )
      {
         // Reserved field
         // *ptr_entry = 0x00;            // No necessary because the cache must be clean
         continue;
800065e0:	d7 03       	nop
800065e2:	c0 48       	rjmp	800065ea <fat_create_long_name_entry+0x12a>
800065e4:	d7 03       	nop
800065e6:	c0 28       	rjmp	800065ea <fat_create_long_name_entry+0x12a>
800065e8:	d7 03       	nop
   fat_cache_mark_sector_as_dirty();
   ptr_entry = fat_get_ptr_entry();
   *ptr_entry = u8_id;
   ptr_entry++;   // The long name start at offset 1 of the entry file

   for( u8_id=1; u8_id<FS_SIZE_FILE_ENTRY ; u8_id++ , ptr_entry++ )
800065ea:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800065ee:	2f f8       	sub	r8,-1
800065f0:	ef 68 ff e8 	st.b	r7[-24],r8
800065f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800065f8:	2f f8       	sub	r8,-1
800065fa:	ef 48 ff f8 	st.w	r7[-8],r8
800065fe:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80006602:	31 f8       	mov	r8,31
80006604:	f0 09 18 00 	cp.b	r9,r8
80006608:	fe 98 ff 80 	brls	80006508 <fat_create_long_name_entry+0x48>
      else
      {  // end of name
         *ptr_entry = 0xFF;               // Padding mandatory
      }
   } // end of loop
}
8000660c:	2f ad       	sub	sp,-24
8000660e:	e3 cd 80 80 	ldm	sp++,r7,pc
80006612:	00 00       	add	r0,r0
80006614:	80 00       	ld.sh	r0,r0[0x0]
80006616:	58 b0       	cp.w	r0,11
80006618:	80 00       	ld.sh	r0,r0[0x0]
8000661a:	57 98       	stdsp	sp[0x1e4],r8

8000661c <fat_create_short_entry_name>:
//!                           false to write in internal cache
//!
//! @return    short name CRC
//!
uint8_t    fat_create_short_entry_name( FS_STRING sz_name , FS_STRING short_name , uint8_t nb , bool mode  )
{
8000661c:	eb cd 40 80 	pushm	r7,lr
80006620:	1a 97       	mov	r7,sp
80006622:	20 7d       	sub	sp,28
80006624:	ef 4c ff f0 	st.w	r7[-16],r12
80006628:	ef 4b ff ec 	st.w	r7[-20],r11
8000662c:	12 98       	mov	r8,r9
8000662e:	14 99       	mov	r9,r10
80006630:	ef 69 ff e8 	st.b	r7[-24],r9
80006634:	ef 68 ff e4 	st.b	r7[-28],r8
   PTR_CACHE ptr_entry = 0;
80006638:	30 08       	mov	r8,0
8000663a:	ef 48 ff f4 	st.w	r7[-12],r8
   uint8_t u8_i, u8_step, character;
   uint8_t crc;
   uint8_t nb_digit;

   if( !mode )
8000663e:	ef 38 ff e4 	ld.ub	r8,r7[-28]
80006642:	ec 18 00 01 	eorl	r8,0x1
80006646:	5c 58       	castu.b	r8
80006648:	c0 80       	breq	80006658 <fat_create_short_entry_name+0x3c>
   {
      // Modify internal cache to create short name entry in the current entry
      fat_cache_mark_sector_as_dirty();
8000664a:	f0 1f 00 c0 	mcall	80006948 <fat_create_short_entry_name+0x32c>
      // Get pointer on current entry
      ptr_entry = fat_get_ptr_entry();
8000664e:	f0 1f 00 c0 	mcall	8000694c <fat_create_short_entry_name+0x330>
80006652:	18 98       	mov	r8,r12
80006654:	ef 48 ff f4 	st.w	r7[-12],r8
   }

   // Compute the digit number
   if( nb < 10 )        nb_digit = 1;
80006658:	ef 39 ff e8 	ld.ub	r9,r7[-24]
8000665c:	30 98       	mov	r8,9
8000665e:	f0 09 18 00 	cp.b	r9,r8
80006662:	e0 8b 00 06 	brhi	8000666e <fat_create_short_entry_name+0x52>
80006666:	30 18       	mov	r8,1
80006668:	ef 68 ff ff 	st.b	r7[-1],r8
8000666c:	c0 f8       	rjmp	8000668a <fat_create_short_entry_name+0x6e>
   else if( nb < 100 )  nb_digit = 2;
8000666e:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80006672:	36 38       	mov	r8,99
80006674:	f0 09 18 00 	cp.b	r9,r8
80006678:	e0 8b 00 06 	brhi	80006684 <fat_create_short_entry_name+0x68>
8000667c:	30 28       	mov	r8,2
8000667e:	ef 68 ff ff 	st.b	r7[-1],r8
80006682:	c0 48       	rjmp	8000668a <fat_create_short_entry_name+0x6e>
   else                 nb_digit = 3;
80006684:	30 38       	mov	r8,3
80006686:	ef 68 ff ff 	st.b	r7[-1],r8

   crc = u8_i = 0;
8000668a:	30 08       	mov	r8,0
8000668c:	ef 68 ff fb 	st.b	r7[-5],r8
80006690:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006694:	ef 68 ff fe 	st.b	r7[-2],r8
   u8_step = 1;
80006698:	30 18       	mov	r8,1
8000669a:	ef 68 ff fc 	st.b	r7[-4],r8
   {
      if( Is_unicode )
      {
         character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         character = sz_name[0];
8000669e:	ee f8 ff f0 	ld.w	r8,r7[-16]
800066a2:	11 88       	ld.ub	r8,r8[0x0]
800066a4:	ef 68 ff fd 	st.b	r7[-3],r8
      }

      if( 1 == u8_step )
800066a8:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800066ac:	30 18       	mov	r8,1
800066ae:	f0 09 18 00 	cp.b	r9,r8
800066b2:	c1 e1       	brne	800066ee <fat_create_short_entry_name+0xd2>
      {  // step 1 = translate the name
         if( ((FS_SIZE_SFNAME_WITHOUT_EXT-(1+nb_digit)) == u8_i)    // name field is full (-2 for "~1")
800066b4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800066b8:	5c d8       	com	r8
800066ba:	f0 c9 ff f8 	sub	r9,r8,-8
800066be:	ef 38 ff fb 	ld.ub	r8,r7[-5]
800066c2:	10 39       	cp.w	r9,r8
800066c4:	c0 f0       	breq	800066e2 <fat_create_short_entry_name+0xc6>
800066c6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800066ca:	32 e8       	mov	r8,46
800066cc:	f0 09 18 00 	cp.b	r9,r8
800066d0:	c0 90       	breq	800066e2 <fat_create_short_entry_name+0xc6>
800066d2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800066d6:	10 9c       	mov	r12,r8
800066d8:	f0 1f 00 9e 	mcall	80006950 <fat_create_short_entry_name+0x334>
800066dc:	18 98       	mov	r8,r12
800066de:	58 08       	cp.w	r8,0
800066e0:	c0 70       	breq	800066ee <fat_create_short_entry_name+0xd2>
         ||  ('.'    == character)                       // is the end of name without extension
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
800066e2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800066e6:	2f f8       	sub	r8,-1
800066e8:	ef 68 ff fc 	st.b	r7[-4],r8
            continue;
800066ec:	c2 c9       	rjmp	80006944 <fat_create_short_entry_name+0x328>
         }
      }
      if( 8 == u8_step )
800066ee:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800066f2:	30 88       	mov	r8,8
800066f4:	f0 09 18 00 	cp.b	r9,r8
800066f8:	c1 51       	brne	80006722 <fat_create_short_entry_name+0x106>
      {  // step 8 = translate the extension
         if( (u8_i == FS_SIZE_SFNAME)                    // name field is full
800066fa:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800066fe:	30 b8       	mov	r8,11
80006700:	f0 09 18 00 	cp.b	r9,r8
80006704:	c0 90       	breq	80006716 <fat_create_short_entry_name+0xfa>
80006706:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000670a:	10 9c       	mov	r12,r8
8000670c:	f0 1f 00 91 	mcall	80006950 <fat_create_short_entry_name+0x334>
80006710:	18 98       	mov	r8,r12
80006712:	58 08       	cp.w	r8,0
80006714:	c0 70       	breq	80006722 <fat_create_short_entry_name+0x106>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
80006716:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000671a:	2f f8       	sub	r8,-1
8000671c:	ef 68 ff fc 	st.b	r7[-4],r8
            continue;
80006720:	c1 29       	rjmp	80006944 <fat_create_short_entry_name+0x328>
         }
      }
      if( (1==u8_step) || (8==u8_step) )
80006722:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006726:	30 18       	mov	r8,1
80006728:	f0 09 18 00 	cp.b	r9,r8
8000672c:	c0 70       	breq	8000673a <fat_create_short_entry_name+0x11e>
8000672e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006732:	30 88       	mov	r8,8
80006734:	f0 09 18 00 	cp.b	r9,r8
80006738:	c1 51       	brne	80006762 <fat_create_short_entry_name+0x146>
      {  // steps to translate name
         character = fat_translate_char_shortname( character );
8000673a:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000673e:	10 9c       	mov	r12,r8
80006740:	f0 1f 00 85 	mcall	80006954 <fat_create_short_entry_name+0x338>
80006744:	18 98       	mov	r8,r12
80006746:	ef 68 ff fd 	st.b	r7[-3],r8
         sz_name += (Is_unicode? 2 : 1 );
8000674a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000674e:	2f f8       	sub	r8,-1
80006750:	ef 48 ff f0 	st.w	r7[-16],r8
         if( 0 == character )
80006754:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006758:	30 08       	mov	r8,0
8000675a:	f0 09 18 00 	cp.b	r9,r8
8000675e:	c0 21       	brne	80006762 <fat_create_short_entry_name+0x146>
         {
            continue;                                    // Bad character, ignore this one
80006760:	cf 28       	rjmp	80006944 <fat_create_short_entry_name+0x328>
         }
      }
      if( 7 == u8_step )
80006762:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006766:	30 78       	mov	r8,7
80006768:	f0 09 18 00 	cp.b	r9,r8
8000676c:	c1 b1       	brne	800067a2 <fat_create_short_entry_name+0x186>
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
8000676e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006772:	32 e8       	mov	r8,46
80006774:	f0 09 18 00 	cp.b	r9,r8
80006778:	c0 90       	breq	8000678a <fat_create_short_entry_name+0x16e>
8000677a:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000677e:	10 9c       	mov	r12,r8
80006780:	f0 1f 00 74 	mcall	80006950 <fat_create_short_entry_name+0x334>
80006784:	18 98       	mov	r8,r12
80006786:	58 08       	cp.w	r8,0
80006788:	c0 70       	breq	80006796 <fat_create_short_entry_name+0x17a>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
8000678a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000678e:	2f f8       	sub	r8,-1
80006790:	ef 68 ff fc 	st.b	r7[-4],r8
            continue;                                    // Bad character, ignore this one
         }
      }
      if( 7 == u8_step )
      {  // step 5 = find character '.'
         if( ('.'    == character)                       // is the end of name without extension
80006794:	c0 68       	rjmp	800067a0 <fat_create_short_entry_name+0x184>
         ||  fat_check_eof_name(character)            )  // is the end of name
         {
            u8_step++;                                   // go to next step
         } else {
            sz_name += (Is_unicode? 2 : 1 );
80006796:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000679a:	2f f8       	sub	r8,-1
8000679c:	ef 48 ff f0 	st.w	r7[-16],r8
         }
         continue;                                       // this step don't add a character in the short name
800067a0:	cd 28       	rjmp	80006944 <fat_create_short_entry_name+0x328>
      }
      if( 6 == u8_step )
800067a2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800067a6:	30 68       	mov	r8,6
800067a8:	f0 09 18 00 	cp.b	r9,r8
800067ac:	c1 01       	brne	800067cc <fat_create_short_entry_name+0x1b0>
      {  // step 4 = add padding
         if( u8_i == FS_SIZE_SFNAME_WITHOUT_EXT )        // end of field name without extension
800067ae:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800067b2:	30 88       	mov	r8,8
800067b4:	f0 09 18 00 	cp.b	r9,r8
800067b8:	c0 71       	brne	800067c6 <fat_create_short_entry_name+0x1aa>
         {
            u8_step++;                                   // go to next step
800067ba:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800067be:	2f f8       	sub	r8,-1
800067c0:	ef 68 ff fc 	st.b	r7[-4],r8
            continue;
800067c4:	cc 08       	rjmp	80006944 <fat_create_short_entry_name+0x328>
         }
         character = ' ';
800067c6:	32 08       	mov	r8,32
800067c8:	ef 68 ff fd 	st.b	r7[-3],r8
      }
      if( 9 == u8_step )
800067cc:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800067d0:	30 98       	mov	r8,9
800067d2:	f0 09 18 00 	cp.b	r9,r8
800067d6:	c1 01       	brne	800067f6 <fat_create_short_entry_name+0x1da>
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
800067d8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800067dc:	30 b8       	mov	r8,11
800067de:	f0 09 18 00 	cp.b	r9,r8
800067e2:	c0 71       	brne	800067f0 <fat_create_short_entry_name+0x1d4>

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
      crc += character;                                  // add next char
   } // End of loop while
   return crc;
800067e4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
}
800067e8:	10 9c       	mov	r12,r8
800067ea:	2f 9d       	sub	sp,-28
800067ec:	e3 cd 80 80 	ldm	sp++,r7,pc
      {  // step 7 = add padding in extension name
         if( u8_i == FS_SIZE_SFNAME )                    // end of field name with extension
         {
            break;                                       // end of loop while(1)
         }
         character = ' ';
800067f0:	32 08       	mov	r8,32
800067f2:	ef 68 ff fd 	st.b	r7[-3],r8
      }
      if( 5 == u8_step )
800067f6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800067fa:	30 58       	mov	r8,5
800067fc:	f0 09 18 00 	cp.b	r9,r8
80006800:	c1 91       	brne	80006832 <fat_create_short_entry_name+0x216>
      {  // step 4 = add unit 1 of number
         character = '0'+(nb%10);
80006802:	ef 3a ff e8 	ld.ub	r10,r7[-24]
80006806:	e0 68 cc cd 	mov	r8,52429
8000680a:	ea 18 cc cc 	orh	r8,0xcccc
8000680e:	f4 08 06 48 	mulu.d	r8,r10,r8
80006812:	a3 99       	lsr	r9,0x3
80006814:	12 98       	mov	r8,r9
80006816:	a3 68       	lsl	r8,0x2
80006818:	12 08       	add	r8,r9
8000681a:	a1 78       	lsl	r8,0x1
8000681c:	f4 08 01 08 	sub	r8,r10,r8
80006820:	5c 58       	castu.b	r8
80006822:	2d 08       	sub	r8,-48
80006824:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step++;                                      // go to next step
80006828:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000682c:	2f f8       	sub	r8,-1
8000682e:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      if( 4 == u8_step )
80006832:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006836:	30 48       	mov	r8,4
80006838:	f0 09 18 00 	cp.b	r9,r8
8000683c:	c2 21       	brne	80006880 <fat_create_short_entry_name+0x264>
      {  // step 3 = add unit 10 of number
         character = '0'+((nb%100)/10);
8000683e:	ef 3a ff e8 	ld.ub	r10,r7[-24]
80006842:	e0 68 85 1f 	mov	r8,34079
80006846:	ea 18 51 eb 	orh	r8,0x51eb
8000684a:	f4 08 06 48 	mulu.d	r8,r10,r8
8000684e:	f2 08 16 05 	lsr	r8,r9,0x5
80006852:	f0 08 10 64 	mul	r8,r8,100
80006856:	f4 08 01 08 	sub	r8,r10,r8
8000685a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000685e:	e0 68 cc cd 	mov	r8,52429
80006862:	ea 18 cc cc 	orh	r8,0xcccc
80006866:	f2 08 06 48 	mulu.d	r8,r9,r8
8000686a:	f2 08 16 03 	lsr	r8,r9,0x3
8000686e:	5c 58       	castu.b	r8
80006870:	2d 08       	sub	r8,-48
80006872:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step++;                                      // go to next step
80006876:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000687a:	2f f8       	sub	r8,-1
8000687c:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      if( 3 == u8_step )
80006880:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006884:	30 38       	mov	r8,3
80006886:	f0 09 18 00 	cp.b	r9,r8
8000688a:	c1 41       	brne	800068b2 <fat_create_short_entry_name+0x296>
      {  // step 2 = add unit 100 of number
         character = '0'+(nb/100);
8000688c:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80006890:	e0 68 85 1f 	mov	r8,34079
80006894:	ea 18 51 eb 	orh	r8,0x51eb
80006898:	f2 08 06 48 	mulu.d	r8,r9,r8
8000689c:	f2 08 16 05 	lsr	r8,r9,0x5
800068a0:	5c 58       	castu.b	r8
800068a2:	2d 08       	sub	r8,-48
800068a4:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step++;                                      // go to next step
800068a8:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800068ac:	2f f8       	sub	r8,-1
800068ae:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      if( 2 == u8_step )
800068b2:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800068b6:	30 28       	mov	r8,2
800068b8:	f0 09 18 00 	cp.b	r9,r8
800068bc:	c0 e1       	brne	800068d8 <fat_create_short_entry_name+0x2bc>
      {  // step 2 = add character '~'
         character = '~';
800068be:	37 e8       	mov	r8,126
800068c0:	ef 68 ff fd 	st.b	r7[-3],r8
         u8_step+=(4-nb_digit);                          // go to next step
800068c4:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800068c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800068cc:	f2 08 01 08 	sub	r8,r9,r8
800068d0:	5c 58       	castu.b	r8
800068d2:	2f c8       	sub	r8,-4
800068d4:	ef 68 ff fc 	st.b	r7[-4],r8
      }

      if( mode )
800068d8:	ef 39 ff e4 	ld.ub	r9,r7[-28]
800068dc:	30 08       	mov	r8,0
800068de:	f0 09 18 00 	cp.b	r9,r8
800068e2:	c0 c0       	breq	800068fa <fat_create_short_entry_name+0x2de>
      {
         // Record the short name in buffer
         *short_name = character;
800068e4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800068e8:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800068ec:	b2 88       	st.b	r9[0x0],r8
         short_name++;
800068ee:	ee f8 ff ec 	ld.w	r8,r7[-20]
800068f2:	2f f8       	sub	r8,-1
800068f4:	ef 48 ff ec 	st.w	r7[-20],r8
800068f8:	c0 b8       	rjmp	8000690e <fat_create_short_entry_name+0x2f2>
      }else{
         // Record the character in short entry file
         *ptr_entry = character;
800068fa:	ee f9 ff f4 	ld.w	r9,r7[-12]
800068fe:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80006902:	b2 88       	st.b	r9[0x0],r8
         ptr_entry++;
80006904:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006908:	2f f8       	sub	r8,-1
8000690a:	ef 48 ff f4 	st.w	r7[-12],r8
      }
      u8_i++;
8000690e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006912:	2f f8       	sub	r8,-1
80006914:	ef 68 ff fb 	st.b	r7[-5],r8

      // Compute the CRC of the short name
      crc = (crc >> 1) + ((crc & 1) << 7);               // rotate
80006918:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000691c:	a1 98       	lsr	r8,0x1
8000691e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80006922:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80006926:	a7 78       	lsl	r8,0x7
80006928:	5c 58       	castu.b	r8
8000692a:	f2 08 00 08 	add	r8,r9,r8
8000692e:	ef 68 ff fe 	st.b	r7[-2],r8
      crc += character;                                  // add next char
80006932:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006936:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000693a:	f2 08 00 08 	add	r8,r9,r8
8000693e:	ef 68 ff fe 	st.b	r7[-2],r8
   } // End of loop while
80006942:	ca ea       	rjmp	8000669e <fat_create_short_entry_name+0x82>
80006944:	ca da       	rjmp	8000669e <fat_create_short_entry_name+0x82>
80006946:	00 00       	add	r0,r0
80006948:	80 00       	ld.sh	r0,r0[0x0]
8000694a:	58 b0       	cp.w	r0,11
8000694c:	80 00       	ld.sh	r0,r0[0x0]
8000694e:	57 98       	stdsp	sp[0x1e4],r8
80006950:	80 00       	ld.sh	r0,r0[0x0]
80006952:	57 54       	stdsp	sp[0x1d4],r4
80006954:	80 00       	ld.sh	r0,r0[0x0]
80006956:	6b 6c       	ld.w	r12,r5[0x58]

80006958 <fat_find_short_entry_name>:
//!
//! @return the number used to create the short name
//! @return 0 in case of error
//!
uint8_t    fat_find_short_entry_name( FS_STRING sz_name  )
{
80006958:	eb cd 40 80 	pushm	r7,lr
8000695c:	1a 97       	mov	r7,sp
8000695e:	20 4d       	sub	sp,16
80006960:	ef 4c ff f0 	st.w	r7[-16],r12
   char _MEM_TYPE_SLOW_ short_name[11];
   uint8_t u8_nb;

   u8_nb = 0;
80006964:	30 08       	mov	r8,0
80006966:	ef 68 ff ff 	st.b	r7[-1],r8
8000696a:	c0 28       	rjmp	8000696e <fat_find_short_entry_name+0x16>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
            return u8_nb;                                // Short name don't exist, then good number
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
      }
   }
8000696c:	d7 03       	nop
   uint8_t u8_nb;

   u8_nb = 0;
   while(1)
   {
      if( 0xFF == u8_nb )
8000696e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006972:	3f f8       	mov	r8,-1
80006974:	f0 09 18 00 	cp.b	r9,r8
80006978:	c0 31       	brne	8000697e <fat_find_short_entry_name+0x26>
         return 0;                                       // All short name exist
8000697a:	30 08       	mov	r8,0
8000697c:	c3 d8       	rjmp	800069f6 <fat_find_short_entry_name+0x9e>

      u8_nb++;                                           // Try next short name
8000697e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006982:	2f f8       	sub	r8,-1
80006984:	ef 68 ff ff 	st.b	r7[-1],r8
      fat_create_short_entry_name( sz_name , short_name , u8_nb , true  ); // Compute the short name
80006988:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000698c:	ee c8 00 0c 	sub	r8,r7,12
80006990:	30 19       	mov	r9,1
80006992:	10 9b       	mov	r11,r8
80006994:	ee fc ff f0 	ld.w	r12,r7[-16]
80006998:	f0 1f 00 1a 	mcall	80006a00 <fat_find_short_entry_name+0xa8>
      fs_g_nav_fast.u16_entry_pos_sel_file = 0;          // Go to beginning of directory
8000699c:	49 a9       	lddpc	r9,80006a04 <fat_find_short_entry_name+0xac>
8000699e:	30 08       	mov	r8,0
800069a0:	b2 18       	st.h	r9[0x2],r8
      // Scan directory to find a short entry
      while(1)
      {
         if ( !fat_read_dir())                           // Read directory
800069a2:	f0 1f 00 1a 	mcall	80006a08 <fat_find_short_entry_name+0xb0>
800069a6:	18 98       	mov	r8,r12
800069a8:	ec 18 00 01 	eorl	r8,0x1
800069ac:	5c 58       	castu.b	r8
800069ae:	c0 c0       	breq	800069c6 <fat_find_short_entry_name+0x6e>
         {
            if( FS_ERR_OUT_LIST == fs_g_status )
800069b0:	49 78       	lddpc	r8,80006a0c <fat_find_short_entry_name+0xb4>
800069b2:	11 89       	ld.ub	r9,r8[0x0]
800069b4:	31 a8       	mov	r8,26
800069b6:	f0 09 18 00 	cp.b	r9,r8
800069ba:	c0 41       	brne	800069c2 <fat_find_short_entry_name+0x6a>
               return u8_nb;                             // short name don't exist, then good number
800069bc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800069c0:	c1 b8       	rjmp	800069f6 <fat_find_short_entry_name+0x9e>
            return 0;                                    // System or Disk Error
800069c2:	30 08       	mov	r8,0
800069c4:	c1 98       	rjmp	800069f6 <fat_find_short_entry_name+0x9e>
         }
         if( fat_entry_shortname_compare( short_name ) ) // Check entry
800069c6:	ee c8 00 0c 	sub	r8,r7,12
800069ca:	10 9c       	mov	r12,r8
800069cc:	f0 1f 00 11 	mcall	80006a10 <fat_find_short_entry_name+0xb8>
800069d0:	18 98       	mov	r8,r12
800069d2:	58 08       	cp.w	r8,0
800069d4:	cc c1       	brne	8000696c <fat_find_short_entry_name+0x14>
            break;                                       // Short name exist
         if( FS_ERR_ENTRY_EMPTY == fs_g_status )
800069d6:	48 e8       	lddpc	r8,80006a0c <fat_find_short_entry_name+0xb4>
800069d8:	11 89       	ld.ub	r9,r8[0x0]
800069da:	30 a8       	mov	r8,10
800069dc:	f0 09 18 00 	cp.b	r9,r8
800069e0:	c0 41       	brne	800069e8 <fat_find_short_entry_name+0x90>
            return u8_nb;                                // Short name don't exist, then good number
800069e2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800069e6:	c0 88       	rjmp	800069f6 <fat_find_short_entry_name+0x9e>
         fs_g_nav_fast.u16_entry_pos_sel_file++;         // Go to next entry
800069e8:	48 78       	lddpc	r8,80006a04 <fat_find_short_entry_name+0xac>
800069ea:	90 18       	ld.sh	r8,r8[0x2]
800069ec:	2f f8       	sub	r8,-1
800069ee:	5c 88       	casts.h	r8
800069f0:	48 59       	lddpc	r9,80006a04 <fat_find_short_entry_name+0xac>
800069f2:	b2 18       	st.h	r9[0x2],r8
      }
800069f4:	cd 7b       	rjmp	800069a2 <fat_find_short_entry_name+0x4a>
   }
}
800069f6:	10 9c       	mov	r12,r8
800069f8:	2f cd       	sub	sp,-16
800069fa:	e3 cd 80 80 	ldm	sp++,r7,pc
800069fe:	00 00       	add	r0,r0
80006a00:	80 00       	ld.sh	r0,r0[0x0]
80006a02:	66 1c       	ld.w	r12,r3[0x4]
80006a04:	00 00       	add	r0,r0
80006a06:	11 9c       	ld.ub	r12,r8[0x1]
80006a08:	80 00       	ld.sh	r0,r0[0x0]
80006a0a:	4f 64       	lddpc	r4,80006be0 <fat_translate_char_shortname+0x74>
80006a0c:	00 00       	add	r0,r0
80006a0e:	11 a0       	ld.ub	r0,r8[0x2]
80006a10:	80 00       	ld.sh	r0,r0[0x0]
80006a12:	6a 14       	ld.w	r4,r5[0x4]

80006a14 <fat_entry_shortname_compare>:
//!
//! @return    true it is the same
//! @return    false in case of error, see global value "fs_g_status" for more detail
//!
bool  fat_entry_shortname_compare( FS_STRING short_name )
{
80006a14:	eb cd 40 80 	pushm	r7,lr
80006a18:	1a 97       	mov	r7,sp
80006a1a:	20 2d       	sub	sp,8
80006a1c:	ef 4c ff f8 	st.w	r7[-8],r12
   PTR_CACHE ptr_entry;

   ptr_entry = fat_get_ptr_entry();
80006a20:	f0 1f 00 1b 	mcall	80006a8c <fat_entry_shortname_compare+0x78>
80006a24:	18 98       	mov	r8,r12
80006a26:	ef 48 ff fc 	st.w	r7[-4],r8
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
80006a2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006a2e:	11 88       	ld.ub	r8,r8[0x0]
80006a30:	58 08       	cp.w	r8,0
80006a32:	c0 61       	brne	80006a3e <fat_entry_shortname_compare+0x2a>
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
80006a34:	49 79       	lddpc	r9,80006a90 <fat_entry_shortname_compare+0x7c>
80006a36:	30 a8       	mov	r8,10
80006a38:	b2 88       	st.b	r9[0x0],r8
      return false;
80006a3a:	30 08       	mov	r8,0
80006a3c:	c2 38       	rjmp	80006a82 <fat_entry_shortname_compare+0x6e>
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
80006a3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006a42:	11 89       	ld.ub	r9,r8[0x0]
80006a44:	3e 58       	mov	r8,-27
80006a46:	f0 09 18 00 	cp.b	r9,r8
80006a4a:	c0 90       	breq	80006a5c <fat_entry_shortname_compare+0x48>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
80006a4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006a50:	2f 58       	sub	r8,-11
80006a52:	11 89       	ld.ub	r9,r8[0x0]
   if( FS_ENTRY_END == *ptr_entry )             // end of directory
   {
      fs_g_status = FS_ERR_ENTRY_EMPTY;
      return false;
   }
   if( (FS_ENTRY_DEL == *ptr_entry )            // deleted entry
80006a54:	30 f8       	mov	r8,15
80006a56:	f0 09 18 00 	cp.b	r9,r8
80006a5a:	c0 61       	brne	80006a66 <fat_entry_shortname_compare+0x52>
   ||  (FS_ATTR_LFN_ENTRY == ptr_entry[11]) )   // long file name
   {
      fs_g_status = FS_ERR_ENTRY_BAD;
80006a5c:	48 d9       	lddpc	r9,80006a90 <fat_entry_shortname_compare+0x7c>
80006a5e:	30 b8       	mov	r8,11
80006a60:	b2 88       	st.b	r9[0x0],r8
      return false;
80006a62:	30 08       	mov	r8,0
80006a64:	c0 f8       	rjmp	80006a82 <fat_entry_shortname_compare+0x6e>
   }
   fs_g_status = FS_ERR_ENTRY_BAD;              // by default this entry is different then bad
80006a66:	48 b9       	lddpc	r9,80006a90 <fat_entry_shortname_compare+0x7c>
80006a68:	30 b8       	mov	r8,11
80006a6a:	b2 88       	st.b	r9[0x0],r8
   return (0==memcmp_ram2ram(ptr_entry , short_name , 8+3 ));
80006a6c:	30 ba       	mov	r10,11
80006a6e:	ee fb ff f8 	ld.w	r11,r7[-8]
80006a72:	ee fc ff fc 	ld.w	r12,r7[-4]
80006a76:	f0 1f 00 08 	mcall	80006a94 <fat_entry_shortname_compare+0x80>
80006a7a:	18 98       	mov	r8,r12
80006a7c:	58 08       	cp.w	r8,0
80006a7e:	5f 08       	sreq	r8
80006a80:	5c 58       	castu.b	r8
}
80006a82:	10 9c       	mov	r12,r8
80006a84:	2f ed       	sub	sp,-8
80006a86:	e3 cd 80 80 	ldm	sp++,r7,pc
80006a8a:	00 00       	add	r0,r0
80006a8c:	80 00       	ld.sh	r0,r0[0x0]
80006a8e:	57 98       	stdsp	sp[0x1e4],r8
80006a90:	00 00       	add	r0,r0
80006a92:	11 a0       	ld.ub	r0,r8[0x2]
80006a94:	80 00       	ld.sh	r0,r0[0x0]
80006a96:	d8 8c       	*unknown*

80006a98 <fat_check_name>:
//!
//! @return    number of entry file to store the name (short + long name) <br>
//!            if name incorrect then 0 is returned.
//!
uint8_t    fat_check_name( FS_STRING sz_name  )
{
80006a98:	eb cd 40 80 	pushm	r7,lr
80006a9c:	1a 97       	mov	r7,sp
80006a9e:	20 3d       	sub	sp,12
80006aa0:	ef 4c ff f4 	st.w	r7[-12],r12
   uint8_t u8_nb_entry, u8_i, u8_j;
   uint16_t u16_character;

   u8_nb_entry = 2;        // a short entry + one long name entry minimum
80006aa4:	30 28       	mov	r8,2
80006aa6:	ef 68 ff fb 	st.b	r7[-5],r8
   u8_i = FS_SIZE_LFN_ENTRY;
80006aaa:	30 d8       	mov	r8,13
80006aac:	ef 68 ff fc 	st.b	r7[-4],r8
   {
      if( Is_unicode )
      {
         u16_character = ((FS_STR_UNICODE)sz_name)[0];
      }else{
         u16_character = sz_name[0];
80006ab0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006ab4:	11 88       	ld.ub	r8,r8[0x0]
80006ab6:	ef 58 ff fe 	st.h	r7[-2],r8
      }
      if( fat_check_eof_name( u16_character ) )
80006aba:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80006abe:	10 9c       	mov	r12,r8
80006ac0:	f0 1f 00 28 	mcall	80006b60 <fat_check_name+0xc8>
80006ac4:	18 98       	mov	r8,r12
80006ac6:	58 08       	cp.w	r8,0
80006ac8:	c0 90       	breq	80006ada <fat_check_name+0x42>
         u8_i = FS_SIZE_LFN_ENTRY;
      }
      u8_i--;
      sz_name += (Is_unicode? 2 : 1 );
   }
   if( 0x14 < u8_nb_entry )
80006aca:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80006ace:	31 48       	mov	r8,20
80006ad0:	f0 09 18 00 	cp.b	r9,r8
80006ad4:	e0 8b 00 3b 	brhi	80006b4a <fat_check_name+0xb2>
80006ad8:	c3 e8       	rjmp	80006b54 <fat_check_name+0xbc>
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
80006ada:	30 08       	mov	r8,0
80006adc:	ef 68 ff fd 	st.b	r7[-3],r8
80006ae0:	c1 58       	rjmp	80006b0a <fat_check_name+0x72>
      {
         if( u16_character == fs_s_tab_incorrect_char[u8_j] )
80006ae2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80006ae6:	4a 09       	lddpc	r9,80006b64 <fat_check_name+0xcc>
80006ae8:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006aec:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80006af0:	f0 09 19 00 	cp.h	r9,r8
80006af4:	c0 61       	brne	80006b00 <fat_check_name+0x68>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
80006af6:	49 d9       	lddpc	r9,80006b68 <fat_check_name+0xd0>
80006af8:	31 c8       	mov	r8,28
80006afa:	b2 88       	st.b	r9[0x0],r8
            return 0;      // incorrect character
80006afc:	30 08       	mov	r8,0
80006afe:	c2 d8       	rjmp	80006b58 <fat_check_name+0xc0>
         u16_character = sz_name[0];
      }
      if( fat_check_eof_name( u16_character ) )
         break;

      for( u8_j = 0 ; u8_j < sizeof(fs_s_tab_incorrect_char) ; u8_j++ )
80006b00:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80006b04:	2f f8       	sub	r8,-1
80006b06:	ef 68 ff fd 	st.b	r7[-3],r8
80006b0a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80006b0e:	30 68       	mov	r8,6
80006b10:	f0 09 18 00 	cp.b	r9,r8
80006b14:	fe 98 ff e7 	brls	80006ae2 <fat_check_name+0x4a>
         {
            fs_g_status = FS_ERR_INCORRECT_NAME;
            return 0;      // incorrect character
         }
      }
      if( 0 == u8_i )
80006b18:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80006b1c:	30 08       	mov	r8,0
80006b1e:	f0 09 18 00 	cp.b	r9,r8
80006b22:	c0 91       	brne	80006b34 <fat_check_name+0x9c>
      {
         u8_nb_entry++;
80006b24:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80006b28:	2f f8       	sub	r8,-1
80006b2a:	ef 68 ff fb 	st.b	r7[-5],r8
         u8_i = FS_SIZE_LFN_ENTRY;
80006b2e:	30 d8       	mov	r8,13
80006b30:	ef 68 ff fc 	st.b	r7[-4],r8
      }
      u8_i--;
80006b34:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80006b38:	20 18       	sub	r8,1
80006b3a:	ef 68 ff fc 	st.b	r7[-4],r8
      sz_name += (Is_unicode? 2 : 1 );
80006b3e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006b42:	2f f8       	sub	r8,-1
80006b44:	ef 48 ff f4 	st.w	r7[-12],r8
   }
80006b48:	cb 4b       	rjmp	80006ab0 <fat_check_name+0x18>
   if( 0x14 < u8_nb_entry )
   {
      fs_g_status = FS_ERR_NAME_TOO_LARGE;
80006b4a:	48 89       	lddpc	r9,80006b68 <fat_check_name+0xd0>
80006b4c:	32 b8       	mov	r8,43
80006b4e:	b2 88       	st.b	r9[0x0],r8
      return 0;            // Name too large
80006b50:	30 08       	mov	r8,0
80006b52:	c0 38       	rjmp	80006b58 <fat_check_name+0xc0>
   }
   return u8_nb_entry;
80006b54:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80006b58:	10 9c       	mov	r12,r8
80006b5a:	2f dd       	sub	sp,-12
80006b5c:	e3 cd 80 80 	ldm	sp++,r7,pc
80006b60:	80 00       	ld.sh	r0,r0[0x0]
80006b62:	57 54       	stdsp	sp[0x1d4],r4
80006b64:	80 01       	ld.sh	r1,r0[0x0]
80006b66:	36 28       	mov	r8,98
80006b68:	00 00       	add	r0,r0
80006b6a:	11 a0       	ld.ub	r0,r8[0x2]

80006b6c <fat_translate_char_shortname>:
//!
//! @return    character translated <br>
//!            if no supported then 0
//!
uint8_t    fat_translate_char_shortname( uint8_t character )
{
80006b6c:	eb cd 40 80 	pushm	r7,lr
80006b70:	1a 97       	mov	r7,sp
80006b72:	20 2d       	sub	sp,8
80006b74:	18 98       	mov	r8,r12
80006b76:	ef 68 ff f8 	st.b	r7[-8],r8
   uint8_t u8_j;

   if( (character<=' ') || ('~'<character) )
80006b7a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006b7e:	32 08       	mov	r8,32
80006b80:	f0 09 18 00 	cp.b	r9,r8
80006b84:	e0 88 00 09 	brls	80006b96 <fat_translate_char_shortname+0x2a>
80006b88:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006b8c:	37 e8       	mov	r8,126
80006b8e:	f0 09 18 00 	cp.b	r9,r8
80006b92:	e0 88 00 04 	brls	80006b9a <fat_translate_char_shortname+0x2e>
      return 0;
80006b96:	30 08       	mov	r8,0
80006b98:	c3 28       	rjmp	80006bfc <fat_translate_char_shortname+0x90>
   if( ('a'<=character) && (character<='z') )
80006b9a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006b9e:	36 08       	mov	r8,96
80006ba0:	f0 09 18 00 	cp.b	r9,r8
80006ba4:	e0 88 00 0e 	brls	80006bc0 <fat_translate_char_shortname+0x54>
80006ba8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006bac:	37 a8       	mov	r8,122
80006bae:	f0 09 18 00 	cp.b	r9,r8
80006bb2:	e0 8b 00 07 	brhi	80006bc0 <fat_translate_char_shortname+0x54>
   {
      return (character - ('a'-'A'));  // Change to upper case
80006bb6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80006bba:	22 08       	sub	r8,32
80006bbc:	5c 58       	castu.b	r8
80006bbe:	c1 f8       	rjmp	80006bfc <fat_translate_char_shortname+0x90>
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
80006bc0:	30 08       	mov	r8,0
80006bc2:	ef 68 ff ff 	st.b	r7[-1],r8
80006bc6:	c1 28       	rjmp	80006bea <fat_translate_char_shortname+0x7e>
   {
      if( character == fs_s_execption_char[u8_j] )
80006bc8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006bcc:	48 e9       	lddpc	r9,80006c04 <fat_translate_char_shortname+0x98>
80006bce:	f2 08 07 08 	ld.ub	r8,r9[r8]
80006bd2:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80006bd6:	f0 09 18 00 	cp.b	r9,r8
80006bda:	c0 31       	brne	80006be0 <fat_translate_char_shortname+0x74>
         return 0;
80006bdc:	30 08       	mov	r8,0
80006bde:	c0 f8       	rjmp	80006bfc <fat_translate_char_shortname+0x90>
      return 0;
   if( ('a'<=character) && (character<='z') )
   {
      return (character - ('a'-'A'));  // Change to upper case
   }
   for( u8_j = 0 ; u8_j < sizeof(fs_s_execption_char) ; u8_j++ )
80006be0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006be4:	2f f8       	sub	r8,-1
80006be6:	ef 68 ff ff 	st.b	r7[-1],r8
80006bea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006bee:	30 68       	mov	r8,6
80006bf0:	f0 09 18 00 	cp.b	r9,r8
80006bf4:	fe 98 ff ea 	brls	80006bc8 <fat_translate_char_shortname+0x5c>
   {
      if( character == fs_s_execption_char[u8_j] )
         return 0;
   }
   return character;
80006bf8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
}
80006bfc:	10 9c       	mov	r12,r8
80006bfe:	2f ed       	sub	sp,-8
80006c00:	e3 cd 80 80 	ldm	sp++,r7,pc
80006c04:	80 01       	ld.sh	r1,r0[0x0]
80006c06:	36 30       	mov	r0,99

80006c08 <fat_alloc_entry_free>:
//! @verbatim
//! OUT: Initialize the system on the last alloced free entry
//! @endverbatim
//!
bool  fat_alloc_entry_free( uint8_t u8_nb_entry )
{
80006c08:	eb cd 40 80 	pushm	r7,lr
80006c0c:	1a 97       	mov	r7,sp
80006c0e:	20 3d       	sub	sp,12
80006c10:	18 98       	mov	r8,r12
80006c12:	ef 68 ff f4 	st.b	r7[-12],r8
   PTR_CACHE ptr_entry;
   bool b_garbage_collector_used = false;
80006c16:	30 08       	mov	r8,0
80006c18:	ef 68 ff fe 	st.b	r7[-2],r8
   uint8_t u8_nb_entry_save;

   u8_nb_entry_save = u8_nb_entry;
80006c1c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006c20:	ef 68 ff ff 	st.b	r7[-1],r8

   // Start at the beginning of dir
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
80006c24:	4c 59       	lddpc	r9,80006d38 <fat_alloc_entry_free+0x130>
80006c26:	30 08       	mov	r8,0
80006c28:	b2 18       	st.h	r9[0x2],r8
80006c2a:	c0 28       	rjmp	80006c2e <fat_alloc_entry_free+0x26>
         b_garbage_collector_used = true;
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
         u8_nb_entry = u8_nb_entry_save;
         continue;
      }
   }  // end of while(1)
80006c2c:	d7 03       	nop
   fs_g_nav_fast.u16_entry_pos_sel_file=0;
   // Loop in directory
   while( 1 )
   {
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80006c2e:	f0 1f 00 44 	mcall	80006d3c <fat_alloc_entry_free+0x134>
80006c32:	18 98       	mov	r8,r12
80006c34:	ec 18 00 01 	eorl	r8,0x1
80006c38:	5c 58       	castu.b	r8
80006c3a:	c3 90       	breq	80006cac <fat_alloc_entry_free+0xa4>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80006c3c:	4c 18       	lddpc	r8,80006d40 <fat_alloc_entry_free+0x138>
80006c3e:	11 89       	ld.ub	r9,r8[0x0]
80006c40:	31 a8       	mov	r8,26
80006c42:	f0 09 18 00 	cp.b	r9,r8
80006c46:	c0 30       	breq	80006c4c <fat_alloc_entry_free+0x44>
            return false;
80006c48:	30 08       	mov	r8,0
80006c4a:	c7 28       	rjmp	80006d2e <fat_alloc_entry_free+0x126>

         // The position is outside the cluster list
         // then alloc a new sector (= new cluster)
         // Remark: The fs_g_seg.u32_addr contains the last cluster value of a directory list to link with the new list
         fs_g_seg.u32_size_or_pos = 1;
80006c4c:	4b e8       	lddpc	r8,80006d44 <fat_alloc_entry_free+0x13c>
80006c4e:	30 19       	mov	r9,1
80006c50:	91 19       	st.w	r8[0x4],r9
         if( !fat_allocfreespace())
80006c52:	f0 1f 00 3e 	mcall	80006d48 <fat_alloc_entry_free+0x140>
80006c56:	18 98       	mov	r8,r12
80006c58:	ec 18 00 01 	eorl	r8,0x1
80006c5c:	5c 58       	castu.b	r8
80006c5e:	c1 d0       	breq	80006c98 <fat_alloc_entry_free+0x90>
         {
            // Garbage collector on entry file
            if( b_garbage_collector_used )
80006c60:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006c64:	30 08       	mov	r8,0
80006c66:	f0 09 18 00 	cp.b	r9,r8
80006c6a:	c0 30       	breq	80006c70 <fat_alloc_entry_free+0x68>
               return false;
80006c6c:	30 08       	mov	r8,0
80006c6e:	c6 08       	rjmp	80006d2e <fat_alloc_entry_free+0x126>
            if( !fat_garbage_collector_entry())
80006c70:	f0 1f 00 37 	mcall	80006d4c <fat_alloc_entry_free+0x144>
80006c74:	18 98       	mov	r8,r12
80006c76:	ec 18 00 01 	eorl	r8,0x1
80006c7a:	5c 58       	castu.b	r8
80006c7c:	c0 30       	breq	80006c82 <fat_alloc_entry_free+0x7a>
               return false;
80006c7e:	30 08       	mov	r8,0
80006c80:	c5 78       	rjmp	80006d2e <fat_alloc_entry_free+0x126>
            b_garbage_collector_used = true;
80006c82:	30 18       	mov	r8,1
80006c84:	ef 68 ff fe 	st.b	r7[-2],r8
            fs_g_nav_fast.u16_entry_pos_sel_file=0;
80006c88:	4a c9       	lddpc	r9,80006d38 <fat_alloc_entry_free+0x130>
80006c8a:	30 08       	mov	r8,0
80006c8c:	b2 18       	st.h	r9[0x2],r8
            u8_nb_entry = u8_nb_entry_save;
80006c8e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006c92:	ef 68 ff f4 	st.b	r7[-12],r8
            continue;
80006c96:	c4 b8       	rjmp	80006d2c <fat_alloc_entry_free+0x124>
         }

         // Clean this new cluster
         // Remark: The fs_g_seg.u32_addr contains the new cluster value
         if( !fat_clear_cluster())
80006c98:	f0 1f 00 2e 	mcall	80006d50 <fat_alloc_entry_free+0x148>
80006c9c:	18 98       	mov	r8,r12
80006c9e:	ec 18 00 01 	eorl	r8,0x1
80006ca2:	5c 58       	castu.b	r8
80006ca4:	c0 30       	breq	80006caa <fat_alloc_entry_free+0xa2>
            return false;
80006ca6:	30 08       	mov	r8,0
80006ca8:	c4 38       	rjmp	80006d2e <fat_alloc_entry_free+0x126>

         continue;  // Rescan the directory list to find the new allocated sector
80006caa:	c4 18       	rjmp	80006d2c <fat_alloc_entry_free+0x124>
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80006cac:	f0 1f 00 2a 	mcall	80006d54 <fat_alloc_entry_free+0x14c>
80006cb0:	18 98       	mov	r8,r12
80006cb2:	ef 48 ff f8 	st.w	r7[-8],r8
      if ( FS_ENTRY_END == *ptr_entry )
80006cb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006cba:	11 88       	ld.ub	r8,r8[0x0]
80006cbc:	58 08       	cp.w	r8,0
80006cbe:	c0 e1       	brne	80006cda <fat_alloc_entry_free+0xd2>
      {  // The entry is free
         u8_nb_entry--;
80006cc0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80006cc4:	20 18       	sub	r8,1
80006cc6:	ef 68 ff f4 	st.b	r7[-12],r8
         if( 0 == u8_nb_entry )
80006cca:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80006cce:	30 08       	mov	r8,0
80006cd0:	f0 09 18 00 	cp.b	r9,r8
80006cd4:	c0 31       	brne	80006cda <fat_alloc_entry_free+0xd2>
         {
            return true;  // All free entry is found
80006cd6:	30 18       	mov	r8,1
80006cd8:	c2 b8       	rjmp	80006d2e <fat_alloc_entry_free+0x126>
         }
      }

      // go to next entry
      fs_g_nav_fast.u16_entry_pos_sel_file++;
80006cda:	49 88       	lddpc	r8,80006d38 <fat_alloc_entry_free+0x130>
80006cdc:	90 18       	ld.sh	r8,r8[0x2]
80006cde:	2f f8       	sub	r8,-1
80006ce0:	5c 88       	casts.h	r8
80006ce2:	49 69       	lddpc	r9,80006d38 <fat_alloc_entry_free+0x130>
80006ce4:	b2 18       	st.h	r9[0x2],r8
      if( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80006ce6:	49 58       	lddpc	r8,80006d38 <fat_alloc_entry_free+0x130>
80006ce8:	90 18       	ld.sh	r8,r8[0x2]
80006cea:	58 08       	cp.w	r8,0
80006cec:	ca 01       	brne	80006c2c <fat_alloc_entry_free+0x24>
      {
         // Here, the directory have the maximum size
         // Garbage collector on entry file
         if( b_garbage_collector_used )
80006cee:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006cf2:	30 08       	mov	r8,0
80006cf4:	f0 09 18 00 	cp.b	r9,r8
80006cf8:	c0 60       	breq	80006d04 <fat_alloc_entry_free+0xfc>
         {
            // Directory full (FAT Norm limit directory to 65535 entrys)
            fs_g_status = FS_ERR_NO_FREE_SPACE;
80006cfa:	49 29       	lddpc	r9,80006d40 <fat_alloc_entry_free+0x138>
80006cfc:	31 b8       	mov	r8,27
80006cfe:	b2 88       	st.b	r9[0x0],r8
            return false;
80006d00:	30 08       	mov	r8,0
80006d02:	c1 68       	rjmp	80006d2e <fat_alloc_entry_free+0x126>
         }
         if( !fat_garbage_collector_entry())
80006d04:	f0 1f 00 12 	mcall	80006d4c <fat_alloc_entry_free+0x144>
80006d08:	18 98       	mov	r8,r12
80006d0a:	ec 18 00 01 	eorl	r8,0x1
80006d0e:	5c 58       	castu.b	r8
80006d10:	c0 30       	breq	80006d16 <fat_alloc_entry_free+0x10e>
            return false;
80006d12:	30 08       	mov	r8,0
80006d14:	c0 d8       	rjmp	80006d2e <fat_alloc_entry_free+0x126>
         b_garbage_collector_used = true;
80006d16:	30 18       	mov	r8,1
80006d18:	ef 68 ff fe 	st.b	r7[-2],r8
         fs_g_nav_fast.u16_entry_pos_sel_file=0;
80006d1c:	48 79       	lddpc	r9,80006d38 <fat_alloc_entry_free+0x130>
80006d1e:	30 08       	mov	r8,0
80006d20:	b2 18       	st.h	r9[0x2],r8
         u8_nb_entry = u8_nb_entry_save;
80006d22:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80006d26:	ef 68 ff f4 	st.b	r7[-12],r8
         continue;
      }
   }  // end of while(1)
80006d2a:	c8 2b       	rjmp	80006c2e <fat_alloc_entry_free+0x26>
80006d2c:	c8 1b       	rjmp	80006c2e <fat_alloc_entry_free+0x26>
}
80006d2e:	10 9c       	mov	r12,r8
80006d30:	2f dd       	sub	sp,-12
80006d32:	e3 cd 80 80 	ldm	sp++,r7,pc
80006d36:	00 00       	add	r0,r0
80006d38:	00 00       	add	r0,r0
80006d3a:	11 9c       	ld.ub	r12,r8[0x1]
80006d3c:	80 00       	ld.sh	r0,r0[0x0]
80006d3e:	4f 64       	lddpc	r4,80006f14 <fat_allocfreespace+0x84>
80006d40:	00 00       	add	r0,r0
80006d42:	11 a0       	ld.ub	r0,r8[0x2]
80006d44:	00 00       	add	r0,r0
80006d46:	11 f8       	ld.ub	r8,r8[0x7]
80006d48:	80 00       	ld.sh	r0,r0[0x0]
80006d4a:	6e 90       	ld.w	r0,r7[0x24]
80006d4c:	80 00       	ld.sh	r0,r0[0x0]
80006d4e:	6d 58       	ld.w	r8,r6[0x54]
80006d50:	80 00       	ld.sh	r0,r0[0x0]
80006d52:	71 38       	ld.w	r8,r8[0x4c]
80006d54:	80 00       	ld.sh	r0,r0[0x0]
80006d56:	57 98       	stdsp	sp[0x1e4],r8

80006d58 <fat_garbage_collector_entry>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool fat_garbage_collector_entry( void )
{
80006d58:	eb cd 40 80 	pushm	r7,lr
80006d5c:	1a 97       	mov	r7,sp
80006d5e:	20 ad       	sub	sp,40
   _MEM_TYPE_SLOW_   uint8_t entry[ FS_SIZE_FILE_ENTRY ];
   PTR_CACHE ptr_entry;
   uint16_t u16_pos_old = 0;
80006d60:	30 08       	mov	r8,0
80006d62:	ef 58 ff fc 	st.h	r7[-4],r8
   uint16_t u16_pos_new = 0;
80006d66:	30 08       	mov	r8,0
80006d68:	ef 58 ff fe 	st.h	r7[-2],r8

   // Loop in directory
   while( 1 )
   {
      // Go to old entry list
      fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_old;
80006d6c:	4c 29       	lddpc	r9,80006e74 <fat_garbage_collector_entry+0x11c>
80006d6e:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80006d72:	b2 18       	st.h	r9[0x2],r8
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
80006d74:	f0 1f 00 41 	mcall	80006e78 <fat_garbage_collector_entry+0x120>
80006d78:	18 98       	mov	r8,r12
80006d7a:	ec 18 00 01 	eorl	r8,0x1
80006d7e:	5c 58       	castu.b	r8
80006d80:	c0 90       	breq	80006d92 <fat_garbage_collector_entry+0x3a>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80006d82:	4b f8       	lddpc	r8,80006e7c <fat_garbage_collector_entry+0x124>
80006d84:	11 89       	ld.ub	r9,r8[0x0]
80006d86:	31 a8       	mov	r8,26
80006d88:	f0 09 18 00 	cp.b	r9,r8
80006d8c:	c0 e0       	breq	80006da8 <fat_garbage_collector_entry+0x50>
            return false;
80006d8e:	30 08       	mov	r8,0
80006d90:	c6 e8       	rjmp	80006e6c <fat_garbage_collector_entry+0x114>
         goto fat_garbage_collector_entry_endofdir;
      }

      // Check entry
      ptr_entry = fat_get_ptr_entry();
80006d92:	f0 1f 00 3c 	mcall	80006e80 <fat_garbage_collector_entry+0x128>
80006d96:	18 98       	mov	r8,r12
80006d98:	ef 48 ff f8 	st.w	r7[-8],r8

      if ( FS_ENTRY_END == *ptr_entry )
80006d9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006da0:	11 88       	ld.ub	r8,r8[0x0]
80006da2:	58 08       	cp.w	r8,0
80006da4:	c2 a1       	brne	80006df8 <fat_garbage_collector_entry+0xa0>
80006da6:	c0 28       	rjmp	80006daa <fat_garbage_collector_entry+0x52>
      // Fill internal cache with a sector from directory
      if( !fat_read_dir() )
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
            return false;
         goto fat_garbage_collector_entry_endofdir;
80006da8:	d7 03       	nop
      if ( FS_ENTRY_END == *ptr_entry )
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
80006daa:	4b 39       	lddpc	r9,80006e74 <fat_garbage_collector_entry+0x11c>
80006dac:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80006db0:	b2 18       	st.h	r9[0x2],r8
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
80006db2:	c1 a8       	rjmp	80006de6 <fat_garbage_collector_entry+0x8e>
         {
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
80006db4:	f0 1f 00 31 	mcall	80006e78 <fat_garbage_collector_entry+0x120>
80006db8:	18 98       	mov	r8,r12
80006dba:	ec 18 00 01 	eorl	r8,0x1
80006dbe:	5c 58       	castu.b	r8
80006dc0:	c0 30       	breq	80006dc6 <fat_garbage_collector_entry+0x6e>
               return false;
80006dc2:	30 08       	mov	r8,0
80006dc4:	c5 48       	rjmp	80006e6c <fat_garbage_collector_entry+0x114>
            memset( fat_get_ptr_entry() , 0 , 32 );
80006dc6:	f0 1f 00 2f 	mcall	80006e80 <fat_garbage_collector_entry+0x128>
80006dca:	18 98       	mov	r8,r12
80006dcc:	32 0a       	mov	r10,32
80006dce:	30 0b       	mov	r11,0
80006dd0:	10 9c       	mov	r12,r8
80006dd2:	f0 1f 00 2d 	mcall	80006e84 <fat_garbage_collector_entry+0x12c>
            fat_cache_mark_sector_as_dirty();
80006dd6:	f0 1f 00 2d 	mcall	80006e88 <fat_garbage_collector_entry+0x130>
            fs_g_nav_fast.u16_entry_pos_sel_file++;
80006dda:	4a 78       	lddpc	r8,80006e74 <fat_garbage_collector_entry+0x11c>
80006ddc:	90 18       	ld.sh	r8,r8[0x2]
80006dde:	2f f8       	sub	r8,-1
80006de0:	5c 88       	casts.h	r8
80006de2:	4a 59       	lddpc	r9,80006e74 <fat_garbage_collector_entry+0x11c>
80006de4:	b2 18       	st.h	r9[0x2],r8
      {
         // The entry is free, then it is the end of entry list
fat_garbage_collector_entry_endofdir:
         // Fill empty entry in old list
         fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
         while( fs_g_nav_fast.u16_entry_pos_sel_file != u16_pos_old )
80006de6:	4a 48       	lddpc	r8,80006e74 <fat_garbage_collector_entry+0x11c>
80006de8:	90 18       	ld.sh	r8,r8[0x2]
80006dea:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80006dee:	f0 09 19 00 	cp.h	r9,r8
80006df2:	ce 11       	brne	80006db4 <fat_garbage_collector_entry+0x5c>
               return false;
            memset( fat_get_ptr_entry() , 0 , 32 );
            fat_cache_mark_sector_as_dirty();
            fs_g_nav_fast.u16_entry_pos_sel_file++;
         }
         return true;  // End of garbage
80006df4:	30 18       	mov	r8,1
80006df6:	c3 b8       	rjmp	80006e6c <fat_garbage_collector_entry+0x114>
      }

      if ( FS_ENTRY_DEL != *ptr_entry )
80006df8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006dfc:	11 89       	ld.ub	r9,r8[0x0]
80006dfe:	3e 58       	mov	r8,-27
80006e00:	f0 09 18 00 	cp.b	r9,r8
80006e04:	c2 e0       	breq	80006e60 <fat_garbage_collector_entry+0x108>
      {
         // entry valid
         if( u16_pos_old != u16_pos_new )
80006e06:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80006e0a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80006e0e:	f0 09 19 00 	cp.h	r9,r8
80006e12:	c2 20       	breq	80006e56 <fat_garbage_collector_entry+0xfe>
         {
            // A free space exist then move entry
            memcpy_ram2ram( entry, ptr_entry, FS_SIZE_FILE_ENTRY );
80006e14:	ee c8 00 28 	sub	r8,r7,40
80006e18:	32 0a       	mov	r10,32
80006e1a:	ee fb ff f8 	ld.w	r11,r7[-8]
80006e1e:	10 9c       	mov	r12,r8
80006e20:	f0 1f 00 1b 	mcall	80006e8c <fat_garbage_collector_entry+0x134>
            fs_g_nav_fast.u16_entry_pos_sel_file=u16_pos_new;
80006e24:	49 49       	lddpc	r9,80006e74 <fat_garbage_collector_entry+0x11c>
80006e26:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80006e2a:	b2 18       	st.h	r9[0x2],r8
            // Fill internal cache with a sector from directory
            if( !fat_read_dir() )
80006e2c:	f0 1f 00 13 	mcall	80006e78 <fat_garbage_collector_entry+0x120>
80006e30:	18 98       	mov	r8,r12
80006e32:	ec 18 00 01 	eorl	r8,0x1
80006e36:	5c 58       	castu.b	r8
80006e38:	c0 30       	breq	80006e3e <fat_garbage_collector_entry+0xe6>
               return false;
80006e3a:	30 08       	mov	r8,0
80006e3c:	c1 88       	rjmp	80006e6c <fat_garbage_collector_entry+0x114>
            memcpy_ram2ram( fat_get_ptr_entry(), entry, FS_SIZE_FILE_ENTRY );
80006e3e:	f0 1f 00 11 	mcall	80006e80 <fat_garbage_collector_entry+0x128>
80006e42:	18 98       	mov	r8,r12
80006e44:	ee c9 00 28 	sub	r9,r7,40
80006e48:	32 0a       	mov	r10,32
80006e4a:	12 9b       	mov	r11,r9
80006e4c:	10 9c       	mov	r12,r8
80006e4e:	f0 1f 00 10 	mcall	80006e8c <fat_garbage_collector_entry+0x134>
            fat_cache_mark_sector_as_dirty();
80006e52:	f0 1f 00 0e 	mcall	80006e88 <fat_garbage_collector_entry+0x130>
         }
         u16_pos_new++;
80006e56:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80006e5a:	2f f8       	sub	r8,-1
80006e5c:	ef 58 ff fe 	st.h	r7[-2],r8
      }
      u16_pos_old++;
80006e60:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80006e64:	2f f8       	sub	r8,-1
80006e66:	ef 58 ff fc 	st.h	r7[-4],r8
   }  // end of while(1)
80006e6a:	c8 1b       	rjmp	80006d6c <fat_garbage_collector_entry+0x14>
}
80006e6c:	10 9c       	mov	r12,r8
80006e6e:	2f 6d       	sub	sp,-40
80006e70:	e3 cd 80 80 	ldm	sp++,r7,pc
80006e74:	00 00       	add	r0,r0
80006e76:	11 9c       	ld.ub	r12,r8[0x1]
80006e78:	80 00       	ld.sh	r0,r0[0x0]
80006e7a:	4f 64       	lddpc	r4,80007050 <fat_allocfreespace+0x1c0>
80006e7c:	00 00       	add	r0,r0
80006e7e:	11 a0       	ld.ub	r0,r8[0x2]
80006e80:	80 00       	ld.sh	r0,r0[0x0]
80006e82:	57 98       	stdsp	sp[0x1e4],r8
80006e84:	80 00       	ld.sh	r0,r0[0x0]
80006e86:	d9 fa       	popm	r0-r11,pc,r12=0
80006e88:	80 00       	ld.sh	r0,r0[0x0]
80006e8a:	58 b0       	cp.w	r0,11
80006e8c:	80 00       	ld.sh	r0,r0[0x0]
80006e8e:	d8 b2       	popm	r0-r7,r10,pc

80006e90 <fat_allocfreespace>:
//!   fs_g_seg.u32_addr          Return the first cluster value of the new cluster list
//!   fs_g_seg.u32_size_or_pos   The number of sector remaining (no allocated sectors, because disk fragmented or disk full)
//! @endverbatim
//!
bool  fat_allocfreespace( void )
{
80006e90:	eb cd 40 80 	pushm	r7,lr
80006e94:	1a 97       	mov	r7,sp
80006e96:	20 1d       	sub	sp,4
   // Flag to signal the first step which search the first free cluster of the new list
   bool first_cluster_free_is_found = false;
80006e98:	30 08       	mov	r8,0
80006e9a:	ef 68 ff fe 	st.b	r7[-2],r8
   // If true then use a quick procedure but don't scan all FAT else use a slow procedure but scan all FAT
   bool b_quick_find = true;
80006e9e:	30 18       	mov	r8,1
80006ea0:	ef 68 ff ff 	st.b	r7[-1],r8

   if( Is_fat32 )
80006ea4:	4e f8       	lddpc	r8,80007060 <fat_allocfreespace+0x1d0>
80006ea6:	11 89       	ld.ub	r9,r8[0x0]
80006ea8:	30 38       	mov	r8,3
80006eaa:	f0 09 18 00 	cp.b	r9,r8
80006eae:	c0 b1       	brne	80006ec4 <fat_allocfreespace+0x34>
   {
      // Clear info about free space
      if( !fat_write_fat32_FSInfo( 0xFFFFFFFF ))
80006eb0:	3f fc       	mov	r12,-1
80006eb2:	f0 1f 00 6d 	mcall	80007064 <fat_allocfreespace+0x1d4>
80006eb6:	18 98       	mov	r8,r12
80006eb8:	ec 18 00 01 	eorl	r8,0x1
80006ebc:	5c 58       	castu.b	r8
80006ebe:	c0 30       	breq	80006ec4 <fat_allocfreespace+0x34>
         return false;
80006ec0:	30 08       	mov	r8,0
80006ec2:	cc b8       	rjmp	80007058 <fat_allocfreespace+0x1c8>
   }

   if( 0xFF == MSB0(fs_g_seg.u32_addr) )
80006ec4:	4e 98       	lddpc	r8,80007068 <fat_allocfreespace+0x1d8>
80006ec6:	11 89       	ld.ub	r9,r8[0x0]
80006ec8:	3f f8       	mov	r8,-1
80006eca:	f0 09 18 00 	cp.b	r9,r8
80006ece:	c0 51       	brne	80006ed8 <fat_allocfreespace+0x48>
   {
fat_allocfreespace_start:
      // New cluster list, then research at the beginning of FAT
      fs_g_cluster.u32_pos = 2;
80006ed0:	4e 78       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80006ed2:	30 29       	mov	r9,2
80006ed4:	91 09       	st.w	r8[0x0],r9
80006ed6:	c0 78       	rjmp	80006ee4 <fat_allocfreespace+0x54>
   }else{
      // Continue the cluster list then start after the end of the cluster list
      fs_g_cluster.u32_pos = fs_g_seg.u32_addr+1;
80006ed8:	4e 48       	lddpc	r8,80007068 <fat_allocfreespace+0x1d8>
80006eda:	70 08       	ld.w	r8,r8[0x0]
80006edc:	f0 c9 ff ff 	sub	r9,r8,-1
80006ee0:	4e 38       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80006ee2:	91 09       	st.w	r8[0x0],r9
   }

   fat_clear_info_fat_mod();
80006ee4:	f0 1f 00 63 	mcall	80007070 <fat_allocfreespace+0x1e0>

   // Read ALL FAT1
   for(
80006ee8:	c9 78       	rjmp	80007016 <fat_allocfreespace+0x186>
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
   {
      // Get the value of the cluster
      if ( !fat_cluster_val( FS_CLUST_VAL_READ ) )
80006eea:	30 0c       	mov	r12,0
80006eec:	f0 1f 00 62 	mcall	80007074 <fat_allocfreespace+0x1e4>
80006ef0:	18 98       	mov	r8,r12
80006ef2:	ec 18 00 01 	eorl	r8,0x1
80006ef6:	5c 58       	castu.b	r8
80006ef8:	c0 30       	breq	80006efe <fat_allocfreespace+0x6e>
         return false;
80006efa:	30 08       	mov	r8,0
80006efc:	ca e8       	rjmp	80007058 <fat_allocfreespace+0x1c8>

      if ( 0 == fs_g_cluster.u32_val )
80006efe:	4d c8       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80006f00:	70 18       	ld.w	r8,r8[0x4]
80006f02:	58 08       	cp.w	r8,0
80006f04:	c7 11       	brne	80006fe6 <fat_allocfreespace+0x156>
      {
         // A free cluster is found
         fs_g_cluster.u32_val = fs_g_cluster.u32_pos;    // value of the cluster is the new free cluster
80006f06:	4d a8       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80006f08:	70 09       	ld.w	r9,r8[0x0]
80006f0a:	4d 98       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80006f0c:	91 19       	st.w	r8[0x4],r9
         if( true == first_cluster_free_is_found )
80006f0e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006f12:	30 08       	mov	r8,0
80006f14:	f0 09 18 00 	cp.b	r9,r8
80006f18:	c1 10       	breq	80006f3a <fat_allocfreespace+0xaa>
         {
            // Link the new cluster with previous cluster
            fs_g_cluster.u32_pos--;                      // select the previous cluster
80006f1a:	4d 58       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80006f1c:	70 08       	ld.w	r8,r8[0x0]
80006f1e:	f0 c9 00 01 	sub	r9,r8,1
80006f22:	4d 38       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80006f24:	91 09       	st.w	r8[0x0],r9
            if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80006f26:	30 1c       	mov	r12,1
80006f28:	f0 1f 00 53 	mcall	80007074 <fat_allocfreespace+0x1e4>
80006f2c:	18 98       	mov	r8,r12
80006f2e:	ec 18 00 01 	eorl	r8,0x1
80006f32:	5c 58       	castu.b	r8
80006f34:	c3 20       	breq	80006f98 <fat_allocfreespace+0x108>
               return false;
80006f36:	30 08       	mov	r8,0
80006f38:	c9 08       	rjmp	80007058 <fat_allocfreespace+0x1c8>
         }
         else
         {
            // It is the first cluster of the new list
            first_cluster_free_is_found = true;
80006f3a:	30 18       	mov	r8,1
80006f3c:	ef 68 ff fe 	st.b	r7[-2],r8

            if( 0xFF != MSB0(fs_g_seg.u32_addr) )
80006f40:	4c a8       	lddpc	r8,80007068 <fat_allocfreespace+0x1d8>
80006f42:	11 89       	ld.ub	r9,r8[0x0]
80006f44:	3f f8       	mov	r8,-1
80006f46:	f0 09 18 00 	cp.b	r9,r8
80006f4a:	c2 30       	breq	80006f90 <fat_allocfreespace+0x100>
            {
               // Link this new cluster with the current cluster list
               // Select the last cluster of the current list
               if( 0 == fs_g_seg.u32_addr )
80006f4c:	4c 78       	lddpc	r8,80007068 <fat_allocfreespace+0x1d8>
80006f4e:	70 08       	ld.w	r8,r8[0x0]
80006f50:	58 08       	cp.w	r8,0
80006f52:	c1 11       	brne	80006f74 <fat_allocfreespace+0xe4>
               {  // The current cluster list is the cluster list of root directory
                  if( FS_TYPE_FAT_32 != fs_g_nav_fast.u8_type_fat )
80006f54:	4c 38       	lddpc	r8,80007060 <fat_allocfreespace+0x1d0>
80006f56:	11 89       	ld.ub	r9,r8[0x0]
80006f58:	30 38       	mov	r8,3
80006f5a:	f0 09 18 00 	cp.b	r9,r8
80006f5e:	c0 60       	breq	80006f6a <fat_allocfreespace+0xda>
                  {
                     // Impossible to increment ROOT DIR size of FAT12 or FAT16
                     fs_g_status = FS_ERR_NO_FREE_SPACE;
80006f60:	4c 69       	lddpc	r9,80007078 <fat_allocfreespace+0x1e8>
80006f62:	31 b8       	mov	r8,27
80006f64:	b2 88       	st.b	r9[0x0],r8
                     return false;
80006f66:	30 08       	mov	r8,0
80006f68:	c7 88       	rjmp	80007058 <fat_allocfreespace+0x1c8>
                  }
                  fs_g_cluster.u32_pos = fs_g_nav.rootdir.u32_cluster;
80006f6a:	4c 58       	lddpc	r8,8000707c <fat_allocfreespace+0x1ec>
80006f6c:	70 69       	ld.w	r9,r8[0x18]
80006f6e:	4c 08       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80006f70:	91 09       	st.w	r8[0x0],r9
80006f72:	c0 58       	rjmp	80006f7c <fat_allocfreespace+0xec>
               }
               else
               {
                  fs_g_cluster.u32_pos = fs_g_seg.u32_addr;
80006f74:	4b d8       	lddpc	r8,80007068 <fat_allocfreespace+0x1d8>
80006f76:	70 09       	ld.w	r9,r8[0x0]
80006f78:	4b d8       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80006f7a:	91 09       	st.w	r8[0x0],r9
               }
               if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80006f7c:	30 1c       	mov	r12,1
80006f7e:	f0 1f 00 3e 	mcall	80007074 <fat_allocfreespace+0x1e4>
80006f82:	18 98       	mov	r8,r12
80006f84:	ec 18 00 01 	eorl	r8,0x1
80006f88:	5c 58       	castu.b	r8
80006f8a:	c0 30       	breq	80006f90 <fat_allocfreespace+0x100>
                  return false;
80006f8c:	30 08       	mov	r8,0
80006f8e:	c6 58       	rjmp	80007058 <fat_allocfreespace+0x1c8>
            }  // else no writing the first cluster value in FAT because no current cluster list
            fs_g_seg.u32_addr = fs_g_cluster.u32_val;    // save the first cluster value
80006f90:	4b 78       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80006f92:	70 19       	ld.w	r9,r8[0x4]
80006f94:	4b 58       	lddpc	r8,80007068 <fat_allocfreespace+0x1d8>
80006f96:	91 09       	st.w	r8[0x0],r9
         }

         // At the new cluster position, set the flag end of list
         fs_g_cluster.u32_pos = fs_g_cluster.u32_val;    // Select the new cluster
80006f98:	4b 58       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80006f9a:	70 19       	ld.w	r9,r8[0x4]
80006f9c:	4b 48       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80006f9e:	91 09       	st.w	r8[0x0],r9
         fs_g_cluster.u32_val = FS_CLUST_VAL_EOL;        // Cluster value is the flag end of list
80006fa0:	4b 38       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80006fa2:	e0 69 ff ff 	mov	r9,65535
80006fa6:	ea 19 0f ff 	orh	r9,0xfff
80006faa:	91 19       	st.w	r8[0x4],r9
         if ( !fat_cluster_val( FS_CLUST_VAL_WRITE ) )
80006fac:	30 1c       	mov	r12,1
80006fae:	f0 1f 00 32 	mcall	80007074 <fat_allocfreespace+0x1e4>
80006fb2:	18 98       	mov	r8,r12
80006fb4:	ec 18 00 01 	eorl	r8,0x1
80006fb8:	5c 58       	castu.b	r8
80006fba:	c0 30       	breq	80006fc0 <fat_allocfreespace+0x130>
            return false;
80006fbc:	30 08       	mov	r8,0
80006fbe:	c4 d8       	rjmp	80007058 <fat_allocfreespace+0x1c8>

         // Compute the remaining sectors
         if ( fs_g_seg.u32_size_or_pos <= fs_g_nav.u8_BPB_SecPerClus )
80006fc0:	4a a8       	lddpc	r8,80007068 <fat_allocfreespace+0x1d8>
80006fc2:	70 19       	ld.w	r9,r8[0x4]
80006fc4:	4a e8       	lddpc	r8,8000707c <fat_allocfreespace+0x1ec>
80006fc6:	11 98       	ld.ub	r8,r8[0x1]
80006fc8:	10 39       	cp.w	r9,r8
80006fca:	e0 8b 00 06 	brhi	80006fd6 <fat_allocfreespace+0x146>
         {
            fs_g_seg.u32_size_or_pos = 0; // All space found
80006fce:	4a 78       	lddpc	r8,80007068 <fat_allocfreespace+0x1d8>
80006fd0:	30 09       	mov	r9,0
80006fd2:	91 19       	st.w	r8[0x4],r9
            break;                        // Stop loop
80006fd4:	c2 a8       	rjmp	80007028 <fat_allocfreespace+0x198>
         }
         fs_g_seg.u32_size_or_pos -= fs_g_nav.u8_BPB_SecPerClus;
80006fd6:	4a 58       	lddpc	r8,80007068 <fat_allocfreespace+0x1d8>
80006fd8:	70 19       	ld.w	r9,r8[0x4]
80006fda:	4a 98       	lddpc	r8,8000707c <fat_allocfreespace+0x1ec>
80006fdc:	11 98       	ld.ub	r8,r8[0x1]
80006fde:	10 19       	sub	r9,r8
80006fe0:	4a 28       	lddpc	r8,80007068 <fat_allocfreespace+0x1d8>
80006fe2:	91 19       	st.w	r8[0x4],r9
80006fe4:	c1 38       	rjmp	8000700a <fat_allocfreespace+0x17a>
      }
      else
      {
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
80006fe6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80006fea:	30 08       	mov	r8,0
80006fec:	f0 09 18 00 	cp.b	r9,r8
80006ff0:	c1 b1       	brne	80007026 <fat_allocfreespace+0x196>
         }
         else
         {
            // It is the first step to search the first free cluster
            // then ignore this cluster no free and continue search
            if( b_quick_find )
80006ff2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80006ff6:	30 08       	mov	r8,0
80006ff8:	f0 09 18 00 	cp.b	r9,r8
80006ffc:	c0 70       	breq	8000700a <fat_allocfreespace+0x17a>
            {
               fs_g_cluster.u32_pos += 500;
80006ffe:	49 c8       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80007000:	70 08       	ld.w	r8,r8[0x0]
80007002:	f0 c9 fe 0c 	sub	r9,r8,-500
80007006:	49 a8       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80007008:	91 09       	st.w	r8[0x0],r9
   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
   ;     fs_g_cluster.u32_pos++ )
8000700a:	49 98       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
8000700c:	70 08       	ld.w	r8,r8[0x0]
8000700e:	f0 c9 ff ff 	sub	r9,r8,-1
80007012:	49 78       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80007014:	91 09       	st.w	r8[0x0],r9

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
   ;     fs_g_cluster.u32_pos < fs_g_nav.u32_CountofCluster
80007016:	49 68       	lddpc	r8,8000706c <fat_allocfreespace+0x1dc>
80007018:	70 09       	ld.w	r9,r8[0x0]
8000701a:	49 98       	lddpc	r8,8000707c <fat_allocfreespace+0x1ec>
8000701c:	70 38       	ld.w	r8,r8[0xc]
   }

   fat_clear_info_fat_mod();

   // Read ALL FAT1
   for(
8000701e:	10 39       	cp.w	r9,r8
80007020:	fe 93 ff 65 	brlo	80006eea <fat_allocfreespace+0x5a>
80007024:	c0 28       	rjmp	80007028 <fat_allocfreespace+0x198>
         // The next cluster is not free
         if( true == first_cluster_free_is_found )
         {
            // To have a segment memory continue, the cluster list must be continue
            // then stop allocation
            break;
80007026:	d7 03       	nop
         }
      }
   }

   // End of alloc
   if( false == first_cluster_free_is_found )
80007028:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000702c:	ec 18 00 01 	eorl	r8,0x1
80007030:	5c 58       	castu.b	r8
80007032:	c1 00       	breq	80007052 <fat_allocfreespace+0x1c2>
   {
      if( b_quick_find )
80007034:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007038:	30 08       	mov	r8,0
8000703a:	f0 09 18 00 	cp.b	r9,r8
8000703e:	c0 50       	breq	80007048 <fat_allocfreespace+0x1b8>
      {
         // Retry in normal mode to scan all FAT (= no quick mode)
         b_quick_find = false;
80007040:	30 08       	mov	r8,0
80007042:	ef 68 ff ff 	st.b	r7[-1],r8
         goto fat_allocfreespace_start;
80007046:	c4 5b       	rjmp	80006ed0 <fat_allocfreespace+0x40>
      }
      fs_g_status = FS_ERR_NO_FREE_SPACE; // NO FREE CLUSTER FIND
80007048:	48 c9       	lddpc	r9,80007078 <fat_allocfreespace+0x1e8>
8000704a:	31 b8       	mov	r8,27
8000704c:	b2 88       	st.b	r9[0x0],r8
      return false;
8000704e:	30 08       	mov	r8,0
80007050:	c0 48       	rjmp	80007058 <fat_allocfreespace+0x1c8>
   }

   return fat_update_fat2();
80007052:	f0 1f 00 0c 	mcall	80007080 <fat_allocfreespace+0x1f0>
80007056:	18 98       	mov	r8,r12
}
80007058:	10 9c       	mov	r12,r8
8000705a:	2f fd       	sub	sp,-4
8000705c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007060:	00 00       	add	r0,r0
80007062:	11 9c       	ld.ub	r12,r8[0x1]
80007064:	80 00       	ld.sh	r0,r0[0x0]
80007066:	62 a8       	ld.w	r8,r1[0x28]
80007068:	00 00       	add	r0,r0
8000706a:	11 f8       	ld.ub	r8,r8[0x7]
8000706c:	00 00       	add	r0,r0
8000706e:	11 f0       	ld.ub	r0,r8[0x7]
80007070:	80 00       	ld.sh	r0,r0[0x0]
80007072:	70 84       	ld.w	r4,r8[0x20]
80007074:	80 00       	ld.sh	r0,r0[0x0]
80007076:	41 30       	lddsp	r0,sp[0x4c]
80007078:	00 00       	add	r0,r0
8000707a:	11 a0       	ld.ub	r0,r8[0x2]
8000707c:	00 00       	add	r0,r0
8000707e:	11 50       	ld.sh	r0,--r8
80007080:	80 00       	ld.sh	r0,r0[0x0]
80007082:	70 a4       	ld.w	r4,r8[0x28]

80007084 <fat_clear_info_fat_mod>:

#if (FS_LEVEL_FEATURES > FSFEATURE_READ)
//! This function clears the cache information about FAT modifications
//!
void  fat_clear_info_fat_mod( void )
{
80007084:	eb cd 40 80 	pushm	r7,lr
80007088:	1a 97       	mov	r7,sp
   fs_g_u32_first_mod_fat = 0xFFFFFFFF;
8000708a:	48 58       	lddpc	r8,8000709c <fat_clear_info_fat_mod+0x18>
8000708c:	3f f9       	mov	r9,-1
8000708e:	91 09       	st.w	r8[0x0],r9
   fs_g_u32_last_mod_fat = 0;
80007090:	48 48       	lddpc	r8,800070a0 <fat_clear_info_fat_mod+0x1c>
80007092:	30 09       	mov	r9,0
80007094:	91 09       	st.w	r8[0x0],r9
}
80007096:	e3 cd 80 80 	ldm	sp++,r7,pc
8000709a:	00 00       	add	r0,r0
8000709c:	00 00       	add	r0,r0
8000709e:	11 84       	ld.ub	r4,r8[0x0]
800070a0:	00 00       	add	r0,r0
800070a2:	0f 4c       	ld.w	r12,--r7

800070a4 <fat_update_fat2>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
800070a4:	eb cd 40 80 	pushm	r7,lr
800070a8:	1a 97       	mov	r7,sp
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
800070aa:	c2 f8       	rjmp	80007108 <fat_update_fat2+0x64>
  {
     // Compute the modification position of FAT 1
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + fs_g_u32_first_mod_fat;
800070ac:	49 d8       	lddpc	r8,80007120 <fat_update_fat2+0x7c>
800070ae:	70 49       	ld.w	r9,r8[0x10]
800070b0:	49 d8       	lddpc	r8,80007124 <fat_update_fat2+0x80>
800070b2:	70 08       	ld.w	r8,r8[0x0]
800070b4:	10 09       	add	r9,r8
800070b6:	49 d8       	lddpc	r8,80007128 <fat_update_fat2+0x84>
800070b8:	91 09       	st.w	r8[0x0],r9
     // Read FAT1
      if( !fat_cache_read_sector( true ))
800070ba:	30 1c       	mov	r12,1
800070bc:	f0 1f 00 1c 	mcall	8000712c <fat_update_fat2+0x88>
800070c0:	18 98       	mov	r8,r12
800070c2:	ec 18 00 01 	eorl	r8,0x1
800070c6:	5c 58       	castu.b	r8
800070c8:	c0 30       	breq	800070ce <fat_update_fat2+0x2a>
         return false;
800070ca:	30 08       	mov	r8,0
800070cc:	c2 68       	rjmp	80007118 <fat_update_fat2+0x74>
     // Compute the modification position of FAT 2
     fs_gu32_addrsector = fs_g_nav.u32_ptr_fat + (fs_g_u32_first_mod_fat + fs_g_nav.u32_fat_size);
800070ce:	49 58       	lddpc	r8,80007120 <fat_update_fat2+0x7c>
800070d0:	70 49       	ld.w	r9,r8[0x10]
800070d2:	49 48       	lddpc	r8,80007120 <fat_update_fat2+0x7c>
800070d4:	70 1a       	ld.w	r10,r8[0x4]
800070d6:	49 48       	lddpc	r8,80007124 <fat_update_fat2+0x80>
800070d8:	70 08       	ld.w	r8,r8[0x0]
800070da:	f4 08 00 08 	add	r8,r10,r8
800070de:	10 09       	add	r9,r8
800070e0:	49 28       	lddpc	r8,80007128 <fat_update_fat2+0x84>
800070e2:	91 09       	st.w	r8[0x0],r9
     // Init the sector FAT2 with the previous sector of the FAT1
     if( !fat_cache_read_sector( false ))
800070e4:	30 0c       	mov	r12,0
800070e6:	f0 1f 00 12 	mcall	8000712c <fat_update_fat2+0x88>
800070ea:	18 98       	mov	r8,r12
800070ec:	ec 18 00 01 	eorl	r8,0x1
800070f0:	5c 58       	castu.b	r8
800070f2:	c0 30       	breq	800070f8 <fat_update_fat2+0x54>
         return false;
800070f4:	30 08       	mov	r8,0
800070f6:	c1 18       	rjmp	80007118 <fat_update_fat2+0x74>
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
800070f8:	f0 1f 00 0e 	mcall	80007130 <fat_update_fat2+0x8c>
     fs_g_u32_first_mod_fat++;
800070fc:	48 a8       	lddpc	r8,80007124 <fat_update_fat2+0x80>
800070fe:	70 08       	ld.w	r8,r8[0x0]
80007100:	f0 c9 ff ff 	sub	r9,r8,-1
80007104:	48 88       	lddpc	r8,80007124 <fat_update_fat2+0x80>
80007106:	91 09       	st.w	r8[0x0],r9
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  fat_update_fat2( void )
{
  while( fs_g_u32_first_mod_fat <= fs_g_u32_last_mod_fat )
80007108:	48 78       	lddpc	r8,80007124 <fat_update_fat2+0x80>
8000710a:	70 09       	ld.w	r9,r8[0x0]
8000710c:	48 a8       	lddpc	r8,80007134 <fat_update_fat2+0x90>
8000710e:	70 08       	ld.w	r8,r8[0x0]
80007110:	10 39       	cp.w	r9,r8
80007112:	fe 98 ff cd 	brls	800070ac <fat_update_fat2+0x8>
         return false;
     // Flag the sector FAT2 like modify
     fat_cache_mark_sector_as_dirty();
     fs_g_u32_first_mod_fat++;
  }
  return true;
80007116:	30 18       	mov	r8,1
}
80007118:	10 9c       	mov	r12,r8
8000711a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000711e:	00 00       	add	r0,r0
80007120:	00 00       	add	r0,r0
80007122:	11 50       	ld.sh	r0,--r8
80007124:	00 00       	add	r0,r0
80007126:	11 84       	ld.ub	r4,r8[0x0]
80007128:	00 00       	add	r0,r0
8000712a:	0f 0c       	ld.w	r12,r7++
8000712c:	80 00       	ld.sh	r0,r0[0x0]
8000712e:	57 c0       	stdsp	sp[0x1f0],r0
80007130:	80 00       	ld.sh	r0,r0[0x0]
80007132:	58 b0       	cp.w	r0,11
80007134:	00 00       	add	r0,r0
80007136:	0f 4c       	ld.w	r12,--r7

80007138 <fat_clear_cluster>:
//! IN :
//!   fs_g_seg.u32_addr          Cluster value to clear
//! @endverbatim
//!
bool  fat_clear_cluster( void )
{
80007138:	eb cd 40 80 	pushm	r7,lr
8000713c:	1a 97       	mov	r7,sp
8000713e:	20 1d       	sub	sp,4
   uint8_t u8_loop;

   // Compute the cluster sector address
   fs_g_seg.u32_size_or_pos  = 0;   // Select the beginning of cluster
80007140:	4a 48       	lddpc	r8,800071d0 <fat_clear_cluster+0x98>
80007142:	30 09       	mov	r9,0
80007144:	91 19       	st.w	r8[0x4],r9
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
80007146:	30 0b       	mov	r11,0
80007148:	30 2c       	mov	r12,2
8000714a:	f0 1f 00 23 	mcall	800071d4 <fat_clear_cluster+0x9c>
8000714e:	18 98       	mov	r8,r12
80007150:	ec 18 00 01 	eorl	r8,0x1
80007154:	5c 58       	castu.b	r8
80007156:	c0 30       	breq	8000715c <fat_clear_cluster+0x24>
      return false;
80007158:	30 08       	mov	r8,0
8000715a:	c3 68       	rjmp	800071c6 <fat_clear_cluster+0x8e>

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
8000715c:	49 d8       	lddpc	r8,800071d0 <fat_clear_cluster+0x98>
8000715e:	70 09       	ld.w	r9,r8[0x0]
80007160:	49 e8       	lddpc	r8,800071d8 <fat_clear_cluster+0xa0>
80007162:	11 98       	ld.ub	r8,r8[0x1]
80007164:	f2 08 00 08 	add	r8,r9,r8
80007168:	f0 c9 00 01 	sub	r9,r8,1
8000716c:	49 c8       	lddpc	r8,800071dc <fat_clear_cluster+0xa4>
8000716e:	91 09       	st.w	r8[0x0],r9
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
80007170:	30 08       	mov	r8,0
80007172:	ef 68 ff ff 	st.b	r7[-1],r8
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
80007176:	c2 08       	rjmp	800071b6 <fat_clear_cluster+0x7e>
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
   {
      // Update internal cache with cluster sector information but don't read data from memory
      if( !fat_cache_read_sector( false ))
80007178:	30 0c       	mov	r12,0
8000717a:	f0 1f 00 1a 	mcall	800071e0 <fat_clear_cluster+0xa8>
8000717e:	18 98       	mov	r8,r12
80007180:	ec 18 00 01 	eorl	r8,0x1
80007184:	5c 58       	castu.b	r8
80007186:	c0 30       	breq	8000718c <fat_clear_cluster+0x54>
         return false;
80007188:	30 08       	mov	r8,0
8000718a:	c1 e8       	rjmp	800071c6 <fat_clear_cluster+0x8e>

      if(0 == u8_loop)
8000718c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007190:	30 08       	mov	r8,0
80007192:	f0 09 18 00 	cp.b	r9,r8
80007196:	c0 31       	brne	8000719c <fat_clear_cluster+0x64>
      {  // Clean internal cache (just for the sector)
         fat_cache_clear();
80007198:	f0 1f 00 13 	mcall	800071e4 <fat_clear_cluster+0xac>
      }
      fat_cache_mark_sector_as_dirty();
8000719c:	f0 1f 00 13 	mcall	800071e8 <fat_clear_cluster+0xb0>
      fs_gu32_addrsector--;         // go to previous sector
800071a0:	48 f8       	lddpc	r8,800071dc <fat_clear_cluster+0xa4>
800071a2:	70 08       	ld.w	r8,r8[0x0]
800071a4:	f0 c9 00 01 	sub	r9,r8,1
800071a8:	48 d8       	lddpc	r8,800071dc <fat_clear_cluster+0xa4>
800071aa:	91 09       	st.w	r8[0x0],r9

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
   ;     u8_loop++ )
800071ac:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800071b0:	2f f8       	sub	r8,-1
800071b2:	ef 68 ff ff 	st.b	r7[-1],r8
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
   ;     fs_g_nav.u8_BPB_SecPerClus != u8_loop
800071b6:	48 98       	lddpc	r8,800071d8 <fat_clear_cluster+0xa0>
800071b8:	11 98       	ld.ub	r8,r8[0x1]
   if( !fat_cluster_list( FS_CLUST_ACT_ONE, false ))
      return false;

   // Loop in the cluster (start at the end of cluster)
   fs_gu32_addrsector = fs_g_seg.u32_addr + (fs_g_nav.u8_BPB_SecPerClus -1);
   for(  u8_loop = 0
800071ba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800071be:	f0 09 18 00 	cp.b	r9,r8
800071c2:	cd b1       	brne	80007178 <fat_clear_cluster+0x40>
         fat_cache_clear();
      }
      fat_cache_mark_sector_as_dirty();
      fs_gu32_addrsector--;         // go to previous sector
   }
   return true;
800071c4:	30 18       	mov	r8,1
}
800071c6:	10 9c       	mov	r12,r8
800071c8:	2f fd       	sub	sp,-4
800071ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800071ce:	00 00       	add	r0,r0
800071d0:	00 00       	add	r0,r0
800071d2:	11 f8       	ld.ub	r8,r8[0x7]
800071d4:	80 00       	ld.sh	r0,r0[0x0]
800071d6:	3c 84       	mov	r4,-56
800071d8:	00 00       	add	r0,r0
800071da:	11 50       	ld.sh	r0,--r8
800071dc:	00 00       	add	r0,r0
800071de:	0f 0c       	ld.w	r12,r7++
800071e0:	80 00       	ld.sh	r0,r0[0x0]
800071e2:	57 c0       	stdsp	sp[0x1f0],r0
800071e4:	80 00       	ld.sh	r0,r0[0x0]
800071e6:	58 90       	cp.w	r0,9
800071e8:	80 00       	ld.sh	r0,r0[0x0]
800071ea:	58 b0       	cp.w	r0,11

800071ec <file_open>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_open( uint8_t fopen_mode )
{
800071ec:	eb cd 40 80 	pushm	r7,lr
800071f0:	1a 97       	mov	r7,sp
800071f2:	20 1d       	sub	sp,4
800071f4:	18 98       	mov	r8,r12
800071f6:	ef 68 ff fc 	st.b	r7[-4],r8
   if( !fat_check_mount_select_noopen())
800071fa:	f0 1f 00 31 	mcall	800072bc <file_open+0xd0>
800071fe:	18 98       	mov	r8,r12
80007200:	ec 18 00 01 	eorl	r8,0x1
80007204:	5c 58       	castu.b	r8
80007206:	c0 30       	breq	8000720c <file_open+0x20>
      return false;
80007208:	30 08       	mov	r8,0
8000720a:	c5 58       	rjmp	800072b4 <file_open+0xc8>

   if( !fat_check_is_file())
8000720c:	f0 1f 00 2d 	mcall	800072c0 <file_open+0xd4>
80007210:	18 98       	mov	r8,r12
80007212:	ec 18 00 01 	eorl	r8,0x1
80007216:	5c 58       	castu.b	r8
80007218:	c0 30       	breq	8000721e <file_open+0x32>
      return false;
8000721a:	30 08       	mov	r8,0
8000721c:	c4 c8       	rjmp	800072b4 <file_open+0xc8>

   if(FOPEN_WRITE_ACCESS & fopen_mode)
8000721e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007222:	e2 18 00 02 	andl	r8,0x2,COH
80007226:	c2 30       	breq	8000726c <file_open+0x80>
   {
      if( !fat_check_nav_access_file( true ) )
80007228:	30 1c       	mov	r12,1
8000722a:	f0 1f 00 27 	mcall	800072c4 <file_open+0xd8>
8000722e:	18 98       	mov	r8,r12
80007230:	ec 18 00 01 	eorl	r8,0x1
80007234:	5c 58       	castu.b	r8
80007236:	c0 30       	breq	8000723c <file_open+0x50>
         return false;
80007238:	30 08       	mov	r8,0
8000723a:	c3 d8       	rjmp	800072b4 <file_open+0xc8>
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if (FS_ATTR_READ_ONLY & fs_g_nav_entry.u8_attr)
8000723c:	4a 38       	lddpc	r8,800072c8 <file_open+0xdc>
8000723e:	11 a8       	ld.ub	r8,r8[0x2]
80007240:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80007244:	5c 58       	castu.b	r8
80007246:	c0 60       	breq	80007252 <file_open+0x66>
      {
         fs_g_status = FS_ERR_READ_ONLY;  // File is read only
80007248:	4a 19       	lddpc	r9,800072cc <file_open+0xe0>
8000724a:	31 58       	mov	r8,21
8000724c:	b2 88       	st.b	r9[0x0],r8
         return false;
8000724e:	30 08       	mov	r8,0
80007250:	c3 28       	rjmp	800072b4 <file_open+0xc8>
      }
      if( mem_wr_protect( fs_g_nav.u8_lun  ))
80007252:	4a 08       	lddpc	r8,800072d0 <file_open+0xe4>
80007254:	11 88       	ld.ub	r8,r8[0x0]
80007256:	10 9c       	mov	r12,r8
80007258:	f0 1f 00 1f 	mcall	800072d4 <file_open+0xe8>
8000725c:	18 98       	mov	r8,r12
8000725e:	58 08       	cp.w	r8,0
80007260:	c1 00       	breq	80007280 <file_open+0x94>
      {
         fs_g_status = FS_LUN_WP;  // Disk read only
80007262:	49 b9       	lddpc	r9,800072cc <file_open+0xe0>
80007264:	31 48       	mov	r8,20
80007266:	b2 88       	st.b	r9[0x0],r8
         return false;
80007268:	30 08       	mov	r8,0
8000726a:	c2 58       	rjmp	800072b4 <file_open+0xc8>
      return false;
#endif  // FS_LEVEL_FEATURES
   }
   else
   {
      if( !fat_check_nav_access_file( false ) )
8000726c:	30 0c       	mov	r12,0
8000726e:	f0 1f 00 16 	mcall	800072c4 <file_open+0xd8>
80007272:	18 98       	mov	r8,r12
80007274:	ec 18 00 01 	eorl	r8,0x1
80007278:	5c 58       	castu.b	r8
8000727a:	c0 30       	breq	80007280 <file_open+0x94>
         return false;
8000727c:	30 08       	mov	r8,0
8000727e:	c1 b8       	rjmp	800072b4 <file_open+0xc8>
   }

   if(FOPEN_CLEAR_SIZE & fopen_mode)
80007280:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007284:	e2 18 00 04 	andl	r8,0x4,COH
80007288:	c0 40       	breq	80007290 <file_open+0xa4>
   {
      fs_g_nav_entry.u32_size    = 0;     // The size is null
8000728a:	49 08       	lddpc	r8,800072c8 <file_open+0xdc>
8000728c:	30 09       	mov	r9,0
8000728e:	91 29       	st.w	r8[0x8],r9
   }
   if(FOPEN_CLEAR_PTR & fopen_mode)
80007290:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007294:	e2 18 00 08 	andl	r8,0x8,COH
80007298:	c0 50       	breq	800072a2 <file_open+0xb6>
   {
      fs_g_nav_entry.u32_pos_in_file = 0;
8000729a:	48 c8       	lddpc	r8,800072c8 <file_open+0xdc>
8000729c:	30 09       	mov	r9,0
8000729e:	91 39       	st.w	r8[0xc],r9
800072a0:	c0 58       	rjmp	800072aa <file_open+0xbe>
   }
   else
   {  // Go to at the end of file
      fs_g_nav_entry.u32_pos_in_file = fs_g_nav_entry.u32_size;
800072a2:	48 a8       	lddpc	r8,800072c8 <file_open+0xdc>
800072a4:	70 29       	ld.w	r9,r8[0x8]
800072a6:	48 98       	lddpc	r8,800072c8 <file_open+0xdc>
800072a8:	91 39       	st.w	r8[0xc],r9
   }
   fs_g_nav_entry.u8_open_mode = fopen_mode;
800072aa:	48 89       	lddpc	r9,800072c8 <file_open+0xdc>
800072ac:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800072b0:	b2 88       	st.b	r9[0x0],r8
   return true;
800072b2:	30 18       	mov	r8,1
}
800072b4:	10 9c       	mov	r12,r8
800072b6:	2f fd       	sub	sp,-4
800072b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800072bc:	80 00       	ld.sh	r0,r0[0x0]
800072be:	3b 9c       	mov	r12,-71
800072c0:	80 00       	ld.sh	r0,r0[0x0]
800072c2:	3c 50       	mov	r0,-59
800072c4:	80 00       	ld.sh	r0,r0[0x0]
800072c6:	59 3c       	cp.w	r12,19
800072c8:	00 00       	add	r0,r0
800072ca:	0f 10       	ld.sh	r0,r7++
800072cc:	00 00       	add	r0,r0
800072ce:	11 a0       	ld.ub	r0,r8[0x2]
800072d0:	00 00       	add	r0,r0
800072d2:	11 50       	ld.sh	r0,--r8
800072d4:	80 00       	ld.sh	r0,r0[0x0]
800072d6:	5b d4       	cp.w	r4,-3

800072d8 <file_write_buf>:
//!
//! @return    number of byte write
//! @return    0, in case of error
//!
uint16_t   file_write_buf( uint8_t _MEM_TYPE_SLOW_ *buffer , uint16_t u16_buf_size )
{
800072d8:	eb cd 40 80 	pushm	r7,lr
800072dc:	1a 97       	mov	r7,sp
800072de:	20 4d       	sub	sp,16
800072e0:	ef 4c ff f4 	st.w	r7[-12],r12
800072e4:	16 98       	mov	r8,r11
800072e6:	ef 58 ff f0 	st.h	r7[-16],r8
   _MEM_TYPE_FAST_ uint16_t u16_nb_write_tmp;
   _MEM_TYPE_FAST_ uint16_t u16_nb_write;
   _MEM_TYPE_FAST_ uint16_t u16_pos_in_sector;

   if( !fat_check_mount_select_open())
800072ea:	f0 1f 00 88 	mcall	80007508 <file_write_buf+0x230>
800072ee:	18 98       	mov	r8,r12
800072f0:	ec 18 00 01 	eorl	r8,0x1
800072f4:	5c 58       	castu.b	r8
800072f6:	c0 30       	breq	800072fc <file_write_buf+0x24>
      return false;
800072f8:	30 08       	mov	r8,0
800072fa:	c0 29       	rjmp	800074fe <file_write_buf+0x226>

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
800072fc:	fe f8 02 10 	ld.w	r8,pc[528]
80007300:	11 88       	ld.ub	r8,r8[0x0]
80007302:	e2 18 00 02 	andl	r8,0x2,COH
80007306:	c0 71       	brne	80007314 <file_write_buf+0x3c>
   {
      fs_g_status = FS_ERR_READ_ONLY;
80007308:	fe f9 02 08 	ld.w	r9,pc[520]
8000730c:	31 58       	mov	r8,21
8000730e:	b2 88       	st.b	r9[0x0],r8
      return false;
80007310:	30 08       	mov	r8,0
80007312:	cf 68       	rjmp	800074fe <file_write_buf+0x226>
   }

   u16_nb_write = 0;
80007314:	30 08       	mov	r8,0
80007316:	ef 58 ff fc 	st.h	r7[-4],r8

   while( 0 != u16_buf_size )
8000731a:	ce 98       	rjmp	800074ec <file_write_buf+0x214>
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
8000731c:	4f c8       	lddpc	r8,8000750c <file_write_buf+0x234>
8000731e:	70 38       	ld.w	r8,r8[0xc]
80007320:	5c 88       	casts.h	r8
80007322:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80007326:	ef 58 ff fe 	st.h	r7[-2],r8
      if( (0== u16_pos_in_sector)
8000732a:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000732e:	30 08       	mov	r8,0
80007330:	f0 09 19 00 	cp.h	r9,r8
80007334:	c5 f1       	brne	800073f2 <file_write_buf+0x11a>
80007336:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000733a:	e0 68 01 ff 	mov	r8,511
8000733e:	f0 09 19 00 	cp.h	r9,r8
80007342:	e0 88 00 58 	brls	800073f2 <file_write_buf+0x11a>
      &&  (FS_512B <= u16_buf_size)
#if (defined __GNUC__) && (defined __AVR32__) || (defined __ICCAVR32__)
      &&  (Test_align((uint32_t)buffer, sizeof(uint32_t)))
80007346:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000734a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
      if( (0== u16_pos_in_sector)
8000734e:	c5 21       	brne	800073f2 <file_write_buf+0x11a>
#if (defined __GNUC__) && (defined __AVR32__) || (defined __ICCAVR32__)
      &&  (Test_align((uint32_t)buffer, sizeof(uint32_t)))
#endif
      )
      {
         u16_nb_write_tmp = u16_buf_size / FS_512B;  // read a modulo sector size
80007350:	ef 18 ff f0 	ld.uh	r8,r7[-16]
80007354:	a9 98       	lsr	r8,0x9
80007356:	ef 58 ff fa 	st.h	r7[-6],r8

         // Get and eventually alloc the following sector segment of file
         if( !fat_write_file( FS_CLUST_ACT_SEG , u16_nb_write_tmp ))
8000735a:	ef 18 ff fa 	ld.uh	r8,r7[-6]
8000735e:	10 9b       	mov	r11,r8
80007360:	30 1c       	mov	r12,1
80007362:	f0 1f 00 6d 	mcall	80007514 <file_write_buf+0x23c>
80007366:	18 98       	mov	r8,r12
80007368:	ec 18 00 01 	eorl	r8,0x1
8000736c:	5c 58       	castu.b	r8
8000736e:	c0 30       	breq	80007374 <file_write_buf+0x9c>
            return false;
80007370:	30 08       	mov	r8,0
80007372:	cc 68       	rjmp	800074fe <file_write_buf+0x226>
         // Truncate the segment found if more larger than asked size
         if( u16_nb_write_tmp < fs_g_seg.u32_size_or_pos)
80007374:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80007378:	4e 88       	lddpc	r8,80007518 <file_write_buf+0x240>
8000737a:	70 18       	ld.w	r8,r8[0x4]
8000737c:	10 39       	cp.w	r9,r8
8000737e:	c0 62       	brcc	8000738a <file_write_buf+0xb2>
         {
            fs_g_seg.u32_size_or_pos = u16_nb_write_tmp;
80007380:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80007384:	4e 58       	lddpc	r8,80007518 <file_write_buf+0x240>
80007386:	91 19       	st.w	r8[0x4],r9
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
80007388:	c2 b8       	rjmp	800073de <file_write_buf+0x106>
         // Truncate the segment found if more larger than asked size
         if( u16_nb_write_tmp < fs_g_seg.u32_size_or_pos)
         {
            fs_g_seg.u32_size_or_pos = u16_nb_write_tmp;
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
8000738a:	4e 48       	lddpc	r8,80007518 <file_write_buf+0x240>
8000738c:	70 18       	ld.w	r8,r8[0x4]
8000738e:	ef 58 ff fa 	st.h	r7[-6],r8
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
80007392:	c2 68       	rjmp	800073de <file_write_buf+0x106>
         {
            if( CTRL_GOOD != ram_2_memory( fs_g_nav.u8_lun  , fs_g_seg.u32_addr, buffer))
80007394:	4e 18       	lddpc	r8,80007518 <file_write_buf+0x240>
80007396:	70 09       	ld.w	r9,r8[0x0]
80007398:	4e 18       	lddpc	r8,8000751c <file_write_buf+0x244>
8000739a:	11 88       	ld.ub	r8,r8[0x0]
8000739c:	ee fa ff f4 	ld.w	r10,r7[-12]
800073a0:	12 9b       	mov	r11,r9
800073a2:	10 9c       	mov	r12,r8
800073a4:	f0 1f 00 5f 	mcall	80007520 <file_write_buf+0x248>
800073a8:	18 98       	mov	r8,r12
800073aa:	58 08       	cp.w	r8,0
800073ac:	c0 70       	breq	800073ba <file_write_buf+0xe2>
            {
               fs_g_status = FS_ERR_HW;
800073ae:	4d 99       	lddpc	r9,80007510 <file_write_buf+0x238>
800073b0:	30 18       	mov	r8,1
800073b2:	b2 88       	st.b	r9[0x0],r8
               return u16_nb_write;
800073b4:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800073b8:	ca 38       	rjmp	800074fe <file_write_buf+0x226>
            }
            fs_g_seg.u32_size_or_pos--;
800073ba:	4d 88       	lddpc	r8,80007518 <file_write_buf+0x240>
800073bc:	70 18       	ld.w	r8,r8[0x4]
800073be:	f0 c9 00 01 	sub	r9,r8,1
800073c2:	4d 68       	lddpc	r8,80007518 <file_write_buf+0x240>
800073c4:	91 19       	st.w	r8[0x4],r9
            fs_g_seg.u32_addr++;
800073c6:	4d 58       	lddpc	r8,80007518 <file_write_buf+0x240>
800073c8:	70 08       	ld.w	r8,r8[0x0]
800073ca:	f0 c9 ff ff 	sub	r9,r8,-1
800073ce:	4d 38       	lddpc	r8,80007518 <file_write_buf+0x240>
800073d0:	91 09       	st.w	r8[0x0],r9
            buffer += FS_512B;
800073d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800073d6:	f0 c8 fe 00 	sub	r8,r8,-512
800073da:	ef 48 ff f4 	st.w	r7[-12],r8
         }else{
            u16_nb_write_tmp = fs_g_seg.u32_size_or_pos;
         }

         // Directly data transfers from buffer to memory
         while( 0 != fs_g_seg.u32_size_or_pos )
800073de:	4c f8       	lddpc	r8,80007518 <file_write_buf+0x240>
800073e0:	70 18       	ld.w	r8,r8[0x4]
800073e2:	58 08       	cp.w	r8,0
800073e4:	cd 81       	brne	80007394 <file_write_buf+0xbc>
            fs_g_seg.u32_size_or_pos--;
            fs_g_seg.u32_addr++;
            buffer += FS_512B;
         }
         // Translate from sector unit to byte unit
         u16_nb_write_tmp *= FS_512B;
800073e6:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800073ea:	a9 78       	lsl	r8,0x9
800073ec:	ef 58 ff fa 	st.h	r7[-6],r8

   while( 0 != u16_buf_size )
   {
      // The file data sector can been directly transfer from buffer to memory (don't use internal cache)
      u16_pos_in_sector = fs_g_nav_entry.u32_pos_in_file % FS_512B;
      if( (0== u16_pos_in_sector)
800073f0:	c5 c8       	rjmp	800074a8 <file_write_buf+0x1d0>
      else
      {
         // The file data can't been directly transfer from buffer to memory, the internal cache must be used

         // Transfer and eventually alloc a data sector from internal cache to memory
         if((fs_g_nav_entry.u32_pos_in_file == fs_g_nav_entry.u32_size)
800073f2:	4c 78       	lddpc	r8,8000750c <file_write_buf+0x234>
800073f4:	70 39       	ld.w	r9,r8[0xc]
800073f6:	4c 68       	lddpc	r8,8000750c <file_write_buf+0x234>
800073f8:	70 28       	ld.w	r8,r8[0x8]
800073fa:	10 39       	cp.w	r9,r8
800073fc:	c2 01       	brne	8000743c <file_write_buf+0x164>
800073fe:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80007402:	30 08       	mov	r8,0
80007404:	f0 09 19 00 	cp.h	r9,r8
80007408:	c1 a1       	brne	8000743c <file_write_buf+0x164>
         && (0==u16_pos_in_sector) )
         {
            // Eventually alloc one new sector for the file
            if( !fat_write_file( FS_CLUST_ACT_SEG  , 1 ))
8000740a:	30 1b       	mov	r11,1
8000740c:	30 1c       	mov	r12,1
8000740e:	f0 1f 00 42 	mcall	80007514 <file_write_buf+0x23c>
80007412:	18 98       	mov	r8,r12
80007414:	ec 18 00 01 	eorl	r8,0x1
80007418:	5c 58       	castu.b	r8
8000741a:	c0 30       	breq	80007420 <file_write_buf+0x148>
               return false;
8000741c:	30 08       	mov	r8,0
8000741e:	c7 08       	rjmp	800074fe <file_write_buf+0x226>
            // Update the cache
            fs_gu32_addrsector = fs_g_seg.u32_addr;
80007420:	4b e8       	lddpc	r8,80007518 <file_write_buf+0x240>
80007422:	70 09       	ld.w	r9,r8[0x0]
80007424:	4c 08       	lddpc	r8,80007524 <file_write_buf+0x24c>
80007426:	91 09       	st.w	r8[0x0],r9
            if( !fat_cache_read_sector( false ))         // The memory is not read because it is a new sector
80007428:	30 0c       	mov	r12,0
8000742a:	f0 1f 00 40 	mcall	80007528 <file_write_buf+0x250>
8000742e:	18 98       	mov	r8,r12
80007430:	ec 18 00 01 	eorl	r8,0x1
80007434:	5c 58       	castu.b	r8
80007436:	c0 e0       	breq	80007452 <file_write_buf+0x17a>
               return false;
80007438:	30 08       	mov	r8,0
8000743a:	c6 28       	rjmp	800074fe <file_write_buf+0x226>
         }else{
            // The sector must existed then alloc no necessary
            if( !fat_write_file( FS_CLUST_ACT_ONE  , 1 ))
8000743c:	30 1b       	mov	r11,1
8000743e:	30 2c       	mov	r12,2
80007440:	f0 1f 00 35 	mcall	80007514 <file_write_buf+0x23c>
80007444:	18 98       	mov	r8,r12
80007446:	ec 18 00 01 	eorl	r8,0x1
8000744a:	5c 58       	castu.b	r8
8000744c:	c0 40       	breq	80007454 <file_write_buf+0x17c>
               return false;
8000744e:	30 08       	mov	r8,0
80007450:	c5 78       	rjmp	800074fe <file_write_buf+0x226>
      else
      {
         // The file data can't been directly transfer from buffer to memory, the internal cache must be used

         // Transfer and eventually alloc a data sector from internal cache to memory
         if((fs_g_nav_entry.u32_pos_in_file == fs_g_nav_entry.u32_size)
80007452:	d7 03       	nop
            if( !fat_write_file( FS_CLUST_ACT_ONE  , 1 ))
               return false;
         }

         // Flag internal cache modified
         fat_cache_mark_sector_as_dirty();
80007454:	f0 1f 00 36 	mcall	8000752c <file_write_buf+0x254>

         // Compute the number of data to transfer
         u16_nb_write_tmp = FS_512B - u16_pos_in_sector; // The number is limited at sector size
80007458:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000745c:	e0 69 02 00 	mov	r9,512
80007460:	10 19       	sub	r9,r8
80007462:	ef 59 ff fa 	st.h	r7[-6],r9
         if( u16_nb_write_tmp > u16_buf_size )
80007466:	ef 09 ff fa 	ld.sh	r9,r7[-6]
8000746a:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8000746e:	f0 09 19 00 	cp.h	r9,r8
80007472:	e0 88 00 06 	brls	8000747e <file_write_buf+0x1a6>
            u16_nb_write_tmp = u16_buf_size;
80007476:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8000747a:	ef 58 ff fa 	st.h	r7[-6],r8

         // Transfer data from buffer to internal cache
         memcpy_ram2ram( &fs_g_sector[ u16_pos_in_sector ], buffer , u16_nb_write_tmp );
8000747e:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80007482:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80007486:	4a b8       	lddpc	r8,80007530 <file_write_buf+0x258>
80007488:	f4 08 00 08 	add	r8,r10,r8
8000748c:	12 9a       	mov	r10,r9
8000748e:	ee fb ff f4 	ld.w	r11,r7[-12]
80007492:	10 9c       	mov	r12,r8
80007494:	f0 1f 00 28 	mcall	80007534 <file_write_buf+0x25c>
         buffer += u16_nb_write_tmp;
80007498:	ef 18 ff fa 	ld.uh	r8,r7[-6]
8000749c:	ee f9 ff f4 	ld.w	r9,r7[-12]
800074a0:	f2 08 00 08 	add	r8,r9,r8
800074a4:	ef 48 ff f4 	st.w	r7[-12],r8
      }
      // Update positions
      fs_g_nav_entry.u32_pos_in_file+= u16_nb_write_tmp;
800074a8:	49 98       	lddpc	r8,8000750c <file_write_buf+0x234>
800074aa:	70 39       	ld.w	r9,r8[0xc]
800074ac:	ef 18 ff fa 	ld.uh	r8,r7[-6]
800074b0:	10 09       	add	r9,r8
800074b2:	49 78       	lddpc	r8,8000750c <file_write_buf+0x234>
800074b4:	91 39       	st.w	r8[0xc],r9
      u16_nb_write                  += u16_nb_write_tmp;
800074b6:	ef 09 ff fc 	ld.sh	r9,r7[-4]
800074ba:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800074be:	f2 08 00 08 	add	r8,r9,r8
800074c2:	ef 58 ff fc 	st.h	r7[-4],r8
      u16_buf_size                  -= u16_nb_write_tmp;
800074c6:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800074ca:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800074ce:	f2 08 01 08 	sub	r8,r9,r8
800074d2:	ef 58 ff f0 	st.h	r7[-16],r8
      // Update file size
      if( fs_g_nav_entry.u32_pos_in_file > fs_g_nav_entry.u32_size )
800074d6:	48 e8       	lddpc	r8,8000750c <file_write_buf+0x234>
800074d8:	70 39       	ld.w	r9,r8[0xc]
800074da:	48 d8       	lddpc	r8,8000750c <file_write_buf+0x234>
800074dc:	70 28       	ld.w	r8,r8[0x8]
800074de:	10 39       	cp.w	r9,r8
800074e0:	e0 88 00 06 	brls	800074ec <file_write_buf+0x214>
      {
         fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
800074e4:	48 a8       	lddpc	r8,8000750c <file_write_buf+0x234>
800074e6:	70 39       	ld.w	r9,r8[0xc]
800074e8:	48 98       	lddpc	r8,8000750c <file_write_buf+0x234>
800074ea:	91 29       	st.w	r8[0x8],r9
      return false;
   }

   u16_nb_write = 0;

   while( 0 != u16_buf_size )
800074ec:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800074f0:	30 08       	mov	r8,0
800074f2:	f0 09 19 00 	cp.h	r9,r8
800074f6:	fe 91 ff 13 	brne	8000731c <file_write_buf+0x44>
      if( fs_g_nav_entry.u32_pos_in_file > fs_g_nav_entry.u32_size )
      {
         fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
      }
   }
   return u16_nb_write;  // All buffer is written
800074fa:	ef 08 ff fc 	ld.sh	r8,r7[-4]
}
800074fe:	10 9c       	mov	r12,r8
80007500:	2f cd       	sub	sp,-16
80007502:	e3 cd 80 80 	ldm	sp++,r7,pc
80007506:	00 00       	add	r0,r0
80007508:	80 00       	ld.sh	r0,r0[0x0]
8000750a:	3b e0       	mov	r0,-66
8000750c:	00 00       	add	r0,r0
8000750e:	0f 10       	ld.sh	r0,r7++
80007510:	00 00       	add	r0,r0
80007512:	11 a0       	ld.ub	r0,r8[0x2]
80007514:	80 00       	ld.sh	r0,r0[0x0]
80007516:	4d e8       	lddpc	r8,8000768c <nav_reset+0x5c>
80007518:	00 00       	add	r0,r0
8000751a:	11 f8       	ld.ub	r8,r8[0x7]
8000751c:	00 00       	add	r0,r0
8000751e:	11 50       	ld.sh	r0,--r8
80007520:	80 00       	ld.sh	r0,r0[0x0]
80007522:	5c 74       	castu.h	r4
80007524:	00 00       	add	r0,r0
80007526:	0f 0c       	ld.w	r12,r7++
80007528:	80 00       	ld.sh	r0,r0[0x0]
8000752a:	57 c0       	stdsp	sp[0x1f0],r0
8000752c:	80 00       	ld.sh	r0,r0[0x0]
8000752e:	58 b0       	cp.w	r0,11
80007530:	00 00       	add	r0,r0
80007532:	0f 50       	ld.sh	r0,--r7
80007534:	80 00       	ld.sh	r0,r0[0x0]
80007536:	d8 b2       	popm	r0-r7,r10,pc

80007538 <file_putc>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  file_putc( uint8_t u8_byte )
{
80007538:	eb cd 40 80 	pushm	r7,lr
8000753c:	1a 97       	mov	r7,sp
8000753e:	20 1d       	sub	sp,4
80007540:	18 98       	mov	r8,r12
80007542:	ef 68 ff fc 	st.b	r7[-4],r8
   if( !fat_check_mount_select_open())
80007546:	f0 1f 00 20 	mcall	800075c4 <file_putc+0x8c>
8000754a:	18 98       	mov	r8,r12
8000754c:	ec 18 00 01 	eorl	r8,0x1
80007550:	5c 58       	castu.b	r8
80007552:	c0 30       	breq	80007558 <file_putc+0x20>
      return false;
80007554:	30 08       	mov	r8,0
80007556:	c3 38       	rjmp	800075bc <file_putc+0x84>

   if(!(FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode))
80007558:	49 c8       	lddpc	r8,800075c8 <file_putc+0x90>
8000755a:	11 88       	ld.ub	r8,r8[0x0]
8000755c:	e2 18 00 02 	andl	r8,0x2,COH
80007560:	c0 61       	brne	8000756c <file_putc+0x34>
   {
      fs_g_status = FS_ERR_READ_ONLY;
80007562:	49 b9       	lddpc	r9,800075cc <file_putc+0x94>
80007564:	31 58       	mov	r8,21
80007566:	b2 88       	st.b	r9[0x0],r8
      return false;
80007568:	30 08       	mov	r8,0
8000756a:	c2 98       	rjmp	800075bc <file_putc+0x84>
   }

   if( !fat_write_file( FS_CLUST_ACT_ONE  , 1 ))
8000756c:	30 1b       	mov	r11,1
8000756e:	30 2c       	mov	r12,2
80007570:	f0 1f 00 18 	mcall	800075d0 <file_putc+0x98>
80007574:	18 98       	mov	r8,r12
80007576:	ec 18 00 01 	eorl	r8,0x1
8000757a:	5c 58       	castu.b	r8
8000757c:	c0 30       	breq	80007582 <file_putc+0x4a>
      return false;
8000757e:	30 08       	mov	r8,0
80007580:	c1 e8       	rjmp	800075bc <file_putc+0x84>

   // Write the data in the internal cache
   fat_cache_mark_sector_as_dirty();
80007582:	f0 1f 00 15 	mcall	800075d4 <file_putc+0x9c>
   fs_g_sector[ fs_g_nav_entry.u32_pos_in_file & FS_512B_MASK ]    = u8_byte;
80007586:	49 18       	lddpc	r8,800075c8 <file_putc+0x90>
80007588:	70 38       	ld.w	r8,r8[0xc]
8000758a:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8000758e:	49 3a       	lddpc	r10,800075d8 <file_putc+0xa0>
80007590:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007594:	f4 09 0b 08 	st.b	r10[r9],r8
   fs_g_nav_entry.u32_pos_in_file++;
80007598:	48 c8       	lddpc	r8,800075c8 <file_putc+0x90>
8000759a:	70 38       	ld.w	r8,r8[0xc]
8000759c:	f0 c9 ff ff 	sub	r9,r8,-1
800075a0:	48 a8       	lddpc	r8,800075c8 <file_putc+0x90>
800075a2:	91 39       	st.w	r8[0xc],r9

   // Update the file size
   if( fs_g_nav_entry.u32_pos_in_file > fs_g_nav_entry.u32_size )
800075a4:	48 98       	lddpc	r8,800075c8 <file_putc+0x90>
800075a6:	70 39       	ld.w	r9,r8[0xc]
800075a8:	48 88       	lddpc	r8,800075c8 <file_putc+0x90>
800075aa:	70 28       	ld.w	r8,r8[0x8]
800075ac:	10 39       	cp.w	r9,r8
800075ae:	e0 88 00 06 	brls	800075ba <file_putc+0x82>
   {
      fs_g_nav_entry.u32_size = fs_g_nav_entry.u32_pos_in_file;
800075b2:	48 68       	lddpc	r8,800075c8 <file_putc+0x90>
800075b4:	70 39       	ld.w	r9,r8[0xc]
800075b6:	48 58       	lddpc	r8,800075c8 <file_putc+0x90>
800075b8:	91 29       	st.w	r8[0x8],r9
   }
   return true;
800075ba:	30 18       	mov	r8,1
}
800075bc:	10 9c       	mov	r12,r8
800075be:	2f fd       	sub	sp,-4
800075c0:	e3 cd 80 80 	ldm	sp++,r7,pc
800075c4:	80 00       	ld.sh	r0,r0[0x0]
800075c6:	3b e0       	mov	r0,-66
800075c8:	00 00       	add	r0,r0
800075ca:	0f 10       	ld.sh	r0,r7++
800075cc:	00 00       	add	r0,r0
800075ce:	11 a0       	ld.ub	r0,r8[0x2]
800075d0:	80 00       	ld.sh	r0,r0[0x0]
800075d2:	4d e8       	lddpc	r8,80007748 <nav_drive_set+0x20>
800075d4:	80 00       	ld.sh	r0,r0[0x0]
800075d6:	58 b0       	cp.w	r0,11
800075d8:	00 00       	add	r0,r0
800075da:	0f 50       	ld.sh	r0,--r7

800075dc <file_close>:


//! This function closes the file
//!
void  file_close( void )
{
800075dc:	eb cd 40 80 	pushm	r7,lr
800075e0:	1a 97       	mov	r7,sp
   // If a file is opened, then close this one
   if( fat_check_mount_select_open() )
800075e2:	f0 1f 00 0f 	mcall	8000761c <file_close+0x40>
800075e6:	18 98       	mov	r8,r12
800075e8:	58 08       	cp.w	r8,0
800075ea:	c1 60       	breq	80007616 <file_close+0x3a>
   {

#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
800075ec:	48 d8       	lddpc	r8,80007620 <file_close+0x44>
800075ee:	11 88       	ld.ub	r8,r8[0x0]
800075f0:	e2 18 00 02 	andl	r8,0x2,COH
800075f4:	c0 c0       	breq	8000760c <file_close+0x30>
      {
         // Write file information
         if( !fat_read_dir() )
800075f6:	f0 1f 00 0c 	mcall	80007624 <file_close+0x48>
800075fa:	18 98       	mov	r8,r12
800075fc:	ec 18 00 01 	eorl	r8,0x1
80007600:	5c 58       	castu.b	r8
80007602:	c0 91       	brne	80007614 <file_close+0x38>
            return;           // error
         fat_write_entry_file();
80007604:	f0 1f 00 09 	mcall	80007628 <file_close+0x4c>
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
80007608:	f0 1f 00 09 	mcall	8000762c <file_close+0x50>
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
8000760c:	48 59       	lddpc	r9,80007620 <file_close+0x44>
8000760e:	30 08       	mov	r8,0
80007610:	b2 88       	st.b	r9[0x0],r8
80007612:	c0 28       	rjmp	80007616 <file_close+0x3a>
#if (FSFEATURE_WRITE == (FS_LEVEL_FEATURES & FSFEATURE_WRITE))
      if( FOPEN_WRITE_ACCESS & fs_g_nav_entry.u8_open_mode )
      {
         // Write file information
         if( !fat_read_dir() )
            return;           // error
80007614:	d7 03       	nop
         fat_cache_flush();   // In case of error during writing data, flush the data before exit function
      }
#endif  // FS_LEVEL_FEATURES
      Fat_file_close();
   }
}
80007616:	e3 cd 80 80 	ldm	sp++,r7,pc
8000761a:	00 00       	add	r0,r0
8000761c:	80 00       	ld.sh	r0,r0[0x0]
8000761e:	3b e0       	mov	r0,-66
80007620:	00 00       	add	r0,r0
80007622:	0f 10       	ld.sh	r0,r7++
80007624:	80 00       	ld.sh	r0,r0[0x0]
80007626:	4f 64       	lddpc	r4,800077fc <nav_filelist_reset+0xc>
80007628:	80 00       	ld.sh	r0,r0[0x0]
8000762a:	52 08       	stdsp	sp[0x80],r8
8000762c:	80 00       	ld.sh	r0,r0[0x0]
8000762e:	58 c8       	cp.w	r8,12

80007630 <nav_reset>:
//! @verbatim
//! Call this at the program startup or before a new session (e.g. USB Device exit)
//! @endverbatim
//!
void  nav_reset( void )
{
80007630:	eb cd 40 80 	pushm	r7,lr
80007634:	1a 97       	mov	r7,sp
80007636:	20 1d       	sub	sp,4
#if ( (FS_ASCII   == true) && (FS_UNICODE == true))
   g_b_unicode = true;
#endif
   g_b_string_length = false;
80007638:	49 99       	lddpc	r9,8000769c <nav_reset+0x6c>
8000763a:	30 08       	mov	r8,0
8000763c:	b2 88       	st.b	r9[0x0],r8
   g_b_no_check_disk = false;
8000763e:	49 99       	lddpc	r9,800076a0 <nav_reset+0x70>
80007640:	30 08       	mov	r8,0
80007642:	b2 88       	st.b	r9[0x0],r8

   fat_cache_reset();
80007644:	f0 1f 00 18 	mcall	800076a4 <nav_reset+0x74>
   fat_cache_clusterlist_reset();
80007648:	f0 1f 00 18 	mcall	800076a8 <nav_reset+0x78>

#if (FS_NB_NAVIGATOR > 1)
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
8000764c:	30 08       	mov	r8,0
8000764e:	ef 68 ff ff 	st.b	r7[-1],r8
80007652:	c1 88       	rjmp	80007682 <nav_reset+0x52>
   {
      nav_select(i);
80007654:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007658:	10 9c       	mov	r12,r8
8000765a:	f0 1f 00 15 	mcall	800076ac <nav_reset+0x7c>
      fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM; // By default the fat isn't mounted
8000765e:	49 59       	lddpc	r9,800076b0 <nav_reset+0x80>
80007660:	30 08       	mov	r8,0
80007662:	b2 88       	st.b	r9[0x0],r8
      fs_g_nav.u8_lun = 0xFF;                      // By default don't select a drive
80007664:	49 49       	lddpc	r9,800076b4 <nav_reset+0x84>
80007666:	3f f8       	mov	r8,-1
80007668:	b2 88       	st.b	r9[0x0],r8
#if (FS_MULTI_PARTITION  ==  true)
      fs_g_nav.u8_partition=0;                     // By default select the first partition
#endif
      Fat_file_close();                            // By default no file is opened
8000766a:	49 49       	lddpc	r9,800076b8 <nav_reset+0x88>
8000766c:	30 08       	mov	r8,0
8000766e:	b2 88       	st.b	r9[0x0],r8
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
80007670:	49 19       	lddpc	r9,800076b4 <nav_reset+0x84>
80007672:	30 08       	mov	r8,0
80007674:	f3 68 00 2d 	st.b	r9[45],r8

#if (FS_NB_NAVIGATOR > 1)
   {
   uint8_t i;
   // Reset variables of each navigators
   for( i=0 ; i!=FS_NB_NAVIGATOR ; i++ )
80007678:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000767c:	2f f8       	sub	r8,-1
8000767e:	ef 68 ff ff 	st.b	r7[-1],r8
80007682:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007686:	30 28       	mov	r8,2
80007688:	f0 09 18 00 	cp.b	r9,r8
8000768c:	ce 41       	brne	80007654 <nav_reset+0x24>
#endif
      Fat_file_close();                            // By default no file is opened
      fs_g_nav.b_mode_nav_single = false;          // By default display files and directories
   }
   // By default select the navigator 0
   fs_g_u8_nav_selected = 0;
8000768e:	48 c9       	lddpc	r9,800076bc <nav_reset+0x8c>
80007690:	30 08       	mov	r8,0
80007692:	b2 88       	st.b	r9[0x0],r8
#  if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;                        // By default select the first partition
#  endif
   Fat_file_close();                               // By default no file is opened
#endif // (FS_NB_NAVIGATOR > 1)
}
80007694:	2f fd       	sub	sp,-4
80007696:	e3 cd 80 80 	ldm	sp++,r7,pc
8000769a:	00 00       	add	r0,r0
8000769c:	00 00       	add	r0,r0
8000769e:	11 a1       	ld.ub	r1,r8[0x2]
800076a0:	00 00       	add	r0,r0
800076a2:	0f 22       	ld.uh	r2,r7++
800076a4:	80 00       	ld.sh	r0,r0[0x0]
800076a6:	58 6c       	cp.w	r12,6
800076a8:	80 00       	ld.sh	r0,r0[0x0]
800076aa:	47 14       	lddsp	r4,sp[0x1c4]
800076ac:	80 00       	ld.sh	r0,r0[0x0]
800076ae:	76 c0       	ld.w	r0,r11[0x30]
800076b0:	00 00       	add	r0,r0
800076b2:	11 9c       	ld.ub	r12,r8[0x1]
800076b4:	00 00       	add	r0,r0
800076b6:	11 50       	ld.sh	r0,--r8
800076b8:	00 00       	add	r0,r0
800076ba:	0f 10       	ld.sh	r0,r7++
800076bc:	00 00       	add	r0,r0
800076be:	12 18       	sub	r8,r9

800076c0 <nav_select>:
//!
//! @return    false if ID navigator don't exist
//! @return    true otherwise
//!
bool  nav_select( uint8_t u8_idnav )
{
800076c0:	eb cd 40 80 	pushm	r7,lr
800076c4:	1a 97       	mov	r7,sp
800076c6:	20 1d       	sub	sp,4
800076c8:	18 98       	mov	r8,r12
800076ca:	ef 68 ff fc 	st.b	r7[-4],r8
   if( FS_NB_NAVIGATOR <= u8_idnav )
800076ce:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800076d2:	30 18       	mov	r8,1
800076d4:	f0 09 18 00 	cp.b	r9,r8
800076d8:	e0 88 00 07 	brls	800076e6 <nav_select+0x26>
   {
      fs_g_status = FS_ERR_BAD_NAV;             // The navigator doesn't exist
800076dc:	49 09       	lddpc	r9,8000771c <nav_select+0x5c>
800076de:	32 78       	mov	r8,39
800076e0:	b2 88       	st.b	r9[0x0],r8
      return false;
800076e2:	30 08       	mov	r8,0
800076e4:	c1 78       	rjmp	80007712 <nav_select+0x52>
   }
#if (FS_NB_NAVIGATOR > 1)
   if( fs_g_u8_nav_selected != u8_idnav )
800076e6:	48 f8       	lddpc	r8,80007720 <nav_select+0x60>
800076e8:	11 88       	ld.ub	r8,r8[0x0]
800076ea:	ef 39 ff fc 	ld.ub	r9,r7[-4]
800076ee:	f0 09 18 00 	cp.b	r9,r8
800076f2:	c0 f0       	breq	80007710 <nav_select+0x50>
   {
      fat_invert_nav( fs_g_u8_nav_selected );   // Deselect previous navigator = Select default navigator
800076f4:	48 b8       	lddpc	r8,80007720 <nav_select+0x60>
800076f6:	11 88       	ld.ub	r8,r8[0x0]
800076f8:	10 9c       	mov	r12,r8
800076fa:	f0 1f 00 0b 	mcall	80007724 <nav_select+0x64>
      fat_invert_nav( u8_idnav );               // Select new navigator
800076fe:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80007702:	10 9c       	mov	r12,r8
80007704:	f0 1f 00 08 	mcall	80007724 <nav_select+0x64>
      fs_g_u8_nav_selected = u8_idnav;
80007708:	48 69       	lddpc	r9,80007720 <nav_select+0x60>
8000770a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000770e:	b2 88       	st.b	r9[0x0],r8
   }
#endif
   return true;
80007710:	30 18       	mov	r8,1
}
80007712:	10 9c       	mov	r12,r8
80007714:	2f fd       	sub	sp,-4
80007716:	e3 cd 80 80 	ldm	sp++,r7,pc
8000771a:	00 00       	add	r0,r0
8000771c:	00 00       	add	r0,r0
8000771e:	11 a0       	ld.ub	r0,r8[0x2]
80007720:	00 00       	add	r0,r0
80007722:	12 18       	sub	r8,r9
80007724:	80 00       	ld.sh	r0,r0[0x0]
80007726:	5a 2c       	cp.w	r12,-30

80007728 <nav_drive_set>:
//!
//! @return    false in case of error, see global value "fs_g_status" for more detail
//! @return    true otherwise
//!
bool  nav_drive_set( uint8_t u8_number )
{
80007728:	eb cd 40 80 	pushm	r7,lr
8000772c:	1a 97       	mov	r7,sp
8000772e:	20 1d       	sub	sp,4
80007730:	18 98       	mov	r8,r12
80007732:	ef 68 ff fc 	st.b	r7[-4],r8
   if ( !fat_check_noopen() )
80007736:	f0 1f 00 16 	mcall	8000778c <nav_drive_set+0x64>
8000773a:	18 98       	mov	r8,r12
8000773c:	ec 18 00 01 	eorl	r8,0x1
80007740:	5c 58       	castu.b	r8
80007742:	c0 30       	breq	80007748 <nav_drive_set+0x20>
      return false;
80007744:	30 08       	mov	r8,0
80007746:	c1 f8       	rjmp	80007784 <nav_drive_set+0x5c>

   if (u8_number >= get_nb_lun() )
80007748:	f0 1f 00 12 	mcall	80007790 <nav_drive_set+0x68>
8000774c:	18 98       	mov	r8,r12
8000774e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80007752:	f0 09 18 00 	cp.b	r9,r8
80007756:	c0 63       	brcs	80007762 <nav_drive_set+0x3a>
   {
      fs_g_status = FS_ERR_END_OF_DRIVE;   // The drive number is bad
80007758:	48 f9       	lddpc	r9,80007794 <nav_drive_set+0x6c>
8000775a:	30 68       	mov	r8,6
8000775c:	b2 88       	st.b	r9[0x0],r8
      return false;
8000775e:	30 08       	mov	r8,0
80007760:	c1 28       	rjmp	80007784 <nav_drive_set+0x5c>
   }

   if ( fs_g_nav.u8_lun == u8_number)
80007762:	48 e8       	lddpc	r8,80007798 <nav_drive_set+0x70>
80007764:	11 88       	ld.ub	r8,r8[0x0]
80007766:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8000776a:	f0 09 18 00 	cp.b	r9,r8
8000776e:	c0 31       	brne	80007774 <nav_drive_set+0x4c>
      return true;   // It is the same drive number
80007770:	30 18       	mov	r8,1
80007772:	c0 98       	rjmp	80007784 <nav_drive_set+0x5c>

   // Go to the device
   fs_g_nav.u8_lun = u8_number;
80007774:	48 99       	lddpc	r9,80007798 <nav_drive_set+0x70>
80007776:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000777a:	b2 88       	st.b	r9[0x0],r8
   fs_g_nav_fast.u8_type_fat = FS_TYPE_FAT_UNM;
8000777c:	48 89       	lddpc	r9,8000779c <nav_drive_set+0x74>
8000777e:	30 08       	mov	r8,0
80007780:	b2 88       	st.b	r9[0x0],r8
#if (FS_MULTI_PARTITION  ==  true)
   fs_g_nav.u8_partition=0;   // by default select the first partition
#endif
   return true;
80007782:	30 18       	mov	r8,1
}
80007784:	10 9c       	mov	r12,r8
80007786:	2f fd       	sub	sp,-4
80007788:	e3 cd 80 80 	ldm	sp++,r7,pc
8000778c:	80 00       	ld.sh	r0,r0[0x0]
8000778e:	3a cc       	mov	r12,-84
80007790:	80 00       	ld.sh	r0,r0[0x0]
80007792:	5b 54       	cp.w	r4,-11
80007794:	00 00       	add	r0,r0
80007796:	11 a0       	ld.ub	r0,r8[0x2]
80007798:	00 00       	add	r0,r0
8000779a:	11 50       	ld.sh	r0,--r8
8000779c:	00 00       	add	r0,r0
8000779e:	11 9c       	ld.ub	r12,r8[0x1]

800077a0 <nav_partition_mount>:
//! then the mount routine selects the first partition supported by file system. <br>
//! After mount, the file list contains files and directories of ROOT directory
//! @endverbatim
//!
bool  nav_partition_mount( void )
{
800077a0:	eb cd 40 80 	pushm	r7,lr
800077a4:	1a 97       	mov	r7,sp
   if ( !fat_check_noopen() )
800077a6:	f0 1f 00 0e 	mcall	800077dc <nav_partition_mount+0x3c>
800077aa:	18 98       	mov	r8,r12
800077ac:	ec 18 00 01 	eorl	r8,0x1
800077b0:	5c 58       	castu.b	r8
800077b2:	c0 30       	breq	800077b8 <nav_partition_mount+0x18>
      return false;
800077b4:	30 08       	mov	r8,0
800077b6:	c0 f8       	rjmp	800077d4 <nav_partition_mount+0x34>

   if( FS_TYPE_FAT_UNM != fs_g_nav_fast.u8_type_fat)
800077b8:	48 a8       	lddpc	r8,800077e0 <nav_partition_mount+0x40>
800077ba:	11 88       	ld.ub	r8,r8[0x0]
800077bc:	58 08       	cp.w	r8,0
800077be:	c0 80       	breq	800077ce <nav_partition_mount+0x2e>
   {
      // Already mounted
      // Go to root directory
      fs_g_nav.u32_cluster_sel_dir   = 0;
800077c0:	48 98       	lddpc	r8,800077e4 <nav_partition_mount+0x44>
800077c2:	30 09       	mov	r9,0
800077c4:	91 89       	st.w	r8[0x20],r9
      // No file is selected by default
      fat_clear_entry_info_and_ptr();
800077c6:	f0 1f 00 09 	mcall	800077e8 <nav_partition_mount+0x48>
      return true;
800077ca:	30 18       	mov	r8,1
800077cc:	c0 48       	rjmp	800077d4 <nav_partition_mount+0x34>
   }

   return fat_mount();
800077ce:	f0 1f 00 08 	mcall	800077ec <nav_partition_mount+0x4c>
800077d2:	18 98       	mov	r8,r12
}
800077d4:	10 9c       	mov	r12,r8
800077d6:	e3 cd 80 80 	ldm	sp++,r7,pc
800077da:	00 00       	add	r0,r0
800077dc:	80 00       	ld.sh	r0,r0[0x0]
800077de:	3a cc       	mov	r12,-84
800077e0:	00 00       	add	r0,r0
800077e2:	11 9c       	ld.ub	r12,r8[0x1]
800077e4:	00 00       	add	r0,r0
800077e6:	11 50       	ld.sh	r0,--r8
800077e8:	80 00       	ld.sh	r0,r0[0x0]
800077ea:	51 b8       	stdsp	sp[0x6c],r8
800077ec:	80 00       	ld.sh	r0,r0[0x0]
800077ee:	5c cc       	swap.bh	r12

800077f0 <nav_filelist_reset>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_filelist_reset( void )
{
800077f0:	eb cd 40 80 	pushm	r7,lr
800077f4:	1a 97       	mov	r7,sp
   if ( !fat_check_mount_noopen())
800077f6:	f0 1f 00 08 	mcall	80007814 <nav_filelist_reset+0x24>
800077fa:	18 98       	mov	r8,r12
800077fc:	ec 18 00 01 	eorl	r8,0x1
80007800:	5c 58       	castu.b	r8
80007802:	c0 30       	breq	80007808 <nav_filelist_reset+0x18>
      return false;
80007804:	30 08       	mov	r8,0
80007806:	c0 48       	rjmp	8000780e <nav_filelist_reset+0x1e>

   // No file selected and reset navigation
   fat_clear_entry_info_and_ptr();
80007808:	f0 1f 00 04 	mcall	80007818 <nav_filelist_reset+0x28>
   return true;
8000780c:	30 18       	mov	r8,1
}
8000780e:	10 9c       	mov	r12,r8
80007810:	e3 cd 80 80 	ldm	sp++,r7,pc
80007814:	80 00       	ld.sh	r0,r0[0x0]
80007816:	3b 70       	mov	r0,-73
80007818:	80 00       	ld.sh	r0,r0[0x0]
8000781a:	51 b8       	stdsp	sp[0x6c],r8

8000781c <nav_filelist_set>:
//! @verbatim
//! Note: if no file is selected then nav_filelist_set( 0 , FS_NEXT ) goes to the first entry of the file list.
//! @endverbatim
//!
bool  nav_filelist_set( uint16_t u16_nb , bool b_direction )
{
8000781c:	eb cd 40 80 	pushm	r7,lr
80007820:	1a 97       	mov	r7,sp
80007822:	20 4d       	sub	sp,16
80007824:	18 99       	mov	r9,r12
80007826:	16 98       	mov	r8,r11
80007828:	ef 59 ff f4 	st.h	r7[-12],r9
8000782c:	ef 68 ff f0 	st.b	r7[-16],r8
   uint16_t   u16_ptr_save_entry;
   uint16_t   u16_save_pos_sel_file;
   bool  b_save_entry_type;
   bool  b_find_last_entry = false;
80007830:	30 08       	mov	r8,0
80007832:	ef 68 ff ff 	st.b	r7[-1],r8

   if ( !fat_check_mount_noopen())
80007836:	f0 1f 00 79 	mcall	80007a18 <nav_filelist_set+0x1fc>
8000783a:	18 98       	mov	r8,r12
8000783c:	ec 18 00 01 	eorl	r8,0x1
80007840:	5c 58       	castu.b	r8
80007842:	c0 30       	breq	80007848 <nav_filelist_set+0x2c>
      return false;
80007844:	30 08       	mov	r8,0
80007846:	ce 48       	rjmp	80007a0e <nav_filelist_set+0x1f2>

   // Save the current selection
   u16_ptr_save_entry      = fs_g_nav_fast.u16_entry_pos_sel_file;
80007848:	4f 58       	lddpc	r8,80007a1c <nav_filelist_set+0x200>
8000784a:	90 18       	ld.sh	r8,r8[0x2]
8000784c:	ef 58 ff fa 	st.h	r7[-6],r8
   u16_save_pos_sel_file   = fs_g_nav.u16_pos_sel_file;
80007850:	4f 48       	lddpc	r8,80007a20 <nav_filelist_set+0x204>
80007852:	f1 08 00 24 	ld.sh	r8,r8[36]
80007856:	ef 58 ff fc 	st.h	r7[-4],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;
8000785a:	4f 28       	lddpc	r8,80007a20 <nav_filelist_set+0x204>
8000785c:	f1 39 00 2c 	ld.ub	r9,r8[44]
80007860:	30 08       	mov	r8,0
80007862:	f0 09 18 00 	cp.b	r9,r8
80007866:	5f 18       	srne	r8
80007868:	ef 68 ff fe 	st.b	r7[-2],r8
8000786c:	c0 28       	rjmp	80007870 <nav_filelist_set+0x54>
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
            fs_g_nav.b_mode_nav = FS_FILE;
         }
      }
   }  // end of loop while(1)
8000786e:	d7 03       	nop
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
80007870:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80007874:	30 08       	mov	r8,0
80007876:	f0 09 18 00 	cp.b	r9,r8
8000787a:	c0 71       	brne	80007888 <nav_filelist_set+0x6c>
8000787c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007880:	30 08       	mov	r8,0
80007882:	f0 09 18 00 	cp.b	r9,r8
80007886:	c1 20       	breq	800078aa <nav_filelist_set+0x8e>
      || ( b_find_last_entry ) )
      {
         if ( FS_END_FIND == fs_g_nav_fast.u16_entry_pos_sel_file )
80007888:	4e 58       	lddpc	r8,80007a1c <nav_filelist_set+0x200>
8000788a:	90 19       	ld.sh	r9,r8[0x2]
8000788c:	3f e8       	mov	r8,-2
8000788e:	f0 09 19 00 	cp.h	r9,r8
80007892:	c0 51       	brne	8000789c <nav_filelist_set+0x80>
         {
            // Too many files in directory (case impossible)
            fs_g_status = FS_ERR_FS;
80007894:	4e 49       	lddpc	r9,80007a24 <nav_filelist_set+0x208>
80007896:	30 88       	mov	r8,8
80007898:	b2 88       	st.b	r9[0x0],r8
            break;
8000789a:	ca b8       	rjmp	800079f0 <nav_filelist_set+0x1d4>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
8000789c:	4e 08       	lddpc	r8,80007a1c <nav_filelist_set+0x200>
8000789e:	90 18       	ld.sh	r8,r8[0x2]
800078a0:	2f f8       	sub	r8,-1
800078a2:	5c 88       	casts.h	r8
800078a4:	4d e9       	lddpc	r9,80007a1c <nav_filelist_set+0x200>
800078a6:	b2 18       	st.h	r9[0x2],r8
   b_save_entry_type       = fs_g_nav.b_mode_nav;

   // Loop in directory
   while( 1 )
   {
      if(( FS_FIND_NEXT == b_direction )
800078a8:	c2 78       	rjmp	800078f6 <nav_filelist_set+0xda>
         }
         fs_g_nav_fast.u16_entry_pos_sel_file++;      // Update entry position
      }
      else
      {
         if ( FS_NO_SEL == fs_g_nav_fast.u16_entry_pos_sel_file )
800078aa:	4d d8       	lddpc	r8,80007a1c <nav_filelist_set+0x200>
800078ac:	90 19       	ld.sh	r9,r8[0x2]
800078ae:	3f f8       	mov	r8,-1
800078b0:	f0 09 19 00 	cp.h	r9,r8
800078b4:	c0 51       	brne	800078be <nav_filelist_set+0xa2>
         {
            // No selected file then previous action impossible
            fs_g_status = FS_ERR_NO_FIND;
800078b6:	4d c9       	lddpc	r9,80007a24 <nav_filelist_set+0x208>
800078b8:	30 98       	mov	r8,9
800078ba:	b2 88       	st.b	r9[0x0],r8
            break;
800078bc:	c9 a8       	rjmp	800079f0 <nav_filelist_set+0x1d4>
         }
         if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
800078be:	4d 88       	lddpc	r8,80007a1c <nav_filelist_set+0x200>
800078c0:	90 18       	ld.sh	r8,r8[0x2]
800078c2:	58 08       	cp.w	r8,0
800078c4:	c1 31       	brne	800078ea <nav_filelist_set+0xce>
         {
            // beginning of directory
            if ( (FS_DIR == fs_g_nav.b_mode_nav ) || fs_g_nav.b_mode_nav_single )
800078c6:	4d 78       	lddpc	r8,80007a20 <nav_filelist_set+0x204>
800078c8:	f1 38 00 2c 	ld.ub	r8,r8[44]
800078cc:	58 08       	cp.w	r8,0
800078ce:	c0 60       	breq	800078da <nav_filelist_set+0xbe>
800078d0:	4d 48       	lddpc	r8,80007a20 <nav_filelist_set+0x204>
800078d2:	f1 38 00 2d 	ld.ub	r8,r8[45]
800078d6:	58 08       	cp.w	r8,0
800078d8:	c0 50       	breq	800078e2 <nav_filelist_set+0xc6>
            {
               // End of directory scan, then no previous action possible
               fs_g_status = FS_ERR_NO_FIND;
800078da:	4d 39       	lddpc	r9,80007a24 <nav_filelist_set+0x208>
800078dc:	30 98       	mov	r8,9
800078de:	b2 88       	st.b	r9[0x0],r8
               break;
800078e0:	c8 88       	rjmp	800079f0 <nav_filelist_set+0x1d4>
            }
            // End of file scan, then find last directory
            b_find_last_entry = true;
800078e2:	30 18       	mov	r8,1
800078e4:	ef 68 ff ff 	st.b	r7[-1],r8
800078e8:	c0 78       	rjmp	800078f6 <nav_filelist_set+0xda>
         }else{
            fs_g_nav_fast.u16_entry_pos_sel_file--;   // Update entry position
800078ea:	4c d8       	lddpc	r8,80007a1c <nav_filelist_set+0x200>
800078ec:	90 18       	ld.sh	r8,r8[0x2]
800078ee:	20 18       	sub	r8,1
800078f0:	5c 88       	casts.h	r8
800078f2:	4c b9       	lddpc	r9,80007a1c <nav_filelist_set+0x200>
800078f4:	b2 18       	st.h	r9[0x2],r8
         }
      }

      if( !fat_read_dir())
800078f6:	f0 1f 00 4d 	mcall	80007a28 <nav_filelist_set+0x20c>
800078fa:	18 98       	mov	r8,r12
800078fc:	ec 18 00 01 	eorl	r8,0x1
80007900:	5c 58       	castu.b	r8
80007902:	c0 80       	breq	80007912 <nav_filelist_set+0xf6>
      {
         if( FS_ERR_OUT_LIST != fs_g_status )
80007904:	4c 88       	lddpc	r8,80007a24 <nav_filelist_set+0x208>
80007906:	11 89       	ld.ub	r9,r8[0x0]
80007908:	31 a8       	mov	r8,26
8000790a:	f0 09 18 00 	cp.b	r9,r8
8000790e:	c3 d0       	breq	80007988 <nav_filelist_set+0x16c>
            break; // Error
80007910:	c7 08       	rjmp	800079f0 <nav_filelist_set+0x1d4>
      }else{
         if ( fat_entry_check( fs_g_nav.b_mode_nav ) )
80007912:	4c 48       	lddpc	r8,80007a20 <nav_filelist_set+0x204>
80007914:	f1 39 00 2c 	ld.ub	r9,r8[44]
80007918:	30 08       	mov	r8,0
8000791a:	f0 09 18 00 	cp.b	r9,r8
8000791e:	5f 18       	srne	r8
80007920:	10 9c       	mov	r12,r8
80007922:	f0 1f 00 43 	mcall	80007a2c <nav_filelist_set+0x210>
80007926:	18 98       	mov	r8,r12
80007928:	58 08       	cp.w	r8,0
8000792a:	c2 f0       	breq	80007988 <nav_filelist_set+0x16c>
         {
           // HERE, the file entry match with the type searched

           if( b_find_last_entry )
8000792c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007930:	30 08       	mov	r8,0
80007932:	f0 09 18 00 	cp.b	r9,r8
80007936:	c0 20       	breq	8000793a <nav_filelist_set+0x11e>
             continue;  // The search of last directory is on going then continue the search
80007938:	c5 b8       	rjmp	800079ee <nav_filelist_set+0x1d2>

           // Update position in directory
           if ( FS_FIND_NEXT == b_direction )
8000793a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000793e:	30 08       	mov	r8,0
80007940:	f0 09 18 00 	cp.b	r9,r8
80007944:	c0 a0       	breq	80007958 <nav_filelist_set+0x13c>
              fs_g_nav.u16_pos_sel_file++;
80007946:	4b 78       	lddpc	r8,80007a20 <nav_filelist_set+0x204>
80007948:	f1 08 00 24 	ld.sh	r8,r8[36]
8000794c:	2f f8       	sub	r8,-1
8000794e:	5c 88       	casts.h	r8
80007950:	4b 49       	lddpc	r9,80007a20 <nav_filelist_set+0x204>
80007952:	f3 58 00 24 	st.h	r9[36],r8
80007956:	c0 98       	rjmp	80007968 <nav_filelist_set+0x14c>
           else
              fs_g_nav.u16_pos_sel_file--;
80007958:	4b 28       	lddpc	r8,80007a20 <nav_filelist_set+0x204>
8000795a:	f1 08 00 24 	ld.sh	r8,r8[36]
8000795e:	20 18       	sub	r8,1
80007960:	5c 88       	casts.h	r8
80007962:	4b 09       	lddpc	r9,80007a20 <nav_filelist_set+0x204>
80007964:	f3 58 00 24 	st.h	r9[36],r8

           if (0 == u16_nb)
80007968:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8000796c:	30 08       	mov	r8,0
8000796e:	f0 09 19 00 	cp.h	r9,r8
80007972:	c0 51       	brne	8000797c <nav_filelist_set+0x160>
           {
              // It is the end of move then update file information
              fat_get_entry_info();
80007974:	f0 1f 00 2f 	mcall	80007a30 <nav_filelist_set+0x214>
              return true;         // NB FILE FIND
80007978:	30 18       	mov	r8,1
8000797a:	c4 a8       	rjmp	80007a0e <nav_filelist_set+0x1f2>
           }
           u16_nb--;
8000797c:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80007980:	20 18       	sub	r8,1
80007982:	ef 58 ff f4 	st.h	r7[-12],r8
           continue;
80007986:	c3 48       	rjmp	800079ee <nav_filelist_set+0x1d2>
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
80007988:	4a 78       	lddpc	r8,80007a24 <nav_filelist_set+0x208>
8000798a:	11 89       	ld.ub	r9,r8[0x0]
8000798c:	30 a8       	mov	r8,10
8000798e:	f0 09 18 00 	cp.b	r9,r8
80007992:	c0 80       	breq	800079a2 <nav_filelist_set+0x186>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
80007994:	4a 48       	lddpc	r8,80007a24 <nav_filelist_set+0x208>
80007996:	11 89       	ld.ub	r9,r8[0x0]
           continue;
         }
      }

      // Here error, check type of error
      if(( FS_ERR_ENTRY_EMPTY == fs_g_status )
80007998:	31 a8       	mov	r8,26
8000799a:	f0 09 18 00 	cp.b	r9,r8
8000799e:	fe 91 ff 68 	brne	8000786e <nav_filelist_set+0x52>
      || ( FS_ERR_OUT_LIST    == fs_g_status ) )
      {
         // Here, end of the directory
         if( b_find_last_entry )
800079a2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800079a6:	30 08       	mov	r8,0
800079a8:	f0 09 18 00 	cp.b	r9,r8
800079ac:	c0 90       	breq	800079be <nav_filelist_set+0x1a2>
         {
            // Re enable the previous command at the end of directory to find the last directory entry
            b_find_last_entry = false;
800079ae:	30 08       	mov	r8,0
800079b0:	ef 68 ff ff 	st.b	r7[-1],r8
            fs_g_nav.b_mode_nav = FS_DIR;
800079b4:	49 b9       	lddpc	r9,80007a20 <nav_filelist_set+0x204>
800079b6:	30 08       	mov	r8,0
800079b8:	f3 68 00 2c 	st.b	r9[44],r8
            continue;
800079bc:	c1 98       	rjmp	800079ee <nav_filelist_set+0x1d2>
         }
         // Here, a next action is on going
         if ( (FS_FILE == fs_g_nav.b_mode_nav) || fs_g_nav.b_mode_nav_single )
800079be:	49 98       	lddpc	r8,80007a20 <nav_filelist_set+0x204>
800079c0:	f1 39 00 2c 	ld.ub	r9,r8[44]
800079c4:	30 18       	mov	r8,1
800079c6:	f0 09 18 00 	cp.b	r9,r8
800079ca:	c0 60       	breq	800079d6 <nav_filelist_set+0x1ba>
800079cc:	49 58       	lddpc	r8,80007a20 <nav_filelist_set+0x204>
800079ce:	f1 38 00 2d 	ld.ub	r8,r8[45]
800079d2:	58 08       	cp.w	r8,0
800079d4:	c0 50       	breq	800079de <nav_filelist_set+0x1c2>
         {
            // End of next file action then end of next action
            fs_g_status = FS_ERR_NO_FIND; // No file found
800079d6:	49 49       	lddpc	r9,80007a24 <nav_filelist_set+0x208>
800079d8:	30 98       	mov	r8,9
800079da:	b2 88       	st.b	r9[0x0],r8
            break;                        // end of search
800079dc:	c0 a8       	rjmp	800079f0 <nav_filelist_set+0x1d4>
         }else{
            // End of next dir action then starts the next file action at the beginning of directory
            fs_g_nav_fast.u16_entry_pos_sel_file = 0xFFFF;
800079de:	49 09       	lddpc	r9,80007a1c <nav_filelist_set+0x200>
800079e0:	3f f8       	mov	r8,-1
800079e2:	b2 18       	st.h	r9[0x2],r8
            fs_g_nav.b_mode_nav = FS_FILE;
800079e4:	48 f9       	lddpc	r9,80007a20 <nav_filelist_set+0x204>
800079e6:	30 18       	mov	r8,1
800079e8:	f3 68 00 2c 	st.b	r9[44],r8
         }
      }
   }  // end of loop while(1)
800079ec:	c4 2b       	rjmp	80007870 <nav_filelist_set+0x54>
800079ee:	c4 1b       	rjmp	80007870 <nav_filelist_set+0x54>

   fs_g_nav.b_mode_nav                    = b_save_entry_type;
800079f0:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800079f4:	48 b9       	lddpc	r9,80007a20 <nav_filelist_set+0x204>
800079f6:	f3 68 00 2c 	st.b	r9[44],r8
   fs_g_nav_fast.u16_entry_pos_sel_file   = u16_ptr_save_entry;
800079fa:	48 99       	lddpc	r9,80007a1c <nav_filelist_set+0x200>
800079fc:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80007a00:	b2 18       	st.h	r9[0x2],r8
   fs_g_nav.u16_pos_sel_file              = u16_save_pos_sel_file;
80007a02:	48 89       	lddpc	r9,80007a20 <nav_filelist_set+0x204>
80007a04:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80007a08:	f3 58 00 24 	st.h	r9[36],r8
   return false;
80007a0c:	30 08       	mov	r8,0
}
80007a0e:	10 9c       	mov	r12,r8
80007a10:	2f cd       	sub	sp,-16
80007a12:	e3 cd 80 80 	ldm	sp++,r7,pc
80007a16:	00 00       	add	r0,r0
80007a18:	80 00       	ld.sh	r0,r0[0x0]
80007a1a:	3b 70       	mov	r0,-73
80007a1c:	00 00       	add	r0,r0
80007a1e:	11 9c       	ld.ub	r12,r8[0x1]
80007a20:	00 00       	add	r0,r0
80007a22:	11 50       	ld.sh	r0,--r8
80007a24:	00 00       	add	r0,r0
80007a26:	11 a0       	ld.ub	r0,r8[0x2]
80007a28:	80 00       	ld.sh	r0,r0[0x0]
80007a2a:	4f 64       	lddpc	r4,80007c00 <nav_file_name+0x174>
80007a2c:	80 00       	ld.sh	r0,r0[0x0]
80007a2e:	50 14       	stdsp	sp[0x4],r4
80007a30:	80 00       	ld.sh	r0,r0[0x0]
80007a32:	50 e0       	stdsp	sp[0x38],r0

80007a34 <nav_filelist_findname>:
//! @verbatim
//! This function starts a search at the next position of the current in file list
//! @endverbatim
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
80007a34:	eb cd 40 80 	pushm	r7,lr
80007a38:	1a 97       	mov	r7,sp
80007a3a:	20 2d       	sub	sp,8
80007a3c:	ef 4c ff fc 	st.w	r7[-4],r12
80007a40:	16 98       	mov	r8,r11
80007a42:	ef 68 ff f8 	st.b	r7[-8],r8
80007a46:	c0 28       	rjmp	80007a4a <nav_filelist_findname+0x16>
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
         return false;
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
         return true;
   }
80007a48:	d7 03       	nop
//!
bool  nav_filelist_findname( const FS_STRING sz_name , bool b_match_case )
{
   while( 1 )
   {
      if ( !nav_filelist_set( 0, FS_FIND_NEXT ))
80007a4a:	30 1b       	mov	r11,1
80007a4c:	30 0c       	mov	r12,0
80007a4e:	f0 1f 00 0e 	mcall	80007a84 <nav_filelist_findname+0x50>
80007a52:	18 98       	mov	r8,r12
80007a54:	ec 18 00 01 	eorl	r8,0x1
80007a58:	5c 58       	castu.b	r8
80007a5a:	c0 30       	breq	80007a60 <nav_filelist_findname+0x2c>
         return false;
80007a5c:	30 08       	mov	r8,0
80007a5e:	c0 e8       	rjmp	80007a7a <nav_filelist_findname+0x46>
      if ( nav_file_name( sz_name , 0 , FS_NAME_CHECK , b_match_case ))
80007a60:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80007a64:	10 99       	mov	r9,r8
80007a66:	30 0a       	mov	r10,0
80007a68:	30 0b       	mov	r11,0
80007a6a:	ee fc ff fc 	ld.w	r12,r7[-4]
80007a6e:	f0 1f 00 07 	mcall	80007a88 <nav_filelist_findname+0x54>
80007a72:	18 98       	mov	r8,r12
80007a74:	58 08       	cp.w	r8,0
80007a76:	ce 90       	breq	80007a48 <nav_filelist_findname+0x14>
         return true;
80007a78:	30 18       	mov	r8,1
   }
}
80007a7a:	10 9c       	mov	r12,r8
80007a7c:	2f ed       	sub	sp,-8
80007a7e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007a82:	00 00       	add	r0,r0
80007a84:	80 00       	ld.sh	r0,r0[0x0]
80007a86:	78 1c       	ld.w	r12,r12[0x4]
80007a88:	80 00       	ld.sh	r0,r0[0x0]
80007a8a:	7a 8c       	ld.w	r12,sp[0x20]

80007a8c <nav_file_name>:
//!
//! @return  false in case of error, see global value "fs_g_status" for more detail
//! @return  true otherwise
//!
bool  nav_file_name( FS_STRING sz_name , uint8_t u8_size_max , bool b_mode , bool b_match_case  )
{
80007a8c:	eb cd 40 80 	pushm	r7,lr
80007a90:	1a 97       	mov	r7,sp
80007a92:	20 6d       	sub	sp,24
80007a94:	ef 4c ff f4 	st.w	r7[-12],r12
80007a98:	12 98       	mov	r8,r9
80007a9a:	16 99       	mov	r9,r11
80007a9c:	ef 69 ff f0 	st.b	r7[-16],r9
80007aa0:	14 99       	mov	r9,r10
80007aa2:	ef 69 ff ec 	st.b	r7[-20],r9
80007aa6:	ef 68 ff e8 	st.b	r7[-24],r8
   _MEM_TYPE_SLOW_   uint16_t u16_lgt;   // Only used if LENGTH string mode enabled
   uint16_t  u16_ptr_save_entry;
   bool  b_readshortname = false;
80007aaa:	30 08       	mov	r8,0
80007aac:	ef 68 ff ff 	st.b	r7[-1],r8

   if ( !fat_check_mount_select())
80007ab0:	f0 1f 00 50 	mcall	80007bf0 <nav_file_name+0x164>
80007ab4:	18 98       	mov	r8,r12
80007ab6:	ec 18 00 01 	eorl	r8,0x1
80007aba:	5c 58       	castu.b	r8
80007abc:	c0 30       	breq	80007ac2 <nav_file_name+0x36>
      return false;
80007abe:	30 08       	mov	r8,0
80007ac0:	c9 48       	rjmp	80007be8 <nav_file_name+0x15c>

   // Check if the string size is not 0
   if( (FS_NAME_GET == b_mode)
80007ac2:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80007ac6:	30 08       	mov	r8,0
80007ac8:	f0 09 18 00 	cp.b	r9,r8
80007acc:	c0 90       	breq	80007ade <nav_file_name+0x52>
80007ace:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80007ad2:	30 08       	mov	r8,0
80007ad4:	f0 09 18 00 	cp.b	r9,r8
80007ad8:	c0 31       	brne	80007ade <nav_file_name+0x52>
   &&  (0 == u8_size_max) )
   {
      return true;
80007ada:	30 18       	mov	r8,1
80007adc:	c8 68       	rjmp	80007be8 <nav_file_name+0x15c>
   }

   // Save the current entry position
   u16_ptr_save_entry = fs_g_nav_fast.u16_entry_pos_sel_file;
80007ade:	4c 68       	lddpc	r8,80007bf4 <nav_file_name+0x168>
80007ae0:	90 18       	ld.sh	r8,r8[0x2]
80007ae2:	ef 58 ff fc 	st.h	r7[-4],r8
   // if it is the beginning of the directory
   if ( 0 == fs_g_nav_fast.u16_entry_pos_sel_file )
80007ae6:	4c 48       	lddpc	r8,80007bf4 <nav_file_name+0x168>
80007ae8:	90 18       	ld.sh	r8,r8[0x2]
80007aea:	58 08       	cp.w	r8,0
80007aec:	c0 51       	brne	80007af6 <nav_file_name+0x6a>
   {
      b_readshortname = true;                   // It isn't possible to have a long name
80007aee:	30 18       	mov	r8,1
80007af0:	ef 68 ff ff 	st.b	r7[-1],r8
80007af4:	c0 78       	rjmp	80007b02 <nav_file_name+0x76>
   }
   else
   {
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Initialize entry position to search the first long name entry
80007af6:	4c 08       	lddpc	r8,80007bf4 <nav_file_name+0x168>
80007af8:	90 18       	ld.sh	r8,r8[0x2]
80007afa:	20 18       	sub	r8,1
80007afc:	5c 88       	casts.h	r8
80007afe:	4b e9       	lddpc	r9,80007bf4 <nav_file_name+0x168>
80007b00:	b2 18       	st.h	r9[0x2],r8
   }

   // Loop in directory entry
   u16_lgt = 0;
80007b02:	30 08       	mov	r8,0
80007b04:	ef 58 ff fa 	st.h	r7[-6],r8
   while( 1 )
   {
      if ( !fat_read_dir())
80007b08:	f0 1f 00 3c 	mcall	80007bf8 <nav_file_name+0x16c>
80007b0c:	18 98       	mov	r8,r12
80007b0e:	ec 18 00 01 	eorl	r8,0x1
80007b12:	5c 58       	castu.b	r8
80007b14:	c6 61       	brne	80007be0 <nav_file_name+0x154>
         break; // error

      if ( b_readshortname )
80007b16:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80007b1a:	30 08       	mov	r8,0
80007b1c:	f0 09 18 00 	cp.b	r9,r8
80007b20:	c0 d0       	breq	80007b3a <nav_file_name+0xae>
      {
         // No long name present then read short name
         return fat_entry_shortname( sz_name , u8_size_max , b_mode  );
80007b22:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80007b26:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80007b2a:	12 9a       	mov	r10,r9
80007b2c:	10 9b       	mov	r11,r8
80007b2e:	ee fc ff f4 	ld.w	r12,r7[-12]
80007b32:	f0 1f 00 33 	mcall	80007bfc <nav_file_name+0x170>
80007b36:	18 98       	mov	r8,r12
80007b38:	c5 88       	rjmp	80007be8 <nav_file_name+0x15c>
      }

      // Check or read the part of long file name in this entry
      if ( fat_entry_longname( sz_name , u8_size_max , b_mode , b_match_case  ))
80007b3a:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80007b3e:	ef 3a ff ec 	ld.ub	r10,r7[-20]
80007b42:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80007b46:	10 9b       	mov	r11,r8
80007b48:	ee fc ff f4 	ld.w	r12,r7[-12]
80007b4c:	f0 1f 00 2d 	mcall	80007c00 <nav_file_name+0x174>
80007b50:	18 98       	mov	r8,r12
80007b52:	58 08       	cp.w	r8,0
80007b54:	c1 60       	breq	80007b80 <nav_file_name+0xf4>
      {
         if( g_b_string_length )
80007b56:	4a c8       	lddpc	r8,80007c04 <nav_file_name+0x178>
80007b58:	11 88       	ld.ub	r8,r8[0x0]
80007b5a:	58 08       	cp.w	r8,0
80007b5c:	c0 c0       	breq	80007b74 <nav_file_name+0xe8>
         {
            ((FS_STR_UNICODE)sz_name )[0] += u16_lgt;
80007b5e:	ee fa ff f4 	ld.w	r10,r7[-12]
80007b62:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007b66:	90 08       	ld.sh	r8,r8[0x0]
80007b68:	ef 09 ff fa 	ld.sh	r9,r7[-6]
80007b6c:	f2 08 00 08 	add	r8,r9,r8
80007b70:	5c 88       	casts.h	r8
80007b72:	b4 08       	st.h	r10[0x0],r8
         }
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
80007b74:	4a 09       	lddpc	r9,80007bf4 <nav_file_name+0x168>
80007b76:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80007b7a:	b2 18       	st.h	r9[0x2],r8
         return true;
80007b7c:	30 18       	mov	r8,1
80007b7e:	c3 58       	rjmp	80007be8 <nav_file_name+0x15c>
      }

      if ( FS_NO_LAST_LFN_ENTRY != fs_g_status )
80007b80:	4a 28       	lddpc	r8,80007c08 <nav_file_name+0x17c>
80007b82:	11 89       	ld.ub	r9,r8[0x0]
80007b84:	31 08       	mov	r8,16
80007b86:	f0 09 18 00 	cp.b	r9,r8
80007b8a:	c1 00       	breq	80007baa <nav_file_name+0x11e>
      {
         // Go to the main entry file (=short name entry)
         fs_g_nav_fast.u16_entry_pos_sel_file = u16_ptr_save_entry;
80007b8c:	49 a9       	lddpc	r9,80007bf4 <nav_file_name+0x168>
80007b8e:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80007b92:	b2 18       	st.h	r9[0x2],r8

         if ( FS_ERR_ENTRY_BAD == fs_g_status )
80007b94:	49 d8       	lddpc	r8,80007c08 <nav_file_name+0x17c>
80007b96:	11 89       	ld.ub	r9,r8[0x0]
80007b98:	30 b8       	mov	r8,11
80007b9a:	f0 09 18 00 	cp.b	r9,r8
80007b9e:	c2 31       	brne	80007be4 <nav_file_name+0x158>
         {
            // It isn't a long name entry then there aren't long file name
            b_readshortname = true;   // It is mandatory to use the short name
80007ba0:	30 18       	mov	r8,1
80007ba2:	ef 68 ff ff 	st.b	r7[-1],r8
            continue;                 // restart the loop
80007ba6:	d7 03       	nop
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name

   }  // end of loop while(1)
80007ba8:	cb 0b       	rjmp	80007b08 <nav_file_name+0x7c>
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
      }
      if( g_b_string_length )
80007baa:	49 78       	lddpc	r8,80007c04 <nav_file_name+0x178>
80007bac:	11 88       	ld.ub	r8,r8[0x0]
80007bae:	58 08       	cp.w	r8,0
80007bb0:	c0 70       	breq	80007bbe <nav_file_name+0x132>
      {
         u16_lgt += FS_SIZE_LFN_ENTRY;
80007bb2:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80007bb6:	2f 38       	sub	r8,-13
80007bb8:	ef 58 ff fa 	st.h	r7[-6],r8
80007bbc:	c0 b8       	rjmp	80007bd2 <nav_file_name+0x146>
      }
      else
      {
         // Increment the string to store the next part of file name
         sz_name += FS_SIZE_LFN_ENTRY * (Is_unicode? 2 : 1 );
80007bbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007bc2:	2f 38       	sub	r8,-13
80007bc4:	ef 48 ff f4 	st.w	r7[-12],r8
         u8_size_max -= FS_SIZE_LFN_ENTRY;
80007bc8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80007bcc:	20 d8       	sub	r8,13
80007bce:	ef 68 ff f0 	st.b	r7[-16],r8
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name
80007bd2:	48 98       	lddpc	r8,80007bf4 <nav_file_name+0x168>
80007bd4:	90 18       	ld.sh	r8,r8[0x2]
80007bd6:	20 18       	sub	r8,1
80007bd8:	5c 88       	casts.h	r8
80007bda:	48 79       	lddpc	r9,80007bf4 <nav_file_name+0x168>
80007bdc:	b2 18       	st.h	r9[0x2],r8

   }  // end of loop while(1)
80007bde:	c9 5b       	rjmp	80007b08 <nav_file_name+0x7c>
   // Loop in directory entry
   u16_lgt = 0;
   while( 1 )
   {
      if ( !fat_read_dir())
         break; // error
80007be0:	d7 03       	nop
80007be2:	c0 28       	rjmp	80007be6 <nav_file_name+0x15a>
            // It isn't a long name entry then there aren't long file name
            b_readshortname = true;   // It is mandatory to use the short name
            continue;                 // restart the loop
         }
         // here, it is a error system or the string don't match with the file name
         break;
80007be4:	d7 03       	nop
         u8_size_max -= FS_SIZE_LFN_ENTRY;
      }
      fs_g_nav_fast.u16_entry_pos_sel_file--;   // Go to the next part of long file name

   }  // end of loop while(1)
   return false;
80007be6:	30 08       	mov	r8,0
}
80007be8:	10 9c       	mov	r12,r8
80007bea:	2f ad       	sub	sp,-24
80007bec:	e3 cd 80 80 	ldm	sp++,r7,pc
80007bf0:	80 00       	ld.sh	r0,r0[0x0]
80007bf2:	3c 24       	mov	r4,-62
80007bf4:	00 00       	add	r0,r0
80007bf6:	11 9c       	ld.ub	r12,r8[0x1]
80007bf8:	80 00       	ld.sh	r0,r0[0x0]
80007bfa:	4f 64       	lddpc	r4,80007dd0 <sd_mmc_spi_mem_2_ram+0x28>
80007bfc:	80 00       	ld.sh	r0,r0[0x0]
80007bfe:	52 e4       	stdsp	sp[0xb8],r4
80007c00:	80 00       	ld.sh	r0,r0[0x0]
80007c02:	54 c4       	stdsp	sp[0x130],r4
80007c04:	00 00       	add	r0,r0
80007c06:	11 a1       	ld.ub	r1,r8[0x2]
80007c08:	00 00       	add	r0,r0
80007c0a:	11 a0       	ld.ub	r0,r8[0x2]

80007c0c <nav_file_create>:
//! @verbatim
//! If you use this routine to create a file, then you must called file_open() to open this new file
//! @endverbatim
//!
bool  nav_file_create( const FS_STRING sz_name  )
{
80007c0c:	eb cd 40 80 	pushm	r7,lr
80007c10:	1a 97       	mov	r7,sp
80007c12:	20 1d       	sub	sp,4
80007c14:	ef 4c ff fc 	st.w	r7[-4],r12
   // Check if the name already exists
   if (!nav_filelist_reset())
80007c18:	f0 1f 00 1f 	mcall	80007c94 <nav_file_create+0x88>
80007c1c:	18 98       	mov	r8,r12
80007c1e:	ec 18 00 01 	eorl	r8,0x1
80007c22:	5c 58       	castu.b	r8
80007c24:	c0 30       	breq	80007c2a <nav_file_create+0x1e>
      return false;
80007c26:	30 08       	mov	r8,0
80007c28:	c3 18       	rjmp	80007c8a <nav_file_create+0x7e>
   if (nav_filelist_findname(sz_name , false))
80007c2a:	30 0b       	mov	r11,0
80007c2c:	ee fc ff fc 	ld.w	r12,r7[-4]
80007c30:	f0 1f 00 1a 	mcall	80007c98 <nav_file_create+0x8c>
80007c34:	18 98       	mov	r8,r12
80007c36:	58 08       	cp.w	r8,0
80007c38:	c0 60       	breq	80007c44 <nav_file_create+0x38>
   {
      fs_g_status = FS_ERR_FILE_EXIST;
80007c3a:	49 99       	lddpc	r9,80007c9c <nav_file_create+0x90>
80007c3c:	32 a8       	mov	r8,42
80007c3e:	b2 88       	st.b	r9[0x0],r8
      return false;  // File exist -> it is not possible to create this name
80007c40:	30 08       	mov	r8,0
80007c42:	c2 48       	rjmp	80007c8a <nav_file_create+0x7e>
   }
   // FYC: here, the selection is at the end of the list
   // Create name entries
   if ( !fat_create_entry_file_name( sz_name ))
80007c44:	ee fc ff fc 	ld.w	r12,r7[-4]
80007c48:	f0 1f 00 16 	mcall	80007ca0 <nav_file_create+0x94>
80007c4c:	18 98       	mov	r8,r12
80007c4e:	ec 18 00 01 	eorl	r8,0x1
80007c52:	5c 58       	castu.b	r8
80007c54:	c0 30       	breq	80007c5a <nav_file_create+0x4e>
      return false; // error
80007c56:	30 08       	mov	r8,0
80007c58:	c1 98       	rjmp	80007c8a <nav_file_create+0x7e>
   // By default the information about the new file is NULL
   fs_g_nav_entry.u32_cluster = 0;     // No first cluster
80007c5a:	49 38       	lddpc	r8,80007ca4 <nav_file_create+0x98>
80007c5c:	30 09       	mov	r9,0
80007c5e:	91 19       	st.w	r8[0x4],r9
   fs_g_nav_entry.u32_size    = 0;     // The size is null
80007c60:	49 18       	lddpc	r8,80007ca4 <nav_file_create+0x98>
80007c62:	30 09       	mov	r9,0
80007c64:	91 29       	st.w	r8[0x8],r9
   fs_g_nav_entry.u8_attr     = 0;     // Attribute is a file
80007c66:	49 09       	lddpc	r9,80007ca4 <nav_file_create+0x98>
80007c68:	30 08       	mov	r8,0
80007c6a:	b2 a8       	st.b	r9[0x2],r8

   // It is the last FILE of the list
   fs_g_nav.u16_pos_sel_file++;
80007c6c:	48 f8       	lddpc	r8,80007ca8 <nav_file_create+0x9c>
80007c6e:	f1 08 00 24 	ld.sh	r8,r8[36]
80007c72:	2f f8       	sub	r8,-1
80007c74:	5c 88       	casts.h	r8
80007c76:	48 d9       	lddpc	r9,80007ca8 <nav_file_create+0x9c>
80007c78:	f3 58 00 24 	st.h	r9[36],r8
   fs_g_nav.b_mode_nav = FS_FILE;
80007c7c:	48 b9       	lddpc	r9,80007ca8 <nav_file_create+0x9c>
80007c7e:	30 18       	mov	r8,1
80007c80:	f3 68 00 2c 	st.b	r9[44],r8
   return fat_cache_flush();
80007c84:	f0 1f 00 0a 	mcall	80007cac <nav_file_create+0xa0>
80007c88:	18 98       	mov	r8,r12
}
80007c8a:	10 9c       	mov	r12,r8
80007c8c:	2f fd       	sub	sp,-4
80007c8e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007c92:	00 00       	add	r0,r0
80007c94:	80 00       	ld.sh	r0,r0[0x0]
80007c96:	77 f0       	ld.w	r0,r11[0x7c]
80007c98:	80 00       	ld.sh	r0,r0[0x0]
80007c9a:	7a 34       	ld.w	r4,sp[0xc]
80007c9c:	00 00       	add	r0,r0
80007c9e:	11 a0       	ld.ub	r0,r8[0x2]
80007ca0:	80 00       	ld.sh	r0,r0[0x0]
80007ca2:	63 84       	ld.w	r4,r1[0x60]
80007ca4:	00 00       	add	r0,r0
80007ca6:	0f 10       	ld.sh	r0,r7++
80007ca8:	00 00       	add	r0,r0
80007caa:	11 50       	ld.sh	r0,--r8
80007cac:	80 00       	ld.sh	r0,r0[0x0]
80007cae:	58 c8       	cp.w	r8,12

80007cb0 <sd_mmc_spi_mem_init>:

//_____ D E C L A R A T I O N ______________________________________________


void sd_mmc_spi_mem_init(void)
{
80007cb0:	eb cd 40 80 	pushm	r7,lr
80007cb4:	1a 97       	mov	r7,sp
  sd_mmc_spi_internal_init();        // Restart Init of SD/MMC card after previous first init
80007cb6:	f0 1f 00 03 	mcall	80007cc0 <sd_mmc_spi_mem_init+0x10>
}
80007cba:	e3 cd 80 80 	ldm	sp++,r7,pc
80007cbe:	00 00       	add	r0,r0
80007cc0:	80 00       	ld.sh	r0,r0[0x0]
80007cc2:	20 10       	sub	r0,1

80007cc4 <sd_mmc_spi_test_unit_ready>:



Ctrl_status sd_mmc_spi_test_unit_ready(void)
{
80007cc4:	eb cd 40 80 	pushm	r7,lr
80007cc8:	1a 97       	mov	r7,sp
  Sd_mmc_spi_access_signal_on();
  switch (sd_mmc_spi_presence_status)
80007cca:	49 b8       	lddpc	r8,80007d34 <sd_mmc_spi_test_unit_ready+0x70>
80007ccc:	11 88       	ld.ub	r8,r8[0x0]
80007cce:	58 18       	cp.w	r8,1
80007cd0:	c1 40       	breq	80007cf8 <sd_mmc_spi_test_unit_ready+0x34>
80007cd2:	58 28       	cp.w	r8,2
80007cd4:	c2 30       	breq	80007d1a <sd_mmc_spi_test_unit_ready+0x56>
80007cd6:	58 08       	cp.w	r8,0
80007cd8:	c2 61       	brne	80007d24 <sd_mmc_spi_test_unit_ready+0x60>
  {
    case SD_MMC_REMOVED:
      sd_mmc_spi_init_done = false;
80007cda:	49 89       	lddpc	r9,80007d38 <sd_mmc_spi_test_unit_ready+0x74>
80007cdc:	30 08       	mov	r8,0
80007cde:	b2 88       	st.b	r9[0x0],r8
      if (sd_mmc_spi_mem_check())
80007ce0:	f0 1f 00 17 	mcall	80007d3c <sd_mmc_spi_test_unit_ready+0x78>
80007ce4:	18 98       	mov	r8,r12
80007ce6:	58 08       	cp.w	r8,0
80007ce8:	c0 60       	breq	80007cf4 <sd_mmc_spi_test_unit_ready+0x30>
      {
        sd_mmc_spi_presence_status = SD_MMC_INSERTED;
80007cea:	49 39       	lddpc	r9,80007d34 <sd_mmc_spi_test_unit_ready+0x70>
80007cec:	30 18       	mov	r8,1
80007cee:	b2 88       	st.b	r9[0x0],r8
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80007cf0:	30 38       	mov	r8,3
80007cf2:	c1 d8       	rjmp	80007d2c <sd_mmc_spi_test_unit_ready+0x68>
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80007cf4:	30 28       	mov	r8,2
80007cf6:	c1 b8       	rjmp	80007d2c <sd_mmc_spi_test_unit_ready+0x68>

    case SD_MMC_INSERTED:
      if (!sd_mmc_spi_mem_check())
80007cf8:	f0 1f 00 11 	mcall	80007d3c <sd_mmc_spi_test_unit_ready+0x78>
80007cfc:	18 98       	mov	r8,r12
80007cfe:	ec 18 00 01 	eorl	r8,0x1
80007d02:	5c 58       	castu.b	r8
80007d04:	c0 90       	breq	80007d16 <sd_mmc_spi_test_unit_ready+0x52>
      {
        sd_mmc_spi_presence_status = SD_MMC_REMOVING;
80007d06:	48 c9       	lddpc	r9,80007d34 <sd_mmc_spi_test_unit_ready+0x70>
80007d08:	30 28       	mov	r8,2
80007d0a:	b2 88       	st.b	r9[0x0],r8
        sd_mmc_spi_init_done = false;
80007d0c:	48 b9       	lddpc	r9,80007d38 <sd_mmc_spi_test_unit_ready+0x74>
80007d0e:	30 08       	mov	r8,0
80007d10:	b2 88       	st.b	r9[0x0],r8
        Sd_mmc_spi_access_signal_off();
        return CTRL_BUSY;
80007d12:	30 38       	mov	r8,3
80007d14:	c0 c8       	rjmp	80007d2c <sd_mmc_spi_test_unit_ready+0x68>
      }
      Sd_mmc_spi_access_signal_off();
      return CTRL_GOOD;
80007d16:	30 08       	mov	r8,0
80007d18:	c0 a8       	rjmp	80007d2c <sd_mmc_spi_test_unit_ready+0x68>

    case SD_MMC_REMOVING:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80007d1a:	48 79       	lddpc	r9,80007d34 <sd_mmc_spi_test_unit_ready+0x70>
80007d1c:	30 08       	mov	r8,0
80007d1e:	b2 88       	st.b	r9[0x0],r8
      Sd_mmc_spi_access_signal_off();
      return CTRL_NO_PRESENT;
80007d20:	30 28       	mov	r8,2
80007d22:	c0 58       	rjmp	80007d2c <sd_mmc_spi_test_unit_ready+0x68>

    default:
      sd_mmc_spi_presence_status = SD_MMC_REMOVED;
80007d24:	48 49       	lddpc	r9,80007d34 <sd_mmc_spi_test_unit_ready+0x70>
80007d26:	30 08       	mov	r8,0
80007d28:	b2 88       	st.b	r9[0x0],r8
      Sd_mmc_spi_access_signal_off();
      return CTRL_BUSY;
80007d2a:	30 38       	mov	r8,3
    }
    else
      return CTRL_NO_PRESENT;
  }
*/
}
80007d2c:	10 9c       	mov	r12,r8
80007d2e:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d32:	00 00       	add	r0,r0
80007d34:	00 00       	add	r0,r0
80007d36:	00 08       	add	r8,r0
80007d38:	00 00       	add	r0,r0
80007d3a:	05 f8       	ld.ub	r8,r2[0x7]
80007d3c:	80 00       	ld.sh	r0,r0[0x0]
80007d3e:	2a f8       	sub	r8,-81

80007d40 <sd_mmc_spi_read_capacity>:



Ctrl_status sd_mmc_spi_read_capacity(uint32_t *nb_sector)
{
80007d40:	eb cd 40 80 	pushm	r7,lr
80007d44:	1a 97       	mov	r7,sp
80007d46:	20 1d       	sub	sp,4
80007d48:	ef 4c ff fc 	st.w	r7[-4],r12
//   sd_mmc_spi_check_presence();   // omitted because creates interferences with "sd_mmc_spi_test_unit_ready()" function
   Sd_mmc_spi_access_signal_on();

   if (!sd_mmc_spi_init_done)
80007d4c:	48 d8       	lddpc	r8,80007d80 <sd_mmc_spi_read_capacity+0x40>
80007d4e:	11 88       	ld.ub	r8,r8[0x0]
80007d50:	ec 18 00 01 	eorl	r8,0x1
80007d54:	5c 58       	castu.b	r8
80007d56:	c0 30       	breq	80007d5c <sd_mmc_spi_read_capacity+0x1c>
   {
      sd_mmc_spi_mem_init();
80007d58:	f0 1f 00 0b 	mcall	80007d84 <sd_mmc_spi_read_capacity+0x44>
   }

   if (sd_mmc_spi_init_done)
80007d5c:	48 98       	lddpc	r8,80007d80 <sd_mmc_spi_read_capacity+0x40>
80007d5e:	11 88       	ld.ub	r8,r8[0x0]
80007d60:	58 08       	cp.w	r8,0
80007d62:	c0 a0       	breq	80007d76 <sd_mmc_spi_read_capacity+0x36>
   {
     *nb_sector = sd_mmc_spi_last_block_address+1;
80007d64:	48 98       	lddpc	r8,80007d88 <sd_mmc_spi_read_capacity+0x48>
80007d66:	70 08       	ld.w	r8,r8[0x0]
80007d68:	f0 c9 ff ff 	sub	r9,r8,-1
80007d6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80007d70:	91 09       	st.w	r8[0x0],r9
     Sd_mmc_spi_access_signal_off();
     return CTRL_GOOD;
80007d72:	30 08       	mov	r8,0
80007d74:	c0 28       	rjmp	80007d78 <sd_mmc_spi_read_capacity+0x38>
   }
   else
   {
     Sd_mmc_spi_access_signal_off();
     return CTRL_NO_PRESENT;
80007d76:	30 28       	mov	r8,2
   }
}
80007d78:	10 9c       	mov	r12,r8
80007d7a:	2f fd       	sub	sp,-4
80007d7c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007d80:	00 00       	add	r0,r0
80007d82:	05 f8       	ld.ub	r8,r2[0x7]
80007d84:	80 00       	ld.sh	r0,r0[0x0]
80007d86:	7c b0       	ld.w	r0,lr[0x2c]
80007d88:	00 00       	add	r0,r0
80007d8a:	0e f0       	st.b	--r7,r0

80007d8c <sd_mmc_spi_wr_protect>:
//! which cannot be for a SD_MMC.
//!
//! @return false  -> the memory is not write-protected (always)
//!/
bool  sd_mmc_spi_wr_protect(void)
{
80007d8c:	eb cd 40 80 	pushm	r7,lr
80007d90:	1a 97       	mov	r7,sp
   return false;
80007d92:	30 08       	mov	r8,0
}
80007d94:	10 9c       	mov	r12,r8
80007d96:	e3 cd 80 80 	ldm	sp++,r7,pc

80007d9a <sd_mmc_spi_removal>:
//! @brief This function tells if the memory has been removed or not.
//!
//! @return false  -> The memory isn't removed
//!/
bool  sd_mmc_spi_removal(void)
{
80007d9a:	eb cd 40 80 	pushm	r7,lr
80007d9e:	1a 97       	mov	r7,sp
  return false;
80007da0:	30 08       	mov	r8,0
//  return ((sd_mmc_spi_check_presence()) ? false : true);
}
80007da2:	10 9c       	mov	r12,r8
80007da4:	e3 cd 80 80 	ldm	sp++,r7,pc

80007da8 <sd_mmc_spi_mem_2_ram>:
//------------ Standard functions for read/write 1 sector to 1 sector ram buffer -----------------

#if ACCESS_MEM_TO_RAM == true

Ctrl_status sd_mmc_spi_mem_2_ram(uint32_t addr, void *ram)
{
80007da8:	eb cd 40 80 	pushm	r7,lr
80007dac:	1a 97       	mov	r7,sp
80007dae:	20 2d       	sub	sp,8
80007db0:	ef 4c ff fc 	st.w	r7[-4],r12
80007db4:	ef 4b ff f8 	st.w	r7[-8],r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80007db8:	f0 1f 00 1c 	mcall	80007e28 <sd_mmc_spi_mem_2_ram+0x80>

   if (!sd_mmc_spi_init_done)
80007dbc:	49 c8       	lddpc	r8,80007e2c <sd_mmc_spi_mem_2_ram+0x84>
80007dbe:	11 88       	ld.ub	r8,r8[0x0]
80007dc0:	ec 18 00 01 	eorl	r8,0x1
80007dc4:	5c 58       	castu.b	r8
80007dc6:	c0 30       	breq	80007dcc <sd_mmc_spi_mem_2_ram+0x24>
   {
      sd_mmc_spi_mem_init();
80007dc8:	f0 1f 00 1a 	mcall	80007e30 <sd_mmc_spi_mem_2_ram+0x88>
   }

   if (!sd_mmc_spi_init_done)
80007dcc:	49 88       	lddpc	r8,80007e2c <sd_mmc_spi_mem_2_ram+0x84>
80007dce:	11 88       	ld.ub	r8,r8[0x0]
80007dd0:	ec 18 00 01 	eorl	r8,0x1
80007dd4:	5c 58       	castu.b	r8
80007dd6:	c0 30       	breq	80007ddc <sd_mmc_spi_mem_2_ram+0x34>
     return CTRL_NO_PRESENT;
80007dd8:	30 28       	mov	r8,2
80007dda:	c2 28       	rjmp	80007e1e <sd_mmc_spi_mem_2_ram+0x76>

   if( !sd_mmc_spi_read_open(addr) )
80007ddc:	ee fc ff fc 	ld.w	r12,r7[-4]
80007de0:	f0 1f 00 15 	mcall	80007e34 <sd_mmc_spi_mem_2_ram+0x8c>
80007de4:	18 98       	mov	r8,r12
80007de6:	ec 18 00 01 	eorl	r8,0x1
80007dea:	5c 58       	castu.b	r8
80007dec:	c1 31       	brne	80007e12 <sd_mmc_spi_mem_2_ram+0x6a>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_sector_to_ram(ram))
80007dee:	ee fc ff f8 	ld.w	r12,r7[-8]
80007df2:	f0 1f 00 12 	mcall	80007e38 <sd_mmc_spi_mem_2_ram+0x90>
80007df6:	18 98       	mov	r8,r12
80007df8:	ec 18 00 01 	eorl	r8,0x1
80007dfc:	5c 58       	castu.b	r8
80007dfe:	c0 c1       	brne	80007e16 <sd_mmc_spi_mem_2_ram+0x6e>
     goto sd_mmc_spi_mem_2_ram_fail;

   if( !sd_mmc_spi_read_close() )
80007e00:	f0 1f 00 0f 	mcall	80007e3c <sd_mmc_spi_mem_2_ram+0x94>
80007e04:	18 98       	mov	r8,r12
80007e06:	ec 18 00 01 	eorl	r8,0x1
80007e0a:	5c 58       	castu.b	r8
80007e0c:	c0 71       	brne	80007e1a <sd_mmc_spi_mem_2_ram+0x72>
     goto sd_mmc_spi_mem_2_ram_fail;

   Sd_mmc_spi_access_signal_off();
   return CTRL_GOOD;
80007e0e:	30 08       	mov	r8,0
80007e10:	c0 78       	rjmp	80007e1e <sd_mmc_spi_mem_2_ram+0x76>

   if (!sd_mmc_spi_init_done)
     return CTRL_NO_PRESENT;

   if( !sd_mmc_spi_read_open(addr) )
     goto sd_mmc_spi_mem_2_ram_fail;
80007e12:	d7 03       	nop
80007e14:	c0 48       	rjmp	80007e1c <sd_mmc_spi_mem_2_ram+0x74>

   if( !sd_mmc_spi_read_sector_to_ram(ram))
     goto sd_mmc_spi_mem_2_ram_fail;
80007e16:	d7 03       	nop
80007e18:	c0 28       	rjmp	80007e1c <sd_mmc_spi_mem_2_ram+0x74>

   if( !sd_mmc_spi_read_close() )
     goto sd_mmc_spi_mem_2_ram_fail;
80007e1a:	d7 03       	nop
   Sd_mmc_spi_access_signal_off();
   return CTRL_GOOD;

sd_mmc_spi_mem_2_ram_fail:
   Sd_mmc_spi_access_signal_off();
   return CTRL_FAIL;
80007e1c:	30 18       	mov	r8,1
}
80007e1e:	10 9c       	mov	r12,r8
80007e20:	2f ed       	sub	sp,-8
80007e22:	e3 cd 80 80 	ldm	sp++,r7,pc
80007e26:	00 00       	add	r0,r0
80007e28:	80 00       	ld.sh	r0,r0[0x0]
80007e2a:	2a 5c       	sub	r12,-91
80007e2c:	00 00       	add	r0,r0
80007e2e:	05 f8       	ld.ub	r8,r2[0x7]
80007e30:	80 00       	ld.sh	r0,r0[0x0]
80007e32:	7c b0       	ld.w	r0,lr[0x2c]
80007e34:	80 00       	ld.sh	r0,r0[0x0]
80007e36:	2b 34       	sub	r4,-77
80007e38:	80 00       	ld.sh	r0,r0[0x0]
80007e3a:	2b c4       	sub	r4,-68
80007e3c:	80 00       	ld.sh	r0,r0[0x0]
80007e3e:	2b 64       	sub	r4,-74

80007e40 <sd_mmc_spi_ram_2_mem>:
//! @return                Ctrl_status
//!   It is ready      ->    CTRL_GOOD
//!   An error occurs  ->    CTRL_FAIL
//!
Ctrl_status    sd_mmc_spi_ram_2_mem(uint32_t addr, const void *ram)
{
80007e40:	eb cd 40 80 	pushm	r7,lr
80007e44:	1a 97       	mov	r7,sp
80007e46:	20 2d       	sub	sp,8
80007e48:	ef 4c ff fc 	st.w	r7[-4],r12
80007e4c:	ef 4b ff f8 	st.w	r7[-8],r11
   Sd_mmc_spi_access_signal_on();
   sd_mmc_spi_check_presence();
80007e50:	f0 1f 00 14 	mcall	80007ea0 <sd_mmc_spi_ram_2_mem+0x60>

   if (!sd_mmc_spi_init_done)
80007e54:	49 48       	lddpc	r8,80007ea4 <sd_mmc_spi_ram_2_mem+0x64>
80007e56:	11 88       	ld.ub	r8,r8[0x0]
80007e58:	ec 18 00 01 	eorl	r8,0x1
80007e5c:	5c 58       	castu.b	r8
80007e5e:	c0 30       	breq	80007e64 <sd_mmc_spi_ram_2_mem+0x24>
   {
      sd_mmc_spi_mem_init();
80007e60:	f0 1f 00 12 	mcall	80007ea8 <sd_mmc_spi_ram_2_mem+0x68>
   }

   if (sd_mmc_spi_init_done)
80007e64:	49 08       	lddpc	r8,80007ea4 <sd_mmc_spi_ram_2_mem+0x64>
80007e66:	11 88       	ld.ub	r8,r8[0x0]
80007e68:	58 08       	cp.w	r8,0
80007e6a:	c1 60       	breq	80007e96 <sd_mmc_spi_ram_2_mem+0x56>
   {
     sd_mmc_spi_write_open(addr);
80007e6c:	ee fc ff fc 	ld.w	r12,r7[-4]
80007e70:	f0 1f 00 0f 	mcall	80007eac <sd_mmc_spi_ram_2_mem+0x6c>
     if (!sd_mmc_spi_write_sector_from_ram(ram))
80007e74:	ee fc ff f8 	ld.w	r12,r7[-8]
80007e78:	f0 1f 00 0e 	mcall	80007eb0 <sd_mmc_spi_ram_2_mem+0x70>
80007e7c:	18 98       	mov	r8,r12
80007e7e:	ec 18 00 01 	eorl	r8,0x1
80007e82:	5c 58       	castu.b	r8
80007e84:	c0 50       	breq	80007e8e <sd_mmc_spi_ram_2_mem+0x4e>
     {
       sd_mmc_spi_write_close();
80007e86:	f0 1f 00 0c 	mcall	80007eb4 <sd_mmc_spi_ram_2_mem+0x74>
       Sd_mmc_spi_access_signal_off();
       return CTRL_NO_PRESENT;
80007e8a:	30 28       	mov	r8,2
80007e8c:	c0 68       	rjmp	80007e98 <sd_mmc_spi_ram_2_mem+0x58>
     }
     sd_mmc_spi_write_close();
80007e8e:	f0 1f 00 0a 	mcall	80007eb4 <sd_mmc_spi_ram_2_mem+0x74>
     Sd_mmc_spi_access_signal_off();
     return CTRL_GOOD;
80007e92:	30 08       	mov	r8,0
80007e94:	c0 28       	rjmp	80007e98 <sd_mmc_spi_ram_2_mem+0x58>
   }
   Sd_mmc_spi_access_signal_off();

   return CTRL_NO_PRESENT;
80007e96:	30 28       	mov	r8,2
}
80007e98:	10 9c       	mov	r12,r8
80007e9a:	2f ed       	sub	sp,-8
80007e9c:	e3 cd 80 80 	ldm	sp++,r7,pc
80007ea0:	80 00       	ld.sh	r0,r0[0x0]
80007ea2:	2a 5c       	sub	r12,-91
80007ea4:	00 00       	add	r0,r0
80007ea6:	05 f8       	ld.ub	r8,r2[0x7]
80007ea8:	80 00       	ld.sh	r0,r0[0x0]
80007eaa:	7c b0       	ld.w	r0,lr[0x2c]
80007eac:	80 00       	ld.sh	r0,r0[0x0]
80007eae:	2b 88       	sub	r8,-72
80007eb0:	80 00       	ld.sh	r0,r0[0x0]
80007eb2:	2d 78       	sub	r8,-41
80007eb4:	80 00       	ld.sh	r0,r0[0x0]
80007eb6:	2b b8       	sub	r8,-69

80007eb8 <board_init>:
#if defined (CONF_BOARD_AT45DBX)
#  define AT45DBX_MEM_CNT  1
#endif

void board_init(void)
{
80007eb8:	eb cd 40 80 	pushm	r7,lr
80007ebc:	1a 97       	mov	r7,sp
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007ebe:	30 3b       	mov	r11,3
80007ec0:	33 bc       	mov	r12,59
80007ec2:	f0 1f 00 1f 	mcall	80007f3c <board_init+0x84>
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007ec6:	30 3b       	mov	r11,3
80007ec8:	33 cc       	mov	r12,60
80007eca:	f0 1f 00 1d 	mcall	80007f3c <board_init+0x84>
	gpio_configure_pin(LED2_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007ece:	30 3b       	mov	r11,3
80007ed0:	33 dc       	mov	r12,61
80007ed2:	f0 1f 00 1b 	mcall	80007f3c <board_init+0x84>
	gpio_configure_pin(LED3_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007ed6:	30 3b       	mov	r11,3
80007ed8:	33 ec       	mov	r12,62
80007eda:	f0 1f 00 19 	mcall	80007f3c <board_init+0x84>
	gpio_configure_pin(LED4_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007ede:	30 3b       	mov	r11,3
80007ee0:	33 3c       	mov	r12,51
80007ee2:	f0 1f 00 17 	mcall	80007f3c <board_init+0x84>
	gpio_configure_pin(LED5_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007ee6:	30 3b       	mov	r11,3
80007ee8:	33 4c       	mov	r12,52
80007eea:	f0 1f 00 15 	mcall	80007f3c <board_init+0x84>
	gpio_configure_pin(LED6_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007eee:	30 3b       	mov	r11,3
80007ef0:	33 5c       	mov	r12,53
80007ef2:	f0 1f 00 13 	mcall	80007f3c <board_init+0x84>
	gpio_configure_pin(LED7_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);
80007ef6:	30 3b       	mov	r11,3
80007ef8:	33 6c       	mov	r12,54
80007efa:	f0 1f 00 11 	mcall	80007f3c <board_init+0x84>

	gpio_configure_pin(GPIO_PUSH_BUTTON_0,GPIO_DIR_INPUT);
80007efe:	30 0b       	mov	r11,0
80007f00:	35 8c       	mov	r12,88
80007f02:	f0 1f 00 0f 	mcall	80007f3c <board_init+0x84>
	gpio_configure_pin(GPIO_PUSH_BUTTON_1,GPIO_DIR_INPUT);
80007f06:	30 0b       	mov	r11,0
80007f08:	35 5c       	mov	r12,85
80007f0a:	f0 1f 00 0d 	mcall	80007f3c <board_init+0x84>
	gpio_configure_pin(GPIO_PUSH_BUTTON_2,GPIO_DIR_INPUT);
80007f0e:	30 0b       	mov	r11,0
80007f10:	35 2c       	mov	r12,82
80007f12:	f0 1f 00 0b 	mcall	80007f3c <board_init+0x84>
	gpio_configure_pin(GPIO_JOYSTICK_PUSH,GPIO_DIR_INPUT);
80007f16:	30 0b       	mov	r11,0
80007f18:	31 4c       	mov	r12,20
80007f1a:	f0 1f 00 09 	mcall	80007f3c <board_init+0x84>
	gpio_configure_pin(GPIO_JOYSTICK_LEFT,GPIO_DIR_INPUT);
80007f1e:	30 0b       	mov	r11,0
80007f20:	31 9c       	mov	r12,25
80007f22:	f0 1f 00 07 	mcall	80007f3c <board_init+0x84>
	gpio_configure_pin(GPIO_JOYSTICK_UP,GPIO_DIR_INPUT);
80007f26:	30 0b       	mov	r11,0
80007f28:	31 ac       	mov	r12,26
80007f2a:	f0 1f 00 05 	mcall	80007f3c <board_init+0x84>
	gpio_configure_pin(GPIO_JOYSTICK_DOWN,GPIO_DIR_INPUT);
80007f2e:	30 0b       	mov	r11,0
80007f30:	31 bc       	mov	r12,27
80007f32:	f0 1f 00 03 	mcall	80007f3c <board_init+0x84>
		{USART0_TXD_PIN, USART0_TXD_FUNCTION },
	};
	gpio_enable_module(COMPORT0_GPIO_MAP,
			sizeof(COMPORT0_GPIO_MAP) / sizeof(COMPORT0_GPIO_MAP[0]));
#endif
}
80007f36:	e3 cd 80 80 	ldm	sp++,r7,pc
80007f3a:	00 00       	add	r0,r0
80007f3c:	80 00       	ld.sh	r0,r0[0x0]
80007f3e:	82 ac       	ld.uh	r12,r1[0x4]

80007f40 <LED_Off>:
  return Tst_bits(LED_State, leds);
}


void LED_Off(U32 leds)
{
80007f40:	eb cd 40 80 	pushm	r7,lr
80007f44:	1a 97       	mov	r7,sp
80007f46:	20 4d       	sub	sp,16
80007f48:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80007f4c:	4a 98       	lddpc	r8,80007ff0 <LED_Off+0xb0>
80007f4e:	21 08       	sub	r8,16
80007f50:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80007f54:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f58:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80007f5c:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);
80007f60:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f64:	f0 09 11 ff 	rsub	r9,r8,-1
80007f68:	4a 38       	lddpc	r8,80007ff4 <LED_Off+0xb4>
80007f6a:	70 08       	ld.w	r8,r8[0x0]
80007f6c:	10 69       	and	r9,r8
80007f6e:	4a 28       	lddpc	r8,80007ff4 <LED_Off+0xb4>
80007f70:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80007f72:	c3 78       	rjmp	80007fe0 <LED_Off+0xa0>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
80007f74:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007f78:	5c 98       	brev	r8
80007f7a:	f0 08 12 00 	clz	r8,r8
80007f7e:	5c 58       	castu.b	r8
80007f80:	2f f8       	sub	r8,-1
80007f82:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80007f86:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007f8a:	a5 68       	lsl	r8,0x4
80007f8c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007f90:	f2 08 00 08 	add	r8,r9,r8
80007f94:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80007f98:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007f9c:	70 08       	ld.w	r8,r8[0x0]
80007f9e:	a9 68       	lsl	r8,0x8
80007fa0:	e0 28 f0 00 	sub	r8,61440
80007fa4:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
80007fa8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007fac:	70 19       	ld.w	r9,r8[0x4]
80007fae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fb2:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80007fb6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007fba:	70 19       	ld.w	r9,r8[0x4]
80007fbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fc0:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80007fc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007fc8:	70 19       	ld.w	r9,r8[0x4]
80007fca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007fce:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80007fd0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80007fd4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007fd8:	f2 08 0a 48 	lsr	r8,r9,r8
80007fdc:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Clr_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80007fe0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80007fe4:	58 08       	cp.w	r8,0
80007fe6:	cc 71       	brne	80007f74 <LED_Off+0x34>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
80007fe8:	2f cd       	sub	sp,-16
80007fea:	e3 cd 80 80 	ldm	sp++,r7,pc
80007fee:	00 00       	add	r0,r0
80007ff0:	80 01       	ld.sh	r1,r0[0x0]
80007ff2:	36 38       	mov	r8,99
80007ff4:	00 00       	add	r0,r0
80007ff6:	00 0c       	add	r12,r0

80007ff8 <LED_Toggle>:
  }
}


void LED_Toggle(U32 leds)
{
80007ff8:	eb cd 40 80 	pushm	r7,lr
80007ffc:	1a 97       	mov	r7,sp
80007ffe:	20 4d       	sub	sp,16
80008000:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80008004:	4a 88       	lddpc	r8,800080a4 <LED_Toggle+0xac>
80008006:	21 08       	sub	r8,16
80008008:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8000800c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008010:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80008014:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);
80008018:	4a 48       	lddpc	r8,800080a8 <LED_Toggle+0xb0>
8000801a:	70 09       	ld.w	r9,r8[0x0]
8000801c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008020:	10 59       	eor	r9,r8
80008022:	4a 28       	lddpc	r8,800080a8 <LED_Toggle+0xb0>
80008024:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80008026:	c3 78       	rjmp	80008094 <LED_Toggle+0x9c>
  {
    // Select the next specified LED and toggle it.
    led_shift = 1 + ctz(leds);
80008028:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000802c:	5c 98       	brev	r8
8000802e:	f0 08 12 00 	clz	r8,r8
80008032:	5c 58       	castu.b	r8
80008034:	2f f8       	sub	r8,-1
80008036:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8000803a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000803e:	a5 68       	lsl	r8,0x4
80008040:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008044:	f2 08 00 08 	add	r8,r9,r8
80008048:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8000804c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008050:	70 08       	ld.w	r8,r8[0x0]
80008052:	a9 68       	lsl	r8,0x8
80008054:	e0 28 f0 00 	sub	r8,61440
80008058:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
8000805c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008060:	70 19       	ld.w	r9,r8[0x4]
80008062:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008066:	f1 49 00 5c 	st.w	r8[92],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8000806a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000806e:	70 19       	ld.w	r9,r8[0x4]
80008070:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008074:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80008078:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000807c:	70 19       	ld.w	r9,r8[0x4]
8000807e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008082:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80008084:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008088:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000808c:	f2 08 0a 48 	lsr	r8,r9,r8
80008090:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80008094:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008098:	58 08       	cp.w	r8,0
8000809a:	cc 71       	brne	80008028 <LED_Toggle+0x30>
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8000809c:	2f cd       	sub	sp,-16
8000809e:	e3 cd 80 80 	ldm	sp++,r7,pc
800080a2:	00 00       	add	r0,r0
800080a4:	80 01       	ld.sh	r1,r0[0x0]
800080a6:	36 38       	mov	r8,99
800080a8:	00 00       	add	r0,r0
800080aa:	00 0c       	add	r12,r0

800080ac <flashc_set_wait_state>:
	return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
}


void flashc_set_wait_state(unsigned int wait_state)
{
800080ac:	eb cd 40 80 	pushm	r7,lr
800080b0:	1a 97       	mov	r7,sp
800080b2:	20 2d       	sub	sp,8
800080b4:	ef 4c ff f8 	st.w	r7[-8],r12
	u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800080b8:	fe 68 14 00 	mov	r8,-125952
800080bc:	70 08       	ld.w	r8,r8[0x0]
800080be:	30 09       	mov	r9,0
800080c0:	ef 49 ff fc 	st.w	r7[-4],r9
800080c4:	ef 48 ff fc 	st.w	r7[-4],r8
	u_avr32_flashc_fcr.FCR.fws = wait_state;
800080c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800080cc:	5c 58       	castu.b	r8
800080ce:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800080d2:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800080d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800080da:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
800080de:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800080e2:	fe 68 14 00 	mov	r8,-125952
800080e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800080ea:	91 09       	st.w	r8[0x0],r9
}
800080ec:	2f ed       	sub	sp,-8
800080ee:	e3 cd 80 80 	ldm	sp++,r7,pc
800080f2:	d7 03       	nop

800080f4 <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
800080f4:	eb cd 40 80 	pushm	r7,lr
800080f8:	1a 97       	mov	r7,sp
800080fa:	20 1d       	sub	sp,4
800080fc:	ef 4c ff fc 	st.w	r7[-4],r12
	if (cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ) {
80008100:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008104:	e0 69 8a 3f 	mov	r9,35391
80008108:	ea 19 01 f7 	orh	r9,0x1f7
8000810c:	12 38       	cp.w	r8,r9
8000810e:	e0 88 00 06 	brls	8000811a <flashc_set_bus_freq+0x26>
		// Set 1 WS.
		flashc_set_wait_state(1);
80008112:	30 1c       	mov	r12,1
80008114:	f0 1f 00 05 	mcall	80008128 <flashc_set_bus_freq+0x34>
80008118:	c0 48       	rjmp	80008120 <flashc_set_bus_freq+0x2c>
	} else {
		// Set 0 WS.
		flashc_set_wait_state(0);
8000811a:	30 0c       	mov	r12,0
8000811c:	f0 1f 00 03 	mcall	80008128 <flashc_set_bus_freq+0x34>
	}
}
80008120:	2f fd       	sub	sp,-4
80008122:	e3 cd 80 80 	ldm	sp++,r7,pc
80008126:	00 00       	add	r0,r0
80008128:	80 00       	ld.sh	r0,r0[0x0]
8000812a:	80 ac       	ld.uh	r12,r0[0x4]

8000812c <gpio_enable_module>:
 * \param size The number of pins in \a gpiomap.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
8000812c:	eb cd 40 80 	pushm	r7,lr
80008130:	1a 97       	mov	r7,sp
80008132:	20 4d       	sub	sp,16
80008134:	ef 4c ff f4 	st.w	r7[-12],r12
80008138:	ef 4b ff f0 	st.w	r7[-16],r11
	uint32_t status = GPIO_SUCCESS;
8000813c:	30 08       	mov	r8,0
8000813e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t i;

	for (i = 0; i < size; i++) {
80008142:	30 08       	mov	r8,0
80008144:	ef 48 ff fc 	st.w	r7[-4],r8
80008148:	c1 c8       	rjmp	80008180 <gpio_enable_module+0x54>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
8000814a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000814e:	70 19       	ld.w	r9,r8[0x4]
80008150:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008154:	70 08       	ld.w	r8,r8[0x0]
80008156:	12 9b       	mov	r11,r9
80008158:	10 9c       	mov	r12,r8
8000815a:	f0 1f 00 10 	mcall	80008198 <gpio_enable_module+0x6c>
8000815e:	18 98       	mov	r8,r12
80008160:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008164:	f3 e8 10 08 	or	r8,r9,r8
80008168:	ef 48 ff f8 	st.w	r7[-8],r8
		gpiomap++;
8000816c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008170:	2f 88       	sub	r8,-8
80008172:	ef 48 ff f4 	st.w	r7[-12],r8
uint32_t gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
	uint32_t status = GPIO_SUCCESS;
	uint32_t i;

	for (i = 0; i < size; i++) {
80008176:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000817a:	2f f8       	sub	r8,-1
8000817c:	ef 48 ff fc 	st.w	r7[-4],r8
80008180:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008184:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008188:	10 39       	cp.w	r9,r8
8000818a:	ce 03       	brcs	8000814a <gpio_enable_module+0x1e>
		status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
		gpiomap++;
	}

	return status;
8000818c:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80008190:	10 9c       	mov	r12,r8
80008192:	2f cd       	sub	sp,-16
80008194:	e3 cd 80 80 	ldm	sp++,r7,pc
80008198:	80 00       	ld.sh	r0,r0[0x0]
8000819a:	81 9c       	st.w	r0[0x24],r12

8000819c <gpio_enable_module_pin>:
 * \param function The pin function.
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
uint32_t gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
8000819c:	eb cd 40 80 	pushm	r7,lr
800081a0:	1a 97       	mov	r7,sp
800081a2:	20 3d       	sub	sp,12
800081a4:	ef 4c ff f8 	st.w	r7[-8],r12
800081a8:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800081ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081b0:	a5 98       	lsr	r8,0x5
800081b2:	a9 68       	lsl	r8,0x8
800081b4:	e0 28 f0 00 	sub	r8,61440
800081b8:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Enable the correct function. */
	switch (function) {
800081bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800081c0:	58 18       	cp.w	r8,1
800081c2:	c1 e0       	breq	800081fe <gpio_enable_module_pin+0x62>
800081c4:	c0 63       	brcs	800081d0 <gpio_enable_module_pin+0x34>
800081c6:	58 28       	cp.w	r8,2
800081c8:	c3 20       	breq	8000822c <gpio_enable_module_pin+0x90>
800081ca:	58 38       	cp.w	r8,3
800081cc:	c4 70       	breq	8000825a <gpio_enable_module_pin+0xbe>
800081ce:	c5 d8       	rjmp	80008288 <gpio_enable_module_pin+0xec>
	case 0: /* A function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
800081d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081d4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800081d8:	30 19       	mov	r9,1
800081da:	f2 08 09 48 	lsl	r8,r9,r8
800081de:	10 99       	mov	r9,r8
800081e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081e4:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
800081e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800081ea:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800081ee:	30 19       	mov	r9,1
800081f0:	f2 08 09 48 	lsl	r8,r9,r8
800081f4:	10 99       	mov	r9,r8
800081f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800081fa:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
800081fc:	c4 88       	rjmp	8000828c <gpio_enable_module_pin+0xf0>

	case 1: /* B function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
800081fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008202:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008206:	30 19       	mov	r9,1
80008208:	f2 08 09 48 	lsl	r8,r9,r8
8000820c:	10 99       	mov	r9,r8
8000820e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008212:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1c = 1 << (pin & 0x1F);
80008214:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008218:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000821c:	30 19       	mov	r9,1
8000821e:	f2 08 09 48 	lsl	r8,r9,r8
80008222:	10 99       	mov	r9,r8
80008224:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008228:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
8000822a:	c3 18       	rjmp	8000828c <gpio_enable_module_pin+0xf0>

	case 2: /* C function. */
		gpio_port->pmr0c = 1 << (pin & 0x1F);
8000822c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008230:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008234:	30 19       	mov	r9,1
80008236:	f2 08 09 48 	lsl	r8,r9,r8
8000823a:	10 99       	mov	r9,r8
8000823c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008240:	91 69       	st.w	r8[0x18],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80008242:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008246:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000824a:	30 19       	mov	r9,1
8000824c:	f2 08 09 48 	lsl	r8,r9,r8
80008250:	10 99       	mov	r9,r8
80008252:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008256:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80008258:	c1 a8       	rjmp	8000828c <gpio_enable_module_pin+0xf0>

	case 3: /* D function. */
		gpio_port->pmr0s = 1 << (pin & 0x1F);
8000825a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000825e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008262:	30 19       	mov	r9,1
80008264:	f2 08 09 48 	lsl	r8,r9,r8
80008268:	10 99       	mov	r9,r8
8000826a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000826e:	91 59       	st.w	r8[0x14],r9
		gpio_port->pmr1s = 1 << (pin & 0x1F);
80008270:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008274:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008278:	30 19       	mov	r9,1
8000827a:	f2 08 09 48 	lsl	r8,r9,r8
8000827e:	10 99       	mov	r9,r8
80008280:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008284:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
		gpio_port->pmr2c = 1 << (pin & 0x1F);
#endif
		break;
80008286:	c0 38       	rjmp	8000828c <gpio_enable_module_pin+0xf0>
		gpio_port->pmr2s = 1 << (pin & 0x1F);
		break;
#endif

	default:
		return GPIO_INVALID_ARGUMENT;
80008288:	30 18       	mov	r8,1
8000828a:	c0 d8       	rjmp	800082a4 <gpio_enable_module_pin+0x108>
	}

	/* Disable GPIO control. */
	gpio_port->gperc = 1 << (pin & 0x1F);
8000828c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008290:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008294:	30 19       	mov	r9,1
80008296:	f2 08 09 48 	lsl	r8,r9,r8
8000829a:	10 99       	mov	r9,r8
8000829c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800082a0:	91 29       	st.w	r8[0x8],r9

	return GPIO_SUCCESS;
800082a2:	30 08       	mov	r8,0
}
800082a4:	10 9c       	mov	r12,r8
800082a6:	2f dd       	sub	sp,-12
800082a8:	e3 cd 80 80 	ldm	sp++,r7,pc

800082ac <gpio_configure_pin>:
 *
 * \param pin The pin number.
 * \param flags The configuration.
 */
void gpio_configure_pin(uint32_t pin, uint32_t flags)
{
800082ac:	eb cd 40 80 	pushm	r7,lr
800082b0:	1a 97       	mov	r7,sp
800082b2:	20 3d       	sub	sp,12
800082b4:	ef 4c ff f8 	st.w	r7[-8],r12
800082b8:	ef 4b ff f4 	st.w	r7[-12],r11
	volatile avr32_gpio_port_t *gpio_port = &AVR32_GPIO.port[pin >> 5];
800082bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082c0:	a5 98       	lsr	r8,0x5
800082c2:	a9 68       	lsl	r8,0x8
800082c4:	e0 28 f0 00 	sub	r8,61440
800082c8:	ef 48 ff fc 	st.w	r7[-4],r8
	} else {
		gpio_port->pderc = 1 << (pin & 0x1F);
	}

#endif
	if (flags & GPIO_PULL_UP) {
800082cc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800082d0:	e2 18 00 04 	andl	r8,0x4,COH
800082d4:	c0 e0       	breq	800082f0 <gpio_configure_pin+0x44>
		gpio_port->puers = 1 << (pin & 0x1F);
800082d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082da:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800082de:	30 19       	mov	r9,1
800082e0:	f2 08 09 48 	lsl	r8,r9,r8
800082e4:	10 99       	mov	r9,r8
800082e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800082ea:	f1 49 00 74 	st.w	r8[116],r9
800082ee:	c0 d8       	rjmp	80008308 <gpio_configure_pin+0x5c>
	} else {
		gpio_port->puerc = 1 << (pin & 0x1F);
800082f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800082f4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800082f8:	30 19       	mov	r9,1
800082fa:	f2 08 09 48 	lsl	r8,r9,r8
800082fe:	10 99       	mov	r9,r8
80008300:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008304:	f1 49 00 78 	st.w	r8[120],r9
	}

#endif

	/* Select interrupt level for group */
	if (flags & GPIO_INTERRUPT) {
80008308:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000830c:	e2 18 00 80 	andl	r8,0x80,COH
80008310:	c5 a0       	breq	800083c4 <gpio_configure_pin+0x118>
		if (flags & GPIO_BOTHEDGES) {
80008312:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008316:	e2 18 01 80 	andl	r8,0x180,COH
8000831a:	c1 a0       	breq	8000834e <gpio_configure_pin+0xa2>
			gpio_port->imr0c = 1 << (pin & 0x1F);
8000831c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008320:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008324:	30 19       	mov	r9,1
80008326:	f2 08 09 48 	lsl	r8,r9,r8
8000832a:	10 99       	mov	r9,r8
8000832c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008330:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80008334:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008338:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000833c:	30 19       	mov	r9,1
8000833e:	f2 08 09 48 	lsl	r8,r9,r8
80008342:	10 99       	mov	r9,r8
80008344:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008348:	f1 49 00 b8 	st.w	r8[184],r9
8000834c:	c3 c8       	rjmp	800083c4 <gpio_configure_pin+0x118>
		} else if (flags & GPIO_RISING) {
8000834e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008352:	e2 18 02 80 	andl	r8,0x280,COH
80008356:	c1 a0       	breq	8000838a <gpio_configure_pin+0xde>
			gpio_port->imr0s = 1 << (pin & 0x1F);
80008358:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000835c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008360:	30 19       	mov	r9,1
80008362:	f2 08 09 48 	lsl	r8,r9,r8
80008366:	10 99       	mov	r9,r8
80008368:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000836c:	f1 49 00 a4 	st.w	r8[164],r9
			gpio_port->imr1c = 1 << (pin & 0x1F);
80008370:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008374:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008378:	30 19       	mov	r9,1
8000837a:	f2 08 09 48 	lsl	r8,r9,r8
8000837e:	10 99       	mov	r9,r8
80008380:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008384:	f1 49 00 b8 	st.w	r8[184],r9
80008388:	c1 e8       	rjmp	800083c4 <gpio_configure_pin+0x118>
		} else if (flags & GPIO_FALLING) {
8000838a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000838e:	e2 18 03 80 	andl	r8,0x380,COH
80008392:	c1 90       	breq	800083c4 <gpio_configure_pin+0x118>
			gpio_port->imr0c = 1 << (pin & 0x1F);
80008394:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008398:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000839c:	30 19       	mov	r9,1
8000839e:	f2 08 09 48 	lsl	r8,r9,r8
800083a2:	10 99       	mov	r9,r8
800083a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800083a8:	f1 49 00 a8 	st.w	r8[168],r9
			gpio_port->imr1s = 1 << (pin & 0x1F);
800083ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800083b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800083b4:	30 19       	mov	r9,1
800083b6:	f2 08 09 48 	lsl	r8,r9,r8
800083ba:	10 99       	mov	r9,r8
800083bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800083c0:	f1 49 00 b4 	st.w	r8[180],r9
		}
	}

	/* Select direction and initial pin state */
	if (flags & GPIO_DIR_OUTPUT) {
800083c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800083c8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800083cc:	5c 58       	castu.b	r8
800083ce:	c2 c0       	breq	80008426 <gpio_configure_pin+0x17a>
		if (flags & GPIO_INIT_HIGH) {
800083d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800083d4:	e2 18 00 02 	andl	r8,0x2,COH
800083d8:	c0 e0       	breq	800083f4 <gpio_configure_pin+0x148>
			gpio_port->ovrs = 1 << (pin & 0x1F);
800083da:	ee f8 ff f8 	ld.w	r8,r7[-8]
800083de:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800083e2:	30 19       	mov	r9,1
800083e4:	f2 08 09 48 	lsl	r8,r9,r8
800083e8:	10 99       	mov	r9,r8
800083ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800083ee:	f1 49 00 54 	st.w	r8[84],r9
800083f2:	c0 d8       	rjmp	8000840c <gpio_configure_pin+0x160>
		} else {
			gpio_port->ovrc = 1 << (pin & 0x1F);
800083f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800083f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800083fc:	30 19       	mov	r9,1
800083fe:	f2 08 09 48 	lsl	r8,r9,r8
80008402:	10 99       	mov	r9,r8
80008404:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008408:	f1 49 00 58 	st.w	r8[88],r9
		}

		gpio_port->oders = 1 << (pin & 0x1F);
8000840c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008410:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008414:	30 19       	mov	r9,1
80008416:	f2 08 09 48 	lsl	r8,r9,r8
8000841a:	10 99       	mov	r9,r8
8000841c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008420:	f1 49 00 44 	st.w	r8[68],r9
80008424:	c0 d8       	rjmp	8000843e <gpio_configure_pin+0x192>
	} else {
		gpio_port->oderc = 1 << (pin & 0x1F);
80008426:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000842a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000842e:	30 19       	mov	r9,1
80008430:	f2 08 09 48 	lsl	r8,r9,r8
80008434:	10 99       	mov	r9,r8
80008436:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000843a:	f1 49 00 48 	st.w	r8[72],r9
	}

	/* Enable GPIO */
	gpio_port->gpers = 1 << (pin & 0x1F);
8000843e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008442:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80008446:	30 19       	mov	r9,1
80008448:	f2 08 09 48 	lsl	r8,r9,r8
8000844c:	10 99       	mov	r9,r8
8000844e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008452:	91 19       	st.w	r8[0x4],r9
}
80008454:	2f dd       	sub	sp,-12
80008456:	e3 cd 80 80 	ldm	sp++,r7,pc

8000845a <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
8000845a:	eb cd 40 80 	pushm	r7,lr
8000845e:	1a 97       	mov	r7,sp
	// Catch unregistered interrupts.
	while (true);
80008460:	c0 08       	rjmp	80008460 <_unhandled_interrupt+0x6>
80008462:	d7 03       	nop

80008464 <_get_interrupt_handler>:
 *
 * \return Interrupt handler to execute.
 */
__int_handler _get_interrupt_handler(uint32_t int_level);
__int_handler _get_interrupt_handler(uint32_t int_level)
{
80008464:	eb cd 40 80 	pushm	r7,lr
80008468:	1a 97       	mov	r7,sp
8000846a:	20 3d       	sub	sp,12
8000846c:	ef 4c ff f4 	st.w	r7[-12],r12
	/* ICR3 is mapped first, ICR0 last.
	Code in exception.S puts int_level in R12 which is used by the compiler
	to pass a single argument to a function. */
	uint32_t int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80008470:	fe 78 08 00 	mov	r8,-63488
80008474:	ee f9 ff f4 	ld.w	r9,r7[-12]
80008478:	f2 09 11 03 	rsub	r9,r9,3
8000847c:	28 09       	sub	r9,-128
8000847e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008482:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t int_req = AVR32_INTC.irr[int_grp];
80008486:	fe 78 08 00 	mov	r8,-63488
8000848a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000848e:	2c 09       	sub	r9,-64
80008490:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80008494:	ef 48 ff fc 	st.w	r7[-4],r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
80008498:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000849c:	58 08       	cp.w	r8,0
8000849e:	c1 30       	breq	800084c4 <_get_interrupt_handler+0x60>
		? _int_handler_table[int_grp]._int_line_handler_table[32
800084a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800084a4:	48 b8       	lddpc	r8,800084d0 <_get_interrupt_handler+0x6c>
800084a6:	a1 79       	lsl	r9,0x1
800084a8:	2f f9       	sub	r9,-1
800084aa:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800084ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800084b2:	f0 08 12 00 	clz	r8,r8
800084b6:	f0 08 11 1f 	rsub	r8,r8,31
			- clz(int_req) - 1]
800084ba:	a3 68       	lsl	r8,0x2
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
		? _int_handler_table[int_grp]._int_line_handler_table[32
800084bc:	f2 08 00 08 	add	r8,r9,r8
	exception.S will provide the interrupt handler with a clean interrupt
	stack frame, with nothing more pushed onto the stack. The interrupt
	handler must manage the `rete' instruction, which can be done using
	pure assembly, inline assembly or the `__attribute__((__interrupt__))'
	C function attribute.*/
	return (int_req)
800084c0:	70 08       	ld.w	r8,r8[0x0]
800084c2:	c0 28       	rjmp	800084c6 <_get_interrupt_handler+0x62>
800084c4:	30 08       	mov	r8,0
		? _int_handler_table[int_grp]._int_line_handler_table[32
			- clz(int_req) - 1]
		: NULL;
}
800084c6:	10 9c       	mov	r12,r8
800084c8:	2f dd       	sub	sp,-12
800084ca:	e3 cd 80 80 	ldm	sp++,r7,pc
800084ce:	00 00       	add	r0,r0
800084d0:	80 01       	ld.sh	r1,r0[0x0]
800084d2:	36 b8       	mov	r8,107

800084d4 <INTC_init_evba>:
 * \internal
 * \brief Init EVBA address. This operation may or may not have been done by the
 * C startup process.
 */
static __inline__ void INTC_init_evba(void)
{
800084d4:	eb cd 40 80 	pushm	r7,lr
800084d8:	1a 97       	mov	r7,sp
  Set_system_register(AVR32_EVBA, (int32_t)&_evba );
800084da:	48 38       	lddpc	r8,800084e4 <INTC_init_evba+0x10>
800084dc:	e3 b8 00 01 	mtsr	0x4,r8
}
800084e0:	e3 cd 80 80 	ldm	sp++,r7,pc
800084e4:	80 01       	ld.sh	r1,r0[0x0]
800084e6:	34 00       	mov	r0,64

800084e8 <INTC_init_interrupts>:
/**
 * \brief Initializes the hardware interrupt controller driver.
 *
 */
void INTC_init_interrupts(void)
{
800084e8:	eb cd 40 80 	pushm	r7,lr
800084ec:	1a 97       	mov	r7,sp
800084ee:	20 2d       	sub	sp,8
	uint32_t int_grp, int_req;

	INTC_init_evba();
800084f0:	f0 1f 00 1f 	mcall	8000856c <INTC_init_interrupts+0x84>

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800084f4:	30 08       	mov	r8,0
800084f6:	ef 48 ff f8 	st.w	r7[-8],r8
800084fa:	c3 18       	rjmp	8000855c <INTC_init_interrupts+0x74>
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
800084fc:	30 08       	mov	r8,0
800084fe:	ef 48 ff fc 	st.w	r7[-4],r8
80008502:	c1 48       	rjmp	8000852a <INTC_init_interrupts+0x42>
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
				._int_line_handler_table[int_req]
80008504:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008508:	49 a8       	lddpc	r8,80008570 <INTC_init_interrupts+0x88>
8000850a:	a1 79       	lsl	r9,0x1
8000850c:	2f f9       	sub	r9,-1
8000850e:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80008512:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008516:	a3 68       	lsl	r8,0x2
80008518:	f2 08 00 08 	add	r8,r9,r8
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
		{
			/* Assign _unhandled_interrupt as the default interrupt
			handler. */
			_int_handler_table[int_grp]
8000851c:	49 69       	lddpc	r9,80008574 <INTC_init_interrupts+0x8c>
8000851e:	91 09       	st.w	r8[0x0],r9
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
			int_req++)
80008520:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008524:	2f f8       	sub	r8,-1
80008526:	ef 48 ff fc 	st.w	r7[-4],r8
	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
			int_req < _int_handler_table[int_grp].num_irqs;
8000852a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000852e:	49 18       	lddpc	r8,80008570 <INTC_init_interrupts+0x88>
80008530:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
	{
		// For all interrupt request lines of each group,
		for (int_req = 0;
80008534:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008538:	10 39       	cp.w	r9,r8
8000853a:	fe 9b ff e5 	brhi	80008504 <INTC_init_interrupts+0x1c>

		/* Set the interrupt group priority register to its default
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
8000853e:	fe 78 08 00 	mov	r8,-63488
80008542:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008546:	48 db       	lddpc	r11,80008578 <INTC_init_interrupts+0x90>
80008548:	48 da       	lddpc	r10,8000857c <INTC_init_interrupts+0x94>
8000854a:	f6 0a 01 0a 	sub	r10,r11,r10
8000854e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	uint32_t int_grp, int_req;

	INTC_init_evba();

	// For all interrupt groups,
	for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80008552:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008556:	2f f8       	sub	r8,-1
80008558:	ef 48 ff f8 	st.w	r7[-8],r8
8000855c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008560:	59 38       	cp.w	r8,19
80008562:	fe 98 ff cd 	brls	800084fc <INTC_init_interrupts+0x14>
		value.
		By default, all interrupt groups are linked to the interrupt
		priority level 0 and to the interrupt vector _int0. */
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
	}
}
80008566:	2f ed       	sub	sp,-8
80008568:	e3 cd 80 80 	ldm	sp++,r7,pc
8000856c:	80 00       	ld.sh	r0,r0[0x0]
8000856e:	84 d4       	ld.uh	r4,r2[0xa]
80008570:	80 01       	ld.sh	r1,r0[0x0]
80008572:	36 b8       	mov	r8,107
80008574:	80 00       	ld.sh	r0,r0[0x0]
80008576:	84 5a       	ld.sh	r10,r2[0xa]
80008578:	80 01       	ld.sh	r1,r0[0x0]
8000857a:	35 04       	mov	r4,80
8000857c:	80 01       	ld.sh	r1,r0[0x0]
8000857e:	34 00       	mov	r0,64

80008580 <INTC_register_interrupt>:
 *          be effective.
 *
 */
void INTC_register_interrupt(__int_handler handler, uint32_t irq,
	uint32_t int_level)
{
80008580:	eb cd 40 80 	pushm	r7,lr
80008584:	1a 97       	mov	r7,sp
80008586:	20 4d       	sub	sp,16
80008588:	ef 4c ff f8 	st.w	r7[-8],r12
8000858c:	ef 4b ff f4 	st.w	r7[-12],r11
80008590:	ef 4a ff f0 	st.w	r7[-16],r10
	// Determine the group of the IRQ.
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80008594:	ee f8 ff f4 	ld.w	r8,r7[-12]
80008598:	a5 98       	lsr	r8,0x5
8000859a:	ef 48 ff fc 	st.w	r7[-4],r8

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
		._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP]
8000859e:	ee f9 ff fc 	ld.w	r9,r7[-4]
800085a2:	4a 78       	lddpc	r8,8000863c <INTC_register_interrupt+0xbc>
800085a4:	a1 79       	lsl	r9,0x1
800085a6:	2f f9       	sub	r9,-1
800085a8:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800085ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800085b0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800085b4:	a3 68       	lsl	r8,0x2
800085b6:	f2 08 00 08 	add	r8,r9,r8
	uint32_t int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;

	/* Store in _int_line_handler_table_x the pointer to the interrupt
	handler, so that _get_interrupt_handler can retrieve it when the
	interrupt is vectored. */
	_int_handler_table[int_grp]
800085ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
800085be:	91 09       	st.w	r8[0x0],r9
	/* Program the corresponding IPRX register to set the interrupt priority
	level and the interrupt vector offset that will be fetched by the core
	interrupt system.
	NOTE: The _intx functions are intermediate assembly functions between
	the core interrupt system and the user interrupt handler. */
	if (int_level == AVR32_INTC_INT0) {
800085c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800085c4:	58 08       	cp.w	r8,0
800085c6:	c0 c1       	brne	800085de <INTC_register_interrupt+0x5e>
		AVR32_INTC.ipr[int_grp] = IPR_INT0;
800085c8:	fe 78 08 00 	mov	r8,-63488
800085cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800085d0:	49 cb       	lddpc	r11,80008640 <INTC_register_interrupt+0xc0>
800085d2:	49 da       	lddpc	r10,80008644 <INTC_register_interrupt+0xc4>
800085d4:	f6 0a 01 0a 	sub	r10,r11,r10
800085d8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800085dc:	c2 d8       	rjmp	80008636 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT1) {
800085de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800085e2:	58 18       	cp.w	r8,1
800085e4:	c0 d1       	brne	800085fe <INTC_register_interrupt+0x7e>
		AVR32_INTC.ipr[int_grp] = IPR_INT1;
800085e6:	fe 78 08 00 	mov	r8,-63488
800085ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
800085ee:	49 7b       	lddpc	r11,80008648 <INTC_register_interrupt+0xc8>
800085f0:	49 5a       	lddpc	r10,80008644 <INTC_register_interrupt+0xc4>
800085f2:	f6 0a 01 0a 	sub	r10,r11,r10
800085f6:	bf aa       	sbr	r10,0x1e
800085f8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800085fc:	c1 d8       	rjmp	80008636 <INTC_register_interrupt+0xb6>
	} else if (int_level == AVR32_INTC_INT2) {
800085fe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80008602:	58 28       	cp.w	r8,2
80008604:	c0 d1       	brne	8000861e <INTC_register_interrupt+0x9e>
		AVR32_INTC.ipr[int_grp] = IPR_INT2;
80008606:	fe 78 08 00 	mov	r8,-63488
8000860a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000860e:	49 0b       	lddpc	r11,8000864c <INTC_register_interrupt+0xcc>
80008610:	48 da       	lddpc	r10,80008644 <INTC_register_interrupt+0xc4>
80008612:	f6 0a 01 0a 	sub	r10,r11,r10
80008616:	bf ba       	sbr	r10,0x1f
80008618:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000861c:	c0 d8       	rjmp	80008636 <INTC_register_interrupt+0xb6>
	} else {
		AVR32_INTC.ipr[int_grp] = IPR_INT3;
8000861e:	fe 78 08 00 	mov	r8,-63488
80008622:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008626:	48 bb       	lddpc	r11,80008650 <INTC_register_interrupt+0xd0>
80008628:	48 7a       	lddpc	r10,80008644 <INTC_register_interrupt+0xc4>
8000862a:	f6 0a 01 0a 	sub	r10,r11,r10
8000862e:	ea 1a c0 00 	orh	r10,0xc000
80008632:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}
}
80008636:	2f cd       	sub	sp,-16
80008638:	e3 cd 80 80 	ldm	sp++,r7,pc
8000863c:	80 01       	ld.sh	r1,r0[0x0]
8000863e:	36 b8       	mov	r8,107
80008640:	80 01       	ld.sh	r1,r0[0x0]
80008642:	35 04       	mov	r4,80
80008644:	80 01       	ld.sh	r1,r0[0x0]
80008646:	34 00       	mov	r0,64
80008648:	80 01       	ld.sh	r1,r0[0x0]
8000864a:	35 12       	mov	r2,81
8000864c:	80 01       	ld.sh	r1,r0[0x0]
8000864e:	35 20       	mov	r0,82
80008650:	80 01       	ld.sh	r1,r0[0x0]
80008652:	35 2e       	mov	lr,82

80008654 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80008654:	eb cd 40 80 	pushm	r7,lr
80008658:	1a 97       	mov	r7,sp
8000865a:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000865c:	e1 b8 00 00 	mfsr	r8,0x0
80008660:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80008664:	d3 03       	ssrf	0x10

	return flags;
80008666:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000866a:	10 9c       	mov	r12,r8
8000866c:	2f fd       	sub	sp,-4
8000866e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008672 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80008672:	eb cd 40 80 	pushm	r7,lr
80008676:	1a 97       	mov	r7,sp
80008678:	20 1d       	sub	sp,4
8000867a:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000867e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80008682:	e6 18 00 01 	andh	r8,0x1,COH
80008686:	5f 08       	sreq	r8
80008688:	5c 58       	castu.b	r8
}
8000868a:	10 9c       	mov	r12,r8
8000868c:	2f fd       	sub	sp,-4
8000868e:	e3 cd 80 80 	ldm	sp++,r7,pc
80008692:	d7 03       	nop

80008694 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
80008694:	eb cd 40 80 	pushm	r7,lr
80008698:	1a 97       	mov	r7,sp
8000869a:	20 1d       	sub	sp,4
8000869c:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
800086a0:	ee fc ff fc 	ld.w	r12,r7[-4]
800086a4:	f0 1f 00 05 	mcall	800086b8 <cpu_irq_restore+0x24>
800086a8:	18 98       	mov	r8,r12
800086aa:	58 08       	cp.w	r8,0
800086ac:	c0 20       	breq	800086b0 <cpu_irq_restore+0x1c>
      cpu_irq_enable();
800086ae:	d5 03       	csrf	0x10
   }

	barrier();
}
800086b0:	2f fd       	sub	sp,-4
800086b2:	e3 cd 80 80 	ldm	sp++,r7,pc
800086b6:	00 00       	add	r0,r0
800086b8:	80 00       	ld.sh	r0,r0[0x0]
800086ba:	86 72       	ld.sh	r2,r3[0xe]

800086bc <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
800086bc:	eb cd 40 80 	pushm	r7,lr
800086c0:	1a 97       	mov	r7,sp
800086c2:	20 2d       	sub	sp,8
800086c4:	ef 4c ff f8 	st.w	r7[-8],r12
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
800086c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800086cc:	48 f9       	lddpc	r9,80008708 <sleepmgr_lock_mode+0x4c>
800086ce:	f2 08 07 09 	ld.ub	r9,r9[r8]
800086d2:	3f f8       	mov	r8,-1
800086d4:	f0 09 18 00 	cp.b	r9,r8
800086d8:	c0 21       	brne	800086dc <sleepmgr_lock_mode+0x20>
		while (true) {
			// Warning: maximum value of sleepmgr_locks buffer is no more than 255.
			// Check APP or change the data type to uint16_t.
		}
800086da:	c0 08       	rjmp	800086da <sleepmgr_lock_mode+0x1e>
	}

	// Enter a critical section
	flags = cpu_irq_save();
800086dc:	f0 1f 00 0c 	mcall	8000870c <sleepmgr_lock_mode+0x50>
800086e0:	18 98       	mov	r8,r12
800086e2:	ef 48 ff fc 	st.w	r7[-4],r8

	++sleepmgr_locks[mode];
800086e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800086ea:	48 89       	lddpc	r9,80008708 <sleepmgr_lock_mode+0x4c>
800086ec:	f2 08 07 09 	ld.ub	r9,r9[r8]
800086f0:	2f f9       	sub	r9,-1
800086f2:	5c 59       	castu.b	r9
800086f4:	48 5a       	lddpc	r10,80008708 <sleepmgr_lock_mode+0x4c>
800086f6:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
800086fa:	ee fc ff fc 	ld.w	r12,r7[-4]
800086fe:	f0 1f 00 05 	mcall	80008710 <sleepmgr_lock_mode+0x54>
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
80008702:	2f ed       	sub	sp,-8
80008704:	e3 cd 80 80 	ldm	sp++,r7,pc
80008708:	00 00       	add	r0,r0
8000870a:	12 34       	cp.w	r4,r9
8000870c:	80 00       	ld.sh	r0,r0[0x0]
8000870e:	86 54       	ld.sh	r4,r3[0xa]
80008710:	80 00       	ld.sh	r0,r0[0x0]
80008712:	86 94       	ld.uh	r4,r3[0x2]

80008714 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
80008714:	eb cd 40 80 	pushm	r7,lr
80008718:	1a 97       	mov	r7,sp
8000871a:	20 2d       	sub	sp,8
8000871c:	ef 4c ff f8 	st.w	r7[-8],r12
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
80008720:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008724:	48 e9       	lddpc	r9,8000875c <sleepmgr_unlock_mode+0x48>
80008726:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000872a:	58 08       	cp.w	r8,0
8000872c:	c0 21       	brne	80008730 <sleepmgr_unlock_mode+0x1c>
		while (true) {
			// Warning: minimum value of sleepmgr_locks buffer is no less than 0.
			// Check APP.
		}
8000872e:	c0 08       	rjmp	8000872e <sleepmgr_unlock_mode+0x1a>
	}

	// Enter a critical section
	flags = cpu_irq_save();
80008730:	f0 1f 00 0c 	mcall	80008760 <sleepmgr_unlock_mode+0x4c>
80008734:	18 98       	mov	r8,r12
80008736:	ef 48 ff fc 	st.w	r7[-4],r8

	--sleepmgr_locks[mode];
8000873a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000873e:	48 89       	lddpc	r9,8000875c <sleepmgr_unlock_mode+0x48>
80008740:	f2 08 07 09 	ld.ub	r9,r9[r8]
80008744:	20 19       	sub	r9,1
80008746:	5c 59       	castu.b	r9
80008748:	48 5a       	lddpc	r10,8000875c <sleepmgr_unlock_mode+0x48>
8000874a:	f4 08 0b 09 	st.b	r10[r8],r9

	// Leave the critical section
	cpu_irq_restore(flags);
8000874e:	ee fc ff fc 	ld.w	r12,r7[-4]
80008752:	f0 1f 00 05 	mcall	80008764 <sleepmgr_unlock_mode+0x50>
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
80008756:	2f ed       	sub	sp,-8
80008758:	e3 cd 80 80 	ldm	sp++,r7,pc
8000875c:	00 00       	add	r0,r0
8000875e:	12 34       	cp.w	r4,r9
80008760:	80 00       	ld.sh	r0,r0[0x0]
80008762:	86 54       	ld.sh	r4,r3[0xa]
80008764:	80 00       	ld.sh	r0,r0[0x0]
80008766:	86 94       	ld.uh	r4,r3[0x2]

80008768 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize powerdown mode
 */
static void udd_sleep_mode(bool b_idle)
{
80008768:	eb cd 40 80 	pushm	r7,lr
8000876c:	1a 97       	mov	r7,sp
8000876e:	20 1d       	sub	sp,4
80008770:	18 98       	mov	r8,r12
80008772:	ef 68 ff fc 	st.b	r7[-4],r8
	if (!b_idle && udd_b_idle) {
80008776:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000877a:	ec 18 00 01 	eorl	r8,0x1
8000877e:	5c 58       	castu.b	r8
80008780:	c0 80       	breq	80008790 <udd_sleep_mode+0x28>
80008782:	48 f8       	lddpc	r8,800087bc <udd_sleep_mode+0x54>
80008784:	11 88       	ld.ub	r8,r8[0x0]
80008786:	58 08       	cp.w	r8,0
80008788:	c0 40       	breq	80008790 <udd_sleep_mode+0x28>
		sleepmgr_unlock_mode(USBB_SLEEP_MODE_USB_IDLE);
8000878a:	30 1c       	mov	r12,1
8000878c:	f0 1f 00 0d 	mcall	800087c0 <udd_sleep_mode+0x58>
	}
	if (b_idle && !udd_b_idle) {
80008790:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80008794:	30 08       	mov	r8,0
80008796:	f0 09 18 00 	cp.b	r9,r8
8000879a:	c0 a0       	breq	800087ae <udd_sleep_mode+0x46>
8000879c:	48 88       	lddpc	r8,800087bc <udd_sleep_mode+0x54>
8000879e:	11 88       	ld.ub	r8,r8[0x0]
800087a0:	ec 18 00 01 	eorl	r8,0x1
800087a4:	5c 58       	castu.b	r8
800087a6:	c0 40       	breq	800087ae <udd_sleep_mode+0x46>
		sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_IDLE);
800087a8:	30 1c       	mov	r12,1
800087aa:	f0 1f 00 07 	mcall	800087c4 <udd_sleep_mode+0x5c>
	}
	udd_b_idle = b_idle;
800087ae:	48 49       	lddpc	r9,800087bc <udd_sleep_mode+0x54>
800087b0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800087b4:	b2 88       	st.b	r9[0x0],r8
}
800087b6:	2f fd       	sub	sp,-4
800087b8:	e3 cd 80 80 	ldm	sp++,r7,pc
800087bc:	00 00       	add	r0,r0
800087be:	06 e8       	st.h	--r3,r8
800087c0:	80 00       	ld.sh	r0,r0[0x0]
800087c2:	87 14       	st.w	r3[0x4],r4
800087c4:	80 00       	ld.sh	r0,r0[0x0]
800087c6:	86 bc       	ld.uh	r12,r3[0x6]

800087c8 <udd_interrupt>:
ISR_FREERTOS(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  else
ISR(udd_interrupt, AVR32_USBB_IRQ_GROUP, UDD_USB_INT_LEVEL)
#  endif
#endif
{
800087c8:	eb cd 40 80 	pushm	r7,lr
800087cc:	1a 97       	mov	r7,sp
	if (Is_udd_sof()) {
800087ce:	fe 68 00 04 	mov	r8,-131068
800087d2:	70 08       	ld.w	r8,r8[0x0]
800087d4:	e2 18 00 04 	andl	r8,0x4,COH
800087d8:	c1 00       	breq	800087f8 <udd_interrupt+0x30>
		udd_ack_sof();
800087da:	fe 68 00 08 	mov	r8,-131064
800087de:	30 49       	mov	r9,4
800087e0:	91 09       	st.w	r8[0x0],r9
		if (Is_udd_full_speed_mode()) {
800087e2:	fe 68 08 04 	mov	r8,-129020
800087e6:	70 08       	ld.w	r8,r8[0x0]
800087e8:	e2 18 30 00 	andl	r8,0x3000,COH
800087ec:	ad 88       	lsr	r8,0xc
800087ee:	e0 81 00 a2 	brne	80008932 <udd_interrupt+0x16a>
			udc_sof_notify();
800087f2:	f0 1f 00 57 	mcall	8000894c <udd_interrupt+0x184>
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
800087f6:	ca 38       	rjmp	8000893c <udd_interrupt+0x174>
	}
	if (Is_udd_msof()) {
800087f8:	fe 68 00 04 	mov	r8,-131068
800087fc:	70 08       	ld.w	r8,r8[0x0]
800087fe:	e2 18 00 02 	andl	r8,0x2,COH
80008802:	c0 80       	breq	80008812 <udd_interrupt+0x4a>
		udd_ack_msof();
80008804:	fe 68 00 08 	mov	r8,-131064
80008808:	30 29       	mov	r9,2
8000880a:	91 09       	st.w	r8[0x0],r9
		udc_sof_notify();
8000880c:	f0 1f 00 50 	mcall	8000894c <udd_interrupt+0x184>
		goto udd_interrupt_end;
80008810:	c9 68       	rjmp	8000893c <udd_interrupt+0x174>
	}

	if (udd_ctrl_interrupt())
80008812:	f0 1f 00 50 	mcall	80008950 <udd_interrupt+0x188>
80008816:	18 98       	mov	r8,r12
80008818:	58 08       	cp.w	r8,0
8000881a:	e0 81 00 8e 	brne	80008936 <udd_interrupt+0x16e>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
8000881e:	f0 1f 00 4e 	mcall	80008954 <udd_interrupt+0x18c>
80008822:	18 98       	mov	r8,r12
80008824:	58 08       	cp.w	r8,0
80008826:	e0 81 00 8a 	brne	8000893a <udd_interrupt+0x172>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
8000882a:	fe 68 00 04 	mov	r8,-131068
8000882e:	70 08       	ld.w	r8,r8[0x0]
80008830:	e2 18 00 08 	andl	r8,0x8,COH
80008834:	c0 e0       	breq	80008850 <udd_interrupt+0x88>
		udd_ack_reset();
80008836:	fe 68 00 08 	mov	r8,-131064
8000883a:	30 89       	mov	r9,8
8000883c:	91 09       	st.w	r8[0x0],r9
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
8000883e:	f0 1f 00 47 	mcall	80008958 <udd_interrupt+0x190>
#endif
		// Reset USB Device Stack Core
		udc_reset();
80008842:	f0 1f 00 47 	mcall	8000895c <udd_interrupt+0x194>
		// Reset endpoint control
		udd_reset_ep_ctrl();
80008846:	f0 1f 00 47 	mcall	80008960 <udd_interrupt+0x198>
		// Reset endpoint control management
		udd_ctrl_init();
8000884a:	f0 1f 00 47 	mcall	80008964 <udd_interrupt+0x19c>
		goto udd_interrupt_end;
8000884e:	c7 78       	rjmp	8000893c <udd_interrupt+0x174>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
80008850:	fe 68 00 10 	mov	r8,-131056
80008854:	70 08       	ld.w	r8,r8[0x0]
80008856:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000885a:	5c 58       	castu.b	r8
8000885c:	c2 20       	breq	800088a0 <udd_interrupt+0xd8>
8000885e:	fe 68 00 04 	mov	r8,-131068
80008862:	70 08       	ld.w	r8,r8[0x0]
80008864:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008868:	5c 58       	castu.b	r8
8000886a:	c1 b0       	breq	800088a0 <udd_interrupt+0xd8>
		otg_unfreeze_clock();
8000886c:	fe 68 08 00 	mov	r8,-129024
80008870:	fe 69 08 00 	mov	r9,-129024
80008874:	72 09       	ld.w	r9,r9[0x0]
80008876:	af c9       	cbr	r9,0xe
80008878:	91 09       	st.w	r8[0x0],r9
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
8000887a:	fe 68 00 14 	mov	r8,-131052
8000887e:	30 19       	mov	r9,1
80008880:	91 09       	st.w	r8[0x0],r9
		udd_enable_wake_up_interrupt();
80008882:	fe 68 00 18 	mov	r8,-131048
80008886:	31 09       	mov	r9,16
80008888:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
8000888a:	fe 68 08 00 	mov	r8,-129024
8000888e:	fe 69 08 00 	mov	r9,-129024
80008892:	72 09       	ld.w	r9,r9[0x0]
80008894:	af a9       	sbr	r9,0xe
80008896:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(false); // Enter in SUSPEND mode
80008898:	30 0c       	mov	r12,0
8000889a:	f0 1f 00 34 	mcall	80008968 <udd_interrupt+0x1a0>
#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
#endif
		goto udd_interrupt_end;
8000889e:	c4 f8       	rjmp	8000893c <udd_interrupt+0x174>
	}

	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
800088a0:	fe 68 00 10 	mov	r8,-131056
800088a4:	70 08       	ld.w	r8,r8[0x0]
800088a6:	e2 18 00 10 	andl	r8,0x10,COH
800088aa:	c2 00       	breq	800088ea <udd_interrupt+0x122>
800088ac:	fe 68 00 04 	mov	r8,-131068
800088b0:	70 08       	ld.w	r8,r8[0x0]
800088b2:	e2 18 00 10 	andl	r8,0x10,COH
800088b6:	c1 a0       	breq	800088ea <udd_interrupt+0x122>
		// Ack wakeup interrupt and enable suspend interrupt
		otg_unfreeze_clock();
800088b8:	fe 68 08 00 	mov	r8,-129024
800088bc:	fe 69 08 00 	mov	r9,-129024
800088c0:	72 09       	ld.w	r9,r9[0x0]
800088c2:	af c9       	cbr	r9,0xe
800088c4:	91 09       	st.w	r8[0x0],r9

		// Check USB clock ready after suspend and eventually sleep USB clock
		while( !Is_otg_clock_usable() );
800088c6:	fe 68 08 04 	mov	r8,-129020
800088ca:	70 08       	ld.w	r8,r8[0x0]
800088cc:	e2 18 40 00 	andl	r8,0x4000,COH
800088d0:	cf b0       	breq	800088c6 <udd_interrupt+0xfe>

		// The wakeup interrupt is automatic acked when a suspend occur
		udd_disable_wake_up_interrupt();
800088d2:	fe 68 00 14 	mov	r8,-131052
800088d6:	31 09       	mov	r9,16
800088d8:	91 09       	st.w	r8[0x0],r9
		udd_enable_suspend_interrupt();
800088da:	fe 68 00 18 	mov	r8,-131048
800088de:	30 19       	mov	r9,1
800088e0:	91 09       	st.w	r8[0x0],r9
		udd_sleep_mode(true); // Enter in IDLE mode
800088e2:	30 1c       	mov	r12,1
800088e4:	f0 1f 00 21 	mcall	80008968 <udd_interrupt+0x1a0>
#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
#endif
		goto udd_interrupt_end;
800088e8:	c2 a8       	rjmp	8000893c <udd_interrupt+0x174>
	}

	if (Is_otg_vbus_transition()) {
800088ea:	fe 68 08 04 	mov	r8,-129020
800088ee:	70 08       	ld.w	r8,r8[0x0]
800088f0:	e2 18 00 02 	andl	r8,0x2,COH
800088f4:	c2 40       	breq	8000893c <udd_interrupt+0x174>
		// Ack Vbus transition and send status to high level
		otg_unfreeze_clock();
800088f6:	fe 68 08 00 	mov	r8,-129024
800088fa:	fe 69 08 00 	mov	r9,-129024
800088fe:	72 09       	ld.w	r9,r9[0x0]
80008900:	af c9       	cbr	r9,0xe
80008902:	91 09       	st.w	r8[0x0],r9
		otg_ack_vbus_transition();
80008904:	fe 68 08 08 	mov	r8,-129016
80008908:	30 29       	mov	r9,2
8000890a:	91 09       	st.w	r8[0x0],r9
		otg_freeze_clock();
8000890c:	fe 68 08 00 	mov	r8,-129024
80008910:	fe 69 08 00 	mov	r9,-129024
80008914:	72 09       	ld.w	r9,r9[0x0]
80008916:	af a9       	sbr	r9,0xe
80008918:	91 09       	st.w	r8[0x0],r9
#ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
		if (Is_otg_vbus_high()) {
8000891a:	fe 68 08 04 	mov	r8,-129020
8000891e:	70 08       	ld.w	r8,r8[0x0]
80008920:	e2 18 08 00 	andl	r8,0x800,COH
80008924:	c0 40       	breq	8000892c <udd_interrupt+0x164>
			udd_attach();
80008926:	f0 1f 00 12 	mcall	8000896c <udd_interrupt+0x1a4>
8000892a:	c0 98       	rjmp	8000893c <udd_interrupt+0x174>
		} else {
			udd_detach();
8000892c:	f0 1f 00 11 	mcall	80008970 <udd_interrupt+0x1a8>
80008930:	c0 68       	rjmp	8000893c <udd_interrupt+0x174>
			udc_sof_notify();
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
#endif
		goto udd_interrupt_end;
80008932:	d7 03       	nop
80008934:	c0 48       	rjmp	8000893c <udd_interrupt+0x174>
		udc_sof_notify();
		goto udd_interrupt_end;
	}

	if (udd_ctrl_interrupt())
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
80008936:	d7 03       	nop
80008938:	c0 28       	rjmp	8000893c <udd_interrupt+0x174>

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt())
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
8000893a:	d7 03       	nop
		UDC_VBUS_EVENT(Is_otg_vbus_high());
#endif
		goto udd_interrupt_end;
	}
udd_interrupt_end:
	otg_data_memory_barrier();
8000893c:	fe 68 00 00 	mov	r8,-131072
80008940:	f0 f8 08 18 	ld.w	r8,r8[2072]
	// consider that exiting from the USB interrupt will require a context switch.
	return pdTRUE;
#else
	return;
#endif
}
80008944:	e3 cd 40 80 	ldm	sp++,r7,lr
80008948:	d6 03       	rete
8000894a:	00 00       	add	r0,r0
8000894c:	80 00       	ld.sh	r0,r0[0x0]
8000894e:	be ac       	st.b	pc[0x2],r12
80008950:	80 00       	ld.sh	r0,r0[0x0]
80008952:	9c 08       	ld.sh	r8,lr[0x0]
80008954:	80 00       	ld.sh	r0,r0[0x0]
80008956:	a0 b8       	st.b	r0[0x3],r8
80008958:	80 00       	ld.sh	r0,r0[0x0]
8000895a:	9d 3c       	st.w	lr[0xc],r12
8000895c:	80 00       	ld.sh	r0,r0[0x0]
8000895e:	be 48       	st.h	pc[0x8],r8
80008960:	80 00       	ld.sh	r0,r0[0x0]
80008962:	94 88       	ld.uh	r8,r10[0x0]
80008964:	80 00       	ld.sh	r0,r0[0x0]
80008966:	95 6c       	st.w	r10[0x18],r12
80008968:	80 00       	ld.sh	r0,r0[0x0]
8000896a:	87 68       	st.w	r3[0x18],r8
8000896c:	80 00       	ld.sh	r0,r0[0x0]
8000896e:	8a 94       	ld.uh	r4,r5[0x2]
80008970:	80 00       	ld.sh	r0,r0[0x0]
80008972:	8b 44       	st.w	r5[0x10],r4

80008974 <udd_enable>:
	return true;
}


void udd_enable(void)
{
80008974:	eb cd 40 80 	pushm	r7,lr
80008978:	1a 97       	mov	r7,sp
8000897a:	20 2d       	sub	sp,8
	irqflags_t flags;

	flags = cpu_irq_save();
8000897c:	f0 1f 00 3e 	mcall	80008a74 <udd_enable+0x100>
80008980:	18 98       	mov	r8,r12
80008982:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		return;
	}
#else
	//* SINGLE DEVICE MODE INITIALIZATION
	sysclk_enable_usb();
80008986:	f0 1f 00 3d 	mcall	80008a78 <udd_enable+0x104>

	// Here, only the device mode is possible, then link USBB interrupt to UDD interrupt
	irq_register_handler(
8000898a:	30 0a       	mov	r10,0
8000898c:	e0 6b 02 20 	mov	r11,544
80008990:	4b bc       	lddpc	r12,80008a7c <udd_enable+0x108>
80008992:	f0 1f 00 3c 	mcall	80008a80 <udd_enable+0x10c>
80008996:	30 18       	mov	r8,1
80008998:	ef 48 ff fc 	st.w	r7[-4],r8
 *  AVR32_PM_AWEN_xxxxWEN_MASK in the part-specific header file under
 *  "toolchain folder"/avr32/inc(lude)/avr32/)
 */
__always_inline static void pm_asyn_wake_up_enable(unsigned long awen_mask)
{
  AVR32_PM.awen |= awen_mask;
8000899c:	fe 78 0c 00 	mov	r8,-62464
800089a0:	fe 79 0c 00 	mov	r9,-62464
800089a4:	f2 fa 01 44 	ld.w	r10,r9[324]
800089a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800089ac:	f5 e9 10 09 	or	r9,r10,r9
800089b0:	f1 49 01 44 	st.w	r8[324],r9
		cpu_irq_restore(flags);
		return; // Device is not the current mode
	}
# else
	// ID pin not used then force device mode
	otg_disable_id_pin();
800089b4:	fe 68 08 00 	mov	r8,-129024
800089b8:	fe 69 08 00 	mov	r9,-129024
800089bc:	72 09       	ld.w	r9,r9[0x0]
800089be:	b9 c9       	cbr	r9,0x18
800089c0:	91 09       	st.w	r8[0x0],r9
	otg_force_device_mode();
800089c2:	fe 68 08 00 	mov	r8,-129024
800089c6:	fe 69 08 00 	mov	r9,-129024
800089ca:	72 09       	ld.w	r9,r9[0x0]
800089cc:	b9 b9       	sbr	r9,0x19
800089ce:	91 09       	st.w	r8[0x0],r9
# endif

	// Enable USB hardware
	otg_enable_pad();
800089d0:	fe 68 08 00 	mov	r8,-129024
800089d4:	fe 69 08 00 	mov	r9,-129024
800089d8:	72 09       	ld.w	r9,r9[0x0]
800089da:	ad a9       	sbr	r9,0xc
800089dc:	91 09       	st.w	r8[0x0],r9
	otg_enable();
800089de:	fe 68 08 00 	mov	r8,-129024
800089e2:	fe 69 08 00 	mov	r9,-129024
800089e6:	72 09       	ld.w	r9,r9[0x0]
800089e8:	af b9       	sbr	r9,0xf
800089ea:	91 09       	st.w	r8[0x0],r9
	otg_unfreeze_clock();
800089ec:	fe 68 08 00 	mov	r8,-129024
800089f0:	fe 69 08 00 	mov	r9,-129024
800089f4:	72 09       	ld.w	r9,r9[0x0]
800089f6:	af c9       	cbr	r9,0xe
800089f8:	91 09       	st.w	r8[0x0],r9
	(void)Is_otg_clock_frozen();
800089fa:	fe 68 08 00 	mov	r8,-129024
800089fe:	70 08       	ld.w	r8,r8[0x0]

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
80008a00:	f0 1f 00 21 	mcall	80008a84 <udd_enable+0x110>

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_LOW_SPEED
	udd_low_speed_enable();
#else
	udd_low_speed_disable();
80008a04:	fe 68 00 00 	mov	r8,-131072
80008a08:	fe 69 00 00 	mov	r9,-131072
80008a0c:	72 09       	ld.w	r9,r9[0x0]
80008a0e:	ad c9       	cbr	r9,0xc
80008a10:	91 09       	st.w	r8[0x0],r9
#  ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
#  else
	udd_high_speed_disable();
80008a12:	fe 68 00 00 	mov	r8,-131072
80008a16:	fe 69 00 00 	mov	r9,-131072
80008a1a:	72 09       	ld.w	r9,r9[0x0]
80008a1c:	e8 19 0c 00 	orl	r9,0xc00
80008a20:	91 09       	st.w	r8[0x0],r9
#  endif
#endif
	otg_ack_vbus_transition();
80008a22:	fe 68 08 08 	mov	r8,-129016
80008a26:	30 29       	mov	r9,2
80008a28:	91 09       	st.w	r8[0x0],r9
	// Force Vbus interrupt in case of Vbus always with a high level
	// This is possible with a short timing between a Host mode stop/start.
	if (Is_otg_vbus_high()) {
80008a2a:	fe 68 08 04 	mov	r8,-129020
80008a2e:	70 08       	ld.w	r8,r8[0x0]
80008a30:	e2 18 08 00 	andl	r8,0x800,COH
80008a34:	c0 50       	breq	80008a3e <udd_enable+0xca>
		otg_raise_vbus_transition();
80008a36:	fe 68 08 0c 	mov	r8,-129012
80008a3a:	30 29       	mov	r9,2
80008a3c:	91 09       	st.w	r8[0x0],r9
	}
	otg_enable_vbus_interrupt();
80008a3e:	fe 68 08 00 	mov	r8,-129024
80008a42:	fe 69 08 00 	mov	r9,-129024
80008a46:	72 09       	ld.w	r9,r9[0x0]
80008a48:	a1 b9       	sbr	r9,0x1
80008a4a:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80008a4c:	fe 68 08 00 	mov	r8,-129024
80008a50:	fe 69 08 00 	mov	r9,-129024
80008a54:	72 09       	ld.w	r9,r9[0x0]
80008a56:	af a9       	sbr	r9,0xe
80008a58:	91 09       	st.w	r8[0x0],r9

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
80008a5a:	48 c9       	lddpc	r9,80008a88 <udd_enable+0x114>
80008a5c:	30 08       	mov	r8,0
80008a5e:	b2 88       	st.b	r9[0x0],r8
	sleepmgr_lock_mode(USBB_SLEEP_MODE_USB_SUSPEND);
80008a60:	30 3c       	mov	r12,3
80008a62:	f0 1f 00 0b 	mcall	80008a8c <udd_enable+0x118>
#endif

	cpu_irq_restore(flags);
80008a66:	ee fc ff f8 	ld.w	r12,r7[-8]
80008a6a:	f0 1f 00 0a 	mcall	80008a90 <udd_enable+0x11c>
}
80008a6e:	2f ed       	sub	sp,-8
80008a70:	e3 cd 80 80 	ldm	sp++,r7,pc
80008a74:	80 00       	ld.sh	r0,r0[0x0]
80008a76:	86 54       	ld.sh	r4,r3[0xa]
80008a78:	80 00       	ld.sh	r0,r0[0x0]
80008a7a:	aa 94       	st.b	r5[0x1],r4
80008a7c:	80 00       	ld.sh	r0,r0[0x0]
80008a7e:	87 c8       	st.w	r3[0x30],r8
80008a80:	80 00       	ld.sh	r0,r0[0x0]
80008a82:	85 80       	st.w	r2[0x20],r0
80008a84:	80 00       	ld.sh	r0,r0[0x0]
80008a86:	9c d0       	ld.uh	r0,lr[0xa]
80008a88:	00 00       	add	r0,r0
80008a8a:	06 e8       	st.h	--r3,r8
80008a8c:	80 00       	ld.sh	r0,r0[0x0]
80008a8e:	86 bc       	ld.uh	r12,r3[0x6]
80008a90:	80 00       	ld.sh	r0,r0[0x0]
80008a92:	86 94       	ld.uh	r4,r3[0x2]

80008a94 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
80008a94:	eb cd 40 80 	pushm	r7,lr
80008a98:	1a 97       	mov	r7,sp
80008a9a:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
80008a9c:	f0 1f 00 27 	mcall	80008b38 <udd_attach+0xa4>
80008aa0:	18 98       	mov	r8,r12
80008aa2:	ef 48 ff fc 	st.w	r7[-4],r8

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
80008aa6:	30 1c       	mov	r12,1
80008aa8:	f0 1f 00 25 	mcall	80008b3c <udd_attach+0xa8>
	otg_unfreeze_clock();
80008aac:	fe 68 08 00 	mov	r8,-129024
80008ab0:	fe 69 08 00 	mov	r9,-129024
80008ab4:	72 09       	ld.w	r9,r9[0x0]
80008ab6:	af c9       	cbr	r9,0xe
80008ab8:	91 09       	st.w	r8[0x0],r9
	while( !Is_otg_clock_usable() );
80008aba:	fe 68 08 04 	mov	r8,-129020
80008abe:	70 08       	ld.w	r8,r8[0x0]
80008ac0:	e2 18 40 00 	andl	r8,0x4000,COH
80008ac4:	cf b0       	breq	80008aba <udd_attach+0x26>

	// Authorize attach if Vbus is present
	udd_attach_device();
80008ac6:	fe 68 00 00 	mov	r8,-131072
80008aca:	fe 69 00 00 	mov	r9,-131072
80008ace:	72 09       	ld.w	r9,r9[0x0]
80008ad0:	a9 c9       	cbr	r9,0x8
80008ad2:	91 09       	st.w	r8[0x0],r9

	// Enable USB line events
	udd_enable_reset_interrupt();
80008ad4:	fe 68 00 18 	mov	r8,-131048
80008ad8:	30 89       	mov	r9,8
80008ada:	91 09       	st.w	r8[0x0],r9
	udd_enable_suspend_interrupt();
80008adc:	fe 68 00 18 	mov	r8,-131048
80008ae0:	30 19       	mov	r9,1
80008ae2:	91 09       	st.w	r8[0x0],r9
	udd_enable_wake_up_interrupt();
80008ae4:	fe 68 00 18 	mov	r8,-131048
80008ae8:	31 09       	mov	r9,16
80008aea:	91 09       	st.w	r8[0x0],r9
	udd_enable_sof_interrupt();
80008aec:	fe 68 00 18 	mov	r8,-131048
80008af0:	30 49       	mov	r9,4
80008af2:	91 09       	st.w	r8[0x0],r9
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
#endif
	// Reset following interrupts flag
	udd_ack_reset();
80008af4:	fe 68 00 08 	mov	r8,-131064
80008af8:	30 89       	mov	r9,8
80008afa:	91 09       	st.w	r8[0x0],r9
	udd_ack_sof();
80008afc:	fe 68 00 08 	mov	r8,-131064
80008b00:	30 49       	mov	r9,4
80008b02:	91 09       	st.w	r8[0x0],r9
	udd_ack_msof();
80008b04:	fe 68 00 08 	mov	r8,-131064
80008b08:	30 29       	mov	r9,2
80008b0a:	91 09       	st.w	r8[0x0],r9
#if UC3A3
	// With UTMI, the first suspend is detected but must be cleared to reoccur interrupt
	udd_ack_suspend();
#else
	// The first suspend interrupt is not detected else raise it
	udd_raise_suspend();
80008b0c:	fe 68 00 0c 	mov	r8,-131060
80008b10:	30 19       	mov	r9,1
80008b12:	91 09       	st.w	r8[0x0],r9
#endif
	udd_ack_wake_up();
80008b14:	fe 68 00 08 	mov	r8,-131064
80008b18:	31 09       	mov	r9,16
80008b1a:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80008b1c:	fe 68 08 00 	mov	r8,-129024
80008b20:	fe 69 08 00 	mov	r9,-129024
80008b24:	72 09       	ld.w	r9,r9[0x0]
80008b26:	af a9       	sbr	r9,0xe
80008b28:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80008b2a:	ee fc ff fc 	ld.w	r12,r7[-4]
80008b2e:	f0 1f 00 05 	mcall	80008b40 <udd_attach+0xac>
}
80008b32:	2f fd       	sub	sp,-4
80008b34:	e3 cd 80 80 	ldm	sp++,r7,pc
80008b38:	80 00       	ld.sh	r0,r0[0x0]
80008b3a:	86 54       	ld.sh	r4,r3[0xa]
80008b3c:	80 00       	ld.sh	r0,r0[0x0]
80008b3e:	87 68       	st.w	r3[0x18],r8
80008b40:	80 00       	ld.sh	r0,r0[0x0]
80008b42:	86 94       	ld.uh	r4,r3[0x2]

80008b44 <udd_detach>:


void udd_detach(void)
{
80008b44:	eb cd 40 80 	pushm	r7,lr
80008b48:	1a 97       	mov	r7,sp
	otg_unfreeze_clock();
80008b4a:	fe 68 08 00 	mov	r8,-129024
80008b4e:	fe 69 08 00 	mov	r9,-129024
80008b52:	72 09       	ld.w	r9,r9[0x0]
80008b54:	af c9       	cbr	r9,0xe
80008b56:	91 09       	st.w	r8[0x0],r9

	// Detach device from the bus
	udd_detach_device();
80008b58:	fe 68 00 00 	mov	r8,-131072
80008b5c:	fe 69 00 00 	mov	r9,-131072
80008b60:	72 09       	ld.w	r9,r9[0x0]
80008b62:	a9 a9       	sbr	r9,0x8
80008b64:	91 09       	st.w	r8[0x0],r9
	otg_freeze_clock();
80008b66:	fe 68 08 00 	mov	r8,-129024
80008b6a:	fe 69 08 00 	mov	r9,-129024
80008b6e:	72 09       	ld.w	r9,r9[0x0]
80008b70:	af a9       	sbr	r9,0xe
80008b72:	91 09       	st.w	r8[0x0],r9
	udd_sleep_mode(false);
80008b74:	30 0c       	mov	r12,0
80008b76:	f0 1f 00 03 	mcall	80008b80 <udd_detach+0x3c>
}
80008b7a:	e3 cd 80 80 	ldm	sp++,r7,pc
80008b7e:	00 00       	add	r0,r0
80008b80:	80 00       	ld.sh	r0,r0[0x0]
80008b82:	87 68       	st.w	r3[0x18],r8

80008b84 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
80008b84:	eb cd 40 80 	pushm	r7,lr
80008b88:	1a 97       	mov	r7,sp
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
#else
	return false;
80008b8a:	30 08       	mov	r8,0
#endif
}
80008b8c:	10 9c       	mov	r12,r8
80008b8e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008b92 <udd_set_address>:


void udd_set_address(uint8_t address)
{
80008b92:	eb cd 40 80 	pushm	r7,lr
80008b96:	1a 97       	mov	r7,sp
80008b98:	20 1d       	sub	sp,4
80008b9a:	18 98       	mov	r8,r12
80008b9c:	ef 68 ff fc 	st.b	r7[-4],r8
	udd_disable_address();
80008ba0:	fe 68 00 00 	mov	r8,-131072
80008ba4:	fe 69 00 00 	mov	r9,-131072
80008ba8:	72 09       	ld.w	r9,r9[0x0]
80008baa:	a7 d9       	cbr	r9,0x7
80008bac:	91 09       	st.w	r8[0x0],r9
	udd_configure_address(address);
80008bae:	fe 68 00 00 	mov	r8,-131072
80008bb2:	fe 69 00 00 	mov	r9,-131072
80008bb6:	72 09       	ld.w	r9,r9[0x0]
80008bb8:	12 9a       	mov	r10,r9
80008bba:	e0 1a ff 80 	andl	r10,0xff80
80008bbe:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80008bc2:	f3 d9 c0 07 	bfextu	r9,r9,0x0,0x7
80008bc6:	f5 e9 10 09 	or	r9,r10,r9
80008bca:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
80008bcc:	fe 68 00 00 	mov	r8,-131072
80008bd0:	fe 69 00 00 	mov	r9,-131072
80008bd4:	72 09       	ld.w	r9,r9[0x0]
80008bd6:	a7 b9       	sbr	r9,0x7
80008bd8:	91 09       	st.w	r8[0x0],r9
}
80008bda:	2f fd       	sub	sp,-4
80008bdc:	e3 cd 80 80 	ldm	sp++,r7,pc

80008be0 <udd_getaddress>:


uint8_t udd_getaddress(void)
{
80008be0:	eb cd 40 80 	pushm	r7,lr
80008be4:	1a 97       	mov	r7,sp
	return udd_get_configured_address();
80008be6:	fe 68 00 00 	mov	r8,-131072
80008bea:	70 08       	ld.w	r8,r8[0x0]
80008bec:	5c 58       	castu.b	r8
80008bee:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
}
80008bf2:	10 9c       	mov	r12,r8
80008bf4:	e3 cd 80 80 	ldm	sp++,r7,pc

80008bf8 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
80008bf8:	eb cd 40 80 	pushm	r7,lr
80008bfc:	1a 97       	mov	r7,sp
	return udd_frame_number();
80008bfe:	fe 68 00 20 	mov	r8,-131040
80008c02:	70 08       	ld.w	r8,r8[0x0]
80008c04:	e2 18 3f f8 	andl	r8,0x3ff8,COH
80008c08:	a3 98       	lsr	r8,0x3
80008c0a:	5c 88       	casts.h	r8
}
80008c0c:	10 9c       	mov	r12,r8
80008c0e:	e3 cd 80 80 	ldm	sp++,r7,pc

80008c12 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
80008c12:	eb cd 40 80 	pushm	r7,lr
80008c16:	1a 97       	mov	r7,sp
	return udd_micro_frame_number();
80008c18:	fe 68 00 00 	mov	r8,-131072
80008c1c:	70 88       	ld.w	r8,r8[0x20]
80008c1e:	5c 88       	casts.h	r8
80008c20:	5c 88       	casts.h	r8
80008c22:	f1 d8 c0 0e 	bfextu	r8,r8,0x0,0xe
}
80008c26:	10 9c       	mov	r12,r8
80008c28:	e3 cd 80 80 	ldm	sp++,r7,pc

80008c2c <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
80008c2c:	eb cd 40 80 	pushm	r7,lr
80008c30:	1a 97       	mov	r7,sp
80008c32:	20 2d       	sub	sp,8
80008c34:	ef 4c ff fc 	st.w	r7[-4],r12
80008c38:	16 98       	mov	r8,r11
80008c3a:	ef 58 ff f8 	st.h	r7[-8],r8
	udd_g_ctrlreq.payload = payload;
80008c3e:	48 68       	lddpc	r8,80008c54 <udd_set_setup_payload+0x28>
80008c40:	ee f9 ff fc 	ld.w	r9,r7[-4]
80008c44:	91 29       	st.w	r8[0x8],r9
	udd_g_ctrlreq.payload_size = payload_size;
80008c46:	48 49       	lddpc	r9,80008c54 <udd_set_setup_payload+0x28>
80008c48:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80008c4c:	b2 68       	st.h	r9[0xc],r8
}
80008c4e:	2f ed       	sub	sp,-8
80008c50:	e3 cd 80 80 	ldm	sp++,r7,pc
80008c54:	00 00       	add	r0,r0
80008c56:	12 1c       	sub	r12,r9

80008c58 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
80008c58:	eb cd 40 80 	pushm	r7,lr
80008c5c:	1a 97       	mov	r7,sp
80008c5e:	20 dd       	sub	sp,52
80008c60:	16 99       	mov	r9,r11
80008c62:	14 98       	mov	r8,r10
80008c64:	18 9a       	mov	r10,r12
80008c66:	ef 6a ff d4 	st.b	r7[-44],r10
80008c6a:	ef 69 ff d0 	st.b	r7[-48],r9
80008c6e:	ef 58 ff cc 	st.h	r7[-52],r8
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t bank, i;

	b_dir_in = ep & USB_EP_DIR_IN;
80008c72:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008c76:	a7 98       	lsr	r8,0x7
80008c78:	ef 68 ff db 	st.b	r7[-37],r8
	ep = ep & USB_EP_ADDR_MASK;
80008c7c:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008c80:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008c84:	ef 68 ff d4 	st.b	r7[-44],r8

	if (ep > USB_DEVICE_MAX_EP) {
80008c88:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80008c8c:	30 38       	mov	r8,3
80008c8e:	f0 09 18 00 	cp.b	r9,r8
80008c92:	e0 88 00 04 	brls	80008c9a <udd_ep_alloc+0x42>
		return false;
80008c96:	30 08       	mov	r8,0
80008c98:	c7 f9       	rjmp	80008f96 <udd_ep_alloc+0x33e>
	}
	if (Is_udd_endpoint_enabled(ep)) {
80008c9a:	fe 68 00 00 	mov	r8,-131072
80008c9e:	70 79       	ld.w	r9,r8[0x1c]
80008ca0:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008ca4:	30 1a       	mov	r10,1
80008ca6:	f4 08 09 48 	lsl	r8,r10,r8
80008caa:	f3 e8 00 08 	and	r8,r9,r8
80008cae:	c0 30       	breq	80008cb4 <udd_ep_alloc+0x5c>
		return false;
80008cb0:	30 08       	mov	r8,0
80008cb2:	c7 29       	rjmp	80008f96 <udd_ep_alloc+0x33e>
	}

	// Bank choice
	switch(bmAttributes&USB_EP_TYPE_MASK) {
80008cb4:	ef 38 ff d0 	ld.ub	r8,r7[-48]
80008cb8:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80008cbc:	58 28       	cp.w	r8,2
80008cbe:	c0 d0       	breq	80008cd8 <udd_ep_alloc+0x80>
80008cc0:	58 38       	cp.w	r8,3
80008cc2:	c0 70       	breq	80008cd0 <udd_ep_alloc+0x78>
80008cc4:	58 18       	cp.w	r8,1
80008cc6:	c0 d1       	brne	80008ce0 <udd_ep_alloc+0x88>
	case USB_EP_TYPE_ISOCHRONOUS:
		bank = UDD_ISOCHRONOUS_NB_BANK(ep);
80008cc8:	30 28       	mov	r8,2
80008cca:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80008cce:	c0 b8       	rjmp	80008ce4 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_INTERRUPT:
		bank = UDD_INTERRUPT_NB_BANK(ep);
80008cd0:	30 18       	mov	r8,1
80008cd2:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80008cd6:	c0 78       	rjmp	80008ce4 <udd_ep_alloc+0x8c>
	case USB_EP_TYPE_BULK:
		bank = UDD_BULK_NB_BANK(ep);
80008cd8:	30 28       	mov	r8,2
80008cda:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80008cde:	c0 38       	rjmp	80008ce4 <udd_ep_alloc+0x8c>
	default:
		Assert(false);
		return false;
80008ce0:	30 08       	mov	r8,0
80008ce2:	c5 a9       	rjmp	80008f96 <udd_ep_alloc+0x33e>
	}
	switch(bank) {
80008ce4:	ef 38 ff de 	ld.ub	r8,r7[-34]
80008ce8:	58 28       	cp.w	r8,2
80008cea:	c0 90       	breq	80008cfc <udd_ep_alloc+0xa4>
80008cec:	58 38       	cp.w	r8,3
80008cee:	c0 b0       	breq	80008d04 <udd_ep_alloc+0xac>
80008cf0:	58 18       	cp.w	r8,1
80008cf2:	c0 d1       	brne	80008d0c <udd_ep_alloc+0xb4>
	case 1:
		bank = AVR32_USBB_UECFG0_EPBK_SINGLE;
80008cf4:	30 08       	mov	r8,0
80008cf6:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80008cfa:	c0 b8       	rjmp	80008d10 <udd_ep_alloc+0xb8>
	case 2:
		bank = AVR32_USBB_UECFG0_EPBK_DOUBLE;
80008cfc:	30 18       	mov	r8,1
80008cfe:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80008d02:	c0 78       	rjmp	80008d10 <udd_ep_alloc+0xb8>
	case 3:
		bank = AVR32_USBB_UECFG0_EPBK_TRIPLE;
80008d04:	30 28       	mov	r8,2
80008d06:	ef 68 ff de 	st.b	r7[-34],r8
		break;
80008d0a:	c0 38       	rjmp	80008d10 <udd_ep_alloc+0xb8>
	default:
		Assert(false);
		return false;
80008d0c:	30 08       	mov	r8,0
80008d0e:	c4 49       	rjmp	80008f96 <udd_ep_alloc+0x33e>
	Assert(MaxEndpointSize < 1024);
	Assert((MaxEndpointSize == 1023) || !(MaxEndpointSize & (MaxEndpointSize - 1)));
	Assert(MaxEndpointSize >= 8);

	// Set configuration of new endpoint
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
80008d10:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008d14:	a3 68       	lsl	r8,0x2
80008d16:	e0 38 ff 00 	sub	r8,130816
80008d1a:	ef 39 ff d4 	ld.ub	r9,r7[-44]
80008d1e:	a3 69       	lsl	r9,0x2
80008d20:	e0 39 ff 00 	sub	r9,130816
80008d24:	72 09       	ld.w	r9,r9[0x0]
80008d26:	12 9a       	mov	r10,r9
80008d28:	e0 1a e6 83 	andl	r10,0xe683
80008d2c:	ef 39 ff d0 	ld.ub	r9,r7[-48]
80008d30:	ab 79       	lsl	r9,0xb
80008d32:	12 9b       	mov	r11,r9
80008d34:	e2 1b 18 00 	andl	r11,0x1800,COH
80008d38:	ef 39 ff db 	ld.ub	r9,r7[-37]
80008d3c:	a9 69       	lsl	r9,0x8
80008d3e:	e2 19 01 00 	andl	r9,0x100,COH
80008d42:	12 4b       	or	r11,r9
80008d44:	ef 19 ff cc 	ld.uh	r9,r7[-52]
80008d48:	ef 49 ff f0 	st.w	r7[-16],r9
80008d4c:	30 89       	mov	r9,8
80008d4e:	ef 49 ff f4 	st.w	r7[-12],r9
80008d52:	ee f9 ff f0 	ld.w	r9,r7[-16]
80008d56:	ee fc ff f4 	ld.w	r12,r7[-12]
80008d5a:	f2 0c 0c 49 	max	r9,r9,r12
80008d5e:	ef 49 ff ec 	st.w	r7[-20],r9
80008d62:	ee f9 ff ec 	ld.w	r9,r7[-20]
80008d66:	ef 49 ff e4 	st.w	r7[-28],r9
80008d6a:	e0 69 04 00 	mov	r9,1024
80008d6e:	ef 49 ff e8 	st.w	r7[-24],r9
80008d72:	ee f9 ff e4 	ld.w	r9,r7[-28]
80008d76:	ee fc ff e8 	ld.w	r12,r7[-24]
80008d7a:	f2 0c 0d 49 	min	r9,r9,r12
80008d7e:	ef 49 ff e0 	st.w	r7[-32],r9
80008d82:	ee f9 ff e0 	ld.w	r9,r7[-32]
80008d86:	a1 79       	lsl	r9,0x1
80008d88:	20 19       	sub	r9,1
80008d8a:	f2 09 12 00 	clz	r9,r9
80008d8e:	f2 09 11 1c 	rsub	r9,r9,28
80008d92:	a5 69       	lsl	r9,0x4
80008d94:	12 4b       	or	r11,r9
80008d96:	ef 39 ff de 	ld.ub	r9,r7[-34]
80008d9a:	a3 69       	lsl	r9,0x2
80008d9c:	e2 19 00 0c 	andl	r9,0xc,COH
80008da0:	f7 e9 10 09 	or	r9,r11,r9
80008da4:	e2 19 19 7c 	andl	r9,0x197c,COH
80008da8:	f5 e9 10 09 	or	r9,r10,r9
80008dac:	91 09       	st.w	r8[0x0],r9
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;
80008dae:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008db2:	30 19       	mov	r9,1
80008db4:	f2 08 09 48 	lsl	r8,r9,r8
80008db8:	ef 58 ff dc 	st.h	r7[-36],r8

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80008dbc:	30 38       	mov	r8,3
80008dbe:	ef 68 ff df 	st.b	r7[-33],r8
80008dc2:	c3 a8       	rjmp	80008e36 <udd_ep_alloc+0x1de>
		if (Is_udd_endpoint_enabled(i)) {
80008dc4:	fe 68 00 00 	mov	r8,-131072
80008dc8:	70 79       	ld.w	r9,r8[0x1c]
80008dca:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008dce:	30 1a       	mov	r10,1
80008dd0:	f4 08 09 48 	lsl	r8,r10,r8
80008dd4:	f3 e8 00 08 	and	r8,r9,r8
80008dd8:	c2 a0       	breq	80008e2c <udd_ep_alloc+0x1d4>
			ep_allocated |= 1 << i;
80008dda:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008dde:	30 19       	mov	r9,1
80008de0:	f2 08 09 48 	lsl	r8,r9,r8
80008de4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80008de8:	ef 08 ff dc 	ld.sh	r8,r7[-36]
80008dec:	f3 e8 10 08 	or	r8,r9,r8
80008df0:	5c 88       	casts.h	r8
80008df2:	ef 58 ff dc 	st.h	r7[-36],r8
			udd_disable_endpoint(i);
80008df6:	fe 68 00 00 	mov	r8,-131072
80008dfa:	fe 69 00 00 	mov	r9,-131072
80008dfe:	72 7a       	ld.w	r10,r9[0x1c]
80008e00:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008e04:	30 1b       	mov	r11,1
80008e06:	f6 09 09 49 	lsl	r9,r11,r9
80008e0a:	5c d9       	com	r9
80008e0c:	f5 e9 00 09 	and	r9,r10,r9
80008e10:	91 79       	st.w	r8[0x1c],r9
			udd_unallocate_memory(i);
80008e12:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008e16:	a3 68       	lsl	r8,0x2
80008e18:	e0 38 ff 00 	sub	r8,130816
80008e1c:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008e20:	a3 69       	lsl	r9,0x2
80008e22:	e0 39 ff 00 	sub	r9,130816
80008e26:	72 09       	ld.w	r9,r9[0x0]
80008e28:	a1 d9       	cbr	r9,0x1
80008e2a:	91 09       	st.w	r8[0x0],r9
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
			MaxEndpointSize, bank);
	ep_allocated = 1 << ep;

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
80008e2c:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008e30:	20 18       	sub	r8,1
80008e32:	ef 68 ff df 	st.b	r7[-33],r8
80008e36:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008e3a:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008e3e:	f0 09 18 00 	cp.b	r9,r8
80008e42:	fe 9b ff c1 	brhi	80008dc4 <udd_ep_alloc+0x16c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80008e46:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80008e4a:	ef 68 ff df 	st.b	r7[-33],r8
80008e4e:	c9 c8       	rjmp	80008f86 <udd_ep_alloc+0x32e>
		if (ep_allocated & (1 << i)) {
80008e50:	ef 19 ff dc 	ld.uh	r9,r7[-36]
80008e54:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008e58:	f2 08 08 48 	asr	r8,r9,r8
80008e5c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80008e60:	5c 58       	castu.b	r8
80008e62:	e0 80 00 8d 	breq	80008f7c <udd_ep_alloc+0x324>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
80008e66:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008e6a:	f0 c9 00 01 	sub	r9,r8,1
80008e6e:	12 98       	mov	r8,r9
80008e70:	a3 68       	lsl	r8,0x2
80008e72:	12 08       	add	r8,r9
80008e74:	a3 68       	lsl	r8,0x2
80008e76:	10 99       	mov	r9,r8
80008e78:	4c a8       	lddpc	r8,80008fa0 <udd_ep_alloc+0x348>
80008e7a:	f2 08 00 08 	add	r8,r9,r8
80008e7e:	ef 48 ff f8 	st.w	r7[-8],r8
			bool b_restart = ptr_job->busy;
80008e82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008e86:	70 08       	ld.w	r8,r8[0x0]
80008e88:	e6 18 80 00 	andh	r8,0x8000,COH
80008e8c:	5f 18       	srne	r8
80008e8e:	ef 68 ff ff 	st.b	r7[-1],r8
			ptr_job->busy = false;
80008e92:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008e96:	72 08       	ld.w	r8,r9[0x0]
80008e98:	30 0a       	mov	r10,0
80008e9a:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80008e9e:	93 08       	st.w	r9[0x0],r8

			udd_allocate_memory(i);
80008ea0:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008ea4:	a3 68       	lsl	r8,0x2
80008ea6:	e0 38 ff 00 	sub	r8,130816
80008eaa:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008eae:	a3 69       	lsl	r9,0x2
80008eb0:	e0 39 ff 00 	sub	r9,130816
80008eb4:	72 09       	ld.w	r9,r9[0x0]
80008eb6:	a1 b9       	sbr	r9,0x1
80008eb8:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint(i);
80008eba:	fe 68 00 00 	mov	r8,-131072
80008ebe:	fe 69 00 00 	mov	r9,-131072
80008ec2:	72 7a       	ld.w	r10,r9[0x1c]
80008ec4:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008ec8:	30 1b       	mov	r11,1
80008eca:	f6 09 09 49 	lsl	r9,r11,r9
80008ece:	f5 e9 10 09 	or	r9,r10,r9
80008ed2:	91 79       	st.w	r8[0x1c],r9
			if (!Is_udd_endpoint_configured(i)) {
80008ed4:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008ed8:	a3 68       	lsl	r8,0x2
80008eda:	e0 38 fe d0 	sub	r8,130768
80008ede:	70 08       	ld.w	r8,r8[0x0]
80008ee0:	e6 18 00 04 	andh	r8,0x4,COH
80008ee4:	c2 61       	brne	80008f30 <udd_ep_alloc+0x2d8>
				if (NULL == ptr_job->call_trans) {
80008ee6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008eea:	70 48       	ld.w	r8,r8[0x10]
80008eec:	58 08       	cp.w	r8,0
80008eee:	c0 31       	brne	80008ef4 <udd_ep_alloc+0x29c>
					return false;
80008ef0:	30 08       	mov	r8,0
80008ef2:	c5 28       	rjmp	80008f96 <udd_ep_alloc+0x33e>
				}
				if (Is_udd_endpoint_in(i)) {
80008ef4:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008ef8:	a3 68       	lsl	r8,0x2
80008efa:	e0 38 ff 00 	sub	r8,130816
80008efe:	70 08       	ld.w	r8,r8[0x0]
80008f00:	e2 18 01 00 	andl	r8,0x100,COH
80008f04:	c0 90       	breq	80008f16 <udd_ep_alloc+0x2be>
					i |= USB_EP_DIR_IN;
80008f06:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008f0a:	ea 18 ff ff 	orh	r8,0xffff
80008f0e:	e8 18 ff 80 	orl	r8,0xff80
80008f12:	ef 68 ff df 	st.b	r7[-33],r8
				}				
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
80008f16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f1a:	70 48       	ld.w	r8,r8[0x10]
80008f1c:	ef 3a ff df 	ld.ub	r10,r7[-33]
80008f20:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008f24:	72 29       	ld.w	r9,r9[0x8]
80008f26:	12 9b       	mov	r11,r9
80008f28:	30 1c       	mov	r12,1
80008f2a:	5d 18       	icall	r8
						ptr_job->buf_size, i);
				return false;
80008f2c:	30 08       	mov	r8,0
80008f2e:	c3 48       	rjmp	80008f96 <udd_ep_alloc+0x33e>
			}
			udd_enable_endpoint_bank_autoswitch(i);
80008f30:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008f34:	a3 68       	lsl	r8,0x2
80008f36:	e0 38 ff 00 	sub	r8,130816
80008f3a:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008f3e:	a3 69       	lsl	r9,0x2
80008f40:	e0 39 ff 00 	sub	r9,130816
80008f44:	72 09       	ld.w	r9,r9[0x0]
80008f46:	a9 b9       	sbr	r9,0x9
80008f48:	91 09       	st.w	r8[0x0],r9
			if (b_restart) {
80008f4a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008f4e:	30 08       	mov	r8,0
80008f50:	f0 09 18 00 	cp.b	r9,r8
80008f54:	c1 40       	breq	80008f7c <udd_ep_alloc+0x324>
				// Re-run the job
				udd_ep_run(i, ptr_job->b_shortpacket,
80008f56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80008f5a:	70 48       	ld.w	r8,r8[0x10]
80008f5c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80008f60:	72 29       	ld.w	r9,r9[0x8]
80008f62:	ee fa ff f8 	ld.w	r10,r7[-8]
80008f66:	74 1a       	ld.w	r10,r10[0x4]
80008f68:	ee fb ff f8 	ld.w	r11,r7[-8]
80008f6c:	76 0b       	ld.w	r11,r11[0x0]
80008f6e:	e6 1b 40 00 	andh	r11,0x4000,COH
80008f72:	5f 1b       	srne	r11
80008f74:	ef 3c ff df 	ld.ub	r12,r7[-33]
80008f78:	f0 1f 00 0b 	mcall	80008fa4 <udd_ep_alloc+0x34c>
			udd_unallocate_memory(i);
		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
80008f7c:	ef 38 ff df 	ld.ub	r8,r7[-33]
80008f80:	2f f8       	sub	r8,-1
80008f82:	ef 68 ff df 	st.b	r7[-33],r8
80008f86:	ef 39 ff df 	ld.ub	r9,r7[-33]
80008f8a:	30 38       	mov	r8,3
80008f8c:	f0 09 18 00 	cp.b	r9,r8
80008f90:	fe 98 ff 60 	brls	80008e50 <udd_ep_alloc+0x1f8>
						ptr_job->buf_size,
						ptr_job->call_trans);
			}
		}
	}
	return true;
80008f94:	30 18       	mov	r8,1
}
80008f96:	10 9c       	mov	r12,r8
80008f98:	2f 3d       	sub	sp,-52
80008f9a:	e3 cd 80 80 	ldm	sp++,r7,pc
80008f9e:	00 00       	add	r0,r0
80008fa0:	00 00       	add	r0,r0
80008fa2:	06 f4       	st.b	--r3,r4
80008fa4:	80 00       	ld.sh	r0,r0[0x0]
80008fa6:	92 c8       	ld.uh	r8,r9[0x8]

80008fa8 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
80008fa8:	eb cd 40 80 	pushm	r7,lr
80008fac:	1a 97       	mov	r7,sp
80008fae:	20 2d       	sub	sp,8
80008fb0:	18 98       	mov	r8,r12
80008fb2:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
80008fb6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80008fba:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80008fbe:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
80008fc2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008fc6:	30 38       	mov	r8,3
80008fc8:	f0 09 18 00 	cp.b	r9,r8
80008fcc:	e0 8b 00 33 	brhi	80009032 <udd_ep_free+0x8a>
		return;
	}
	udd_disable_endpoint(index);
80008fd0:	fe 68 00 00 	mov	r8,-131072
80008fd4:	fe 69 00 00 	mov	r9,-131072
80008fd8:	72 7a       	ld.w	r10,r9[0x1c]
80008fda:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008fde:	30 1b       	mov	r11,1
80008fe0:	f6 09 09 49 	lsl	r9,r11,r9
80008fe4:	5c d9       	com	r9
80008fe6:	f5 e9 00 09 	and	r9,r10,r9
80008fea:	91 79       	st.w	r8[0x1c],r9
	udd_unallocate_memory(index);
80008fec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80008ff0:	a3 68       	lsl	r8,0x2
80008ff2:	e0 38 ff 00 	sub	r8,130816
80008ff6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80008ffa:	a3 69       	lsl	r9,0x2
80008ffc:	e0 39 ff 00 	sub	r9,130816
80009000:	72 09       	ld.w	r9,r9[0x0]
80009002:	a1 d9       	cbr	r9,0x1
80009004:	91 09       	st.w	r8[0x0],r9
	udd_ep_abort_job(ep);
80009006:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000900a:	10 9c       	mov	r12,r8
8000900c:	f0 1f 00 0c 	mcall	8000903c <udd_ep_free+0x94>
	udd_ep_job[index - 1].stall_requested = false;
80009010:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009014:	f0 c9 00 01 	sub	r9,r8,1
80009018:	48 aa       	lddpc	r10,80009040 <udd_ep_free+0x98>
8000901a:	12 98       	mov	r8,r9
8000901c:	a3 68       	lsl	r8,0x2
8000901e:	12 08       	add	r8,r9
80009020:	a3 68       	lsl	r8,0x2
80009022:	f4 08 00 09 	add	r9,r10,r8
80009026:	72 08       	ld.w	r8,r9[0x0]
80009028:	30 0a       	mov	r10,0
8000902a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000902e:	93 08       	st.w	r9[0x0],r8
80009030:	c0 28       	rjmp	80009034 <udd_ep_free+0x8c>
void udd_ep_free(udd_ep_id_t ep)
{
	uint8_t index = ep & USB_EP_ADDR_MASK;

	if (USB_DEVICE_MAX_EP < index) {
		return;
80009032:	d7 03       	nop
	}
	udd_disable_endpoint(index);
	udd_unallocate_memory(index);
	udd_ep_abort_job(ep);
	udd_ep_job[index - 1].stall_requested = false;
}
80009034:	2f ed       	sub	sp,-8
80009036:	e3 cd 80 80 	ldm	sp++,r7,pc
8000903a:	00 00       	add	r0,r0
8000903c:	80 00       	ld.sh	r0,r0[0x0]
8000903e:	9d 98       	st.w	lr[0x24],r8
80009040:	00 00       	add	r0,r0
80009042:	06 f4       	st.b	--r3,r4

80009044 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
80009044:	eb cd 40 80 	pushm	r7,lr
80009048:	1a 97       	mov	r7,sp
8000904a:	20 1d       	sub	sp,4
8000904c:	18 98       	mov	r8,r12
8000904e:	ef 68 ff fc 	st.b	r7[-4],r8
	return Is_udd_endpoint_stall_requested(ep & USB_EP_ADDR_MASK);
80009052:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009056:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000905a:	a3 68       	lsl	r8,0x2
8000905c:	e0 38 fe 40 	sub	r8,130624
80009060:	70 08       	ld.w	r8,r8[0x0]
80009062:	e6 18 00 08 	andh	r8,0x8,COH
80009066:	5f 18       	srne	r8
80009068:	5c 58       	castu.b	r8
}
8000906a:	10 9c       	mov	r12,r8
8000906c:	2f fd       	sub	sp,-4
8000906e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009072:	d7 03       	nop

80009074 <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
80009074:	eb cd 40 80 	pushm	r7,lr
80009078:	1a 97       	mov	r7,sp
8000907a:	20 3d       	sub	sp,12
8000907c:	18 98       	mov	r8,r12
8000907e:	ef 68 ff f4 	st.b	r7[-12],r8
	udd_ep_job_t *ptr_job;
	uint8_t index = ep & USB_EP_ADDR_MASK;
80009082:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009086:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8000908a:	ef 68 ff ff 	st.b	r7[-1],r8

	if (USB_DEVICE_MAX_EP < index) {
8000908e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009092:	30 38       	mov	r8,3
80009094:	f0 09 18 00 	cp.b	r9,r8
80009098:	e0 88 00 04 	brls	800090a0 <udd_ep_set_halt+0x2c>
		return false;
8000909c:	30 08       	mov	r8,0
8000909e:	c6 f8       	rjmp	8000917c <udd_ep_set_halt+0x108>
	}

	ptr_job = &udd_ep_job[index - 1];
800090a0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800090a4:	f0 c9 00 01 	sub	r9,r8,1
800090a8:	12 98       	mov	r8,r9
800090aa:	a3 68       	lsl	r8,0x2
800090ac:	12 08       	add	r8,r9
800090ae:	a3 68       	lsl	r8,0x2
800090b0:	10 99       	mov	r9,r8
800090b2:	4b 58       	lddpc	r8,80009184 <udd_ep_set_halt+0x110>
800090b4:	f2 08 00 08 	add	r8,r9,r8
800090b8:	ef 48 ff f8 	st.w	r7[-8],r8

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
800090bc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800090c0:	a3 68       	lsl	r8,0x2
800090c2:	e0 38 fe 40 	sub	r8,130624
800090c6:	70 08       	ld.w	r8,r8[0x0]
800090c8:	e6 18 00 08 	andh	r8,0x8,COH
800090cc:	c0 71       	brne	800090da <udd_ep_set_halt+0x66>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
800090ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800090d2:	70 08       	ld.w	r8,r8[0x0]
800090d4:	e6 18 20 00 	andh	r8,0x2000,COH
		return false;
	}

	ptr_job = &udd_ep_job[index - 1];

	if (Is_udd_endpoint_stall_requested(index) // Endpoint stalled
800090d8:	c0 30       	breq	800090de <udd_ep_set_halt+0x6a>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
		return true; // Already STALL
800090da:	30 18       	mov	r8,1
800090dc:	c5 08       	rjmp	8000917c <udd_ep_set_halt+0x108>
	}

	if (ptr_job->busy == true) {
800090de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800090e2:	70 08       	ld.w	r8,r8[0x0]
800090e4:	e6 18 80 00 	andh	r8,0x8000,COH
800090e8:	c0 30       	breq	800090ee <udd_ep_set_halt+0x7a>
		return false; // Job on going, stall impossible
800090ea:	30 08       	mov	r8,0
800090ec:	c4 88       	rjmp	8000917c <udd_ep_set_halt+0x108>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(index))) {
800090ee:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800090f2:	30 08       	mov	r8,0
800090f4:	f0 09 18 00 	cp.b	r9,r8
800090f8:	c2 54       	brge	80009142 <udd_ep_set_halt+0xce>
800090fa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800090fe:	a3 68       	lsl	r8,0x2
80009100:	e0 38 fe d0 	sub	r8,130768
80009104:	70 08       	ld.w	r8,r8[0x0]
80009106:	e2 18 30 00 	andl	r8,0x3000,COH
8000910a:	ad 88       	lsr	r8,0xc
8000910c:	c1 b0       	breq	80009142 <udd_ep_set_halt+0xce>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
8000910e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009112:	72 08       	ld.w	r8,r9[0x0]
80009114:	30 1a       	mov	r10,1
80009116:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000911a:	93 08       	st.w	r9[0x0],r8
			udd_enable_bank_interrupt(index);
8000911c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009120:	a3 68       	lsl	r8,0x2
80009122:	e0 38 fe 10 	sub	r8,130576
80009126:	e0 69 10 00 	mov	r9,4096
8000912a:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(index);
8000912c:	fe 68 00 00 	mov	r8,-131072
80009130:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009134:	e0 6a 10 00 	mov	r10,4096
80009138:	f4 09 09 49 	lsl	r9,r10,r9
8000913c:	91 69       	st.w	r8[0x18],r9
			return true;
8000913e:	30 18       	mov	r8,1
80009140:	c1 e8       	rjmp	8000917c <udd_ep_set_halt+0x108>
	}
	
	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(index);
80009142:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009146:	a3 68       	lsl	r8,0x2
80009148:	e0 38 ff 00 	sub	r8,130816
8000914c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009150:	a3 69       	lsl	r9,0x2
80009152:	e0 39 ff 00 	sub	r9,130816
80009156:	72 09       	ld.w	r9,r9[0x0]
80009158:	a9 d9       	cbr	r9,0x9
8000915a:	91 09       	st.w	r8[0x0],r9
	udd_ack_stall(index);
8000915c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009160:	a3 68       	lsl	r8,0x2
80009162:	e0 38 fe a0 	sub	r8,130720
80009166:	34 09       	mov	r9,64
80009168:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(index);
8000916a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000916e:	a3 68       	lsl	r8,0x2
80009170:	e0 38 fe 10 	sub	r8,130576
80009174:	e8 69 00 00 	mov	r9,524288
80009178:	91 09       	st.w	r8[0x0],r9
	return true;
8000917a:	30 18       	mov	r8,1
}
8000917c:	10 9c       	mov	r12,r8
8000917e:	2f dd       	sub	sp,-12
80009180:	e3 cd 80 80 	ldm	sp++,r7,pc
80009184:	00 00       	add	r0,r0
80009186:	06 f4       	st.b	--r3,r4

80009188 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
80009188:	eb cd 40 80 	pushm	r7,lr
8000918c:	1a 97       	mov	r7,sp
8000918e:	20 3d       	sub	sp,12
80009190:	18 98       	mov	r8,r12
80009192:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_stall_cleared = false;
80009196:	30 08       	mov	r8,0
80009198:	ef 68 ff fb 	st.b	r7[-5],r8
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
8000919c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800091a0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800091a4:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep)
800091a8:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800091ac:	30 38       	mov	r8,3
800091ae:	f0 09 18 00 	cp.b	r9,r8
800091b2:	e0 88 00 04 	brls	800091ba <udd_ep_clear_halt+0x32>
		return false;
800091b6:	30 08       	mov	r8,0
800091b8:	c8 18       	rjmp	800092ba <udd_ep_clear_halt+0x132>
	ptr_job = &udd_ep_job[ep - 1];
800091ba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800091be:	f0 c9 00 01 	sub	r9,r8,1
800091c2:	12 98       	mov	r8,r9
800091c4:	a3 68       	lsl	r8,0x2
800091c6:	12 08       	add	r8,r9
800091c8:	a3 68       	lsl	r8,0x2
800091ca:	10 99       	mov	r9,r8
800091cc:	4b e8       	lddpc	r8,800092c4 <udd_ep_clear_halt+0x13c>
800091ce:	f2 08 00 08 	add	r8,r9,r8
800091d2:	ef 48 ff fc 	st.w	r7[-4],r8

	if (ptr_job->stall_requested) {
800091d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800091da:	70 08       	ld.w	r8,r8[0x0]
800091dc:	e6 18 20 00 	andh	r8,0x2000,COH
800091e0:	c1 c0       	breq	80009218 <udd_ep_clear_halt+0x90>
		// Endpoint stall has been requested but not done
		// Remove stall request
		ptr_job->stall_requested = false;
800091e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800091e6:	72 08       	ld.w	r8,r9[0x0]
800091e8:	30 0a       	mov	r10,0
800091ea:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
800091ee:	93 08       	st.w	r9[0x0],r8
		udd_disable_bank_interrupt(ep);
800091f0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800091f4:	a3 68       	lsl	r8,0x2
800091f6:	e0 38 fd e0 	sub	r8,130528
800091fa:	e0 69 10 00 	mov	r9,4096
800091fe:	91 09       	st.w	r8[0x0],r9
		udd_disable_endpoint_interrupt(ep);
80009200:	fe 68 00 00 	mov	r8,-131072
80009204:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009208:	e0 6a 10 00 	mov	r10,4096
8000920c:	f4 09 09 49 	lsl	r9,r10,r9
80009210:	91 59       	st.w	r8[0x14],r9
		b_stall_cleared = true;
80009212:	30 18       	mov	r8,1
80009214:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (Is_udd_endpoint_stall_requested(ep)) { 
80009218:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000921c:	a3 68       	lsl	r8,0x2
8000921e:	e0 38 fe 40 	sub	r8,130624
80009222:	70 08       	ld.w	r8,r8[0x0]
80009224:	e6 18 00 08 	andh	r8,0x8,COH
80009228:	c3 10       	breq	8000928a <udd_ep_clear_halt+0x102>
		if (Is_udd_stall(ep)) {
8000922a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000922e:	a3 68       	lsl	r8,0x2
80009230:	e0 38 fe d0 	sub	r8,130768
80009234:	70 08       	ld.w	r8,r8[0x0]
80009236:	e2 18 00 40 	andl	r8,0x40,COH
8000923a:	c1 00       	breq	8000925a <udd_ep_clear_halt+0xd2>
			udd_ack_stall(ep);
8000923c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009240:	a3 68       	lsl	r8,0x2
80009242:	e0 38 fe a0 	sub	r8,130720
80009246:	34 09       	mov	r9,64
80009248:	91 09       	st.w	r8[0x0],r9
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
8000924a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000924e:	a3 68       	lsl	r8,0x2
80009250:	e0 38 fe 10 	sub	r8,130576
80009254:	e4 69 00 00 	mov	r9,262144
80009258:	91 09       	st.w	r8[0x0],r9
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
8000925a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000925e:	a3 68       	lsl	r8,0x2
80009260:	e0 38 fd e0 	sub	r8,130528
80009264:	e8 69 00 00 	mov	r9,524288
80009268:	91 09       	st.w	r8[0x0],r9
		udd_enable_endpoint_bank_autoswitch(ep);
8000926a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000926e:	a3 68       	lsl	r8,0x2
80009270:	e0 38 ff 00 	sub	r8,130816
80009274:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80009278:	a3 69       	lsl	r9,0x2
8000927a:	e0 39 ff 00 	sub	r9,130816
8000927e:	72 09       	ld.w	r9,r9[0x0]
80009280:	a9 b9       	sbr	r9,0x9
80009282:	91 09       	st.w	r8[0x0],r9
		b_stall_cleared = true;
80009284:	30 18       	mov	r8,1
80009286:	ef 68 ff fb 	st.b	r7[-5],r8
	}
	if (b_stall_cleared) {
8000928a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000928e:	30 08       	mov	r8,0
80009290:	f0 09 18 00 	cp.b	r9,r8
80009294:	c1 20       	breq	800092b8 <udd_ep_clear_halt+0x130>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
80009296:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000929a:	70 08       	ld.w	r8,r8[0x0]
8000929c:	e6 18 80 00 	andh	r8,0x8000,COH
800092a0:	c0 c0       	breq	800092b8 <udd_ep_clear_halt+0x130>
			ptr_job->busy = false;
800092a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800092a6:	72 08       	ld.w	r8,r9[0x0]
800092a8:	30 0a       	mov	r10,0
800092aa:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
800092ae:	93 08       	st.w	r9[0x0],r8
			ptr_job->call_nohalt();
800092b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800092b4:	70 48       	ld.w	r8,r8[0x10]
800092b6:	5d 18       	icall	r8
		}
	}
	return true;
800092b8:	30 18       	mov	r8,1
}
800092ba:	10 9c       	mov	r12,r8
800092bc:	2f dd       	sub	sp,-12
800092be:	e3 cd 80 80 	ldm	sp++,r7,pc
800092c2:	00 00       	add	r0,r0
800092c4:	00 00       	add	r0,r0
800092c6:	06 f4       	st.b	--r3,r4

800092c8 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
800092c8:	eb cd 40 80 	pushm	r7,lr
800092cc:	1a 97       	mov	r7,sp
800092ce:	20 7d       	sub	sp,28
800092d0:	ef 4a ff ec 	st.w	r7[-20],r10
800092d4:	ef 49 ff e8 	st.w	r7[-24],r9
800092d8:	ef 48 ff e4 	st.w	r7[-28],r8
800092dc:	18 98       	mov	r8,r12
800092de:	ef 68 ff f4 	st.b	r7[-12],r8
800092e2:	16 98       	mov	r8,r11
800092e4:	ef 68 ff f0 	st.b	r7[-16],r8
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
800092e8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800092ec:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800092f0:	ef 68 ff f4 	st.b	r7[-12],r8
	if (USB_DEVICE_MAX_EP < ep) {
800092f4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800092f8:	30 38       	mov	r8,3
800092fa:	f0 09 18 00 	cp.b	r9,r8
800092fe:	e0 88 00 04 	brls	80009306 <udd_ep_run+0x3e>
		return false;
80009302:	30 08       	mov	r8,0
80009304:	c6 88       	rjmp	800093d4 <udd_ep_run+0x10c>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
80009306:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000930a:	f0 c9 00 01 	sub	r9,r8,1
8000930e:	12 98       	mov	r8,r9
80009310:	a3 68       	lsl	r8,0x2
80009312:	12 08       	add	r8,r9
80009314:	a3 68       	lsl	r8,0x2
80009316:	10 99       	mov	r9,r8
80009318:	4b 18       	lddpc	r8,800093dc <udd_ep_run+0x114>
8000931a:	f2 08 00 08 	add	r8,r9,r8
8000931e:	ef 48 ff f8 	st.w	r7[-8],r8

	if ((!Is_udd_endpoint_enabled(ep))
80009322:	fe 68 00 00 	mov	r8,-131072
80009326:	70 79       	ld.w	r9,r8[0x1c]
80009328:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000932c:	30 1a       	mov	r10,1
8000932e:	f4 08 09 48 	lsl	r8,r10,r8
80009332:	f3 e8 00 08 	and	r8,r9,r8
80009336:	c1 00       	breq	80009356 <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
80009338:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000933c:	a3 68       	lsl	r8,0x2
8000933e:	e0 38 fe 40 	sub	r8,130624
80009342:	70 08       	ld.w	r8,r8[0x0]
80009344:	e6 18 00 08 	andh	r8,0x8,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80009348:	c0 71       	brne	80009356 <udd_ep_run+0x8e>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
8000934a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000934e:	70 08       	ld.w	r8,r8[0x0]
80009350:	e6 18 20 00 	andh	r8,0x2000,COH
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if ((!Is_udd_endpoint_enabled(ep))
80009354:	c0 30       	breq	8000935a <udd_ep_run+0x92>
			|| Is_udd_endpoint_stall_requested(ep)
			|| ptr_job->stall_requested) {
		return false; // Endpoint is halted
80009356:	30 08       	mov	r8,0
80009358:	c3 e8       	rjmp	800093d4 <udd_ep_run+0x10c>
	}

	flags = cpu_irq_save();
8000935a:	f0 1f 00 22 	mcall	800093e0 <udd_ep_run+0x118>
8000935e:	18 98       	mov	r8,r12
80009360:	ef 48 ff fc 	st.w	r7[-4],r8
	if (ptr_job->busy == true) {
80009364:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009368:	70 08       	ld.w	r8,r8[0x0]
8000936a:	e6 18 80 00 	andh	r8,0x8000,COH
8000936e:	c0 70       	breq	8000937c <udd_ep_run+0xb4>
		cpu_irq_restore(flags);
80009370:	ee fc ff fc 	ld.w	r12,r7[-4]
80009374:	f0 1f 00 1c 	mcall	800093e4 <udd_ep_run+0x11c>
		return false; // Job already on going
80009378:	30 08       	mov	r8,0
8000937a:	c2 d8       	rjmp	800093d4 <udd_ep_run+0x10c>
	}
	ptr_job->busy = true;
8000937c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80009380:	72 08       	ld.w	r8,r9[0x0]
80009382:	30 1a       	mov	r10,1
80009384:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80009388:	93 08       	st.w	r9[0x0],r8
	cpu_irq_restore(flags);
8000938a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000938e:	f0 1f 00 16 	mcall	800093e4 <udd_ep_run+0x11c>

	// No job running. Let's setup a new one.
	//
	ptr_job->buf = buf;
80009392:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009396:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000939a:	91 19       	st.w	r8[0x4],r9
	ptr_job->buf_size = buf_size;
8000939c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800093a0:	ee f9 ff e8 	ld.w	r9,r7[-24]
800093a4:	91 29       	st.w	r8[0x8],r9
	ptr_job->nb_trans = 0;
800093a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800093aa:	30 09       	mov	r9,0
800093ac:	91 39       	st.w	r8[0xc],r9
	ptr_job->call_trans = callback;
800093ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800093b2:	ee f9 ff e4 	ld.w	r9,r7[-28]
800093b6:	91 49       	st.w	r8[0x10],r9
	ptr_job->b_shortpacket = b_shortpacket;
800093b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800093bc:	72 08       	ld.w	r8,r9[0x0]
800093be:	ef 3a ff f0 	ld.ub	r10,r7[-16]
800093c2:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
800093c6:	93 08       	st.w	r9[0x0],r8


	// Request first transfer
	udd_ep_trans_done(ep);
800093c8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800093cc:	10 9c       	mov	r12,r8
800093ce:	f0 1f 00 07 	mcall	800093e8 <udd_ep_run+0x120>
	return true;
800093d2:	30 18       	mov	r8,1
}
800093d4:	10 9c       	mov	r12,r8
800093d6:	2f 9d       	sub	sp,-28
800093d8:	e3 cd 80 80 	ldm	sp++,r7,pc
800093dc:	00 00       	add	r0,r0
800093de:	06 f4       	st.b	--r3,r4
800093e0:	80 00       	ld.sh	r0,r0[0x0]
800093e2:	86 54       	ld.sh	r4,r3[0xa]
800093e4:	80 00       	ld.sh	r0,r0[0x0]
800093e6:	86 94       	ld.uh	r4,r3[0x2]
800093e8:	80 00       	ld.sh	r0,r0[0x0]
800093ea:	9e 68       	ld.sh	r8,pc[0xc]

800093ec <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
800093ec:	eb cd 40 80 	pushm	r7,lr
800093f0:	1a 97       	mov	r7,sp
800093f2:	20 2d       	sub	sp,8
800093f4:	18 98       	mov	r8,r12
800093f6:	ef 68 ff f8 	st.b	r7[-8],r8
	uint8_t index = ep & USB_EP_ADDR_MASK;
800093fa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800093fe:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009402:	ef 68 ff ff 	st.b	r7[-1],r8

	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
80009406:	fe 68 00 00 	mov	r8,-131072
8000940a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000940e:	20 19       	sub	r9,1
80009410:	fc 1a 02 00 	movh	r10,0x200
80009414:	f4 09 09 49 	lsl	r9,r10,r9
80009418:	91 59       	st.w	r8[0x14],r9
	udd_endpoint_dma_set_control(index, 0);
8000941a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000941e:	a5 68       	lsl	r8,0x4
80009420:	e0 38 fd 00 	sub	r8,130304
80009424:	30 09       	mov	r9,0
80009426:	91 29       	st.w	r8[0x8],r9
	// Kill banks
	udd_disable_endpoint_interrupt(index);
80009428:	fe 68 00 00 	mov	r8,-131072
8000942c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009430:	e0 6a 10 00 	mov	r10,4096
80009434:	f4 09 09 49 	lsl	r9,r10,r9
80009438:	91 59       	st.w	r8[0x14],r9
	while (udd_nb_busy_bank(index)) {
8000943a:	c1 28       	rjmp	8000945e <udd_ep_abort+0x72>
		udd_kill_last_in_bank(index);
8000943c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009440:	a3 68       	lsl	r8,0x2
80009442:	e0 38 fe 10 	sub	r8,130576
80009446:	e0 69 20 00 	mov	r9,8192
8000944a:	91 09       	st.w	r8[0x0],r9
		while(Is_udd_killing_last_in_bank(index));
8000944c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009450:	a3 68       	lsl	r8,0x2
80009452:	e0 38 fe 40 	sub	r8,130624
80009456:	70 08       	ld.w	r8,r8[0x0]
80009458:	e2 18 20 00 	andl	r8,0x2000,COH
8000945c:	cf 81       	brne	8000944c <udd_ep_abort+0x60>
	// Stop DMA transfer
	udd_disable_endpoint_dma_interrupt(index);
	udd_endpoint_dma_set_control(index, 0);
	// Kill banks
	udd_disable_endpoint_interrupt(index);
	while (udd_nb_busy_bank(index)) {
8000945e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009462:	a3 68       	lsl	r8,0x2
80009464:	e0 38 fe d0 	sub	r8,130768
80009468:	70 08       	ld.w	r8,r8[0x0]
8000946a:	e2 18 30 00 	andl	r8,0x3000,COH
8000946e:	ad 88       	lsr	r8,0xc
80009470:	ce 61       	brne	8000943c <udd_ep_abort+0x50>
		udd_kill_last_in_bank(index);
		while(Is_udd_killing_last_in_bank(index));
	}
	udd_ep_abort_job(ep);
80009472:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80009476:	10 9c       	mov	r12,r8
80009478:	f0 1f 00 03 	mcall	80009484 <udd_ep_abort+0x98>
}
8000947c:	2f ed       	sub	sp,-8
8000947e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009482:	00 00       	add	r0,r0
80009484:	80 00       	ld.sh	r0,r0[0x0]
80009486:	9d 98       	st.w	lr[0x24],r8

80009488 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
80009488:	eb cd 40 80 	pushm	r7,lr
8000948c:	1a 97       	mov	r7,sp
8000948e:	20 7d       	sub	sp,28
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
80009490:	fe 68 00 00 	mov	r8,-131072
80009494:	fe 69 00 00 	mov	r9,-131072
80009498:	72 09       	ld.w	r9,r9[0x0]
8000949a:	e0 19 ff 80 	andl	r9,0xff80
8000949e:	91 09       	st.w	r8[0x0],r9
	udd_enable_address();
800094a0:	fe 68 00 00 	mov	r8,-131072
800094a4:	fe 69 00 00 	mov	r9,-131072
800094a8:	72 09       	ld.w	r9,r9[0x0]
800094aa:	a7 b9       	sbr	r9,0x7
800094ac:	91 09       	st.w	r8[0x0],r9

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
800094ae:	fe 68 01 00 	mov	r8,-130816
800094b2:	fe 69 01 00 	mov	r9,-130816
800094b6:	72 09       	ld.w	r9,r9[0x0]
800094b8:	12 9a       	mov	r10,r9
800094ba:	e0 1a e6 83 	andl	r10,0xe683
800094be:	34 09       	mov	r9,64
800094c0:	ef 49 ff f8 	st.w	r7[-8],r9
800094c4:	30 89       	mov	r9,8
800094c6:	ef 49 ff fc 	st.w	r7[-4],r9
800094ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800094ce:	ee fb ff fc 	ld.w	r11,r7[-4]
800094d2:	f2 0b 0c 49 	max	r9,r9,r11
800094d6:	ef 49 ff f4 	st.w	r7[-12],r9
800094da:	ee f9 ff f4 	ld.w	r9,r7[-12]
800094de:	ef 49 ff ec 	st.w	r7[-20],r9
800094e2:	e0 69 04 00 	mov	r9,1024
800094e6:	ef 49 ff f0 	st.w	r7[-16],r9
800094ea:	ee f9 ff ec 	ld.w	r9,r7[-20]
800094ee:	ee fb ff f0 	ld.w	r11,r7[-16]
800094f2:	f2 0b 0d 49 	min	r9,r9,r11
800094f6:	ef 49 ff e8 	st.w	r7[-24],r9
800094fa:	ee f9 ff e8 	ld.w	r9,r7[-24]
800094fe:	a1 79       	lsl	r9,0x1
80009500:	20 19       	sub	r9,1
80009502:	f2 09 12 00 	clz	r9,r9
80009506:	f2 09 11 1c 	rsub	r9,r9,28
8000950a:	a5 69       	lsl	r9,0x4
8000950c:	e2 19 19 7c 	andl	r9,0x197c,COH
80009510:	f5 e9 10 09 	or	r9,r10,r9
80009514:	91 09       	st.w	r8[0x0],r9
			USB_EP_TYPE_CONTROL,
			0,
			USB_DEVICE_EP_CTRL_SIZE, AVR32_USBB_UECFG0_EPBK_SINGLE);

	udd_allocate_memory(0);
80009516:	fe 68 01 00 	mov	r8,-130816
8000951a:	fe 69 01 00 	mov	r9,-130816
8000951e:	72 09       	ld.w	r9,r9[0x0]
80009520:	a1 b9       	sbr	r9,0x1
80009522:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint(0);
80009524:	fe 68 00 00 	mov	r8,-131072
80009528:	fe 69 00 00 	mov	r9,-131072
8000952c:	72 79       	ld.w	r9,r9[0x1c]
8000952e:	a1 a9       	sbr	r9,0x0
80009530:	91 79       	st.w	r8[0x1c],r9
	flags = cpu_irq_save();
80009532:	f0 1f 00 0d 	mcall	80009564 <udd_reset_ep_ctrl+0xdc>
80009536:	18 98       	mov	r8,r12
80009538:	ef 48 ff e4 	st.w	r7[-28],r8
	udd_enable_setup_received_interrupt(0);
8000953c:	fe 68 01 f0 	mov	r8,-130576
80009540:	30 49       	mov	r9,4
80009542:	91 09       	st.w	r8[0x0],r9
	udd_enable_out_received_interrupt(0);
80009544:	fe 68 01 f0 	mov	r8,-130576
80009548:	30 29       	mov	r9,2
8000954a:	91 09       	st.w	r8[0x0],r9
	udd_enable_endpoint_interrupt(0);
8000954c:	fe 68 00 00 	mov	r8,-131072
80009550:	e0 69 10 00 	mov	r9,4096
80009554:	91 69       	st.w	r8[0x18],r9
	cpu_irq_restore(flags);
80009556:	ee fc ff e4 	ld.w	r12,r7[-28]
8000955a:	f0 1f 00 04 	mcall	80009568 <udd_reset_ep_ctrl+0xe0>
}
8000955e:	2f 9d       	sub	sp,-28
80009560:	e3 cd 80 80 	ldm	sp++,r7,pc
80009564:	80 00       	ld.sh	r0,r0[0x0]
80009566:	86 54       	ld.sh	r4,r3[0xa]
80009568:	80 00       	ld.sh	r0,r0[0x0]
8000956a:	86 94       	ld.uh	r4,r3[0x2]

8000956c <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
8000956c:	eb cd 40 80 	pushm	r7,lr
80009570:	1a 97       	mov	r7,sp
80009572:	20 1d       	sub	sp,4
	irqflags_t flags;
	flags = cpu_irq_save();
80009574:	f0 1f 00 10 	mcall	800095b4 <udd_ctrl_init+0x48>
80009578:	18 98       	mov	r8,r12
8000957a:	ef 48 ff fc 	st.w	r7[-4],r8
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
8000957e:	fe 68 02 20 	mov	r8,-130528
80009582:	30 19       	mov	r9,1
80009584:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009586:	ee fc ff fc 	ld.w	r12,r7[-4]
8000958a:	f0 1f 00 0c 	mcall	800095b8 <udd_ctrl_init+0x4c>

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
8000958e:	fe 68 01 60 	mov	r8,-130720
80009592:	30 29       	mov	r9,2
80009594:	91 09       	st.w	r8[0x0],r9

	udd_g_ctrlreq.callback = NULL;
80009596:	48 a8       	lddpc	r8,800095bc <udd_ctrl_init+0x50>
80009598:	30 09       	mov	r9,0
8000959a:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000959c:	48 88       	lddpc	r8,800095bc <udd_ctrl_init+0x50>
8000959e:	30 09       	mov	r9,0
800095a0:	91 59       	st.w	r8[0x14],r9
	udd_g_ctrlreq.payload_size = 0;
800095a2:	48 79       	lddpc	r9,800095bc <udd_ctrl_init+0x50>
800095a4:	30 08       	mov	r8,0
800095a6:	b2 68       	st.h	r9[0xc],r8
	udd_ep_control_state = UDD_EPCTRL_SETUP;
800095a8:	48 68       	lddpc	r8,800095c0 <udd_ctrl_init+0x54>
800095aa:	30 09       	mov	r9,0
800095ac:	91 09       	st.w	r8[0x0],r9
}
800095ae:	2f fd       	sub	sp,-4
800095b0:	e3 cd 80 80 	ldm	sp++,r7,pc
800095b4:	80 00       	ld.sh	r0,r0[0x0]
800095b6:	86 54       	ld.sh	r4,r3[0xa]
800095b8:	80 00       	ld.sh	r0,r0[0x0]
800095ba:	86 94       	ld.uh	r4,r3[0x2]
800095bc:	00 00       	add	r0,r0
800095be:	12 1c       	sub	r12,r9
800095c0:	00 00       	add	r0,r0
800095c2:	06 ec       	st.h	--r3,r12

800095c4 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
800095c4:	eb cd 40 80 	pushm	r7,lr
800095c8:	1a 97       	mov	r7,sp
800095ca:	20 3d       	sub	sp,12
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
800095cc:	4c b8       	lddpc	r8,800096f8 <udd_ctrl_setup_received+0x134>
800095ce:	70 08       	ld.w	r8,r8[0x0]
800095d0:	58 08       	cp.w	r8,0
800095d2:	c0 50       	breq	800095dc <udd_ctrl_setup_received+0x18>
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
800095d4:	f0 1f 00 4a 	mcall	800096fc <udd_ctrl_setup_received+0x138>

		// Reinitializes control endpoint management
		udd_ctrl_init();
800095d8:	f0 1f 00 4a 	mcall	80009700 <udd_ctrl_setup_received+0x13c>
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
800095dc:	fe 68 01 30 	mov	r8,-130768
800095e0:	70 08       	ld.w	r8,r8[0x0]
800095e2:	e6 18 7f f0 	andh	r8,0x7ff0,COH
800095e6:	b5 88       	lsr	r8,0x14
800095e8:	58 88       	cp.w	r8,8
800095ea:	c0 80       	breq	800095fa <udd_ctrl_setup_received+0x36>
		udd_ctrl_stall_data();
800095ec:	f0 1f 00 46 	mcall	80009704 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
800095f0:	fe 68 01 60 	mov	r8,-130720
800095f4:	30 49       	mov	r9,4
800095f6:	91 09       	st.w	r8[0x0],r9
		return; // Error data number doesn't correspond to SETUP packet
800095f8:	c7 d8       	rjmp	800096f2 <udd_ctrl_setup_received+0x12e>
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
800095fa:	fc 18 e0 00 	movh	r8,0xe000
800095fe:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < 8; i++) {
80009602:	30 08       	mov	r8,0
80009604:	ef 68 ff fb 	st.b	r7[-5],r8
80009608:	c1 38       	rjmp	8000962e <udd_ctrl_setup_received+0x6a>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
8000960a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000960e:	4b f8       	lddpc	r8,80009708 <udd_ctrl_setup_received+0x144>
80009610:	10 09       	add	r9,r8
80009612:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009616:	11 88       	ld.ub	r8,r8[0x0]
80009618:	b2 88       	st.b	r9[0x0],r8
8000961a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000961e:	2f f8       	sub	r8,-1
80009620:	ef 48 ff fc 	st.w	r7[-4],r8
		udd_ctrl_stall_data();
		udd_ack_setup_received(0);
		return; // Error data number doesn't correspond to SETUP packet
	}
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
	for (i = 0; i < 8; i++) {
80009624:	ef 38 ff fb 	ld.ub	r8,r7[-5]
80009628:	2f f8       	sub	r8,-1
8000962a:	ef 68 ff fb 	st.b	r7[-5],r8
8000962e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80009632:	30 78       	mov	r8,7
80009634:	f0 09 18 00 	cp.b	r9,r8
80009638:	fe 98 ff e9 	brls	8000960a <udd_ctrl_setup_received+0x46>
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
8000963c:	4b 38       	lddpc	r8,80009708 <udd_ctrl_setup_received+0x144>
8000963e:	90 18       	ld.sh	r8,r8[0x2]
80009640:	5c 88       	casts.h	r8
80009642:	5c c8       	swap.bh	r8
80009644:	5c 88       	casts.h	r8
80009646:	4b 19       	lddpc	r9,80009708 <udd_ctrl_setup_received+0x144>
80009648:	b2 18       	st.h	r9[0x2],r8
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
8000964a:	4b 08       	lddpc	r8,80009708 <udd_ctrl_setup_received+0x144>
8000964c:	90 28       	ld.sh	r8,r8[0x4]
8000964e:	5c 88       	casts.h	r8
80009650:	5c c8       	swap.bh	r8
80009652:	5c 88       	casts.h	r8
80009654:	4a d9       	lddpc	r9,80009708 <udd_ctrl_setup_received+0x144>
80009656:	b2 28       	st.h	r9[0x4],r8
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
80009658:	4a c8       	lddpc	r8,80009708 <udd_ctrl_setup_received+0x144>
8000965a:	90 38       	ld.sh	r8,r8[0x6]
8000965c:	5c 88       	casts.h	r8
8000965e:	5c c8       	swap.bh	r8
80009660:	5c 88       	casts.h	r8
80009662:	4a a9       	lddpc	r9,80009708 <udd_ctrl_setup_received+0x144>
80009664:	b2 38       	st.h	r9[0x6],r8

	// Decode setup request
	if (udc_process_setup() == false) {
80009666:	f0 1f 00 2a 	mcall	8000970c <udd_ctrl_setup_received+0x148>
8000966a:	18 98       	mov	r8,r12
8000966c:	ec 18 00 01 	eorl	r8,0x1
80009670:	5c 58       	castu.b	r8
80009672:	c0 80       	breq	80009682 <udd_ctrl_setup_received+0xbe>
		// Setup request unknown then stall it
		udd_ctrl_stall_data();
80009674:	f0 1f 00 24 	mcall	80009704 <udd_ctrl_setup_received+0x140>
		udd_ack_setup_received(0);
80009678:	fe 68 01 60 	mov	r8,-130720
8000967c:	30 49       	mov	r9,4
8000967e:	91 09       	st.w	r8[0x0],r9
		return;
80009680:	c3 98       	rjmp	800096f2 <udd_ctrl_setup_received+0x12e>
	}
	udd_ack_setup_received(0);
80009682:	fe 68 01 60 	mov	r8,-130720
80009686:	30 49       	mov	r9,4
80009688:	91 09       	st.w	r8[0x0],r9

	if (Udd_setup_is_in()) {
8000968a:	4a 08       	lddpc	r8,80009708 <udd_ctrl_setup_received+0x144>
8000968c:	11 88       	ld.ub	r8,r8[0x0]
8000968e:	10 99       	mov	r9,r8
80009690:	30 08       	mov	r8,0
80009692:	f0 09 18 00 	cp.b	r9,r8
80009696:	c0 d4       	brge	800096b0 <udd_ctrl_setup_received+0xec>
		// IN data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
80009698:	49 e9       	lddpc	r9,80009710 <udd_ctrl_setup_received+0x14c>
8000969a:	30 08       	mov	r8,0
8000969c:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
8000969e:	49 e9       	lddpc	r9,80009714 <udd_ctrl_setup_received+0x150>
800096a0:	30 08       	mov	r8,0
800096a2:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
800096a4:	49 58       	lddpc	r8,800096f8 <udd_ctrl_setup_received+0x134>
800096a6:	30 29       	mov	r9,2
800096a8:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_in_sent(); // Send first data transfer
800096aa:	f0 1f 00 1c 	mcall	80009718 <udd_ctrl_setup_received+0x154>
800096ae:	c2 28       	rjmp	800096f2 <udd_ctrl_setup_received+0x12e>
	} else {
		if (0 == udd_g_ctrlreq.req.wLength) {
800096b0:	49 68       	lddpc	r8,80009708 <udd_ctrl_setup_received+0x144>
800096b2:	90 38       	ld.sh	r8,r8[0x6]
800096b4:	58 08       	cp.w	r8,0
800096b6:	c0 41       	brne	800096be <udd_ctrl_setup_received+0xfa>
			// No data phase requested
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
800096b8:	f0 1f 00 19 	mcall	8000971c <udd_ctrl_setup_received+0x158>
			return;
800096bc:	c1 b8       	rjmp	800096f2 <udd_ctrl_setup_received+0x12e>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_nb_trans = 0;
800096be:	49 59       	lddpc	r9,80009710 <udd_ctrl_setup_received+0x14c>
800096c0:	30 08       	mov	r8,0
800096c2:	b2 08       	st.h	r9[0x0],r8
		udd_ctrl_payload_nb_trans = 0;
800096c4:	49 49       	lddpc	r9,80009714 <udd_ctrl_setup_received+0x150>
800096c6:	30 08       	mov	r8,0
800096c8:	b2 08       	st.h	r9[0x0],r8
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
800096ca:	48 c8       	lddpc	r8,800096f8 <udd_ctrl_setup_received+0x134>
800096cc:	30 19       	mov	r9,1
800096ce:	91 09       	st.w	r8[0x0],r9
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
800096d0:	fe 68 01 60 	mov	r8,-130720
800096d4:	31 09       	mov	r9,16
800096d6:	91 09       	st.w	r8[0x0],r9
		flags = cpu_irq_save();
800096d8:	f0 1f 00 12 	mcall	80009720 <udd_ctrl_setup_received+0x15c>
800096dc:	18 98       	mov	r8,r12
800096de:	ef 48 ff f4 	st.w	r7[-12],r8
		udd_enable_nak_in_interrupt(0);
800096e2:	fe 68 01 f0 	mov	r8,-130576
800096e6:	31 09       	mov	r9,16
800096e8:	91 09       	st.w	r8[0x0],r9
		cpu_irq_restore(flags);
800096ea:	ee fc ff f4 	ld.w	r12,r7[-12]
800096ee:	f0 1f 00 0e 	mcall	80009724 <udd_ctrl_setup_received+0x160>
	}
}
800096f2:	2f dd       	sub	sp,-12
800096f4:	e3 cd 80 80 	ldm	sp++,r7,pc
800096f8:	00 00       	add	r0,r0
800096fa:	06 ec       	st.h	--r3,r12
800096fc:	80 00       	ld.sh	r0,r0[0x0]
800096fe:	9b ec       	st.w	sp[0x38],r12
80009700:	80 00       	ld.sh	r0,r0[0x0]
80009702:	95 6c       	st.w	r10[0x18],r12
80009704:	80 00       	ld.sh	r0,r0[0x0]
80009706:	9b 34       	st.w	sp[0xc],r4
80009708:	00 00       	add	r0,r0
8000970a:	12 1c       	sub	r12,r9
8000970c:	80 00       	ld.sh	r0,r0[0x0]
8000970e:	c7 ac       	rcall	80009802 <udd_ctrl_in_sent+0xda>
80009710:	00 00       	add	r0,r0
80009712:	06 f0       	st.b	--r3,r0
80009714:	00 00       	add	r0,r0
80009716:	06 f2       	st.b	--r3,r2
80009718:	80 00       	ld.sh	r0,r0[0x0]
8000971a:	97 28       	st.w	r11[0x8],r8
8000971c:	80 00       	ld.sh	r0,r0[0x0]
8000971e:	9b 54       	st.w	sp[0x14],r4
80009720:	80 00       	ld.sh	r0,r0[0x0]
80009722:	86 54       	ld.sh	r4,r3[0xa]
80009724:	80 00       	ld.sh	r0,r0[0x0]
80009726:	86 94       	ld.uh	r4,r3[0x2]

80009728 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
80009728:	eb cd 40 80 	pushm	r7,lr
8000972c:	1a 97       	mov	r7,sp
8000972e:	20 4d       	sub	sp,16
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
80009730:	f0 1f 00 5c 	mcall	800098a0 <udd_ctrl_in_sent+0x178>
80009734:	18 98       	mov	r8,r12
80009736:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_disable_in_send_interrupt(0);
8000973a:	fe 68 02 20 	mov	r8,-130528
8000973e:	30 19       	mov	r9,1
80009740:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009742:	ee fc ff fc 	ld.w	r12,r7[-4]
80009746:	f0 1f 00 58 	mcall	800098a4 <udd_ctrl_in_sent+0x17c>

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
8000974a:	4d 88       	lddpc	r8,800098a8 <udd_ctrl_in_sent+0x180>
8000974c:	70 08       	ld.w	r8,r8[0x0]
8000974e:	58 38       	cp.w	r8,3
80009750:	c0 61       	brne	8000975c <udd_ctrl_in_sent+0x34>
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
80009752:	f0 1f 00 57 	mcall	800098ac <udd_ctrl_in_sent+0x184>
		// Reinitializes control endpoint management
		udd_ctrl_init();
80009756:	f0 1f 00 57 	mcall	800098b0 <udd_ctrl_in_sent+0x188>
		return;
8000975a:	c9 f8       	rjmp	80009898 <udd_ctrl_in_sent+0x170>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
8000975c:	4d 68       	lddpc	r8,800098b4 <udd_ctrl_in_sent+0x18c>
8000975e:	90 69       	ld.sh	r9,r8[0xc]
80009760:	4d 68       	lddpc	r8,800098b8 <udd_ctrl_in_sent+0x190>
80009762:	90 08       	ld.sh	r8,r8[0x0]
80009764:	10 19       	sub	r9,r8
80009766:	ef 59 ff f0 	st.h	r7[-16],r9
	if (0 == nb_remain) {
8000976a:	ef 09 ff f0 	ld.sh	r9,r7[-16]
8000976e:	30 08       	mov	r8,0
80009770:	f0 09 19 00 	cp.h	r9,r8
80009774:	c2 b1       	brne	800097ca <udd_ctrl_in_sent+0xa2>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80009776:	4d 28       	lddpc	r8,800098bc <udd_ctrl_in_sent+0x194>
80009778:	90 09       	ld.sh	r9,r8[0x0]
8000977a:	4d 08       	lddpc	r8,800098b8 <udd_ctrl_in_sent+0x190>
8000977c:	90 08       	ld.sh	r8,r8[0x0]
8000977e:	f2 08 00 08 	add	r8,r9,r8
80009782:	5c 88       	casts.h	r8
80009784:	4c e9       	lddpc	r9,800098bc <udd_ctrl_in_sent+0x194>
80009786:	b2 08       	st.h	r9[0x0],r8
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans)
80009788:	4c b8       	lddpc	r8,800098b4 <udd_ctrl_in_sent+0x18c>
8000978a:	90 39       	ld.sh	r9,r8[0x6]
8000978c:	4c c8       	lddpc	r8,800098bc <udd_ctrl_in_sent+0x194>
8000978e:	90 08       	ld.sh	r8,r8[0x0]
80009790:	f0 09 19 00 	cp.h	r9,r8
80009794:	c0 50       	breq	8000979e <udd_ctrl_in_sent+0x76>
80009796:	4c b8       	lddpc	r8,800098c0 <udd_ctrl_in_sent+0x198>
80009798:	11 88       	ld.ub	r8,r8[0x0]
8000979a:	58 08       	cp.w	r8,0
8000979c:	c0 40       	breq	800097a4 <udd_ctrl_in_sent+0x7c>
					|| b_shortpacket) {
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			udd_ctrl_send_zlp_out();
8000979e:	f0 1f 00 4a 	mcall	800098c4 <udd_ctrl_in_sent+0x19c>
			return;
800097a2:	c7 b8       	rjmp	80009898 <udd_ctrl_in_sent+0x170>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
800097a4:	4c 48       	lddpc	r8,800098b4 <udd_ctrl_in_sent+0x18c>
800097a6:	70 58       	ld.w	r8,r8[0x14]
800097a8:	58 08       	cp.w	r8,0
800097aa:	c1 00       	breq	800097ca <udd_ctrl_in_sent+0xa2>
800097ac:	4c 28       	lddpc	r8,800098b4 <udd_ctrl_in_sent+0x18c>
800097ae:	70 58       	ld.w	r8,r8[0x14]
800097b0:	5d 18       	icall	r8
800097b2:	18 98       	mov	r8,r12
800097b4:	ec 18 00 01 	eorl	r8,0x1
800097b8:	5c 58       	castu.b	r8
800097ba:	c0 81       	brne	800097ca <udd_ctrl_in_sent+0xa2>
				|| (!udd_g_ctrlreq.over_under_run())) {
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_nb_trans = 0;
800097bc:	4b f9       	lddpc	r9,800098b8 <udd_ctrl_in_sent+0x190>
800097be:	30 08       	mov	r8,0
800097c0:	b2 08       	st.h	r9[0x0],r8
			nb_remain = udd_g_ctrlreq.payload_size;
800097c2:	4b d8       	lddpc	r8,800098b4 <udd_ctrl_in_sent+0x18c>
800097c4:	90 68       	ld.sh	r8,r8[0xc]
800097c6:	ef 58 ff f0 	st.h	r7[-16],r8
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
800097ca:	ef 09 ff f0 	ld.sh	r9,r7[-16]
800097ce:	33 f8       	mov	r8,63
800097d0:	f0 09 19 00 	cp.h	r9,r8
800097d4:	e0 88 00 09 	brls	800097e6 <udd_ctrl_in_sent+0xbe>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
800097d8:	34 08       	mov	r8,64
800097da:	ef 58 ff f0 	st.h	r7[-16],r8
		b_shortpacket = false;
800097de:	4b 99       	lddpc	r9,800098c0 <udd_ctrl_in_sent+0x198>
800097e0:	30 08       	mov	r8,0
800097e2:	b2 88       	st.b	r9[0x0],r8
800097e4:	c0 48       	rjmp	800097ec <udd_ctrl_in_sent+0xc4>
	} else {
		b_shortpacket = true;
800097e6:	4b 79       	lddpc	r9,800098c0 <udd_ctrl_in_sent+0x198>
800097e8:	30 18       	mov	r8,1
800097ea:	b2 88       	st.b	r9[0x0],r8
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
800097ec:	fc 18 e0 00 	movh	r8,0xe000
800097f0:	ef 48 ff f4 	st.w	r7[-12],r8
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
800097f4:	4b 08       	lddpc	r8,800098b4 <udd_ctrl_in_sent+0x18c>
800097f6:	70 29       	ld.w	r9,r8[0x8]
800097f8:	4b 08       	lddpc	r8,800098b8 <udd_ctrl_in_sent+0x190>
800097fa:	90 08       	ld.sh	r8,r8[0x0]
800097fc:	5c 78       	castu.h	r8
800097fe:	f2 08 00 08 	add	r8,r9,r8
80009802:	ef 48 ff f8 	st.w	r7[-8],r8
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
80009806:	f0 1f 00 27 	mcall	800098a0 <udd_ctrl_in_sent+0x178>
8000980a:	18 98       	mov	r8,r12
8000980c:	ef 48 ff fc 	st.w	r7[-4],r8
	if (Is_udd_out_received(0)) {
80009810:	fe 68 01 30 	mov	r8,-130768
80009814:	70 08       	ld.w	r8,r8[0x0]
80009816:	e2 18 00 02 	andl	r8,0x2,COH
8000981a:	c0 90       	breq	8000982c <udd_ctrl_in_sent+0x104>
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
8000981c:	ee fc ff fc 	ld.w	r12,r7[-4]
80009820:	f0 1f 00 21 	mcall	800098a4 <udd_ctrl_in_sent+0x17c>
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80009824:	4a 18       	lddpc	r8,800098a8 <udd_ctrl_in_sent+0x180>
80009826:	30 49       	mov	r9,4
80009828:	91 09       	st.w	r8[0x0],r9
		return; // Exit of IN DATA phase
8000982a:	c3 78       	rjmp	80009898 <udd_ctrl_in_sent+0x170>
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
8000982c:	30 08       	mov	r8,0
8000982e:	ef 68 ff f3 	st.b	r7[-13],r8
80009832:	c1 68       	rjmp	8000985e <udd_ctrl_in_sent+0x136>
		*ptr_dest++ = *ptr_src++;
80009834:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009838:	11 88       	ld.ub	r8,r8[0x0]
8000983a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000983e:	b2 88       	st.b	r9[0x0],r8
80009840:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009844:	2f f8       	sub	r8,-1
80009846:	ef 48 ff f4 	st.w	r7[-12],r8
8000984a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000984e:	2f f8       	sub	r8,-1
80009850:	ef 48 ff f8 	st.w	r7[-8],r8
		cpu_irq_restore(flags);
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
		return; // Exit of IN DATA phase
	}
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
80009854:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80009858:	2f f8       	sub	r8,-1
8000985a:	ef 68 ff f3 	st.b	r7[-13],r8
8000985e:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80009862:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80009866:	f0 09 19 00 	cp.h	r9,r8
8000986a:	fe 9b ff e5 	brhi	80009834 <udd_ctrl_in_sent+0x10c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_remain;
8000986e:	49 38       	lddpc	r8,800098b8 <udd_ctrl_in_sent+0x190>
80009870:	90 08       	ld.sh	r8,r8[0x0]
80009872:	ef 09 ff f0 	ld.sh	r9,r7[-16]
80009876:	f2 08 00 08 	add	r8,r9,r8
8000987a:	5c 88       	casts.h	r8
8000987c:	48 f9       	lddpc	r9,800098b8 <udd_ctrl_in_sent+0x190>
8000987e:	b2 08       	st.h	r9[0x0],r8

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
80009880:	fe 68 01 60 	mov	r8,-130720
80009884:	30 19       	mov	r9,1
80009886:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
80009888:	fe 68 01 f0 	mov	r8,-130576
8000988c:	30 19       	mov	r9,1
8000988e:	91 09       	st.w	r8[0x0],r9
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
80009890:	ee fc ff fc 	ld.w	r12,r7[-4]
80009894:	f0 1f 00 04 	mcall	800098a4 <udd_ctrl_in_sent+0x17c>
}
80009898:	2f cd       	sub	sp,-16
8000989a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000989e:	00 00       	add	r0,r0
800098a0:	80 00       	ld.sh	r0,r0[0x0]
800098a2:	86 54       	ld.sh	r4,r3[0xa]
800098a4:	80 00       	ld.sh	r0,r0[0x0]
800098a6:	86 94       	ld.uh	r4,r3[0x2]
800098a8:	00 00       	add	r0,r0
800098aa:	06 ec       	st.h	--r3,r12
800098ac:	80 00       	ld.sh	r0,r0[0x0]
800098ae:	9b ec       	st.w	sp[0x38],r12
800098b0:	80 00       	ld.sh	r0,r0[0x0]
800098b2:	95 6c       	st.w	r10[0x18],r12
800098b4:	00 00       	add	r0,r0
800098b6:	12 1c       	sub	r12,r9
800098b8:	00 00       	add	r0,r0
800098ba:	06 f2       	st.b	--r3,r2
800098bc:	00 00       	add	r0,r0
800098be:	06 f0       	st.b	--r3,r0
800098c0:	00 00       	add	r0,r0
800098c2:	07 30       	ld.ub	r0,r3++
800098c4:	80 00       	ld.sh	r0,r0[0x0]
800098c6:	9b a8       	st.w	sp[0x28],r8

800098c8 <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
800098c8:	eb cd 40 80 	pushm	r7,lr
800098cc:	1a 97       	mov	r7,sp
800098ce:	20 4d       	sub	sp,16
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
800098d0:	4f 18       	lddpc	r8,80009a94 <udd_ctrl_out_received+0x1cc>
800098d2:	70 08       	ld.w	r8,r8[0x0]
800098d4:	58 18       	cp.w	r8,1
800098d6:	c1 10       	breq	800098f8 <udd_ctrl_out_received+0x30>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
800098d8:	4e f8       	lddpc	r8,80009a94 <udd_ctrl_out_received+0x1cc>
800098da:	70 08       	ld.w	r8,r8[0x0]
800098dc:	58 28       	cp.w	r8,2
800098de:	c0 50       	breq	800098e8 <udd_ctrl_out_received+0x20>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
800098e0:	4e d8       	lddpc	r8,80009a94 <udd_ctrl_out_received+0x1cc>
800098e2:	70 08       	ld.w	r8,r8[0x0]
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
800098e4:	58 48       	cp.w	r8,4
800098e6:	c0 41       	brne	800098ee <udd_ctrl_out_received+0x26>
						udd_ep_control_state)) {
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
800098e8:	f0 1f 00 6c 	mcall	80009a98 <udd_ctrl_out_received+0x1d0>
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
800098ec:	c0 38       	rjmp	800098f2 <udd_ctrl_out_received+0x2a>
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
		} else {
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
800098ee:	f0 1f 00 6c 	mcall	80009a9c <udd_ctrl_out_received+0x1d4>
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
800098f2:	f0 1f 00 6c 	mcall	80009aa0 <udd_ctrl_out_received+0x1d8>
		return;
800098f6:	cc b8       	rjmp	80009a8c <udd_ctrl_out_received+0x1c4>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
800098f8:	fe 68 01 30 	mov	r8,-130768
800098fc:	70 08       	ld.w	r8,r8[0x0]
800098fe:	e6 18 7f f0 	andh	r8,0x7ff0,COH
80009902:	b5 88       	lsr	r8,0x14
80009904:	ef 58 ff f6 	st.h	r7[-10],r8
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
80009908:	4e 78       	lddpc	r8,80009aa4 <udd_ctrl_out_received+0x1dc>
8000990a:	90 68       	ld.sh	r8,r8[0xc]
8000990c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80009910:	4e 68       	lddpc	r8,80009aa8 <udd_ctrl_out_received+0x1e0>
80009912:	90 08       	ld.sh	r8,r8[0x0]
80009914:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80009918:	ef 18 ff f6 	ld.uh	r8,r7[-10]
8000991c:	f4 08 00 08 	add	r8,r10,r8
80009920:	10 39       	cp.w	r9,r8
80009922:	c0 84       	brge	80009932 <udd_ctrl_out_received+0x6a>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size -
80009924:	4e 08       	lddpc	r8,80009aa4 <udd_ctrl_out_received+0x1dc>
80009926:	90 69       	ld.sh	r9,r8[0xc]
80009928:	4e 08       	lddpc	r8,80009aa8 <udd_ctrl_out_received+0x1e0>
8000992a:	90 08       	ld.sh	r8,r8[0x0]
8000992c:	10 19       	sub	r9,r8
8000992e:	ef 59 ff f6 	st.h	r7[-10],r9
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
80009932:	fc 18 e0 00 	movh	r8,0xe000
80009936:	ef 48 ff f8 	st.w	r7[-8],r8
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
8000993a:	4d b8       	lddpc	r8,80009aa4 <udd_ctrl_out_received+0x1dc>
8000993c:	70 29       	ld.w	r9,r8[0x8]
8000993e:	4d b8       	lddpc	r8,80009aa8 <udd_ctrl_out_received+0x1e0>
80009940:	90 08       	ld.sh	r8,r8[0x0]
80009942:	5c 78       	castu.h	r8
80009944:	f2 08 00 08 	add	r8,r9,r8
80009948:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i = 0; i < nb_data; i++) {
8000994c:	30 08       	mov	r8,0
8000994e:	ef 68 ff f5 	st.b	r7[-11],r8
80009952:	c1 68       	rjmp	8000997e <udd_ctrl_out_received+0xb6>
		*ptr_dest++ = *ptr_src++;
80009954:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009958:	11 88       	ld.ub	r8,r8[0x0]
8000995a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000995e:	b2 88       	st.b	r9[0x0],r8
80009960:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009964:	2f f8       	sub	r8,-1
80009966:	ef 48 ff fc 	st.w	r7[-4],r8
8000996a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000996e:	2f f8       	sub	r8,-1
80009970:	ef 48 ff f8 	st.w	r7[-8],r8
		nb_data = udd_g_ctrlreq.payload_size -
				udd_ctrl_payload_nb_trans;
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans;
	for (i = 0; i < nb_data; i++) {
80009974:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80009978:	2f f8       	sub	r8,-1
8000997a:	ef 68 ff f5 	st.b	r7[-11],r8
8000997e:	ef 38 ff f5 	ld.ub	r8,r7[-11]
80009982:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80009986:	f0 09 19 00 	cp.h	r9,r8
8000998a:	fe 9b ff e5 	brhi	80009954 <udd_ctrl_out_received+0x8c>
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;
8000998e:	4c 78       	lddpc	r8,80009aa8 <udd_ctrl_out_received+0x1e0>
80009990:	90 08       	ld.sh	r8,r8[0x0]
80009992:	ef 09 ff f6 	ld.sh	r9,r7[-10]
80009996:	f2 08 00 08 	add	r8,r9,r8
8000999a:	5c 88       	casts.h	r8
8000999c:	4c 39       	lddpc	r9,80009aa8 <udd_ctrl_out_received+0x1e0>
8000999e:	b2 08       	st.h	r9[0x0],r8

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
800099a0:	ef 09 ff f6 	ld.sh	r9,r7[-10]
800099a4:	34 08       	mov	r8,64
800099a6:	f0 09 19 00 	cp.h	r9,r8
800099aa:	c1 11       	brne	800099cc <udd_ctrl_out_received+0x104>
			|| (udd_g_ctrlreq.req.wLength <=
800099ac:	4b e8       	lddpc	r8,80009aa4 <udd_ctrl_out_received+0x1dc>
800099ae:	90 38       	ld.sh	r8,r8[0x6]
800099b0:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
					(udd_ctrl_prev_payload_nb_trans +
800099b4:	4b e8       	lddpc	r8,80009aac <udd_ctrl_out_received+0x1e4>
800099b6:	90 08       	ld.sh	r8,r8[0x0]
800099b8:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
800099bc:	4b b8       	lddpc	r8,80009aa8 <udd_ctrl_out_received+0x1e0>
800099be:	90 08       	ld.sh	r8,r8[0x0]
800099c0:	5c 78       	castu.h	r8
800099c2:	f4 08 00 08 	add	r8,r10,r8
	for (i = 0; i < nb_data; i++) {
		*ptr_dest++ = *ptr_src++;
	}
	udd_ctrl_payload_nb_trans += nb_data;

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
800099c6:	10 39       	cp.w	r9,r8
800099c8:	e0 89 00 20 	brgt	80009a08 <udd_ctrl_out_received+0x140>
							udd_ctrl_payload_nb_trans)))
	{
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
800099cc:	4b 78       	lddpc	r8,80009aa8 <udd_ctrl_out_received+0x1e0>
800099ce:	90 08       	ld.sh	r8,r8[0x0]
800099d0:	4b 59       	lddpc	r9,80009aa4 <udd_ctrl_out_received+0x1dc>
800099d2:	b2 68       	st.h	r9[0xc],r8
		if (NULL != udd_g_ctrlreq.over_under_run) {
800099d4:	4b 48       	lddpc	r8,80009aa4 <udd_ctrl_out_received+0x1dc>
800099d6:	70 58       	ld.w	r8,r8[0x14]
800099d8:	58 08       	cp.w	r8,0
800099da:	c1 00       	breq	800099fa <udd_ctrl_out_received+0x132>
			if (!udd_g_ctrlreq.over_under_run()) {
800099dc:	4b 28       	lddpc	r8,80009aa4 <udd_ctrl_out_received+0x1dc>
800099de:	70 58       	ld.w	r8,r8[0x14]
800099e0:	5d 18       	icall	r8
800099e2:	18 98       	mov	r8,r12
800099e4:	ec 18 00 01 	eorl	r8,0x1
800099e8:	5c 58       	castu.b	r8
800099ea:	c0 80       	breq	800099fa <udd_ctrl_out_received+0x132>
				// Stall ZLP
				udd_ctrl_stall_data();
800099ec:	f0 1f 00 2c 	mcall	80009a9c <udd_ctrl_out_received+0x1d4>
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
800099f0:	fe 68 01 60 	mov	r8,-130720
800099f4:	30 29       	mov	r9,2
800099f6:	91 09       	st.w	r8[0x0],r9
				return;
800099f8:	c4 a8       	rjmp	80009a8c <udd_ctrl_out_received+0x1c4>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
800099fa:	fe 68 01 60 	mov	r8,-130720
800099fe:	30 29       	mov	r9,2
80009a00:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_send_zlp_in();
80009a02:	f0 1f 00 2c 	mcall	80009ab0 <udd_ctrl_out_received+0x1e8>
		return;
80009a06:	c4 38       	rjmp	80009a8c <udd_ctrl_out_received+0x1c4>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
80009a08:	4a 78       	lddpc	r8,80009aa4 <udd_ctrl_out_received+0x1dc>
80009a0a:	90 69       	ld.sh	r9,r8[0xc]
80009a0c:	4a 78       	lddpc	r8,80009aa8 <udd_ctrl_out_received+0x1e0>
80009a0e:	90 08       	ld.sh	r8,r8[0x0]
80009a10:	f0 09 19 00 	cp.h	r9,r8
80009a14:	c2 71       	brne	80009a62 <udd_ctrl_out_received+0x19a>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
80009a16:	4a 48       	lddpc	r8,80009aa4 <udd_ctrl_out_received+0x1dc>
80009a18:	70 58       	ld.w	r8,r8[0x14]
80009a1a:	58 08       	cp.w	r8,0
80009a1c:	c0 81       	brne	80009a2c <udd_ctrl_out_received+0x164>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
80009a1e:	f0 1f 00 20 	mcall	80009a9c <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80009a22:	fe 68 01 60 	mov	r8,-130720
80009a26:	30 29       	mov	r9,2
80009a28:	91 09       	st.w	r8[0x0],r9
			return;
80009a2a:	c3 18       	rjmp	80009a8c <udd_ctrl_out_received+0x1c4>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
80009a2c:	49 e8       	lddpc	r8,80009aa4 <udd_ctrl_out_received+0x1dc>
80009a2e:	70 58       	ld.w	r8,r8[0x14]
80009a30:	5d 18       	icall	r8
80009a32:	18 98       	mov	r8,r12
80009a34:	ec 18 00 01 	eorl	r8,0x1
80009a38:	5c 58       	castu.b	r8
80009a3a:	c0 80       	breq	80009a4a <udd_ctrl_out_received+0x182>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
80009a3c:	f0 1f 00 18 	mcall	80009a9c <udd_ctrl_out_received+0x1d4>
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
80009a40:	fe 68 01 60 	mov	r8,-130720
80009a44:	30 29       	mov	r9,2
80009a46:	91 09       	st.w	r8[0x0],r9
			return;
80009a48:	c2 28       	rjmp	80009a8c <udd_ctrl_out_received+0x1c4>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
80009a4a:	49 98       	lddpc	r8,80009aac <udd_ctrl_out_received+0x1e4>
80009a4c:	90 09       	ld.sh	r9,r8[0x0]
80009a4e:	49 78       	lddpc	r8,80009aa8 <udd_ctrl_out_received+0x1e0>
80009a50:	90 08       	ld.sh	r8,r8[0x0]
80009a52:	f2 08 00 08 	add	r8,r9,r8
80009a56:	5c 88       	casts.h	r8
80009a58:	49 59       	lddpc	r9,80009aac <udd_ctrl_out_received+0x1e4>
80009a5a:	b2 08       	st.h	r9[0x0],r8
		// Reinit reception on payload buffer
		udd_ctrl_payload_nb_trans = 0;
80009a5c:	49 39       	lddpc	r9,80009aa8 <udd_ctrl_out_received+0x1e0>
80009a5e:	30 08       	mov	r8,0
80009a60:	b2 08       	st.h	r9[0x0],r8
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
80009a62:	fe 68 01 60 	mov	r8,-130720
80009a66:	30 29       	mov	r9,2
80009a68:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
80009a6a:	fe 68 01 60 	mov	r8,-130720
80009a6e:	31 09       	mov	r9,16
80009a70:	91 09       	st.w	r8[0x0],r9
	flags = cpu_irq_save();
80009a72:	f0 1f 00 11 	mcall	80009ab4 <udd_ctrl_out_received+0x1ec>
80009a76:	18 98       	mov	r8,r12
80009a78:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_enable_nak_in_interrupt(0);
80009a7c:	fe 68 01 f0 	mov	r8,-130576
80009a80:	31 09       	mov	r9,16
80009a82:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009a84:	ee fc ff f0 	ld.w	r12,r7[-16]
80009a88:	f0 1f 00 0c 	mcall	80009ab8 <udd_ctrl_out_received+0x1f0>
}
80009a8c:	2f cd       	sub	sp,-16
80009a8e:	e3 cd 80 80 	ldm	sp++,r7,pc
80009a92:	00 00       	add	r0,r0
80009a94:	00 00       	add	r0,r0
80009a96:	06 ec       	st.h	--r3,r12
80009a98:	80 00       	ld.sh	r0,r0[0x0]
80009a9a:	9b ec       	st.w	sp[0x38],r12
80009a9c:	80 00       	ld.sh	r0,r0[0x0]
80009a9e:	9b 34       	st.w	sp[0xc],r4
80009aa0:	80 00       	ld.sh	r0,r0[0x0]
80009aa2:	95 6c       	st.w	r10[0x18],r12
80009aa4:	00 00       	add	r0,r0
80009aa6:	12 1c       	sub	r12,r9
80009aa8:	00 00       	add	r0,r0
80009aaa:	06 f2       	st.b	--r3,r2
80009aac:	00 00       	add	r0,r0
80009aae:	06 f0       	st.b	--r3,r0
80009ab0:	80 00       	ld.sh	r0,r0[0x0]
80009ab2:	9b 54       	st.w	sp[0x14],r4
80009ab4:	80 00       	ld.sh	r0,r0[0x0]
80009ab6:	86 54       	ld.sh	r4,r3[0xa]
80009ab8:	80 00       	ld.sh	r0,r0[0x0]
80009aba:	86 94       	ld.uh	r4,r3[0x2]

80009abc <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
80009abc:	eb cd 40 80 	pushm	r7,lr
80009ac0:	1a 97       	mov	r7,sp
	if (Is_udd_out_received(0))
80009ac2:	fe 68 01 30 	mov	r8,-130768
80009ac6:	70 08       	ld.w	r8,r8[0x0]
80009ac8:	e2 18 00 02 	andl	r8,0x2,COH
80009acc:	c1 21       	brne	80009af0 <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
80009ace:	48 b8       	lddpc	r8,80009af8 <udd_ctrl_underflow+0x3c>
80009ad0:	70 08       	ld.w	r8,r8[0x0]
80009ad2:	58 18       	cp.w	r8,1
80009ad4:	c0 41       	brne	80009adc <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
80009ad6:	f0 1f 00 0a 	mcall	80009afc <udd_ctrl_underflow+0x40>
80009ada:	c0 c8       	rjmp	80009af2 <udd_ctrl_underflow+0x36>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
80009adc:	48 78       	lddpc	r8,80009af8 <udd_ctrl_underflow+0x3c>
80009ade:	70 08       	ld.w	r8,r8[0x0]
80009ae0:	58 48       	cp.w	r8,4
80009ae2:	c0 81       	brne	80009af2 <udd_ctrl_underflow+0x36>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
80009ae4:	fe 68 01 f0 	mov	r8,-130576
80009ae8:	e8 69 00 00 	mov	r9,524288
80009aec:	91 09       	st.w	r8[0x0],r9
80009aee:	c0 28       	rjmp	80009af2 <udd_ctrl_underflow+0x36>


static void udd_ctrl_underflow(void)
{
	if (Is_udd_out_received(0))
		return; // underflow ignored if OUT data is received
80009af0:	d7 03       	nop
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
	}
}
80009af2:	e3 cd 80 80 	ldm	sp++,r7,pc
80009af6:	00 00       	add	r0,r0
80009af8:	00 00       	add	r0,r0
80009afa:	06 ec       	st.h	--r3,r12
80009afc:	80 00       	ld.sh	r0,r0[0x0]
80009afe:	9b 54       	st.w	sp[0x14],r4

80009b00 <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
80009b00:	eb cd 40 80 	pushm	r7,lr
80009b04:	1a 97       	mov	r7,sp
	if (Is_udd_in_send(0))
80009b06:	fe 68 01 30 	mov	r8,-130768
80009b0a:	70 08       	ld.w	r8,r8[0x0]
80009b0c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009b10:	5c 58       	castu.b	r8
80009b12:	c0 b1       	brne	80009b28 <udd_ctrl_overflow+0x28>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
80009b14:	48 78       	lddpc	r8,80009b30 <udd_ctrl_overflow+0x30>
80009b16:	70 08       	ld.w	r8,r8[0x0]
80009b18:	58 38       	cp.w	r8,3
80009b1a:	c0 81       	brne	80009b2a <udd_ctrl_overflow+0x2a>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
80009b1c:	fe 68 01 f0 	mov	r8,-130576
80009b20:	e8 69 00 00 	mov	r9,524288
80009b24:	91 09       	st.w	r8[0x0],r9
80009b26:	c0 28       	rjmp	80009b2a <udd_ctrl_overflow+0x2a>


static void udd_ctrl_overflow(void)
{
	if (Is_udd_in_send(0))
		return; // overflow ignored if IN data is received
80009b28:	d7 03       	nop
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
	}
}
80009b2a:	e3 cd 80 80 	ldm	sp++,r7,pc
80009b2e:	00 00       	add	r0,r0
80009b30:	00 00       	add	r0,r0
80009b32:	06 ec       	st.h	--r3,r12

80009b34 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
80009b34:	eb cd 40 80 	pushm	r7,lr
80009b38:	1a 97       	mov	r7,sp
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
80009b3a:	48 68       	lddpc	r8,80009b50 <udd_ctrl_stall_data+0x1c>
80009b3c:	30 59       	mov	r9,5
80009b3e:	91 09       	st.w	r8[0x0],r9
	udd_enable_stall_handshake(0);
80009b40:	fe 68 01 f0 	mov	r8,-130576
80009b44:	e8 69 00 00 	mov	r9,524288
80009b48:	91 09       	st.w	r8[0x0],r9
}
80009b4a:	e3 cd 80 80 	ldm	sp++,r7,pc
80009b4e:	00 00       	add	r0,r0
80009b50:	00 00       	add	r0,r0
80009b52:	06 ec       	st.h	--r3,r12

80009b54 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
80009b54:	eb cd 40 80 	pushm	r7,lr
80009b58:	1a 97       	mov	r7,sp
80009b5a:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
80009b5c:	49 08       	lddpc	r8,80009b9c <udd_ctrl_send_zlp_in+0x48>
80009b5e:	30 39       	mov	r9,3
80009b60:	91 09       	st.w	r8[0x0],r9

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
80009b62:	f0 1f 00 10 	mcall	80009ba0 <udd_ctrl_send_zlp_in+0x4c>
80009b66:	18 98       	mov	r8,r12
80009b68:	ef 48 ff fc 	st.w	r7[-4],r8
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
80009b6c:	fe 68 01 60 	mov	r8,-130720
80009b70:	30 19       	mov	r9,1
80009b72:	91 09       	st.w	r8[0x0],r9
	udd_enable_in_send_interrupt(0);
80009b74:	fe 68 01 f0 	mov	r8,-130576
80009b78:	30 19       	mov	r9,1
80009b7a:	91 09       	st.w	r8[0x0],r9
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
80009b7c:	fe 68 01 60 	mov	r8,-130720
80009b80:	30 89       	mov	r9,8
80009b82:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_out_interrupt(0);
80009b84:	fe 68 01 f0 	mov	r8,-130576
80009b88:	30 89       	mov	r9,8
80009b8a:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009b8c:	ee fc ff fc 	ld.w	r12,r7[-4]
80009b90:	f0 1f 00 05 	mcall	80009ba4 <udd_ctrl_send_zlp_in+0x50>
}
80009b94:	2f fd       	sub	sp,-4
80009b96:	e3 cd 80 80 	ldm	sp++,r7,pc
80009b9a:	00 00       	add	r0,r0
80009b9c:	00 00       	add	r0,r0
80009b9e:	06 ec       	st.h	--r3,r12
80009ba0:	80 00       	ld.sh	r0,r0[0x0]
80009ba2:	86 54       	ld.sh	r4,r3[0xa]
80009ba4:	80 00       	ld.sh	r0,r0[0x0]
80009ba6:	86 94       	ld.uh	r4,r3[0x2]

80009ba8 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
80009ba8:	eb cd 40 80 	pushm	r7,lr
80009bac:	1a 97       	mov	r7,sp
80009bae:	20 1d       	sub	sp,4
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
80009bb0:	48 c8       	lddpc	r8,80009be0 <udd_ctrl_send_zlp_out+0x38>
80009bb2:	30 49       	mov	r9,4
80009bb4:	91 09       	st.w	r8[0x0],r9
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
80009bb6:	f0 1f 00 0c 	mcall	80009be4 <udd_ctrl_send_zlp_out+0x3c>
80009bba:	18 98       	mov	r8,r12
80009bbc:	ef 48 ff fc 	st.w	r7[-4],r8
	udd_ack_nak_in(0);
80009bc0:	fe 68 01 60 	mov	r8,-130720
80009bc4:	31 09       	mov	r9,16
80009bc6:	91 09       	st.w	r8[0x0],r9
	udd_enable_nak_in_interrupt(0);
80009bc8:	fe 68 01 f0 	mov	r8,-130576
80009bcc:	31 09       	mov	r9,16
80009bce:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
80009bd0:	ee fc ff fc 	ld.w	r12,r7[-4]
80009bd4:	f0 1f 00 05 	mcall	80009be8 <udd_ctrl_send_zlp_out+0x40>
}
80009bd8:	2f fd       	sub	sp,-4
80009bda:	e3 cd 80 80 	ldm	sp++,r7,pc
80009bde:	00 00       	add	r0,r0
80009be0:	00 00       	add	r0,r0
80009be2:	06 ec       	st.h	--r3,r12
80009be4:	80 00       	ld.sh	r0,r0[0x0]
80009be6:	86 54       	ld.sh	r4,r3[0xa]
80009be8:	80 00       	ld.sh	r0,r0[0x0]
80009bea:	86 94       	ld.uh	r4,r3[0x2]

80009bec <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
80009bec:	eb cd 40 80 	pushm	r7,lr
80009bf0:	1a 97       	mov	r7,sp
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
80009bf2:	48 58       	lddpc	r8,80009c04 <udd_ctrl_endofrequest+0x18>
80009bf4:	70 48       	ld.w	r8,r8[0x10]
80009bf6:	58 08       	cp.w	r8,0
80009bf8:	c0 40       	breq	80009c00 <udd_ctrl_endofrequest+0x14>
		udd_g_ctrlreq.callback();
80009bfa:	48 38       	lddpc	r8,80009c04 <udd_ctrl_endofrequest+0x18>
80009bfc:	70 48       	ld.w	r8,r8[0x10]
80009bfe:	5d 18       	icall	r8
	}
}
80009c00:	e3 cd 80 80 	ldm	sp++,r7,pc
80009c04:	00 00       	add	r0,r0
80009c06:	12 1c       	sub	r12,r9

80009c08 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
80009c08:	eb cd 40 80 	pushm	r7,lr
80009c0c:	1a 97       	mov	r7,sp

	if (!Is_udd_endpoint_interrupt(0))
80009c0e:	fe 68 00 00 	mov	r8,-131072
80009c12:	70 18       	ld.w	r8,r8[0x4]
80009c14:	e2 18 10 00 	andl	r8,0x1000,COH
80009c18:	c0 31       	brne	80009c1e <udd_ctrl_interrupt+0x16>
		return false; // No interrupt events on control endpoint
80009c1a:	30 08       	mov	r8,0
80009c1c:	c4 c8       	rjmp	80009cb4 <udd_ctrl_interrupt+0xac>

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
80009c1e:	fe 68 02 20 	mov	r8,-130528
80009c22:	31 09       	mov	r9,16
80009c24:	91 09       	st.w	r8[0x0],r9
	udd_disable_nak_out_interrupt(0);
80009c26:	fe 68 02 20 	mov	r8,-130528
80009c2a:	30 89       	mov	r9,8
80009c2c:	91 09       	st.w	r8[0x0],r9


	// Search event on control endpoint
	if (Is_udd_setup_received(0)) {
80009c2e:	fe 68 01 30 	mov	r8,-130768
80009c32:	70 08       	ld.w	r8,r8[0x0]
80009c34:	e2 18 00 04 	andl	r8,0x4,COH
80009c38:	c0 50       	breq	80009c42 <udd_ctrl_interrupt+0x3a>
		// SETUP packet received
		udd_ctrl_setup_received();
80009c3a:	f0 1f 00 21 	mcall	80009cbc <udd_ctrl_interrupt+0xb4>
		return true;
80009c3e:	30 18       	mov	r8,1
80009c40:	c3 a8       	rjmp	80009cb4 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
80009c42:	fe 68 01 30 	mov	r8,-130768
80009c46:	70 08       	ld.w	r8,r8[0x0]
80009c48:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009c4c:	5c 58       	castu.b	r8
80009c4e:	c0 c0       	breq	80009c66 <udd_ctrl_interrupt+0x5e>
80009c50:	fe 68 01 c0 	mov	r8,-130624
80009c54:	70 08       	ld.w	r8,r8[0x0]
80009c56:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80009c5a:	5c 58       	castu.b	r8
80009c5c:	c0 50       	breq	80009c66 <udd_ctrl_interrupt+0x5e>
		// IN packet sent
		udd_ctrl_in_sent();
80009c5e:	f0 1f 00 19 	mcall	80009cc0 <udd_ctrl_interrupt+0xb8>
		return true;
80009c62:	30 18       	mov	r8,1
80009c64:	c2 88       	rjmp	80009cb4 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_out_received(0)) {
80009c66:	fe 68 01 30 	mov	r8,-130768
80009c6a:	70 08       	ld.w	r8,r8[0x0]
80009c6c:	e2 18 00 02 	andl	r8,0x2,COH
80009c70:	c0 50       	breq	80009c7a <udd_ctrl_interrupt+0x72>
		// OUT packet received
		udd_ctrl_out_received();
80009c72:	f0 1f 00 15 	mcall	80009cc4 <udd_ctrl_interrupt+0xbc>
		return true;
80009c76:	30 18       	mov	r8,1
80009c78:	c1 e8       	rjmp	80009cb4 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_out(0)) {
80009c7a:	fe 68 01 30 	mov	r8,-130768
80009c7e:	70 08       	ld.w	r8,r8[0x0]
80009c80:	e2 18 00 08 	andl	r8,0x8,COH
80009c84:	c0 90       	breq	80009c96 <udd_ctrl_interrupt+0x8e>
		// Overflow on OUT packet
		udd_ack_nak_out(0);
80009c86:	fe 68 01 60 	mov	r8,-130720
80009c8a:	30 89       	mov	r9,8
80009c8c:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_overflow();
80009c8e:	f0 1f 00 0f 	mcall	80009cc8 <udd_ctrl_interrupt+0xc0>
		return true;
80009c92:	30 18       	mov	r8,1
80009c94:	c1 08       	rjmp	80009cb4 <udd_ctrl_interrupt+0xac>
	}
	if (Is_udd_nak_in(0)) {
80009c96:	fe 68 01 30 	mov	r8,-130768
80009c9a:	70 08       	ld.w	r8,r8[0x0]
80009c9c:	e2 18 00 10 	andl	r8,0x10,COH
80009ca0:	c0 90       	breq	80009cb2 <udd_ctrl_interrupt+0xaa>
		// Underflow on IN packet
		udd_ack_nak_in(0);
80009ca2:	fe 68 01 60 	mov	r8,-130720
80009ca6:	31 09       	mov	r9,16
80009ca8:	91 09       	st.w	r8[0x0],r9
		udd_ctrl_underflow();
80009caa:	f0 1f 00 09 	mcall	80009ccc <udd_ctrl_interrupt+0xc4>
		return true;
80009cae:	30 18       	mov	r8,1
80009cb0:	c0 28       	rjmp	80009cb4 <udd_ctrl_interrupt+0xac>
	}
	return false;
80009cb2:	30 08       	mov	r8,0
}
80009cb4:	10 9c       	mov	r12,r8
80009cb6:	e3 cd 80 80 	ldm	sp++,r7,pc
80009cba:	00 00       	add	r0,r0
80009cbc:	80 00       	ld.sh	r0,r0[0x0]
80009cbe:	95 c4       	st.w	r10[0x30],r4
80009cc0:	80 00       	ld.sh	r0,r0[0x0]
80009cc2:	97 28       	st.w	r11[0x8],r8
80009cc4:	80 00       	ld.sh	r0,r0[0x0]
80009cc6:	98 c8       	ld.uh	r8,r12[0x8]
80009cc8:	80 00       	ld.sh	r0,r0[0x0]
80009cca:	9b 00       	st.w	sp[0x0],r0
80009ccc:	80 00       	ld.sh	r0,r0[0x0]
80009cce:	9a bc       	ld.uh	r12,sp[0x6]

80009cd0 <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
80009cd0:	eb cd 40 80 	pushm	r7,lr
80009cd4:	1a 97       	mov	r7,sp
80009cd6:	20 1d       	sub	sp,4
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80009cd8:	30 08       	mov	r8,0
80009cda:	ef 68 ff ff 	st.b	r7[-1],r8
80009cde:	c2 28       	rjmp	80009d22 <udd_ep_job_table_reset+0x52>
		udd_ep_job[i].busy = false;
80009ce0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009ce4:	49 5a       	lddpc	r10,80009d38 <udd_ep_job_table_reset+0x68>
80009ce6:	12 98       	mov	r8,r9
80009ce8:	a3 68       	lsl	r8,0x2
80009cea:	12 08       	add	r8,r9
80009cec:	a3 68       	lsl	r8,0x2
80009cee:	f4 08 00 09 	add	r9,r10,r8
80009cf2:	72 08       	ld.w	r8,r9[0x0]
80009cf4:	30 0a       	mov	r10,0
80009cf6:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80009cfa:	93 08       	st.w	r9[0x0],r8
		udd_ep_job[i].stall_requested = false;
80009cfc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009d00:	48 ea       	lddpc	r10,80009d38 <udd_ep_job_table_reset+0x68>
80009d02:	12 98       	mov	r8,r9
80009d04:	a3 68       	lsl	r8,0x2
80009d06:	12 08       	add	r8,r9
80009d08:	a3 68       	lsl	r8,0x2
80009d0a:	f4 08 00 09 	add	r9,r10,r8
80009d0e:	72 08       	ld.w	r8,r9[0x0]
80009d10:	30 0a       	mov	r10,0
80009d12:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
80009d16:	93 08       	st.w	r9[0x0],r8
#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80009d18:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009d1c:	2f f8       	sub	r8,-1
80009d1e:	ef 68 ff ff 	st.b	r7[-1],r8
80009d22:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009d26:	30 28       	mov	r8,2
80009d28:	f0 09 18 00 	cp.b	r9,r8
80009d2c:	fe 98 ff da 	brls	80009ce0 <udd_ep_job_table_reset+0x10>
		udd_ep_job[i].busy = false;
		udd_ep_job[i].stall_requested = false;
	}
}
80009d30:	2f fd       	sub	sp,-4
80009d32:	e3 cd 80 80 	ldm	sp++,r7,pc
80009d36:	00 00       	add	r0,r0
80009d38:	00 00       	add	r0,r0
80009d3a:	06 f4       	st.b	--r3,r4

80009d3c <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
80009d3c:	eb cd 40 80 	pushm	r7,lr
80009d40:	1a 97       	mov	r7,sp
80009d42:	20 1d       	sub	sp,4
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80009d44:	30 08       	mov	r8,0
80009d46:	ef 68 ff ff 	st.b	r7[-1],r8
80009d4a:	c1 98       	rjmp	80009d7c <udd_ep_job_table_kill+0x40>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
80009d4c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009d50:	2f f8       	sub	r8,-1
80009d52:	5c 58       	castu.b	r8
80009d54:	10 9a       	mov	r10,r8
80009d56:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009d5a:	12 98       	mov	r8,r9
80009d5c:	a3 68       	lsl	r8,0x2
80009d5e:	12 08       	add	r8,r9
80009d60:	a3 68       	lsl	r8,0x2
80009d62:	10 99       	mov	r9,r8
80009d64:	48 b8       	lddpc	r8,80009d90 <udd_ep_job_table_kill+0x54>
80009d66:	f2 08 00 08 	add	r8,r9,r8
80009d6a:	30 1b       	mov	r11,1
80009d6c:	10 9c       	mov	r12,r8
80009d6e:	f0 1f 00 0a 	mcall	80009d94 <udd_ep_job_table_kill+0x58>
static void udd_ep_job_table_kill(void)
{
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
80009d72:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80009d76:	2f f8       	sub	r8,-1
80009d78:	ef 68 ff ff 	st.b	r7[-1],r8
80009d7c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80009d80:	30 28       	mov	r8,2
80009d82:	f0 09 18 00 	cp.b	r9,r8
80009d86:	fe 98 ff e3 	brls	80009d4c <udd_ep_job_table_kill+0x10>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
	}
}
80009d8a:	2f fd       	sub	sp,-4
80009d8c:	e3 cd 80 80 	ldm	sp++,r7,pc
80009d90:	00 00       	add	r0,r0
80009d92:	06 f4       	st.b	--r3,r4
80009d94:	80 00       	ld.sh	r0,r0[0x0]
80009d96:	9d e4       	st.w	lr[0x38],r4

80009d98 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
80009d98:	eb cd 40 80 	pushm	r7,lr
80009d9c:	1a 97       	mov	r7,sp
80009d9e:	20 1d       	sub	sp,4
80009da0:	18 98       	mov	r8,r12
80009da2:	ef 68 ff fc 	st.b	r7[-4],r8
	ep &= USB_EP_ADDR_MASK;
80009da6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009daa:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80009dae:	ef 68 ff fc 	st.b	r7[-4],r8

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
80009db2:	ef 3a ff fc 	ld.ub	r10,r7[-4]
80009db6:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80009dba:	f0 c9 00 01 	sub	r9,r8,1
80009dbe:	12 98       	mov	r8,r9
80009dc0:	a3 68       	lsl	r8,0x2
80009dc2:	12 08       	add	r8,r9
80009dc4:	a3 68       	lsl	r8,0x2
80009dc6:	10 99       	mov	r9,r8
80009dc8:	48 58       	lddpc	r8,80009ddc <udd_ep_abort_job+0x44>
80009dca:	f2 08 00 08 	add	r8,r9,r8
80009dce:	30 1b       	mov	r11,1
80009dd0:	10 9c       	mov	r12,r8
80009dd2:	f0 1f 00 04 	mcall	80009de0 <udd_ep_abort_job+0x48>
}
80009dd6:	2f fd       	sub	sp,-4
80009dd8:	e3 cd 80 80 	ldm	sp++,r7,pc
80009ddc:	00 00       	add	r0,r0
80009dde:	06 f4       	st.b	--r3,r4
80009de0:	80 00       	ld.sh	r0,r0[0x0]
80009de2:	9d e4       	st.w	lr[0x38],r4

80009de4 <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
80009de4:	eb cd 40 80 	pushm	r7,lr
80009de8:	1a 97       	mov	r7,sp
80009dea:	20 3d       	sub	sp,12
80009dec:	ef 4c ff fc 	st.w	r7[-4],r12
80009df0:	16 99       	mov	r9,r11
80009df2:	14 98       	mov	r8,r10
80009df4:	ef 69 ff f8 	st.b	r7[-8],r9
80009df8:	ef 68 ff f4 	st.b	r7[-12],r8
	if (ptr_job->busy == false) {
80009dfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009e00:	70 08       	ld.w	r8,r8[0x0]
80009e02:	e6 18 80 00 	andh	r8,0x8000,COH
80009e06:	c2 b0       	breq	80009e5c <udd_ep_finish_job+0x78>
		return; // No on-going job
	}
	ptr_job->busy = false;
80009e08:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009e0c:	72 08       	ld.w	r8,r9[0x0]
80009e0e:	30 0a       	mov	r10,0
80009e10:	f1 da d3 e1 	bfins	r8,r10,0x1f,0x1
80009e14:	93 08       	st.w	r9[0x0],r8
	if (NULL == ptr_job->call_trans) {
80009e16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009e1a:	70 48       	ld.w	r8,r8[0x10]
80009e1c:	58 08       	cp.w	r8,0
80009e1e:	c2 10       	breq	80009e60 <udd_ep_finish_job+0x7c>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
80009e20:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009e24:	a3 68       	lsl	r8,0x2
80009e26:	e0 38 ff 00 	sub	r8,130816
80009e2a:	70 08       	ld.w	r8,r8[0x0]
80009e2c:	e2 18 01 00 	andl	r8,0x100,COH
80009e30:	c0 90       	breq	80009e42 <udd_ep_finish_job+0x5e>
		ep_num |= USB_EP_DIR_IN;
80009e32:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80009e36:	ea 18 ff ff 	orh	r8,0xffff
80009e3a:	e8 18 ff 80 	orl	r8,0xff80
80009e3e:	ef 68 ff f4 	st.b	r7[-12],r8
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
80009e42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80009e46:	70 48       	ld.w	r8,r8[0x10]
80009e48:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80009e4c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80009e50:	72 2b       	ld.w	r11,r9[0x8]
80009e52:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80009e56:	12 9c       	mov	r12,r9
80009e58:	5d 18       	icall	r8
80009e5a:	c0 48       	rjmp	80009e62 <udd_ep_finish_job+0x7e>


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
		return; // No on-going job
80009e5c:	d7 03       	nop
80009e5e:	c0 28       	rjmp	80009e62 <udd_ep_finish_job+0x7e>
	}
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
		return; // No callback linked to job
80009e60:	d7 03       	nop
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
80009e62:	2f dd       	sub	sp,-12
80009e64:	e3 cd 80 80 	ldm	sp++,r7,pc

80009e68 <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
80009e68:	eb cd 40 80 	pushm	r7,lr
80009e6c:	1a 97       	mov	r7,sp
80009e6e:	20 5d       	sub	sp,20
80009e70:	18 98       	mov	r8,r12
80009e72:	ef 68 ff ec 	st.b	r7[-20],r8
	uint32_t udd_dma_ctrl = 0;
80009e76:	30 08       	mov	r8,0
80009e78:	ef 48 ff f0 	st.w	r7[-16],r8
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
80009e7c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009e80:	f0 c9 00 01 	sub	r9,r8,1
80009e84:	12 98       	mov	r8,r9
80009e86:	a3 68       	lsl	r8,0x2
80009e88:	12 08       	add	r8,r9
80009e8a:	a3 68       	lsl	r8,0x2
80009e8c:	10 99       	mov	r9,r8
80009e8e:	fe f8 02 1a 	ld.w	r8,pc[538]
80009e92:	f2 08 00 08 	add	r8,r9,r8
80009e96:	ef 48 ff f4 	st.w	r7[-12],r8

	if (!ptr_job->busy) {
80009e9a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009e9e:	70 08       	ld.w	r8,r8[0x0]
80009ea0:	e6 18 80 00 	andh	r8,0x8000,COH
80009ea4:	e0 80 00 fe 	breq	8000a0a0 <udd_ep_trans_done+0x238>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->nb_trans != ptr_job->buf_size) {
80009ea8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009eac:	70 39       	ld.w	r9,r8[0xc]
80009eae:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009eb2:	70 28       	ld.w	r8,r8[0x8]
80009eb4:	10 39       	cp.w	r9,r8
80009eb6:	e0 80 00 b5 	breq	8000a020 <udd_ep_trans_done+0x1b8>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
80009eba:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009ebe:	70 29       	ld.w	r9,r8[0x8]
80009ec0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009ec4:	70 38       	ld.w	r8,r8[0xc]
80009ec6:	10 19       	sub	r9,r8
80009ec8:	ef 49 ff f8 	st.w	r7[-8],r9

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
80009ecc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009ed0:	e0 58 00 00 	cp.w	r8,65536
80009ed4:	e0 88 00 0a 	brls	80009ee8 <udd_ep_trans_done+0x80>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
80009ed8:	e0 78 00 00 	mov	r8,65536
80009edc:	ef 48 ff f8 	st.w	r7[-8],r8

			// Set 0 to transfer the maximum
			udd_dma_ctrl = (0 <<
80009ee0:	30 08       	mov	r8,0
80009ee2:	ef 48 ff f0 	st.w	r7[-16],r8
80009ee6:	c0 68       	rjmp	80009ef2 <udd_ep_trans_done+0x8a>
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		} else {
			udd_dma_ctrl = (next_trans <<
80009ee8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009eec:	b1 68       	lsl	r8,0x10
80009eee:	ef 48 ff f0 	st.w	r7[-16],r8
					AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_OFFSET)
					& AVR32_USBB_UDDMA1_CONTROL_CH_BYTE_LENGTH_MASK;
		}
		if (Is_udd_endpoint_in(ep)) {
80009ef2:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009ef6:	a3 68       	lsl	r8,0x2
80009ef8:	e0 38 ff 00 	sub	r8,130816
80009efc:	70 08       	ld.w	r8,r8[0x0]
80009efe:	e2 18 01 00 	andl	r8,0x100,COH
80009f02:	c2 10       	breq	80009f44 <udd_ep_trans_done+0xdc>
			if (0 != next_trans % udd_get_endpoint_size(ep)) {
80009f04:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009f08:	a3 68       	lsl	r8,0x2
80009f0a:	e0 38 ff 00 	sub	r8,130816
80009f0e:	70 08       	ld.w	r8,r8[0x0]
80009f10:	e2 18 00 70 	andl	r8,0x70,COH
80009f14:	a5 88       	lsr	r8,0x4
80009f16:	30 89       	mov	r9,8
80009f18:	f2 08 09 48 	lsl	r8,r9,r8
80009f1c:	20 18       	sub	r8,1
80009f1e:	10 99       	mov	r9,r8
80009f20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009f24:	f3 e8 00 08 	and	r8,r9,r8
80009f28:	c3 00       	breq	80009f88 <udd_ep_trans_done+0x120>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
80009f2a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009f2e:	a3 b8       	sbr	r8,0x3
80009f30:	ef 48 ff f0 	st.w	r7[-16],r8
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
80009f34:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009f38:	72 08       	ld.w	r8,r9[0x0]
80009f3a:	30 0a       	mov	r10,0
80009f3c:	f1 da d3 c1 	bfins	r8,r10,0x1e,0x1
80009f40:	93 08       	st.w	r9[0x0],r8
80009f42:	c2 38       	rjmp	80009f88 <udd_ep_trans_done+0x120>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80009f44:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009f48:	a3 68       	lsl	r8,0x2
80009f4a:	e0 38 ff 00 	sub	r8,130816
80009f4e:	70 08       	ld.w	r8,r8[0x0]
80009f50:	e2 18 18 00 	andl	r8,0x1800,COH
80009f54:	ab 98       	lsr	r8,0xb
80009f56:	58 18       	cp.w	r8,1
80009f58:	c1 21       	brne	80009f7c <udd_ep_trans_done+0x114>
					|| (next_trans <= udd_get_endpoint_size(ep))) {
80009f5a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009f5e:	a3 68       	lsl	r8,0x2
80009f60:	e0 38 ff 00 	sub	r8,130816
80009f64:	70 08       	ld.w	r8,r8[0x0]
80009f66:	e2 18 00 70 	andl	r8,0x70,COH
80009f6a:	a5 88       	lsr	r8,0x4
80009f6c:	30 89       	mov	r9,8
80009f6e:	f2 08 09 48 	lsl	r8,r9,r8
80009f72:	10 99       	mov	r9,r8
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_DMAEND_EN_MASK;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
80009f74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009f78:	10 39       	cp.w	r9,r8
80009f7a:	c0 73       	brcs	80009f88 <udd_ep_trans_done+0x120>
					|| (next_trans <= udd_get_endpoint_size(ep))) {

				// Enable short packet reception
				udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOT_IRQ_EN_MASK
80009f7c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009f80:	e8 18 00 14 	orl	r8,0x14
80009f84:	ef 48 ff f0 	st.w	r7[-16],r8
						| AVR32_USBB_UDDMA1_CONTROL_BUFF_CLOSE_IN_EN_MASK;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (U32) &ptr_job->buf[ptr_job->nb_trans]);
80009f88:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009f8c:	a5 68       	lsl	r8,0x4
80009f8e:	e0 38 fd 00 	sub	r8,130304
80009f92:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009f96:	72 1a       	ld.w	r10,r9[0x4]
80009f98:	ee f9 ff f4 	ld.w	r9,r7[-12]
80009f9c:	72 39       	ld.w	r9,r9[0xc]
80009f9e:	f4 09 00 09 	add	r9,r10,r9
80009fa2:	91 19       	st.w	r8[0x4],r9
		udd_dma_ctrl |= AVR32_USBB_UDDMA1_CONTROL_EOBUFF_IRQ_EN_MASK |
80009fa4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80009fa8:	e8 18 00 21 	orl	r8,0x21
80009fac:	ef 48 ff f0 	st.w	r7[-16],r8
				AVR32_USBB_UDDMA1_CONTROL_CH_EN_MASK;

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
80009fb0:	f0 1f 00 3f 	mcall	8000a0ac <udd_ep_trans_done+0x244>
80009fb4:	18 98       	mov	r8,r12
80009fb6:	ef 48 ff fc 	st.w	r7[-4],r8
		if ( !(udd_endpoint_dma_get_status(ep)
80009fba:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009fbe:	a5 68       	lsl	r8,0x4
80009fc0:	e0 38 fd 00 	sub	r8,130304
80009fc4:	70 38       	ld.w	r8,r8[0xc]
80009fc6:	e2 18 00 10 	andl	r8,0x10,COH
80009fca:	c2 11       	brne	8000a00c <udd_ep_trans_done+0x1a4>
				& AVR32_USBB_UDDMA1_STATUS_EOT_STA_MASK)) {
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
80009fcc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80009fd0:	a5 68       	lsl	r8,0x4
80009fd2:	e0 38 fd 00 	sub	r8,130304
80009fd6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80009fda:	91 29       	st.w	r8[0x8],r9
			ptr_job->nb_trans += next_trans;
80009fdc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009fe0:	70 39       	ld.w	r9,r8[0xc]
80009fe2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80009fe6:	10 09       	add	r9,r8
80009fe8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80009fec:	91 39       	st.w	r8[0xc],r9
			udd_enable_endpoint_dma_interrupt(ep);
80009fee:	fe 68 00 00 	mov	r8,-131072
80009ff2:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80009ff6:	20 19       	sub	r9,1
80009ff8:	fc 1a 02 00 	movh	r10,0x200
80009ffc:	f4 09 09 49 	lsl	r9,r10,r9
8000a000:	91 69       	st.w	r8[0x18],r9
			cpu_irq_restore(flags);
8000a002:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a006:	f0 1f 00 2b 	mcall	8000a0b0 <udd_ep_trans_done+0x248>
			return;
8000a00a:	c4 c8       	rjmp	8000a0a2 <udd_ep_trans_done+0x23a>
		}
		cpu_irq_restore(flags);
8000a00c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a010:	f0 1f 00 28 	mcall	8000a0b0 <udd_ep_trans_done+0x248>

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->nb_trans;
8000a014:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a018:	70 39       	ld.w	r9,r8[0xc]
8000a01a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a01e:	91 29       	st.w	r8[0x8],r9
	}
	if (Is_udd_endpoint_in(ep)) {
8000a020:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000a024:	a3 68       	lsl	r8,0x2
8000a026:	e0 38 ff 00 	sub	r8,130816
8000a02a:	70 08       	ld.w	r8,r8[0x0]
8000a02c:	e2 18 01 00 	andl	r8,0x100,COH
8000a030:	c2 f0       	breq	8000a08e <udd_ep_trans_done+0x226>
		if (ptr_job->b_shortpacket) {
8000a032:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a036:	70 08       	ld.w	r8,r8[0x0]
8000a038:	e6 18 40 00 	andh	r8,0x4000,COH
8000a03c:	c2 90       	breq	8000a08e <udd_ep_trans_done+0x226>
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_ack_in_send(ep);
8000a03e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000a042:	a3 68       	lsl	r8,0x2
8000a044:	e0 38 fe a0 	sub	r8,130720
8000a048:	30 19       	mov	r9,1
8000a04a:	91 09       	st.w	r8[0x0],r9
			if (Is_udd_write_enabled(ep)) {
8000a04c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000a050:	a3 68       	lsl	r8,0x2
8000a052:	e0 38 fe d0 	sub	r8,130768
8000a056:	70 08       	ld.w	r8,r8[0x0]
8000a058:	e6 18 00 01 	andh	r8,0x1,COH
8000a05c:	c0 80       	breq	8000a06c <udd_ep_trans_done+0x204>
				// Force interrupt in case of ep already free
				udd_raise_in_send(ep);
8000a05e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000a062:	a3 68       	lsl	r8,0x2
8000a064:	e0 38 fe 70 	sub	r8,130672
8000a068:	30 19       	mov	r9,1
8000a06a:	91 09       	st.w	r8[0x0],r9
			}
			udd_enable_in_send_interrupt(ep);
8000a06c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000a070:	a3 68       	lsl	r8,0x2
8000a072:	e0 38 fe 10 	sub	r8,130576
8000a076:	30 19       	mov	r9,1
8000a078:	91 09       	st.w	r8[0x0],r9
			udd_enable_endpoint_interrupt(ep);
8000a07a:	fe 68 00 00 	mov	r8,-131072
8000a07e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000a082:	e0 6a 10 00 	mov	r10,4096
8000a086:	f4 09 09 49 	lsl	r9,r10,r9
8000a08a:	91 69       	st.w	r8[0x18],r9
			return;
8000a08c:	c0 b8       	rjmp	8000a0a2 <udd_ep_trans_done+0x23a>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
8000a08e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000a092:	10 9a       	mov	r10,r8
8000a094:	30 0b       	mov	r11,0
8000a096:	ee fc ff f4 	ld.w	r12,r7[-12]
8000a09a:	f0 1f 00 07 	mcall	8000a0b4 <udd_ep_trans_done+0x24c>
8000a09e:	c0 28       	rjmp	8000a0a2 <udd_ep_trans_done+0x23a>

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
		return; // No job is running, then ignore it (system error)
8000a0a0:	d7 03       	nop
			return;
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
}
8000a0a2:	2f bd       	sub	sp,-20
8000a0a4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a0a8:	00 00       	add	r0,r0
8000a0aa:	06 f4       	st.b	--r3,r4
8000a0ac:	80 00       	ld.sh	r0,r0[0x0]
8000a0ae:	86 54       	ld.sh	r4,r3[0xa]
8000a0b0:	80 00       	ld.sh	r0,r0[0x0]
8000a0b2:	86 94       	ld.uh	r4,r3[0x2]
8000a0b4:	80 00       	ld.sh	r0,r0[0x0]
8000a0b6:	9d e4       	st.w	lr[0x38],r4

8000a0b8 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
8000a0b8:	eb cd 40 80 	pushm	r7,lr
8000a0bc:	1a 97       	mov	r7,sp
8000a0be:	20 3d       	sub	sp,12
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000a0c0:	30 18       	mov	r8,1
8000a0c2:	ef 68 ff f7 	st.b	r7[-9],r8
8000a0c6:	cf 18       	rjmp	8000a2a8 <udd_ep_interrupt+0x1f0>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
8000a0c8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a0cc:	f0 c9 00 01 	sub	r9,r8,1
8000a0d0:	12 98       	mov	r8,r9
8000a0d2:	a3 68       	lsl	r8,0x2
8000a0d4:	12 08       	add	r8,r9
8000a0d6:	a3 68       	lsl	r8,0x2
8000a0d8:	10 99       	mov	r9,r8
8000a0da:	4f a8       	lddpc	r8,8000a2c0 <udd_ep_interrupt+0x208>
8000a0dc:	f2 08 00 08 	add	r8,r9,r8
8000a0e0:	ef 48 ff f8 	st.w	r7[-8],r8

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000a0e4:	fe 68 00 00 	mov	r8,-131072
8000a0e8:	70 49       	ld.w	r9,r8[0x10]
8000a0ea:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a0ee:	20 18       	sub	r8,1
8000a0f0:	fc 1a 02 00 	movh	r10,0x200
8000a0f4:	f4 08 09 48 	lsl	r8,r10,r8
8000a0f8:	f3 e8 00 08 	and	r8,r9,r8
8000a0fc:	c4 70       	breq	8000a18a <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
8000a0fe:	fe 68 00 00 	mov	r8,-131072
8000a102:	70 19       	ld.w	r9,r8[0x4]
8000a104:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a108:	20 18       	sub	r8,1
8000a10a:	fc 1a 02 00 	movh	r10,0x200
8000a10e:	f4 08 09 48 	lsl	r8,r10,r8
8000a112:	f3 e8 00 08 	and	r8,r9,r8
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
8000a116:	c3 a0       	breq	8000a18a <udd_ep_interrupt+0xd2>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
			uint32_t nb_remaining;
			if( udd_endpoint_dma_get_status(ep)
8000a118:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a11c:	a5 68       	lsl	r8,0x4
8000a11e:	e0 38 fd 00 	sub	r8,130304
8000a122:	70 38       	ld.w	r8,r8[0xc]
8000a124:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a128:	5c 58       	castu.b	r8
8000a12a:	c0 30       	breq	8000a130 <udd_ep_interrupt+0x78>
					& AVR32_USBB_UDDMA1_STATUS_CH_EN_MASK) {
				return true; // Ignore EOT_STA interrupt
8000a12c:	30 18       	mov	r8,1
8000a12e:	cc 58       	rjmp	8000a2b8 <udd_ep_interrupt+0x200>
			}
			udd_disable_endpoint_dma_interrupt(ep);
8000a130:	fe 68 00 00 	mov	r8,-131072
8000a134:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a138:	20 19       	sub	r9,1
8000a13a:	fc 1a 02 00 	movh	r10,0x200
8000a13e:	f4 09 09 49 	lsl	r9,r10,r9
8000a142:	91 59       	st.w	r8[0x14],r9
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
8000a144:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a148:	a5 68       	lsl	r8,0x4
8000a14a:	e0 38 fd 00 	sub	r8,130304
8000a14e:	70 38       	ld.w	r8,r8[0xc]
8000a150:	b1 88       	lsr	r8,0x10
8000a152:	ef 48 ff fc 	st.w	r7[-4],r8
					AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_MASK)
					>> AVR32_USBB_UDDMA1_STATUS_CH_BYTE_CNT_OFFSET;
			if (nb_remaining) {
8000a156:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a15a:	58 08       	cp.w	r8,0
8000a15c:	c1 00       	breq	8000a17c <udd_ep_interrupt+0xc4>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->nb_trans -= nb_remaining;
8000a15e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a162:	70 39       	ld.w	r9,r8[0xc]
8000a164:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a168:	10 19       	sub	r9,r8
8000a16a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a16e:	91 39       	st.w	r8[0xc],r9
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->nb_trans;
8000a170:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a174:	70 39       	ld.w	r9,r8[0xc]
8000a176:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a17a:	91 29       	st.w	r8[0x8],r9
			}
			udd_ep_trans_done(ep);
8000a17c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a180:	10 9c       	mov	r12,r8
8000a182:	f0 1f 00 51 	mcall	8000a2c4 <udd_ep_interrupt+0x20c>
			return true;
8000a186:	30 18       	mov	r8,1
8000a188:	c9 88       	rjmp	8000a2b8 <udd_ep_interrupt+0x200>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
8000a18a:	fe 68 00 00 	mov	r8,-131072
8000a18e:	70 49       	ld.w	r9,r8[0x10]
8000a190:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a194:	e0 6a 10 00 	mov	r10,4096
8000a198:	f4 08 09 48 	lsl	r8,r10,r8
8000a19c:	f3 e8 00 08 	and	r8,r9,r8
8000a1a0:	c7 f0       	breq	8000a29e <udd_ep_interrupt+0x1e6>
			if (Is_udd_in_send_interrupt_enabled(ep) && Is_udd_in_send(ep)) {
8000a1a2:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a1a6:	a3 68       	lsl	r8,0x2
8000a1a8:	e0 38 fe 40 	sub	r8,130624
8000a1ac:	70 08       	ld.w	r8,r8[0x0]
8000a1ae:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a1b2:	5c 58       	castu.b	r8
8000a1b4:	c2 b0       	breq	8000a20a <udd_ep_interrupt+0x152>
8000a1b6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a1ba:	a3 68       	lsl	r8,0x2
8000a1bc:	e0 38 fe d0 	sub	r8,130768
8000a1c0:	70 08       	ld.w	r8,r8[0x0]
8000a1c2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8000a1c6:	5c 58       	castu.b	r8
8000a1c8:	c2 10       	breq	8000a20a <udd_ep_interrupt+0x152>
				udd_disable_in_send_interrupt(ep);
8000a1ca:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a1ce:	a3 68       	lsl	r8,0x2
8000a1d0:	e0 38 fd e0 	sub	r8,130528
8000a1d4:	30 19       	mov	r9,1
8000a1d6:	91 09       	st.w	r8[0x0],r9
				// One bank is free then send a ZLP
				udd_ack_in_send(ep);
8000a1d8:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a1dc:	a3 68       	lsl	r8,0x2
8000a1de:	e0 38 fe a0 	sub	r8,130720
8000a1e2:	30 19       	mov	r9,1
8000a1e4:	91 09       	st.w	r8[0x0],r9
				udd_ack_fifocon(ep);
8000a1e6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a1ea:	a3 68       	lsl	r8,0x2
8000a1ec:	e0 38 fd e0 	sub	r8,130528
8000a1f0:	e0 69 40 00 	mov	r9,16384
8000a1f4:	91 09       	st.w	r8[0x0],r9
				udd_ep_finish_job(ptr_job, false, ep);
8000a1f6:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a1fa:	10 9a       	mov	r10,r8
8000a1fc:	30 0b       	mov	r11,0
8000a1fe:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a202:	f0 1f 00 32 	mcall	8000a2c8 <udd_ep_interrupt+0x210>
				return true;
8000a206:	30 18       	mov	r8,1
8000a208:	c5 88       	rjmp	8000a2b8 <udd_ep_interrupt+0x200>
			}
			if (Is_udd_bank_interrupt_enabled(ep) && (0 == udd_nb_busy_bank(ep))) {
8000a20a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a20e:	a3 68       	lsl	r8,0x2
8000a210:	e0 38 fe 40 	sub	r8,130624
8000a214:	70 08       	ld.w	r8,r8[0x0]
8000a216:	e2 18 10 00 	andl	r8,0x1000,COH
8000a21a:	c4 20       	breq	8000a29e <udd_ep_interrupt+0x1e6>
8000a21c:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a220:	a3 68       	lsl	r8,0x2
8000a222:	e0 38 fe d0 	sub	r8,130768
8000a226:	70 08       	ld.w	r8,r8[0x0]
8000a228:	e2 18 30 00 	andl	r8,0x3000,COH
8000a22c:	ad 88       	lsr	r8,0xc
8000a22e:	c3 81       	brne	8000a29e <udd_ep_interrupt+0x1e6>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
8000a230:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a234:	a3 68       	lsl	r8,0x2
8000a236:	e0 38 fd e0 	sub	r8,130528
8000a23a:	e0 69 10 00 	mov	r9,4096
8000a23e:	91 09       	st.w	r8[0x0],r9
				udd_disable_endpoint_interrupt(ep);
8000a240:	fe 68 00 00 	mov	r8,-131072
8000a244:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a248:	e0 6a 10 00 	mov	r10,4096
8000a24c:	f4 09 09 49 	lsl	r9,r10,r9
8000a250:	91 59       	st.w	r8[0x14],r9

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
8000a252:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a256:	72 08       	ld.w	r8,r9[0x0]
8000a258:	30 0a       	mov	r10,0
8000a25a:	f1 da d3 a1 	bfins	r8,r10,0x1d,0x1
8000a25e:	93 08       	st.w	r9[0x0],r8
				udd_disable_endpoint_bank_autoswitch(ep);
8000a260:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a264:	a3 68       	lsl	r8,0x2
8000a266:	e0 38 ff 00 	sub	r8,130816
8000a26a:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a26e:	a3 69       	lsl	r9,0x2
8000a270:	e0 39 ff 00 	sub	r9,130816
8000a274:	72 09       	ld.w	r9,r9[0x0]
8000a276:	a9 d9       	cbr	r9,0x9
8000a278:	91 09       	st.w	r8[0x0],r9
				udd_enable_stall_handshake(ep);
8000a27a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a27e:	a3 68       	lsl	r8,0x2
8000a280:	e0 38 fe 10 	sub	r8,130576
8000a284:	e8 69 00 00 	mov	r9,524288
8000a288:	91 09       	st.w	r8[0x0],r9
				udd_reset_data_toggle(ep);
8000a28a:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a28e:	a3 68       	lsl	r8,0x2
8000a290:	e0 38 fe 10 	sub	r8,130576
8000a294:	e4 69 00 00 	mov	r9,262144
8000a298:	91 09       	st.w	r8[0x0],r9
				return true;
8000a29a:	30 18       	mov	r8,1
8000a29c:	c0 e8       	rjmp	8000a2b8 <udd_ep_interrupt+0x200>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
8000a29e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000a2a2:	2f f8       	sub	r8,-1
8000a2a4:	ef 68 ff f7 	st.b	r7[-9],r8
8000a2a8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000a2ac:	30 38       	mov	r8,3
8000a2ae:	f0 09 18 00 	cp.b	r9,r8
8000a2b2:	fe 98 ff 0b 	brls	8000a0c8 <udd_ep_interrupt+0x10>
				udd_reset_data_toggle(ep);
				return true;
			}
		}
	}
	return false;
8000a2b6:	30 08       	mov	r8,0
}
8000a2b8:	10 9c       	mov	r12,r8
8000a2ba:	2f dd       	sub	sp,-12
8000a2bc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a2c0:	00 00       	add	r0,r0
8000a2c2:	06 f4       	st.b	--r3,r4
8000a2c4:	80 00       	ld.sh	r0,r0[0x0]
8000a2c6:	9e 68       	ld.sh	r8,pc[0xc]
8000a2c8:	80 00       	ld.sh	r0,r0[0x0]
8000a2ca:	9d e4       	st.w	lr[0x38],r4

8000a2cc <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8000a2cc:	e0 7d 00 00 	mov	sp,65536

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
  mtsr    AVR32_EVBA, r0
8000a2d0:	48 e0       	lddpc	r0,8000a308 <udata_clear_loop_end+0x6>
8000a2d2:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
8000a2d6:	d5 53       	csrf	0x15
  lda.w   r1, _edata
8000a2d8:	30 80       	mov	r0,8
  cp      r0, r1
8000a2da:	e0 61 05 e0 	mov	r1,1504
  brhs    idata_load_loop_end
  lda.w   r2, _data_lma
8000a2de:	02 30       	cp.w	r0,r1
idata_load_loop:
  ld.d    r4, r2++
8000a2e0:	c0 62       	brcc	8000a2ec <idata_load_loop_end>
  st.d    r0++, r4
8000a2e2:	48 b2       	lddpc	r2,8000a30c <udata_clear_loop_end+0xa>

8000a2e4 <idata_load_loop>:
  cp      r0, r1
8000a2e4:	a5 05       	ld.d	r4,r2++
  brlo    idata_load_loop
8000a2e6:	a1 24       	st.d	r0++,r4
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8000a2e8:	02 30       	cp.w	r0,r1
  lda.w   r1, _end
8000a2ea:	cf d3       	brcs	8000a2e4 <idata_load_loop>

8000a2ec <idata_load_loop_end>:
  cp      r0, r1
8000a2ec:	e0 60 05 e0 	mov	r0,1504
  brhs    udata_clear_loop_end
  mov     r2, 0
8000a2f0:	e0 61 12 58 	mov	r1,4696
  mov     r3, 0
udata_clear_loop:
  st.d    r0++, r2
8000a2f4:	02 30       	cp.w	r0,r1
  cp      r0, r1
8000a2f6:	c0 62       	brcc	8000a302 <udata_clear_loop_end>
  brlo    udata_clear_loop
8000a2f8:	30 02       	mov	r2,0
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8000a2fa:	30 03       	mov	r3,0

8000a2fc <udata_clear_loop>:
8000a2fc:	a1 22       	st.d	r0++,r2
8000a2fe:	02 30       	cp.w	r0,r1
8000a300:	cf e3       	brcs	8000a2fc <udata_clear_loop>

8000a302 <udata_clear_loop_end>:
8000a302:	fe cf d3 06 	sub	pc,pc,-11514
8000a306:	d7 03       	nop
8000a308:	80 01       	ld.sh	r1,r0[0x0]
8000a30a:	34 00       	mov	r0,64
8000a30c:	80 01       	ld.sh	r1,r0[0x0]
8000a30e:	3d 20       	mov	r0,-46

8000a310 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8000a310:	eb cd 40 80 	pushm	r7,lr
8000a314:	1a 97       	mov	r7,sp
8000a316:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000a318:	e1 b8 00 00 	mfsr	r8,0x0
8000a31c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8000a320:	d3 03       	ssrf	0x10

	return flags;
8000a322:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000a326:	10 9c       	mov	r12,r8
8000a328:	2f fd       	sub	sp,-4
8000a32a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a32e <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8000a32e:	eb cd 40 80 	pushm	r7,lr
8000a332:	1a 97       	mov	r7,sp
8000a334:	20 1d       	sub	sp,4
8000a336:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000a33a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a33e:	e6 18 00 01 	andh	r8,0x1,COH
8000a342:	5f 08       	sreq	r8
8000a344:	5c 58       	castu.b	r8
}
8000a346:	10 9c       	mov	r12,r8
8000a348:	2f fd       	sub	sp,-4
8000a34a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a34e:	d7 03       	nop

8000a350 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
8000a350:	eb cd 40 80 	pushm	r7,lr
8000a354:	1a 97       	mov	r7,sp
8000a356:	20 1d       	sub	sp,4
8000a358:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000a35c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000a360:	f0 1f 00 05 	mcall	8000a374 <cpu_irq_restore+0x24>
8000a364:	18 98       	mov	r8,r12
8000a366:	58 08       	cp.w	r8,0
8000a368:	c0 20       	breq	8000a36c <cpu_irq_restore+0x1c>
      cpu_irq_enable();
8000a36a:	d5 03       	csrf	0x10
   }

	barrier();
}
8000a36c:	2f fd       	sub	sp,-4
8000a36e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a372:	00 00       	add	r0,r0
8000a374:	80 00       	ld.sh	r0,r0[0x0]
8000a376:	a3 2e       	st.d	r1++,lr

8000a378 <osc_enable>:
#include <stdbool.h>
#include <stdint.h>
#include <avr32/io.h>

static inline void osc_enable(uint8_t id)
{
8000a378:	eb cd 40 80 	pushm	r7,lr
8000a37c:	1a 97       	mov	r7,sp
8000a37e:	20 3d       	sub	sp,12
8000a380:	18 98       	mov	r8,r12
8000a382:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint32_t   oscctrl;

	flags = cpu_irq_save();
8000a386:	f0 1f 00 1f 	mcall	8000a400 <osc_enable+0x88>
8000a38a:	18 98       	mov	r8,r12
8000a38c:	ef 48 ff f8 	st.w	r7[-8],r8

	switch (id) {
8000a390:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000a394:	58 08       	cp.w	r8,0
8000a396:	c0 40       	breq	8000a39e <osc_enable+0x26>
8000a398:	58 28       	cp.w	r8,2
8000a39a:	c1 90       	breq	8000a3cc <osc_enable+0x54>
8000a39c:	c2 b8       	rjmp	8000a3f2 <osc_enable+0x7a>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		oscctrl = OSC0_STARTUP_VALUE <<
8000a39e:	e0 68 03 00 	mov	r8,768
8000a3a2:	ef 48 ff fc 	st.w	r7[-4],r8
				AVR32_PM_OSCCTRL0_STARTUP_OFFSET;
		oscctrl |= OSC0_MODE_VALUE << AVR32_PM_OSCCTRL0_MODE_OFFSET;
8000a3a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3aa:	e8 18 00 07 	orl	r8,0x7
8000a3ae:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl0 = oscctrl;
8000a3b2:	fe 78 0c 00 	mov	r8,-62464
8000a3b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a3ba:	91 a9       	st.w	r8[0x28],r9
		AVR32_PM.mcctrl |= 1U << AVR32_PM_MCCTRL_OSC0EN;
8000a3bc:	fe 78 0c 00 	mov	r8,-62464
8000a3c0:	fe 79 0c 00 	mov	r9,-62464
8000a3c4:	72 09       	ld.w	r9,r9[0x0]
8000a3c6:	a3 a9       	sbr	r9,0x2
8000a3c8:	91 09       	st.w	r8[0x0],r9
		break;
8000a3ca:	c1 48       	rjmp	8000a3f2 <osc_enable+0x7a>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		oscctrl = OSC32_STARTUP_VALUE
8000a3cc:	e2 68 00 00 	mov	r8,131072
8000a3d0:	ef 48 ff fc 	st.w	r7[-4],r8
				<< AVR32_PM_OSCCTRL32_STARTUP_OFFSET;
		oscctrl |= OSC32_MODE_VALUE << AVR32_PM_OSCCTRL32_MODE_OFFSET;
8000a3d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3d8:	a9 a8       	sbr	r8,0x8
8000a3da:	ef 48 ff fc 	st.w	r7[-4],r8
		oscctrl |= 1 << AVR32_PM_OSCCTRL32_OSC32EN_OFFSET;
8000a3de:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a3e2:	a1 a8       	sbr	r8,0x0
8000a3e4:	ef 48 ff fc 	st.w	r7[-4],r8
		AVR32_PM.oscctrl32 = oscctrl;
8000a3e8:	fe 78 0c 00 	mov	r8,-62464
8000a3ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a3f0:	91 c9       	st.w	r8[0x30],r9
	default:
		/* unhandled_case(id); */
		break;
	}

	cpu_irq_restore(flags);
8000a3f2:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a3f6:	f0 1f 00 04 	mcall	8000a404 <osc_enable+0x8c>
}
8000a3fa:	2f dd       	sub	sp,-12
8000a3fc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a400:	80 00       	ld.sh	r0,r0[0x0]
8000a402:	a3 10       	ld.d	r0,--r1
8000a404:	80 00       	ld.sh	r0,r0[0x0]
8000a406:	a3 50       	asr	r0,0x3

8000a408 <osc_is_ready>:
	}
	cpu_irq_restore(flags);
}

static inline bool osc_is_ready(uint8_t id)
{
8000a408:	eb cd 40 80 	pushm	r7,lr
8000a40c:	1a 97       	mov	r7,sp
8000a40e:	20 1d       	sub	sp,4
8000a410:	18 98       	mov	r8,r12
8000a412:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000a416:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a41a:	58 08       	cp.w	r8,0
8000a41c:	c0 40       	breq	8000a424 <osc_is_ready+0x1c>
8000a41e:	58 28       	cp.w	r8,2
8000a420:	c0 a0       	breq	8000a434 <osc_is_ready+0x2c>
8000a422:	c1 18       	rjmp	8000a444 <osc_is_ready+0x3c>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC0RDY));
8000a424:	fe 78 0c 00 	mov	r8,-62464
8000a428:	71 58       	ld.w	r8,r8[0x54]
8000a42a:	e2 18 00 80 	andl	r8,0x80,COH
8000a42e:	5f 18       	srne	r8
8000a430:	5c 58       	castu.b	r8
8000a432:	c0 a8       	rjmp	8000a446 <osc_is_ready+0x3e>
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_OSC32RDY));
8000a434:	fe 78 0c 00 	mov	r8,-62464
8000a438:	71 58       	ld.w	r8,r8[0x54]
8000a43a:	e2 18 02 00 	andl	r8,0x200,COH
8000a43e:	5f 18       	srne	r8
8000a440:	5c 58       	castu.b	r8
8000a442:	c0 28       	rjmp	8000a446 <osc_is_ready+0x3e>
#endif

	default:
		/* unhandled_case(id); */
		return false;
8000a444:	30 08       	mov	r8,0
	}
}
8000a446:	10 9c       	mov	r12,r8
8000a448:	2f fd       	sub	sp,-4
8000a44a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a44e <osc_get_rate>:

static inline uint32_t osc_get_rate(uint8_t id)
{
8000a44e:	eb cd 40 80 	pushm	r7,lr
8000a452:	1a 97       	mov	r7,sp
8000a454:	20 1d       	sub	sp,4
8000a456:	18 98       	mov	r8,r12
8000a458:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000a45c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a460:	58 08       	cp.w	r8,0
8000a462:	c0 40       	breq	8000a46a <osc_get_rate+0x1c>
8000a464:	58 28       	cp.w	r8,2
8000a466:	c0 70       	breq	8000a474 <osc_get_rate+0x26>
8000a468:	c0 98       	rjmp	8000a47a <osc_get_rate+0x2c>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000a46a:	e0 68 1b 00 	mov	r8,6912
8000a46e:	ea 18 00 b7 	orh	r8,0xb7
8000a472:	c0 58       	rjmp	8000a47c <osc_get_rate+0x2e>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000a474:	e0 68 80 00 	mov	r8,32768
8000a478:	c0 28       	rjmp	8000a47c <osc_get_rate+0x2e>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000a47a:	30 08       	mov	r8,0
	}
}
8000a47c:	10 9c       	mov	r12,r8
8000a47e:	2f fd       	sub	sp,-4
8000a480:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a484 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8000a484:	eb cd 40 80 	pushm	r7,lr
8000a488:	1a 97       	mov	r7,sp
8000a48a:	20 1d       	sub	sp,4
8000a48c:	18 98       	mov	r8,r12
8000a48e:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8000a492:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000a496:	10 9c       	mov	r12,r8
8000a498:	f0 1f 00 05 	mcall	8000a4ac <osc_wait_ready+0x28>
8000a49c:	18 98       	mov	r8,r12
8000a49e:	ec 18 00 01 	eorl	r8,0x1
8000a4a2:	5c 58       	castu.b	r8
8000a4a4:	cf 71       	brne	8000a492 <osc_wait_ready+0xe>
		/* Do nothing */
	}
}
8000a4a6:	2f fd       	sub	sp,-4
8000a4a8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a4ac:	80 00       	ld.sh	r0,r0[0x0]
8000a4ae:	a4 08       	st.h	r2[0x0],r8

8000a4b0 <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8000a4b0:	eb cd 40 80 	pushm	r7,lr
8000a4b4:	1a 97       	mov	r7,sp
8000a4b6:	20 2d       	sub	sp,8
8000a4b8:	ef 4c ff fc 	st.w	r7[-4],r12
8000a4bc:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_PM_PLL0_PLLOPT + option);
8000a4c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a4c4:	70 09       	ld.w	r9,r8[0x0]
8000a4c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a4ca:	2f e8       	sub	r8,-2
8000a4cc:	30 1a       	mov	r10,1
8000a4ce:	f4 08 09 48 	lsl	r8,r10,r8
8000a4d2:	10 49       	or	r9,r8
8000a4d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a4d8:	91 09       	st.w	r8[0x0],r9
}
8000a4da:	2f ed       	sub	sp,-8
8000a4dc:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a4e0 <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8000a4e0:	eb cd 40 80 	pushm	r7,lr
8000a4e4:	1a 97       	mov	r7,sp
8000a4e6:	20 5d       	sub	sp,20
8000a4e8:	ef 4c ff f8 	st.w	r7[-8],r12
8000a4ec:	ef 4b ff f4 	st.w	r7[-12],r11
8000a4f0:	ef 4a ff f0 	st.w	r7[-16],r10
8000a4f4:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8000a4f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a4fc:	5c 58       	castu.b	r8
8000a4fe:	10 9c       	mov	r12,r8
8000a500:	f0 1f 00 2e 	mcall	8000a5b8 <pll_config_init+0xd8>
8000a504:	18 99       	mov	r9,r12
8000a506:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a50a:	f2 08 02 48 	mul	r8,r9,r8
8000a50e:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8000a512:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a516:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000a51a:	f0 09 0d 08 	divu	r8,r8,r9
8000a51e:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8000a522:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a526:	30 09       	mov	r9,0
8000a528:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
8000a52a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a52e:	e0 69 b3 ff 	mov	r9,46079
8000a532:	ea 19 04 c4 	orh	r9,0x4c4
8000a536:	12 38       	cp.w	r8,r9
8000a538:	e0 8b 00 16 	brhi	8000a564 <pll_config_init+0x84>
8000a53c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a540:	58 88       	cp.w	r8,8
8000a542:	e0 8b 00 11 	brhi	8000a564 <pll_config_init+0x84>
		mul *= 2;
8000a546:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a54a:	a1 78       	lsl	r8,0x1
8000a54c:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8000a550:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a554:	a1 78       	lsl	r8,0x1
8000a556:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
8000a55a:	30 1b       	mov	r11,1
8000a55c:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a560:	f0 1f 00 17 	mcall	8000a5bc <pll_config_init+0xdc>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8000a564:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a568:	e0 69 fe 7f 	mov	r9,65151
8000a56c:	ea 19 0a 21 	orh	r9,0xa21
8000a570:	12 38       	cp.w	r8,r9
8000a572:	e0 8b 00 07 	brhi	8000a580 <pll_config_init+0xa0>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8000a576:	30 0b       	mov	r11,0
8000a578:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a57c:	f0 1f 00 10 	mcall	8000a5bc <pll_config_init+0xdc>

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000a580:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a584:	70 09       	ld.w	r9,r8[0x0]
8000a586:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000a58a:	20 18       	sub	r8,1
8000a58c:	f0 0a 15 10 	lsl	r10,r8,0x10
			| (div << AVR32_PM_PLL0_PLLDIV)
8000a590:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a594:	a9 68       	lsl	r8,0x8
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
8000a596:	10 4a       	or	r10,r8
			| (src << AVR32_PM_PLL0_PLLOSC);
8000a598:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a59c:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert((mul > 2) && (mul <= 16));
	Assert((div > 0) && (div <= 15));

	cfg->ctrl |= ((mul - 1) << AVR32_PM_PLL0_PLLMUL)
8000a59e:	f5 e8 10 08 	or	r8,r10,r8
8000a5a2:	f3 e8 10 08 	or	r8,r9,r8
8000a5a6:	10 99       	mov	r9,r8
8000a5a8:	ea 19 3f 00 	orh	r9,0x3f00
8000a5ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a5b0:	91 09       	st.w	r8[0x0],r9
			| (div << AVR32_PM_PLL0_PLLDIV)
			| (PLL_MAX_STARTUP_CYCLES << AVR32_PM_PLL0_PLLCOUNT)
			| (src << AVR32_PM_PLL0_PLLOSC);
}
8000a5b2:	2f bd       	sub	sp,-20
8000a5b4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a5b8:	80 00       	ld.sh	r0,r0[0x0]
8000a5ba:	a4 4e       	st.h	r2[0x8],lr
8000a5bc:	80 00       	ld.sh	r0,r0[0x0]
8000a5be:	a4 b0       	st.b	r2[0x3],r0

8000a5c0 <pll_enable>:
	AVR32_PM.pll[pll_id] = cfg->ctrl;
}

static inline void pll_enable(const struct pll_config *cfg,
		unsigned int pll_id)
{
8000a5c0:	eb cd 40 80 	pushm	r7,lr
8000a5c4:	1a 97       	mov	r7,sp
8000a5c6:	20 2d       	sub	sp,8
8000a5c8:	ef 4c ff fc 	st.w	r7[-4],r12
8000a5cc:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(pll_id < NR_PLLS);

	AVR32_PM.pll[pll_id] = cfg->ctrl | (1U << AVR32_PM_PLL0_PLLEN);
8000a5d0:	fe 78 0c 00 	mov	r8,-62464
8000a5d4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a5d8:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a5dc:	74 0a       	ld.w	r10,r10[0x0]
8000a5de:	a1 aa       	sbr	r10,0x0
8000a5e0:	2f 89       	sub	r9,-8
8000a5e2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000a5e6:	2f ed       	sub	sp,-8
8000a5e8:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a5ec <pll_is_locked>:

	AVR32_PM.pll[pll_id] = 0;
}

static inline bool pll_is_locked(unsigned int pll_id)
{
8000a5ec:	eb cd 40 80 	pushm	r7,lr
8000a5f0:	1a 97       	mov	r7,sp
8000a5f2:	20 1d       	sub	sp,4
8000a5f4:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_PM.poscsr & (1U << (AVR32_PM_POSCSR_LOCK0 + pll_id)));
8000a5f8:	fe 78 0c 00 	mov	r8,-62464
8000a5fc:	71 59       	ld.w	r9,r8[0x54]
8000a5fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a602:	30 1a       	mov	r10,1
8000a604:	f4 08 09 48 	lsl	r8,r10,r8
8000a608:	f3 e8 00 08 	and	r8,r9,r8
8000a60c:	5f 18       	srne	r8
8000a60e:	5c 58       	castu.b	r8
}
8000a610:	10 9c       	mov	r12,r8
8000a612:	2f fd       	sub	sp,-4
8000a614:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a618 <pll_enable_source>:

static inline void pll_enable_source(enum pll_source src)
{
8000a618:	eb cd 40 80 	pushm	r7,lr
8000a61c:	1a 97       	mov	r7,sp
8000a61e:	20 1d       	sub	sp,4
8000a620:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000a624:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a628:	58 08       	cp.w	r8,0
8000a62a:	c0 40       	breq	8000a632 <pll_enable_source+0x1a>
8000a62c:	58 18       	cp.w	r8,1
8000a62e:	c1 10       	breq	8000a650 <pll_enable_source+0x38>
8000a630:	c2 08       	rjmp	8000a670 <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000a632:	30 0c       	mov	r12,0
8000a634:	f0 1f 00 11 	mcall	8000a678 <pll_enable_source+0x60>
8000a638:	18 98       	mov	r8,r12
8000a63a:	ec 18 00 01 	eorl	r8,0x1
8000a63e:	5c 58       	castu.b	r8
8000a640:	c1 70       	breq	8000a66e <pll_enable_source+0x56>
			osc_enable(OSC_ID_OSC0);
8000a642:	30 0c       	mov	r12,0
8000a644:	f0 1f 00 0e 	mcall	8000a67c <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC0);
8000a648:	30 0c       	mov	r12,0
8000a64a:	f0 1f 00 0e 	mcall	8000a680 <pll_enable_source+0x68>
		}
		break;
8000a64e:	c1 18       	rjmp	8000a670 <pll_enable_source+0x58>

	case PLL_SRC_OSC1:
		if (!osc_is_ready(OSC_ID_OSC1)) {
8000a650:	30 1c       	mov	r12,1
8000a652:	f0 1f 00 0a 	mcall	8000a678 <pll_enable_source+0x60>
8000a656:	18 98       	mov	r8,r12
8000a658:	ec 18 00 01 	eorl	r8,0x1
8000a65c:	5c 58       	castu.b	r8
8000a65e:	c0 90       	breq	8000a670 <pll_enable_source+0x58>
			osc_enable(OSC_ID_OSC1);
8000a660:	30 1c       	mov	r12,1
8000a662:	f0 1f 00 07 	mcall	8000a67c <pll_enable_source+0x64>
			osc_wait_ready(OSC_ID_OSC1);
8000a666:	30 1c       	mov	r12,1
8000a668:	f0 1f 00 06 	mcall	8000a680 <pll_enable_source+0x68>
8000a66c:	c0 28       	rjmp	8000a670 <pll_enable_source+0x58>
	case PLL_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000a66e:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000a670:	2f fd       	sub	sp,-4
8000a672:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a676:	00 00       	add	r0,r0
8000a678:	80 00       	ld.sh	r0,r0[0x0]
8000a67a:	a4 08       	st.h	r2[0x0],r8
8000a67c:	80 00       	ld.sh	r0,r0[0x0]
8000a67e:	a3 78       	lsl	r8,0x3
8000a680:	80 00       	ld.sh	r0,r0[0x0]
8000a682:	a4 84       	st.b	r2[0x0],r4

8000a684 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int pll_id)
{
8000a684:	eb cd 40 80 	pushm	r7,lr
8000a688:	1a 97       	mov	r7,sp
8000a68a:	20 2d       	sub	sp,8
8000a68c:	ef 4c ff f8 	st.w	r7[-8],r12
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
8000a690:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a694:	f0 1f 00 15 	mcall	8000a6e8 <pll_enable_config_defaults+0x64>
8000a698:	18 98       	mov	r8,r12
8000a69a:	58 08       	cp.w	r8,0
8000a69c:	c2 11       	brne	8000a6de <pll_enable_config_defaults+0x5a>
		return; // Pll already running
	}
	switch (pll_id) {
8000a69e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a6a2:	58 08       	cp.w	r8,0
8000a6a4:	c0 c1       	brne	8000a6bc <pll_enable_config_defaults+0x38>
#ifdef CONFIG_PLL0_SOURCE
	case 0:
		pll_enable_source(CONFIG_PLL0_SOURCE);
8000a6a6:	30 0c       	mov	r12,0
8000a6a8:	f0 1f 00 11 	mcall	8000a6ec <pll_enable_config_defaults+0x68>
		pll_config_init(&pllcfg,
8000a6ac:	ee c8 00 04 	sub	r8,r7,4
8000a6b0:	30 89       	mov	r9,8
8000a6b2:	30 2a       	mov	r10,2
8000a6b4:	30 0b       	mov	r11,0
8000a6b6:	10 9c       	mov	r12,r8
8000a6b8:	f0 1f 00 0e 	mcall	8000a6f0 <pll_enable_config_defaults+0x6c>
#endif
	default:
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
8000a6bc:	ee c8 00 04 	sub	r8,r7,4
8000a6c0:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a6c4:	10 9c       	mov	r12,r8
8000a6c6:	f0 1f 00 0c 	mcall	8000a6f4 <pll_enable_config_defaults+0x70>
	while (!pll_is_locked(pll_id));
8000a6ca:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a6ce:	f0 1f 00 07 	mcall	8000a6e8 <pll_enable_config_defaults+0x64>
8000a6d2:	18 98       	mov	r8,r12
8000a6d4:	ec 18 00 01 	eorl	r8,0x1
8000a6d8:	5c 58       	castu.b	r8
8000a6da:	cf 81       	brne	8000a6ca <pll_enable_config_defaults+0x46>
8000a6dc:	c0 28       	rjmp	8000a6e0 <pll_enable_config_defaults+0x5c>
static inline void pll_enable_config_defaults(unsigned int pll_id)
{
	struct pll_config pllcfg;

	if (pll_is_locked(pll_id)) {
		return; // Pll already running
8000a6de:	d7 03       	nop
		Assert(false);
		break;
	}
	pll_enable(&pllcfg, pll_id);
	while (!pll_is_locked(pll_id));
}
8000a6e0:	2f ed       	sub	sp,-8
8000a6e2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a6e6:	00 00       	add	r0,r0
8000a6e8:	80 00       	ld.sh	r0,r0[0x0]
8000a6ea:	a5 ec       	*unknown*
8000a6ec:	80 00       	ld.sh	r0,r0[0x0]
8000a6ee:	a6 18       	st.h	r3[0x2],r8
8000a6f0:	80 00       	ld.sh	r0,r0[0x0]
8000a6f2:	a4 e0       	st.b	r2[0x6],r0
8000a6f4:	80 00       	ld.sh	r0,r0[0x0]
8000a6f6:	a5 c0       	cbr	r0,0x4

8000a6f8 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
8000a6f8:	eb cd 40 80 	pushm	r7,lr
8000a6fc:	1a 97       	mov	r7,sp
8000a6fe:	20 2d       	sub	sp,8
8000a700:	ef 4c ff fc 	st.w	r7[-4],r12
8000a704:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
8000a708:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a70c:	30 09       	mov	r9,0
8000a70e:	91 09       	st.w	r8[0x0],r9
}
8000a710:	2f ed       	sub	sp,-8
8000a712:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a716 <genclk_config_set_source>:
	AVR32_PM.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8000a716:	eb cd 40 80 	pushm	r7,lr
8000a71a:	1a 97       	mov	r7,sp
8000a71c:	20 3d       	sub	sp,12
8000a71e:	ef 4c ff f8 	st.w	r7[-8],r12
8000a722:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t mask;

	mask = AVR32_PM_GCCTRL_OSCSEL_MASK | AVR32_PM_GCCTRL_PLLSEL_MASK;
8000a726:	30 38       	mov	r8,3
8000a728:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(!(src & ~mask));

	cfg->ctrl = (cfg->ctrl & ~mask) | (src << AVR32_PM_GCCTRL_OSCSEL);
8000a72c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a730:	70 09       	ld.w	r9,r8[0x0]
8000a732:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a736:	5c d8       	com	r8
8000a738:	10 69       	and	r9,r8
8000a73a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a73e:	10 49       	or	r9,r8
8000a740:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a744:	91 09       	st.w	r8[0x0],r9
}
8000a746:	2f dd       	sub	sp,-12
8000a748:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a74c <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8000a74c:	eb cd 40 80 	pushm	r7,lr
8000a750:	1a 97       	mov	r7,sp
8000a752:	20 2d       	sub	sp,8
8000a754:	ef 4c ff fc 	st.w	r7[-4],r12
8000a758:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert((divider > 0) && (divider <= GENCLK_DIV_MAX));

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_PM_GCCTRL_DIVEN_MASK | AVR32_PM_GCCTRL_DIV_MASK);
8000a75c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a760:	70 08       	ld.w	r8,r8[0x0]
8000a762:	10 99       	mov	r9,r8
8000a764:	e0 19 00 ef 	andl	r9,0xef
8000a768:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a76c:	91 09       	st.w	r8[0x0],r9

	if (divider > 1) {
8000a76e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a772:	58 18       	cp.w	r8,1
8000a774:	e0 88 00 16 	brls	8000a7a0 <genclk_config_set_divider+0x54>
		cfg->ctrl |= 1U << AVR32_PM_GCCTRL_DIVEN;
8000a778:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a77c:	70 08       	ld.w	r8,r8[0x0]
8000a77e:	10 99       	mov	r9,r8
8000a780:	a5 a9       	sbr	r9,0x4
8000a782:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a786:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= ((divider >> 1) - 1) << AVR32_PM_GCCTRL_DIV;
8000a788:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a78c:	70 09       	ld.w	r9,r8[0x0]
8000a78e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a792:	a1 98       	lsr	r8,0x1
8000a794:	20 18       	sub	r8,1
8000a796:	a9 68       	lsl	r8,0x8
8000a798:	10 49       	or	r9,r8
8000a79a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a79e:	91 09       	st.w	r8[0x0],r9
	}
}
8000a7a0:	2f ed       	sub	sp,-8
8000a7a2:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a7a6 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8000a7a6:	eb cd 40 80 	pushm	r7,lr
8000a7aa:	1a 97       	mov	r7,sp
8000a7ac:	20 2d       	sub	sp,8
8000a7ae:	ef 4c ff fc 	st.w	r7[-4],r12
8000a7b2:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_PM.gcctrl[id] = cfg->ctrl | (1U << AVR32_PM_GCCTRL_CEN);
8000a7b6:	fe 78 0c 00 	mov	r8,-62464
8000a7ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000a7be:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a7c2:	74 0a       	ld.w	r10,r10[0x0]
8000a7c4:	a3 aa       	sbr	r10,0x2
8000a7c6:	2e 89       	sub	r9,-24
8000a7c8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8000a7cc:	2f ed       	sub	sp,-8
8000a7ce:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a7d2:	d7 03       	nop

8000a7d4 <genclk_enable_source>:
{
	AVR32_PM.gcctrl[id] = 0;
}

static inline void genclk_enable_source(enum genclk_source src)
{
8000a7d4:	eb cd 40 80 	pushm	r7,lr
8000a7d8:	1a 97       	mov	r7,sp
8000a7da:	20 1d       	sub	sp,4
8000a7dc:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8000a7e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a7e4:	58 08       	cp.w	r8,0
8000a7e6:	c0 40       	breq	8000a7ee <genclk_enable_source+0x1a>
8000a7e8:	58 28       	cp.w	r8,2
8000a7ea:	c1 10       	breq	8000a80c <genclk_enable_source+0x38>
8000a7ec:	c1 58       	rjmp	8000a816 <genclk_enable_source+0x42>
#ifdef BOARD_OSC0_HZ
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
8000a7ee:	30 0c       	mov	r12,0
8000a7f0:	f0 1f 00 0b 	mcall	8000a81c <genclk_enable_source+0x48>
8000a7f4:	18 98       	mov	r8,r12
8000a7f6:	ec 18 00 01 	eorl	r8,0x1
8000a7fa:	5c 58       	castu.b	r8
8000a7fc:	c0 c0       	breq	8000a814 <genclk_enable_source+0x40>
			osc_enable(OSC_ID_OSC0);
8000a7fe:	30 0c       	mov	r12,0
8000a800:	f0 1f 00 08 	mcall	8000a820 <genclk_enable_source+0x4c>
			osc_wait_ready(OSC_ID_OSC0);
8000a804:	30 0c       	mov	r12,0
8000a806:	f0 1f 00 08 	mcall	8000a824 <genclk_enable_source+0x50>
		}
		break;
8000a80a:	c0 68       	rjmp	8000a816 <genclk_enable_source+0x42>
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000a80c:	30 0c       	mov	r12,0
8000a80e:	f0 1f 00 07 	mcall	8000a828 <genclk_enable_source+0x54>
8000a812:	c0 28       	rjmp	8000a816 <genclk_enable_source+0x42>
	case GENCLK_SRC_OSC0:
		if (!osc_is_ready(OSC_ID_OSC0)) {
			osc_enable(OSC_ID_OSC0);
			osc_wait_ready(OSC_ID_OSC0);
		}
		break;
8000a814:	d7 03       	nop

	default:
		Assert(false);
		break;
	}
}
8000a816:	2f fd       	sub	sp,-4
8000a818:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a81c:	80 00       	ld.sh	r0,r0[0x0]
8000a81e:	a4 08       	st.h	r2[0x0],r8
8000a820:	80 00       	ld.sh	r0,r0[0x0]
8000a822:	a3 78       	lsl	r8,0x3
8000a824:	80 00       	ld.sh	r0,r0[0x0]
8000a826:	a4 84       	st.b	r2[0x0],r4
8000a828:	80 00       	ld.sh	r0,r0[0x0]
8000a82a:	a6 84       	st.b	r3[0x0],r4

8000a82c <genclk_enable_config>:
 * \param id      The ID of the generic clock.
 * \param src     The source clock of the generic clock.
 * \param divider The divider used to generate the generic clock.
 */
static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
8000a82c:	eb cd 40 80 	pushm	r7,lr
8000a830:	1a 97       	mov	r7,sp
8000a832:	20 4d       	sub	sp,16
8000a834:	ef 4c ff f8 	st.w	r7[-8],r12
8000a838:	ef 4b ff f4 	st.w	r7[-12],r11
8000a83c:	ef 4a ff f0 	st.w	r7[-16],r10
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, id);
8000a840:	ee c8 00 04 	sub	r8,r7,4
8000a844:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a848:	10 9c       	mov	r12,r8
8000a84a:	f0 1f 00 10 	mcall	8000a888 <genclk_enable_config+0x5c>
	genclk_enable_source(src);
8000a84e:	ee fc ff f4 	ld.w	r12,r7[-12]
8000a852:	f0 1f 00 0f 	mcall	8000a88c <genclk_enable_config+0x60>
	genclk_config_set_source(&gcfg, src);
8000a856:	ee c8 00 04 	sub	r8,r7,4
8000a85a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000a85e:	10 9c       	mov	r12,r8
8000a860:	f0 1f 00 0c 	mcall	8000a890 <genclk_enable_config+0x64>
	genclk_config_set_divider(&gcfg, divider);
8000a864:	ee c8 00 04 	sub	r8,r7,4
8000a868:	ee fb ff f0 	ld.w	r11,r7[-16]
8000a86c:	10 9c       	mov	r12,r8
8000a86e:	f0 1f 00 0a 	mcall	8000a894 <genclk_enable_config+0x68>
	genclk_enable(&gcfg, id);
8000a872:	ee c8 00 04 	sub	r8,r7,4
8000a876:	ee fb ff f8 	ld.w	r11,r7[-8]
8000a87a:	10 9c       	mov	r12,r8
8000a87c:	f0 1f 00 07 	mcall	8000a898 <genclk_enable_config+0x6c>
}
8000a880:	2f cd       	sub	sp,-16
8000a882:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a886:	00 00       	add	r0,r0
8000a888:	80 00       	ld.sh	r0,r0[0x0]
8000a88a:	a6 f8       	st.b	r3[0x7],r8
8000a88c:	80 00       	ld.sh	r0,r0[0x0]
8000a88e:	a7 d4       	cbr	r4,0x7
8000a890:	80 00       	ld.sh	r0,r0[0x0]
8000a892:	a7 16       	ld.d	r6,--r3
8000a894:	80 00       	ld.sh	r0,r0[0x0]
8000a896:	a7 4c       	asr	r12,0x6
8000a898:	80 00       	ld.sh	r0,r0[0x0]
8000a89a:	a7 a6       	sbr	r6,0x6

8000a89c <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000a89c:	eb cd 40 80 	pushm	r7,lr
8000a8a0:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000a8a2:	30 0c       	mov	r12,0
8000a8a4:	f0 1f 00 04 	mcall	8000a8b4 <sysclk_get_main_hz+0x18>
8000a8a8:	18 98       	mov	r8,r12
8000a8aa:	a3 78       	lsl	r8,0x3
8000a8ac:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000a8ae:	10 9c       	mov	r12,r8
8000a8b0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a8b4:	80 00       	ld.sh	r0,r0[0x0]
8000a8b6:	a4 4e       	st.h	r2[0x8],lr

8000a8b8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000a8b8:	eb cd 40 80 	pushm	r7,lr
8000a8bc:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000a8be:	f0 1f 00 04 	mcall	8000a8cc <sysclk_get_cpu_hz+0x14>
8000a8c2:	18 98       	mov	r8,r12
}
8000a8c4:	10 9c       	mov	r12,r8
8000a8c6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a8ca:	00 00       	add	r0,r0
8000a8cc:	80 00       	ld.sh	r0,r0[0x0]
8000a8ce:	a8 9c       	st.b	r4[0x1],r12

8000a8d0 <sysclk_enable_hsb_module>:
/**
 * \brief Enable a module clock derived from the HSB clock
 * \param index Index of the module clock in the HSBMASK register
 */
static inline void sysclk_enable_hsb_module(unsigned int index)
{
8000a8d0:	eb cd 40 80 	pushm	r7,lr
8000a8d4:	1a 97       	mov	r7,sp
8000a8d6:	20 1d       	sub	sp,4
8000a8d8:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_HSB, index);
8000a8dc:	ee fb ff fc 	ld.w	r11,r7[-4]
8000a8e0:	30 1c       	mov	r12,1
8000a8e2:	f0 1f 00 03 	mcall	8000a8ec <sysclk_enable_hsb_module+0x1c>
}
8000a8e6:	2f fd       	sub	sp,-4
8000a8e8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a8ec:	80 00       	ld.sh	r0,r0[0x0]
8000a8ee:	a9 c4       	cbr	r4,0x8

8000a8f0 <sysclk_set_prescalers>:
 * \param pba_shift The PBA clock will be divided by \f$2^{pba\_shift}\f$
 * \param pbb_shift The PBB clock will be divided by \f$2^{pbb\_shift}\f$
 */
static inline void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift)
{
8000a8f0:	eb cd 40 80 	pushm	r7,lr
8000a8f4:	1a 97       	mov	r7,sp
8000a8f6:	20 4d       	sub	sp,16
8000a8f8:	ef 4c ff f8 	st.w	r7[-8],r12
8000a8fc:	ef 4b ff f4 	st.w	r7[-12],r11
8000a900:	ef 4a ff f0 	st.w	r7[-16],r10
	uint32_t cksel = 0;
8000a904:	30 08       	mov	r8,0
8000a906:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
8000a90a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a90e:	58 08       	cp.w	r8,0
8000a910:	c0 70       	breq	8000a91e <sysclk_set_prescalers+0x2e>
		cksel = ((cpu_shift - 1) << AVR32_PM_CKSEL_CPUSEL)
8000a912:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a916:	20 18       	sub	r8,1
8000a918:	a7 b8       	sbr	r8,0x7
8000a91a:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_CKSEL_CPUDIV);

	if (pba_shift > 0)
8000a91e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a922:	58 08       	cp.w	r8,0
8000a924:	c0 d0       	breq	8000a93e <sysclk_set_prescalers+0x4e>
		cksel |= ((pba_shift - 1) << AVR32_PM_CKSEL_PBASEL)
8000a926:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a92a:	20 18       	sub	r8,1
8000a92c:	f0 09 15 10 	lsl	r9,r8,0x10
8000a930:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a934:	f3 e8 10 08 	or	r8,r9,r8
8000a938:	b7 b8       	sbr	r8,0x17
8000a93a:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_CKSEL_PBADIV);

	if (pbb_shift > 0)
8000a93e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a942:	58 08       	cp.w	r8,0
8000a944:	c0 d0       	breq	8000a95e <sysclk_set_prescalers+0x6e>
		cksel |= ((pbb_shift - 1) << AVR32_PM_CKSEL_PBBSEL)
8000a946:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a94a:	20 18       	sub	r8,1
8000a94c:	f0 09 15 18 	lsl	r9,r8,0x18
8000a950:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000a954:	f3 e8 10 08 	or	r8,r9,r8
8000a958:	bf b8       	sbr	r8,0x1f
8000a95a:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_CKSEL_PBBDIV);

	AVR32_PM.cksel = cksel;
8000a95e:	fe 78 0c 00 	mov	r8,-62464
8000a962:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a966:	91 19       	st.w	r8[0x4],r9
}
8000a968:	2f cd       	sub	sp,-16
8000a96a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a96e:	d7 03       	nop

8000a970 <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
static inline void sysclk_set_source(uint_fast8_t src)
{
8000a970:	eb cd 40 80 	pushm	r7,lr
8000a974:	1a 97       	mov	r7,sp
8000a976:	20 3d       	sub	sp,12
8000a978:	ef 4c ff f4 	st.w	r7[-12],r12
	irqflags_t flags;
	uint32_t   mcctrl;

	Assert(src <= SYSCLK_SRC_PLL0);

	flags = cpu_irq_save();
8000a97c:	f0 1f 00 10 	mcall	8000a9bc <sysclk_set_source+0x4c>
8000a980:	18 98       	mov	r8,r12
8000a982:	ef 48 ff f8 	st.w	r7[-8],r8
	mcctrl = AVR32_PM.mcctrl & ~AVR32_PM_MCCTRL_MCSEL_MASK;
8000a986:	fe 78 0c 00 	mov	r8,-62464
8000a98a:	70 08       	ld.w	r8,r8[0x0]
8000a98c:	e0 18 ff fc 	andl	r8,0xfffc
8000a990:	ef 48 ff fc 	st.w	r7[-4],r8
	mcctrl |= src << AVR32_PM_MCCTRL_MCSEL;
8000a994:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a998:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a99c:	f3 e8 10 08 	or	r8,r9,r8
8000a9a0:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.mcctrl = mcctrl;
8000a9a4:	fe 78 0c 00 	mov	r8,-62464
8000a9a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a9ac:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8000a9ae:	ee fc ff f8 	ld.w	r12,r7[-8]
8000a9b2:	f0 1f 00 04 	mcall	8000a9c0 <sysclk_set_source+0x50>
}
8000a9b6:	2f dd       	sub	sp,-12
8000a9b8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000a9bc:	80 00       	ld.sh	r0,r0[0x0]
8000a9be:	a3 10       	ld.d	r0,--r1
8000a9c0:	80 00       	ld.sh	r0,r0[0x0]
8000a9c2:	a3 50       	asr	r0,0x3

8000a9c4 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8000a9c4:	eb cd 40 80 	pushm	r7,lr
8000a9c8:	1a 97       	mov	r7,sp
8000a9ca:	20 4d       	sub	sp,16
8000a9cc:	ef 4c ff f4 	st.w	r7[-12],r12
8000a9d0:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8000a9d4:	f0 1f 00 17 	mcall	8000aa30 <sysclk_priv_enable_module+0x6c>
8000a9d8:	18 98       	mov	r8,r12
8000a9da:	ef 48 ff f8 	st.w	r7[-8],r8

	/*
	 * Poll MSKRDY before changing mask rather than after, as it's
	 * highly unlikely to actually be cleared at this point.
	 */
	while (!(AVR32_PM.poscsr & (1U << AVR32_PM_POSCSR_MSKRDY))) {
8000a9de:	fe 78 0c 00 	mov	r8,-62464
8000a9e2:	71 58       	ld.w	r8,r8[0x54]
8000a9e4:	e2 18 00 40 	andl	r8,0x40,COH
8000a9e8:	cf b0       	breq	8000a9de <sysclk_priv_enable_module+0x1a>
		/* Do nothing */
	}

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8000a9ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a9ee:	a3 68       	lsl	r8,0x2
8000a9f0:	e0 28 f3 f8 	sub	r8,62456
8000a9f4:	70 08       	ld.w	r8,r8[0x0]
8000a9f6:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8000a9fa:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000a9fe:	30 19       	mov	r9,1
8000aa00:	f2 08 09 48 	lsl	r8,r9,r8
8000aa04:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aa08:	f3 e8 10 08 	or	r8,r9,r8
8000aa0c:	ef 48 ff fc 	st.w	r7[-4],r8
	*(&AVR32_PM.cpumask + bus_id) = mask;
8000aa10:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000aa14:	a3 68       	lsl	r8,0x2
8000aa16:	e0 28 f3 f8 	sub	r8,62456
8000aa1a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aa1e:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8000aa20:	ee fc ff f8 	ld.w	r12,r7[-8]
8000aa24:	f0 1f 00 04 	mcall	8000aa34 <sysclk_priv_enable_module+0x70>
}
8000aa28:	2f cd       	sub	sp,-16
8000aa2a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aa2e:	00 00       	add	r0,r0
8000aa30:	80 00       	ld.sh	r0,r0[0x0]
8000aa32:	a3 10       	ld.d	r0,--r1
8000aa34:	80 00       	ld.sh	r0,r0[0x0]
8000aa36:	a3 50       	asr	r0,0x3

8000aa38 <sysclk_enable_pbb_module>:
/**
 * \brief Enable a module clock derived from the PBB clock
 * \param index Index of the module clock in the PBBMASK register
 */
void sysclk_enable_pbb_module(unsigned int index)
{
8000aa38:	eb cd 40 80 	pushm	r7,lr
8000aa3c:	1a 97       	mov	r7,sp
8000aa3e:	20 2d       	sub	sp,8
8000aa40:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	/* Enable the bridge if necessary */
	flags = cpu_irq_save();
8000aa44:	f0 1f 00 0f 	mcall	8000aa80 <sysclk_enable_pbb_module+0x48>
8000aa48:	18 98       	mov	r8,r12
8000aa4a:	ef 48 ff fc 	st.w	r7[-4],r8

	if (!sysclk_pbb_refcount)
8000aa4e:	48 e8       	lddpc	r8,8000aa84 <sysclk_enable_pbb_module+0x4c>
8000aa50:	11 88       	ld.ub	r8,r8[0x0]
8000aa52:	58 08       	cp.w	r8,0
8000aa54:	c0 41       	brne	8000aa5c <sysclk_enable_pbb_module+0x24>
		sysclk_enable_hsb_module(SYSCLK_PBB_BRIDGE);
8000aa56:	30 2c       	mov	r12,2
8000aa58:	f0 1f 00 0c 	mcall	8000aa88 <sysclk_enable_pbb_module+0x50>

	sysclk_pbb_refcount++;
8000aa5c:	48 a8       	lddpc	r8,8000aa84 <sysclk_enable_pbb_module+0x4c>
8000aa5e:	11 88       	ld.ub	r8,r8[0x0]
8000aa60:	2f f8       	sub	r8,-1
8000aa62:	5c 58       	castu.b	r8
8000aa64:	48 89       	lddpc	r9,8000aa84 <sysclk_enable_pbb_module+0x4c>
8000aa66:	b2 88       	st.b	r9[0x0],r8

	cpu_irq_restore(flags);
8000aa68:	ee fc ff fc 	ld.w	r12,r7[-4]
8000aa6c:	f0 1f 00 08 	mcall	8000aa8c <sysclk_enable_pbb_module+0x54>

	/* Enable the module */
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBB, index);
8000aa70:	ee fb ff f8 	ld.w	r11,r7[-8]
8000aa74:	30 3c       	mov	r12,3
8000aa76:	f0 1f 00 07 	mcall	8000aa90 <sysclk_enable_pbb_module+0x58>
}
8000aa7a:	2f ed       	sub	sp,-8
8000aa7c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aa80:	80 00       	ld.sh	r0,r0[0x0]
8000aa82:	a3 10       	ld.d	r0,--r1
8000aa84:	00 00       	add	r0,r0
8000aa86:	07 31       	ld.ub	r1,r3++
8000aa88:	80 00       	ld.sh	r0,r0[0x0]
8000aa8a:	a8 d0       	st.b	r4[0x5],r0
8000aa8c:	80 00       	ld.sh	r0,r0[0x0]
8000aa8e:	a3 50       	asr	r0,0x3
8000aa90:	80 00       	ld.sh	r0,r0[0x0]
8000aa92:	a9 c4       	cbr	r4,0x8

8000aa94 <sysclk_enable_usb>:
 * \pre The USB generic clock must be configured to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
8000aa94:	eb cd 40 80 	pushm	r7,lr
8000aa98:	1a 97       	mov	r7,sp
	sysclk_enable_pbb_module(SYSCLK_USBB_REGS);
8000aa9a:	30 1c       	mov	r12,1
8000aa9c:	f0 1f 00 06 	mcall	8000aab4 <sysclk_enable_usb+0x20>
	sysclk_enable_hsb_module(SYSCLK_USBB_DATA);
8000aaa0:	30 3c       	mov	r12,3
8000aaa2:	f0 1f 00 06 	mcall	8000aab8 <sysclk_enable_usb+0x24>
	genclk_enable_config(AVR32_PM_GCLK_USBB, CONFIG_USBCLK_SOURCE, CONFIG_USBCLK_DIV);
8000aaa6:	30 1a       	mov	r10,1
8000aaa8:	30 2b       	mov	r11,2
8000aaaa:	30 4c       	mov	r12,4
8000aaac:	f0 1f 00 04 	mcall	8000aabc <sysclk_enable_usb+0x28>
}
8000aab0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aab4:	80 00       	ld.sh	r0,r0[0x0]
8000aab6:	aa 38       	st.h	r5[0x6],r8
8000aab8:	80 00       	ld.sh	r0,r0[0x0]
8000aaba:	a8 d0       	st.b	r4[0x5],r0
8000aabc:	80 00       	ld.sh	r0,r0[0x0]
8000aabe:	a8 2c       	st.h	r4[0x4],r12

8000aac0 <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8000aac0:	eb cd 40 80 	pushm	r7,lr
8000aac4:	1a 97       	mov	r7,sp
	/* Set up system clock dividers if different from defaults */
	if ((CONFIG_SYSCLK_CPU_DIV > 0) || (CONFIG_SYSCLK_PBA_DIV > 0) ||
			(CONFIG_SYSCLK_PBB_DIV > 0)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_CPU_DIV,
8000aac6:	30 0a       	mov	r10,0
8000aac8:	30 2b       	mov	r11,2
8000aaca:	30 0c       	mov	r12,0
8000aacc:	f0 1f 00 08 	mcall	8000aaec <sysclk_init+0x2c>
		break;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0: {
		pll_enable_config_defaults(0);
8000aad0:	30 0c       	mov	r12,0
8000aad2:	f0 1f 00 08 	mcall	8000aaf0 <sysclk_init+0x30>
		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_cpu_hz());
8000aad6:	f0 1f 00 08 	mcall	8000aaf4 <sysclk_init+0x34>
8000aada:	18 98       	mov	r8,r12
8000aadc:	10 9c       	mov	r12,r8
8000aade:	f0 1f 00 07 	mcall	8000aaf8 <sysclk_init+0x38>
		sysclk_set_source(SYSCLK_SRC_PLL0);
8000aae2:	30 2c       	mov	r12,2
8000aae4:	f0 1f 00 06 	mcall	8000aafc <sysclk_init+0x3c>

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8000aae8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aaec:	80 00       	ld.sh	r0,r0[0x0]
8000aaee:	a8 f0       	st.b	r4[0x7],r0
8000aaf0:	80 00       	ld.sh	r0,r0[0x0]
8000aaf2:	a6 84       	st.b	r3[0x0],r4
8000aaf4:	80 00       	ld.sh	r0,r0[0x0]
8000aaf6:	a8 b8       	st.b	r4[0x3],r8
8000aaf8:	80 00       	ld.sh	r0,r0[0x0]
8000aafa:	80 f4       	ld.uh	r4,r0[0xe]
8000aafc:	80 00       	ld.sh	r0,r0[0x0]
8000aafe:	a9 70       	lsl	r0,0x9

8000ab00 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8000ab00:	eb cd 40 80 	pushm	r7,lr
8000ab04:	1a 97       	mov	r7,sp
8000ab06:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8000ab08:	e1 b8 00 00 	mfsr	r8,0x0
8000ab0c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8000ab10:	d3 03       	ssrf	0x10

	return flags;
8000ab12:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000ab16:	10 9c       	mov	r12,r8
8000ab18:	2f fd       	sub	sp,-4
8000ab1a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ab1e <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8000ab1e:	eb cd 40 80 	pushm	r7,lr
8000ab22:	1a 97       	mov	r7,sp
8000ab24:	20 1d       	sub	sp,4
8000ab26:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8000ab2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab2e:	e6 18 00 01 	andh	r8,0x1,COH
8000ab32:	5f 08       	sreq	r8
8000ab34:	5c 58       	castu.b	r8
}
8000ab36:	10 9c       	mov	r12,r8
8000ab38:	2f fd       	sub	sp,-4
8000ab3a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab3e:	d7 03       	nop

8000ab40 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
8000ab40:	eb cd 40 80 	pushm	r7,lr
8000ab44:	1a 97       	mov	r7,sp
8000ab46:	20 1d       	sub	sp,4
8000ab48:	ef 4c ff fc 	st.w	r7[-4],r12
	barrier();

   /* Restore the global IRQ mask status flag if it was previously set */
   if ( cpu_irq_is_enabled_flags(flags) ) {
8000ab4c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ab50:	f0 1f 00 05 	mcall	8000ab64 <cpu_irq_restore+0x24>
8000ab54:	18 98       	mov	r8,r12
8000ab56:	58 08       	cp.w	r8,0
8000ab58:	c0 20       	breq	8000ab5c <cpu_irq_restore+0x1c>
      cpu_irq_enable();
8000ab5a:	d5 03       	csrf	0x10
   }

	barrier();
}
8000ab5c:	2f fd       	sub	sp,-4
8000ab5e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ab62:	00 00       	add	r0,r0
8000ab64:	80 00       	ld.sh	r0,r0[0x0]
8000ab66:	ab 1e       	ld.d	lr,--r5

8000ab68 <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
8000ab68:	eb cd 40 80 	pushm	r7,lr
8000ab6c:	1a 97       	mov	r7,sp
8000ab6e:	20 1d       	sub	sp,4
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000ab70:	30 08       	mov	r8,0
8000ab72:	ef 68 ff fe 	st.b	r7[-2],r8
	udi_cdc_nb_comm_enabled = 0;
8000ab76:	4e 19       	lddpc	r9,8000acf8 <udi_cdc_comm_enable+0x190>
8000ab78:	30 08       	mov	r8,0
8000ab7a:	b2 88       	st.b	r9[0x0],r8
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
8000ab7c:	ef 3a ff fe 	ld.ub	r10,r7[-2]
8000ab80:	4d f9       	lddpc	r9,8000acfc <udi_cdc_comm_enable+0x194>
8000ab82:	30 08       	mov	r8,0
8000ab84:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8

	uid_cdc_state_msg[port].header.bmRequestType =
8000ab88:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000ab8c:	4d da       	lddpc	r10,8000ad00 <udi_cdc_comm_enable+0x198>
8000ab8e:	12 98       	mov	r8,r9
8000ab90:	a3 68       	lsl	r8,0x2
8000ab92:	12 08       	add	r8,r9
8000ab94:	a1 78       	lsl	r8,0x1
8000ab96:	f4 08 00 09 	add	r9,r10,r8
8000ab9a:	3a 18       	mov	r8,-95
8000ab9c:	b2 88       	st.b	r9[0x0],r8
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
8000ab9e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000aba2:	4d 8a       	lddpc	r10,8000ad00 <udi_cdc_comm_enable+0x198>
8000aba4:	12 98       	mov	r8,r9
8000aba6:	a3 68       	lsl	r8,0x2
8000aba8:	12 08       	add	r8,r9
8000abaa:	a1 78       	lsl	r8,0x1
8000abac:	f4 08 00 09 	add	r9,r10,r8
8000abb0:	32 08       	mov	r8,32
8000abb2:	b2 98       	st.b	r9[0x1],r8
	uid_cdc_state_msg[port].header.wValue = LE16(0);
8000abb4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000abb8:	4d 2a       	lddpc	r10,8000ad00 <udi_cdc_comm_enable+0x198>
8000abba:	12 98       	mov	r8,r9
8000abbc:	a3 68       	lsl	r8,0x2
8000abbe:	12 08       	add	r8,r9
8000abc0:	a1 78       	lsl	r8,0x1
8000abc2:	f4 08 00 09 	add	r9,r10,r8
8000abc6:	30 08       	mov	r8,0
8000abc8:	b2 18       	st.h	r9[0x2],r8

	switch (port) {
8000abca:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000abce:	58 08       	cp.w	r8,0
8000abd0:	c0 51       	brne	8000abda <udi_cdc_comm_enable+0x72>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
8000abd2:	30 08       	mov	r8,0
8000abd4:	ef 68 ff ff 	st.b	r7[-1],r8
8000abd8:	c0 48       	rjmp	8000abe0 <udi_cdc_comm_enable+0x78>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
8000abda:	30 08       	mov	r8,0
8000abdc:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
8000abe0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000abe4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000abe8:	a9 48       	asr	r8,0x8
8000abea:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
8000abee:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000abf2:	a9 68       	lsl	r8,0x8
8000abf4:	5c 88       	casts.h	r8
8000abf6:	f5 e8 10 08 	or	r8,r10,r8
8000abfa:	5c 88       	casts.h	r8
8000abfc:	10 9a       	mov	r10,r8
8000abfe:	4c 1b       	lddpc	r11,8000ad00 <udi_cdc_comm_enable+0x198>
8000ac00:	12 98       	mov	r8,r9
8000ac02:	a3 68       	lsl	r8,0x2
8000ac04:	12 08       	add	r8,r9
8000ac06:	a1 78       	lsl	r8,0x1
8000ac08:	f6 08 00 08 	add	r8,r11,r8
8000ac0c:	f0 c9 ff fc 	sub	r9,r8,-4
8000ac10:	14 98       	mov	r8,r10
8000ac12:	b2 08       	st.h	r9[0x0],r8
	uid_cdc_state_msg[port].header.wLength = LE16(2);
8000ac14:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000ac18:	4b aa       	lddpc	r10,8000ad00 <udi_cdc_comm_enable+0x198>
8000ac1a:	12 98       	mov	r8,r9
8000ac1c:	a3 68       	lsl	r8,0x2
8000ac1e:	12 08       	add	r8,r9
8000ac20:	a1 78       	lsl	r8,0x1
8000ac22:	f4 08 00 08 	add	r8,r10,r8
8000ac26:	f0 c9 ff fc 	sub	r9,r8,-4
8000ac2a:	e0 68 02 00 	mov	r8,512
8000ac2e:	b2 18       	st.h	r9[0x2],r8
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
8000ac30:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000ac34:	4b 3a       	lddpc	r10,8000ad00 <udi_cdc_comm_enable+0x198>
8000ac36:	12 98       	mov	r8,r9
8000ac38:	a3 68       	lsl	r8,0x2
8000ac3a:	12 08       	add	r8,r9
8000ac3c:	a1 78       	lsl	r8,0x1
8000ac3e:	f4 08 00 08 	add	r8,r10,r8
8000ac42:	f0 c9 ff f8 	sub	r9,r8,-8
8000ac46:	30 08       	mov	r8,0
8000ac48:	b2 08       	st.h	r9[0x0],r8

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
8000ac4a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000ac4e:	4a ea       	lddpc	r10,8000ad04 <udi_cdc_comm_enable+0x19c>
8000ac50:	12 98       	mov	r8,r9
8000ac52:	a3 78       	lsl	r8,0x3
8000ac54:	12 18       	sub	r8,r9
8000ac56:	f4 08 00 08 	add	r8,r10,r8
8000ac5a:	11 89       	ld.ub	r9,r8[0x0]
8000ac5c:	e2 19 00 00 	andl	r9,0x0,COH
8000ac60:	b0 89       	st.b	r8[0x0],r9
8000ac62:	11 99       	ld.ub	r9,r8[0x1]
8000ac64:	e2 19 00 00 	andl	r9,0x0,COH
8000ac68:	ea 19 ff ff 	orh	r9,0xffff
8000ac6c:	e8 19 ff c2 	orl	r9,0xffc2
8000ac70:	b0 99       	st.b	r8[0x1],r9
8000ac72:	11 a9       	ld.ub	r9,r8[0x2]
8000ac74:	e2 19 00 00 	andl	r9,0x0,COH
8000ac78:	a1 a9       	sbr	r9,0x0
8000ac7a:	b0 a9       	st.b	r8[0x2],r9
8000ac7c:	11 b9       	ld.ub	r9,r8[0x3]
8000ac7e:	e2 19 00 00 	andl	r9,0x0,COH
8000ac82:	b0 b9       	st.b	r8[0x3],r9
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
8000ac84:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000ac88:	49 fa       	lddpc	r10,8000ad04 <udi_cdc_comm_enable+0x19c>
8000ac8a:	12 98       	mov	r8,r9
8000ac8c:	a3 78       	lsl	r8,0x3
8000ac8e:	12 18       	sub	r8,r9
8000ac90:	f4 08 00 08 	add	r8,r10,r8
8000ac94:	f0 c9 ff fc 	sub	r9,r8,-4
8000ac98:	30 08       	mov	r8,0
8000ac9a:	b2 88       	st.b	r9[0x0],r8
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
8000ac9c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000aca0:	49 9a       	lddpc	r10,8000ad04 <udi_cdc_comm_enable+0x19c>
8000aca2:	12 98       	mov	r8,r9
8000aca4:	a3 78       	lsl	r8,0x3
8000aca6:	12 18       	sub	r8,r9
8000aca8:	f4 08 00 08 	add	r8,r10,r8
8000acac:	f0 c9 ff fc 	sub	r9,r8,-4
8000acb0:	30 08       	mov	r8,0
8000acb2:	b2 98       	st.b	r9[0x1],r8
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
8000acb4:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000acb8:	49 3a       	lddpc	r10,8000ad04 <udi_cdc_comm_enable+0x19c>
8000acba:	12 98       	mov	r8,r9
8000acbc:	a3 78       	lsl	r8,0x3
8000acbe:	12 18       	sub	r8,r9
8000acc0:	f4 08 00 08 	add	r8,r10,r8
8000acc4:	f0 c9 ff fc 	sub	r9,r8,-4
8000acc8:	30 88       	mov	r8,8
8000acca:	b2 a8       	st.b	r9[0x2],r8
	// Call application callback
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
8000accc:	f0 1f 00 0f 	mcall	8000ad08 <udi_cdc_comm_enable+0x1a0>
8000acd0:	18 98       	mov	r8,r12
8000acd2:	ec 18 00 01 	eorl	r8,0x1
8000acd6:	5c 58       	castu.b	r8
8000acd8:	c0 30       	breq	8000acde <udi_cdc_comm_enable+0x176>
		return false;
8000acda:	30 08       	mov	r8,0
8000acdc:	c0 98       	rjmp	8000acee <udi_cdc_comm_enable+0x186>
	}
	udi_cdc_nb_comm_enabled++;
8000acde:	48 78       	lddpc	r8,8000acf8 <udi_cdc_comm_enable+0x190>
8000ace0:	11 88       	ld.ub	r8,r8[0x0]
8000ace2:	5c 58       	castu.b	r8
8000ace4:	2f f8       	sub	r8,-1
8000ace6:	5c 58       	castu.b	r8
8000ace8:	48 49       	lddpc	r9,8000acf8 <udi_cdc_comm_enable+0x190>
8000acea:	b2 88       	st.b	r9[0x0],r8
	return true;
8000acec:	30 18       	mov	r8,1
}
8000acee:	10 9c       	mov	r12,r8
8000acf0:	2f fd       	sub	sp,-4
8000acf2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000acf6:	00 00       	add	r0,r0
8000acf8:	00 00       	add	r0,r0
8000acfa:	07 4c       	ld.w	r12,--r3
8000acfc:	00 00       	add	r0,r0
8000acfe:	07 3c       	ld.ub	r12,r3++
8000ad00:	00 00       	add	r0,r0
8000ad02:	07 40       	ld.w	r0,--r3
8000ad04:	00 00       	add	r0,r0
8000ad06:	07 34       	ld.ub	r4,r3++
8000ad08:	80 00       	ld.sh	r0,r0[0x0]
8000ad0a:	c9 44       	brge	8000ac32 <udi_cdc_comm_enable+0xca>

8000ad0c <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
8000ad0c:	eb cd 40 80 	pushm	r7,lr
8000ad10:	1a 97       	mov	r7,sp
8000ad12:	20 1d       	sub	sp,4
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000ad14:	30 08       	mov	r8,0
8000ad16:	ef 68 ff ff 	st.b	r7[-1],r8
	udi_cdc_nb_data_enabled = 0;
8000ad1a:	4b a9       	lddpc	r9,8000ae00 <udi_cdc_data_enable+0xf4>
8000ad1c:	30 08       	mov	r8,0
8000ad1e:	b2 88       	st.b	r9[0x0],r8
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
8000ad20:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ad24:	4b 8a       	lddpc	r10,8000ae04 <udi_cdc_data_enable+0xf8>
8000ad26:	30 08       	mov	r8,0
8000ad28:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_both_buf_to_send[port] = false;
8000ad2c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ad30:	4b 6a       	lddpc	r10,8000ae08 <udi_cdc_data_enable+0xfc>
8000ad32:	30 08       	mov	r8,0
8000ad34:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_buf_sel[port] = 0;
8000ad38:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ad3c:	4b 4a       	lddpc	r10,8000ae0c <udi_cdc_data_enable+0x100>
8000ad3e:	30 08       	mov	r8,0
8000ad40:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_buf_nb[port][0] = 0;
8000ad44:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000ad48:	4b 29       	lddpc	r9,8000ae10 <udi_cdc_data_enable+0x104>
8000ad4a:	30 08       	mov	r8,0
8000ad4c:	f2 0a 0a 28 	st.h	r9[r10<<0x2],r8
	udi_cdc_tx_buf_nb[port][1] = 0;
8000ad50:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ad54:	4a f9       	lddpc	r9,8000ae10 <udi_cdc_data_enable+0x104>
8000ad56:	a1 78       	lsl	r8,0x1
8000ad58:	f0 ca ff ff 	sub	r10,r8,-1
8000ad5c:	30 08       	mov	r8,0
8000ad5e:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_tx_sof_num[port] = 0;
8000ad62:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000ad66:	4a c9       	lddpc	r9,8000ae14 <udi_cdc_data_enable+0x108>
8000ad68:	30 08       	mov	r8,0
8000ad6a:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_tx_send(port);
8000ad6e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ad72:	10 9c       	mov	r12,r8
8000ad74:	f0 1f 00 29 	mcall	8000ae18 <udi_cdc_data_enable+0x10c>

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
8000ad78:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ad7c:	4a 8a       	lddpc	r10,8000ae1c <udi_cdc_data_enable+0x110>
8000ad7e:	30 08       	mov	r8,0
8000ad80:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_rx_buf_sel[port] = 0;
8000ad84:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000ad88:	4a 6a       	lddpc	r10,8000ae20 <udi_cdc_data_enable+0x114>
8000ad8a:	30 08       	mov	r8,0
8000ad8c:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_rx_buf_nb[port][0] = 0;
8000ad90:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000ad94:	4a 49       	lddpc	r9,8000ae24 <udi_cdc_data_enable+0x118>
8000ad96:	30 08       	mov	r8,0
8000ad98:	f2 0a 0a 28 	st.h	r9[r10<<0x2],r8
	udi_cdc_rx_buf_nb[port][1] = 0;
8000ad9c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ada0:	4a 19       	lddpc	r9,8000ae24 <udi_cdc_data_enable+0x118>
8000ada2:	a1 78       	lsl	r8,0x1
8000ada4:	f0 ca ff ff 	sub	r10,r8,-1
8000ada8:	30 08       	mov	r8,0
8000adaa:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_rx_pos[port] = 0;
8000adae:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000adb2:	49 e9       	lddpc	r9,8000ae28 <udi_cdc_data_enable+0x11c>
8000adb4:	30 08       	mov	r8,0
8000adb6:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	if (!udi_cdc_rx_start(port)) {
8000adba:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000adbe:	10 9c       	mov	r12,r8
8000adc0:	f0 1f 00 1b 	mcall	8000ae2c <udi_cdc_data_enable+0x120>
8000adc4:	18 98       	mov	r8,r12
8000adc6:	ec 18 00 01 	eorl	r8,0x1
8000adca:	5c 58       	castu.b	r8
8000adcc:	c0 30       	breq	8000add2 <udi_cdc_data_enable+0xc6>
		return false;
8000adce:	30 08       	mov	r8,0
8000add0:	c1 48       	rjmp	8000adf8 <udi_cdc_data_enable+0xec>
	}
	udi_cdc_nb_data_enabled++;
8000add2:	48 c8       	lddpc	r8,8000ae00 <udi_cdc_data_enable+0xf4>
8000add4:	11 88       	ld.ub	r8,r8[0x0]
8000add6:	5c 58       	castu.b	r8
8000add8:	2f f8       	sub	r8,-1
8000adda:	5c 58       	castu.b	r8
8000addc:	48 99       	lddpc	r9,8000ae00 <udi_cdc_data_enable+0xf4>
8000adde:	b2 88       	st.b	r9[0x0],r8
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
8000ade0:	48 88       	lddpc	r8,8000ae00 <udi_cdc_data_enable+0xf4>
8000ade2:	11 88       	ld.ub	r8,r8[0x0]
8000ade4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000ade8:	30 18       	mov	r8,1
8000adea:	f0 09 18 00 	cp.b	r9,r8
8000adee:	c0 41       	brne	8000adf6 <udi_cdc_data_enable+0xea>
		udi_cdc_data_running = true;
8000adf0:	49 09       	lddpc	r9,8000ae30 <udi_cdc_data_enable+0x124>
8000adf2:	30 18       	mov	r8,1
8000adf4:	b2 88       	st.b	r9[0x0],r8
	}
	return true;
8000adf6:	30 18       	mov	r8,1
}
8000adf8:	10 9c       	mov	r12,r8
8000adfa:	2f fd       	sub	sp,-4
8000adfc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ae00:	00 00       	add	r0,r0
8000ae02:	07 4d       	ld.w	sp,--r3
8000ae04:	00 00       	add	r0,r0
8000ae06:	0c 6c       	and	r12,r6
8000ae08:	00 00       	add	r0,r0
8000ae0a:	0c 70       	tst	r0,r6
8000ae0c:	00 00       	add	r0,r0
8000ae0e:	0c 64       	and	r4,r6
8000ae10:	00 00       	add	r0,r0
8000ae12:	0c 60       	and	r0,r6
8000ae14:	00 00       	add	r0,r0
8000ae16:	0c 68       	and	r8,r6
8000ae18:	80 00       	ld.sh	r0,r0[0x0]
8000ae1a:	b2 a4       	st.b	r9[0x2],r4
8000ae1c:	00 00       	add	r0,r0
8000ae1e:	09 dc       	ld.ub	r12,r4[0x5]
8000ae20:	00 00       	add	r0,r0
8000ae22:	09 d4       	ld.ub	r4,r4[0x5]
8000ae24:	00 00       	add	r0,r0
8000ae26:	09 d0       	ld.ub	r0,r4[0x5]
8000ae28:	00 00       	add	r0,r0
8000ae2a:	09 d8       	ld.ub	r8,r4[0x5]
8000ae2c:	80 00       	ld.sh	r0,r0[0x0]
8000ae2e:	af fc       	*unknown*
8000ae30:	00 00       	add	r0,r0
8000ae32:	07 4e       	ld.w	lr,--r3

8000ae34 <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
8000ae34:	eb cd 40 80 	pushm	r7,lr
8000ae38:	1a 97       	mov	r7,sp
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
8000ae3a:	48 58       	lddpc	r8,8000ae4c <udi_cdc_comm_disable+0x18>
8000ae3c:	11 88       	ld.ub	r8,r8[0x0]
8000ae3e:	5c 58       	castu.b	r8
8000ae40:	20 18       	sub	r8,1
8000ae42:	5c 58       	castu.b	r8
8000ae44:	48 29       	lddpc	r9,8000ae4c <udi_cdc_comm_disable+0x18>
8000ae46:	b2 88       	st.b	r9[0x0],r8
}
8000ae48:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ae4c:	00 00       	add	r0,r0
8000ae4e:	07 4c       	ld.w	r12,--r3

8000ae50 <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
8000ae50:	eb cd 40 80 	pushm	r7,lr
8000ae54:	1a 97       	mov	r7,sp
8000ae56:	20 1d       	sub	sp,4
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
8000ae58:	48 a8       	lddpc	r8,8000ae80 <udi_cdc_data_disable+0x30>
8000ae5a:	11 88       	ld.ub	r8,r8[0x0]
8000ae5c:	5c 58       	castu.b	r8
8000ae5e:	20 18       	sub	r8,1
8000ae60:	5c 58       	castu.b	r8
8000ae62:	48 89       	lddpc	r9,8000ae80 <udi_cdc_data_disable+0x30>
8000ae64:	b2 88       	st.b	r9[0x0],r8
	port = udi_cdc_nb_data_enabled;
8000ae66:	48 78       	lddpc	r8,8000ae80 <udi_cdc_data_disable+0x30>
8000ae68:	11 88       	ld.ub	r8,r8[0x0]
8000ae6a:	ef 68 ff ff 	st.b	r7[-1],r8
	UDI_CDC_DISABLE_EXT(port);
8000ae6e:	f0 1f 00 06 	mcall	8000ae84 <udi_cdc_data_disable+0x34>
	udi_cdc_data_running = false;
8000ae72:	48 69       	lddpc	r9,8000ae88 <udi_cdc_data_disable+0x38>
8000ae74:	30 08       	mov	r8,0
8000ae76:	b2 88       	st.b	r9[0x0],r8
}
8000ae78:	2f fd       	sub	sp,-4
8000ae7a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ae7e:	00 00       	add	r0,r0
8000ae80:	00 00       	add	r0,r0
8000ae82:	07 4d       	ld.w	sp,--r3
8000ae84:	80 00       	ld.sh	r0,r0[0x0]
8000ae86:	c9 5c       	rcall	8000afb0 <udi_cdc_setup_to_port+0x4>
8000ae88:	00 00       	add	r0,r0
8000ae8a:	07 4e       	ld.w	lr,--r3

8000ae8c <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
8000ae8c:	eb cd 40 80 	pushm	r7,lr
8000ae90:	1a 97       	mov	r7,sp
8000ae92:	20 1d       	sub	sp,4
	uint8_t port = udi_cdc_setup_to_port();
8000ae94:	f0 1f 00 34 	mcall	8000af64 <udi_cdc_comm_setup+0xd8>
8000ae98:	18 98       	mov	r8,r12
8000ae9a:	ef 68 ff ff 	st.b	r7[-1],r8

	if (Udd_setup_is_in()) {
8000ae9e:	4b 38       	lddpc	r8,8000af68 <udi_cdc_comm_setup+0xdc>
8000aea0:	11 88       	ld.ub	r8,r8[0x0]
8000aea2:	10 99       	mov	r9,r8
8000aea4:	30 08       	mov	r8,0
8000aea6:	f0 09 18 00 	cp.b	r9,r8
8000aeaa:	c2 44       	brge	8000aef2 <udi_cdc_comm_setup+0x66>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000aeac:	4a f8       	lddpc	r8,8000af68 <udi_cdc_comm_setup+0xdc>
8000aeae:	11 88       	ld.ub	r8,r8[0x0]
8000aeb0:	e2 18 00 60 	andl	r8,0x60,COH
8000aeb4:	e0 48 00 20 	cp.w	r8,32
8000aeb8:	c1 d1       	brne	8000aef2 <udi_cdc_comm_setup+0x66>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
8000aeba:	4a c8       	lddpc	r8,8000af68 <udi_cdc_comm_setup+0xdc>
8000aebc:	11 98       	ld.ub	r8,r8[0x1]
8000aebe:	e0 48 00 21 	cp.w	r8,33
8000aec2:	c1 81       	brne	8000aef2 <udi_cdc_comm_setup+0x66>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000aec4:	4a 98       	lddpc	r8,8000af68 <udi_cdc_comm_setup+0xdc>
8000aec6:	90 39       	ld.sh	r9,r8[0x6]
8000aec8:	30 78       	mov	r8,7
8000aeca:	f0 09 19 00 	cp.h	r9,r8
8000aece:	c0 30       	breq	8000aed4 <udi_cdc_comm_setup+0x48>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
8000aed0:	30 08       	mov	r8,0
8000aed2:	c4 48       	rjmp	8000af5a <udi_cdc_comm_setup+0xce>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
8000aed4:	4a 6a       	lddpc	r10,8000af6c <udi_cdc_comm_setup+0xe0>
8000aed6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
						udi_cdc_line_coding[port];
8000aeda:	12 98       	mov	r8,r9
8000aedc:	a3 78       	lsl	r8,0x3
8000aede:	12 18       	sub	r8,r9
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
						(uint8_t *) &
8000aee0:	f4 08 00 09 	add	r9,r10,r8
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.payload =
8000aee4:	4a 18       	lddpc	r8,8000af68 <udi_cdc_comm_setup+0xdc>
8000aee6:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
8000aee8:	4a 09       	lddpc	r9,8000af68 <udi_cdc_comm_setup+0xdc>
8000aeea:	30 78       	mov	r8,7
8000aeec:	b2 68       	st.h	r9[0xc],r8
						sizeof(usb_cdc_line_coding_t);
				return true;
8000aeee:	30 18       	mov	r8,1
8000aef0:	c3 58       	rjmp	8000af5a <udi_cdc_comm_setup+0xce>
			}
		}
	}
	if (Udd_setup_is_out()) {
8000aef2:	49 e8       	lddpc	r8,8000af68 <udi_cdc_comm_setup+0xdc>
8000aef4:	11 88       	ld.ub	r8,r8[0x0]
8000aef6:	10 99       	mov	r9,r8
8000aef8:	30 08       	mov	r8,0
8000aefa:	f0 09 18 00 	cp.b	r9,r8
8000aefe:	c2 d5       	brlt	8000af58 <udi_cdc_comm_setup+0xcc>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
8000af00:	49 a8       	lddpc	r8,8000af68 <udi_cdc_comm_setup+0xdc>
8000af02:	11 88       	ld.ub	r8,r8[0x0]
8000af04:	e2 18 00 60 	andl	r8,0x60,COH
8000af08:	e0 48 00 20 	cp.w	r8,32
8000af0c:	c2 61       	brne	8000af58 <udi_cdc_comm_setup+0xcc>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
8000af0e:	49 78       	lddpc	r8,8000af68 <udi_cdc_comm_setup+0xdc>
8000af10:	11 98       	ld.ub	r8,r8[0x1]
8000af12:	e0 48 00 20 	cp.w	r8,32
8000af16:	c0 50       	breq	8000af20 <udi_cdc_comm_setup+0x94>
8000af18:	e0 48 00 22 	cp.w	r8,34
8000af1c:	c1 c0       	breq	8000af54 <udi_cdc_comm_setup+0xc8>
8000af1e:	c1 d8       	rjmp	8000af58 <udi_cdc_comm_setup+0xcc>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
8000af20:	49 28       	lddpc	r8,8000af68 <udi_cdc_comm_setup+0xdc>
8000af22:	90 39       	ld.sh	r9,r8[0x6]
8000af24:	30 78       	mov	r8,7
8000af26:	f0 09 19 00 	cp.h	r9,r8
8000af2a:	c0 30       	breq	8000af30 <udi_cdc_comm_setup+0xa4>
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
8000af2c:	30 08       	mov	r8,0
8000af2e:	c1 68       	rjmp	8000af5a <udi_cdc_comm_setup+0xce>
				udd_g_ctrlreq.callback =
8000af30:	48 e8       	lddpc	r8,8000af68 <udi_cdc_comm_setup+0xdc>
8000af32:	49 09       	lddpc	r9,8000af70 <udi_cdc_comm_setup+0xe4>
8000af34:	91 49       	st.w	r8[0x10],r9
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
8000af36:	48 ea       	lddpc	r10,8000af6c <udi_cdc_comm_setup+0xe0>
8000af38:	ef 39 ff ff 	ld.ub	r9,r7[-1]
						udi_cdc_line_coding[port];
8000af3c:	12 98       	mov	r8,r9
8000af3e:	a3 78       	lsl	r8,0x3
8000af40:	12 18       	sub	r8,r9
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
8000af42:	f4 08 00 09 	add	r9,r10,r8
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
					return false; // Error for USB host
				udd_g_ctrlreq.callback =
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
8000af46:	48 98       	lddpc	r8,8000af68 <udi_cdc_comm_setup+0xdc>
8000af48:	91 29       	st.w	r8[0x8],r9
						(uint8_t *) &
						udi_cdc_line_coding[port];
				udd_g_ctrlreq.payload_size =
8000af4a:	48 89       	lddpc	r9,8000af68 <udi_cdc_comm_setup+0xdc>
8000af4c:	30 78       	mov	r8,7
8000af4e:	b2 68       	st.h	r9[0xc],r8
						sizeof(usb_cdc_line_coding_t);
				return true;
8000af50:	30 18       	mov	r8,1
8000af52:	c0 48       	rjmp	8000af5a <udi_cdc_comm_setup+0xce>
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
8000af54:	30 18       	mov	r8,1
8000af56:	c0 28       	rjmp	8000af5a <udi_cdc_comm_setup+0xce>
			}
		}
	}
	return false;  // request Not supported
8000af58:	30 08       	mov	r8,0
}
8000af5a:	10 9c       	mov	r12,r8
8000af5c:	2f fd       	sub	sp,-4
8000af5e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000af62:	00 00       	add	r0,r0
8000af64:	80 00       	ld.sh	r0,r0[0x0]
8000af66:	af ac       	sbr	r12,0xe
8000af68:	00 00       	add	r0,r0
8000af6a:	12 1c       	sub	r12,r9
8000af6c:	00 00       	add	r0,r0
8000af6e:	07 34       	ld.ub	r4,r3++
8000af70:	80 00       	ld.sh	r0,r0[0x0]
8000af72:	af e0       	*unknown*

8000af74 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
8000af74:	eb cd 40 80 	pushm	r7,lr
8000af78:	1a 97       	mov	r7,sp
	return false;  // request Not supported
8000af7a:	30 08       	mov	r8,0
}
8000af7c:	10 9c       	mov	r12,r8
8000af7e:	e3 cd 80 80 	ldm	sp++,r7,pc

8000af82 <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
8000af82:	eb cd 40 80 	pushm	r7,lr
8000af86:	1a 97       	mov	r7,sp
	return 0;      // CDC don't have multiple alternate setting
8000af88:	30 08       	mov	r8,0
}
8000af8a:	10 9c       	mov	r12,r8
8000af8c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000af90 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
8000af90:	eb cd 40 80 	pushm	r7,lr
8000af94:	1a 97       	mov	r7,sp
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
8000af96:	48 48       	lddpc	r8,8000afa4 <udi_cdc_data_sof_notify+0x14>
8000af98:	11 88       	ld.ub	r8,r8[0x0]
8000af9a:	10 9c       	mov	r12,r8
8000af9c:	f0 1f 00 03 	mcall	8000afa8 <udi_cdc_data_sof_notify+0x18>
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
8000afa0:	e3 cd 80 80 	ldm	sp++,r7,pc
8000afa4:	00 00       	add	r0,r0
8000afa6:	0c 76       	tst	r6,r6
8000afa8:	80 00       	ld.sh	r0,r0[0x0]
8000afaa:	b2 a4       	st.b	r9[0x2],r4

8000afac <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
8000afac:	eb cd 40 80 	pushm	r7,lr
8000afb0:	1a 97       	mov	r7,sp
8000afb2:	20 1d       	sub	sp,4
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
8000afb4:	48 a8       	lddpc	r8,8000afdc <udi_cdc_setup_to_port+0x30>
8000afb6:	90 28       	ld.sh	r8,r8[0x4]
8000afb8:	5c 78       	castu.h	r8
8000afba:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000afbe:	c0 51       	brne	8000afc8 <udi_cdc_setup_to_port+0x1c>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
8000afc0:	30 08       	mov	r8,0
8000afc2:	ef 68 ff ff 	st.b	r7[-1],r8
8000afc6:	c0 48       	rjmp	8000afce <udi_cdc_setup_to_port+0x22>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
8000afc8:	30 08       	mov	r8,0
8000afca:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}
	return port;
8000afce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
8000afd2:	10 9c       	mov	r12,r8
8000afd4:	2f fd       	sub	sp,-4
8000afd6:	e3 cd 80 80 	ldm	sp++,r7,pc
8000afda:	00 00       	add	r0,r0
8000afdc:	00 00       	add	r0,r0
8000afde:	12 1c       	sub	r12,r9

8000afe0 <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
8000afe0:	eb cd 40 80 	pushm	r7,lr
8000afe4:	1a 97       	mov	r7,sp
8000afe6:	20 1d       	sub	sp,4
	uint8_t port = udi_cdc_setup_to_port();
8000afe8:	f0 1f 00 04 	mcall	8000aff8 <udi_cdc_line_coding_received+0x18>
8000afec:	18 98       	mov	r8,r12
8000afee:	ef 68 ff ff 	st.b	r7[-1],r8
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
8000aff2:	2f fd       	sub	sp,-4
8000aff4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000aff8:	80 00       	ld.sh	r0,r0[0x0]
8000affa:	af ac       	sbr	r12,0xe

8000affc <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
8000affc:	eb cd 40 80 	pushm	r7,lr
8000b000:	1a 97       	mov	r7,sp
8000b002:	20 3d       	sub	sp,12
8000b004:	18 98       	mov	r8,r12
8000b006:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000b00a:	30 08       	mov	r8,0
8000b00c:	ef 68 ff f4 	st.b	r7[-12],r8
#endif

	flags = cpu_irq_save();
8000b010:	f0 1f 00 3c 	mcall	8000b100 <udi_cdc_rx_start+0x104>
8000b014:	18 98       	mov	r8,r12
8000b016:	ef 48 ff f8 	st.w	r7[-8],r8
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
8000b01a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b01e:	4b a9       	lddpc	r9,8000b104 <udi_cdc_rx_start+0x108>
8000b020:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000b024:	ef 68 ff fe 	st.b	r7[-2],r8
	if (udi_cdc_rx_trans_ongoing[port] ||
8000b028:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b02c:	4b 79       	lddpc	r9,8000b108 <udi_cdc_rx_start+0x10c>
8000b02e:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000b032:	5c 58       	castu.b	r8
8000b034:	c1 61       	brne	8000b060 <udi_cdc_rx_start+0x64>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
8000b036:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000b03a:	4b 58       	lddpc	r8,8000b10c <udi_cdc_rx_start+0x110>
8000b03c:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000b040:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000b044:	ef 3b ff f4 	ld.ub	r11,r7[-12]
8000b048:	ef 3a ff fe 	ld.ub	r10,r7[-2]
8000b04c:	4b 18       	lddpc	r8,8000b110 <udi_cdc_rx_start+0x114>
8000b04e:	a1 7b       	lsl	r11,0x1
8000b050:	f6 0a 00 0a 	add	r10,r11,r10
8000b054:	f0 0a 04 18 	ld.sh	r8,r8[r10<<0x1]
8000b058:	5c 88       	casts.h	r8
	port = 0;
#endif

	flags = cpu_irq_save();
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
	if (udi_cdc_rx_trans_ongoing[port] ||
8000b05a:	f0 09 19 00 	cp.h	r9,r8
8000b05e:	c0 72       	brcc	8000b06c <udi_cdc_rx_start+0x70>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
8000b060:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b064:	f0 1f 00 2c 	mcall	8000b114 <udi_cdc_rx_start+0x118>
		return false;
8000b068:	30 08       	mov	r8,0
8000b06a:	c4 68       	rjmp	8000b0f6 <udi_cdc_rx_start+0xfa>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
8000b06c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000b070:	4a 79       	lddpc	r9,8000b10c <udi_cdc_rx_start+0x110>
8000b072:	30 08       	mov	r8,0
8000b074:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
8000b078:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000b07c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b080:	30 08       	mov	r8,0
8000b082:	f0 09 18 00 	cp.b	r9,r8
8000b086:	5f 08       	sreq	r8
8000b088:	49 f9       	lddpc	r9,8000b104 <udi_cdc_rx_start+0x108>
8000b08a:	f2 0a 0b 08 	st.b	r9[r10],r8

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
8000b08e:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000b092:	49 ea       	lddpc	r10,8000b108 <udi_cdc_rx_start+0x10c>
8000b094:	30 18       	mov	r8,1
8000b096:	f4 09 0b 08 	st.b	r10[r9],r8
	cpu_irq_restore(flags);
8000b09a:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b09e:	f0 1f 00 1e 	mcall	8000b114 <udi_cdc_rx_start+0x118>

	if (udi_cdc_multi_is_rx_ready(port)) {
8000b0a2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b0a6:	10 9c       	mov	r12,r8
8000b0a8:	f0 1f 00 1c 	mcall	8000b118 <udi_cdc_rx_start+0x11c>
		UDI_CDC_RX_NOTIFY(port);
	}
	// Send the buffer with enable of short packet
	switch (port) {
8000b0ac:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b0b0:	58 08       	cp.w	r8,0
8000b0b2:	c0 51       	brne	8000b0bc <udi_cdc_rx_start+0xc0>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
8000b0b4:	30 28       	mov	r8,2
8000b0b6:	ef 68 ff ff 	st.b	r7[-1],r8
8000b0ba:	c0 48       	rjmp	8000b0c2 <udi_cdc_rx_start+0xc6>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
8000b0bc:	30 28       	mov	r8,2
8000b0be:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}
	return udd_ep_run(ep,
8000b0c2:	49 7a       	lddpc	r10,8000b11c <udi_cdc_rx_start+0x120>
8000b0c4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
8000b0c8:	12 98       	mov	r8,r9
8000b0ca:	a3 68       	lsl	r8,0x2
8000b0cc:	12 08       	add	r8,r9
8000b0ce:	a7 78       	lsl	r8,0x7
8000b0d0:	10 9b       	mov	r11,r8
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
8000b0d2:	ef 39 ff fe 	ld.ub	r9,r7[-2]
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
8000b0d6:	12 98       	mov	r8,r9
8000b0d8:	a3 68       	lsl	r8,0x2
8000b0da:	12 08       	add	r8,r9
8000b0dc:	a7 68       	lsl	r8,0x6
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
		break;
	}
	return udd_ep_run(ep,
8000b0de:	f6 08 00 08 	add	r8,r11,r8
8000b0e2:	10 0a       	add	r10,r8
8000b0e4:	ef 3c ff ff 	ld.ub	r12,r7[-1]
8000b0e8:	48 e8       	lddpc	r8,8000b120 <udi_cdc_rx_start+0x124>
8000b0ea:	e0 69 01 40 	mov	r9,320
8000b0ee:	30 1b       	mov	r11,1
8000b0f0:	f0 1f 00 0d 	mcall	8000b124 <udi_cdc_rx_start+0x128>
8000b0f4:	18 98       	mov	r8,r12
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
8000b0f6:	10 9c       	mov	r12,r8
8000b0f8:	2f dd       	sub	sp,-12
8000b0fa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b0fe:	00 00       	add	r0,r0
8000b100:	80 00       	ld.sh	r0,r0[0x0]
8000b102:	ab 00       	ld.d	r0,r5
8000b104:	00 00       	add	r0,r0
8000b106:	09 d4       	ld.ub	r4,r4[0x5]
8000b108:	00 00       	add	r0,r0
8000b10a:	09 dc       	ld.ub	r12,r4[0x5]
8000b10c:	00 00       	add	r0,r0
8000b10e:	09 d8       	ld.ub	r8,r4[0x5]
8000b110:	00 00       	add	r0,r0
8000b112:	09 d0       	ld.ub	r0,r4[0x5]
8000b114:	80 00       	ld.sh	r0,r0[0x0]
8000b116:	ab 40       	asr	r0,0xa
8000b118:	80 00       	ld.sh	r0,r0[0x0]
8000b11a:	b5 70       	lsl	r0,0x15
8000b11c:	00 00       	add	r0,r0
8000b11e:	07 50       	ld.sh	r0,--r3
8000b120:	80 00       	ld.sh	r0,r0[0x0]
8000b122:	b1 28       	st.d	r8++,r8
8000b124:	80 00       	ld.sh	r0,r0[0x0]
8000b126:	92 c8       	ld.uh	r8,r9[0x8]

8000b128 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
8000b128:	eb cd 40 80 	pushm	r7,lr
8000b12c:	1a 97       	mov	r7,sp
8000b12e:	20 4d       	sub	sp,16
8000b130:	ef 4c ff f8 	st.w	r7[-8],r12
8000b134:	ef 4b ff f4 	st.w	r7[-12],r11
8000b138:	14 98       	mov	r8,r10
8000b13a:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
8000b13e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000b142:	58 28       	cp.w	r8,2
8000b144:	c0 51       	brne	8000b14e <udi_cdc_data_received+0x26>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
8000b146:	30 08       	mov	r8,0
8000b148:	ef 68 ff ff 	st.b	r7[-1],r8
8000b14c:	c0 48       	rjmp	8000b154 <udi_cdc_data_received+0x2c>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
8000b14e:	30 08       	mov	r8,0
8000b150:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
8000b154:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b158:	58 08       	cp.w	r8,0
8000b15a:	c4 61       	brne	8000b1e6 <udi_cdc_data_received+0xbe>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
8000b15c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b160:	4a 49       	lddpc	r9,8000b1f0 <udi_cdc_data_received+0xc8>
8000b162:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000b166:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000b16a:	30 08       	mov	r8,0
8000b16c:	f0 09 18 00 	cp.b	r9,r8
8000b170:	5f 08       	sreq	r8
8000b172:	ef 68 ff fe 	st.b	r7[-2],r8
	if (!n) {
8000b176:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b17a:	58 08       	cp.w	r8,0
8000b17c:	c1 c1       	brne	8000b1b4 <udi_cdc_data_received+0x8c>
		udd_ep_run( ep,
8000b17e:	49 ea       	lddpc	r10,8000b1f4 <udi_cdc_data_received+0xcc>
8000b180:	ef 39 ff ff 	ld.ub	r9,r7[-1]
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
8000b184:	12 98       	mov	r8,r9
8000b186:	a3 68       	lsl	r8,0x2
8000b188:	12 08       	add	r8,r9
8000b18a:	a7 78       	lsl	r8,0x7
8000b18c:	10 9b       	mov	r11,r8
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
8000b18e:	ef 39 ff fe 	ld.ub	r9,r7[-2]
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
8000b192:	12 98       	mov	r8,r9
8000b194:	a3 68       	lsl	r8,0x2
8000b196:	12 08       	add	r8,r9
8000b198:	a7 68       	lsl	r8,0x6
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
	if (!n) {
		udd_ep_run( ep,
8000b19a:	f6 08 00 08 	add	r8,r11,r8
8000b19e:	10 0a       	add	r10,r8
8000b1a0:	ef 3c ff f0 	ld.ub	r12,r7[-16]
8000b1a4:	fe c8 00 7c 	sub	r8,pc,124
8000b1a8:	e0 69 01 40 	mov	r9,320
8000b1ac:	30 1b       	mov	r11,1
8000b1ae:	f0 1f 00 13 	mcall	8000b1f8 <udi_cdc_data_received+0xd0>
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
8000b1b2:	c1 b8       	rjmp	8000b1e8 <udi_cdc_data_received+0xc0>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
8000b1b4:	ef 3b ff ff 	ld.ub	r11,r7[-1]
8000b1b8:	ef 3a ff fe 	ld.ub	r10,r7[-2]
8000b1bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b1c0:	5c 88       	casts.h	r8
8000b1c2:	48 f9       	lddpc	r9,8000b1fc <udi_cdc_data_received+0xd4>
8000b1c4:	a1 7b       	lsl	r11,0x1
8000b1c6:	f6 0a 00 0a 	add	r10,r11,r10
8000b1ca:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_rx_trans_ongoing[port] = false;
8000b1ce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b1d2:	48 ca       	lddpc	r10,8000b200 <udi_cdc_data_received+0xd8>
8000b1d4:	30 08       	mov	r8,0
8000b1d6:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_rx_start(port);
8000b1da:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b1de:	10 9c       	mov	r12,r8
8000b1e0:	f0 1f 00 09 	mcall	8000b204 <udi_cdc_data_received+0xdc>
8000b1e4:	c0 28       	rjmp	8000b1e8 <udi_cdc_data_received+0xc0>
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort reception
		return;
8000b1e6:	d7 03       	nop
		return;
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
	udi_cdc_rx_trans_ongoing[port] = false;
	udi_cdc_rx_start(port);
}
8000b1e8:	2f cd       	sub	sp,-16
8000b1ea:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b1ee:	00 00       	add	r0,r0
8000b1f0:	00 00       	add	r0,r0
8000b1f2:	09 d4       	ld.ub	r4,r4[0x5]
8000b1f4:	00 00       	add	r0,r0
8000b1f6:	07 50       	ld.sh	r0,--r3
8000b1f8:	80 00       	ld.sh	r0,r0[0x0]
8000b1fa:	92 c8       	ld.uh	r8,r9[0x8]
8000b1fc:	00 00       	add	r0,r0
8000b1fe:	09 d0       	ld.ub	r0,r4[0x5]
8000b200:	00 00       	add	r0,r0
8000b202:	09 dc       	ld.ub	r12,r4[0x5]
8000b204:	80 00       	ld.sh	r0,r0[0x0]
8000b206:	af fc       	*unknown*

8000b208 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
8000b208:	eb cd 40 80 	pushm	r7,lr
8000b20c:	1a 97       	mov	r7,sp
8000b20e:	20 4d       	sub	sp,16
8000b210:	ef 4c ff f8 	st.w	r7[-8],r12
8000b214:	ef 4b ff f4 	st.w	r7[-12],r11
8000b218:	14 98       	mov	r8,r10
8000b21a:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t port;
	UNUSED(n);

	switch (ep) {
8000b21e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000b222:	e0 48 00 81 	cp.w	r8,129
8000b226:	c0 51       	brne	8000b230 <udi_cdc_data_sent+0x28>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
8000b228:	30 08       	mov	r8,0
8000b22a:	ef 68 ff ff 	st.b	r7[-1],r8
8000b22e:	c0 48       	rjmp	8000b236 <udi_cdc_data_sent+0x2e>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
8000b230:	30 08       	mov	r8,0
8000b232:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
8000b236:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b23a:	58 08       	cp.w	r8,0
8000b23c:	c2 61       	brne	8000b288 <udi_cdc_data_sent+0x80>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
8000b23e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8000b242:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b246:	49 39       	lddpc	r9,8000b290 <udi_cdc_data_sent+0x88>
8000b248:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000b24c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000b250:	30 08       	mov	r8,0
8000b252:	f0 09 18 00 	cp.b	r9,r8
8000b256:	5f 08       	sreq	r8
8000b258:	48 f9       	lddpc	r9,8000b294 <udi_cdc_data_sent+0x8c>
8000b25a:	a1 7a       	lsl	r10,0x1
8000b25c:	10 0a       	add	r10,r8
8000b25e:	30 08       	mov	r8,0
8000b260:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	udi_cdc_tx_both_buf_to_send[port] = false;
8000b264:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b268:	48 ca       	lddpc	r10,8000b298 <udi_cdc_data_sent+0x90>
8000b26a:	30 08       	mov	r8,0
8000b26c:	f4 09 0b 08 	st.b	r10[r9],r8
	udi_cdc_tx_trans_ongoing[port] = false;
8000b270:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b274:	48 aa       	lddpc	r10,8000b29c <udi_cdc_data_sent+0x94>
8000b276:	30 08       	mov	r8,0
8000b278:	f4 09 0b 08 	st.b	r10[r9],r8

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
8000b27c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000b280:	10 9c       	mov	r12,r8
8000b282:	f0 1f 00 08 	mcall	8000b2a0 <udi_cdc_data_sent+0x98>
8000b286:	c0 28       	rjmp	8000b28a <udi_cdc_data_sent+0x82>
		break;
	}

	if (UDD_EP_TRANSFER_OK != status) {
		// Abort transfer
		return;
8000b288:	d7 03       	nop

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
}
8000b28a:	2f cd       	sub	sp,-16
8000b28c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b290:	00 00       	add	r0,r0
8000b292:	0c 64       	and	r4,r6
8000b294:	00 00       	add	r0,r0
8000b296:	0c 60       	and	r0,r6
8000b298:	00 00       	add	r0,r0
8000b29a:	0c 70       	tst	r0,r6
8000b29c:	00 00       	add	r0,r0
8000b29e:	0c 6c       	and	r12,r6
8000b2a0:	80 00       	ld.sh	r0,r0[0x0]
8000b2a2:	b2 a4       	st.b	r9[0x2],r4

8000b2a4 <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
8000b2a4:	eb cd 40 c0 	pushm	r6-r7,lr
8000b2a8:	1a 97       	mov	r7,sp
8000b2aa:	20 3d       	sub	sp,12
8000b2ac:	18 98       	mov	r8,r12
8000b2ae:	ef 68 ff f4 	st.b	r7[-12],r8
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000b2b2:	30 08       	mov	r8,0
8000b2b4:	ef 68 ff f4 	st.b	r7[-12],r8
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
8000b2b8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b2bc:	4f e9       	lddpc	r9,8000b4b4 <udi_cdc_tx_send+0x210>
8000b2be:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000b2c2:	5c 58       	castu.b	r8
8000b2c4:	e0 81 00 f1 	brne	8000b4a6 <udi_cdc_tx_send+0x202>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
8000b2c8:	f0 1f 00 7c 	mcall	8000b4b8 <udi_cdc_tx_send+0x214>
8000b2cc:	18 98       	mov	r8,r12
8000b2ce:	58 08       	cp.w	r8,0
8000b2d0:	c0 e0       	breq	8000b2ec <udi_cdc_tx_send+0x48>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
8000b2d2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000b2d6:	4f a8       	lddpc	r8,8000b4bc <udi_cdc_tx_send+0x218>
8000b2d8:	f0 09 04 16 	ld.sh	r6,r8[r9<<0x1]
8000b2dc:	f0 1f 00 79 	mcall	8000b4c0 <udi_cdc_tx_send+0x21c>
8000b2e0:	18 98       	mov	r8,r12
8000b2e2:	5c 88       	casts.h	r8
8000b2e4:	f0 06 19 00 	cp.h	r6,r8
8000b2e8:	c0 f1       	brne	8000b306 <udi_cdc_tx_send+0x62>
			return; // Wait next SOF to send next data
8000b2ea:	ce 18       	rjmp	8000b4ac <udi_cdc_tx_send+0x208>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
8000b2ec:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000b2f0:	4f 38       	lddpc	r8,8000b4bc <udi_cdc_tx_send+0x218>
8000b2f2:	f0 09 04 16 	ld.sh	r6,r8[r9<<0x1]
8000b2f6:	f0 1f 00 74 	mcall	8000b4c4 <udi_cdc_tx_send+0x220>
8000b2fa:	18 98       	mov	r8,r12
8000b2fc:	5c 88       	casts.h	r8
8000b2fe:	f0 06 19 00 	cp.h	r6,r8
8000b302:	e0 80 00 d4 	breq	8000b4aa <udi_cdc_tx_send+0x206>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
8000b306:	f0 1f 00 71 	mcall	8000b4c8 <udi_cdc_tx_send+0x224>
8000b30a:	18 98       	mov	r8,r12
8000b30c:	ef 48 ff f8 	st.w	r7[-8],r8
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
8000b310:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b314:	4e e9       	lddpc	r9,8000b4cc <udi_cdc_tx_send+0x228>
8000b316:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000b31a:	ef 68 ff fd 	st.b	r7[-3],r8
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
8000b31e:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000b322:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000b326:	4e b8       	lddpc	r8,8000b4d0 <udi_cdc_tx_send+0x22c>
8000b328:	a1 7a       	lsl	r10,0x1
8000b32a:	f4 09 00 09 	add	r9,r10,r9
8000b32e:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000b332:	58 08       	cp.w	r8,0
8000b334:	c2 71       	brne	8000b382 <udi_cdc_tx_send+0xde>
		sof_zlp_counter++;
8000b336:	4e 88       	lddpc	r8,8000b4d4 <udi_cdc_tx_send+0x230>
8000b338:	90 08       	ld.sh	r8,r8[0x0]
8000b33a:	2f f8       	sub	r8,-1
8000b33c:	5c 88       	casts.h	r8
8000b33e:	4e 69       	lddpc	r9,8000b4d4 <udi_cdc_tx_send+0x230>
8000b340:	b2 08       	st.h	r9[0x0],r8
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
8000b342:	f0 1f 00 5e 	mcall	8000b4b8 <udi_cdc_tx_send+0x214>
8000b346:	18 98       	mov	r8,r12
8000b348:	ec 18 00 01 	eorl	r8,0x1
8000b34c:	5c 58       	castu.b	r8
8000b34e:	c0 80       	breq	8000b35e <udi_cdc_tx_send+0xba>
8000b350:	4e 18       	lddpc	r8,8000b4d4 <udi_cdc_tx_send+0x230>
8000b352:	90 09       	ld.sh	r9,r8[0x0]
8000b354:	36 38       	mov	r8,99
8000b356:	f0 09 19 00 	cp.h	r9,r8
8000b35a:	e0 88 00 0f 	brls	8000b378 <udi_cdc_tx_send+0xd4>
8000b35e:	f0 1f 00 57 	mcall	8000b4b8 <udi_cdc_tx_send+0x214>
8000b362:	18 98       	mov	r8,r12
8000b364:	58 08       	cp.w	r8,0
8000b366:	c0 e0       	breq	8000b382 <udi_cdc_tx_send+0xde>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
8000b368:	4d b8       	lddpc	r8,8000b4d4 <udi_cdc_tx_send+0x230>
8000b36a:	90 09       	ld.sh	r9,r8[0x0]

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
		sof_zlp_counter++;
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
8000b36c:	e0 68 03 1f 	mov	r8,799
8000b370:	f0 09 19 00 	cp.h	r9,r8
8000b374:	e0 8b 00 07 	brhi	8000b382 <udi_cdc_tx_send+0xde>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
			cpu_irq_restore(flags);
8000b378:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b37c:	f0 1f 00 57 	mcall	8000b4d8 <udi_cdc_tx_send+0x234>
			return;
8000b380:	c9 68       	rjmp	8000b4ac <udi_cdc_tx_send+0x208>
		}
	}
	sof_zlp_counter = 0;
8000b382:	4d 59       	lddpc	r9,8000b4d4 <udi_cdc_tx_send+0x230>
8000b384:	30 08       	mov	r8,0
8000b386:	b2 08       	st.h	r9[0x0],r8

	if (!udi_cdc_tx_both_buf_to_send[port]) {
8000b388:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b38c:	4d 49       	lddpc	r9,8000b4dc <udi_cdc_tx_send+0x238>
8000b38e:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000b392:	5c 58       	castu.b	r8
8000b394:	ec 18 00 01 	eorl	r8,0x1
8000b398:	5c 58       	castu.b	r8
8000b39a:	c0 d0       	breq	8000b3b4 <udi_cdc_tx_send+0x110>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
8000b39c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000b3a0:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000b3a4:	30 08       	mov	r8,0
8000b3a6:	f0 09 18 00 	cp.b	r9,r8
8000b3aa:	5f 08       	sreq	r8
8000b3ac:	4c 89       	lddpc	r9,8000b4cc <udi_cdc_tx_send+0x228>
8000b3ae:	f2 0a 0b 08 	st.b	r9[r10],r8
8000b3b2:	c0 98       	rjmp	8000b3c4 <udi_cdc_tx_send+0x120>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
8000b3b4:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000b3b8:	30 08       	mov	r8,0
8000b3ba:	f0 09 18 00 	cp.b	r9,r8
8000b3be:	5f 08       	sreq	r8
8000b3c0:	ef 68 ff fd 	st.b	r7[-3],r8
	}
	udi_cdc_tx_trans_ongoing[port] = true;
8000b3c4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000b3c8:	4b ba       	lddpc	r10,8000b4b4 <udi_cdc_tx_send+0x210>
8000b3ca:	30 18       	mov	r8,1
8000b3cc:	f4 09 0b 08 	st.b	r10[r9],r8
	cpu_irq_restore(flags);
8000b3d0:	ee fc ff f8 	ld.w	r12,r7[-8]
8000b3d4:	f0 1f 00 41 	mcall	8000b4d8 <udi_cdc_tx_send+0x234>

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
8000b3d8:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000b3dc:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000b3e0:	4b c8       	lddpc	r8,8000b4d0 <udi_cdc_tx_send+0x22c>
8000b3e2:	a1 7a       	lsl	r10,0x1
8000b3e4:	f4 09 00 09 	add	r9,r10,r9
8000b3e8:	f0 09 04 19 	ld.sh	r9,r8[r9<<0x1]
8000b3ec:	e0 68 01 40 	mov	r8,320
8000b3f0:	f0 09 19 00 	cp.h	r9,r8
8000b3f4:	5f 18       	srne	r8
8000b3f6:	ef 68 ff fe 	st.b	r7[-2],r8
	if (b_short_packet) {
8000b3fa:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b3fe:	30 08       	mov	r8,0
8000b400:	f0 09 18 00 	cp.b	r9,r8
8000b404:	c1 a0       	breq	8000b438 <udi_cdc_tx_send+0x194>
		if (udd_is_high_speed()) {
8000b406:	f0 1f 00 2d 	mcall	8000b4b8 <udi_cdc_tx_send+0x214>
8000b40a:	18 98       	mov	r8,r12
8000b40c:	58 08       	cp.w	r8,0
8000b40e:	c0 b0       	breq	8000b424 <udi_cdc_tx_send+0x180>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
8000b410:	ef 36 ff f4 	ld.ub	r6,r7[-12]
8000b414:	f0 1f 00 2b 	mcall	8000b4c0 <udi_cdc_tx_send+0x21c>
8000b418:	18 98       	mov	r8,r12
8000b41a:	5c 88       	casts.h	r8
8000b41c:	4a 89       	lddpc	r9,8000b4bc <udi_cdc_tx_send+0x218>
8000b41e:	f2 06 0a 18 	st.h	r9[r6<<0x1],r8
8000b422:	c1 18       	rjmp	8000b444 <udi_cdc_tx_send+0x1a0>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
8000b424:	ef 36 ff f4 	ld.ub	r6,r7[-12]
8000b428:	f0 1f 00 27 	mcall	8000b4c4 <udi_cdc_tx_send+0x220>
8000b42c:	18 98       	mov	r8,r12
8000b42e:	5c 88       	casts.h	r8
8000b430:	4a 39       	lddpc	r9,8000b4bc <udi_cdc_tx_send+0x218>
8000b432:	f2 06 0a 18 	st.h	r9[r6<<0x1],r8
8000b436:	c0 78       	rjmp	8000b444 <udi_cdc_tx_send+0x1a0>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
8000b438:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000b43c:	4a 09       	lddpc	r9,8000b4bc <udi_cdc_tx_send+0x218>
8000b43e:	30 08       	mov	r8,0
8000b440:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	}

	// Send the buffer with enable of short packet
	switch (port) {
8000b444:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000b448:	58 08       	cp.w	r8,0
8000b44a:	c0 51       	brne	8000b454 <udi_cdc_tx_send+0x1b0>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
8000b44c:	38 18       	mov	r8,-127
8000b44e:	ef 68 ff ff 	st.b	r7[-1],r8
8000b452:	c0 48       	rjmp	8000b45a <udi_cdc_tx_send+0x1b6>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
8000b454:	38 18       	mov	r8,-127
8000b456:	ef 68 ff ff 	st.b	r7[-1],r8
		break;
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
8000b45a:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8000b45e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000b462:	49 c8       	lddpc	r8,8000b4d0 <udi_cdc_tx_send+0x22c>
8000b464:	a1 7a       	lsl	r10,0x1
8000b466:	f4 09 00 09 	add	r9,r10,r9
8000b46a:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
8000b46e:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
8000b472:	49 ca       	lddpc	r10,8000b4e0 <udi_cdc_tx_send+0x23c>
8000b474:	ef 39 ff f4 	ld.ub	r9,r7[-12]
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
8000b478:	12 98       	mov	r8,r9
8000b47a:	a3 68       	lsl	r8,0x2
8000b47c:	12 08       	add	r8,r9
8000b47e:	a7 78       	lsl	r8,0x7
8000b480:	10 9b       	mov	r11,r8
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
8000b482:	ef 39 ff fd 	ld.ub	r9,r7[-3]
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
8000b486:	12 98       	mov	r8,r9
8000b488:	a3 68       	lsl	r8,0x2
8000b48a:	12 08       	add	r8,r9
8000b48c:	a7 68       	lsl	r8,0x6
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
		break;
	}
	udd_ep_run( ep,
8000b48e:	f6 08 00 08 	add	r8,r11,r8
8000b492:	10 0a       	add	r10,r8
8000b494:	ef 3b ff fe 	ld.ub	r11,r7[-2]
8000b498:	ef 3c ff ff 	ld.ub	r12,r7[-1]
8000b49c:	49 28       	lddpc	r8,8000b4e4 <udi_cdc_tx_send+0x240>
8000b49e:	1c 99       	mov	r9,lr
8000b4a0:	f0 1f 00 12 	mcall	8000b4e8 <udi_cdc_tx_send+0x244>
8000b4a4:	c0 48       	rjmp	8000b4ac <udi_cdc_tx_send+0x208>
#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
		return; // Already on going or wait next SOF to send next data
8000b4a6:	d7 03       	nop
8000b4a8:	c0 28       	rjmp	8000b4ac <udi_cdc_tx_send+0x208>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
			return; // Wait next SOF to send next data
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
			return; // Wait next SOF to send next data
8000b4aa:	d7 03       	nop
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
8000b4ac:	2f dd       	sub	sp,-12
8000b4ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000b4b2:	00 00       	add	r0,r0
8000b4b4:	00 00       	add	r0,r0
8000b4b6:	0c 6c       	and	r12,r6
8000b4b8:	80 00       	ld.sh	r0,r0[0x0]
8000b4ba:	8b 84       	st.w	r5[0x20],r4
8000b4bc:	00 00       	add	r0,r0
8000b4be:	0c 68       	and	r8,r6
8000b4c0:	80 00       	ld.sh	r0,r0[0x0]
8000b4c2:	8c 12       	ld.sh	r2,r6[0x2]
8000b4c4:	80 00       	ld.sh	r0,r0[0x0]
8000b4c6:	8b f8       	st.w	r5[0x3c],r8
8000b4c8:	80 00       	ld.sh	r0,r0[0x0]
8000b4ca:	ab 00       	ld.d	r0,r5
8000b4cc:	00 00       	add	r0,r0
8000b4ce:	0c 64       	and	r4,r6
8000b4d0:	00 00       	add	r0,r0
8000b4d2:	0c 60       	and	r0,r6
8000b4d4:	00 00       	add	r0,r0
8000b4d6:	0c 74       	tst	r4,r6
8000b4d8:	80 00       	ld.sh	r0,r0[0x0]
8000b4da:	ab 40       	asr	r0,0xa
8000b4dc:	00 00       	add	r0,r0
8000b4de:	0c 70       	tst	r0,r6
8000b4e0:	00 00       	add	r0,r0
8000b4e2:	09 e0       	ld.ub	r0,r4[0x6]
8000b4e4:	80 00       	ld.sh	r0,r0[0x0]
8000b4e6:	b2 08       	st.h	r9[0x0],r8
8000b4e8:	80 00       	ld.sh	r0,r0[0x0]
8000b4ea:	92 c8       	ld.uh	r8,r9[0x8]

8000b4ec <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
8000b4ec:	eb cd 40 80 	pushm	r7,lr
8000b4f0:	1a 97       	mov	r7,sp
8000b4f2:	20 4d       	sub	sp,16
8000b4f4:	18 98       	mov	r8,r12
8000b4f6:	ef 68 ff f0 	st.b	r7[-16],r8
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000b4fa:	30 08       	mov	r8,0
8000b4fc:	ef 68 ff f0 	st.b	r7[-16],r8
#endif
	flags = cpu_irq_save();
8000b500:	f0 1f 00 17 	mcall	8000b55c <udi_cdc_multi_get_nb_received_data+0x70>
8000b504:	18 98       	mov	r8,r12
8000b506:	ef 48 ff f4 	st.w	r7[-12],r8
	pos = udi_cdc_rx_pos[port];
8000b50a:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000b50e:	49 58       	lddpc	r8,8000b560 <udi_cdc_multi_get_nb_received_data+0x74>
8000b510:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000b514:	ef 58 ff fa 	st.h	r7[-6],r8
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
8000b518:	ef 3a ff f0 	ld.ub	r10,r7[-16]
8000b51c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000b520:	49 19       	lddpc	r9,8000b564 <udi_cdc_multi_get_nb_received_data+0x78>
8000b522:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000b526:	5c 58       	castu.b	r8
8000b528:	10 99       	mov	r9,r8
8000b52a:	49 08       	lddpc	r8,8000b568 <udi_cdc_multi_get_nb_received_data+0x7c>
8000b52c:	a1 7a       	lsl	r10,0x1
8000b52e:	f4 09 00 09 	add	r9,r10,r9
8000b532:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000b536:	5c 88       	casts.h	r8
8000b538:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000b53c:	ef 18 ff fa 	ld.uh	r8,r7[-6]
8000b540:	f2 08 01 08 	sub	r8,r9,r8
8000b544:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_restore(flags);
8000b548:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b54c:	f0 1f 00 08 	mcall	8000b56c <udi_cdc_multi_get_nb_received_data+0x80>
	return nb_received;
8000b550:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000b554:	10 9c       	mov	r12,r8
8000b556:	2f cd       	sub	sp,-16
8000b558:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b55c:	80 00       	ld.sh	r0,r0[0x0]
8000b55e:	ab 00       	ld.d	r0,r5
8000b560:	00 00       	add	r0,r0
8000b562:	09 d8       	ld.ub	r8,r4[0x5]
8000b564:	00 00       	add	r0,r0
8000b566:	09 d4       	ld.ub	r4,r4[0x5]
8000b568:	00 00       	add	r0,r0
8000b56a:	09 d0       	ld.ub	r0,r4[0x5]
8000b56c:	80 00       	ld.sh	r0,r0[0x0]
8000b56e:	ab 40       	asr	r0,0xa

8000b570 <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
8000b570:	eb cd 40 80 	pushm	r7,lr
8000b574:	1a 97       	mov	r7,sp
8000b576:	20 1d       	sub	sp,4
8000b578:	18 98       	mov	r8,r12
8000b57a:	ef 68 ff fc 	st.b	r7[-4],r8
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
8000b57e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b582:	10 9c       	mov	r12,r8
8000b584:	f0 1f 00 05 	mcall	8000b598 <udi_cdc_multi_is_rx_ready+0x28>
8000b588:	18 98       	mov	r8,r12
8000b58a:	58 08       	cp.w	r8,0
8000b58c:	5f 18       	srne	r8
8000b58e:	5c 58       	castu.b	r8
}
8000b590:	10 9c       	mov	r12,r8
8000b592:	2f fd       	sub	sp,-4
8000b594:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b598:	80 00       	ld.sh	r0,r0[0x0]
8000b59a:	b4 ec       	st.b	r10[0x6],r12

8000b59c <udi_cdc_is_rx_ready>:

bool udi_cdc_is_rx_ready(void)
{
8000b59c:	eb cd 40 80 	pushm	r7,lr
8000b5a0:	1a 97       	mov	r7,sp
	return udi_cdc_multi_is_rx_ready(0);
8000b5a2:	30 0c       	mov	r12,0
8000b5a4:	f0 1f 00 03 	mcall	8000b5b0 <udi_cdc_is_rx_ready+0x14>
8000b5a8:	18 98       	mov	r8,r12
}
8000b5aa:	10 9c       	mov	r12,r8
8000b5ac:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b5b0:	80 00       	ld.sh	r0,r0[0x0]
8000b5b2:	b5 70       	lsl	r0,0x15

8000b5b4 <udi_cdc_multi_getc>:

int udi_cdc_multi_getc(uint8_t port)
{
8000b5b4:	eb cd 40 80 	pushm	r7,lr
8000b5b8:	1a 97       	mov	r7,sp
8000b5ba:	20 5d       	sub	sp,20
8000b5bc:	18 98       	mov	r8,r12
8000b5be:	ef 68 ff ec 	st.b	r7[-20],r8
	irqflags_t flags;
	int rx_data = 0;
8000b5c2:	30 08       	mov	r8,0
8000b5c4:	ef 48 ff f4 	st.w	r7[-12],r8
	uint16_t pos;
	uint8_t buf_sel;
	bool again;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000b5c8:	30 08       	mov	r8,0
8000b5ca:	ef 68 ff ec 	st.b	r7[-20],r8
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
8000b5ce:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b5d2:	4c 5a       	lddpc	r10,8000b6e4 <udi_cdc_multi_getc+0x130>
8000b5d4:	12 98       	mov	r8,r9
8000b5d6:	a3 78       	lsl	r8,0x3
8000b5d8:	12 18       	sub	r8,r9
8000b5da:	f4 08 00 08 	add	r8,r10,r8
8000b5de:	2f c8       	sub	r8,-4
8000b5e0:	11 a9       	ld.ub	r9,r8[0x2]
8000b5e2:	30 98       	mov	r8,9
8000b5e4:	f0 09 18 00 	cp.b	r9,r8
8000b5e8:	5f 08       	sreq	r8
8000b5ea:	ef 68 ff fb 	st.b	r7[-5],r8
8000b5ee:	c0 28       	rjmp	8000b5f2 <udi_cdc_multi_getc+0x3e>
	cpu_irq_restore(flags);
	while (again) {
		if (!udi_cdc_data_running) {
			return 0;
		}
		goto udi_cdc_getc_process_one_byte;
8000b5f0:	d7 03       	nop

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
8000b5f2:	f0 1f 00 3e 	mcall	8000b6e8 <udi_cdc_multi_getc+0x134>
8000b5f6:	18 98       	mov	r8,r12
8000b5f8:	ef 48 ff f0 	st.w	r7[-16],r8
	pos = udi_cdc_rx_pos[port];
8000b5fc:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b600:	4b b8       	lddpc	r8,8000b6ec <udi_cdc_multi_getc+0x138>
8000b602:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000b606:	ef 58 ff fc 	st.h	r7[-4],r8
	buf_sel = udi_cdc_rx_buf_sel[port];
8000b60a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b60e:	4b 99       	lddpc	r9,8000b6f0 <udi_cdc_multi_getc+0x13c>
8000b610:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000b614:	ef 68 ff fe 	st.b	r7[-2],r8
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
8000b618:	ef 3a ff ec 	ld.ub	r10,r7[-20]
8000b61c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b620:	4b 58       	lddpc	r8,8000b6f4 <udi_cdc_multi_getc+0x140>
8000b622:	a1 7a       	lsl	r10,0x1
8000b624:	f4 09 00 09 	add	r9,r10,r9
8000b628:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000b62c:	5c 88       	casts.h	r8
8000b62e:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000b632:	f0 09 19 00 	cp.h	r9,r8
8000b636:	5f 28       	srhs	r8
8000b638:	ef 68 ff ff 	st.b	r7[-1],r8
	cpu_irq_restore(flags);
8000b63c:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b640:	f0 1f 00 2e 	mcall	8000b6f8 <udi_cdc_multi_getc+0x144>
	while (again) {
8000b644:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b648:	30 08       	mov	r8,0
8000b64a:	f0 09 18 00 	cp.b	r9,r8
8000b64e:	c0 a0       	breq	8000b662 <udi_cdc_multi_getc+0xae>
		if (!udi_cdc_data_running) {
8000b650:	4a b8       	lddpc	r8,8000b6fc <udi_cdc_multi_getc+0x148>
8000b652:	11 88       	ld.ub	r8,r8[0x0]
8000b654:	5c 58       	castu.b	r8
8000b656:	ec 18 00 01 	eorl	r8,0x1
8000b65a:	5c 58       	castu.b	r8
8000b65c:	cc a0       	breq	8000b5f0 <udi_cdc_multi_getc+0x3c>
			return 0;
8000b65e:	30 08       	mov	r8,0
8000b660:	c3 d8       	rjmp	8000b6da <udi_cdc_multi_getc+0x126>
		}
		goto udi_cdc_getc_process_one_byte;
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
8000b662:	ef 3a ff ec 	ld.ub	r10,r7[-20]
8000b666:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000b66a:	ef 1b ff fc 	ld.uh	r11,r7[-4]
8000b66e:	4a 5c       	lddpc	r12,8000b700 <udi_cdc_multi_getc+0x14c>
8000b670:	10 99       	mov	r9,r8
8000b672:	a3 69       	lsl	r9,0x2
8000b674:	10 09       	add	r9,r8
8000b676:	f2 08 15 06 	lsl	r8,r9,0x6
8000b67a:	10 99       	mov	r9,r8
8000b67c:	14 98       	mov	r8,r10
8000b67e:	a3 68       	lsl	r8,0x2
8000b680:	14 08       	add	r8,r10
8000b682:	a7 78       	lsl	r8,0x7
8000b684:	f2 08 00 08 	add	r8,r9,r8
8000b688:	f8 08 00 08 	add	r8,r12,r8
8000b68c:	16 08       	add	r8,r11
8000b68e:	11 88       	ld.ub	r8,r8[0x0]
8000b690:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b694:	f3 e8 10 08 	or	r8,r9,r8
8000b698:	ef 48 ff f4 	st.w	r7[-12],r8
	udi_cdc_rx_pos[port] = pos+1;
8000b69c:	ef 3a ff ec 	ld.ub	r10,r7[-20]
8000b6a0:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8000b6a4:	2f f8       	sub	r8,-1
8000b6a6:	5c 88       	casts.h	r8
8000b6a8:	49 19       	lddpc	r9,8000b6ec <udi_cdc_multi_getc+0x138>
8000b6aa:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8

	udi_cdc_rx_start(port);
8000b6ae:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b6b2:	10 9c       	mov	r12,r8
8000b6b4:	f0 1f 00 14 	mcall	8000b704 <udi_cdc_multi_getc+0x150>

	if (b_databit_9) {
8000b6b8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000b6bc:	30 08       	mov	r8,0
8000b6be:	f0 09 18 00 	cp.b	r9,r8
8000b6c2:	c0 a0       	breq	8000b6d6 <udi_cdc_multi_getc+0x122>
		// Receive MSB
		b_databit_9 = false;
8000b6c4:	30 08       	mov	r8,0
8000b6c6:	ef 68 ff fb 	st.b	r7[-5],r8
		rx_data = rx_data << 8;
8000b6ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b6ce:	a9 68       	lsl	r8,0x8
8000b6d0:	ef 48 ff f4 	st.w	r7[-12],r8
		goto udi_cdc_getc_process_one_byte;
8000b6d4:	c8 fb       	rjmp	8000b5f2 <udi_cdc_multi_getc+0x3e>
	}
	return rx_data;
8000b6d6:	ee f8 ff f4 	ld.w	r8,r7[-12]
}
8000b6da:	10 9c       	mov	r12,r8
8000b6dc:	2f bd       	sub	sp,-20
8000b6de:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b6e2:	00 00       	add	r0,r0
8000b6e4:	00 00       	add	r0,r0
8000b6e6:	07 34       	ld.ub	r4,r3++
8000b6e8:	80 00       	ld.sh	r0,r0[0x0]
8000b6ea:	ab 00       	ld.d	r0,r5
8000b6ec:	00 00       	add	r0,r0
8000b6ee:	09 d8       	ld.ub	r8,r4[0x5]
8000b6f0:	00 00       	add	r0,r0
8000b6f2:	09 d4       	ld.ub	r4,r4[0x5]
8000b6f4:	00 00       	add	r0,r0
8000b6f6:	09 d0       	ld.ub	r0,r4[0x5]
8000b6f8:	80 00       	ld.sh	r0,r0[0x0]
8000b6fa:	ab 40       	asr	r0,0xa
8000b6fc:	00 00       	add	r0,r0
8000b6fe:	07 4e       	ld.w	lr,--r3
8000b700:	00 00       	add	r0,r0
8000b702:	07 50       	ld.sh	r0,--r3
8000b704:	80 00       	ld.sh	r0,r0[0x0]
8000b706:	af fc       	*unknown*

8000b708 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
8000b708:	eb cd 40 80 	pushm	r7,lr
8000b70c:	1a 97       	mov	r7,sp
	return udi_cdc_multi_getc(0);
8000b70e:	30 0c       	mov	r12,0
8000b710:	f0 1f 00 03 	mcall	8000b71c <udi_cdc_getc+0x14>
8000b714:	18 98       	mov	r8,r12
}
8000b716:	10 9c       	mov	r12,r8
8000b718:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b71c:	80 00       	ld.sh	r0,r0[0x0]
8000b71e:	b5 b4       	sbr	r4,0x15

8000b720 <udi_cdc_multi_read_buf>:

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
8000b720:	eb cd 40 80 	pushm	r7,lr
8000b724:	1a 97       	mov	r7,sp
8000b726:	20 7d       	sub	sp,28
8000b728:	18 98       	mov	r8,r12
8000b72a:	ef 4b ff e8 	st.w	r7[-24],r11
8000b72e:	ef 4a ff e4 	st.w	r7[-28],r10
8000b732:	ef 68 ff ec 	st.b	r7[-20],r8
	irqflags_t flags;
	uint8_t *ptr_buf = (uint8_t *)buf;
8000b736:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000b73a:	ef 48 ff f4 	st.w	r7[-12],r8
	uint16_t pos;
	uint8_t buf_sel;
	bool again;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000b73e:	30 08       	mov	r8,0
8000b740:	ef 68 ff ec 	st.b	r7[-20],r8
8000b744:	c0 48       	rjmp	8000b74c <udi_cdc_multi_read_buf+0x2c>
	cpu_irq_restore(flags);
	while (again) {
		if (!udi_cdc_data_running) {
			return size;
		}
		goto udi_cdc_read_buf_loop_wait;
8000b746:	d7 03       	nop
8000b748:	c0 28       	rjmp	8000b74c <udi_cdc_multi_read_buf+0x2c>
	ptr_buf += copy_nb;
	size -= copy_nb;
	udi_cdc_rx_start(port);

	if (size) {
		goto udi_cdc_read_buf_loop_wait;
8000b74a:	d7 03       	nop
	port = 0;
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
8000b74c:	f0 1f 00 52 	mcall	8000b894 <udi_cdc_multi_read_buf+0x174>
8000b750:	18 98       	mov	r8,r12
8000b752:	ef 48 ff f0 	st.w	r7[-16],r8
	pos = udi_cdc_rx_pos[port];
8000b756:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b75a:	4d 08       	lddpc	r8,8000b898 <udi_cdc_multi_read_buf+0x178>
8000b75c:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000b760:	ef 58 ff fc 	st.h	r7[-4],r8
	buf_sel = udi_cdc_rx_buf_sel[port];
8000b764:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b768:	4c d9       	lddpc	r9,8000b89c <udi_cdc_multi_read_buf+0x17c>
8000b76a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000b76e:	ef 68 ff fe 	st.b	r7[-2],r8
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
8000b772:	ef 3a ff ec 	ld.ub	r10,r7[-20]
8000b776:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b77a:	4c a8       	lddpc	r8,8000b8a0 <udi_cdc_multi_read_buf+0x180>
8000b77c:	a1 7a       	lsl	r10,0x1
8000b77e:	f4 09 00 09 	add	r9,r10,r9
8000b782:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000b786:	5c 88       	casts.h	r8
8000b788:	ef 09 ff fc 	ld.sh	r9,r7[-4]
8000b78c:	f0 09 19 00 	cp.h	r9,r8
8000b790:	5f 28       	srhs	r8
8000b792:	ef 68 ff ff 	st.b	r7[-1],r8
	cpu_irq_restore(flags);
8000b796:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b79a:	f0 1f 00 43 	mcall	8000b8a4 <udi_cdc_multi_read_buf+0x184>
	while (again) {
8000b79e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b7a2:	30 08       	mov	r8,0
8000b7a4:	f0 09 18 00 	cp.b	r9,r8
8000b7a8:	c0 b0       	breq	8000b7be <udi_cdc_multi_read_buf+0x9e>
		if (!udi_cdc_data_running) {
8000b7aa:	4c 08       	lddpc	r8,8000b8a8 <udi_cdc_multi_read_buf+0x188>
8000b7ac:	11 88       	ld.ub	r8,r8[0x0]
8000b7ae:	5c 58       	castu.b	r8
8000b7b0:	ec 18 00 01 	eorl	r8,0x1
8000b7b4:	5c 58       	castu.b	r8
8000b7b6:	cc 80       	breq	8000b746 <udi_cdc_multi_read_buf+0x26>
			return size;
8000b7b8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000b7bc:	c6 88       	rjmp	8000b88c <udi_cdc_multi_read_buf+0x16c>
		}
		goto udi_cdc_read_buf_loop_wait;
	}

	// Read data
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
8000b7be:	ef 3a ff ec 	ld.ub	r10,r7[-20]
8000b7c2:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b7c6:	4b 78       	lddpc	r8,8000b8a0 <udi_cdc_multi_read_buf+0x180>
8000b7c8:	a1 7a       	lsl	r10,0x1
8000b7ca:	f4 09 00 09 	add	r9,r10,r9
8000b7ce:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000b7d2:	5c 88       	casts.h	r8
8000b7d4:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000b7d8:	ef 18 ff fc 	ld.uh	r8,r7[-4]
8000b7dc:	f2 08 01 08 	sub	r8,r9,r8
8000b7e0:	ef 48 ff f8 	st.w	r7[-8],r8
	if (copy_nb>size) {
8000b7e4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b7e8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000b7ec:	10 39       	cp.w	r9,r8
8000b7ee:	e0 88 00 06 	brls	8000b7fa <udi_cdc_multi_read_buf+0xda>
		copy_nb = size;
8000b7f2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000b7f6:	ef 48 ff f8 	st.w	r7[-8],r8
	}
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
8000b7fa:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b7fe:	12 98       	mov	r8,r9
8000b800:	a3 68       	lsl	r8,0x2
8000b802:	12 08       	add	r8,r9
8000b804:	a7 78       	lsl	r8,0x7
8000b806:	10 9a       	mov	r10,r8
8000b808:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000b80c:	12 98       	mov	r8,r9
8000b80e:	a3 68       	lsl	r8,0x2
8000b810:	12 08       	add	r8,r9
8000b812:	a7 68       	lsl	r8,0x6
8000b814:	f4 08 00 09 	add	r9,r10,r8
8000b818:	ef 18 ff fc 	ld.uh	r8,r7[-4]
8000b81c:	10 09       	add	r9,r8
8000b81e:	4a 48       	lddpc	r8,8000b8ac <udi_cdc_multi_read_buf+0x18c>
8000b820:	f2 08 00 08 	add	r8,r9,r8
8000b824:	ee fa ff f8 	ld.w	r10,r7[-8]
8000b828:	10 9b       	mov	r11,r8
8000b82a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b82e:	f0 1f 00 21 	mcall	8000b8b0 <udi_cdc_multi_read_buf+0x190>
	udi_cdc_rx_pos[port] += copy_nb;
8000b832:	ef 3a ff ec 	ld.ub	r10,r7[-20]
8000b836:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b83a:	49 88       	lddpc	r8,8000b898 <udi_cdc_multi_read_buf+0x178>
8000b83c:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000b840:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000b844:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b848:	5c 88       	casts.h	r8
8000b84a:	f2 08 00 08 	add	r8,r9,r8
8000b84e:	5c 88       	casts.h	r8
8000b850:	49 29       	lddpc	r9,8000b898 <udi_cdc_multi_read_buf+0x178>
8000b852:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	ptr_buf += copy_nb;
8000b856:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000b85a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b85e:	f2 08 00 08 	add	r8,r9,r8
8000b862:	ef 48 ff f4 	st.w	r7[-12],r8
	size -= copy_nb;
8000b866:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000b86a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b86e:	f2 08 01 08 	sub	r8,r9,r8
8000b872:	ef 48 ff e4 	st.w	r7[-28],r8
	udi_cdc_rx_start(port);
8000b876:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b87a:	10 9c       	mov	r12,r8
8000b87c:	f0 1f 00 0e 	mcall	8000b8b4 <udi_cdc_multi_read_buf+0x194>

	if (size) {
8000b880:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000b884:	58 08       	cp.w	r8,0
8000b886:	fe 91 ff 62 	brne	8000b74a <udi_cdc_multi_read_buf+0x2a>
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
8000b88a:	30 08       	mov	r8,0
}
8000b88c:	10 9c       	mov	r12,r8
8000b88e:	2f 9d       	sub	sp,-28
8000b890:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b894:	80 00       	ld.sh	r0,r0[0x0]
8000b896:	ab 00       	ld.d	r0,r5
8000b898:	00 00       	add	r0,r0
8000b89a:	09 d8       	ld.ub	r8,r4[0x5]
8000b89c:	00 00       	add	r0,r0
8000b89e:	09 d4       	ld.ub	r4,r4[0x5]
8000b8a0:	00 00       	add	r0,r0
8000b8a2:	09 d0       	ld.ub	r0,r4[0x5]
8000b8a4:	80 00       	ld.sh	r0,r0[0x0]
8000b8a6:	ab 40       	asr	r0,0xa
8000b8a8:	00 00       	add	r0,r0
8000b8aa:	07 4e       	ld.w	lr,--r3
8000b8ac:	00 00       	add	r0,r0
8000b8ae:	07 50       	ld.sh	r0,--r3
8000b8b0:	80 00       	ld.sh	r0,r0[0x0]
8000b8b2:	d8 b2       	popm	r0-r7,r10,pc
8000b8b4:	80 00       	ld.sh	r0,r0[0x0]
8000b8b6:	af fc       	*unknown*

8000b8b8 <udi_cdc_read_buf>:

iram_size_t udi_cdc_read_buf(void* buf, iram_size_t size)
{
8000b8b8:	eb cd 40 80 	pushm	r7,lr
8000b8bc:	1a 97       	mov	r7,sp
8000b8be:	20 2d       	sub	sp,8
8000b8c0:	ef 4c ff fc 	st.w	r7[-4],r12
8000b8c4:	ef 4b ff f8 	st.w	r7[-8],r11
	return udi_cdc_multi_read_buf(0, buf, size);
8000b8c8:	ee fa ff f8 	ld.w	r10,r7[-8]
8000b8cc:	ee fb ff fc 	ld.w	r11,r7[-4]
8000b8d0:	30 0c       	mov	r12,0
8000b8d2:	f0 1f 00 04 	mcall	8000b8e0 <udi_cdc_read_buf+0x28>
8000b8d6:	18 98       	mov	r8,r12
}
8000b8d8:	10 9c       	mov	r12,r8
8000b8da:	2f ed       	sub	sp,-8
8000b8dc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b8e0:	80 00       	ld.sh	r0,r0[0x0]
8000b8e2:	b7 20       	st.d	r11++,r0

8000b8e4 <udi_cdc_multi_get_free_tx_buffer>:

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
8000b8e4:	eb cd 40 80 	pushm	r7,lr
8000b8e8:	1a 97       	mov	r7,sp
8000b8ea:	20 5d       	sub	sp,20
8000b8ec:	18 98       	mov	r8,r12
8000b8ee:	ef 68 ff ec 	st.b	r7[-20],r8
	irqflags_t flags;
	iram_size_t buf_sel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000b8f2:	30 08       	mov	r8,0
8000b8f4:	ef 68 ff ec 	st.b	r7[-20],r8
#endif

	flags = cpu_irq_save();
8000b8f8:	f0 1f 00 2c 	mcall	8000b9a8 <udi_cdc_multi_get_free_tx_buffer+0xc4>
8000b8fc:	18 98       	mov	r8,r12
8000b8fe:	ef 48 ff f0 	st.w	r7[-16],r8
	buf_sel = udi_cdc_tx_buf_sel[port];
8000b902:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b906:	4a a9       	lddpc	r9,8000b9ac <udi_cdc_multi_get_free_tx_buffer+0xc8>
8000b908:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000b90c:	ef 68 ff ff 	st.b	r7[-1],r8
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
8000b910:	ef 3a ff ec 	ld.ub	r10,r7[-20]
8000b914:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b918:	4a 68       	lddpc	r8,8000b9b0 <udi_cdc_multi_get_free_tx_buffer+0xcc>
8000b91a:	a1 7a       	lsl	r10,0x1
8000b91c:	f4 09 00 09 	add	r9,r10,r9
8000b920:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
8000b924:	5c 78       	castu.h	r8
8000b926:	ef 48 ff f4 	st.w	r7[-12],r8
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
8000b92a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b92e:	e0 48 01 40 	cp.w	r8,320
8000b932:	c2 91       	brne	8000b984 <udi_cdc_multi_get_free_tx_buffer+0xa0>
		if ((!udi_cdc_tx_trans_ongoing[port])
8000b934:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000b938:	49 f9       	lddpc	r9,8000b9b4 <udi_cdc_multi_get_free_tx_buffer+0xd0>
8000b93a:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000b93e:	5c 58       	castu.b	r8
8000b940:	ec 18 00 01 	eorl	r8,0x1
8000b944:	5c 58       	castu.b	r8
8000b946:	c1 f0       	breq	8000b984 <udi_cdc_multi_get_free_tx_buffer+0xa0>
8000b948:	ef 38 ff ec 	ld.ub	r8,r7[-20]
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
8000b94c:	49 b9       	lddpc	r9,8000b9b8 <udi_cdc_multi_get_free_tx_buffer+0xd4>
8000b94e:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000b952:	5c 58       	castu.b	r8

	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
		if ((!udi_cdc_tx_trans_ongoing[port])
8000b954:	ec 18 00 01 	eorl	r8,0x1
8000b958:	5c 58       	castu.b	r8
8000b95a:	c1 50       	breq	8000b984 <udi_cdc_multi_get_free_tx_buffer+0xa0>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
8000b95c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8000b960:	49 6a       	lddpc	r10,8000b9b8 <udi_cdc_multi_get_free_tx_buffer+0xd4>
8000b962:	30 18       	mov	r8,1
8000b964:	f4 09 0b 08 	st.b	r10[r9],r8
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
8000b968:	ef 3a ff ec 	ld.ub	r10,r7[-20]
8000b96c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000b970:	30 08       	mov	r8,0
8000b972:	f0 09 18 00 	cp.b	r9,r8
8000b976:	5f 08       	sreq	r8
8000b978:	48 d9       	lddpc	r9,8000b9ac <udi_cdc_multi_get_free_tx_buffer+0xc8>
8000b97a:	f2 0a 0b 08 	st.b	r9[r10],r8
			buf_sel_nb = 0;
8000b97e:	30 08       	mov	r8,0
8000b980:	ef 48 ff f4 	st.w	r7[-12],r8
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
8000b984:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b988:	e0 69 01 40 	mov	r9,320
8000b98c:	10 19       	sub	r9,r8
8000b98e:	ef 49 ff f8 	st.w	r7[-8],r9
	cpu_irq_restore(flags);
8000b992:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b996:	f0 1f 00 0a 	mcall	8000b9bc <udi_cdc_multi_get_free_tx_buffer+0xd8>
	return retval;
8000b99a:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8000b99e:	10 9c       	mov	r12,r8
8000b9a0:	2f bd       	sub	sp,-20
8000b9a2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b9a6:	00 00       	add	r0,r0
8000b9a8:	80 00       	ld.sh	r0,r0[0x0]
8000b9aa:	ab 00       	ld.d	r0,r5
8000b9ac:	00 00       	add	r0,r0
8000b9ae:	0c 64       	and	r4,r6
8000b9b0:	00 00       	add	r0,r0
8000b9b2:	0c 60       	and	r0,r6
8000b9b4:	00 00       	add	r0,r0
8000b9b6:	0c 6c       	and	r12,r6
8000b9b8:	00 00       	add	r0,r0
8000b9ba:	0c 70       	tst	r0,r6
8000b9bc:	80 00       	ld.sh	r0,r0[0x0]
8000b9be:	ab 40       	asr	r0,0xa

8000b9c0 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
8000b9c0:	eb cd 40 80 	pushm	r7,lr
8000b9c4:	1a 97       	mov	r7,sp
8000b9c6:	20 1d       	sub	sp,4
8000b9c8:	18 98       	mov	r8,r12
8000b9ca:	ef 68 ff fc 	st.b	r7[-4],r8
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
8000b9ce:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000b9d2:	10 9c       	mov	r12,r8
8000b9d4:	f0 1f 00 05 	mcall	8000b9e8 <udi_cdc_multi_is_tx_ready+0x28>
8000b9d8:	18 98       	mov	r8,r12
8000b9da:	58 08       	cp.w	r8,0
8000b9dc:	5f 18       	srne	r8
8000b9de:	5c 58       	castu.b	r8
}
8000b9e0:	10 9c       	mov	r12,r8
8000b9e2:	2f fd       	sub	sp,-4
8000b9e4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000b9e8:	80 00       	ld.sh	r0,r0[0x0]
8000b9ea:	b8 e4       	st.b	r12[0x6],r4

8000b9ec <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
8000b9ec:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000b9f0:	1a 97       	mov	r7,sp
8000b9f2:	20 4d       	sub	sp,16
8000b9f4:	18 98       	mov	r8,r12
8000b9f6:	ef 4b ff f0 	st.w	r7[-16],r11
8000b9fa:	ef 68 ff f4 	st.b	r7[-12],r8
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
8000b9fe:	30 08       	mov	r8,0
8000ba00:	ef 68 ff f4 	st.b	r7[-12],r8
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
8000ba04:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000ba08:	4b ca       	lddpc	r10,8000baf8 <udi_cdc_multi_putc+0x10c>
8000ba0a:	12 98       	mov	r8,r9
8000ba0c:	a3 78       	lsl	r8,0x3
8000ba0e:	12 18       	sub	r8,r9
8000ba10:	f4 08 00 08 	add	r8,r10,r8
8000ba14:	2f c8       	sub	r8,-4
8000ba16:	11 a9       	ld.ub	r9,r8[0x2]
8000ba18:	30 98       	mov	r8,9
8000ba1a:	f0 09 18 00 	cp.b	r9,r8
8000ba1e:	5f 08       	sreq	r8
8000ba20:	ef 68 ff fe 	st.b	r7[-2],r8
8000ba24:	c0 28       	rjmp	8000ba28 <udi_cdc_multi_putc+0x3c>
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
		if (!udi_cdc_data_running) {
			return false;
		}
		goto udi_cdc_putc_process_one_byte;
8000ba26:	d7 03       	nop

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
8000ba28:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000ba2c:	10 9c       	mov	r12,r8
8000ba2e:	f0 1f 00 34 	mcall	8000bafc <udi_cdc_multi_putc+0x110>
8000ba32:	18 98       	mov	r8,r12
8000ba34:	ec 18 00 01 	eorl	r8,0x1
8000ba38:	5c 58       	castu.b	r8
8000ba3a:	c0 a0       	breq	8000ba4e <udi_cdc_multi_putc+0x62>
		if (!udi_cdc_data_running) {
8000ba3c:	4b 18       	lddpc	r8,8000bb00 <udi_cdc_multi_putc+0x114>
8000ba3e:	11 88       	ld.ub	r8,r8[0x0]
8000ba40:	5c 58       	castu.b	r8
8000ba42:	ec 18 00 01 	eorl	r8,0x1
8000ba46:	5c 58       	castu.b	r8
8000ba48:	ce f0       	breq	8000ba26 <udi_cdc_multi_putc+0x3a>
			return false;
8000ba4a:	30 08       	mov	r8,0
8000ba4c:	c5 18       	rjmp	8000baee <udi_cdc_multi_putc+0x102>
		}
		goto udi_cdc_putc_process_one_byte;
	}

	// Write value
	flags = cpu_irq_save();
8000ba4e:	f0 1f 00 2e 	mcall	8000bb04 <udi_cdc_multi_putc+0x118>
8000ba52:	18 98       	mov	r8,r12
8000ba54:	ef 48 ff f8 	st.w	r7[-8],r8
	buf_sel = udi_cdc_tx_buf_sel[port];
8000ba58:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000ba5c:	4a b9       	lddpc	r9,8000bb08 <udi_cdc_multi_putc+0x11c>
8000ba5e:	f2 08 07 08 	ld.ub	r8,r9[r8]
8000ba62:	ef 68 ff ff 	st.b	r7[-1],r8
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
8000ba66:	ef 3e ff f4 	ld.ub	lr,r7[-12]
8000ba6a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000ba6e:	ef 3c ff f4 	ld.ub	r12,r7[-12]
8000ba72:	ef 3b ff ff 	ld.ub	r11,r7[-1]
8000ba76:	4a 69       	lddpc	r9,8000bb0c <udi_cdc_multi_putc+0x120>
8000ba78:	f8 0a 15 01 	lsl	r10,r12,0x1
8000ba7c:	16 0a       	add	r10,r11
8000ba7e:	f2 0a 04 1a 	ld.sh	r10,r9[r10<<0x1]
8000ba82:	eb da c0 10 	bfextu	r5,r10,0x0,0x10
8000ba86:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000ba8a:	ed d9 c0 08 	bfextu	r6,r9,0x0,0x8
8000ba8e:	4a 13       	lddpc	r3,8000bb10 <udi_cdc_multi_putc+0x124>
8000ba90:	10 99       	mov	r9,r8
8000ba92:	a3 69       	lsl	r9,0x2
8000ba94:	10 09       	add	r9,r8
8000ba96:	f2 08 15 06 	lsl	r8,r9,0x6
8000ba9a:	10 99       	mov	r9,r8
8000ba9c:	1c 98       	mov	r8,lr
8000ba9e:	a3 68       	lsl	r8,0x2
8000baa0:	1c 08       	add	r8,lr
8000baa2:	a7 78       	lsl	r8,0x7
8000baa4:	f2 08 00 08 	add	r8,r9,r8
8000baa8:	e6 08 00 08 	add	r8,r3,r8
8000baac:	f0 05 00 09 	add	r9,r8,r5
8000bab0:	0c 98       	mov	r8,r6
8000bab2:	b2 88       	st.b	r9[0x0],r8
8000bab4:	f4 c8 ff ff 	sub	r8,r10,-1
8000bab8:	5c 88       	casts.h	r8
8000baba:	49 59       	lddpc	r9,8000bb0c <udi_cdc_multi_putc+0x120>
8000babc:	f8 0a 15 01 	lsl	r10,r12,0x1
8000bac0:	16 0a       	add	r10,r11
8000bac2:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
	cpu_irq_restore(flags);
8000bac6:	ee fc ff f8 	ld.w	r12,r7[-8]
8000baca:	f0 1f 00 13 	mcall	8000bb14 <udi_cdc_multi_putc+0x128>

	if (b_databit_9) {
8000bace:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000bad2:	30 08       	mov	r8,0
8000bad4:	f0 09 18 00 	cp.b	r9,r8
8000bad8:	c0 a0       	breq	8000baec <udi_cdc_multi_putc+0x100>
		// Send MSB
		b_databit_9 = false;
8000bada:	30 08       	mov	r8,0
8000badc:	ef 68 ff fe 	st.b	r7[-2],r8
		value = value >> 8;
8000bae0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000bae4:	a9 48       	asr	r8,0x8
8000bae6:	ef 48 ff f0 	st.w	r7[-16],r8
		goto udi_cdc_putc_process_one_byte;
8000baea:	c9 fb       	rjmp	8000ba28 <udi_cdc_multi_putc+0x3c>
	}
	return true;
8000baec:	30 18       	mov	r8,1
}
8000baee:	10 9c       	mov	r12,r8
8000baf0:	2f cd       	sub	sp,-16
8000baf2:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000baf6:	00 00       	add	r0,r0
8000baf8:	00 00       	add	r0,r0
8000bafa:	07 34       	ld.ub	r4,r3++
8000bafc:	80 00       	ld.sh	r0,r0[0x0]
8000bafe:	b9 c0       	cbr	r0,0x18
8000bb00:	00 00       	add	r0,r0
8000bb02:	07 4e       	ld.w	lr,--r3
8000bb04:	80 00       	ld.sh	r0,r0[0x0]
8000bb06:	ab 00       	ld.d	r0,r5
8000bb08:	00 00       	add	r0,r0
8000bb0a:	0c 64       	and	r4,r6
8000bb0c:	00 00       	add	r0,r0
8000bb0e:	0c 60       	and	r0,r6
8000bb10:	00 00       	add	r0,r0
8000bb12:	09 e0       	ld.ub	r0,r4[0x6]
8000bb14:	80 00       	ld.sh	r0,r0[0x0]
8000bb16:	ab 40       	asr	r0,0xa

8000bb18 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
8000bb18:	eb cd 40 80 	pushm	r7,lr
8000bb1c:	1a 97       	mov	r7,sp
8000bb1e:	20 1d       	sub	sp,4
8000bb20:	ef 4c ff fc 	st.w	r7[-4],r12
	return udi_cdc_multi_putc(0, value);
8000bb24:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bb28:	30 0c       	mov	r12,0
8000bb2a:	f0 1f 00 04 	mcall	8000bb38 <udi_cdc_putc+0x20>
8000bb2e:	18 98       	mov	r8,r12
}
8000bb30:	10 9c       	mov	r12,r8
8000bb32:	2f fd       	sub	sp,-4
8000bb34:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bb38:	80 00       	ld.sh	r0,r0[0x0]
8000bb3a:	b9 ec       	*unknown*

8000bb3c <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
8000bb3c:	eb cd 40 80 	pushm	r7,lr
8000bb40:	1a 97       	mov	r7,sp
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
8000bb42:	48 b8       	lddpc	r8,8000bb6c <udc_get_eof_conf+0x30>
8000bb44:	70 08       	ld.w	r8,r8[0x0]
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000bb46:	70 09       	ld.w	r9,r8[0x0]
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
8000bb48:	48 98       	lddpc	r8,8000bb6c <udc_get_eof_conf+0x30>
8000bb4a:	70 08       	ld.w	r8,r8[0x0]
8000bb4c:	70 08       	ld.w	r8,r8[0x0]
8000bb4e:	11 aa       	ld.ub	r10,r8[0x2]
8000bb50:	a9 6a       	lsl	r10,0x8
8000bb52:	11 b8       	ld.ub	r8,r8[0x3]
8000bb54:	14 48       	or	r8,r10
8000bb56:	5c 88       	casts.h	r8
8000bb58:	5c 88       	casts.h	r8
8000bb5a:	5c c8       	swap.bh	r8
8000bb5c:	5c 88       	casts.h	r8
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
8000bb5e:	5c 78       	castu.h	r8
8000bb60:	f2 08 00 08 	add	r8,r9,r8
			udc_ptr_conf->desc +
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
}
8000bb64:	10 9c       	mov	r12,r8
8000bb66:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bb6a:	00 00       	add	r0,r0
8000bb6c:	00 00       	add	r0,r0
8000bb6e:	0c 84       	andn	r4,r6

8000bb70 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
8000bb70:	eb cd 40 80 	pushm	r7,lr
8000bb74:	1a 97       	mov	r7,sp
8000bb76:	20 3d       	sub	sp,12
8000bb78:	ef 4c ff f8 	st.w	r7[-8],r12
8000bb7c:	16 98       	mov	r8,r11
8000bb7e:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
8000bb82:	f0 1f 00 1d 	mcall	8000bbf4 <udc_next_desc_in_iface+0x84>
8000bb86:	18 98       	mov	r8,r12
8000bb88:	ef 48 ff fc 	st.w	r7[-4],r8
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000bb8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bb90:	11 88       	ld.ub	r8,r8[0x0]
8000bb92:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bb96:	f2 08 00 08 	add	r8,r9,r8
8000bb9a:	ef 48 ff f8 	st.w	r7[-8],r8
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000bb9e:	c1 c8       	rjmp	8000bbd6 <udc_next_desc_in_iface+0x66>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
8000bba0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bba4:	11 99       	ld.ub	r9,r8[0x1]
8000bba6:	30 48       	mov	r8,4
8000bba8:	f0 09 18 00 	cp.b	r9,r8
8000bbac:	c1 d0       	breq	8000bbe6 <udc_next_desc_in_iface+0x76>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
8000bbae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bbb2:	11 98       	ld.ub	r8,r8[0x1]
8000bbb4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000bbb8:	f0 09 18 00 	cp.b	r9,r8
8000bbbc:	c0 41       	brne	8000bbc4 <udc_next_desc_in_iface+0x54>
			return desc; // Specific descriptor found
8000bbbe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bbc2:	c1 48       	rjmp	8000bbea <udc_next_desc_in_iface+0x7a>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
8000bbc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bbc8:	11 88       	ld.ub	r8,r8[0x0]
8000bbca:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bbce:	f2 08 00 08 	add	r8,r9,r8
8000bbd2:	ef 48 ff f8 	st.w	r7[-8],r8
	ptr_eof_desc = udc_get_eof_conf();
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
8000bbd6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bbda:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bbde:	10 39       	cp.w	r9,r8
8000bbe0:	fe 9b ff e0 	brhi	8000bba0 <udc_next_desc_in_iface+0x30>
8000bbe4:	c0 28       	rjmp	8000bbe8 <udc_next_desc_in_iface+0x78>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
			break; // End of global interface descriptor
8000bbe6:	d7 03       	nop
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
	}
	return NULL; // No specific descriptor found
8000bbe8:	30 08       	mov	r8,0
}
8000bbea:	10 9c       	mov	r12,r8
8000bbec:	2f dd       	sub	sp,-12
8000bbee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bbf2:	00 00       	add	r0,r0
8000bbf4:	80 00       	ld.sh	r0,r0[0x0]
8000bbf6:	bb 3c       	mul	r12,sp

8000bbf8 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
8000bbf8:	eb cd 40 80 	pushm	r7,lr
8000bbfc:	1a 97       	mov	r7,sp
8000bbfe:	20 3d       	sub	sp,12
8000bc00:	18 99       	mov	r9,r12
8000bc02:	16 98       	mov	r8,r11
8000bc04:	ef 69 ff f8 	st.b	r7[-8],r9
8000bc08:	ef 68 ff f4 	st.b	r7[-12],r8
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
8000bc0c:	4a 58       	lddpc	r8,8000bca0 <udc_update_iface_desc+0xa8>
8000bc0e:	11 88       	ld.ub	r8,r8[0x0]
8000bc10:	58 08       	cp.w	r8,0
8000bc12:	c0 31       	brne	8000bc18 <udc_update_iface_desc+0x20>
		return false;
8000bc14:	30 08       	mov	r8,0
8000bc16:	c4 18       	rjmp	8000bc98 <udc_update_iface_desc+0xa0>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000bc18:	4a 38       	lddpc	r8,8000bca4 <udc_update_iface_desc+0xac>
8000bc1a:	70 08       	ld.w	r8,r8[0x0]
8000bc1c:	70 08       	ld.w	r8,r8[0x0]
8000bc1e:	11 c8       	ld.ub	r8,r8[0x4]
8000bc20:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bc24:	f0 09 18 00 	cp.b	r9,r8
8000bc28:	c0 33       	brcs	8000bc2e <udc_update_iface_desc+0x36>
		return false;
8000bc2a:	30 08       	mov	r8,0
8000bc2c:	c3 68       	rjmp	8000bc98 <udc_update_iface_desc+0xa0>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
8000bc2e:	49 e8       	lddpc	r8,8000bca4 <udc_update_iface_desc+0xac>
8000bc30:	70 08       	ld.w	r8,r8[0x0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
		return false;
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
8000bc32:	70 08       	ld.w	r8,r8[0x0]
8000bc34:	10 99       	mov	r9,r8
8000bc36:	49 d8       	lddpc	r8,8000bca8 <udc_update_iface_desc+0xb0>
8000bc38:	91 09       	st.w	r8[0x0],r9
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
8000bc3a:	f0 1f 00 1d 	mcall	8000bcac <udc_update_iface_desc+0xb4>
8000bc3e:	18 98       	mov	r8,r12
8000bc40:	ef 48 ff fc 	st.w	r7[-4],r8
	while (ptr_end_desc >
8000bc44:	c2 28       	rjmp	8000bc88 <udc_update_iface_desc+0x90>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
8000bc46:	49 98       	lddpc	r8,8000bca8 <udc_update_iface_desc+0xb0>
8000bc48:	70 08       	ld.w	r8,r8[0x0]
8000bc4a:	11 99       	ld.ub	r9,r8[0x1]
8000bc4c:	30 48       	mov	r8,4
8000bc4e:	f0 09 18 00 	cp.b	r9,r8
8000bc52:	c1 31       	brne	8000bc78 <udc_update_iface_desc+0x80>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000bc54:	49 58       	lddpc	r8,8000bca8 <udc_update_iface_desc+0xb0>
8000bc56:	70 08       	ld.w	r8,r8[0x0]
8000bc58:	11 a8       	ld.ub	r8,r8[0x2]
8000bc5a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8000bc5e:	f0 09 18 00 	cp.b	r9,r8
8000bc62:	c0 b1       	brne	8000bc78 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
8000bc64:	49 18       	lddpc	r8,8000bca8 <udc_update_iface_desc+0xb0>
8000bc66:	70 08       	ld.w	r8,r8[0x0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
					(setting_num ==
8000bc68:	11 b8       	ld.ub	r8,r8[0x3]
	while (ptr_end_desc >
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
8000bc6a:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000bc6e:	f0 09 18 00 	cp.b	r9,r8
8000bc72:	c0 31       	brne	8000bc78 <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
8000bc74:	30 18       	mov	r8,1
8000bc76:	c1 18       	rjmp	8000bc98 <udc_update_iface_desc+0xa0>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000bc78:	48 c8       	lddpc	r8,8000bca8 <udc_update_iface_desc+0xb0>
8000bc7a:	70 09       	ld.w	r9,r8[0x0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
8000bc7c:	48 b8       	lddpc	r8,8000bca8 <udc_update_iface_desc+0xb0>
8000bc7e:	70 08       	ld.w	r8,r8[0x0]
					udc_ptr_iface->bAlternateSetting)) {
				return true; // Interface found
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
8000bc80:	11 88       	ld.ub	r8,r8[0x0]
8000bc82:	10 09       	add	r9,r8
8000bc84:	48 98       	lddpc	r8,8000bca8 <udc_update_iface_desc+0xb0>
8000bc86:	91 09       	st.w	r8[0x0],r9
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
	while (ptr_end_desc >
8000bc88:	48 88       	lddpc	r8,8000bca8 <udc_update_iface_desc+0xb0>
8000bc8a:	70 08       	ld.w	r8,r8[0x0]
8000bc8c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bc90:	10 39       	cp.w	r9,r8
8000bc92:	fe 9b ff da 	brhi	8000bc46 <udc_update_iface_desc+0x4e>
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
	}
	return false; // Interface not found
8000bc96:	30 08       	mov	r8,0
}
8000bc98:	10 9c       	mov	r12,r8
8000bc9a:	2f dd       	sub	sp,-12
8000bc9c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bca0:	00 00       	add	r0,r0
8000bca2:	0c 80       	andn	r0,r6
8000bca4:	00 00       	add	r0,r0
8000bca6:	0c 84       	andn	r4,r6
8000bca8:	00 00       	add	r0,r0
8000bcaa:	0c 88       	andn	r8,r6
8000bcac:	80 00       	ld.sh	r0,r0[0x0]
8000bcae:	bb 3c       	mul	r12,sp

8000bcb0 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
8000bcb0:	eb cd 40 80 	pushm	r7,lr
8000bcb4:	1a 97       	mov	r7,sp
8000bcb6:	20 3d       	sub	sp,12
8000bcb8:	18 98       	mov	r8,r12
8000bcba:	ef 68 ff f4 	st.b	r7[-12],r8
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000bcbe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000bcc2:	30 0b       	mov	r11,0
8000bcc4:	10 9c       	mov	r12,r8
8000bcc6:	f0 1f 00 25 	mcall	8000bd58 <udc_iface_disable+0xa8>
8000bcca:	18 98       	mov	r8,r12
8000bccc:	ec 18 00 01 	eorl	r8,0x1
8000bcd0:	5c 58       	castu.b	r8
8000bcd2:	c0 30       	breq	8000bcd8 <udc_iface_disable+0x28>
		return false;
8000bcd4:	30 08       	mov	r8,0
8000bcd6:	c3 d8       	rjmp	8000bd50 <udc_iface_disable+0xa0>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000bcd8:	4a 18       	lddpc	r8,8000bd5c <udc_iface_disable+0xac>
8000bcda:	70 08       	ld.w	r8,r8[0x0]
8000bcdc:	70 19       	ld.w	r9,r8[0x4]
8000bcde:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000bce2:	a3 68       	lsl	r8,0x2
8000bce4:	f2 08 00 08 	add	r8,r9,r8
8000bce8:	70 08       	ld.w	r8,r8[0x0]
8000bcea:	ef 48 ff f8 	st.w	r7[-8],r8

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000bcee:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bcf2:	70 38       	ld.w	r8,r8[0xc]
8000bcf4:	5d 18       	icall	r8
8000bcf6:	18 98       	mov	r8,r12
8000bcf8:	10 99       	mov	r9,r8
8000bcfa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8000bcfe:	12 9b       	mov	r11,r9
8000bd00:	10 9c       	mov	r12,r8
8000bd02:	f0 1f 00 16 	mcall	8000bd58 <udc_iface_disable+0xa8>
8000bd06:	18 98       	mov	r8,r12
8000bd08:	ec 18 00 01 	eorl	r8,0x1
8000bd0c:	5c 58       	castu.b	r8
8000bd0e:	c0 30       	breq	8000bd14 <udc_iface_disable+0x64>
		return false;
8000bd10:	30 08       	mov	r8,0
8000bd12:	c1 f8       	rjmp	8000bd50 <udc_iface_disable+0xa0>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000bd14:	49 38       	lddpc	r8,8000bd60 <udc_iface_disable+0xb0>
8000bd16:	70 08       	ld.w	r8,r8[0x0]
8000bd18:	ef 48 ff fc 	st.w	r7[-4],r8
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000bd1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd20:	30 5b       	mov	r11,5
8000bd22:	10 9c       	mov	r12,r8
8000bd24:	f0 1f 00 10 	mcall	8000bd64 <udc_iface_disable+0xb4>
8000bd28:	18 98       	mov	r8,r12
8000bd2a:	ef 48 ff fc 	st.w	r7[-4],r8
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
8000bd2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd32:	58 08       	cp.w	r8,0
8000bd34:	c0 71       	brne	8000bd42 <udc_iface_disable+0x92>
		}
	}
#endif

	// Disable interface
	udi_api->disable();
8000bd36:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bd3a:	70 18       	ld.w	r8,r8[0x4]
8000bd3c:	5d 18       	icall	r8
	return true;
8000bd3e:	30 18       	mov	r8,1
8000bd40:	c0 88       	rjmp	8000bd50 <udc_iface_disable+0xa0>
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
8000bd42:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bd46:	11 a8       	ld.ub	r8,r8[0x2]
8000bd48:	10 9c       	mov	r12,r8
8000bd4a:	f0 1f 00 08 	mcall	8000bd68 <udc_iface_disable+0xb8>
		}
8000bd4e:	ce 7b       	rjmp	8000bd1c <udc_iface_disable+0x6c>
#endif

	// Disable interface
	udi_api->disable();
	return true;
}
8000bd50:	10 9c       	mov	r12,r8
8000bd52:	2f dd       	sub	sp,-12
8000bd54:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bd58:	80 00       	ld.sh	r0,r0[0x0]
8000bd5a:	bb f8       	*unknown*
8000bd5c:	00 00       	add	r0,r0
8000bd5e:	0c 84       	andn	r4,r6
8000bd60:	00 00       	add	r0,r0
8000bd62:	0c 88       	andn	r8,r6
8000bd64:	80 00       	ld.sh	r0,r0[0x0]
8000bd66:	bb 70       	lsl	r0,0x1b
8000bd68:	80 00       	ld.sh	r0,r0[0x0]
8000bd6a:	8f a8       	st.w	r7[0x28],r8

8000bd6c <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
8000bd6c:	eb cd 40 80 	pushm	r7,lr
8000bd70:	1a 97       	mov	r7,sp
8000bd72:	20 3d       	sub	sp,12
8000bd74:	18 99       	mov	r9,r12
8000bd76:	16 98       	mov	r8,r11
8000bd78:	ef 69 ff f8 	st.b	r7[-8],r9
8000bd7c:	ef 68 ff f4 	st.b	r7[-12],r8
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
8000bd80:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8000bd84:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000bd88:	12 9b       	mov	r11,r9
8000bd8a:	10 9c       	mov	r12,r8
8000bd8c:	f0 1f 00 25 	mcall	8000be20 <udc_iface_enable+0xb4>
8000bd90:	18 98       	mov	r8,r12
8000bd92:	ec 18 00 01 	eorl	r8,0x1
8000bd96:	5c 58       	castu.b	r8
8000bd98:	c0 30       	breq	8000bd9e <udc_iface_enable+0x32>
		return false;
8000bd9a:	30 08       	mov	r8,0
8000bd9c:	c3 e8       	rjmp	8000be18 <udc_iface_enable+0xac>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
8000bd9e:	4a 28       	lddpc	r8,8000be24 <udc_iface_enable+0xb8>
8000bda0:	70 08       	ld.w	r8,r8[0x0]
8000bda2:	ef 48 ff fc 	st.w	r7[-4],r8
8000bda6:	c0 28       	rjmp	8000bdaa <udc_iface_enable+0x3e>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
		}
	}
8000bda8:	d7 03       	nop

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
8000bdaa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bdae:	30 5b       	mov	r11,5
8000bdb0:	10 9c       	mov	r12,r8
8000bdb2:	f0 1f 00 1e 	mcall	8000be28 <udc_iface_enable+0xbc>
8000bdb6:	18 98       	mov	r8,r12
8000bdb8:	ef 48 ff fc 	st.w	r7[-4],r8
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
8000bdbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bdc0:	58 08       	cp.w	r8,0
8000bdc2:	c0 e1       	brne	8000bdde <udc_iface_enable+0x72>
			return false;
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
8000bdc4:	49 a8       	lddpc	r8,8000be2c <udc_iface_enable+0xc0>
8000bdc6:	70 08       	ld.w	r8,r8[0x0]
8000bdc8:	70 19       	ld.w	r9,r8[0x4]
8000bdca:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000bdce:	a3 68       	lsl	r8,0x2
8000bdd0:	f2 08 00 08 	add	r8,r9,r8
8000bdd4:	70 08       	ld.w	r8,r8[0x0]
8000bdd6:	70 08       	ld.w	r8,r8[0x0]
8000bdd8:	5d 18       	icall	r8
8000bdda:	18 98       	mov	r8,r12
8000bddc:	c1 e8       	rjmp	8000be18 <udc_iface_enable+0xac>
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
				ep_desc->bmAttributes,
				le16_to_cpu
8000bdde:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bde2:	11 c9       	ld.ub	r9,r8[0x4]
8000bde4:	a9 69       	lsl	r9,0x8
8000bde6:	11 d8       	ld.ub	r8,r8[0x5]
8000bde8:	12 48       	or	r8,r9
8000bdea:	5c 88       	casts.h	r8
8000bdec:	5c 88       	casts.h	r8
8000bdee:	5c c8       	swap.bh	r8
8000bdf0:	5c 88       	casts.h	r8
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000bdf2:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
				ep_desc->bmAttributes,
8000bdf6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bdfa:	11 b8       	ld.ub	r8,r8[0x3]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
8000bdfc:	10 99       	mov	r9,r8
8000bdfe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be02:	11 a8       	ld.ub	r8,r8[0x2]
8000be04:	12 9b       	mov	r11,r9
8000be06:	10 9c       	mov	r12,r8
8000be08:	f0 1f 00 0a 	mcall	8000be30 <udc_iface_enable+0xc4>
8000be0c:	18 98       	mov	r8,r12
8000be0e:	ec 18 00 01 	eorl	r8,0x1
8000be12:	5c 58       	castu.b	r8
8000be14:	cc a0       	breq	8000bda8 <udc_iface_enable+0x3c>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
8000be16:	30 08       	mov	r8,0
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
}
8000be18:	10 9c       	mov	r12,r8
8000be1a:	2f dd       	sub	sp,-12
8000be1c:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be20:	80 00       	ld.sh	r0,r0[0x0]
8000be22:	bb f8       	*unknown*
8000be24:	00 00       	add	r0,r0
8000be26:	0c 88       	andn	r8,r6
8000be28:	80 00       	ld.sh	r0,r0[0x0]
8000be2a:	bb 70       	lsl	r0,0x1b
8000be2c:	00 00       	add	r0,r0
8000be2e:	0c 84       	andn	r4,r6
8000be30:	80 00       	ld.sh	r0,r0[0x0]
8000be32:	8c 58       	ld.sh	r8,r6[0xa]

8000be34 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
8000be34:	eb cd 40 80 	pushm	r7,lr
8000be38:	1a 97       	mov	r7,sp
	udd_enable();
8000be3a:	f0 1f 00 03 	mcall	8000be44 <udc_start+0x10>
}
8000be3e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be42:	00 00       	add	r0,r0
8000be44:	80 00       	ld.sh	r0,r0[0x0]
8000be46:	89 74       	st.w	r4[0x1c],r4

8000be48 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
8000be48:	eb cd 40 80 	pushm	r7,lr
8000be4c:	1a 97       	mov	r7,sp
8000be4e:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000be50:	49 38       	lddpc	r8,8000be9c <udc_reset+0x54>
8000be52:	11 88       	ld.ub	r8,r8[0x0]
8000be54:	58 08       	cp.w	r8,0
8000be56:	c1 80       	breq	8000be86 <udc_reset+0x3e>
		for (iface_num = 0;
8000be58:	30 08       	mov	r8,0
8000be5a:	ef 68 ff ff 	st.b	r7[-1],r8
8000be5e:	c0 b8       	rjmp	8000be74 <udc_reset+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
8000be60:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be64:	10 9c       	mov	r12,r8
8000be66:	f0 1f 00 0f 	mcall	8000bea0 <udc_reset+0x58>
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000be6a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000be6e:	2f f8       	sub	r8,-1
8000be70:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000be74:	48 c8       	lddpc	r8,8000bea4 <udc_reset+0x5c>
8000be76:	70 08       	ld.w	r8,r8[0x0]
8000be78:	70 08       	ld.w	r8,r8[0x0]
8000be7a:	11 c8       	ld.ub	r8,r8[0x4]
void udc_reset(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000be7c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000be80:	f0 09 18 00 	cp.b	r9,r8
8000be84:	ce e3       	brcs	8000be60 <udc_reset+0x18>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
		}
	}
	udc_num_configuration = 0;
8000be86:	48 69       	lddpc	r9,8000be9c <udc_reset+0x54>
8000be88:	30 08       	mov	r8,0
8000be8a:	b2 88       	st.b	r9[0x0],r8
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
8000be8c:	48 79       	lddpc	r9,8000bea8 <udc_reset+0x60>
8000be8e:	e0 68 01 00 	mov	r8,256
8000be92:	b2 08       	st.h	r9[0x0],r8
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
8000be94:	2f fd       	sub	sp,-4
8000be96:	e3 cd 80 80 	ldm	sp++,r7,pc
8000be9a:	00 00       	add	r0,r0
8000be9c:	00 00       	add	r0,r0
8000be9e:	0c 80       	andn	r0,r6
8000bea0:	80 00       	ld.sh	r0,r0[0x0]
8000bea2:	bc b0       	st.b	lr[0x3],r0
8000bea4:	00 00       	add	r0,r0
8000bea6:	0c 84       	andn	r4,r6
8000bea8:	00 00       	add	r0,r0
8000beaa:	0c 78       	tst	r8,r6

8000beac <udc_sof_notify>:

void udc_sof_notify(void)
{
8000beac:	eb cd 40 80 	pushm	r7,lr
8000beb0:	1a 97       	mov	r7,sp
8000beb2:	20 1d       	sub	sp,4
	uint8_t iface_num;

	if (udc_num_configuration) {
8000beb4:	49 88       	lddpc	r8,8000bf14 <udc_sof_notify+0x68>
8000beb6:	11 88       	ld.ub	r8,r8[0x0]
8000beb8:	58 08       	cp.w	r8,0
8000beba:	c2 a0       	breq	8000bf0e <udc_sof_notify+0x62>
		for (iface_num = 0;
8000bebc:	30 08       	mov	r8,0
8000bebe:	ef 68 ff ff 	st.b	r7[-1],r8
8000bec2:	c1 d8       	rjmp	8000befc <udc_sof_notify+0x50>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
8000bec4:	49 58       	lddpc	r8,8000bf18 <udc_sof_notify+0x6c>
8000bec6:	70 08       	ld.w	r8,r8[0x0]
8000bec8:	70 19       	ld.w	r9,r8[0x4]
8000beca:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bece:	a3 68       	lsl	r8,0x2
8000bed0:	f2 08 00 08 	add	r8,r9,r8
8000bed4:	70 08       	ld.w	r8,r8[0x0]
8000bed6:	70 48       	ld.w	r8,r8[0x10]
8000bed8:	58 08       	cp.w	r8,0
8000beda:	c0 c0       	breq	8000bef2 <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
8000bedc:	48 f8       	lddpc	r8,8000bf18 <udc_sof_notify+0x6c>
8000bede:	70 08       	ld.w	r8,r8[0x0]
8000bee0:	70 19       	ld.w	r9,r8[0x4]
8000bee2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bee6:	a3 68       	lsl	r8,0x2
8000bee8:	f2 08 00 08 	add	r8,r9,r8
8000beec:	70 08       	ld.w	r8,r8[0x0]
8000beee:	70 48       	ld.w	r8,r8[0x10]
8000bef0:	5d 18       	icall	r8
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
8000bef2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000bef6:	2f f8       	sub	r8,-1
8000bef8:	ef 68 ff ff 	st.b	r7[-1],r8
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000befc:	48 78       	lddpc	r8,8000bf18 <udc_sof_notify+0x6c>
8000befe:	70 08       	ld.w	r8,r8[0x0]
8000bf00:	70 08       	ld.w	r8,r8[0x0]
8000bf02:	11 c8       	ld.ub	r8,r8[0x4]
void udc_sof_notify(void)
{
	uint8_t iface_num;

	if (udc_num_configuration) {
		for (iface_num = 0;
8000bf04:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000bf08:	f0 09 18 00 	cp.b	r9,r8
8000bf0c:	cd c3       	brcs	8000bec4 <udc_sof_notify+0x18>
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
			}
		}
	}
}
8000bf0e:	2f fd       	sub	sp,-4
8000bf10:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf14:	00 00       	add	r0,r0
8000bf16:	0c 80       	andn	r0,r6
8000bf18:	00 00       	add	r0,r0
8000bf1a:	0c 84       	andn	r4,r6

8000bf1c <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
8000bf1c:	eb cd 40 80 	pushm	r7,lr
8000bf20:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
8000bf22:	48 98       	lddpc	r8,8000bf44 <udc_req_std_dev_get_status+0x28>
8000bf24:	90 39       	ld.sh	r9,r8[0x6]
8000bf26:	30 28       	mov	r8,2
8000bf28:	f0 09 19 00 	cp.h	r9,r8
8000bf2c:	c0 30       	breq	8000bf32 <udc_req_std_dev_get_status+0x16>
		return false;
8000bf2e:	30 08       	mov	r8,0
8000bf30:	c0 78       	rjmp	8000bf3e <udc_req_std_dev_get_status+0x22>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
8000bf32:	48 68       	lddpc	r8,8000bf48 <udc_req_std_dev_get_status+0x2c>
8000bf34:	30 2b       	mov	r11,2
8000bf36:	10 9c       	mov	r12,r8
8000bf38:	f0 1f 00 05 	mcall	8000bf4c <udc_req_std_dev_get_status+0x30>
			sizeof(udc_device_status));
	return true;
8000bf3c:	30 18       	mov	r8,1
}
8000bf3e:	10 9c       	mov	r12,r8
8000bf40:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf44:	00 00       	add	r0,r0
8000bf46:	12 1c       	sub	r12,r9
8000bf48:	00 00       	add	r0,r0
8000bf4a:	0c 78       	tst	r8,r6
8000bf4c:	80 00       	ld.sh	r0,r0[0x0]
8000bf4e:	8c 2c       	ld.sh	r12,r6[0x4]

8000bf50 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
8000bf50:	eb cd 40 80 	pushm	r7,lr
8000bf54:	1a 97       	mov	r7,sp
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
8000bf56:	49 18       	lddpc	r8,8000bf98 <udc_req_std_ep_get_status+0x48>
8000bf58:	90 39       	ld.sh	r9,r8[0x6]
8000bf5a:	30 28       	mov	r8,2
8000bf5c:	f0 09 19 00 	cp.h	r9,r8
8000bf60:	c0 30       	breq	8000bf66 <udc_req_std_ep_get_status+0x16>
		return false;
8000bf62:	30 08       	mov	r8,0
8000bf64:	c1 68       	rjmp	8000bf90 <udc_req_std_ep_get_status+0x40>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
8000bf66:	48 d8       	lddpc	r8,8000bf98 <udc_req_std_ep_get_status+0x48>
8000bf68:	90 28       	ld.sh	r8,r8[0x4]
8000bf6a:	5c 58       	castu.b	r8
8000bf6c:	10 9c       	mov	r12,r8
8000bf6e:	f0 1f 00 0c 	mcall	8000bf9c <udc_req_std_ep_get_status+0x4c>
8000bf72:	18 98       	mov	r8,r12
8000bf74:	58 08       	cp.w	r8,0
8000bf76:	c0 40       	breq	8000bf7e <udc_req_std_ep_get_status+0x2e>
8000bf78:	e0 68 01 00 	mov	r8,256
8000bf7c:	c0 28       	rjmp	8000bf80 <udc_req_std_ep_get_status+0x30>
8000bf7e:	30 08       	mov	r8,0
8000bf80:	48 89       	lddpc	r9,8000bfa0 <udc_req_std_ep_get_status+0x50>
8000bf82:	b2 08       	st.h	r9[0x0],r8
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
8000bf84:	48 78       	lddpc	r8,8000bfa0 <udc_req_std_ep_get_status+0x50>
8000bf86:	30 2b       	mov	r11,2
8000bf88:	10 9c       	mov	r12,r8
8000bf8a:	f0 1f 00 07 	mcall	8000bfa4 <udc_req_std_ep_get_status+0x54>
			sizeof(udc_ep_status));
	return true;
8000bf8e:	30 18       	mov	r8,1
}
8000bf90:	10 9c       	mov	r12,r8
8000bf92:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bf96:	00 00       	add	r0,r0
8000bf98:	00 00       	add	r0,r0
8000bf9a:	12 1c       	sub	r12,r9
8000bf9c:	80 00       	ld.sh	r0,r0[0x0]
8000bf9e:	90 44       	ld.sh	r4,r8[0x8]
8000bfa0:	00 00       	add	r0,r0
8000bfa2:	0c 8c       	andn	r12,r6
8000bfa4:	80 00       	ld.sh	r0,r0[0x0]
8000bfa6:	8c 2c       	ld.sh	r12,r6[0x4]

8000bfa8 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
8000bfa8:	eb cd 40 80 	pushm	r7,lr
8000bfac:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000bfae:	48 d8       	lddpc	r8,8000bfe0 <udc_req_std_dev_clear_feature+0x38>
8000bfb0:	90 38       	ld.sh	r8,r8[0x6]
8000bfb2:	58 08       	cp.w	r8,0
8000bfb4:	c0 30       	breq	8000bfba <udc_req_std_dev_clear_feature+0x12>
		return false;
8000bfb6:	30 08       	mov	r8,0
8000bfb8:	c1 08       	rjmp	8000bfd8 <udc_req_std_dev_clear_feature+0x30>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
8000bfba:	48 a8       	lddpc	r8,8000bfe0 <udc_req_std_dev_clear_feature+0x38>
8000bfbc:	90 19       	ld.sh	r9,r8[0x2]
8000bfbe:	30 18       	mov	r8,1
8000bfc0:	f0 09 19 00 	cp.h	r9,r8
8000bfc4:	c0 91       	brne	8000bfd6 <udc_req_std_dev_clear_feature+0x2e>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
8000bfc6:	48 88       	lddpc	r8,8000bfe4 <udc_req_std_dev_clear_feature+0x3c>
8000bfc8:	90 08       	ld.sh	r8,r8[0x0]
8000bfca:	a9 d8       	cbr	r8,0x9
8000bfcc:	5c 88       	casts.h	r8
8000bfce:	48 69       	lddpc	r9,8000bfe4 <udc_req_std_dev_clear_feature+0x3c>
8000bfd0:	b2 08       	st.h	r9[0x0],r8
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
8000bfd2:	30 18       	mov	r8,1
8000bfd4:	c0 28       	rjmp	8000bfd8 <udc_req_std_dev_clear_feature+0x30>
	}
	return false;
8000bfd6:	30 08       	mov	r8,0
}
8000bfd8:	10 9c       	mov	r12,r8
8000bfda:	e3 cd 80 80 	ldm	sp++,r7,pc
8000bfde:	00 00       	add	r0,r0
8000bfe0:	00 00       	add	r0,r0
8000bfe2:	12 1c       	sub	r12,r9
8000bfe4:	00 00       	add	r0,r0
8000bfe6:	0c 78       	tst	r8,r6

8000bfe8 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
8000bfe8:	eb cd 40 80 	pushm	r7,lr
8000bfec:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000bfee:	48 c8       	lddpc	r8,8000c01c <udc_req_std_ep_clear_feature+0x34>
8000bff0:	90 38       	ld.sh	r8,r8[0x6]
8000bff2:	58 08       	cp.w	r8,0
8000bff4:	c0 30       	breq	8000bffa <udc_req_std_ep_clear_feature+0x12>
		return false;
8000bff6:	30 08       	mov	r8,0
8000bff8:	c0 e8       	rjmp	8000c014 <udc_req_std_ep_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000bffa:	48 98       	lddpc	r8,8000c01c <udc_req_std_ep_clear_feature+0x34>
8000bffc:	90 18       	ld.sh	r8,r8[0x2]
8000bffe:	58 08       	cp.w	r8,0
8000c000:	c0 91       	brne	8000c012 <udc_req_std_ep_clear_feature+0x2a>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000c002:	48 78       	lddpc	r8,8000c01c <udc_req_std_ep_clear_feature+0x34>
8000c004:	90 28       	ld.sh	r8,r8[0x4]
8000c006:	5c 58       	castu.b	r8
8000c008:	10 9c       	mov	r12,r8
8000c00a:	f0 1f 00 06 	mcall	8000c020 <udc_req_std_ep_clear_feature+0x38>
8000c00e:	18 98       	mov	r8,r12
8000c010:	c0 28       	rjmp	8000c014 <udc_req_std_ep_clear_feature+0x2c>
	}
	return false;
8000c012:	30 08       	mov	r8,0
}
8000c014:	10 9c       	mov	r12,r8
8000c016:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c01a:	00 00       	add	r0,r0
8000c01c:	00 00       	add	r0,r0
8000c01e:	12 1c       	sub	r12,r9
8000c020:	80 00       	ld.sh	r0,r0[0x0]
8000c022:	91 88       	st.w	r8[0x20],r8

8000c024 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
8000c024:	eb cd 40 80 	pushm	r7,lr
8000c028:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000c02a:	48 98       	lddpc	r8,8000c04c <udc_req_std_dev_set_feature+0x28>
8000c02c:	90 38       	ld.sh	r8,r8[0x6]
8000c02e:	58 08       	cp.w	r8,0
8000c030:	c0 30       	breq	8000c036 <udc_req_std_dev_set_feature+0x12>
		return false;
8000c032:	30 08       	mov	r8,0
8000c034:	c0 98       	rjmp	8000c046 <udc_req_std_dev_set_feature+0x22>
	}

	switch (udd_g_ctrlreq.req.wValue) {
8000c036:	48 68       	lddpc	r8,8000c04c <udc_req_std_dev_set_feature+0x28>
8000c038:	90 18       	ld.sh	r8,r8[0x2]
8000c03a:	5c 78       	castu.h	r8
8000c03c:	58 18       	cp.w	r8,1
8000c03e:	c0 31       	brne	8000c044 <udc_req_std_dev_set_feature+0x20>
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		udc_device_status |= CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP);
		UDC_REMOTEWAKEUP_ENABLE();
		return true;
#else
		return false;
8000c040:	30 08       	mov	r8,0
8000c042:	c0 28       	rjmp	8000c046 <udc_req_std_dev_set_feature+0x22>
		break;
#endif
	default:
		break;
	}
	return false;
8000c044:	30 08       	mov	r8,0
}
8000c046:	10 9c       	mov	r12,r8
8000c048:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c04c:	00 00       	add	r0,r0
8000c04e:	12 1c       	sub	r12,r9

8000c050 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
8000c050:	eb cd 40 80 	pushm	r7,lr
8000c054:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000c056:	48 f8       	lddpc	r8,8000c090 <udc_req_std_ep_set_feature+0x40>
8000c058:	90 38       	ld.sh	r8,r8[0x6]
8000c05a:	58 08       	cp.w	r8,0
8000c05c:	c0 30       	breq	8000c062 <udc_req_std_ep_set_feature+0x12>
		return false;
8000c05e:	30 08       	mov	r8,0
8000c060:	c1 48       	rjmp	8000c088 <udc_req_std_ep_set_feature+0x38>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
8000c062:	48 c8       	lddpc	r8,8000c090 <udc_req_std_ep_set_feature+0x40>
8000c064:	90 18       	ld.sh	r8,r8[0x2]
8000c066:	58 08       	cp.w	r8,0
8000c068:	c0 f1       	brne	8000c086 <udc_req_std_ep_set_feature+0x36>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
8000c06a:	48 a8       	lddpc	r8,8000c090 <udc_req_std_ep_set_feature+0x40>
8000c06c:	90 28       	ld.sh	r8,r8[0x4]
8000c06e:	5c 58       	castu.b	r8
8000c070:	10 9c       	mov	r12,r8
8000c072:	f0 1f 00 09 	mcall	8000c094 <udc_req_std_ep_set_feature+0x44>
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
8000c076:	48 78       	lddpc	r8,8000c090 <udc_req_std_ep_set_feature+0x40>
8000c078:	90 28       	ld.sh	r8,r8[0x4]
8000c07a:	5c 58       	castu.b	r8
8000c07c:	10 9c       	mov	r12,r8
8000c07e:	f0 1f 00 07 	mcall	8000c098 <udc_req_std_ep_set_feature+0x48>
8000c082:	18 98       	mov	r8,r12
8000c084:	c0 28       	rjmp	8000c088 <udc_req_std_ep_set_feature+0x38>
	}
	return false;
8000c086:	30 08       	mov	r8,0
}
8000c088:	10 9c       	mov	r12,r8
8000c08a:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c08e:	00 00       	add	r0,r0
8000c090:	00 00       	add	r0,r0
8000c092:	12 1c       	sub	r12,r9
8000c094:	80 00       	ld.sh	r0,r0[0x0]
8000c096:	93 ec       	st.w	r9[0x38],r12
8000c098:	80 00       	ld.sh	r0,r0[0x0]
8000c09a:	90 74       	ld.sh	r4,r8[0xe]

8000c09c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
8000c09c:	eb cd 40 80 	pushm	r7,lr
8000c0a0:	1a 97       	mov	r7,sp
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
8000c0a2:	48 68       	lddpc	r8,8000c0b8 <udc_valid_address+0x1c>
8000c0a4:	90 18       	ld.sh	r8,r8[0x2]
8000c0a6:	5c 58       	castu.b	r8
8000c0a8:	f1 d8 c0 07 	bfextu	r8,r8,0x0,0x7
8000c0ac:	10 9c       	mov	r12,r8
8000c0ae:	f0 1f 00 04 	mcall	8000c0bc <udc_valid_address+0x20>
}
8000c0b2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0b6:	00 00       	add	r0,r0
8000c0b8:	00 00       	add	r0,r0
8000c0ba:	12 1c       	sub	r12,r9
8000c0bc:	80 00       	ld.sh	r0,r0[0x0]
8000c0be:	8b 92       	st.w	r5[0x24],r2

8000c0c0 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
8000c0c0:	eb cd 40 80 	pushm	r7,lr
8000c0c4:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength) {
8000c0c6:	48 78       	lddpc	r8,8000c0e0 <udc_req_std_dev_set_address+0x20>
8000c0c8:	90 38       	ld.sh	r8,r8[0x6]
8000c0ca:	58 08       	cp.w	r8,0
8000c0cc:	c0 30       	breq	8000c0d2 <udc_req_std_dev_set_address+0x12>
		return false;
8000c0ce:	30 08       	mov	r8,0
8000c0d0:	c0 58       	rjmp	8000c0da <udc_req_std_dev_set_address+0x1a>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
8000c0d2:	48 48       	lddpc	r8,8000c0e0 <udc_req_std_dev_set_address+0x20>
8000c0d4:	48 49       	lddpc	r9,8000c0e4 <udc_req_std_dev_set_address+0x24>
8000c0d6:	91 49       	st.w	r8[0x10],r9
	return true;
8000c0d8:	30 18       	mov	r8,1
}
8000c0da:	10 9c       	mov	r12,r8
8000c0dc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c0e0:	00 00       	add	r0,r0
8000c0e2:	12 1c       	sub	r12,r9
8000c0e4:	80 00       	ld.sh	r0,r0[0x0]
8000c0e6:	c0 9c       	rcall	8000c0f8 <udc_req_std_dev_get_str_desc+0x10>

8000c0e8 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
8000c0e8:	eb cd 40 80 	pushm	r7,lr
8000c0ec:	1a 97       	mov	r7,sp
8000c0ee:	20 3d       	sub	sp,12
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
8000c0f0:	30 08       	mov	r8,0
8000c0f2:	ef 68 ff ff 	st.b	r7[-1],r8

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
8000c0f6:	4a e8       	lddpc	r8,8000c1ac <udc_req_std_dev_get_str_desc+0xc4>
8000c0f8:	90 18       	ld.sh	r8,r8[0x2]
8000c0fa:	5c 78       	castu.h	r8
8000c0fc:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8000c100:	58 18       	cp.w	r8,1
8000c102:	c0 a0       	breq	8000c116 <udc_req_std_dev_get_str_desc+0x2e>
8000c104:	58 28       	cp.w	r8,2
8000c106:	c0 f0       	breq	8000c124 <udc_req_std_dev_get_str_desc+0x3c>
8000c108:	58 08       	cp.w	r8,0
8000c10a:	c1 41       	brne	8000c132 <udc_req_std_dev_get_str_desc+0x4a>
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
8000c10c:	30 4b       	mov	r11,4
8000c10e:	4a 9c       	lddpc	r12,8000c1b0 <udc_req_std_dev_get_str_desc+0xc8>
8000c110:	f0 1f 00 29 	mcall	8000c1b4 <udc_req_std_dev_get_str_desc+0xcc>
				sizeof(udc_string_desc_languageid));
		break;
8000c114:	c1 18       	rjmp	8000c136 <udc_req_std_dev_get_str_desc+0x4e>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
8000c116:	30 98       	mov	r8,9
8000c118:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_manufacturer_name;
8000c11c:	4a 78       	lddpc	r8,8000c1b8 <udc_req_std_dev_get_str_desc+0xd0>
8000c11e:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000c122:	c0 a8       	rjmp	8000c136 <udc_req_std_dev_get_str_desc+0x4e>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
8000c124:	30 38       	mov	r8,3
8000c126:	ef 68 ff ff 	st.b	r7[-1],r8
		str = udc_string_product_name;
8000c12a:	4a 58       	lddpc	r8,8000c1bc <udc_req_std_dev_get_str_desc+0xd4>
8000c12c:	ef 48 ff f8 	st.w	r7[-8],r8
		break;
8000c130:	c0 38       	rjmp	8000c136 <udc_req_std_dev_get_str_desc+0x4e>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
8000c132:	30 08       	mov	r8,0
8000c134:	c3 88       	rjmp	8000c1a4 <udc_req_std_dev_get_str_desc+0xbc>
	}

	if (str_length) {
8000c136:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c13a:	30 08       	mov	r8,0
8000c13c:	f0 09 18 00 	cp.b	r9,r8
8000c140:	c3 10       	breq	8000c1a2 <udc_req_std_dev_get_str_desc+0xba>
		for(i = 0; i < str_length; i++) {
8000c142:	30 08       	mov	r8,0
8000c144:	ef 68 ff f7 	st.b	r7[-9],r8
8000c148:	c1 88       	rjmp	8000c178 <udc_req_std_dev_get_str_desc+0x90>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
8000c14a:	ef 3b ff f7 	ld.ub	r11,r7[-9]
8000c14e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000c152:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000c156:	f2 08 00 08 	add	r8,r9,r8
8000c15a:	11 88       	ld.ub	r8,r8[0x0]
8000c15c:	5c c8       	swap.bh	r8
8000c15e:	5c 88       	casts.h	r8
8000c160:	10 99       	mov	r9,r8
8000c162:	49 8a       	lddpc	r10,8000c1c0 <udc_req_std_dev_get_str_desc+0xd8>
8000c164:	f6 08 15 01 	lsl	r8,r11,0x1
8000c168:	f4 08 00 08 	add	r8,r10,r8
8000c16c:	b0 19       	st.h	r8[0x2],r9
#endif
		return false;
	}

	if (str_length) {
		for(i = 0; i < str_length; i++) {
8000c16e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8000c172:	2f f8       	sub	r8,-1
8000c174:	ef 68 ff f7 	st.b	r7[-9],r8
8000c178:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8000c17c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c180:	f0 09 18 00 	cp.b	r9,r8
8000c184:	ce 33       	brcs	8000c14a <udc_req_std_dev_get_str_desc+0x62>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
8000c186:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c18a:	2f f8       	sub	r8,-1
8000c18c:	5c 58       	castu.b	r8
8000c18e:	a1 78       	lsl	r8,0x1
8000c190:	5c 58       	castu.b	r8
8000c192:	48 c9       	lddpc	r9,8000c1c0 <udc_req_std_dev_get_str_desc+0xd8>
8000c194:	b2 88       	st.b	r9[0x0],r8
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
8000c196:	48 b8       	lddpc	r8,8000c1c0 <udc_req_std_dev_get_str_desc+0xd8>
8000c198:	11 88       	ld.ub	r8,r8[0x0]
		for(i = 0; i < str_length; i++) {
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
		udd_set_setup_payload(
8000c19a:	10 9b       	mov	r11,r8
8000c19c:	48 9c       	lddpc	r12,8000c1c0 <udc_req_std_dev_get_str_desc+0xd8>
8000c19e:	f0 1f 00 06 	mcall	8000c1b4 <udc_req_std_dev_get_str_desc+0xcc>
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
	}

	return true;
8000c1a2:	30 18       	mov	r8,1
}
8000c1a4:	10 9c       	mov	r12,r8
8000c1a6:	2f dd       	sub	sp,-12
8000c1a8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c1ac:	00 00       	add	r0,r0
8000c1ae:	12 1c       	sub	r12,r9
8000c1b0:	00 00       	add	r0,r0
8000c1b2:	00 ac       	st.w	r0++,r12
8000c1b4:	80 00       	ld.sh	r0,r0[0x0]
8000c1b6:	8c 2c       	ld.sh	r12,r6[0x4]
8000c1b8:	00 00       	add	r0,r0
8000c1ba:	00 b0       	st.h	r0++,r0
8000c1bc:	00 00       	add	r0,r0
8000c1be:	00 bc       	st.h	r0++,r12
8000c1c0:	00 00       	add	r0,r0
8000c1c2:	00 c0       	st.b	r0++,r0

8000c1c4 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
8000c1c4:	eb cd 40 80 	pushm	r7,lr
8000c1c8:	1a 97       	mov	r7,sp
8000c1ca:	20 1d       	sub	sp,4
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
8000c1cc:	4c 18       	lddpc	r8,8000c2d0 <udc_req_std_dev_get_descriptor+0x10c>
8000c1ce:	90 18       	ld.sh	r8,r8[0x2]
8000c1d0:	ef 68 ff ff 	st.b	r7[-1],r8

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
8000c1d4:	4b f8       	lddpc	r8,8000c2d0 <udc_req_std_dev_get_descriptor+0x10c>
8000c1d6:	90 18       	ld.sh	r8,r8[0x2]
8000c1d8:	5c 78       	castu.h	r8
8000c1da:	a9 88       	lsr	r8,0x8
8000c1dc:	5c 88       	casts.h	r8
8000c1de:	5c 58       	castu.b	r8
8000c1e0:	58 28       	cp.w	r8,2
8000c1e2:	c1 60       	breq	8000c20e <udc_req_std_dev_get_descriptor+0x4a>
8000c1e4:	e0 89 00 05 	brgt	8000c1ee <udc_req_std_dev_get_descriptor+0x2a>
8000c1e8:	58 18       	cp.w	r8,1
8000c1ea:	c0 70       	breq	8000c1f8 <udc_req_std_dev_get_descriptor+0x34>
8000c1ec:	c5 f8       	rjmp	8000c2aa <udc_req_std_dev_get_descriptor+0xe6>
8000c1ee:	58 38       	cp.w	r8,3
8000c1f0:	c5 40       	breq	8000c298 <udc_req_std_dev_get_descriptor+0xd4>
8000c1f2:	58 f8       	cp.w	r8,15
8000c1f4:	c3 c0       	breq	8000c26c <udc_req_std_dev_get_descriptor+0xa8>
8000c1f6:	c5 a8       	rjmp	8000c2aa <udc_req_std_dev_get_descriptor+0xe6>
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
8000c1f8:	4b 78       	lddpc	r8,8000c2d4 <udc_req_std_dev_get_descriptor+0x110>
8000c1fa:	70 08       	ld.w	r8,r8[0x0]
8000c1fc:	11 88       	ld.ub	r8,r8[0x0]
				(uint8_t *) udc_config.confdev_hs,
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
8000c1fe:	10 99       	mov	r9,r8
8000c200:	4b 58       	lddpc	r8,8000c2d4 <udc_req_std_dev_get_descriptor+0x110>
8000c202:	70 08       	ld.w	r8,r8[0x0]
8000c204:	12 9b       	mov	r11,r9
8000c206:	10 9c       	mov	r12,r8
8000c208:	f0 1f 00 34 	mcall	8000c2d8 <udc_req_std_dev_get_descriptor+0x114>
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
8000c20c:	c5 28       	rjmp	8000c2b0 <udc_req_std_dev_get_descriptor+0xec>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
8000c20e:	4b 28       	lddpc	r8,8000c2d4 <udc_req_std_dev_get_descriptor+0x110>
8000c210:	70 08       	ld.w	r8,r8[0x0]
8000c212:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c216:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c21a:	f0 09 18 00 	cp.b	r9,r8
8000c21e:	c0 33       	brcs	8000c224 <udc_req_std_dev_get_descriptor+0x60>
					bNumConfigurations) {
				return false;
8000c220:	30 08       	mov	r8,0
8000c222:	c5 38       	rjmp	8000c2c8 <udc_req_std_dev_get_descriptor+0x104>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
8000c224:	4a c8       	lddpc	r8,8000c2d4 <udc_req_std_dev_get_descriptor+0x110>
8000c226:	70 19       	ld.w	r9,r8[0x4]
8000c228:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c22c:	a3 78       	lsl	r8,0x3
8000c22e:	f2 08 00 08 	add	r8,r9,r8
8000c232:	70 08       	ld.w	r8,r8[0x0]
8000c234:	11 a9       	ld.ub	r9,r8[0x2]
8000c236:	a9 69       	lsl	r9,0x8
8000c238:	11 b8       	ld.ub	r8,r8[0x3]
8000c23a:	12 48       	or	r8,r9
8000c23c:	5c 88       	casts.h	r8
8000c23e:	5c 88       	casts.h	r8
8000c240:	5c c8       	swap.bh	r8
8000c242:	5c 88       	casts.h	r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c244:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
8000c248:	4a 38       	lddpc	r8,8000c2d4 <udc_req_std_dev_get_descriptor+0x110>
8000c24a:	70 1a       	ld.w	r10,r8[0x4]
8000c24c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c250:	a3 78       	lsl	r8,0x3
8000c252:	f4 08 00 08 	add	r8,r10,r8
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
					bNumConfigurations) {
				return false;
			}
			udd_set_setup_payload(
8000c256:	70 08       	ld.w	r8,r8[0x0]
8000c258:	12 9b       	mov	r11,r9
8000c25a:	10 9c       	mov	r12,r8
8000c25c:	f0 1f 00 1f 	mcall	8000c2d8 <udc_req_std_dev_get_descriptor+0x114>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
8000c260:	49 c8       	lddpc	r8,8000c2d0 <udc_req_std_dev_get_descriptor+0x10c>
8000c262:	70 28       	ld.w	r8,r8[0x8]
8000c264:	10 99       	mov	r9,r8
8000c266:	30 28       	mov	r8,2
8000c268:	b2 98       	st.b	r9[0x1],r8
				USB_DT_CONFIGURATION;
		break;
8000c26a:	c2 38       	rjmp	8000c2b0 <udc_req_std_dev_get_descriptor+0xec>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
8000c26c:	49 a8       	lddpc	r8,8000c2d4 <udc_req_std_dev_get_descriptor+0x110>
8000c26e:	70 28       	ld.w	r8,r8[0x8]
8000c270:	58 08       	cp.w	r8,0
8000c272:	c0 31       	brne	8000c278 <udc_req_std_dev_get_descriptor+0xb4>
			return false;
8000c274:	30 08       	mov	r8,0
8000c276:	c2 98       	rjmp	8000c2c8 <udc_req_std_dev_get_descriptor+0x104>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
				udc_config.conf_bos->wTotalLength);
8000c278:	49 78       	lddpc	r8,8000c2d4 <udc_req_std_dev_get_descriptor+0x110>
8000c27a:	70 28       	ld.w	r8,r8[0x8]
8000c27c:	11 a9       	ld.ub	r9,r8[0x2]
8000c27e:	a9 69       	lsl	r9,0x8
8000c280:	11 b8       	ld.ub	r8,r8[0x3]
8000c282:	12 48       	or	r8,r9
8000c284:	5c 88       	casts.h	r8
	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
			return false;
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
8000c286:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8000c28a:	49 38       	lddpc	r8,8000c2d4 <udc_req_std_dev_get_descriptor+0x110>
8000c28c:	70 28       	ld.w	r8,r8[0x8]
8000c28e:	12 9b       	mov	r11,r9
8000c290:	10 9c       	mov	r12,r8
8000c292:	f0 1f 00 12 	mcall	8000c2d8 <udc_req_std_dev_get_descriptor+0x114>
				udc_config.conf_bos->wTotalLength);
		break;
8000c296:	c0 d8       	rjmp	8000c2b0 <udc_req_std_dev_get_descriptor+0xec>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
8000c298:	f0 1f 00 11 	mcall	8000c2dc <udc_req_std_dev_get_descriptor+0x118>
8000c29c:	18 98       	mov	r8,r12
8000c29e:	ec 18 00 01 	eorl	r8,0x1
8000c2a2:	5c 58       	castu.b	r8
8000c2a4:	c0 50       	breq	8000c2ae <udc_req_std_dev_get_descriptor+0xea>
			return false;
8000c2a6:	30 08       	mov	r8,0
8000c2a8:	c1 08       	rjmp	8000c2c8 <udc_req_std_dev_get_descriptor+0x104>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
8000c2aa:	30 08       	mov	r8,0
8000c2ac:	c0 e8       	rjmp	8000c2c8 <udc_req_std_dev_get_descriptor+0x104>
	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
			return false;
		}
		break;
8000c2ae:	d7 03       	nop
	default:
		// Unknown descriptor requested
		return false;
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
8000c2b0:	48 88       	lddpc	r8,8000c2d0 <udc_req_std_dev_get_descriptor+0x10c>
8000c2b2:	90 39       	ld.sh	r9,r8[0x6]
8000c2b4:	48 78       	lddpc	r8,8000c2d0 <udc_req_std_dev_get_descriptor+0x10c>
8000c2b6:	90 68       	ld.sh	r8,r8[0xc]
8000c2b8:	f0 09 19 00 	cp.h	r9,r8
8000c2bc:	c0 52       	brcc	8000c2c6 <udc_req_std_dev_get_descriptor+0x102>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
8000c2be:	48 58       	lddpc	r8,8000c2d0 <udc_req_std_dev_get_descriptor+0x10c>
8000c2c0:	90 38       	ld.sh	r8,r8[0x6]
8000c2c2:	48 49       	lddpc	r9,8000c2d0 <udc_req_std_dev_get_descriptor+0x10c>
8000c2c4:	b2 68       	st.h	r9[0xc],r8
	}
	return true;
8000c2c6:	30 18       	mov	r8,1
}
8000c2c8:	10 9c       	mov	r12,r8
8000c2ca:	2f fd       	sub	sp,-4
8000c2cc:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c2d0:	00 00       	add	r0,r0
8000c2d2:	12 1c       	sub	r12,r9
8000c2d4:	00 00       	add	r0,r0
8000c2d6:	00 a0       	st.w	r0++,r0
8000c2d8:	80 00       	ld.sh	r0,r0[0x0]
8000c2da:	8c 2c       	ld.sh	r12,r6[0x4]
8000c2dc:	80 00       	ld.sh	r0,r0[0x0]
8000c2de:	c0 e8       	rjmp	8000c2fa <udc_req_std_dev_get_configuration+0x1a>

8000c2e0 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
8000c2e0:	eb cd 40 80 	pushm	r7,lr
8000c2e4:	1a 97       	mov	r7,sp
	if (udd_g_ctrlreq.req.wLength != 1) {
8000c2e6:	48 98       	lddpc	r8,8000c308 <udc_req_std_dev_get_configuration+0x28>
8000c2e8:	90 39       	ld.sh	r9,r8[0x6]
8000c2ea:	30 18       	mov	r8,1
8000c2ec:	f0 09 19 00 	cp.h	r9,r8
8000c2f0:	c0 30       	breq	8000c2f6 <udc_req_std_dev_get_configuration+0x16>
		return false;
8000c2f2:	30 08       	mov	r8,0
8000c2f4:	c0 68       	rjmp	8000c300 <udc_req_std_dev_get_configuration+0x20>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
8000c2f6:	30 1b       	mov	r11,1
8000c2f8:	48 5c       	lddpc	r12,8000c30c <udc_req_std_dev_get_configuration+0x2c>
8000c2fa:	f0 1f 00 06 	mcall	8000c310 <udc_req_std_dev_get_configuration+0x30>
	return true;
8000c2fe:	30 18       	mov	r8,1
}
8000c300:	10 9c       	mov	r12,r8
8000c302:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c306:	00 00       	add	r0,r0
8000c308:	00 00       	add	r0,r0
8000c30a:	12 1c       	sub	r12,r9
8000c30c:	00 00       	add	r0,r0
8000c30e:	0c 80       	andn	r0,r6
8000c310:	80 00       	ld.sh	r0,r0[0x0]
8000c312:	8c 2c       	ld.sh	r12,r6[0x4]

8000c314 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
8000c314:	eb cd 40 80 	pushm	r7,lr
8000c318:	1a 97       	mov	r7,sp
8000c31a:	20 1d       	sub	sp,4
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
8000c31c:	4a b8       	lddpc	r8,8000c3c8 <udc_req_std_dev_set_configuration+0xb4>
8000c31e:	90 38       	ld.sh	r8,r8[0x6]
8000c320:	58 08       	cp.w	r8,0
8000c322:	c0 30       	breq	8000c328 <udc_req_std_dev_set_configuration+0x14>
		return false;
8000c324:	30 08       	mov	r8,0
8000c326:	c4 c8       	rjmp	8000c3be <udc_req_std_dev_set_configuration+0xaa>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
8000c328:	f0 1f 00 29 	mcall	8000c3cc <udc_req_std_dev_set_configuration+0xb8>
8000c32c:	18 98       	mov	r8,r12
8000c32e:	58 08       	cp.w	r8,0
8000c330:	c0 31       	brne	8000c336 <udc_req_std_dev_set_configuration+0x22>
		return false;
8000c332:	30 08       	mov	r8,0
8000c334:	c4 58       	rjmp	8000c3be <udc_req_std_dev_set_configuration+0xaa>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000c336:	4a 58       	lddpc	r8,8000c3c8 <udc_req_std_dev_set_configuration+0xb4>
8000c338:	90 18       	ld.sh	r8,r8[0x2]
8000c33a:	5c 78       	castu.h	r8
8000c33c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
				udc_config.confdev_lsfs->bNumConfigurations) {
8000c340:	4a 48       	lddpc	r8,8000c3d0 <udc_req_std_dev_set_configuration+0xbc>
8000c342:	70 08       	ld.w	r8,r8[0x0]
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
8000c344:	f1 38 00 11 	ld.ub	r8,r8[17]
8000c348:	10 39       	cp.w	r9,r8
8000c34a:	e0 8a 00 04 	brle	8000c352 <udc_req_std_dev_set_configuration+0x3e>
				udc_config.confdev_lsfs->bNumConfigurations) {
			return false;
8000c34e:	30 08       	mov	r8,0
8000c350:	c3 78       	rjmp	8000c3be <udc_req_std_dev_set_configuration+0xaa>
		}
	}

	// Reset current configuration
	udc_reset();
8000c352:	f0 1f 00 21 	mcall	8000c3d4 <udc_req_std_dev_set_configuration+0xc0>

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
8000c356:	49 d8       	lddpc	r8,8000c3c8 <udc_req_std_dev_set_configuration+0xb4>
8000c358:	90 18       	ld.sh	r8,r8[0x2]
8000c35a:	5c 58       	castu.b	r8
8000c35c:	49 f9       	lddpc	r9,8000c3d8 <udc_req_std_dev_set_configuration+0xc4>
8000c35e:	b2 88       	st.b	r9[0x0],r8
	if (udc_num_configuration == 0) {
8000c360:	49 e8       	lddpc	r8,8000c3d8 <udc_req_std_dev_set_configuration+0xc4>
8000c362:	11 88       	ld.ub	r8,r8[0x0]
8000c364:	58 08       	cp.w	r8,0
8000c366:	c0 31       	brne	8000c36c <udc_req_std_dev_set_configuration+0x58>
		return true; // Default empty configuration requested
8000c368:	30 18       	mov	r8,1
8000c36a:	c2 a8       	rjmp	8000c3be <udc_req_std_dev_set_configuration+0xaa>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
8000c36c:	49 98       	lddpc	r8,8000c3d0 <udc_req_std_dev_set_configuration+0xbc>
8000c36e:	70 19       	ld.w	r9,r8[0x4]
8000c370:	49 a8       	lddpc	r8,8000c3d8 <udc_req_std_dev_set_configuration+0xc4>
8000c372:	11 88       	ld.ub	r8,r8[0x0]
8000c374:	20 18       	sub	r8,1
8000c376:	a3 78       	lsl	r8,0x3
8000c378:	10 09       	add	r9,r8
8000c37a:	49 98       	lddpc	r8,8000c3dc <udc_req_std_dev_set_configuration+0xc8>
8000c37c:	91 09       	st.w	r8[0x0],r9
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000c37e:	30 08       	mov	r8,0
8000c380:	ef 68 ff ff 	st.b	r7[-1],r8
8000c384:	c1 38       	rjmp	8000c3aa <udc_req_std_dev_set_configuration+0x96>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
8000c386:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c38a:	30 0b       	mov	r11,0
8000c38c:	10 9c       	mov	r12,r8
8000c38e:	f0 1f 00 15 	mcall	8000c3e0 <udc_req_std_dev_set_configuration+0xcc>
8000c392:	18 98       	mov	r8,r12
8000c394:	ec 18 00 01 	eorl	r8,0x1
8000c398:	5c 58       	castu.b	r8
8000c39a:	c0 30       	breq	8000c3a0 <udc_req_std_dev_set_configuration+0x8c>
			return false;
8000c39c:	30 08       	mov	r8,0
8000c39e:	c1 08       	rjmp	8000c3be <udc_req_std_dev_set_configuration+0xaa>
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000c3a0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000c3a4:	2f f8       	sub	r8,-1
8000c3a6:	ef 68 ff ff 	st.b	r7[-1],r8
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000c3aa:	48 d8       	lddpc	r8,8000c3dc <udc_req_std_dev_set_configuration+0xc8>
8000c3ac:	70 08       	ld.w	r8,r8[0x0]
8000c3ae:	70 08       	ld.w	r8,r8[0x0]
8000c3b0:	11 c8       	ld.ub	r8,r8[0x4]
8000c3b2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c3b6:	f0 09 18 00 	cp.b	r9,r8
8000c3ba:	ce 63       	brcs	8000c386 <udc_req_std_dev_set_configuration+0x72>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
			return false;
		}
	}
	return true;
8000c3bc:	30 18       	mov	r8,1
}
8000c3be:	10 9c       	mov	r12,r8
8000c3c0:	2f fd       	sub	sp,-4
8000c3c2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c3c6:	00 00       	add	r0,r0
8000c3c8:	00 00       	add	r0,r0
8000c3ca:	12 1c       	sub	r12,r9
8000c3cc:	80 00       	ld.sh	r0,r0[0x0]
8000c3ce:	8b e0       	st.w	r5[0x38],r0
8000c3d0:	00 00       	add	r0,r0
8000c3d2:	00 a0       	st.w	r0++,r0
8000c3d4:	80 00       	ld.sh	r0,r0[0x0]
8000c3d6:	be 48       	st.h	pc[0x8],r8
8000c3d8:	00 00       	add	r0,r0
8000c3da:	0c 80       	andn	r0,r6
8000c3dc:	00 00       	add	r0,r0
8000c3de:	0c 84       	andn	r4,r6
8000c3e0:	80 00       	ld.sh	r0,r0[0x0]
8000c3e2:	bd 6c       	lsl	r12,0x1c

8000c3e4 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
8000c3e4:	eb cd 40 80 	pushm	r7,lr
8000c3e8:	1a 97       	mov	r7,sp
8000c3ea:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
8000c3ec:	4a 38       	lddpc	r8,8000c478 <udc_req_std_iface_get_setting+0x94>
8000c3ee:	90 39       	ld.sh	r9,r8[0x6]
8000c3f0:	30 18       	mov	r8,1
8000c3f2:	f0 09 19 00 	cp.h	r9,r8
8000c3f6:	c0 30       	breq	8000c3fc <udc_req_std_iface_get_setting+0x18>
		return false; // Error in request
8000c3f8:	30 08       	mov	r8,0
8000c3fa:	c3 a8       	rjmp	8000c46e <udc_req_std_iface_get_setting+0x8a>
	}
	if (!udc_num_configuration) {
8000c3fc:	4a 08       	lddpc	r8,8000c47c <udc_req_std_iface_get_setting+0x98>
8000c3fe:	11 88       	ld.ub	r8,r8[0x0]
8000c400:	58 08       	cp.w	r8,0
8000c402:	c0 31       	brne	8000c408 <udc_req_std_iface_get_setting+0x24>
		return false; // The device is not is configured state yet
8000c404:	30 08       	mov	r8,0
8000c406:	c3 48       	rjmp	8000c46e <udc_req_std_iface_get_setting+0x8a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000c408:	49 c8       	lddpc	r8,8000c478 <udc_req_std_iface_get_setting+0x94>
8000c40a:	90 28       	ld.sh	r8,r8[0x4]
8000c40c:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000c410:	49 c8       	lddpc	r8,8000c480 <udc_req_std_iface_get_setting+0x9c>
8000c412:	70 08       	ld.w	r8,r8[0x0]
8000c414:	70 08       	ld.w	r8,r8[0x0]
8000c416:	11 c8       	ld.ub	r8,r8[0x4]
8000c418:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c41c:	f0 09 18 00 	cp.b	r9,r8
8000c420:	c0 33       	brcs	8000c426 <udc_req_std_iface_get_setting+0x42>
		return false;
8000c422:	30 08       	mov	r8,0
8000c424:	c2 58       	rjmp	8000c46e <udc_req_std_iface_get_setting+0x8a>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000c426:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c42a:	30 0b       	mov	r11,0
8000c42c:	10 9c       	mov	r12,r8
8000c42e:	f0 1f 00 16 	mcall	8000c484 <udc_req_std_iface_get_setting+0xa0>
8000c432:	18 98       	mov	r8,r12
8000c434:	ec 18 00 01 	eorl	r8,0x1
8000c438:	5c 58       	castu.b	r8
8000c43a:	c0 30       	breq	8000c440 <udc_req_std_iface_get_setting+0x5c>
		return false;
8000c43c:	30 08       	mov	r8,0
8000c43e:	c1 88       	rjmp	8000c46e <udc_req_std_iface_get_setting+0x8a>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000c440:	49 08       	lddpc	r8,8000c480 <udc_req_std_iface_get_setting+0x9c>
8000c442:	70 08       	ld.w	r8,r8[0x0]
8000c444:	70 19       	ld.w	r9,r8[0x4]
8000c446:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c44a:	a3 68       	lsl	r8,0x2
8000c44c:	f2 08 00 08 	add	r8,r9,r8
8000c450:	70 08       	ld.w	r8,r8[0x0]
8000c452:	ef 48 ff fc 	st.w	r7[-4],r8
	udc_iface_setting = udi_api->getsetting();
8000c456:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c45a:	70 38       	ld.w	r8,r8[0xc]
8000c45c:	5d 18       	icall	r8
8000c45e:	18 98       	mov	r8,r12
8000c460:	48 a9       	lddpc	r9,8000c488 <udc_req_std_iface_get_setting+0xa4>
8000c462:	b2 88       	st.b	r9[0x0],r8

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
8000c464:	30 1b       	mov	r11,1
8000c466:	48 9c       	lddpc	r12,8000c488 <udc_req_std_iface_get_setting+0xa4>
8000c468:	f0 1f 00 09 	mcall	8000c48c <udc_req_std_iface_get_setting+0xa8>
	return true;
8000c46c:	30 18       	mov	r8,1
}
8000c46e:	10 9c       	mov	r12,r8
8000c470:	2f ed       	sub	sp,-8
8000c472:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c476:	00 00       	add	r0,r0
8000c478:	00 00       	add	r0,r0
8000c47a:	12 1c       	sub	r12,r9
8000c47c:	00 00       	add	r0,r0
8000c47e:	0c 80       	andn	r0,r6
8000c480:	00 00       	add	r0,r0
8000c482:	0c 84       	andn	r4,r6
8000c484:	80 00       	ld.sh	r0,r0[0x0]
8000c486:	bb f8       	*unknown*
8000c488:	00 00       	add	r0,r0
8000c48a:	0c 7c       	tst	r12,r6
8000c48c:	80 00       	ld.sh	r0,r0[0x0]
8000c48e:	8c 2c       	ld.sh	r12,r6[0x4]

8000c490 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
8000c490:	eb cd 40 80 	pushm	r7,lr
8000c494:	1a 97       	mov	r7,sp
8000c496:	20 1d       	sub	sp,4
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
8000c498:	49 78       	lddpc	r8,8000c4f4 <udc_req_std_iface_set_setting+0x64>
8000c49a:	90 38       	ld.sh	r8,r8[0x6]
8000c49c:	58 08       	cp.w	r8,0
8000c49e:	c0 30       	breq	8000c4a4 <udc_req_std_iface_set_setting+0x14>
		return false; // Error in request
8000c4a0:	30 08       	mov	r8,0
8000c4a2:	c2 48       	rjmp	8000c4ea <udc_req_std_iface_set_setting+0x5a>
	}
	if (!udc_num_configuration) {
8000c4a4:	49 58       	lddpc	r8,8000c4f8 <udc_req_std_iface_set_setting+0x68>
8000c4a6:	11 88       	ld.ub	r8,r8[0x0]
8000c4a8:	58 08       	cp.w	r8,0
8000c4aa:	c0 31       	brne	8000c4b0 <udc_req_std_iface_set_setting+0x20>
		return false; // The device is not is configured state yet
8000c4ac:	30 08       	mov	r8,0
8000c4ae:	c1 e8       	rjmp	8000c4ea <udc_req_std_iface_set_setting+0x5a>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000c4b0:	49 18       	lddpc	r8,8000c4f4 <udc_req_std_iface_set_setting+0x64>
8000c4b2:	90 28       	ld.sh	r8,r8[0x4]
8000c4b4:	ef 68 ff fe 	st.b	r7[-2],r8
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
8000c4b8:	48 f8       	lddpc	r8,8000c4f4 <udc_req_std_iface_set_setting+0x64>
8000c4ba:	90 18       	ld.sh	r8,r8[0x2]
8000c4bc:	ef 68 ff ff 	st.b	r7[-1],r8

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
8000c4c0:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c4c4:	10 9c       	mov	r12,r8
8000c4c6:	f0 1f 00 0e 	mcall	8000c4fc <udc_req_std_iface_set_setting+0x6c>
8000c4ca:	18 98       	mov	r8,r12
8000c4cc:	ec 18 00 01 	eorl	r8,0x1
8000c4d0:	5c 58       	castu.b	r8
8000c4d2:	c0 30       	breq	8000c4d8 <udc_req_std_iface_set_setting+0x48>
		return false;
8000c4d4:	30 08       	mov	r8,0
8000c4d6:	c0 a8       	rjmp	8000c4ea <udc_req_std_iface_set_setting+0x5a>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
8000c4d8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000c4dc:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8000c4e0:	12 9b       	mov	r11,r9
8000c4e2:	10 9c       	mov	r12,r8
8000c4e4:	f0 1f 00 07 	mcall	8000c500 <udc_req_std_iface_set_setting+0x70>
8000c4e8:	18 98       	mov	r8,r12
}
8000c4ea:	10 9c       	mov	r12,r8
8000c4ec:	2f fd       	sub	sp,-4
8000c4ee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c4f2:	00 00       	add	r0,r0
8000c4f4:	00 00       	add	r0,r0
8000c4f6:	12 1c       	sub	r12,r9
8000c4f8:	00 00       	add	r0,r0
8000c4fa:	0c 80       	andn	r0,r6
8000c4fc:	80 00       	ld.sh	r0,r0[0x0]
8000c4fe:	bc b0       	st.b	lr[0x3],r0
8000c500:	80 00       	ld.sh	r0,r0[0x0]
8000c502:	bd 6c       	lsl	r12,0x1c

8000c504 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
8000c504:	eb cd 40 80 	pushm	r7,lr
8000c508:	1a 97       	mov	r7,sp
	if (Udd_setup_is_in()) {
8000c50a:	4c 78       	lddpc	r8,8000c624 <udc_reqstd+0x120>
8000c50c:	11 88       	ld.ub	r8,r8[0x0]
8000c50e:	10 99       	mov	r9,r8
8000c510:	30 08       	mov	r8,0
8000c512:	f0 09 18 00 	cp.b	r9,r8
8000c516:	c3 c4       	brge	8000c58e <udc_reqstd+0x8a>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
8000c518:	4c 38       	lddpc	r8,8000c624 <udc_reqstd+0x120>
8000c51a:	90 38       	ld.sh	r8,r8[0x6]
8000c51c:	58 08       	cp.w	r8,0
8000c51e:	c0 31       	brne	8000c524 <udc_reqstd+0x20>
			return false; // Error for USB host
8000c520:	30 08       	mov	r8,0
8000c522:	c7 d8       	rjmp	8000c61c <udc_reqstd+0x118>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000c524:	4c 08       	lddpc	r8,8000c624 <udc_reqstd+0x120>
8000c526:	11 88       	ld.ub	r8,r8[0x0]
8000c528:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c52c:	c1 51       	brne	8000c556 <udc_reqstd+0x52>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c52e:	4b e8       	lddpc	r8,8000c624 <udc_reqstd+0x120>
8000c530:	11 98       	ld.ub	r8,r8[0x1]
8000c532:	58 68       	cp.w	r8,6
8000c534:	c0 90       	breq	8000c546 <udc_reqstd+0x42>
8000c536:	58 88       	cp.w	r8,8
8000c538:	c0 b0       	breq	8000c54e <udc_reqstd+0x4a>
8000c53a:	58 08       	cp.w	r8,0
8000c53c:	c0 d1       	brne	8000c556 <udc_reqstd+0x52>
			case USB_REQ_GET_STATUS:
				return udc_req_std_dev_get_status();
8000c53e:	f0 1f 00 3b 	mcall	8000c628 <udc_reqstd+0x124>
8000c542:	18 98       	mov	r8,r12
8000c544:	c6 c8       	rjmp	8000c61c <udc_reqstd+0x118>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
8000c546:	f0 1f 00 3a 	mcall	8000c62c <udc_reqstd+0x128>
8000c54a:	18 98       	mov	r8,r12
8000c54c:	c6 88       	rjmp	8000c61c <udc_reqstd+0x118>
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
8000c54e:	f0 1f 00 39 	mcall	8000c630 <udc_reqstd+0x12c>
8000c552:	18 98       	mov	r8,r12
8000c554:	c6 48       	rjmp	8000c61c <udc_reqstd+0x118>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000c556:	4b 48       	lddpc	r8,8000c624 <udc_reqstd+0x120>
8000c558:	11 88       	ld.ub	r8,r8[0x0]
8000c55a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c55e:	58 18       	cp.w	r8,1
8000c560:	c0 91       	brne	8000c572 <udc_reqstd+0x6e>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c562:	4b 18       	lddpc	r8,8000c624 <udc_reqstd+0x120>
8000c564:	11 98       	ld.ub	r8,r8[0x1]
8000c566:	58 a8       	cp.w	r8,10
8000c568:	c0 51       	brne	8000c572 <udc_reqstd+0x6e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
8000c56a:	f0 1f 00 33 	mcall	8000c634 <udc_reqstd+0x130>
8000c56e:	18 98       	mov	r8,r12
8000c570:	c5 68       	rjmp	8000c61c <udc_reqstd+0x118>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000c572:	4a d8       	lddpc	r8,8000c624 <udc_reqstd+0x120>
8000c574:	11 88       	ld.ub	r8,r8[0x0]
8000c576:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c57a:	58 28       	cp.w	r8,2
8000c57c:	c4 f1       	brne	8000c61a <udc_reqstd+0x116>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c57e:	4a a8       	lddpc	r8,8000c624 <udc_reqstd+0x120>
8000c580:	11 98       	ld.ub	r8,r8[0x1]
8000c582:	58 08       	cp.w	r8,0
8000c584:	c4 b1       	brne	8000c61a <udc_reqstd+0x116>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
8000c586:	f0 1f 00 2d 	mcall	8000c638 <udc_reqstd+0x134>
8000c58a:	18 98       	mov	r8,r12
8000c58c:	c4 88       	rjmp	8000c61c <udc_reqstd+0x118>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
8000c58e:	4a 68       	lddpc	r8,8000c624 <udc_reqstd+0x120>
8000c590:	11 88       	ld.ub	r8,r8[0x0]
8000c592:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c596:	c1 f1       	brne	8000c5d4 <udc_reqstd+0xd0>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c598:	4a 38       	lddpc	r8,8000c624 <udc_reqstd+0x120>
8000c59a:	11 98       	ld.ub	r8,r8[0x1]
8000c59c:	58 38       	cp.w	r8,3
8000c59e:	c1 30       	breq	8000c5c4 <udc_reqstd+0xc0>
8000c5a0:	e0 89 00 05 	brgt	8000c5aa <udc_reqstd+0xa6>
8000c5a4:	58 18       	cp.w	r8,1
8000c5a6:	c0 b0       	breq	8000c5bc <udc_reqstd+0xb8>
8000c5a8:	c1 68       	rjmp	8000c5d4 <udc_reqstd+0xd0>
8000c5aa:	58 58       	cp.w	r8,5
8000c5ac:	c0 40       	breq	8000c5b4 <udc_reqstd+0xb0>
8000c5ae:	58 98       	cp.w	r8,9
8000c5b0:	c0 e0       	breq	8000c5cc <udc_reqstd+0xc8>
8000c5b2:	c1 18       	rjmp	8000c5d4 <udc_reqstd+0xd0>
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
8000c5b4:	f0 1f 00 22 	mcall	8000c63c <udc_reqstd+0x138>
8000c5b8:	18 98       	mov	r8,r12
8000c5ba:	c3 18       	rjmp	8000c61c <udc_reqstd+0x118>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
8000c5bc:	f0 1f 00 21 	mcall	8000c640 <udc_reqstd+0x13c>
8000c5c0:	18 98       	mov	r8,r12
8000c5c2:	c2 d8       	rjmp	8000c61c <udc_reqstd+0x118>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
8000c5c4:	f0 1f 00 20 	mcall	8000c644 <udc_reqstd+0x140>
8000c5c8:	18 98       	mov	r8,r12
8000c5ca:	c2 98       	rjmp	8000c61c <udc_reqstd+0x118>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
8000c5cc:	f0 1f 00 1f 	mcall	8000c648 <udc_reqstd+0x144>
8000c5d0:	18 98       	mov	r8,r12
8000c5d2:	c2 58       	rjmp	8000c61c <udc_reqstd+0x118>
			default:
				break;
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
8000c5d4:	49 48       	lddpc	r8,8000c624 <udc_reqstd+0x120>
8000c5d6:	11 88       	ld.ub	r8,r8[0x0]
8000c5d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c5dc:	58 18       	cp.w	r8,1
8000c5de:	c0 91       	brne	8000c5f0 <udc_reqstd+0xec>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c5e0:	49 18       	lddpc	r8,8000c624 <udc_reqstd+0x120>
8000c5e2:	11 98       	ld.ub	r8,r8[0x1]
8000c5e4:	58 b8       	cp.w	r8,11
8000c5e6:	c0 51       	brne	8000c5f0 <udc_reqstd+0xec>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
8000c5e8:	f0 1f 00 19 	mcall	8000c64c <udc_reqstd+0x148>
8000c5ec:	18 98       	mov	r8,r12
8000c5ee:	c1 78       	rjmp	8000c61c <udc_reqstd+0x118>
			default:
				break;
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
8000c5f0:	48 d8       	lddpc	r8,8000c624 <udc_reqstd+0x120>
8000c5f2:	11 88       	ld.ub	r8,r8[0x0]
8000c5f4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c5f8:	58 28       	cp.w	r8,2
8000c5fa:	c1 01       	brne	8000c61a <udc_reqstd+0x116>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
8000c5fc:	48 a8       	lddpc	r8,8000c624 <udc_reqstd+0x120>
8000c5fe:	11 98       	ld.ub	r8,r8[0x1]
8000c600:	58 18       	cp.w	r8,1
8000c602:	c0 40       	breq	8000c60a <udc_reqstd+0x106>
8000c604:	58 38       	cp.w	r8,3
8000c606:	c0 60       	breq	8000c612 <udc_reqstd+0x10e>
8000c608:	c0 98       	rjmp	8000c61a <udc_reqstd+0x116>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
8000c60a:	f0 1f 00 12 	mcall	8000c650 <udc_reqstd+0x14c>
8000c60e:	18 98       	mov	r8,r12
8000c610:	c0 68       	rjmp	8000c61c <udc_reqstd+0x118>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
8000c612:	f0 1f 00 11 	mcall	8000c654 <udc_reqstd+0x150>
8000c616:	18 98       	mov	r8,r12
8000c618:	c0 28       	rjmp	8000c61c <udc_reqstd+0x118>
				break;
			}
		}
#endif
	}
	return false;
8000c61a:	30 08       	mov	r8,0
}
8000c61c:	10 9c       	mov	r12,r8
8000c61e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c622:	00 00       	add	r0,r0
8000c624:	00 00       	add	r0,r0
8000c626:	12 1c       	sub	r12,r9
8000c628:	80 00       	ld.sh	r0,r0[0x0]
8000c62a:	bf 1c       	ld.d	r12,--pc
8000c62c:	80 00       	ld.sh	r0,r0[0x0]
8000c62e:	c1 c4       	brge	8000c666 <udc_req_iface+0xe>
8000c630:	80 00       	ld.sh	r0,r0[0x0]
8000c632:	c2 e0       	breq	8000c68e <udc_req_iface+0x36>
8000c634:	80 00       	ld.sh	r0,r0[0x0]
8000c636:	c3 e4       	brge	8000c6b2 <udc_req_iface+0x5a>
8000c638:	80 00       	ld.sh	r0,r0[0x0]
8000c63a:	bf 50       	asr	r0,0x1f
8000c63c:	80 00       	ld.sh	r0,r0[0x0]
8000c63e:	c0 c0       	breq	8000c656 <udc_reqstd+0x152>
8000c640:	80 00       	ld.sh	r0,r0[0x0]
8000c642:	bf a8       	sbr	r8,0x1e
8000c644:	80 00       	ld.sh	r0,r0[0x0]
8000c646:	c0 24       	brge	8000c64a <udc_reqstd+0x146>
8000c648:	80 00       	ld.sh	r0,r0[0x0]
8000c64a:	c3 14       	brge	8000c6ac <udc_req_iface+0x54>
8000c64c:	80 00       	ld.sh	r0,r0[0x0]
8000c64e:	c4 90       	breq	8000c6e0 <udc_req_iface+0x88>
8000c650:	80 00       	ld.sh	r0,r0[0x0]
8000c652:	bf e8       	*unknown*
8000c654:	80 00       	ld.sh	r0,r0[0x0]
8000c656:	c0 50       	breq	8000c660 <udc_req_iface+0x8>

8000c658 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
8000c658:	eb cd 40 80 	pushm	r7,lr
8000c65c:	1a 97       	mov	r7,sp
8000c65e:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
8000c660:	4a 58       	lddpc	r8,8000c6f4 <udc_req_iface+0x9c>
8000c662:	11 88       	ld.ub	r8,r8[0x0]
8000c664:	58 08       	cp.w	r8,0
8000c666:	c0 31       	brne	8000c66c <udc_req_iface+0x14>
		return false; // The device is not is configured state yet
8000c668:	30 08       	mov	r8,0
8000c66a:	c4 08       	rjmp	8000c6ea <udc_req_iface+0x92>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000c66c:	4a 38       	lddpc	r8,8000c6f8 <udc_req_iface+0xa0>
8000c66e:	90 28       	ld.sh	r8,r8[0x4]
8000c670:	ef 68 ff fb 	st.b	r7[-5],r8
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
8000c674:	4a 28       	lddpc	r8,8000c6fc <udc_req_iface+0xa4>
8000c676:	70 08       	ld.w	r8,r8[0x0]
8000c678:	70 08       	ld.w	r8,r8[0x0]
8000c67a:	11 c8       	ld.ub	r8,r8[0x4]
8000c67c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c680:	f0 09 18 00 	cp.b	r9,r8
8000c684:	c0 33       	brcs	8000c68a <udc_req_iface+0x32>
		return false;
8000c686:	30 08       	mov	r8,0
8000c688:	c3 18       	rjmp	8000c6ea <udc_req_iface+0x92>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
8000c68a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c68e:	30 0b       	mov	r11,0
8000c690:	10 9c       	mov	r12,r8
8000c692:	f0 1f 00 1c 	mcall	8000c700 <udc_req_iface+0xa8>
8000c696:	18 98       	mov	r8,r12
8000c698:	ec 18 00 01 	eorl	r8,0x1
8000c69c:	5c 58       	castu.b	r8
8000c69e:	c0 30       	breq	8000c6a4 <udc_req_iface+0x4c>
		return false;
8000c6a0:	30 08       	mov	r8,0
8000c6a2:	c2 48       	rjmp	8000c6ea <udc_req_iface+0x92>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
8000c6a4:	49 68       	lddpc	r8,8000c6fc <udc_req_iface+0xa4>
8000c6a6:	70 08       	ld.w	r8,r8[0x0]
8000c6a8:	70 19       	ld.w	r9,r8[0x4]
8000c6aa:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c6ae:	a3 68       	lsl	r8,0x2
8000c6b0:	f2 08 00 08 	add	r8,r9,r8
8000c6b4:	70 08       	ld.w	r8,r8[0x0]
8000c6b6:	ef 48 ff fc 	st.w	r7[-4],r8
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000c6ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c6be:	70 38       	ld.w	r8,r8[0xc]
8000c6c0:	5d 18       	icall	r8
8000c6c2:	18 98       	mov	r8,r12
8000c6c4:	10 99       	mov	r9,r8
8000c6c6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c6ca:	12 9b       	mov	r11,r9
8000c6cc:	10 9c       	mov	r12,r8
8000c6ce:	f0 1f 00 0d 	mcall	8000c700 <udc_req_iface+0xa8>
8000c6d2:	18 98       	mov	r8,r12
8000c6d4:	ec 18 00 01 	eorl	r8,0x1
8000c6d8:	5c 58       	castu.b	r8
8000c6da:	c0 30       	breq	8000c6e0 <udc_req_iface+0x88>
		return false;
8000c6dc:	30 08       	mov	r8,0
8000c6de:	c0 68       	rjmp	8000c6ea <udc_req_iface+0x92>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
8000c6e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c6e4:	70 28       	ld.w	r8,r8[0x8]
8000c6e6:	5d 18       	icall	r8
8000c6e8:	18 98       	mov	r8,r12
}
8000c6ea:	10 9c       	mov	r12,r8
8000c6ec:	2f ed       	sub	sp,-8
8000c6ee:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c6f2:	00 00       	add	r0,r0
8000c6f4:	00 00       	add	r0,r0
8000c6f6:	0c 80       	andn	r0,r6
8000c6f8:	00 00       	add	r0,r0
8000c6fa:	12 1c       	sub	r12,r9
8000c6fc:	00 00       	add	r0,r0
8000c6fe:	0c 84       	andn	r4,r6
8000c700:	80 00       	ld.sh	r0,r0[0x0]
8000c702:	bb f8       	*unknown*

8000c704 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
8000c704:	eb cd 40 80 	pushm	r7,lr
8000c708:	1a 97       	mov	r7,sp
8000c70a:	20 2d       	sub	sp,8
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
8000c70c:	4a 48       	lddpc	r8,8000c79c <udc_req_ep+0x98>
8000c70e:	11 88       	ld.ub	r8,r8[0x0]
8000c710:	58 08       	cp.w	r8,0
8000c712:	c0 31       	brne	8000c718 <udc_req_ep+0x14>
		return false; // The device is not is configured state yet
8000c714:	30 08       	mov	r8,0
8000c716:	c3 f8       	rjmp	8000c794 <udc_req_ep+0x90>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
8000c718:	4a 28       	lddpc	r8,8000c7a0 <udc_req_ep+0x9c>
8000c71a:	90 28       	ld.sh	r8,r8[0x4]
8000c71c:	ef 68 ff fb 	st.b	r7[-5],r8
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000c720:	30 08       	mov	r8,0
8000c722:	ef 68 ff fb 	st.b	r7[-5],r8
8000c726:	c2 d8       	rjmp	8000c780 <udc_req_ep+0x7c>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
8000c728:	49 f8       	lddpc	r8,8000c7a4 <udc_req_ep+0xa0>
8000c72a:	70 08       	ld.w	r8,r8[0x0]
8000c72c:	70 19       	ld.w	r9,r8[0x4]
8000c72e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c732:	a3 68       	lsl	r8,0x2
8000c734:	f2 08 00 08 	add	r8,r9,r8
8000c738:	70 08       	ld.w	r8,r8[0x0]
8000c73a:	ef 48 ff fc 	st.w	r7[-4],r8
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
8000c73e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c742:	70 38       	ld.w	r8,r8[0xc]
8000c744:	5d 18       	icall	r8
8000c746:	18 98       	mov	r8,r12
8000c748:	10 99       	mov	r9,r8
8000c74a:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c74e:	12 9b       	mov	r11,r9
8000c750:	10 9c       	mov	r12,r8
8000c752:	f0 1f 00 16 	mcall	8000c7a8 <udc_req_ep+0xa4>
8000c756:	18 98       	mov	r8,r12
8000c758:	ec 18 00 01 	eorl	r8,0x1
8000c75c:	5c 58       	castu.b	r8
8000c75e:	c0 30       	breq	8000c764 <udc_req_ep+0x60>
			return false;
8000c760:	30 08       	mov	r8,0
8000c762:	c1 98       	rjmp	8000c794 <udc_req_ep+0x90>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
8000c764:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c768:	70 28       	ld.w	r8,r8[0x8]
8000c76a:	5d 18       	icall	r8
8000c76c:	18 98       	mov	r8,r12
8000c76e:	58 08       	cp.w	r8,0
8000c770:	c0 30       	breq	8000c776 <udc_req_ep+0x72>
			return true;
8000c772:	30 18       	mov	r8,1
8000c774:	c1 08       	rjmp	8000c794 <udc_req_ep+0x90>
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
			iface_num++) {
8000c776:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c77a:	2f f8       	sub	r8,-1
8000c77c:	ef 68 ff fb 	st.b	r7[-5],r8
	if (0 == udc_num_configuration) {
		return false; // The device is not is configured state yet
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
8000c780:	48 98       	lddpc	r8,8000c7a4 <udc_req_ep+0xa0>
8000c782:	70 08       	ld.w	r8,r8[0x0]
8000c784:	70 08       	ld.w	r8,r8[0x0]
8000c786:	11 c8       	ld.ub	r8,r8[0x4]
8000c788:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c78c:	f0 09 18 00 	cp.b	r9,r8
8000c790:	cc c3       	brcs	8000c728 <udc_req_ep+0x24>
		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
			return true;
		}
	}
	return false;
8000c792:	30 08       	mov	r8,0
}
8000c794:	10 9c       	mov	r12,r8
8000c796:	2f ed       	sub	sp,-8
8000c798:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c79c:	00 00       	add	r0,r0
8000c79e:	0c 80       	andn	r0,r6
8000c7a0:	00 00       	add	r0,r0
8000c7a2:	12 1c       	sub	r12,r9
8000c7a4:	00 00       	add	r0,r0
8000c7a6:	0c 84       	andn	r4,r6
8000c7a8:	80 00       	ld.sh	r0,r0[0x0]
8000c7aa:	bb f8       	*unknown*

8000c7ac <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
8000c7ac:	eb cd 40 80 	pushm	r7,lr
8000c7b0:	1a 97       	mov	r7,sp
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
8000c7b2:	4a 19       	lddpc	r9,8000c834 <udc_process_setup+0x88>
8000c7b4:	30 08       	mov	r8,0
8000c7b6:	b2 68       	st.h	r9[0xc],r8
	udd_g_ctrlreq.callback = NULL;
8000c7b8:	49 f8       	lddpc	r8,8000c834 <udc_process_setup+0x88>
8000c7ba:	30 09       	mov	r9,0
8000c7bc:	91 49       	st.w	r8[0x10],r9
	udd_g_ctrlreq.over_under_run = NULL;
8000c7be:	49 e8       	lddpc	r8,8000c834 <udc_process_setup+0x88>
8000c7c0:	30 09       	mov	r9,0
8000c7c2:	91 59       	st.w	r8[0x14],r9

	if (Udd_setup_is_in()) {
8000c7c4:	49 c8       	lddpc	r8,8000c834 <udc_process_setup+0x88>
8000c7c6:	11 88       	ld.ub	r8,r8[0x0]
8000c7c8:	10 99       	mov	r9,r8
8000c7ca:	30 08       	mov	r8,0
8000c7cc:	f0 09 18 00 	cp.b	r9,r8
8000c7d0:	c0 74       	brge	8000c7de <udc_process_setup+0x32>
		if (udd_g_ctrlreq.req.wLength == 0) {
8000c7d2:	49 98       	lddpc	r8,8000c834 <udc_process_setup+0x88>
8000c7d4:	90 38       	ld.sh	r8,r8[0x6]
8000c7d6:	58 08       	cp.w	r8,0
8000c7d8:	c0 31       	brne	8000c7de <udc_process_setup+0x32>
			return false; // Error from USB host
8000c7da:	30 08       	mov	r8,0
8000c7dc:	c2 88       	rjmp	8000c82c <udc_process_setup+0x80>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
8000c7de:	49 68       	lddpc	r8,8000c834 <udc_process_setup+0x88>
8000c7e0:	11 88       	ld.ub	r8,r8[0x0]
8000c7e2:	e2 18 00 60 	andl	r8,0x60,COH
8000c7e6:	c0 81       	brne	8000c7f6 <udc_process_setup+0x4a>
		if (udc_reqstd()) {
8000c7e8:	f0 1f 00 14 	mcall	8000c838 <udc_process_setup+0x8c>
8000c7ec:	18 98       	mov	r8,r12
8000c7ee:	58 08       	cp.w	r8,0
8000c7f0:	c0 30       	breq	8000c7f6 <udc_process_setup+0x4a>
			return true;
8000c7f2:	30 18       	mov	r8,1
8000c7f4:	c1 c8       	rjmp	8000c82c <udc_process_setup+0x80>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
8000c7f6:	49 08       	lddpc	r8,8000c834 <udc_process_setup+0x88>
8000c7f8:	11 88       	ld.ub	r8,r8[0x0]
8000c7fa:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c7fe:	58 18       	cp.w	r8,1
8000c800:	c0 81       	brne	8000c810 <udc_process_setup+0x64>
		if (udc_req_iface()) {
8000c802:	f0 1f 00 0f 	mcall	8000c83c <udc_process_setup+0x90>
8000c806:	18 98       	mov	r8,r12
8000c808:	58 08       	cp.w	r8,0
8000c80a:	c0 30       	breq	8000c810 <udc_process_setup+0x64>
			return true;
8000c80c:	30 18       	mov	r8,1
8000c80e:	c0 f8       	rjmp	8000c82c <udc_process_setup+0x80>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
8000c810:	48 98       	lddpc	r8,8000c834 <udc_process_setup+0x88>
8000c812:	11 88       	ld.ub	r8,r8[0x0]
8000c814:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8000c818:	58 28       	cp.w	r8,2
8000c81a:	c0 81       	brne	8000c82a <udc_process_setup+0x7e>
		if (udc_req_ep()) {
8000c81c:	f0 1f 00 09 	mcall	8000c840 <udc_process_setup+0x94>
8000c820:	18 98       	mov	r8,r12
8000c822:	58 08       	cp.w	r8,0
8000c824:	c0 30       	breq	8000c82a <udc_process_setup+0x7e>
			return true;
8000c826:	30 18       	mov	r8,1
8000c828:	c0 28       	rjmp	8000c82c <udc_process_setup+0x80>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
8000c82a:	30 08       	mov	r8,0
#endif
}
8000c82c:	10 9c       	mov	r12,r8
8000c82e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c832:	00 00       	add	r0,r0
8000c834:	00 00       	add	r0,r0
8000c836:	12 1c       	sub	r12,r9
8000c838:	80 00       	ld.sh	r0,r0[0x0]
8000c83a:	c5 04       	brge	8000c8da <stdio_usb_putchar+0x22>
8000c83c:	80 00       	ld.sh	r0,r0[0x0]
8000c83e:	c6 58       	rjmp	8000c908 <stdio_usb_getchar+0x8>
8000c840:	80 00       	ld.sh	r0,r0[0x0]
8000c842:	c7 04       	brge	8000c922 <stdio_usb_getchar+0x22>

8000c844 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
8000c844:	eb cd 40 80 	pushm	r7,lr
8000c848:	1a 97       	mov	r7,sp
8000c84a:	20 4d       	sub	sp,16
8000c84c:	ef 4c ff f8 	st.w	r7[-8],r12
8000c850:	ef 4b ff f4 	st.w	r7[-12],r11
8000c854:	ef 4a ff f0 	st.w	r7[-16],r10
	int nChars = 0;
8000c858:	30 08       	mov	r8,0
8000c85a:	ef 48 ff fc 	st.w	r7[-4],r8

	if (file != 0) {
8000c85e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c862:	58 08       	cp.w	r8,0
8000c864:	c1 a0       	breq	8000c898 <_read+0x54>
		return -1;
8000c866:	3f f8       	mov	r8,-1
8000c868:	c1 f8       	rjmp	8000c8a6 <_read+0x62>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
8000c86a:	49 28       	lddpc	r8,8000c8b0 <_read+0x6c>
8000c86c:	70 08       	ld.w	r8,r8[0x0]
8000c86e:	49 29       	lddpc	r9,8000c8b4 <_read+0x70>
8000c870:	72 09       	ld.w	r9,r9[0x0]
8000c872:	ee fb ff f4 	ld.w	r11,r7[-12]
8000c876:	12 9c       	mov	r12,r9
8000c878:	5d 18       	icall	r8
		ptr++;
8000c87a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c87e:	2f f8       	sub	r8,-1
8000c880:	ef 48 ff f4 	st.w	r7[-12],r8
		nChars++;
8000c884:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c888:	2f f8       	sub	r8,-1
8000c88a:	ef 48 ff fc 	st.w	r7[-4],r8

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
8000c88e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000c892:	20 18       	sub	r8,1
8000c894:	ef 48 ff f0 	st.w	r7[-16],r8
8000c898:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000c89c:	58 08       	cp.w	r8,0
8000c89e:	fe 99 ff e6 	brgt	8000c86a <_read+0x26>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
8000c8a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c8a6:	10 9c       	mov	r12,r8
8000c8a8:	2f cd       	sub	sp,-16
8000c8aa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8ae:	00 00       	add	r0,r0
8000c8b0:	00 00       	add	r0,r0
8000c8b2:	12 3c       	cp.w	r12,r9
8000c8b4:	00 00       	add	r0,r0
8000c8b6:	12 44       	or	r4,r9

8000c8b8 <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * unused, char data)
{
8000c8b8:	eb cd 40 80 	pushm	r7,lr
8000c8bc:	1a 97       	mov	r7,sp
8000c8be:	20 2d       	sub	sp,8
8000c8c0:	ef 4c ff fc 	st.w	r7[-4],r12
8000c8c4:	16 98       	mov	r8,r11
8000c8c6:	ef 68 ff f8 	st.b	r7[-8],r8
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
8000c8ca:	48 c8       	lddpc	r8,8000c8f8 <stdio_usb_putchar+0x40>
8000c8cc:	11 88       	ld.ub	r8,r8[0x0]
8000c8ce:	ec 18 00 01 	eorl	r8,0x1
8000c8d2:	5c 58       	castu.b	r8
8000c8d4:	c0 30       	breq	8000c8da <stdio_usb_putchar+0x22>
		return 0;  // -1
8000c8d6:	30 08       	mov	r8,0
8000c8d8:	c0 c8       	rjmp	8000c8f0 <stdio_usb_putchar+0x38>
	}

	return udi_cdc_putc(data) ? 0 : -1;
8000c8da:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000c8de:	10 9c       	mov	r12,r8
8000c8e0:	f0 1f 00 07 	mcall	8000c8fc <stdio_usb_putchar+0x44>
8000c8e4:	18 98       	mov	r8,r12
8000c8e6:	58 08       	cp.w	r8,0
8000c8e8:	c0 30       	breq	8000c8ee <stdio_usb_putchar+0x36>
8000c8ea:	30 08       	mov	r8,0
8000c8ec:	c0 28       	rjmp	8000c8f0 <stdio_usb_putchar+0x38>
8000c8ee:	3f f8       	mov	r8,-1
}
8000c8f0:	10 9c       	mov	r12,r8
8000c8f2:	2f ed       	sub	sp,-8
8000c8f4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c8f8:	00 00       	add	r0,r0
8000c8fa:	0c 8e       	andn	lr,r6
8000c8fc:	80 00       	ld.sh	r0,r0[0x0]
8000c8fe:	bb 18       	ld.d	r8,--sp

8000c900 <stdio_usb_getchar>:

void stdio_usb_getchar (void volatile * unused, char *data)
{
8000c900:	eb cd 40 80 	pushm	r7,lr
8000c904:	1a 97       	mov	r7,sp
8000c906:	20 2d       	sub	sp,8
8000c908:	ef 4c ff fc 	st.w	r7[-4],r12
8000c90c:	ef 4b ff f8 	st.w	r7[-8],r11
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
8000c910:	48 b8       	lddpc	r8,8000c93c <stdio_usb_getchar+0x3c>
8000c912:	11 88       	ld.ub	r8,r8[0x0]
8000c914:	ec 18 00 01 	eorl	r8,0x1
8000c918:	5c 58       	castu.b	r8
8000c91a:	c0 60       	breq	8000c926 <stdio_usb_getchar+0x26>
		*data = 0;  // -1
8000c91c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000c920:	30 08       	mov	r8,0
8000c922:	b2 88       	st.b	r9[0x0],r8
		return;
8000c924:	c0 88       	rjmp	8000c934 <stdio_usb_getchar+0x34>
	}

	*data = (char)udi_cdc_getc();
8000c926:	f0 1f 00 07 	mcall	8000c940 <stdio_usb_getchar+0x40>
8000c92a:	18 98       	mov	r8,r12
8000c92c:	5c 58       	castu.b	r8
8000c92e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000c932:	b2 88       	st.b	r9[0x0],r8
}
8000c934:	2f ed       	sub	sp,-8
8000c936:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c93a:	00 00       	add	r0,r0
8000c93c:	00 00       	add	r0,r0
8000c93e:	0c 8e       	andn	lr,r6
8000c940:	80 00       	ld.sh	r0,r0[0x0]
8000c942:	b7 08       	ld.d	r8,r11

8000c944 <stdio_usb_enable>:

bool stdio_usb_enable(void)
{
8000c944:	eb cd 40 80 	pushm	r7,lr
8000c948:	1a 97       	mov	r7,sp
	stdio_usb_interface_enable = true;
8000c94a:	48 49       	lddpc	r9,8000c958 <stdio_usb_enable+0x14>
8000c94c:	30 18       	mov	r8,1
8000c94e:	b2 88       	st.b	r9[0x0],r8
	return true;
8000c950:	30 18       	mov	r8,1
}
8000c952:	10 9c       	mov	r12,r8
8000c954:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c958:	00 00       	add	r0,r0
8000c95a:	0c 8e       	andn	lr,r6

8000c95c <stdio_usb_disable>:

void stdio_usb_disable(void)
{
8000c95c:	eb cd 40 80 	pushm	r7,lr
8000c960:	1a 97       	mov	r7,sp
	stdio_usb_interface_enable = false;
8000c962:	48 39       	lddpc	r9,8000c96c <stdio_usb_disable+0x10>
8000c964:	30 08       	mov	r8,0
8000c966:	b2 88       	st.b	r9[0x0],r8
}
8000c968:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c96c:	00 00       	add	r0,r0
8000c96e:	0c 8e       	andn	lr,r6

8000c970 <stdio_usb_init>:

void stdio_usb_init(void)
{
8000c970:	eb cd 40 80 	pushm	r7,lr
8000c974:	1a 97       	mov	r7,sp
	stdio_base = NULL;
8000c976:	48 e8       	lddpc	r8,8000c9ac <stdio_usb_init+0x3c>
8000c978:	30 09       	mov	r9,0
8000c97a:	91 09       	st.w	r8[0x0],r9
	ptr_put = stdio_usb_putchar;
8000c97c:	48 d8       	lddpc	r8,8000c9b0 <stdio_usb_init+0x40>
8000c97e:	48 e9       	lddpc	r9,8000c9b4 <stdio_usb_init+0x44>
8000c980:	91 09       	st.w	r8[0x0],r9
	ptr_get = stdio_usb_getchar;
8000c982:	48 e8       	lddpc	r8,8000c9b8 <stdio_usb_init+0x48>
8000c984:	48 e9       	lddpc	r9,8000c9bc <stdio_usb_init+0x4c>
8000c986:	91 09       	st.w	r8[0x0],r9
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
8000c988:	f0 1f 00 0e 	mcall	8000c9c0 <stdio_usb_init+0x50>
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
8000c98c:	48 e8       	lddpc	r8,8000c9c4 <stdio_usb_init+0x54>
8000c98e:	70 08       	ld.w	r8,r8[0x0]
8000c990:	70 18       	ld.w	r8,r8[0x4]
8000c992:	30 0b       	mov	r11,0
8000c994:	10 9c       	mov	r12,r8
8000c996:	f0 1f 00 0d 	mcall	8000c9c8 <stdio_usb_init+0x58>
	setbuf(stdin, NULL);
8000c99a:	48 b8       	lddpc	r8,8000c9c4 <stdio_usb_init+0x54>
8000c99c:	70 08       	ld.w	r8,r8[0x0]
8000c99e:	70 08       	ld.w	r8,r8[0x0]
8000c9a0:	30 0b       	mov	r11,0
8000c9a2:	10 9c       	mov	r12,r8
8000c9a4:	f0 1f 00 09 	mcall	8000c9c8 <stdio_usb_init+0x58>
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
# endif
#endif
}
8000c9a8:	e3 cd 80 80 	ldm	sp++,r7,pc
8000c9ac:	00 00       	add	r0,r0
8000c9ae:	12 44       	or	r4,r9
8000c9b0:	00 00       	add	r0,r0
8000c9b2:	12 40       	or	r0,r9
8000c9b4:	80 00       	ld.sh	r0,r0[0x0]
8000c9b6:	c8 b8       	rjmp	8000cacc <_write+0x100>
8000c9b8:	00 00       	add	r0,r0
8000c9ba:	12 3c       	cp.w	r12,r9
8000c9bc:	80 00       	ld.sh	r0,r0[0x0]
8000c9be:	c9 00       	breq	8000c8de <stdio_usb_putchar+0x26>
8000c9c0:	80 00       	ld.sh	r0,r0[0x0]
8000c9c2:	be 34       	st.h	pc[0x6],r4
8000c9c4:	00 00       	add	r0,r0
8000c9c6:	01 c8       	ld.ub	r8,r0[0x4]
8000c9c8:	80 00       	ld.sh	r0,r0[0x0]
8000c9ca:	da c0       	acall	0xac

8000c9cc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
8000c9cc:	eb cd 40 80 	pushm	r7,lr
8000c9d0:	1a 97       	mov	r7,sp
8000c9d2:	20 4d       	sub	sp,16
8000c9d4:	ef 4c ff f8 	st.w	r7[-8],r12
8000c9d8:	ef 4b ff f4 	st.w	r7[-12],r11
8000c9dc:	ef 4a ff f0 	st.w	r7[-16],r10
	int nChars = 0;
8000c9e0:	30 08       	mov	r8,0
8000c9e2:	ef 48 ff fc 	st.w	r7[-4],r8

	if ((file != 1) && (file != 2) && (file!=3)) {
8000c9e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c9ea:	58 18       	cp.w	r8,1
8000c9ec:	c2 a0       	breq	8000ca40 <_write+0x74>
8000c9ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c9f2:	58 28       	cp.w	r8,2
8000c9f4:	c2 60       	breq	8000ca40 <_write+0x74>
8000c9f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000c9fa:	58 38       	cp.w	r8,3
8000c9fc:	c2 20       	breq	8000ca40 <_write+0x74>
		return -1;
8000c9fe:	3f f8       	mov	r8,-1
8000ca00:	c2 68       	rjmp	8000ca4c <_write+0x80>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
8000ca02:	49 58       	lddpc	r8,8000ca54 <_write+0x88>
8000ca04:	70 08       	ld.w	r8,r8[0x0]
8000ca06:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ca0a:	13 89       	ld.ub	r9,r9[0x0]
8000ca0c:	12 9a       	mov	r10,r9
8000ca0e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000ca12:	2f f9       	sub	r9,-1
8000ca14:	ef 49 ff f4 	st.w	r7[-12],r9
8000ca18:	49 09       	lddpc	r9,8000ca58 <_write+0x8c>
8000ca1a:	72 09       	ld.w	r9,r9[0x0]
8000ca1c:	14 9b       	mov	r11,r10
8000ca1e:	12 9c       	mov	r12,r9
8000ca20:	5d 18       	icall	r8
8000ca22:	18 98       	mov	r8,r12
8000ca24:	58 08       	cp.w	r8,0
8000ca26:	c0 34       	brge	8000ca2c <_write+0x60>
			return -1;
8000ca28:	3f f8       	mov	r8,-1
8000ca2a:	c1 18       	rjmp	8000ca4c <_write+0x80>
		}
		++nChars;
8000ca2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ca30:	2f f8       	sub	r8,-1
8000ca32:	ef 48 ff fc 	st.w	r7[-4],r8

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
8000ca36:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ca3a:	20 18       	sub	r8,1
8000ca3c:	ef 48 ff f0 	st.w	r7[-16],r8
8000ca40:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ca44:	58 08       	cp.w	r8,0
8000ca46:	cd e1       	brne	8000ca02 <_write+0x36>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
	}
	return nChars;
8000ca48:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000ca4c:	10 9c       	mov	r12,r8
8000ca4e:	2f cd       	sub	sp,-16
8000ca50:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ca54:	00 00       	add	r0,r0
8000ca56:	12 40       	or	r0,r9
8000ca58:	00 00       	add	r0,r0
8000ca5a:	12 44       	or	r4,r9
8000ca5c:	47 6f       	lddsp	pc,sp[0x1d8]
8000ca5e:	74 20       	ld.w	r0,r10[0x8]
8000ca60:	63 6f       	ld.w	pc,r1[0x58]
8000ca62:	6d 6d       	ld.w	sp,r6[0x58]
8000ca64:	61 6e       	ld.w	lr,r0[0x58]
8000ca66:	64 3a       	ld.w	r10,r2[0xc]
8000ca68:	20 27       	sub	r7,2
8000ca6a:	25 73       	sub	r3,87
8000ca6c:	27 20       	sub	r0,114
8000ca6e:	0a 00       	add	r0,r5
8000ca70:	73 74       	ld.w	r4,r9[0x5c]
8000ca72:	61 72       	ld.w	r2,r0[0x5c]
8000ca74:	74 00       	ld.w	r0,r10[0x0]
8000ca76:	00 00       	add	r0,r0
8000ca78:	0a 45       	or	r5,r5
8000ca7a:	78 65       	ld.w	r5,r12[0x18]
8000ca7c:	63 75       	ld.w	r5,r1[0x5c]
8000ca7e:	74 69       	ld.w	r9,r10[0x18]
8000ca80:	6e 67       	ld.w	r7,r7[0x18]
8000ca82:	20 41       	sub	r1,4
8000ca84:	44 43       	lddsp	r3,sp[0x110]
8000ca86:	20 73       	sub	r3,7
8000ca88:	74 61       	ld.w	r1,r10[0x18]
8000ca8a:	72 74       	ld.w	r4,r9[0x1c]
8000ca8c:	20 6d       	sub	sp,24
8000ca8e:	65 61       	ld.w	r1,r2[0x58]
8000ca90:	73 75       	ld.w	r5,r9[0x5c]
8000ca92:	72 65       	ld.w	r5,r9[0x18]
8000ca94:	6d 65       	ld.w	r5,r6[0x58]
8000ca96:	6e 74       	ld.w	r4,r7[0x1c]
8000ca98:	00 00       	add	r0,r0
8000ca9a:	00 00       	add	r0,r0
8000ca9c:	73 74       	ld.w	r4,r9[0x5c]
8000ca9e:	6f 70       	ld.w	r0,r7[0x5c]
8000caa0:	00 00       	add	r0,r0
8000caa2:	00 00       	add	r0,r0
8000caa4:	0a 53       	eor	r3,r5
8000caa6:	74 6f       	ld.w	pc,r10[0x18]
8000caa8:	70 70       	ld.w	r0,r8[0x1c]
8000caaa:	69 6e       	ld.w	lr,r4[0x58]
8000caac:	67 20       	ld.w	r0,r3[0x48]
8000caae:	41 44       	lddsp	r4,sp[0x50]
8000cab0:	43 20       	lddsp	r0,sp[0xc8]
8000cab2:	6d 65       	ld.w	r5,r6[0x58]
8000cab4:	61 73       	ld.w	r3,r0[0x5c]
8000cab6:	75 72       	ld.w	r2,r10[0x5c]
8000cab8:	65 6d       	ld.w	sp,r2[0x58]
8000caba:	65 6e       	ld.w	lr,r2[0x58]
8000cabc:	74 00       	ld.w	r0,r10[0x0]
8000cabe:	00 00       	add	r0,r0
8000cac0:	4e 75       	lddpc	r5,8000cc5c <sysclk_get_cpu_hz+0xc>
8000cac2:	6d 62       	ld.w	r2,r6[0x58]
8000cac4:	65 72       	ld.w	r2,r2[0x5c]
8000cac6:	20 6f       	sub	pc,6
8000cac8:	66 20       	ld.w	r0,r3[0x8]
8000caca:	41 44       	lddsp	r4,sp[0x50]
8000cacc:	43 20       	lddsp	r0,sp[0xc8]
8000cace:	6d 65       	ld.w	r5,r6[0x58]
8000cad0:	61 73       	ld.w	r3,r0[0x5c]
8000cad2:	75 72       	ld.w	r2,r10[0x5c]
8000cad4:	65 6d       	ld.w	sp,r2[0x58]
8000cad6:	65 6e       	ld.w	lr,r2[0x58]
8000cad8:	74 73       	ld.w	r3,r10[0x1c]
8000cada:	3a 20       	mov	r0,-94
8000cadc:	00 00       	add	r0,r0
8000cade:	00 00       	add	r0,r0
8000cae0:	25 6c       	sub	r12,86
8000cae2:	75 00       	ld.w	r0,r10[0x40]
8000cae4:	0a 43       	or	r3,r5
8000cae6:	6f 6d       	ld.w	sp,r7[0x58]
8000cae8:	6d 61       	ld.w	r1,r6[0x58]
8000caea:	6e 64       	ld.w	r4,r7[0x18]
8000caec:	20 6e       	sub	lr,6
8000caee:	6f 74       	ld.w	r4,r7[0x5c]
8000caf0:	20 66       	sub	r6,6
8000caf2:	6f 75       	ld.w	r5,r7[0x5c]
8000caf4:	6e 64       	ld.w	r4,r7[0x18]
8000caf6:	2c 20       	sub	r0,-62
8000caf8:	70 6c       	ld.w	r12,r8[0x18]
8000cafa:	65 61       	ld.w	r1,r2[0x58]
8000cafc:	73 65       	ld.w	r5,r9[0x58]
8000cafe:	20 72       	sub	r2,7
8000cb00:	65 74       	ld.w	r4,r2[0x5c]
8000cb02:	72 79       	ld.w	r9,r9[0x1c]
8000cb04:	20 0a       	sub	r10,0
8000cb06:	20 00       	sub	r0,0
8000cb08:	20 0d       	sub	sp,0
8000cb0a:	00 00       	add	r0,r0
8000cb0c:	08 20       	rsub	r0,r4
8000cb0e:	08 00       	add	r0,r4
8000cb10:	54 68       	stdsp	sp[0x118],r8
8000cb12:	69 73       	ld.w	r3,r4[0x5c]
8000cb14:	20 69       	sub	r9,6
8000cb16:	73 20       	ld.w	r0,r9[0x48]
8000cb18:	45 6d       	lddsp	sp,sp[0x158]
8000cb1a:	62 65       	ld.w	r5,r1[0x18]
8000cb1c:	64 64       	ld.w	r4,r2[0x18]
8000cb1e:	65 64       	ld.w	r4,r2[0x58]
8000cb20:	20 53       	sub	r3,5
8000cb22:	79 73       	ld.w	r3,r12[0x5c]
8000cb24:	74 65       	ld.w	r5,r10[0x18]
8000cb26:	6d 73       	ld.w	r3,r6[0x5c]
8000cb28:	2c 20       	sub	r0,-62
8000cb2a:	4c 61       	lddpc	r1,8000cc40 <sysclk_get_main_hz+0xc>
8000cb2c:	62 20       	ld.w	r0,r1[0x8]
8000cb2e:	23 34       	sub	r4,51
8000cb30:	20 00       	sub	r0,0
8000cb32:	00 00       	add	r0,r0
8000cb34:	42 79       	lddsp	r9,sp[0x9c]
8000cb36:	20 50       	sub	r0,5
8000cb38:	65 74       	ld.w	r4,r2[0x5c]
8000cb3a:	74 65       	ld.w	r5,r10[0x18]
8000cb3c:	72 20       	ld.w	r0,r9[0x8]
8000cb3e:	48 61       	lddpc	r1,8000cb54 <_write+0x188>
8000cb40:	75 67       	ld.w	r7,r10[0x58]
8000cb42:	65 6e       	ld.w	lr,r2[0x58]
8000cb44:	20 00       	sub	r0,0
8000cb46:	00 00       	add	r0,r0
8000cb48:	4e 6f       	lddpc	pc,8000cce0 <tc_init+0xc>
8000cb4a:	20 53       	sub	r3,5
8000cb4c:	44 20       	lddsp	r0,sp[0x108]
8000cb4e:	63 61       	ld.w	r1,r1[0x58]
8000cb50:	72 64       	ld.w	r4,r9[0x18]
8000cb52:	20 64       	sub	r4,6
8000cb54:	65 74       	ld.w	r4,r2[0x5c]
8000cb56:	65 63       	ld.w	r3,r2[0x58]
8000cb58:	74 65       	ld.w	r5,r10[0x18]
8000cb5a:	64 2c       	ld.w	r12,r2[0x8]
8000cb5c:	20 74       	sub	r4,7
8000cb5e:	72 79       	ld.w	r9,r9[0x1c]
8000cb60:	20 72       	sub	r2,7
8000cb62:	65 2d       	ld.w	sp,r2[0x48]
8000cb64:	69 6e       	ld.w	lr,r4[0x58]
8000cb66:	73 65       	ld.w	r5,r9[0x58]
8000cb68:	72 74       	ld.w	r4,r9[0x1c]
8000cb6a:	69 6e       	ld.w	lr,r4[0x58]
8000cb6c:	67 20       	ld.w	r0,r3[0x48]
8000cb6e:	61 6e       	ld.w	lr,r0[0x58]
8000cb70:	64 20       	ld.w	r0,r2[0x8]
8000cb72:	72 65       	ld.w	r5,r9[0x18]
8000cb74:	2d 73       	sub	r3,-41
8000cb76:	65 74       	ld.w	r4,r2[0x5c]
8000cb78:	74 69       	ld.w	r9,r10[0x18]
8000cb7a:	6e 67       	ld.w	r7,r7[0x18]
8000cb7c:	00 00       	add	r0,r0
8000cb7e:	00 00       	add	r0,r0
8000cb80:	53 44       	stdsp	sp[0xd0],r4
8000cb82:	20 63       	sub	r3,6
8000cb84:	61 72       	ld.w	r2,r0[0x5c]
8000cb86:	64 20       	ld.w	r0,r2[0x8]
8000cb88:	64 65       	ld.w	r5,r2[0x18]
8000cb8a:	74 65       	ld.w	r5,r10[0x18]
8000cb8c:	63 74       	ld.w	r4,r1[0x5c]
8000cb8e:	65 64       	ld.w	r4,r2[0x58]
8000cb90:	00 00       	add	r0,r0
8000cb92:	00 00       	add	r0,r0
8000cb94:	61 64       	ld.w	r4,r0[0x58]
8000cb96:	63 5f       	ld.w	pc,r1[0x54]
8000cb98:	72 65       	ld.w	r5,r9[0x18]
8000cb9a:	61 64       	ld.w	r4,r0[0x58]
8000cb9c:	2e 74       	sub	r4,-25
8000cb9e:	78 74       	ld.w	r4,r12[0x1c]
8000cba0:	00 00       	add	r0,r0
8000cba2:	00 00       	add	r0,r0
8000cba4:	43 6f       	lddsp	pc,sp[0xd8]
8000cba6:	75 6c       	ld.w	r12,r10[0x58]
8000cba8:	64 20       	ld.w	r0,r2[0x8]
8000cbaa:	6e 6f       	ld.w	pc,r7[0x18]
8000cbac:	74 20       	ld.w	r0,r10[0x8]
8000cbae:	6f 70       	ld.w	r0,r7[0x5c]
8000cbb0:	65 6e       	ld.w	lr,r2[0x58]
8000cbb2:	20 66       	sub	r6,6
8000cbb4:	69 6c       	ld.w	r12,r4[0x58]
8000cbb6:	65 21       	ld.w	r1,r2[0x48]
8000cbb8:	00 00       	add	r0,r0
8000cbba:	00 00       	add	r0,r0
8000cbbc:	46 69       	lddsp	r9,sp[0x198]
8000cbbe:	6c 65       	ld.w	r5,r6[0x18]
8000cbc0:	20 63       	sub	r3,6
8000cbc2:	72 65       	ld.w	r5,r9[0x18]
8000cbc4:	61 74       	ld.w	r4,r0[0x5c]
8000cbc6:	65 64       	ld.w	r4,r2[0x58]
8000cbc8:	20 61       	sub	r1,6
8000cbca:	6e 64       	ld.w	r4,r7[0x18]
8000cbcc:	20 6f       	sub	pc,6
8000cbce:	70 65       	ld.w	r5,r8[0x18]
8000cbd0:	6e 65       	ld.w	r5,r7[0x18]
8000cbd2:	64 00       	ld.w	r0,r2[0x0]
8000cbd4:	54 79       	stdsp	sp[0x11c],r9
8000cbd6:	70 65       	ld.w	r5,r8[0x18]
8000cbd8:	20 73       	sub	r3,7
8000cbda:	74 61       	ld.w	r1,r10[0x18]
8000cbdc:	72 74       	ld.w	r4,r9[0x1c]
8000cbde:	20 6f       	sub	pc,6
8000cbe0:	72 20       	ld.w	r0,r9[0x8]
8000cbe2:	73 74       	ld.w	r4,r9[0x5c]
8000cbe4:	6f 70       	ld.w	r0,r7[0x5c]
8000cbe6:	2c 20       	sub	r0,-62
8000cbe8:	66 6f       	ld.w	pc,r3[0x18]
8000cbea:	6c 6c       	ld.w	r12,r6[0x18]
8000cbec:	6f 77       	ld.w	r7,r7[0x5c]
8000cbee:	65 64       	ld.w	r4,r2[0x58]
8000cbf0:	20 62       	sub	r2,6
8000cbf2:	79 20       	ld.w	r0,r12[0x48]
8000cbf4:	65 6e       	ld.w	lr,r2[0x58]
8000cbf6:	74 65       	ld.w	r5,r10[0x18]
8000cbf8:	72 00       	ld.w	r0,r9[0x0]
	...

8000cbfc <osc_get_rate>:
		return false;
	}
}

static inline uint32_t osc_get_rate(uint8_t id)
{
8000cbfc:	eb cd 40 80 	pushm	r7,lr
8000cc00:	1a 97       	mov	r7,sp
8000cc02:	20 1d       	sub	sp,4
8000cc04:	18 98       	mov	r8,r12
8000cc06:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8000cc0a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000cc0e:	58 08       	cp.w	r8,0
8000cc10:	c0 40       	breq	8000cc18 <osc_get_rate+0x1c>
8000cc12:	58 28       	cp.w	r8,2
8000cc14:	c0 70       	breq	8000cc22 <osc_get_rate+0x26>
8000cc16:	c0 98       	rjmp	8000cc28 <osc_get_rate+0x2c>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8000cc18:	e0 68 1b 00 	mov	r8,6912
8000cc1c:	ea 18 00 b7 	orh	r8,0xb7
8000cc20:	c0 58       	rjmp	8000cc2a <osc_get_rate+0x2e>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8000cc22:	e0 68 80 00 	mov	r8,32768
8000cc26:	c0 28       	rjmp	8000cc2a <osc_get_rate+0x2e>
#endif
	default:
		/* unhandled_case(id); */
		return 0;
8000cc28:	30 08       	mov	r8,0
	}
}
8000cc2a:	10 9c       	mov	r12,r8
8000cc2c:	2f fd       	sub	sp,-4
8000cc2e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc32:	d7 03       	nop

8000cc34 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8000cc34:	eb cd 40 80 	pushm	r7,lr
8000cc38:	1a 97       	mov	r7,sp
		return BOARD_OSC0_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8000cc3a:	30 0c       	mov	r12,0
8000cc3c:	f0 1f 00 04 	mcall	8000cc4c <sysclk_get_main_hz+0x18>
8000cc40:	18 98       	mov	r8,r12
8000cc42:	a3 78       	lsl	r8,0x3
8000cc44:	a1 98       	lsr	r8,0x1

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8000cc46:	10 9c       	mov	r12,r8
8000cc48:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc4c:	80 00       	ld.sh	r0,r0[0x0]
8000cc4e:	cb fc       	rcall	8000cdcc <sd_mmc_resources_init+0x48>

8000cc50 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8000cc50:	eb cd 40 80 	pushm	r7,lr
8000cc54:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8000cc56:	f0 1f 00 04 	mcall	8000cc64 <sysclk_get_cpu_hz+0x14>
8000cc5a:	18 98       	mov	r8,r12
}
8000cc5c:	10 9c       	mov	r12,r8
8000cc5e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc62:	00 00       	add	r0,r0
8000cc64:	80 00       	ld.sh	r0,r0[0x0]
8000cc66:	cc 34       	brge	8000cbec <_write+0x220>

8000cc68 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
8000cc68:	eb cd 40 80 	pushm	r7,lr
8000cc6c:	1a 97       	mov	r7,sp
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
8000cc6e:	f0 1f 00 04 	mcall	8000cc7c <sysclk_get_pba_hz+0x14>
8000cc72:	18 98       	mov	r8,r12
8000cc74:	a3 88       	lsr	r8,0x2
}
8000cc76:	10 9c       	mov	r12,r8
8000cc78:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cc7c:	80 00       	ld.sh	r0,r0[0x0]
8000cc7e:	cc 34       	brge	8000cc04 <osc_get_rate+0x8>

8000cc80 <adc_init_pot>:
#define EXAMPLE_ADC_POTENTIOMETER_FUNCTION  AVR32_ADC_AD_1_FUNCTION



static void adc_init_pot (void)
{	
8000cc80:	eb cd 40 80 	pushm	r7,lr
8000cc84:	1a 97       	mov	r7,sp
8000cc86:	20 2d       	sub	sp,8


/** GPIO pin/adc-function map. */
const gpio_map_t ADC_GPIO_MAP = {
	{EXAMPLE_ADC_POTENTIOMETER_PIN, EXAMPLE_ADC_POTENTIOMETER_FUNCTION}
};	
8000cc88:	31 68       	mov	r8,22
8000cc8a:	ef 48 ff f8 	st.w	r7[-8],r8
8000cc8e:	30 08       	mov	r8,0
8000cc90:	ef 48 ff fc 	st.w	r7[-4],r8
	
/* Assign and enable GPIO pins to the ADC function. */
	gpio_enable_module(ADC_GPIO_MAP, sizeof(ADC_GPIO_MAP) /
8000cc94:	ee c8 00 08 	sub	r8,r7,8
8000cc98:	30 1b       	mov	r11,1
8000cc9a:	10 9c       	mov	r12,r8
8000cc9c:	f0 1f 00 0b 	mcall	8000ccc8 <adc_init_pot+0x48>
	
	/* Configure the ADC peripheral module.
	 * Lower the ADC clock to match the ADC characteristics (because we
	 * configured the CPU clock to 12MHz, and the ADC clock characteristics are
	 *  usually lower; cf. the ADC Characteristic section in the datasheet). */
	AVR32_ADC.mr |= 0x1 << AVR32_ADC_MR_PRESCAL_OFFSET;
8000cca0:	fe 78 3c 00 	mov	r8,-50176
8000cca4:	fe 79 3c 00 	mov	r9,-50176
8000cca8:	72 19       	ld.w	r9,r9[0x4]
8000ccaa:	a9 a9       	sbr	r9,0x8
8000ccac:	91 19       	st.w	r8[0x4],r9
	adc_configure(&AVR32_ADC);
8000ccae:	fe 7c 3c 00 	mov	r12,-50176
8000ccb2:	f0 1f 00 07 	mcall	8000cccc <adc_init_pot+0x4c>

	/* Enable the ADC channels. */
	adc_enable(&AVR32_ADC, EXAMPLE_ADC_POTENTIOMETER_CHANNEL);
8000ccb6:	30 1b       	mov	r11,1
8000ccb8:	fe 7c 3c 00 	mov	r12,-50176
8000ccbc:	f0 1f 00 05 	mcall	8000ccd0 <adc_init_pot+0x50>
}
8000ccc0:	2f ed       	sub	sp,-8
8000ccc2:	e3 cd 80 80 	ldm	sp++,r7,pc
8000ccc6:	00 00       	add	r0,r0
8000ccc8:	80 00       	ld.sh	r0,r0[0x0]
8000ccca:	81 2c       	st.w	r0[0x8],r12
8000cccc:	80 00       	ld.sh	r0,r0[0x0]
8000ccce:	2f 2c       	sub	r12,-14
8000ccd0:	80 00       	ld.sh	r0,r0[0x0]
8000ccd2:	2f 7c       	sub	r12,-9

8000ccd4 <tc_init>:
 * - fPBA/8 is used as clock source for TC
 * - Enables RC compare match interrupt
 * \param tc Base address of the TC module
 */
static void tc_init(volatile avr32_tc_t *tc, uint32_t time_tick, uint32_t PBA_freq)
{
8000ccd4:	eb cd 40 c0 	pushm	r6-r7,lr
8000ccd8:	1a 97       	mov	r7,sp
8000ccda:	20 5d       	sub	sp,20
8000ccdc:	ef 4c ff f4 	st.w	r7[-12],r12
8000cce0:	ef 4b ff f0 	st.w	r7[-16],r11
8000cce4:	ef 4a ff ec 	st.w	r7[-20],r10
		.cpas  = 0,
		.lovrs = 0,
		.covfs = 0
	};
	// Initialize the timer/counter.
	tc_init_waveform(tc, &waveform_opt);
8000cce8:	49 db       	lddpc	r11,8000cd5c <tc_init+0x88>
8000ccea:	ee fc ff f4 	ld.w	r12,r7[-12]
8000ccee:	f0 1f 00 1d 	mcall	8000cd60 <tc_init+0x8c>
	*RC calculation:
	The interrupt shall occur every 20 ms, and the time is set according to datasheet of AT32UC3A0512. 
	RC_calc = (((float)PBA_freq) *(float) time_tick )/divider * 1000.0
	Then casted from float to int value
	*/
	RC_calc = (((float)PBA_freq) *(float) time_tick )/8000.0;
8000ccf2:	ee fc ff ec 	ld.w	r12,r7[-20]
8000ccf6:	f0 1f 00 1c 	mcall	8000cd64 <tc_init+0x90>
8000ccfa:	18 96       	mov	r6,r12
8000ccfc:	ee fc ff f0 	ld.w	r12,r7[-16]
8000cd00:	f0 1f 00 19 	mcall	8000cd64 <tc_init+0x90>
8000cd04:	18 98       	mov	r8,r12
8000cd06:	10 9b       	mov	r11,r8
8000cd08:	0c 9c       	mov	r12,r6
8000cd0a:	f0 1f 00 18 	mcall	8000cd68 <tc_init+0x94>
8000cd0e:	18 98       	mov	r8,r12
8000cd10:	fc 1b 45 fa 	movh	r11,0x45fa
8000cd14:	10 9c       	mov	r12,r8
8000cd16:	f0 1f 00 16 	mcall	8000cd6c <tc_init+0x98>
8000cd1a:	18 98       	mov	r8,r12
8000cd1c:	ef 48 ff f8 	st.w	r7[-8],r8
	RC = (uint16_t) RC_calc;
8000cd20:	ee fc ff f8 	ld.w	r12,r7[-8]
8000cd24:	f0 1f 00 13 	mcall	8000cd70 <tc_init+0x9c>
8000cd28:	18 98       	mov	r8,r12
8000cd2a:	ef 58 ff fe 	st.h	r7[-2],r8
	
	
	tc_write_rc(tc, EXAMPLE_TC_CHANNEL, RC);
8000cd2e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000cd32:	10 9a       	mov	r10,r8
8000cd34:	30 0b       	mov	r11,0
8000cd36:	ee fc ff f4 	ld.w	r12,r7[-12]
8000cd3a:	f0 1f 00 0f 	mcall	8000cd74 <tc_init+0xa0>
	// configure the timer interrupt
	tc_configure_interrupts(tc, EXAMPLE_TC_CHANNEL, &tc_interrupt);
8000cd3e:	48 fa       	lddpc	r10,8000cd78 <tc_init+0xa4>
8000cd40:	30 0b       	mov	r11,0
8000cd42:	ee fc ff f4 	ld.w	r12,r7[-12]
8000cd46:	f0 1f 00 0e 	mcall	8000cd7c <tc_init+0xa8>
	// Start the timer/counter.
	tc_start(tc, EXAMPLE_TC_CHANNEL);
8000cd4a:	30 0b       	mov	r11,0
8000cd4c:	ee fc ff f4 	ld.w	r12,r7[-12]
8000cd50:	f0 1f 00 0c 	mcall	8000cd80 <tc_init+0xac>
}
8000cd54:	2f bd       	sub	sp,-20
8000cd56:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000cd5a:	00 00       	add	r0,r0
8000cd5c:	80 01       	ld.sh	r1,r0[0x0]
8000cd5e:	37 88       	mov	r8,120
8000cd60:	80 00       	ld.sh	r0,r0[0x0]
8000cd62:	36 fc       	mov	r12,111
8000cd64:	80 00       	ld.sh	r0,r0[0x0]
8000cd66:	d5 9e       	*unknown*
8000cd68:	80 00       	ld.sh	r0,r0[0x0]
8000cd6a:	d4 bc       	*unknown*
8000cd6c:	80 00       	ld.sh	r0,r0[0x0]
8000cd6e:	d3 5c       	*unknown*
8000cd70:	80 00       	ld.sh	r0,r0[0x0]
8000cd72:	d6 0e       	*unknown*
8000cd74:	80 00       	ld.sh	r0,r0[0x0]
8000cd76:	38 c4       	mov	r4,-116
8000cd78:	80 01       	ld.sh	r1,r0[0x0]
8000cd7a:	37 90       	mov	r0,121
8000cd7c:	80 00       	ld.sh	r0,r0[0x0]
8000cd7e:	35 14       	mov	r4,81
8000cd80:	80 00       	ld.sh	r0,r0[0x0]
8000cd82:	38 50       	mov	r0,-123

8000cd84 <sd_mmc_resources_init>:
#define PH_SD_MMC_H_

#include "conf_sd_mmc_spi.h"

static void sd_mmc_resources_init(uint32_t pba_clk)
{
8000cd84:	eb cd 40 80 	pushm	r7,lr
8000cd88:	1a 97       	mov	r7,sp
8000cd8a:	20 5d       	sub	sp,20
8000cd8c:	ef 4c ff ec 	st.w	r7[-20],r12
		.spck_delay   = 0,
		.trans_delay  = 0,
		.stay_act     = 1,
		.spi_mode     = 0,
		.modfdis      = 1
	};
8000cd90:	49 c8       	lddpc	r8,8000ce00 <sd_mmc_resources_init+0x7c>
8000cd92:	ee ca 00 10 	sub	r10,r7,16
8000cd96:	10 9b       	mov	r11,r8
8000cd98:	f6 e8 00 00 	ld.d	r8,r11[0]
8000cd9c:	f4 e9 00 00 	st.d	r10[0],r8
8000cda0:	f6 e8 00 08 	ld.d	r8,r11[8]
8000cda4:	f4 e9 00 08 	st.d	r10[8],r8

	// Assign I/Os to SPI.
	gpio_enable_module(SD_MMC_SPI_GPIO_MAP,
8000cda8:	30 4b       	mov	r11,4
8000cdaa:	49 7c       	lddpc	r12,8000ce04 <sd_mmc_resources_init+0x80>
8000cdac:	f0 1f 00 17 	mcall	8000ce08 <sd_mmc_resources_init+0x84>
	sizeof(SD_MMC_SPI_GPIO_MAP) / sizeof(SD_MMC_SPI_GPIO_MAP[0]));

	// Initialize as master.
	spi_initMaster(SD_MMC_SPI, &spiOptions);
8000cdb0:	ee c8 00 10 	sub	r8,r7,16
8000cdb4:	10 9b       	mov	r11,r8
8000cdb6:	fe 7c 28 00 	mov	r12,-55296
8000cdba:	f0 1f 00 15 	mcall	8000ce0c <sd_mmc_resources_init+0x88>

	// Set SPI selection mode: variable_ps, pcs_decode, delay.
	spi_selectionMode(SD_MMC_SPI, 0, 0, 0);
8000cdbe:	30 09       	mov	r9,0
8000cdc0:	30 0a       	mov	r10,0
8000cdc2:	30 0b       	mov	r11,0
8000cdc4:	fe 7c 28 00 	mov	r12,-55296
8000cdc8:	f0 1f 00 12 	mcall	8000ce10 <sd_mmc_resources_init+0x8c>

	// Enable SPI module.
	spi_enable(SD_MMC_SPI);
8000cdcc:	fe 7c 28 00 	mov	r12,-55296
8000cdd0:	f0 1f 00 11 	mcall	8000ce14 <sd_mmc_resources_init+0x90>

	// Initialize SD/MMC driver with SPI clock (PBA).
	sd_mmc_spi_init(spiOptions, pba_clk);
8000cdd4:	20 4d       	sub	sp,16
8000cdd6:	1a 98       	mov	r8,sp
8000cdd8:	10 9a       	mov	r10,r8
8000cdda:	ee cb 00 10 	sub	r11,r7,16
8000cdde:	f6 e8 00 00 	ld.d	r8,r11[0]
8000cde2:	f4 e9 00 00 	st.d	r10[0],r8
8000cde6:	f6 e8 00 08 	ld.d	r8,r11[8]
8000cdea:	f4 e9 00 08 	st.d	r10[8],r8
8000cdee:	ee fc ff ec 	ld.w	r12,r7[-20]
8000cdf2:	f0 1f 00 0a 	mcall	8000ce18 <sd_mmc_resources_init+0x94>
8000cdf6:	2f cd       	sub	sp,-16
}
8000cdf8:	2f bd       	sub	sp,-20
8000cdfa:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cdfe:	00 00       	add	r0,r0
8000ce00:	80 01       	ld.sh	r1,r0[0x0]
8000ce02:	37 58       	mov	r8,117
8000ce04:	80 01       	ld.sh	r1,r0[0x0]
8000ce06:	37 68       	mov	r8,118
8000ce08:	80 00       	ld.sh	r0,r0[0x0]
8000ce0a:	81 2c       	st.w	r0[0x8],r12
8000ce0c:	80 00       	ld.sh	r0,r0[0x0]
8000ce0e:	30 74       	mov	r4,7
8000ce10:	80 00       	ld.sh	r0,r0[0x0]
8000ce12:	31 08       	mov	r8,16
8000ce14:	80 00       	ld.sh	r0,r0[0x0]
8000ce16:	34 24       	mov	r4,66
8000ce18:	80 00       	ld.sh	r0,r0[0x0]
8000ce1a:	23 1c       	sub	r12,49

8000ce1c <fat_parse_cmd>:
static char cmd_str[10];



static void fat_parse_cmd(void)
{
8000ce1c:	eb cd 40 80 	pushm	r7,lr
8000ce20:	1a 97       	mov	r7,sp
8000ce22:	20 2d       	sub	sp,8
	char adc_loop_string [6];
	
	printf("Got command: '%s' \n", cmd_str);
8000ce24:	4a 18       	lddpc	r8,8000cea8 <fat_parse_cmd+0x8c>
8000ce26:	1a d8       	st.w	--sp,r8
8000ce28:	4a 1c       	lddpc	r12,8000ceac <fat_parse_cmd+0x90>
8000ce2a:	f0 1f 00 22 	mcall	8000ceb0 <fat_parse_cmd+0x94>
8000ce2e:	2f fd       	sub	sp,-4
	//If command is start
	if			(strcmp(cmd_str, "start") ==0) {
8000ce30:	4a 1b       	lddpc	r11,8000ceb4 <fat_parse_cmd+0x98>
8000ce32:	49 ec       	lddpc	r12,8000cea8 <fat_parse_cmd+0x8c>
8000ce34:	f0 1f 00 21 	mcall	8000ceb8 <fat_parse_cmd+0x9c>
8000ce38:	18 98       	mov	r8,r12
8000ce3a:	58 08       	cp.w	r8,0
8000ce3c:	c0 b1       	brne	8000ce52 <fat_parse_cmd+0x36>
	
		cmd_type = adc_meas_start;
8000ce3e:	4a 09       	lddpc	r9,8000cebc <fat_parse_cmd+0xa0>
8000ce40:	30 18       	mov	r8,1
8000ce42:	b2 88       	st.b	r9[0x0],r8
		file_open(FOPEN_MODE_APPEND);
8000ce44:	30 2c       	mov	r12,2
8000ce46:	f0 1f 00 1f 	mcall	8000cec0 <fat_parse_cmd+0xa4>
	
		printf("\nExecuting ADC start measurement\n");
8000ce4a:	49 fc       	lddpc	r12,8000cec4 <fat_parse_cmd+0xa8>
8000ce4c:	f0 1f 00 1f 	mcall	8000cec8 <fat_parse_cmd+0xac>
8000ce50:	c2 98       	rjmp	8000cea2 <fat_parse_cmd+0x86>
	}
	//else if command is stop
	else if		(strcmp(cmd_str, "stop") ==0) {
8000ce52:	49 fb       	lddpc	r11,8000cecc <fat_parse_cmd+0xb0>
8000ce54:	49 5c       	lddpc	r12,8000cea8 <fat_parse_cmd+0x8c>
8000ce56:	f0 1f 00 19 	mcall	8000ceb8 <fat_parse_cmd+0x9c>
8000ce5a:	18 98       	mov	r8,r12
8000ce5c:	58 08       	cp.w	r8,0
8000ce5e:	c1 f1       	brne	8000ce9c <fat_parse_cmd+0x80>
		
		cmd_type = adc_meas_stop;
8000ce60:	49 79       	lddpc	r9,8000cebc <fat_parse_cmd+0xa0>
8000ce62:	30 58       	mov	r8,5
8000ce64:	b2 88       	st.b	r9[0x0],r8
		file_close();
8000ce66:	f0 1f 00 1b 	mcall	8000ced0 <fat_parse_cmd+0xb4>
		printf("\nStopping ADC measurement\n");
8000ce6a:	49 bc       	lddpc	r12,8000ced4 <fat_parse_cmd+0xb8>
8000ce6c:	f0 1f 00 17 	mcall	8000cec8 <fat_parse_cmd+0xac>
	
		printf("Number of ADC measurements: ");
8000ce70:	49 ac       	lddpc	r12,8000ced8 <fat_parse_cmd+0xbc>
8000ce72:	f0 1f 00 10 	mcall	8000ceb0 <fat_parse_cmd+0x94>
		sprintf(adc_loop_string, "%lu", adc_loop_cnt);
8000ce76:	49 a8       	lddpc	r8,8000cedc <fat_parse_cmd+0xc0>
8000ce78:	70 09       	ld.w	r9,r8[0x0]
8000ce7a:	ee c8 00 08 	sub	r8,r7,8
8000ce7e:	1a d9       	st.w	--sp,r9
8000ce80:	49 8b       	lddpc	r11,8000cee0 <fat_parse_cmd+0xc4>
8000ce82:	10 9c       	mov	r12,r8
8000ce84:	f0 1f 00 18 	mcall	8000cee4 <fat_parse_cmd+0xc8>
8000ce88:	2f fd       	sub	sp,-4
		printf (adc_loop_string);
8000ce8a:	ee c8 00 08 	sub	r8,r7,8
8000ce8e:	10 9c       	mov	r12,r8
8000ce90:	f0 1f 00 08 	mcall	8000ceb0 <fat_parse_cmd+0x94>
		LED_Off(LED1);
8000ce94:	30 2c       	mov	r12,2
8000ce96:	f0 1f 00 15 	mcall	8000cee8 <fat_parse_cmd+0xcc>
8000ce9a:	c0 48       	rjmp	8000cea2 <fat_parse_cmd+0x86>
		}
	
	else{
		printf("\nCommand not found, please retry \n ");
8000ce9c:	49 4c       	lddpc	r12,8000ceec <fat_parse_cmd+0xd0>
8000ce9e:	f0 1f 00 05 	mcall	8000ceb0 <fat_parse_cmd+0x94>
		}
}
8000cea2:	2f ed       	sub	sp,-8
8000cea4:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cea8:	00 00       	add	r0,r0
8000ceaa:	0c 9c       	mov	r12,r6
8000ceac:	80 00       	ld.sh	r0,r0[0x0]
8000ceae:	ca 5c       	rcall	8000cff8 <tc_irq+0x2c>
8000ceb0:	80 00       	ld.sh	r0,r0[0x0]
8000ceb2:	da 08       	*unknown*
8000ceb4:	80 00       	ld.sh	r0,r0[0x0]
8000ceb6:	ca 70       	breq	8000ce04 <sd_mmc_resources_init+0x80>
8000ceb8:	80 00       	ld.sh	r0,r0[0x0]
8000ceba:	dc 20       	acall	0xc2
8000cebc:	00 00       	add	r0,r0
8000cebe:	00 d4       	st.w	--r0,r4
8000cec0:	80 00       	ld.sh	r0,r0[0x0]
8000cec2:	71 ec       	ld.w	r12,r8[0x78]
8000cec4:	80 00       	ld.sh	r0,r0[0x0]
8000cec6:	ca 78       	rjmp	8000d014 <main+0x18>
8000cec8:	80 00       	ld.sh	r0,r0[0x0]
8000ceca:	da b0       	acall	0xab
8000cecc:	80 00       	ld.sh	r0,r0[0x0]
8000cece:	ca 9c       	rcall	8000d020 <main+0x24>
8000ced0:	80 00       	ld.sh	r0,r0[0x0]
8000ced2:	75 dc       	ld.w	r12,r10[0x74]
8000ced4:	80 00       	ld.sh	r0,r0[0x0]
8000ced6:	ca a4       	brge	8000ce2a <fat_parse_cmd+0xe>
8000ced8:	80 00       	ld.sh	r0,r0[0x0]
8000ceda:	ca c0       	breq	8000ce32 <fat_parse_cmd+0x16>
8000cedc:	00 00       	add	r0,r0
8000cede:	0c 94       	mov	r4,r6
8000cee0:	80 00       	ld.sh	r0,r0[0x0]
8000cee2:	ca e0       	breq	8000ce3e <fat_parse_cmd+0x22>
8000cee4:	80 00       	ld.sh	r0,r0[0x0]
8000cee6:	db e4       	*unknown*
8000cee8:	80 00       	ld.sh	r0,r0[0x0]
8000ceea:	7f 40       	ld.w	r0,pc[0x50]
8000ceec:	80 00       	ld.sh	r0,r0[0x0]
8000ceee:	ca e4       	brge	8000ce4a <fat_parse_cmd+0x2e>

8000cef0 <fat_build_cmd>:


//Build command line
static void fat_build_cmd(void)
{
8000cef0:	eb cd 40 80 	pushm	r7,lr
8000cef4:	1a 97       	mov	r7,sp
8000cef6:	20 1d       	sub	sp,4
	char rec_char;

	if (udi_cdc_is_rx_ready())
8000cef8:	f0 1f 00 2b 	mcall	8000cfa4 <fat_build_cmd+0xb4>
8000cefc:	18 98       	mov	r8,r12
8000cefe:	58 08       	cp.w	r8,0
8000cf00:	c4 e0       	breq	8000cf9c <fat_build_cmd+0xac>
	{
		udi_cdc_read_buf(&rec_char, 1);
8000cf02:	ee c8 00 01 	sub	r8,r7,1
8000cf06:	30 1b       	mov	r11,1
8000cf08:	10 9c       	mov	r12,r8
8000cf0a:	f0 1f 00 28 	mcall	8000cfa8 <fat_build_cmd+0xb8>
	
	
		if (rec_char)
8000cf0e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cf12:	58 08       	cp.w	r8,0
8000cf14:	c4 40       	breq	8000cf9c <fat_build_cmd+0xac>
		{	
			switch (rec_char)
8000cf16:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cf1a:	58 88       	cp.w	r8,8
8000cf1c:	c1 80       	breq	8000cf4c <fat_build_cmd+0x5c>
8000cf1e:	58 d8       	cp.w	r8,13
8000cf20:	c2 91       	brne	8000cf72 <fat_build_cmd+0x82>
			{	
				//Carriage return case
				case '\r':	
				// Add new line to indicate carriage return
				printf("%c", rec_char);
8000cf22:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cf26:	10 9c       	mov	r12,r8
8000cf28:	f0 1f 00 21 	mcall	8000cfac <fat_build_cmd+0xbc>
				printf(" \r\n");
8000cf2c:	4a 1c       	lddpc	r12,8000cfb0 <fat_build_cmd+0xc0>
8000cf2e:	f0 1f 00 22 	mcall	8000cfb4 <fat_build_cmd+0xc4>
				// Add NUL char to terminate command string.
				cmd_str[i_str] = '\0';
8000cf32:	4a 28       	lddpc	r8,8000cfb8 <fat_build_cmd+0xc8>
8000cf34:	11 88       	ld.ub	r8,r8[0x0]
8000cf36:	10 99       	mov	r9,r8
8000cf38:	4a 1a       	lddpc	r10,8000cfbc <fat_build_cmd+0xcc>
8000cf3a:	30 08       	mov	r8,0
8000cf3c:	f4 09 0b 08 	st.b	r10[r9],r8
				// Decode the command.
				fat_parse_cmd();
8000cf40:	f0 1f 00 20 	mcall	8000cfc0 <fat_build_cmd+0xd0>
				i_str = 0;
8000cf44:	49 d9       	lddpc	r9,8000cfb8 <fat_build_cmd+0xc8>
8000cf46:	30 08       	mov	r8,0
8000cf48:	b2 88       	st.b	r9[0x0],r8
				break;
8000cf4a:	c2 98       	rjmp	8000cf9c <fat_build_cmd+0xac>
			
			
				// Backspace case
				case '\b':
				if (i_str > 0)
8000cf4c:	49 b8       	lddpc	r8,8000cfb8 <fat_build_cmd+0xc8>
8000cf4e:	11 88       	ld.ub	r8,r8[0x0]
8000cf50:	58 08       	cp.w	r8,0
8000cf52:	c2 40       	breq	8000cf9a <fat_build_cmd+0xaa>
				{
				// Replace last char.
				printf("%c",rec_char);
8000cf54:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cf58:	10 9c       	mov	r12,r8
8000cf5a:	f0 1f 00 15 	mcall	8000cfac <fat_build_cmd+0xbc>
				printf("\b \b");
8000cf5e:	49 ac       	lddpc	r12,8000cfc4 <fat_build_cmd+0xd4>
8000cf60:	f0 1f 00 1a 	mcall	8000cfc8 <fat_build_cmd+0xd8>
	
				// Decraese command length.
				i_str--;
8000cf64:	49 58       	lddpc	r8,8000cfb8 <fat_build_cmd+0xc8>
8000cf66:	11 88       	ld.ub	r8,r8[0x0]
8000cf68:	20 18       	sub	r8,1
8000cf6a:	5c 58       	castu.b	r8
8000cf6c:	49 39       	lddpc	r9,8000cfb8 <fat_build_cmd+0xc8>
8000cf6e:	b2 88       	st.b	r9[0x0],r8
				}
				break;
8000cf70:	c1 68       	rjmp	8000cf9c <fat_build_cmd+0xac>
			
				default:
				// Echo.
				printf("%c",rec_char);
8000cf72:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cf76:	10 9c       	mov	r12,r8
8000cf78:	f0 1f 00 0d 	mcall	8000cfac <fat_build_cmd+0xbc>
				// Append to cmd line.
				cmd_str[i_str] = rec_char;
8000cf7c:	48 f8       	lddpc	r8,8000cfb8 <fat_build_cmd+0xc8>
8000cf7e:	11 88       	ld.ub	r8,r8[0x0]
8000cf80:	10 99       	mov	r9,r8
8000cf82:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000cf86:	48 ea       	lddpc	r10,8000cfbc <fat_build_cmd+0xcc>
8000cf88:	f4 09 0b 08 	st.b	r10[r9],r8
				i_str++;
8000cf8c:	48 b8       	lddpc	r8,8000cfb8 <fat_build_cmd+0xc8>
8000cf8e:	11 88       	ld.ub	r8,r8[0x0]
8000cf90:	2f f8       	sub	r8,-1
8000cf92:	5c 58       	castu.b	r8
8000cf94:	48 99       	lddpc	r9,8000cfb8 <fat_build_cmd+0xc8>
8000cf96:	b2 88       	st.b	r9[0x0],r8
8000cf98:	c0 28       	rjmp	8000cf9c <fat_build_cmd+0xac>
				printf("\b \b");
	
				// Decraese command length.
				i_str--;
				}
				break;
8000cf9a:	d7 03       	nop
				i_str++;
				break;
				}
		}
	}
}
8000cf9c:	2f fd       	sub	sp,-4
8000cf9e:	e3 cd 80 80 	ldm	sp++,r7,pc
8000cfa2:	00 00       	add	r0,r0
8000cfa4:	80 00       	ld.sh	r0,r0[0x0]
8000cfa6:	b5 9c       	lsr	r12,0x15
8000cfa8:	80 00       	ld.sh	r0,r0[0x0]
8000cfaa:	b8 b8       	st.b	r12[0x3],r8
8000cfac:	80 00       	ld.sh	r0,r0[0x0]
8000cfae:	da 34       	*unknown*
8000cfb0:	80 00       	ld.sh	r0,r0[0x0]
8000cfb2:	cb 08       	rjmp	8000d112 <main+0x116>
8000cfb4:	80 00       	ld.sh	r0,r0[0x0]
8000cfb6:	da b0       	acall	0xab
8000cfb8:	00 00       	add	r0,r0
8000cfba:	0c 98       	mov	r8,r6
8000cfbc:	00 00       	add	r0,r0
8000cfbe:	0c 9c       	mov	r12,r6
8000cfc0:	80 00       	ld.sh	r0,r0[0x0]
8000cfc2:	ce 1c       	rcall	8000d184 <main+0x188>
8000cfc4:	80 00       	ld.sh	r0,r0[0x0]
8000cfc6:	cb 0c       	rcall	8000d126 <main+0x12a>
8000cfc8:	80 00       	ld.sh	r0,r0[0x0]
8000cfca:	da 08       	*unknown*

8000cfcc <tc_irq>:
 * The ISR handles RC compare interrupt and sets the TC_INT to perform further actions.
 */

__attribute__((__interrupt__))
static void tc_irq(void)
{	
8000cfcc:	eb cd 40 80 	pushm	r7,lr
8000cfd0:	1a 97       	mov	r7,sp
	LED_Toggle(LED0);
8000cfd2:	30 1c       	mov	r12,1
8000cfd4:	f0 1f 00 07 	mcall	8000cff0 <tc_irq+0x24>
	
	//Enable the interrupt identifier
	TC_INT=true;
8000cfd8:	48 79       	lddpc	r9,8000cff4 <tc_irq+0x28>
8000cfda:	30 18       	mov	r8,1
8000cfdc:	b2 88       	st.b	r9[0x0],r8
	
	// Clear the interrupt flag. This is a side effect of reading the TC SR.
	tc_read_sr(EXAMPLE_TC, EXAMPLE_TC_CHANNEL);	
8000cfde:	30 0b       	mov	r11,0
8000cfe0:	fe 7c 38 00 	mov	r12,-51200
8000cfe4:	f0 1f 00 05 	mcall	8000cff8 <tc_irq+0x2c>
}
8000cfe8:	e3 cd 40 80 	ldm	sp++,r7,lr
8000cfec:	d6 03       	rete
8000cfee:	00 00       	add	r0,r0
8000cff0:	80 00       	ld.sh	r0,r0[0x0]
8000cff2:	7f f8       	ld.w	r8,pc[0x7c]
8000cff4:	00 00       	add	r0,r0
8000cff6:	0c 8f       	andn	pc,r6
8000cff8:	80 00       	ld.sh	r0,r0[0x0]
8000cffa:	38 8a       	mov	r10,-120

8000cffc <main>:



int main (void)
{	
8000cffc:	eb cd 40 8f 	pushm	r0-r3,r7,lr
8000d000:	1a 97       	mov	r7,sp
8000d002:	20 cd       	sub	sp,48
	
	volatile avr32_tc_t *tc = EXAMPLE_TC;	
8000d004:	fe 78 38 00 	mov	r8,-51200
8000d008:	ef 48 ff dc 	st.w	r7[-36],r8
	 * - Initialize system clock sources according to device-specific
	 *   configuration parameters supplied in a conf_clock.h file.
	 * - Set up GPIO and board-specific features using additional configuration
	 *   parameters, if any, specified in a conf_board.h file.
	 */
	sysclk_init();
8000d00c:	f0 1f 00 aa 	mcall	8000d2b4 <main+0x2b8>
	board_init();
8000d010:	f0 1f 00 aa 	mcall	8000d2b8 <main+0x2bc>
	
	//Disable interrupts
	cpu_irq_disable();
8000d014:	d3 03       	ssrf	0x10

	// Initialize interrupt vector table support.
	irq_initialize_vectors();
8000d016:	f0 1f 00 aa 	mcall	8000d2bc <main+0x2c0>
	
	//Initialize interrupt controller
	INTC_init_interrupts ();
8000d01a:	f0 1f 00 a9 	mcall	8000d2bc <main+0x2c0>
		
	// Register the RTC interrupt handler to the interrupt controller.
	INTC_register_interrupt(&tc_irq, EXAMPLE_TC_IRQ, EXAMPLE_TC_IRQ_PRIORITY);	
8000d01e:	30 0a       	mov	r10,0
8000d020:	e0 6b 01 c0 	mov	r11,448
8000d024:	fe fc 02 9c 	ld.w	r12,pc[668]
8000d028:	f0 1f 00 a7 	mcall	8000d2c4 <main+0x2c8>
	
	// Enable interrupts
	cpu_irq_enable();
8000d02c:	d5 03       	csrf	0x10

	//Initialize ADC
	adc_init_pot();
8000d02e:	f0 1f 00 a7 	mcall	8000d2c8 <main+0x2cc>

	//Initialize timer counter module
	tc_init(tc, SAMPLE_TIME, PBA_HZ);
8000d032:	f0 1f 00 a7 	mcall	8000d2cc <main+0x2d0>
8000d036:	18 98       	mov	r8,r12
8000d038:	10 9a       	mov	r10,r8
8000d03a:	31 4b       	mov	r11,20
8000d03c:	ee fc ff dc 	ld.w	r12,r7[-36]
8000d040:	f0 1f 00 a4 	mcall	8000d2d0 <main+0x2d4>

	/* Call a local utility routine to initialize C-Library Standard I/O over
	 * a USB CDC protocol. Tunable parameters in a conf_usb.h file must be
	 * supplied to configure the USB device correctly.
	 */
	stdio_usb_init();
8000d044:	f0 1f 00 a4 	mcall	8000d2d4 <main+0x2d8>
	
	//Initialize the SPI access to the SD card
	sd_mmc_resources_init(PBA_HZ);
8000d048:	f0 1f 00 a1 	mcall	8000d2cc <main+0x2d0>
8000d04c:	18 98       	mov	r8,r12
8000d04e:	10 9c       	mov	r12,r8
8000d050:	f0 1f 00 a2 	mcall	8000d2d8 <main+0x2dc>
	
	delay_ms(1000);
8000d054:	f0 1f 00 a2 	mcall	8000d2dc <main+0x2e0>
8000d058:	18 98       	mov	r8,r12
8000d05a:	e0 69 03 e8 	mov	r9,1000
8000d05e:	ef 49 ff e4 	st.w	r7[-28],r9
8000d062:	ef 48 ff e0 	st.w	r7[-32],r8
8000d066:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000d06a:	ef 48 ff ec 	st.w	r7[-20],r8
8000d06e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000d072:	ef 48 ff e8 	st.w	r7[-24],r8
 *
 * \return the converted number of CPU cycles.
 */
__always_inline static uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8000d076:	ee f0 ff ec 	ld.w	r0,r7[-20]
8000d07a:	30 01       	mov	r1,0
8000d07c:	ee f2 ff e8 	ld.w	r2,r7[-24]
8000d080:	30 03       	mov	r3,0
8000d082:	e2 02 02 4a 	mul	r10,r1,r2
8000d086:	e6 00 02 48 	mul	r8,r3,r0
8000d08a:	10 0a       	add	r10,r8
8000d08c:	e0 02 06 48 	mulu.d	r8,r0,r2
8000d090:	12 0a       	add	r10,r9
8000d092:	14 99       	mov	r9,r10
8000d094:	e0 6a 03 e7 	mov	r10,999
8000d098:	30 0b       	mov	r11,0
8000d09a:	f0 0a 00 0a 	add	r10,r8,r10
8000d09e:	f2 0b 00 4b 	adc	r11,r9,r11
8000d0a2:	e0 68 03 e8 	mov	r8,1000
8000d0a6:	30 09       	mov	r9,0
8000d0a8:	f0 1f 00 8e 	mcall	8000d2e0 <main+0x2e4>
8000d0ac:	14 98       	mov	r8,r10
8000d0ae:	16 99       	mov	r9,r11
 * \param  fcpu_hz: CPU frequency in Hz.
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8000d0b0:	ef 48 ff f4 	st.w	r7[-12],r8
8000d0b4:	ee c8 00 30 	sub	r8,r7,48
8000d0b8:	ef 48 ff f0 	st.w	r7[-16],r8
 * \param  delay:   (input) delay in CPU cycles before timeout.
 * \param  cpu_time: (output) internal information used by the timer API.
 */
__always_inline static void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8000d0bc:	e1 b8 00 42 	mfsr	r8,0x108
8000d0c0:	10 99       	mov	r9,r8
8000d0c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d0c6:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8000d0c8:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d0cc:	70 09       	ld.w	r9,r8[0x0]
8000d0ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d0d2:	10 09       	add	r9,r8
8000d0d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000d0d8:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8000d0da:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000d0de:	30 08       	mov	r8,0
8000d0e0:	f3 68 00 08 	st.b	r9[8],r8
8000d0e4:	ee c8 00 30 	sub	r8,r7,48
8000d0e8:	ef 48 ff f8 	st.w	r7[-8],r8
 *
 * \return true if timeout occurred, otherwise false.
 */
__always_inline static unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8000d0ec:	e1 b8 00 42 	mfsr	r8,0x108
8000d0f0:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8000d0f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d0f8:	f1 39 00 08 	ld.ub	r9,r8[8]
8000d0fc:	30 28       	mov	r8,2
8000d0fe:	f0 09 18 00 	cp.b	r9,r8
8000d102:	c0 31       	brne	8000d108 <main+0x10c>
    return false;
8000d104:	30 08       	mov	r8,0
8000d106:	c4 38       	rjmp	8000d18c <main+0x190>

  // Test if the timeout as already occurred.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8000d108:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d10c:	f1 39 00 08 	ld.ub	r9,r8[8]
8000d110:	30 18       	mov	r8,1
8000d112:	f0 09 18 00 	cp.b	r9,r8
8000d116:	c0 31       	brne	8000d11c <main+0x120>
    return true;
8000d118:	30 18       	mov	r8,1
8000d11a:	c3 98       	rjmp	8000d18c <main+0x190>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8000d11c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d120:	70 09       	ld.w	r9,r8[0x0]
8000d122:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d126:	70 18       	ld.w	r8,r8[0x4]
8000d128:	10 39       	cp.w	r9,r8
8000d12a:	e0 88 00 1a 	brls	8000d15e <main+0x162>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8000d12e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d132:	70 08       	ld.w	r8,r8[0x0]
8000d134:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d138:	10 39       	cp.w	r9,r8
8000d13a:	c1 02       	brcc	8000d15a <main+0x15e>
8000d13c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d140:	70 18       	ld.w	r8,r8[0x4]
8000d142:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d146:	10 39       	cp.w	r9,r8
8000d148:	e0 88 00 09 	brls	8000d15a <main+0x15e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000d14c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d150:	30 18       	mov	r8,1
8000d152:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000d156:	30 18       	mov	r8,1
8000d158:	c1 a8       	rjmp	8000d18c <main+0x190>
    }
    return false;
8000d15a:	30 08       	mov	r8,0
8000d15c:	c1 88       	rjmp	8000d18c <main+0x190>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8000d15e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d162:	70 08       	ld.w	r8,r8[0x0]
8000d164:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d168:	10 39       	cp.w	r9,r8
8000d16a:	c0 93       	brcs	8000d17c <main+0x180>
8000d16c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d170:	70 18       	ld.w	r8,r8[0x4]
8000d172:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d176:	10 39       	cp.w	r9,r8
8000d178:	e0 88 00 09 	brls	8000d18a <main+0x18e>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8000d17c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d180:	30 18       	mov	r8,1
8000d182:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8000d186:	30 18       	mov	r8,1
8000d188:	c0 28       	rjmp	8000d18c <main+0x190>
    }
    return false;
8000d18a:	30 08       	mov	r8,0
 */
__always_inline static void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8000d18c:	58 08       	cp.w	r8,0
8000d18e:	ca b0       	breq	8000d0e4 <main+0xe8>
	
	//print welcome message on terminal window
	printf("This is Embedded Systems, Lab #4 \n");
8000d190:	4d 5c       	lddpc	r12,8000d2e4 <main+0x2e8>
8000d192:	f0 1f 00 56 	mcall	8000d2e8 <main+0x2ec>
	printf("By Petter Haugen \n");
8000d196:	4d 6c       	lddpc	r12,8000d2ec <main+0x2f0>
8000d198:	f0 1f 00 54 	mcall	8000d2e8 <main+0x2ec>
	
	if (!sd_mmc_spi_check_presence())
8000d19c:	f0 1f 00 55 	mcall	8000d2f0 <main+0x2f4>
8000d1a0:	18 98       	mov	r8,r12
8000d1a2:	ec 18 00 01 	eorl	r8,0x1
8000d1a6:	5c 58       	castu.b	r8
8000d1a8:	c0 b0       	breq	8000d1be <main+0x1c2>
	{
		printf("No SD card detected, try re-inserting and re-setting\n");
8000d1aa:	4d 3c       	lddpc	r12,8000d2f4 <main+0x2f8>
8000d1ac:	f0 1f 00 4f 	mcall	8000d2e8 <main+0x2ec>
		while(!sd_mmc_spi_check_presence())
8000d1b0:	f0 1f 00 50 	mcall	8000d2f0 <main+0x2f4>
8000d1b4:	18 98       	mov	r8,r12
8000d1b6:	ec 18 00 01 	eorl	r8,0x1
8000d1ba:	5c 58       	castu.b	r8
8000d1bc:	cf a1       	brne	8000d1b0 <main+0x1b4>
			//Do nothing, wait
			
		}
	}
	
	printf("SD card detected\n");
8000d1be:	4c fc       	lddpc	r12,8000d2f8 <main+0x2fc>
8000d1c0:	f0 1f 00 4a 	mcall	8000d2e8 <main+0x2ec>
	//Select and mount FAT partition on SD card
	nav_reset();
8000d1c4:	f0 1f 00 4e 	mcall	8000d2fc <main+0x300>
	nav_drive_set(0);
8000d1c8:	30 0c       	mov	r12,0
8000d1ca:	f0 1f 00 4e 	mcall	8000d300 <main+0x304>
	nav_partition_mount();
8000d1ce:	f0 1f 00 4e 	mcall	8000d304 <main+0x308>
	
	
	//create file on root:
	nav_file_create((FS_STRING) "adc_read.txt");
8000d1d2:	4c ec       	lddpc	r12,8000d308 <main+0x30c>
8000d1d4:	f0 1f 00 4e 	mcall	8000d30c <main+0x310>
	file_open(FOPEN_MODE_APPEND);
8000d1d8:	30 2c       	mov	r12,2
8000d1da:	f0 1f 00 4e 	mcall	8000d310 <main+0x314>
	
	if (!fat_check_open())
8000d1de:	f0 1f 00 4e 	mcall	8000d314 <main+0x318>
8000d1e2:	18 98       	mov	r8,r12
8000d1e4:	ec 18 00 01 	eorl	r8,0x1
8000d1e8:	5c 58       	castu.b	r8
8000d1ea:	c0 c0       	breq	8000d202 <main+0x206>
	{
		printf("Could not open file!\n");
8000d1ec:	4c bc       	lddpc	r12,8000d318 <main+0x31c>
8000d1ee:	f0 1f 00 3f 	mcall	8000d2e8 <main+0x2ec>
		while(!fat_check_open())
8000d1f2:	f0 1f 00 49 	mcall	8000d314 <main+0x318>
8000d1f6:	18 98       	mov	r8,r12
8000d1f8:	ec 18 00 01 	eorl	r8,0x1
8000d1fc:	5c 58       	castu.b	r8
8000d1fe:	cf a1       	brne	8000d1f2 <main+0x1f6>
8000d200:	c0 98       	rjmp	8000d212 <main+0x216>
		{
			//Do nothing, wait
		}
	}
	
	else if (fat_check_open())
8000d202:	f0 1f 00 45 	mcall	8000d314 <main+0x318>
8000d206:	18 98       	mov	r8,r12
8000d208:	58 08       	cp.w	r8,0
8000d20a:	c0 40       	breq	8000d212 <main+0x216>
	{
		printf("File created and opened\n");
8000d20c:	4c 4c       	lddpc	r12,8000d31c <main+0x320>
8000d20e:	f0 1f 00 37 	mcall	8000d2e8 <main+0x2ec>
		
	}
	
	//Instruction message
	printf("Type start or stop, followed by enter\n");
8000d212:	4c 4c       	lddpc	r12,8000d320 <main+0x324>
8000d214:	f0 1f 00 35 	mcall	8000d2e8 <main+0x2ec>
8000d218:	c0 28       	rjmp	8000d21c <main+0x220>
		else if (cmd_type == adc_meas_stop)
		{
			LED_Toggle(LED5);
			//Do nothing at all
		}
	}
8000d21a:	d7 03       	nop
	printf("Type start or stop, followed by enter\n");
	
	while (1)
	{	
		//If new character(s) recognized on USART channel
		fat_build_cmd();
8000d21c:	f0 1f 00 42 	mcall	8000d324 <main+0x328>

		//If timer/counter interrupt is true and adc meas start command received
		if (cmd_type == adc_meas_start && TC_INT == true)
8000d220:	4c 28       	lddpc	r8,8000d328 <main+0x32c>
8000d222:	11 89       	ld.ub	r9,r8[0x0]
8000d224:	30 18       	mov	r8,1
8000d226:	f0 09 18 00 	cp.b	r9,r8
8000d22a:	c3 b1       	brne	8000d2a0 <main+0x2a4>
8000d22c:	4c 08       	lddpc	r8,8000d32c <main+0x330>
8000d22e:	11 88       	ld.ub	r8,r8[0x0]
8000d230:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d234:	30 18       	mov	r8,1
8000d236:	f0 09 18 00 	cp.b	r9,r8
8000d23a:	c3 31       	brne	8000d2a0 <main+0x2a4>
		{	
			
			/* Get value for the potentiometer adc channel */
			adc_start(&AVR32_ADC);
8000d23c:	fe 7c 3c 00 	mov	r12,-50176
8000d240:	f0 1f 00 3c 	mcall	8000d330 <main+0x334>
			adc_value_pot = adc_get_value(&AVR32_ADC, EXAMPLE_ADC_POTENTIOMETER_CHANNEL);
8000d244:	30 1b       	mov	r11,1
8000d246:	fe 7c 3c 00 	mov	r12,-50176
8000d24a:	f0 1f 00 3b 	mcall	8000d334 <main+0x338>
8000d24e:	18 99       	mov	r9,r12
8000d250:	4b a8       	lddpc	r8,8000d338 <main+0x33c>
8000d252:	91 09       	st.w	r8[0x0],r9
			LED_Toggle(LED1);
8000d254:	30 2c       	mov	r12,2
8000d256:	f0 1f 00 3a 	mcall	8000d33c <main+0x340>
			//Increase the ADC loop counter
			adc_loop_cnt++;
8000d25a:	4b a8       	lddpc	r8,8000d340 <main+0x344>
8000d25c:	70 08       	ld.w	r8,r8[0x0]
8000d25e:	f0 c9 ff ff 	sub	r9,r8,-1
8000d262:	4b 88       	lddpc	r8,8000d340 <main+0x344>
8000d264:	91 09       	st.w	r8[0x0],r9
			
			//Convert adc value from unsigned int to string
			sprintf(adc_value_string, "%lu", adc_value_pot);
8000d266:	4b 58       	lddpc	r8,8000d338 <main+0x33c>
8000d268:	70 08       	ld.w	r8,r8[0x0]
8000d26a:	1a d8       	st.w	--sp,r8
8000d26c:	4b 6b       	lddpc	r11,8000d344 <main+0x348>
8000d26e:	4b 7c       	lddpc	r12,8000d348 <main+0x34c>
8000d270:	f0 1f 00 37 	mcall	8000d34c <main+0x350>
8000d274:	2f fd       	sub	sp,-4
			
			//Folder Cursor is already set to correct folder and opened, start writing to file.
			file_write_buf((uint8_t*)adc_value_string, strlen(adc_value_string));
8000d276:	4b 5c       	lddpc	r12,8000d348 <main+0x34c>
8000d278:	f0 1f 00 36 	mcall	8000d350 <main+0x354>
8000d27c:	18 98       	mov	r8,r12
8000d27e:	5c 88       	casts.h	r8
8000d280:	5c 78       	castu.h	r8
8000d282:	10 9b       	mov	r11,r8
8000d284:	4b 1c       	lddpc	r12,8000d348 <main+0x34c>
8000d286:	f0 1f 00 34 	mcall	8000d354 <main+0x358>
			file_putc('\r');
8000d28a:	30 dc       	mov	r12,13
8000d28c:	f0 1f 00 33 	mcall	8000d358 <main+0x35c>
			file_putc('\n');
8000d290:	30 ac       	mov	r12,10
8000d292:	f0 1f 00 32 	mcall	8000d358 <main+0x35c>
			//Set the timer counter interrupt to false
			TC_INT=false;	
8000d296:	4a 69       	lddpc	r9,8000d32c <main+0x330>
8000d298:	30 08       	mov	r8,0
8000d29a:	b2 88       	st.b	r9[0x0],r8
	{	
		//If new character(s) recognized on USART channel
		fat_build_cmd();

		//If timer/counter interrupt is true and adc meas start command received
		if (cmd_type == adc_meas_start && TC_INT == true)
8000d29c:	d7 03       	nop
		else if (cmd_type == adc_meas_stop)
		{
			LED_Toggle(LED5);
			//Do nothing at all
		}
	}
8000d29e:	cb fb       	rjmp	8000d21c <main+0x220>
			file_putc('\n');
			//Set the timer counter interrupt to false
			TC_INT=false;	
		}
	
		else if (cmd_type == adc_meas_stop)
8000d2a0:	4a 28       	lddpc	r8,8000d328 <main+0x32c>
8000d2a2:	11 89       	ld.ub	r9,r8[0x0]
8000d2a4:	30 58       	mov	r8,5
8000d2a6:	f0 09 18 00 	cp.b	r9,r8
8000d2aa:	cb 81       	brne	8000d21a <main+0x21e>
		{
			LED_Toggle(LED5);
8000d2ac:	32 0c       	mov	r12,32
8000d2ae:	f0 1f 00 24 	mcall	8000d33c <main+0x340>
			//Do nothing at all
		}
	}
8000d2b2:	cb 5b       	rjmp	8000d21c <main+0x220>
8000d2b4:	80 00       	ld.sh	r0,r0[0x0]
8000d2b6:	aa c0       	st.b	r5[0x4],r0
8000d2b8:	80 00       	ld.sh	r0,r0[0x0]
8000d2ba:	7e b8       	ld.w	r8,pc[0x2c]
8000d2bc:	80 00       	ld.sh	r0,r0[0x0]
8000d2be:	84 e8       	ld.uh	r8,r2[0xc]
8000d2c0:	80 00       	ld.sh	r0,r0[0x0]
8000d2c2:	cf cc       	rcall	8000d4ba <__avr32_f32_div_res_subnormal+0x2c>
8000d2c4:	80 00       	ld.sh	r0,r0[0x0]
8000d2c6:	85 80       	st.w	r2[0x20],r0
8000d2c8:	80 00       	ld.sh	r0,r0[0x0]
8000d2ca:	cc 80       	breq	8000d25a <main+0x25e>
8000d2cc:	80 00       	ld.sh	r0,r0[0x0]
8000d2ce:	cc 68       	rjmp	8000d45a <__divsf_return_op1+0x18>
8000d2d0:	80 00       	ld.sh	r0,r0[0x0]
8000d2d2:	cc d4       	brge	8000d26c <main+0x270>
8000d2d4:	80 00       	ld.sh	r0,r0[0x0]
8000d2d6:	c9 70       	breq	8000d204 <main+0x208>
8000d2d8:	80 00       	ld.sh	r0,r0[0x0]
8000d2da:	cd 84       	brge	8000d28a <main+0x28e>
8000d2dc:	80 00       	ld.sh	r0,r0[0x0]
8000d2de:	cc 50       	breq	8000d268 <main+0x26c>
8000d2e0:	80 00       	ld.sh	r0,r0[0x0]
8000d2e2:	d6 28       	*unknown*
8000d2e4:	80 00       	ld.sh	r0,r0[0x0]
8000d2e6:	cb 10       	breq	8000d248 <main+0x24c>
8000d2e8:	80 00       	ld.sh	r0,r0[0x0]
8000d2ea:	da b0       	acall	0xab
8000d2ec:	80 00       	ld.sh	r0,r0[0x0]
8000d2ee:	cb 34       	brge	8000d254 <main+0x258>
8000d2f0:	80 00       	ld.sh	r0,r0[0x0]
8000d2f2:	2a 5c       	sub	r12,-91
8000d2f4:	80 00       	ld.sh	r0,r0[0x0]
8000d2f6:	cb 48       	rjmp	8000d45e <__divsf_return_op1+0x1c>
8000d2f8:	80 00       	ld.sh	r0,r0[0x0]
8000d2fa:	cb 80       	breq	8000d26a <main+0x26e>
8000d2fc:	80 00       	ld.sh	r0,r0[0x0]
8000d2fe:	76 30       	ld.w	r0,r11[0xc]
8000d300:	80 00       	ld.sh	r0,r0[0x0]
8000d302:	77 28       	ld.w	r8,r11[0x48]
8000d304:	80 00       	ld.sh	r0,r0[0x0]
8000d306:	77 a0       	ld.w	r0,r11[0x68]
8000d308:	80 00       	ld.sh	r0,r0[0x0]
8000d30a:	cb 94       	brge	8000d27c <main+0x280>
8000d30c:	80 00       	ld.sh	r0,r0[0x0]
8000d30e:	7c 0c       	ld.w	r12,lr[0x0]
8000d310:	80 00       	ld.sh	r0,r0[0x0]
8000d312:	71 ec       	ld.w	r12,r8[0x78]
8000d314:	80 00       	ld.sh	r0,r0[0x0]
8000d316:	3b 1c       	mov	r12,-79
8000d318:	80 00       	ld.sh	r0,r0[0x0]
8000d31a:	cb a4       	brge	8000d28e <main+0x292>
8000d31c:	80 00       	ld.sh	r0,r0[0x0]
8000d31e:	cb bc       	rcall	8000d494 <__avr32_f32_div_res_subnormal+0x6>
8000d320:	80 00       	ld.sh	r0,r0[0x0]
8000d322:	cb d4       	brge	8000d29c <main+0x2a0>
8000d324:	80 00       	ld.sh	r0,r0[0x0]
8000d326:	ce f0       	breq	8000d304 <main+0x308>
8000d328:	00 00       	add	r0,r0
8000d32a:	00 d4       	st.w	--r0,r4
8000d32c:	00 00       	add	r0,r0
8000d32e:	0c 8f       	andn	pc,r6
8000d330:	80 00       	ld.sh	r0,r0[0x0]
8000d332:	2f 62       	sub	r2,-10
8000d334:	80 00       	ld.sh	r0,r0[0x0]
8000d336:	2f d8       	sub	r8,-3
8000d338:	00 00       	add	r0,r0
8000d33a:	0c 90       	mov	r0,r6
8000d33c:	80 00       	ld.sh	r0,r0[0x0]
8000d33e:	7f f8       	ld.w	r8,pc[0x7c]
8000d340:	00 00       	add	r0,r0
8000d342:	0c 94       	mov	r4,r6
8000d344:	80 00       	ld.sh	r0,r0[0x0]
8000d346:	ca e0       	breq	8000d2a2 <main+0x2a6>
8000d348:	00 00       	add	r0,r0
8000d34a:	12 48       	or	r8,r9
8000d34c:	80 00       	ld.sh	r0,r0[0x0]
8000d34e:	db e4       	*unknown*
8000d350:	80 00       	ld.sh	r0,r0[0x0]
8000d352:	dc c8       	*unknown*
8000d354:	80 00       	ld.sh	r0,r0[0x0]
8000d356:	72 d8       	ld.w	r8,r9[0x34]
8000d358:	80 00       	ld.sh	r0,r0[0x0]
8000d35a:	75 38       	ld.w	r8,r10[0x4c]

8000d35c <__avr32_f32_div>:
8000d35c:	f7 ec 20 08 	eor	r8,r11,r12
8000d360:	a1 7c       	lsl	r12,0x1
8000d362:	a1 7b       	lsl	r11,0x1
8000d364:	c7 a0       	breq	8000d458 <__divsf_return_op1+0x16>
8000d366:	18 7c       	tst	r12,r12
8000d368:	f9 b9 00 00 	moveq	r9,0
8000d36c:	c0 90       	breq	8000d37e <__avr32_f32_div+0x22>
8000d36e:	f8 09 16 18 	lsr	r9,r12,0x18
8000d372:	c7 e0       	breq	8000d46e <__divsf_return_op1+0x2c>
8000d374:	e0 49 00 ff 	cp.w	r9,255
8000d378:	c6 82       	brcc	8000d448 <__divsf_return_op1+0x6>
8000d37a:	a7 7c       	lsl	r12,0x7
8000d37c:	bf bc       	sbr	r12,0x1f
8000d37e:	f6 0a 16 18 	lsr	r10,r11,0x18
8000d382:	c7 e0       	breq	8000d47e <__divsf_return_op1+0x3c>
8000d384:	e0 4a 00 ff 	cp.w	r10,255
8000d388:	c6 62       	brcc	8000d454 <__divsf_return_op1+0x12>
8000d38a:	a7 7b       	lsl	r11,0x7
8000d38c:	bf bb       	sbr	r11,0x1f
8000d38e:	58 09       	cp.w	r9,0
8000d390:	f5 bc 00 00 	subfeq	r12,0
8000d394:	5e 0d       	reteq	0
8000d396:	1a d5       	st.w	--sp,r5
8000d398:	bb 27       	st.d	--sp,r6
8000d39a:	14 19       	sub	r9,r10
8000d39c:	28 19       	sub	r9,-127
8000d39e:	fc 1a 80 00 	movh	r10,0x8000
8000d3a2:	a3 8c       	lsr	r12,0x2
8000d3a4:	f6 05 16 02 	lsr	r5,r11,0x2
8000d3a8:	f4 0b 16 01 	lsr	r11,r10,0x1
8000d3ac:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
8000d3b0:	5c d6       	com	r6
8000d3b2:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
8000d3b6:	f6 05 06 46 	mulu.d	r6,r11,r5
8000d3ba:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000d3be:	f6 07 06 46 	mulu.d	r6,r11,r7
8000d3c2:	ee 0b 15 02 	lsl	r11,r7,0x2
8000d3c6:	f6 05 06 46 	mulu.d	r6,r11,r5
8000d3ca:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000d3ce:	f6 07 06 46 	mulu.d	r6,r11,r7
8000d3d2:	ee 0b 15 02 	lsl	r11,r7,0x2
8000d3d6:	f6 05 06 46 	mulu.d	r6,r11,r5
8000d3da:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000d3de:	f6 07 06 46 	mulu.d	r6,r11,r7
8000d3e2:	ee 0b 15 02 	lsl	r11,r7,0x2
8000d3e6:	f6 05 06 46 	mulu.d	r6,r11,r5
8000d3ea:	f4 07 01 27 	sub	r7,r10,r7<<0x2
8000d3ee:	f6 07 06 46 	mulu.d	r6,r11,r7
8000d3f2:	ee 0b 15 02 	lsl	r11,r7,0x2
8000d3f6:	f6 0c 06 46 	mulu.d	r6,r11,r12
8000d3fa:	a5 8c       	lsr	r12,0x4
8000d3fc:	ed b7 00 1c 	bld	r7,0x1c
8000d400:	c0 40       	breq	8000d408 <__avr32_f32_div+0xac>
8000d402:	a1 77       	lsl	r7,0x1
8000d404:	20 19       	sub	r9,1
8000d406:	a1 7c       	lsl	r12,0x1
8000d408:	58 09       	cp.w	r9,0
8000d40a:	e0 8a 00 42 	brle	8000d48e <__avr32_f32_div_res_subnormal>
8000d40e:	e0 17 ff e0 	andl	r7,0xffe0
8000d412:	e8 17 00 10 	orl	r7,0x10
8000d416:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000d41a:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000d41e:	58 0a       	cp.w	r10,0

8000d420 <__avr32_f32_div_round_subnormal>:
8000d420:	f8 0b 13 00 	cpc	r11,r12
8000d424:	5f 3b       	srlo	r11
8000d426:	ea 0b 17 00 	moveq	r11,r5
8000d42a:	ee 0c 16 05 	lsr	r12,r7,0x5
8000d42e:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
8000d432:	bb 07       	ld.d	r6,sp++
8000d434:	1b 05       	ld.w	r5,sp++
8000d436:	ed b8 00 1f 	bld	r8,0x1f
8000d43a:	ef bc 00 1f 	bst	r12,0x1f
8000d43e:	16 0c       	add	r12,r11
8000d440:	5e fc       	retal	r12

8000d442 <__divsf_return_op1>:
8000d442:	a1 78       	lsl	r8,0x1
8000d444:	5d 0c       	ror	r12
8000d446:	5e fc       	retal	r12
8000d448:	5e 1e       	retne	-1
8000d44a:	fc 19 ff 00 	movh	r9,0xff00
8000d44e:	12 3b       	cp.w	r11,r9
8000d450:	cf 93       	brcs	8000d442 <__divsf_return_op1>
8000d452:	5e fe       	retal	-1
8000d454:	5e 0d       	reteq	0
8000d456:	5e fe       	retal	-1
8000d458:	18 7c       	tst	r12,r12
8000d45a:	5e 0e       	reteq	-1
8000d45c:	f8 09 16 18 	lsr	r9,r12,0x18
8000d460:	c0 70       	breq	8000d46e <__divsf_return_op1+0x2c>
8000d462:	e0 49 00 ff 	cp.w	r9,255
8000d466:	cf 12       	brcc	8000d448 <__divsf_return_op1+0x6>
8000d468:	fc 1c ff 00 	movh	r12,0xff00
8000d46c:	ce bb       	rjmp	8000d442 <__divsf_return_op1>
8000d46e:	a7 7c       	lsl	r12,0x7
8000d470:	f8 09 12 00 	clz	r9,r12
8000d474:	f8 09 09 4c 	lsl	r12,r12,r9
8000d478:	f2 09 11 01 	rsub	r9,r9,1
8000d47c:	c8 1b       	rjmp	8000d37e <__avr32_f32_div+0x22>
8000d47e:	a7 7b       	lsl	r11,0x7
8000d480:	f6 0a 12 00 	clz	r10,r11
8000d484:	f6 0a 09 4b 	lsl	r11,r11,r10
8000d488:	f4 0a 11 01 	rsub	r10,r10,1
8000d48c:	c8 5b       	rjmp	8000d396 <__avr32_f32_div+0x3a>

8000d48e <__avr32_f32_div_res_subnormal>:
8000d48e:	5c 39       	neg	r9
8000d490:	2f f9       	sub	r9,-1
8000d492:	f1 b9 04 a0 	satu	r9,0x5
8000d496:	f2 0a 11 20 	rsub	r10,r9,32
8000d49a:	ee 09 0a 47 	lsr	r7,r7,r9
8000d49e:	f8 0a 09 46 	lsl	r6,r12,r10
8000d4a2:	f8 09 0a 4c 	lsr	r12,r12,r9
8000d4a6:	e0 17 ff e0 	andl	r7,0xffe0
8000d4aa:	e8 17 00 10 	orl	r7,0x10
8000d4ae:	ea 07 06 4a 	mulu.d	r10,r5,r7
8000d4b2:	30 09       	mov	r9,0
8000d4b4:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
8000d4b8:	0c 3a       	cp.w	r10,r6
8000d4ba:	cb 3b       	rjmp	8000d420 <__avr32_f32_div_round_subnormal>

8000d4bc <__avr32_f32_mul>:
8000d4bc:	18 98       	mov	r8,r12
8000d4be:	16 5c       	eor	r12,r11
8000d4c0:	e6 1c 80 00 	andh	r12,0x8000,COH
8000d4c4:	bf d8       	cbr	r8,0x1f
8000d4c6:	c6 60       	breq	8000d592 <__avr32_f32_mul_op1_zero>
8000d4c8:	bf db       	cbr	r11,0x1f
8000d4ca:	f0 0b 0c 4a 	max	r10,r8,r11
8000d4ce:	f0 0b 0d 49 	min	r9,r8,r11
8000d4d2:	f4 08 15 08 	lsl	r8,r10,0x8
8000d4d6:	bf b8       	sbr	r8,0x1f
8000d4d8:	b7 9a       	lsr	r10,0x17
8000d4da:	e0 4a 00 ff 	cp.w	r10,255
8000d4de:	c3 d0       	breq	8000d558 <__avr32_f32_mul_op1_nan_or_inf>
8000d4e0:	f2 0b 15 08 	lsl	r11,r9,0x8
8000d4e4:	bf bb       	sbr	r11,0x1f
8000d4e6:	b7 99       	lsr	r9,0x17
8000d4e8:	c2 40       	breq	8000d530 <__avr32_f32_mul_op2_subnormal>
8000d4ea:	14 09       	add	r9,r10
8000d4ec:	f0 0b 06 4a 	mulu.d	r10,r8,r11
8000d4f0:	f6 08 15 01 	lsl	r8,r11,0x1
8000d4f4:	f0 0b 17 20 	movhs	r11,r8
8000d4f8:	f7 b9 02 01 	subhs	r9,1
8000d4fc:	a9 8a       	lsr	r10,0x8
8000d4fe:	f5 db d3 08 	bfins	r10,r11,0x18,0x8
8000d502:	27 e9       	sub	r9,126
8000d504:	e0 8a 00 39 	brle	8000d576 <__avr32_f32_mul_res_subnormal>
8000d508:	e0 49 00 ff 	cp.w	r9,255
8000d50c:	c0 f4       	brge	8000d52a <__avr32_f32_mul_round+0x14>
8000d50e:	f9 eb 12 8c 	or	r12,r12,r11>>0x8
8000d512:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8

8000d516 <__avr32_f32_mul_round>:
8000d516:	fc 18 80 00 	movh	r8,0x8000
8000d51a:	ed bc 00 00 	bld	r12,0x0
8000d51e:	f7 b8 01 ff 	subne	r8,-1
8000d522:	10 3a       	cp.w	r10,r8
8000d524:	f7 bc 02 ff 	subhs	r12,-1
8000d528:	5e fc       	retal	r12
8000d52a:	ea 1c 7f 80 	orh	r12,0x7f80
8000d52e:	5e fc       	retal	r12

8000d530 <__avr32_f32_mul_op2_subnormal>:
8000d530:	bf db       	cbr	r11,0x1f
8000d532:	f6 09 12 00 	clz	r9,r11
8000d536:	5e 3d       	retlo	0
8000d538:	20 89       	sub	r9,8
8000d53a:	f6 09 09 4b 	lsl	r11,r11,r9
8000d53e:	f2 09 11 01 	rsub	r9,r9,1
8000d542:	14 7a       	tst	r10,r10
8000d544:	cd 31       	brne	8000d4ea <__avr32_f32_mul+0x2e>
8000d546:	bf d8       	cbr	r8,0x1f
8000d548:	f6 0a 12 00 	clz	r10,r11
8000d54c:	5e 3d       	retlo	0
8000d54e:	f0 0a 09 48 	lsl	r8,r8,r10
8000d552:	f4 0a 11 01 	rsub	r10,r10,1
8000d556:	cc ab       	rjmp	8000d4ea <__avr32_f32_mul+0x2e>

8000d558 <__avr32_f32_mul_op1_nan_or_inf>:
8000d558:	f0 0b 15 01 	lsl	r11,r8,0x1
8000d55c:	5e 1e       	retne	-1
8000d55e:	12 79       	tst	r9,r9
8000d560:	5e 0e       	reteq	-1
8000d562:	f9 da d2 e8 	bfins	r12,r10,0x17,0x8
8000d566:	f2 0b 16 17 	lsr	r11,r9,0x17
8000d56a:	e0 4b 00 ff 	cp.w	r11,255
8000d56e:	5e 1c       	retne	r12
8000d570:	a9 79       	lsl	r9,0x9
8000d572:	5e 0c       	reteq	r12
8000d574:	5e fe       	retal	-1

8000d576 <__avr32_f32_mul_res_subnormal>:
8000d576:	f2 09 11 09 	rsub	r9,r9,9
8000d57a:	f2 08 11 20 	rsub	r8,r9,32
8000d57e:	5e 3d       	retlo	0
8000d580:	f6 09 0a 49 	lsr	r9,r11,r9
8000d584:	12 4c       	or	r12,r9
8000d586:	f6 08 09 4b 	lsl	r11,r11,r8
8000d58a:	e4 1a 00 ff 	andh	r10,0xff
8000d58e:	16 4a       	or	r10,r11
8000d590:	cc 3b       	rjmp	8000d516 <__avr32_f32_mul_round>

8000d592 <__avr32_f32_mul_op1_zero>:
8000d592:	f5 db c2 e8 	bfextu	r10,r11,0x17,0x8
8000d596:	e0 4a 00 ff 	cp.w	r10,255
8000d59a:	5e 1c       	retne	r12
8000d59c:	5e 0e       	reteq	-1

8000d59e <__avr32_u32_to_f32>:
8000d59e:	58 0c       	cp.w	r12,0
8000d5a0:	5e 0c       	reteq	r12
8000d5a2:	e0 6a 00 9e 	mov	r10,158
8000d5a6:	f8 09 12 00 	clz	r9,r12
8000d5aa:	12 1a       	sub	r10,r9
8000d5ac:	f8 09 09 4c 	lsl	r12,r12,r9
8000d5b0:	58 0a       	cp.w	r10,0
8000d5b2:	e0 8a 00 14 	brle	8000d5da <__avr32_u32_to_f32_subnormal>
8000d5b6:	37 f9       	mov	r9,127
8000d5b8:	ed bc 00 08 	bld	r12,0x8
8000d5bc:	f7 b9 00 ff 	subeq	r9,-1
8000d5c0:	12 0c       	add	r12,r9
8000d5c2:	f7 ba 03 fe 	sublo	r10,-2
8000d5c6:	ed bc 00 1f 	bld	r12,0x1f
8000d5ca:	f7 ba 01 01 	subne	r10,1
8000d5ce:	f8 0c 16 07 	lsr	r12,r12,0x7
8000d5d2:	f9 da d3 08 	bfins	r12,r10,0x18,0x8
8000d5d6:	a1 9c       	lsr	r12,0x1
8000d5d8:	5e fc       	retal	r12

8000d5da <__avr32_u32_to_f32_subnormal>:
8000d5da:	30 08       	mov	r8,0
8000d5dc:	f4 0a 11 01 	rsub	r10,r10,1
8000d5e0:	59 9a       	cp.w	r10,25
8000d5e2:	f9 bc 02 00 	movhs	r12,0
8000d5e6:	c1 32       	brcc	8000d60c <__avr32_u32_to_f32_subnormal+0x32>
8000d5e8:	f4 09 11 20 	rsub	r9,r10,32
8000d5ec:	f8 09 09 49 	lsl	r9,r12,r9
8000d5f0:	5f 19       	srne	r9
8000d5f2:	f8 0a 0a 4c 	lsr	r12,r12,r10
8000d5f6:	12 4c       	or	r12,r9
8000d5f8:	37 f9       	mov	r9,127
8000d5fa:	ed bc 00 08 	bld	r12,0x8
8000d5fe:	f7 b9 00 ff 	subeq	r9,-1
8000d602:	12 0c       	add	r12,r9
8000d604:	f8 0c 16 07 	lsr	r12,r12,0x7
8000d608:	a1 78       	lsl	r8,0x1
8000d60a:	5d 0c       	ror	r12
8000d60c:	5e fc       	retal	r12

8000d60e <__avr32_f32_to_u32>:
8000d60e:	58 0c       	cp.w	r12,0
8000d610:	5e 6d       	retmi	0
8000d612:	f7 dc c2 e8 	bfextu	r11,r12,0x17,0x8
8000d616:	27 fb       	sub	r11,127
8000d618:	5e 3d       	retlo	0
8000d61a:	f6 0b 11 1f 	rsub	r11,r11,31
8000d61e:	a9 6c       	lsl	r12,0x8
8000d620:	bf bc       	sbr	r12,0x1f
8000d622:	f8 0b 0a 4c 	lsr	r12,r12,r11
8000d626:	5e fc       	retal	r12

8000d628 <__avr32_udiv64>:
8000d628:	d4 31       	pushm	r0-r7,lr
8000d62a:	1a 97       	mov	r7,sp
8000d62c:	20 3d       	sub	sp,12
8000d62e:	10 9c       	mov	r12,r8
8000d630:	12 9e       	mov	lr,r9
8000d632:	14 93       	mov	r3,r10
8000d634:	58 09       	cp.w	r9,0
8000d636:	e0 81 00 bd 	brne	8000d7b0 <__avr32_udiv64+0x188>
8000d63a:	16 38       	cp.w	r8,r11
8000d63c:	e0 88 00 40 	brls	8000d6bc <__avr32_udiv64+0x94>
8000d640:	f0 08 12 00 	clz	r8,r8
8000d644:	c0 d0       	breq	8000d65e <__avr32_udiv64+0x36>
8000d646:	f6 08 09 4b 	lsl	r11,r11,r8
8000d64a:	f0 09 11 20 	rsub	r9,r8,32
8000d64e:	f8 08 09 4c 	lsl	r12,r12,r8
8000d652:	f4 09 0a 49 	lsr	r9,r10,r9
8000d656:	f4 08 09 43 	lsl	r3,r10,r8
8000d65a:	f3 eb 10 0b 	or	r11,r9,r11
8000d65e:	f8 0e 16 10 	lsr	lr,r12,0x10
8000d662:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
8000d666:	f6 0e 0d 00 	divu	r0,r11,lr
8000d66a:	e6 0b 16 10 	lsr	r11,r3,0x10
8000d66e:	00 99       	mov	r9,r0
8000d670:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000d674:	e0 0a 02 48 	mul	r8,r0,r10
8000d678:	10 3b       	cp.w	r11,r8
8000d67a:	c0 a2       	brcc	8000d68e <__avr32_udiv64+0x66>
8000d67c:	20 19       	sub	r9,1
8000d67e:	18 0b       	add	r11,r12
8000d680:	18 3b       	cp.w	r11,r12
8000d682:	c0 63       	brcs	8000d68e <__avr32_udiv64+0x66>
8000d684:	10 3b       	cp.w	r11,r8
8000d686:	f7 b9 03 01 	sublo	r9,1
8000d68a:	f7 dc e3 0b 	addcs	r11,r11,r12
8000d68e:	f6 08 01 01 	sub	r1,r11,r8
8000d692:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000d696:	e2 0e 0d 00 	divu	r0,r1,lr
8000d69a:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000d69e:	00 98       	mov	r8,r0
8000d6a0:	e0 0a 02 4a 	mul	r10,r0,r10
8000d6a4:	14 33       	cp.w	r3,r10
8000d6a6:	c0 82       	brcc	8000d6b6 <__avr32_udiv64+0x8e>
8000d6a8:	20 18       	sub	r8,1
8000d6aa:	18 03       	add	r3,r12
8000d6ac:	18 33       	cp.w	r3,r12
8000d6ae:	c0 43       	brcs	8000d6b6 <__avr32_udiv64+0x8e>
8000d6b0:	14 33       	cp.w	r3,r10
8000d6b2:	f7 b8 03 01 	sublo	r8,1
8000d6b6:	f1 e9 11 08 	or	r8,r8,r9<<0x10
8000d6ba:	cd f8       	rjmp	8000d878 <__avr32_udiv64+0x250>
8000d6bc:	58 08       	cp.w	r8,0
8000d6be:	c0 51       	brne	8000d6c8 <__avr32_udiv64+0xa0>
8000d6c0:	30 19       	mov	r9,1
8000d6c2:	f2 08 0d 08 	divu	r8,r9,r8
8000d6c6:	10 9c       	mov	r12,r8
8000d6c8:	f8 06 12 00 	clz	r6,r12
8000d6cc:	c0 41       	brne	8000d6d4 <__avr32_udiv64+0xac>
8000d6ce:	18 1b       	sub	r11,r12
8000d6d0:	30 19       	mov	r9,1
8000d6d2:	c4 08       	rjmp	8000d752 <__avr32_udiv64+0x12a>
8000d6d4:	ec 01 11 20 	rsub	r1,r6,32
8000d6d8:	f4 01 0a 49 	lsr	r9,r10,r1
8000d6dc:	f8 06 09 4c 	lsl	r12,r12,r6
8000d6e0:	f6 06 09 48 	lsl	r8,r11,r6
8000d6e4:	f6 01 0a 41 	lsr	r1,r11,r1
8000d6e8:	f3 e8 10 08 	or	r8,r9,r8
8000d6ec:	f8 03 16 10 	lsr	r3,r12,0x10
8000d6f0:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
8000d6f4:	e2 03 0d 00 	divu	r0,r1,r3
8000d6f8:	f0 0b 16 10 	lsr	r11,r8,0x10
8000d6fc:	00 9e       	mov	lr,r0
8000d6fe:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000d702:	e0 05 02 49 	mul	r9,r0,r5
8000d706:	12 3b       	cp.w	r11,r9
8000d708:	c0 a2       	brcc	8000d71c <__avr32_udiv64+0xf4>
8000d70a:	20 1e       	sub	lr,1
8000d70c:	18 0b       	add	r11,r12
8000d70e:	18 3b       	cp.w	r11,r12
8000d710:	c0 63       	brcs	8000d71c <__avr32_udiv64+0xf4>
8000d712:	12 3b       	cp.w	r11,r9
8000d714:	f7 be 03 01 	sublo	lr,1
8000d718:	f7 dc e3 0b 	addcs	r11,r11,r12
8000d71c:	12 1b       	sub	r11,r9
8000d71e:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
8000d722:	f6 03 0d 02 	divu	r2,r11,r3
8000d726:	f1 e3 11 08 	or	r8,r8,r3<<0x10
8000d72a:	04 99       	mov	r9,r2
8000d72c:	e4 05 02 4b 	mul	r11,r2,r5
8000d730:	16 38       	cp.w	r8,r11
8000d732:	c0 a2       	brcc	8000d746 <__avr32_udiv64+0x11e>
8000d734:	20 19       	sub	r9,1
8000d736:	18 08       	add	r8,r12
8000d738:	18 38       	cp.w	r8,r12
8000d73a:	c0 63       	brcs	8000d746 <__avr32_udiv64+0x11e>
8000d73c:	16 38       	cp.w	r8,r11
8000d73e:	f7 b9 03 01 	sublo	r9,1
8000d742:	f1 dc e3 08 	addcs	r8,r8,r12
8000d746:	f4 06 09 43 	lsl	r3,r10,r6
8000d74a:	f0 0b 01 0b 	sub	r11,r8,r11
8000d74e:	f3 ee 11 09 	or	r9,r9,lr<<0x10
8000d752:	f8 06 16 10 	lsr	r6,r12,0x10
8000d756:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
8000d75a:	f6 06 0d 00 	divu	r0,r11,r6
8000d75e:	e6 0b 16 10 	lsr	r11,r3,0x10
8000d762:	00 9a       	mov	r10,r0
8000d764:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000d768:	e0 0e 02 48 	mul	r8,r0,lr
8000d76c:	10 3b       	cp.w	r11,r8
8000d76e:	c0 a2       	brcc	8000d782 <__avr32_udiv64+0x15a>
8000d770:	20 1a       	sub	r10,1
8000d772:	18 0b       	add	r11,r12
8000d774:	18 3b       	cp.w	r11,r12
8000d776:	c0 63       	brcs	8000d782 <__avr32_udiv64+0x15a>
8000d778:	10 3b       	cp.w	r11,r8
8000d77a:	f7 ba 03 01 	sublo	r10,1
8000d77e:	f7 dc e3 0b 	addcs	r11,r11,r12
8000d782:	f6 08 01 01 	sub	r1,r11,r8
8000d786:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
8000d78a:	e2 06 0d 00 	divu	r0,r1,r6
8000d78e:	e7 e1 11 03 	or	r3,r3,r1<<0x10
8000d792:	00 98       	mov	r8,r0
8000d794:	e0 0e 02 4b 	mul	r11,r0,lr
8000d798:	16 33       	cp.w	r3,r11
8000d79a:	c0 82       	brcc	8000d7aa <__avr32_udiv64+0x182>
8000d79c:	20 18       	sub	r8,1
8000d79e:	18 03       	add	r3,r12
8000d7a0:	18 33       	cp.w	r3,r12
8000d7a2:	c0 43       	brcs	8000d7aa <__avr32_udiv64+0x182>
8000d7a4:	16 33       	cp.w	r3,r11
8000d7a6:	f7 b8 03 01 	sublo	r8,1
8000d7aa:	f1 ea 11 08 	or	r8,r8,r10<<0x10
8000d7ae:	c6 98       	rjmp	8000d880 <__avr32_udiv64+0x258>
8000d7b0:	16 39       	cp.w	r9,r11
8000d7b2:	e0 8b 00 65 	brhi	8000d87c <__avr32_udiv64+0x254>
8000d7b6:	f2 09 12 00 	clz	r9,r9
8000d7ba:	c0 b1       	brne	8000d7d0 <__avr32_udiv64+0x1a8>
8000d7bc:	10 3a       	cp.w	r10,r8
8000d7be:	5f 2a       	srhs	r10
8000d7c0:	1c 3b       	cp.w	r11,lr
8000d7c2:	5f b8       	srhi	r8
8000d7c4:	10 4a       	or	r10,r8
8000d7c6:	f2 0a 18 00 	cp.b	r10,r9
8000d7ca:	c5 90       	breq	8000d87c <__avr32_udiv64+0x254>
8000d7cc:	30 18       	mov	r8,1
8000d7ce:	c5 98       	rjmp	8000d880 <__avr32_udiv64+0x258>
8000d7d0:	f0 09 09 46 	lsl	r6,r8,r9
8000d7d4:	f2 03 11 20 	rsub	r3,r9,32
8000d7d8:	fc 09 09 4e 	lsl	lr,lr,r9
8000d7dc:	f0 03 0a 48 	lsr	r8,r8,r3
8000d7e0:	f6 09 09 4c 	lsl	r12,r11,r9
8000d7e4:	f4 03 0a 42 	lsr	r2,r10,r3
8000d7e8:	ef 46 ff f4 	st.w	r7[-12],r6
8000d7ec:	f6 03 0a 43 	lsr	r3,r11,r3
8000d7f0:	18 42       	or	r2,r12
8000d7f2:	f1 ee 10 0c 	or	r12,r8,lr
8000d7f6:	f8 01 16 10 	lsr	r1,r12,0x10
8000d7fa:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
8000d7fe:	e6 01 0d 04 	divu	r4,r3,r1
8000d802:	e4 03 16 10 	lsr	r3,r2,0x10
8000d806:	08 9e       	mov	lr,r4
8000d808:	e7 e5 11 03 	or	r3,r3,r5<<0x10
8000d80c:	e8 06 02 48 	mul	r8,r4,r6
8000d810:	10 33       	cp.w	r3,r8
8000d812:	c0 a2       	brcc	8000d826 <__avr32_udiv64+0x1fe>
8000d814:	20 1e       	sub	lr,1
8000d816:	18 03       	add	r3,r12
8000d818:	18 33       	cp.w	r3,r12
8000d81a:	c0 63       	brcs	8000d826 <__avr32_udiv64+0x1fe>
8000d81c:	10 33       	cp.w	r3,r8
8000d81e:	f7 be 03 01 	sublo	lr,1
8000d822:	e7 dc e3 03 	addcs	r3,r3,r12
8000d826:	10 13       	sub	r3,r8
8000d828:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
8000d82c:	e6 01 0d 00 	divu	r0,r3,r1
8000d830:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
8000d834:	00 98       	mov	r8,r0
8000d836:	e0 06 02 46 	mul	r6,r0,r6
8000d83a:	0c 3b       	cp.w	r11,r6
8000d83c:	c0 a2       	brcc	8000d850 <__avr32_udiv64+0x228>
8000d83e:	20 18       	sub	r8,1
8000d840:	18 0b       	add	r11,r12
8000d842:	18 3b       	cp.w	r11,r12
8000d844:	c0 63       	brcs	8000d850 <__avr32_udiv64+0x228>
8000d846:	0c 3b       	cp.w	r11,r6
8000d848:	f7 dc e3 0b 	addcs	r11,r11,r12
8000d84c:	f7 b8 03 01 	sublo	r8,1
8000d850:	f1 ee 11 08 	or	r8,r8,lr<<0x10
8000d854:	ee f4 ff f4 	ld.w	r4,r7[-12]
8000d858:	0c 1b       	sub	r11,r6
8000d85a:	f0 04 06 42 	mulu.d	r2,r8,r4
8000d85e:	06 95       	mov	r5,r3
8000d860:	16 35       	cp.w	r5,r11
8000d862:	e0 8b 00 0a 	brhi	8000d876 <__avr32_udiv64+0x24e>
8000d866:	5f 0b       	sreq	r11
8000d868:	f4 09 09 49 	lsl	r9,r10,r9
8000d86c:	12 32       	cp.w	r2,r9
8000d86e:	5f b9       	srhi	r9
8000d870:	f7 e9 00 09 	and	r9,r11,r9
8000d874:	c0 60       	breq	8000d880 <__avr32_udiv64+0x258>
8000d876:	20 18       	sub	r8,1
8000d878:	30 09       	mov	r9,0
8000d87a:	c0 38       	rjmp	8000d880 <__avr32_udiv64+0x258>
8000d87c:	30 09       	mov	r9,0
8000d87e:	12 98       	mov	r8,r9
8000d880:	10 9a       	mov	r10,r8
8000d882:	12 93       	mov	r3,r9
8000d884:	10 92       	mov	r2,r8
8000d886:	12 9b       	mov	r11,r9
8000d888:	2f dd       	sub	sp,-12
8000d88a:	d8 32       	popm	r0-r7,pc

8000d88c <memcmp>:
8000d88c:	d4 01       	pushm	lr
8000d88e:	30 08       	mov	r8,0
8000d890:	c0 d8       	rjmp	8000d8aa <memcmp+0x1e>
8000d892:	f8 08 07 0e 	ld.ub	lr,r12[r8]
8000d896:	f6 08 07 09 	ld.ub	r9,r11[r8]
8000d89a:	20 1a       	sub	r10,1
8000d89c:	2f f8       	sub	r8,-1
8000d89e:	f2 0e 18 00 	cp.b	lr,r9
8000d8a2:	c0 40       	breq	8000d8aa <memcmp+0x1e>
8000d8a4:	fc 09 01 0c 	sub	r12,lr,r9
8000d8a8:	d8 02       	popm	pc
8000d8aa:	58 0a       	cp.w	r10,0
8000d8ac:	cf 31       	brne	8000d892 <memcmp+0x6>
8000d8ae:	14 9c       	mov	r12,r10
8000d8b0:	d8 02       	popm	pc

8000d8b2 <memcpy>:
8000d8b2:	58 8a       	cp.w	r10,8
8000d8b4:	c2 f5       	brlt	8000d912 <memcpy+0x60>
8000d8b6:	f9 eb 10 09 	or	r9,r12,r11
8000d8ba:	e2 19 00 03 	andl	r9,0x3,COH
8000d8be:	e0 81 00 97 	brne	8000d9ec <memcpy+0x13a>
8000d8c2:	e0 4a 00 20 	cp.w	r10,32
8000d8c6:	c3 b4       	brge	8000d93c <memcpy+0x8a>
8000d8c8:	f4 08 14 02 	asr	r8,r10,0x2
8000d8cc:	f0 09 11 08 	rsub	r9,r8,8
8000d8d0:	fe 09 00 2f 	add	pc,pc,r9<<0x2
8000d8d4:	76 69       	ld.w	r9,r11[0x18]
8000d8d6:	99 69       	st.w	r12[0x18],r9
8000d8d8:	76 59       	ld.w	r9,r11[0x14]
8000d8da:	99 59       	st.w	r12[0x14],r9
8000d8dc:	76 49       	ld.w	r9,r11[0x10]
8000d8de:	99 49       	st.w	r12[0x10],r9
8000d8e0:	76 39       	ld.w	r9,r11[0xc]
8000d8e2:	99 39       	st.w	r12[0xc],r9
8000d8e4:	76 29       	ld.w	r9,r11[0x8]
8000d8e6:	99 29       	st.w	r12[0x8],r9
8000d8e8:	76 19       	ld.w	r9,r11[0x4]
8000d8ea:	99 19       	st.w	r12[0x4],r9
8000d8ec:	76 09       	ld.w	r9,r11[0x0]
8000d8ee:	99 09       	st.w	r12[0x0],r9
8000d8f0:	f6 08 00 2b 	add	r11,r11,r8<<0x2
8000d8f4:	f8 08 00 28 	add	r8,r12,r8<<0x2
8000d8f8:	e0 1a 00 03 	andl	r10,0x3
8000d8fc:	f4 0a 11 04 	rsub	r10,r10,4
8000d900:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000d904:	17 a9       	ld.ub	r9,r11[0x2]
8000d906:	b0 a9       	st.b	r8[0x2],r9
8000d908:	17 99       	ld.ub	r9,r11[0x1]
8000d90a:	b0 99       	st.b	r8[0x1],r9
8000d90c:	17 89       	ld.ub	r9,r11[0x0]
8000d90e:	b0 89       	st.b	r8[0x0],r9
8000d910:	5e fc       	retal	r12
8000d912:	f4 0a 11 09 	rsub	r10,r10,9
8000d916:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
8000d91a:	17 f9       	ld.ub	r9,r11[0x7]
8000d91c:	b8 f9       	st.b	r12[0x7],r9
8000d91e:	17 e9       	ld.ub	r9,r11[0x6]
8000d920:	b8 e9       	st.b	r12[0x6],r9
8000d922:	17 d9       	ld.ub	r9,r11[0x5]
8000d924:	b8 d9       	st.b	r12[0x5],r9
8000d926:	17 c9       	ld.ub	r9,r11[0x4]
8000d928:	b8 c9       	st.b	r12[0x4],r9
8000d92a:	17 b9       	ld.ub	r9,r11[0x3]
8000d92c:	b8 b9       	st.b	r12[0x3],r9
8000d92e:	17 a9       	ld.ub	r9,r11[0x2]
8000d930:	b8 a9       	st.b	r12[0x2],r9
8000d932:	17 99       	ld.ub	r9,r11[0x1]
8000d934:	b8 99       	st.b	r12[0x1],r9
8000d936:	17 89       	ld.ub	r9,r11[0x0]
8000d938:	b8 89       	st.b	r12[0x0],r9
8000d93a:	5e fc       	retal	r12
8000d93c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d940:	18 99       	mov	r9,r12
8000d942:	22 0a       	sub	r10,32
8000d944:	b7 07       	ld.d	r6,r11++
8000d946:	b3 26       	st.d	r9++,r6
8000d948:	b7 07       	ld.d	r6,r11++
8000d94a:	b3 26       	st.d	r9++,r6
8000d94c:	b7 07       	ld.d	r6,r11++
8000d94e:	b3 26       	st.d	r9++,r6
8000d950:	b7 07       	ld.d	r6,r11++
8000d952:	b3 26       	st.d	r9++,r6
8000d954:	22 0a       	sub	r10,32
8000d956:	cf 74       	brge	8000d944 <memcpy+0x92>
8000d958:	2f 0a       	sub	r10,-16
8000d95a:	c0 65       	brlt	8000d966 <memcpy+0xb4>
8000d95c:	b7 07       	ld.d	r6,r11++
8000d95e:	b3 26       	st.d	r9++,r6
8000d960:	b7 07       	ld.d	r6,r11++
8000d962:	b3 26       	st.d	r9++,r6
8000d964:	21 0a       	sub	r10,16
8000d966:	5c 3a       	neg	r10
8000d968:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
8000d96c:	d7 03       	nop
8000d96e:	d7 03       	nop
8000d970:	f7 36 00 0e 	ld.ub	r6,r11[14]
8000d974:	f3 66 00 0e 	st.b	r9[14],r6
8000d978:	f7 36 00 0d 	ld.ub	r6,r11[13]
8000d97c:	f3 66 00 0d 	st.b	r9[13],r6
8000d980:	f7 36 00 0c 	ld.ub	r6,r11[12]
8000d984:	f3 66 00 0c 	st.b	r9[12],r6
8000d988:	f7 36 00 0b 	ld.ub	r6,r11[11]
8000d98c:	f3 66 00 0b 	st.b	r9[11],r6
8000d990:	f7 36 00 0a 	ld.ub	r6,r11[10]
8000d994:	f3 66 00 0a 	st.b	r9[10],r6
8000d998:	f7 36 00 09 	ld.ub	r6,r11[9]
8000d99c:	f3 66 00 09 	st.b	r9[9],r6
8000d9a0:	f7 36 00 08 	ld.ub	r6,r11[8]
8000d9a4:	f3 66 00 08 	st.b	r9[8],r6
8000d9a8:	f7 36 00 07 	ld.ub	r6,r11[7]
8000d9ac:	f3 66 00 07 	st.b	r9[7],r6
8000d9b0:	f7 36 00 06 	ld.ub	r6,r11[6]
8000d9b4:	f3 66 00 06 	st.b	r9[6],r6
8000d9b8:	f7 36 00 05 	ld.ub	r6,r11[5]
8000d9bc:	f3 66 00 05 	st.b	r9[5],r6
8000d9c0:	f7 36 00 04 	ld.ub	r6,r11[4]
8000d9c4:	f3 66 00 04 	st.b	r9[4],r6
8000d9c8:	f7 36 00 03 	ld.ub	r6,r11[3]
8000d9cc:	f3 66 00 03 	st.b	r9[3],r6
8000d9d0:	f7 36 00 02 	ld.ub	r6,r11[2]
8000d9d4:	f3 66 00 02 	st.b	r9[2],r6
8000d9d8:	f7 36 00 01 	ld.ub	r6,r11[1]
8000d9dc:	f3 66 00 01 	st.b	r9[1],r6
8000d9e0:	f7 36 00 00 	ld.ub	r6,r11[0]
8000d9e4:	f3 66 00 00 	st.b	r9[0],r6
8000d9e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d9ec:	20 1a       	sub	r10,1
8000d9ee:	f6 0a 07 09 	ld.ub	r9,r11[r10]
8000d9f2:	f8 0a 0b 09 	st.b	r12[r10],r9
8000d9f6:	cf b1       	brne	8000d9ec <memcpy+0x13a>
8000d9f8:	5e fc       	retal	r12

8000d9fa <memset>:
8000d9fa:	18 98       	mov	r8,r12
8000d9fc:	c0 38       	rjmp	8000da02 <memset+0x8>
8000d9fe:	10 cb       	st.b	r8++,r11
8000da00:	20 1a       	sub	r10,1
8000da02:	58 0a       	cp.w	r10,0
8000da04:	cf d1       	brne	8000d9fe <memset+0x4>
8000da06:	5e fc       	retal	r12

8000da08 <printf>:
8000da08:	d4 21       	pushm	r4-r7,lr
8000da0a:	e0 68 01 c8 	mov	r8,456
8000da0e:	fa c4 ff ec 	sub	r4,sp,-20
8000da12:	18 96       	mov	r6,r12
8000da14:	70 07       	ld.w	r7,r8[0x0]
8000da16:	58 07       	cp.w	r7,0
8000da18:	c0 70       	breq	8000da26 <printf+0x1e>
8000da1a:	6e 68       	ld.w	r8,r7[0x18]
8000da1c:	58 08       	cp.w	r8,0
8000da1e:	c0 41       	brne	8000da26 <printf+0x1e>
8000da20:	0e 9c       	mov	r12,r7
8000da22:	e0 a0 1a 45 	rcall	80010eac <__sinit>
8000da26:	08 99       	mov	r9,r4
8000da28:	0c 9a       	mov	r10,r6
8000da2a:	0e 9c       	mov	r12,r7
8000da2c:	6e 1b       	ld.w	r11,r7[0x4]
8000da2e:	e0 a0 02 f1 	rcall	8000e010 <_vfprintf_r>
8000da32:	d8 22       	popm	r4-r7,pc

8000da34 <putchar>:
8000da34:	d4 21       	pushm	r4-r7,lr
8000da36:	e0 68 01 c8 	mov	r8,456
8000da3a:	18 97       	mov	r7,r12
8000da3c:	70 0c       	ld.w	r12,r8[0x0]
8000da3e:	58 0c       	cp.w	r12,0
8000da40:	c0 60       	breq	8000da4c <putchar+0x18>
8000da42:	78 68       	ld.w	r8,r12[0x18]
8000da44:	58 08       	cp.w	r8,0
8000da46:	c0 31       	brne	8000da4c <putchar+0x18>
8000da48:	e0 a0 1a 32 	rcall	80010eac <__sinit>
8000da4c:	e0 68 01 c8 	mov	r8,456
8000da50:	70 08       	ld.w	r8,r8[0x0]
8000da52:	0e 9b       	mov	r11,r7
8000da54:	10 9c       	mov	r12,r8
8000da56:	70 1a       	ld.w	r10,r8[0x4]
8000da58:	e0 a0 22 98 	rcall	80011f88 <_putc_r>
8000da5c:	d8 22       	popm	r4-r7,pc
8000da5e:	d7 03       	nop

8000da60 <_puts_r>:
8000da60:	d4 21       	pushm	r4-r7,lr
8000da62:	20 7d       	sub	sp,28
8000da64:	16 96       	mov	r6,r11
8000da66:	18 97       	mov	r7,r12
8000da68:	16 9c       	mov	r12,r11
8000da6a:	c2 fd       	rcall	8000dcc8 <strlen>
8000da6c:	f8 c8 ff ff 	sub	r8,r12,-1
8000da70:	50 68       	stdsp	sp[0x18],r8
8000da72:	fe c8 a2 d6 	sub	r8,pc,-23850
8000da76:	50 28       	stdsp	sp[0x8],r8
8000da78:	30 18       	mov	r8,1
8000da7a:	50 06       	stdsp	sp[0x0],r6
8000da7c:	50 38       	stdsp	sp[0xc],r8
8000da7e:	50 1c       	stdsp	sp[0x4],r12
8000da80:	30 28       	mov	r8,2
8000da82:	50 4d       	stdsp	sp[0x10],sp
8000da84:	50 58       	stdsp	sp[0x14],r8
8000da86:	58 07       	cp.w	r7,0
8000da88:	c0 70       	breq	8000da96 <_puts_r+0x36>
8000da8a:	6e 68       	ld.w	r8,r7[0x18]
8000da8c:	58 08       	cp.w	r8,0
8000da8e:	c0 41       	brne	8000da96 <_puts_r+0x36>
8000da90:	0e 9c       	mov	r12,r7
8000da92:	e0 a0 1a 0d 	rcall	80010eac <__sinit>
8000da96:	0e 9c       	mov	r12,r7
8000da98:	fa ca ff f0 	sub	r10,sp,-16
8000da9c:	6e 1b       	ld.w	r11,r7[0x4]
8000da9e:	e0 a0 1b 67 	rcall	8001116c <__sfvwrite_r>
8000daa2:	f9 bc 01 ff 	movne	r12,-1
8000daa6:	f9 bc 00 0a 	moveq	r12,10
8000daaa:	2f 9d       	sub	sp,-28
8000daac:	d8 22       	popm	r4-r7,pc
8000daae:	d7 03       	nop

8000dab0 <puts>:
8000dab0:	d4 01       	pushm	lr
8000dab2:	e0 68 01 c8 	mov	r8,456
8000dab6:	18 9b       	mov	r11,r12
8000dab8:	70 0c       	ld.w	r12,r8[0x0]
8000daba:	cd 3f       	rcall	8000da60 <_puts_r>
8000dabc:	d8 02       	popm	pc
8000dabe:	d7 03       	nop

8000dac0 <setbuf>:
8000dac0:	d4 01       	pushm	lr
8000dac2:	e0 69 04 00 	mov	r9,1024
8000dac6:	58 0b       	cp.w	r11,0
8000dac8:	f9 ba 00 02 	moveq	r10,2
8000dacc:	f9 ba 01 00 	movne	r10,0
8000dad0:	c0 2c       	rcall	8000dad4 <setvbuf>
8000dad2:	d8 02       	popm	pc

8000dad4 <setvbuf>:
8000dad4:	d4 31       	pushm	r0-r7,lr
8000dad6:	e0 68 01 c8 	mov	r8,456
8000dada:	18 97       	mov	r7,r12
8000dadc:	16 96       	mov	r6,r11
8000dade:	14 95       	mov	r5,r10
8000dae0:	12 94       	mov	r4,r9
8000dae2:	70 0c       	ld.w	r12,r8[0x0]
8000dae4:	58 0c       	cp.w	r12,0
8000dae6:	c0 60       	breq	8000daf2 <setvbuf+0x1e>
8000dae8:	78 68       	ld.w	r8,r12[0x18]
8000daea:	58 08       	cp.w	r8,0
8000daec:	c0 31       	brne	8000daf2 <setvbuf+0x1e>
8000daee:	e0 a0 19 df 	rcall	80010eac <__sinit>
8000daf2:	fe c8 9f 6e 	sub	r8,pc,-24722
8000daf6:	10 37       	cp.w	r7,r8
8000daf8:	c0 61       	brne	8000db04 <setvbuf+0x30>
8000dafa:	e0 68 01 c8 	mov	r8,456
8000dafe:	70 08       	ld.w	r8,r8[0x0]
8000db00:	70 07       	ld.w	r7,r8[0x0]
8000db02:	c1 28       	rjmp	8000db26 <setvbuf+0x52>
8000db04:	fe c8 9f 60 	sub	r8,pc,-24736
8000db08:	10 37       	cp.w	r7,r8
8000db0a:	c0 61       	brne	8000db16 <setvbuf+0x42>
8000db0c:	e0 68 01 c8 	mov	r8,456
8000db10:	70 08       	ld.w	r8,r8[0x0]
8000db12:	70 17       	ld.w	r7,r8[0x4]
8000db14:	c0 98       	rjmp	8000db26 <setvbuf+0x52>
8000db16:	fe c8 9f 52 	sub	r8,pc,-24750
8000db1a:	10 37       	cp.w	r7,r8
8000db1c:	c0 51       	brne	8000db26 <setvbuf+0x52>
8000db1e:	e0 68 01 c8 	mov	r8,456
8000db22:	70 08       	ld.w	r8,r8[0x0]
8000db24:	70 27       	ld.w	r7,r8[0x8]
8000db26:	58 25       	cp.w	r5,2
8000db28:	5f b8       	srhi	r8
8000db2a:	f1 e4 13 f8 	or	r8,r8,r4>>0x1f
8000db2e:	c0 20       	breq	8000db32 <setvbuf+0x5e>
8000db30:	dc 3a       	popm	r0-r7,pc,r12=-1
8000db32:	e0 63 01 c8 	mov	r3,456
8000db36:	0e 9b       	mov	r11,r7
8000db38:	66 0c       	ld.w	r12,r3[0x0]
8000db3a:	e0 a0 18 e1 	rcall	80010cfc <_fflush_r>
8000db3e:	30 08       	mov	r8,0
8000db40:	8f 68       	st.w	r7[0x18],r8
8000db42:	8f 18       	st.w	r7[0x4],r8
8000db44:	8e 68       	ld.sh	r8,r7[0xc]
8000db46:	ed b8 00 07 	bld	r8,0x7
8000db4a:	c0 51       	brne	8000db54 <setvbuf+0x80>
8000db4c:	66 0c       	ld.w	r12,r3[0x0]
8000db4e:	6e 4b       	ld.w	r11,r7[0x10]
8000db50:	e0 a0 1a 48 	rcall	80010fe0 <_free_r>
8000db54:	8e 68       	ld.sh	r8,r7[0xc]
8000db56:	e0 18 ff 7c 	andl	r8,0xff7c
8000db5a:	ae 68       	st.h	r7[0xc],r8
8000db5c:	58 25       	cp.w	r5,2
8000db5e:	c0 31       	brne	8000db64 <setvbuf+0x90>
8000db60:	30 0c       	mov	r12,0
8000db62:	c1 38       	rjmp	8000db88 <setvbuf+0xb4>
8000db64:	58 06       	cp.w	r6,0
8000db66:	c2 11       	brne	8000dba8 <setvbuf+0xd4>
8000db68:	e0 63 04 00 	mov	r3,1024
8000db6c:	58 04       	cp.w	r4,0
8000db6e:	e6 04 17 00 	moveq	r4,r3
8000db72:	08 9c       	mov	r12,r4
8000db74:	e0 a0 1c d4 	rcall	8001151c <malloc>
8000db78:	18 96       	mov	r6,r12
8000db7a:	c1 41       	brne	8000dba2 <setvbuf+0xce>
8000db7c:	06 9c       	mov	r12,r3
8000db7e:	e0 a0 1c cf 	rcall	8001151c <malloc>
8000db82:	18 96       	mov	r6,r12
8000db84:	c0 e1       	brne	8000dba0 <setvbuf+0xcc>
8000db86:	3f fc       	mov	r12,-1
8000db88:	8e 68       	ld.sh	r8,r7[0xc]
8000db8a:	a1 b8       	sbr	r8,0x1
8000db8c:	ae 68       	st.h	r7[0xc],r8
8000db8e:	ee c8 ff b9 	sub	r8,r7,-71
8000db92:	8f 48       	st.w	r7[0x10],r8
8000db94:	8f 08       	st.w	r7[0x0],r8
8000db96:	30 08       	mov	r8,0
8000db98:	8f 28       	st.w	r7[0x8],r8
8000db9a:	30 18       	mov	r8,1
8000db9c:	8f 58       	st.w	r7[0x14],r8
8000db9e:	d8 32       	popm	r0-r7,pc
8000dba0:	06 94       	mov	r4,r3
8000dba2:	8e 68       	ld.sh	r8,r7[0xc]
8000dba4:	a7 b8       	sbr	r8,0x7
8000dba6:	ae 68       	st.h	r7[0xc],r8
8000dba8:	58 15       	cp.w	r5,1
8000dbaa:	c0 71       	brne	8000dbb8 <setvbuf+0xe4>
8000dbac:	8e 68       	ld.sh	r8,r7[0xc]
8000dbae:	a1 a8       	sbr	r8,0x0
8000dbb0:	ae 68       	st.h	r7[0xc],r8
8000dbb2:	e8 08 11 00 	rsub	r8,r4,0
8000dbb6:	8f 68       	st.w	r7[0x18],r8
8000dbb8:	e0 68 01 c8 	mov	r8,456
8000dbbc:	fe c9 cd b0 	sub	r9,pc,-12880
8000dbc0:	70 08       	ld.w	r8,r8[0x0]
8000dbc2:	8f 46       	st.w	r7[0x10],r6
8000dbc4:	91 a9       	st.w	r8[0x28],r9
8000dbc6:	8f 06       	st.w	r7[0x0],r6
8000dbc8:	8f 54       	st.w	r7[0x14],r4
8000dbca:	8e 68       	ld.sh	r8,r7[0xc]
8000dbcc:	10 9c       	mov	r12,r8
8000dbce:	e2 1c 00 08 	andl	r12,0x8,COH
8000dbd2:	c0 70       	breq	8000dbe0 <setvbuf+0x10c>
8000dbd4:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8000dbd8:	30 0c       	mov	r12,0
8000dbda:	f9 b4 01 00 	movne	r4,0
8000dbde:	8f 24       	st.w	r7[0x8],r4
8000dbe0:	d8 32       	popm	r0-r7,pc
8000dbe2:	d7 03       	nop

8000dbe4 <sprintf>:
8000dbe4:	d4 01       	pushm	lr
8000dbe6:	21 7d       	sub	sp,92
8000dbe8:	e0 68 ff ff 	mov	r8,65535
8000dbec:	ea 18 7f ff 	orh	r8,0x7fff
8000dbf0:	50 58       	stdsp	sp[0x14],r8
8000dbf2:	50 28       	stdsp	sp[0x8],r8
8000dbf4:	e0 68 02 08 	mov	r8,520
8000dbf8:	ba 68       	st.h	sp[0xc],r8
8000dbfa:	3f f8       	mov	r8,-1
8000dbfc:	ba 78       	st.h	sp[0xe],r8
8000dbfe:	e0 68 01 c8 	mov	r8,456
8000dc02:	50 4c       	stdsp	sp[0x10],r12
8000dc04:	16 9a       	mov	r10,r11
8000dc06:	50 0c       	stdsp	sp[0x0],r12
8000dc08:	fa c9 ff a0 	sub	r9,sp,-96
8000dc0c:	70 0c       	ld.w	r12,r8[0x0]
8000dc0e:	1a 9b       	mov	r11,sp
8000dc10:	e0 a0 02 00 	rcall	8000e010 <_vfprintf_r>
8000dc14:	30 09       	mov	r9,0
8000dc16:	40 08       	lddsp	r8,sp[0x0]
8000dc18:	b0 89       	st.b	r8[0x0],r9
8000dc1a:	2e 9d       	sub	sp,-92
8000dc1c:	d8 02       	popm	pc
8000dc1e:	d7 03       	nop

8000dc20 <strcmp>:
8000dc20:	f9 eb 10 0a 	or	r10,r12,r11
8000dc24:	e2 1a 00 03 	andl	r10,0x3,COH
8000dc28:	c3 41       	brne	8000dc90 <strcmp+0x70>
8000dc2a:	78 0a       	ld.w	r10,r12[0x0]
8000dc2c:	76 09       	ld.w	r9,r11[0x0]
8000dc2e:	5c ea       	tnbz	r10
8000dc30:	c1 70       	breq	8000dc5e <strcmp+0x3e>
8000dc32:	12 3a       	cp.w	r10,r9
8000dc34:	c1 51       	brne	8000dc5e <strcmp+0x3e>
8000dc36:	78 1a       	ld.w	r10,r12[0x4]
8000dc38:	76 19       	ld.w	r9,r11[0x4]
8000dc3a:	5c ea       	tnbz	r10
8000dc3c:	c1 10       	breq	8000dc5e <strcmp+0x3e>
8000dc3e:	12 3a       	cp.w	r10,r9
8000dc40:	c0 f1       	brne	8000dc5e <strcmp+0x3e>
8000dc42:	78 2a       	ld.w	r10,r12[0x8]
8000dc44:	76 29       	ld.w	r9,r11[0x8]
8000dc46:	5c ea       	tnbz	r10
8000dc48:	c0 b0       	breq	8000dc5e <strcmp+0x3e>
8000dc4a:	12 3a       	cp.w	r10,r9
8000dc4c:	c0 91       	brne	8000dc5e <strcmp+0x3e>
8000dc4e:	78 3a       	ld.w	r10,r12[0xc]
8000dc50:	76 39       	ld.w	r9,r11[0xc]
8000dc52:	5c ea       	tnbz	r10
8000dc54:	c0 50       	breq	8000dc5e <strcmp+0x3e>
8000dc56:	2f 0c       	sub	r12,-16
8000dc58:	2f 0b       	sub	r11,-16
8000dc5a:	12 3a       	cp.w	r10,r9
8000dc5c:	ce 70       	breq	8000dc2a <strcmp+0xa>
8000dc5e:	f9 da c3 08 	bfextu	r12,r10,0x18,0x8
8000dc62:	f7 d9 c3 08 	bfextu	r11,r9,0x18,0x8
8000dc66:	5e 0c       	reteq	r12
8000dc68:	16 1c       	sub	r12,r11
8000dc6a:	5e 1c       	retne	r12
8000dc6c:	f9 da c2 08 	bfextu	r12,r10,0x10,0x8
8000dc70:	f7 d9 c2 08 	bfextu	r11,r9,0x10,0x8
8000dc74:	5e 0c       	reteq	r12
8000dc76:	16 1c       	sub	r12,r11
8000dc78:	5e 1c       	retne	r12
8000dc7a:	f9 da c1 08 	bfextu	r12,r10,0x8,0x8
8000dc7e:	f7 d9 c1 08 	bfextu	r11,r9,0x8,0x8
8000dc82:	5e 0c       	reteq	r12
8000dc84:	16 1c       	sub	r12,r11
8000dc86:	5e 1c       	retne	r12
8000dc88:	5c 5a       	castu.b	r10
8000dc8a:	5c 59       	castu.b	r9
8000dc8c:	12 1a       	sub	r10,r9
8000dc8e:	5e fa       	retal	r10
8000dc90:	17 8a       	ld.ub	r10,r11[0x0]
8000dc92:	19 89       	ld.ub	r9,r12[0x0]
8000dc94:	58 0a       	cp.w	r10,0
8000dc96:	5e 09       	reteq	r9
8000dc98:	14 19       	sub	r9,r10
8000dc9a:	5e 19       	retne	r9
8000dc9c:	17 9a       	ld.ub	r10,r11[0x1]
8000dc9e:	19 99       	ld.ub	r9,r12[0x1]
8000dca0:	58 0a       	cp.w	r10,0
8000dca2:	5e 09       	reteq	r9
8000dca4:	14 19       	sub	r9,r10
8000dca6:	5e 19       	retne	r9
8000dca8:	17 aa       	ld.ub	r10,r11[0x2]
8000dcaa:	19 a9       	ld.ub	r9,r12[0x2]
8000dcac:	58 0a       	cp.w	r10,0
8000dcae:	5e 09       	reteq	r9
8000dcb0:	14 19       	sub	r9,r10
8000dcb2:	5e 19       	retne	r9
8000dcb4:	17 ba       	ld.ub	r10,r11[0x3]
8000dcb6:	19 b9       	ld.ub	r9,r12[0x3]
8000dcb8:	58 0a       	cp.w	r10,0
8000dcba:	5e 09       	reteq	r9
8000dcbc:	14 19       	sub	r9,r10
8000dcbe:	5e 19       	retne	r9
8000dcc0:	2f cb       	sub	r11,-4
8000dcc2:	2f cc       	sub	r12,-4
8000dcc4:	ce 6b       	rjmp	8000dc90 <strcmp+0x70>
8000dcc6:	d7 03       	nop

8000dcc8 <strlen>:
8000dcc8:	30 09       	mov	r9,0
8000dcca:	18 98       	mov	r8,r12
8000dccc:	c0 28       	rjmp	8000dcd0 <strlen+0x8>
8000dcce:	2f f8       	sub	r8,-1
8000dcd0:	11 8a       	ld.ub	r10,r8[0x0]
8000dcd2:	f2 0a 18 00 	cp.b	r10,r9
8000dcd6:	cf c1       	brne	8000dcce <strlen+0x6>
8000dcd8:	f0 0c 01 0c 	sub	r12,r8,r12
8000dcdc:	5e fc       	retal	r12
8000dcde:	d7 03       	nop

8000dce0 <get_arg>:
8000dce0:	d4 31       	pushm	r0-r7,lr
8000dce2:	20 8d       	sub	sp,32
8000dce4:	fa c4 ff bc 	sub	r4,sp,-68
8000dce8:	50 4b       	stdsp	sp[0x10],r11
8000dcea:	68 2e       	ld.w	lr,r4[0x8]
8000dcec:	50 58       	stdsp	sp[0x14],r8
8000dcee:	12 96       	mov	r6,r9
8000dcf0:	7c 0b       	ld.w	r11,lr[0x0]
8000dcf2:	70 05       	ld.w	r5,r8[0x0]
8000dcf4:	50 6e       	stdsp	sp[0x18],lr
8000dcf6:	58 0b       	cp.w	r11,0
8000dcf8:	f4 0b 17 00 	moveq	r11,r10
8000dcfc:	68 03       	ld.w	r3,r4[0x0]
8000dcfe:	68 11       	ld.w	r1,r4[0x4]
8000dd00:	40 49       	lddsp	r9,sp[0x10]
8000dd02:	30 08       	mov	r8,0
8000dd04:	c2 89       	rjmp	8000df54 <get_arg+0x274>
8000dd06:	2f fb       	sub	r11,-1
8000dd08:	32 5c       	mov	r12,37
8000dd0a:	17 8a       	ld.ub	r10,r11[0x0]
8000dd0c:	f8 0a 18 00 	cp.b	r10,r12
8000dd10:	5f 1e       	srne	lr
8000dd12:	f0 0a 18 00 	cp.b	r10,r8
8000dd16:	5f 1c       	srne	r12
8000dd18:	fd ec 00 0c 	and	r12,lr,r12
8000dd1c:	f0 0c 18 00 	cp.b	r12,r8
8000dd20:	cf 31       	brne	8000dd06 <get_arg+0x26>
8000dd22:	58 0a       	cp.w	r10,0
8000dd24:	e0 80 01 25 	breq	8000df6e <get_arg+0x28e>
8000dd28:	30 0c       	mov	r12,0
8000dd2a:	3f fa       	mov	r10,-1
8000dd2c:	18 90       	mov	r0,r12
8000dd2e:	50 3a       	stdsp	sp[0xc],r10
8000dd30:	18 94       	mov	r4,r12
8000dd32:	18 92       	mov	r2,r12
8000dd34:	f8 0c 00 3c 	add	r12,r12,r12<<0x3
8000dd38:	16 97       	mov	r7,r11
8000dd3a:	50 7c       	stdsp	sp[0x1c],r12
8000dd3c:	fe cc a2 c8 	sub	r12,pc,-23864
8000dd40:	0f 3a       	ld.ub	r10,r7++
8000dd42:	f8 0a 07 0e 	ld.ub	lr,r12[r10]
8000dd46:	40 7c       	lddsp	r12,sp[0x1c]
8000dd48:	1c 0c       	add	r12,lr
8000dd4a:	fe ce a3 9e 	sub	lr,pc,-23650
8000dd4e:	fc 0c 07 0e 	ld.ub	lr,lr[r12]
8000dd52:	20 1e       	sub	lr,1
8000dd54:	50 0e       	stdsp	sp[0x0],lr
8000dd56:	fe ce a4 16 	sub	lr,pc,-23530
8000dd5a:	fc 0c 07 0c 	ld.ub	r12,lr[r12]
8000dd5e:	50 7c       	stdsp	sp[0x1c],r12
8000dd60:	40 0c       	lddsp	r12,sp[0x0]
8000dd62:	58 7c       	cp.w	r12,7
8000dd64:	e0 8b 00 f1 	brhi	8000df46 <get_arg+0x266>
8000dd68:	fe ce a5 c8 	sub	lr,pc,-23096
8000dd6c:	fc 0c 03 2f 	ld.w	pc,lr[r12<<0x2]
8000dd70:	36 8b       	mov	r11,104
8000dd72:	f6 0a 18 00 	cp.b	r10,r11
8000dd76:	e0 80 00 e8 	breq	8000df46 <get_arg+0x266>
8000dd7a:	37 1b       	mov	r11,113
8000dd7c:	f6 0a 18 00 	cp.b	r10,r11
8000dd80:	c0 70       	breq	8000dd8e <get_arg+0xae>
8000dd82:	34 cb       	mov	r11,76
8000dd84:	f6 0a 18 00 	cp.b	r10,r11
8000dd88:	c0 51       	brne	8000dd92 <get_arg+0xb2>
8000dd8a:	a3 b4       	sbr	r4,0x3
8000dd8c:	cd d8       	rjmp	8000df46 <get_arg+0x266>
8000dd8e:	a5 b4       	sbr	r4,0x5
8000dd90:	cd b8       	rjmp	8000df46 <get_arg+0x266>
8000dd92:	08 9a       	mov	r10,r4
8000dd94:	0e 9b       	mov	r11,r7
8000dd96:	a5 aa       	sbr	r10,0x4
8000dd98:	17 3c       	ld.ub	r12,r11++
8000dd9a:	a5 b4       	sbr	r4,0x5
8000dd9c:	36 ce       	mov	lr,108
8000dd9e:	fc 0c 18 00 	cp.b	r12,lr
8000dda2:	e0 80 00 d3 	breq	8000df48 <get_arg+0x268>
8000dda6:	14 94       	mov	r4,r10
8000dda8:	cc f8       	rjmp	8000df46 <get_arg+0x266>
8000ddaa:	eb d5 c0 05 	bfextu	r5,r5,0x0,0x5
8000ddae:	36 7c       	mov	r12,103
8000ddb0:	f8 0a 18 00 	cp.b	r10,r12
8000ddb4:	e0 8b 00 27 	brhi	8000de02 <get_arg+0x122>
8000ddb8:	36 5b       	mov	r11,101
8000ddba:	f6 0a 18 00 	cp.b	r10,r11
8000ddbe:	c4 82       	brcc	8000de4e <get_arg+0x16e>
8000ddc0:	34 fb       	mov	r11,79
8000ddc2:	f6 0a 18 00 	cp.b	r10,r11
8000ddc6:	c4 80       	breq	8000de56 <get_arg+0x176>
8000ddc8:	e0 8b 00 0c 	brhi	8000dde0 <get_arg+0x100>
8000ddcc:	34 5b       	mov	r11,69
8000ddce:	f6 0a 18 00 	cp.b	r10,r11
8000ddd2:	c3 e0       	breq	8000de4e <get_arg+0x16e>
8000ddd4:	34 7b       	mov	r11,71
8000ddd6:	f6 0a 18 00 	cp.b	r10,r11
8000ddda:	c3 a0       	breq	8000de4e <get_arg+0x16e>
8000dddc:	34 4b       	mov	r11,68
8000ddde:	c0 88       	rjmp	8000ddee <get_arg+0x10e>
8000dde0:	35 8b       	mov	r11,88
8000dde2:	f6 0a 18 00 	cp.b	r10,r11
8000dde6:	c2 c0       	breq	8000de3e <get_arg+0x15e>
8000dde8:	e0 8b 00 07 	brhi	8000ddf6 <get_arg+0x116>
8000ddec:	35 5b       	mov	r11,85
8000ddee:	f6 0a 18 00 	cp.b	r10,r11
8000ddf2:	c3 51       	brne	8000de5c <get_arg+0x17c>
8000ddf4:	c3 18       	rjmp	8000de56 <get_arg+0x176>
8000ddf6:	36 3b       	mov	r11,99
8000ddf8:	f6 0a 18 00 	cp.b	r10,r11
8000ddfc:	c2 f0       	breq	8000de5a <get_arg+0x17a>
8000ddfe:	36 4b       	mov	r11,100
8000de00:	c0 e8       	rjmp	8000de1c <get_arg+0x13c>
8000de02:	37 0b       	mov	r11,112
8000de04:	f6 0a 18 00 	cp.b	r10,r11
8000de08:	c2 50       	breq	8000de52 <get_arg+0x172>
8000de0a:	e0 8b 00 0d 	brhi	8000de24 <get_arg+0x144>
8000de0e:	36 eb       	mov	r11,110
8000de10:	f6 0a 18 00 	cp.b	r10,r11
8000de14:	c1 f0       	breq	8000de52 <get_arg+0x172>
8000de16:	e0 8b 00 14 	brhi	8000de3e <get_arg+0x15e>
8000de1a:	36 9b       	mov	r11,105
8000de1c:	f6 0a 18 00 	cp.b	r10,r11
8000de20:	c1 e1       	brne	8000de5c <get_arg+0x17c>
8000de22:	c0 e8       	rjmp	8000de3e <get_arg+0x15e>
8000de24:	37 5b       	mov	r11,117
8000de26:	f6 0a 18 00 	cp.b	r10,r11
8000de2a:	c0 a0       	breq	8000de3e <get_arg+0x15e>
8000de2c:	37 8b       	mov	r11,120
8000de2e:	f6 0a 18 00 	cp.b	r10,r11
8000de32:	c0 60       	breq	8000de3e <get_arg+0x15e>
8000de34:	37 3b       	mov	r11,115
8000de36:	f6 0a 18 00 	cp.b	r10,r11
8000de3a:	c1 11       	brne	8000de5c <get_arg+0x17c>
8000de3c:	c0 b8       	rjmp	8000de52 <get_arg+0x172>
8000de3e:	ed b4 00 04 	bld	r4,0x4
8000de42:	c0 a0       	breq	8000de56 <get_arg+0x176>
8000de44:	ed b4 00 05 	bld	r4,0x5
8000de48:	c0 91       	brne	8000de5a <get_arg+0x17a>
8000de4a:	30 20       	mov	r0,2
8000de4c:	c0 88       	rjmp	8000de5c <get_arg+0x17c>
8000de4e:	30 40       	mov	r0,4
8000de50:	c0 68       	rjmp	8000de5c <get_arg+0x17c>
8000de52:	30 30       	mov	r0,3
8000de54:	c0 48       	rjmp	8000de5c <get_arg+0x17c>
8000de56:	30 10       	mov	r0,1
8000de58:	c0 28       	rjmp	8000de5c <get_arg+0x17c>
8000de5a:	30 00       	mov	r0,0
8000de5c:	40 3b       	lddsp	r11,sp[0xc]
8000de5e:	5b fb       	cp.w	r11,-1
8000de60:	c0 40       	breq	8000de68 <get_arg+0x188>
8000de62:	e2 0b 09 20 	st.w	r1[r11<<0x2],r0
8000de66:	c7 08       	rjmp	8000df46 <get_arg+0x266>
8000de68:	58 60       	cp.w	r0,6
8000de6a:	e0 8b 00 6e 	brhi	8000df46 <get_arg+0x266>
8000de6e:	6c 0a       	ld.w	r10,r6[0x0]
8000de70:	ea cc ff ff 	sub	r12,r5,-1
8000de74:	fe ce a6 b4 	sub	lr,pc,-22860
8000de78:	fc 00 03 2f 	ld.w	pc,lr[r0<<0x2]
8000de7c:	f4 cb ff f8 	sub	r11,r10,-8
8000de80:	8d 0b       	st.w	r6[0x0],r11
8000de82:	f4 ea 00 00 	ld.d	r10,r10[0]
8000de86:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000de8a:	c0 f8       	rjmp	8000dea8 <get_arg+0x1c8>
8000de8c:	f4 cb ff fc 	sub	r11,r10,-4
8000de90:	8d 0b       	st.w	r6[0x0],r11
8000de92:	74 0a       	ld.w	r10,r10[0x0]
8000de94:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000de98:	c0 88       	rjmp	8000dea8 <get_arg+0x1c8>
8000de9a:	f4 cb ff f8 	sub	r11,r10,-8
8000de9e:	8d 0b       	st.w	r6[0x0],r11
8000dea0:	f4 ea 00 00 	ld.d	r10,r10[0]
8000dea4:	e6 05 08 3a 	st.d	r3[r5<<0x3],r10
8000dea8:	0e 9b       	mov	r11,r7
8000deaa:	18 95       	mov	r5,r12
8000deac:	c4 e8       	rjmp	8000df48 <get_arg+0x268>
8000deae:	62 0a       	ld.w	r10,r1[0x0]
8000deb0:	5b fa       	cp.w	r10,-1
8000deb2:	c0 b1       	brne	8000dec8 <get_arg+0x1e8>
8000deb4:	50 19       	stdsp	sp[0x4],r9
8000deb6:	50 28       	stdsp	sp[0x8],r8
8000deb8:	e0 6a 00 80 	mov	r10,128
8000debc:	30 0b       	mov	r11,0
8000debe:	02 9c       	mov	r12,r1
8000dec0:	fe b0 fd 9d 	rcall	8000d9fa <memset>
8000dec4:	40 28       	lddsp	r8,sp[0x8]
8000dec6:	40 19       	lddsp	r9,sp[0x4]
8000dec8:	e4 cc 00 01 	sub	r12,r2,1
8000decc:	0e 9b       	mov	r11,r7
8000dece:	50 3c       	stdsp	sp[0xc],r12
8000ded0:	f2 0c 0c 49 	max	r9,r9,r12
8000ded4:	c3 a8       	rjmp	8000df48 <get_arg+0x268>
8000ded6:	62 0a       	ld.w	r10,r1[0x0]
8000ded8:	5b fa       	cp.w	r10,-1
8000deda:	c0 b1       	brne	8000def0 <get_arg+0x210>
8000dedc:	50 19       	stdsp	sp[0x4],r9
8000dede:	50 28       	stdsp	sp[0x8],r8
8000dee0:	e0 6a 00 80 	mov	r10,128
8000dee4:	30 0b       	mov	r11,0
8000dee6:	02 9c       	mov	r12,r1
8000dee8:	fe b0 fd 89 	rcall	8000d9fa <memset>
8000deec:	40 28       	lddsp	r8,sp[0x8]
8000deee:	40 19       	lddsp	r9,sp[0x4]
8000def0:	20 12       	sub	r2,1
8000def2:	30 0a       	mov	r10,0
8000def4:	0e 9b       	mov	r11,r7
8000def6:	e2 02 09 2a 	st.w	r1[r2<<0x2],r10
8000defa:	f2 02 0c 49 	max	r9,r9,r2
8000defe:	c2 58       	rjmp	8000df48 <get_arg+0x268>
8000df00:	16 97       	mov	r7,r11
8000df02:	6c 0a       	ld.w	r10,r6[0x0]
8000df04:	f4 cb ff fc 	sub	r11,r10,-4
8000df08:	8d 0b       	st.w	r6[0x0],r11
8000df0a:	74 0a       	ld.w	r10,r10[0x0]
8000df0c:	0e 9b       	mov	r11,r7
8000df0e:	e6 05 09 3a 	st.w	r3[r5<<0x3],r10
8000df12:	2f f5       	sub	r5,-1
8000df14:	c1 a8       	rjmp	8000df48 <get_arg+0x268>
8000df16:	f4 c2 00 30 	sub	r2,r10,48
8000df1a:	c0 68       	rjmp	8000df26 <get_arg+0x246>
8000df1c:	e4 02 00 22 	add	r2,r2,r2<<0x2
8000df20:	2f f7       	sub	r7,-1
8000df22:	f4 02 00 12 	add	r2,r10,r2<<0x1
8000df26:	0f 8a       	ld.ub	r10,r7[0x0]
8000df28:	58 0a       	cp.w	r10,0
8000df2a:	c0 e0       	breq	8000df46 <get_arg+0x266>
8000df2c:	23 0a       	sub	r10,48
8000df2e:	58 9a       	cp.w	r10,9
8000df30:	fe 98 ff f6 	brls	8000df1c <get_arg+0x23c>
8000df34:	c0 98       	rjmp	8000df46 <get_arg+0x266>
8000df36:	2f f7       	sub	r7,-1
8000df38:	0f 8a       	ld.ub	r10,r7[0x0]
8000df3a:	58 0a       	cp.w	r10,0
8000df3c:	c0 50       	breq	8000df46 <get_arg+0x266>
8000df3e:	23 0a       	sub	r10,48
8000df40:	58 9a       	cp.w	r10,9
8000df42:	fe 98 ff fa 	brls	8000df36 <get_arg+0x256>
8000df46:	0e 9b       	mov	r11,r7
8000df48:	40 7c       	lddsp	r12,sp[0x1c]
8000df4a:	30 ba       	mov	r10,11
8000df4c:	f4 0c 18 00 	cp.b	r12,r10
8000df50:	fe 91 fe f2 	brne	8000dd34 <get_arg+0x54>
8000df54:	40 42       	lddsp	r2,sp[0x10]
8000df56:	17 8c       	ld.ub	r12,r11[0x0]
8000df58:	0a 32       	cp.w	r2,r5
8000df5a:	5f 4a       	srge	r10
8000df5c:	f0 0c 18 00 	cp.b	r12,r8
8000df60:	5f 1c       	srne	r12
8000df62:	f9 ea 00 0a 	and	r10,r12,r10
8000df66:	f0 0a 18 00 	cp.b	r10,r8
8000df6a:	fe 91 fe cf 	brne	8000dd08 <get_arg+0x28>
8000df6e:	30 08       	mov	r8,0
8000df70:	40 4e       	lddsp	lr,sp[0x10]
8000df72:	17 8a       	ld.ub	r10,r11[0x0]
8000df74:	e2 05 00 21 	add	r1,r1,r5<<0x2
8000df78:	f0 0a 18 00 	cp.b	r10,r8
8000df7c:	fc 09 17 10 	movne	r9,lr
8000df80:	e6 05 00 38 	add	r8,r3,r5<<0x3
8000df84:	06 9e       	mov	lr,r3
8000df86:	c2 a8       	rjmp	8000dfda <get_arg+0x2fa>
8000df88:	62 0a       	ld.w	r10,r1[0x0]
8000df8a:	58 3a       	cp.w	r10,3
8000df8c:	c1 e0       	breq	8000dfc8 <get_arg+0x2e8>
8000df8e:	e0 89 00 07 	brgt	8000df9c <get_arg+0x2bc>
8000df92:	58 1a       	cp.w	r10,1
8000df94:	c1 a0       	breq	8000dfc8 <get_arg+0x2e8>
8000df96:	58 2a       	cp.w	r10,2
8000df98:	c1 81       	brne	8000dfc8 <get_arg+0x2e8>
8000df9a:	c0 58       	rjmp	8000dfa4 <get_arg+0x2c4>
8000df9c:	58 5a       	cp.w	r10,5
8000df9e:	c0 c0       	breq	8000dfb6 <get_arg+0x2d6>
8000dfa0:	c0 b5       	brlt	8000dfb6 <get_arg+0x2d6>
8000dfa2:	c1 38       	rjmp	8000dfc8 <get_arg+0x2e8>
8000dfa4:	6c 0a       	ld.w	r10,r6[0x0]
8000dfa6:	f4 cc ff f8 	sub	r12,r10,-8
8000dfaa:	8d 0c       	st.w	r6[0x0],r12
8000dfac:	f4 e2 00 00 	ld.d	r2,r10[0]
8000dfb0:	f0 e3 00 00 	st.d	r8[0],r2
8000dfb4:	c1 08       	rjmp	8000dfd4 <get_arg+0x2f4>
8000dfb6:	6c 0a       	ld.w	r10,r6[0x0]
8000dfb8:	f4 cc ff f8 	sub	r12,r10,-8
8000dfbc:	8d 0c       	st.w	r6[0x0],r12
8000dfbe:	f4 e2 00 00 	ld.d	r2,r10[0]
8000dfc2:	f0 e3 00 00 	st.d	r8[0],r2
8000dfc6:	c0 78       	rjmp	8000dfd4 <get_arg+0x2f4>
8000dfc8:	6c 0a       	ld.w	r10,r6[0x0]
8000dfca:	f4 cc ff fc 	sub	r12,r10,-4
8000dfce:	8d 0c       	st.w	r6[0x0],r12
8000dfd0:	74 0a       	ld.w	r10,r10[0x0]
8000dfd2:	91 0a       	st.w	r8[0x0],r10
8000dfd4:	2f f5       	sub	r5,-1
8000dfd6:	2f 88       	sub	r8,-8
8000dfd8:	2f c1       	sub	r1,-4
8000dfda:	12 35       	cp.w	r5,r9
8000dfdc:	fe 9a ff d6 	brle	8000df88 <get_arg+0x2a8>
8000dfe0:	1c 93       	mov	r3,lr
8000dfe2:	40 52       	lddsp	r2,sp[0x14]
8000dfe4:	40 6e       	lddsp	lr,sp[0x18]
8000dfe6:	85 05       	st.w	r2[0x0],r5
8000dfe8:	9d 0b       	st.w	lr[0x0],r11
8000dfea:	40 4b       	lddsp	r11,sp[0x10]
8000dfec:	e6 0b 00 3c 	add	r12,r3,r11<<0x3
8000dff0:	2f 8d       	sub	sp,-32
8000dff2:	d8 32       	popm	r0-r7,pc

8000dff4 <__sprint_r>:
8000dff4:	d4 21       	pushm	r4-r7,lr
8000dff6:	14 97       	mov	r7,r10
8000dff8:	74 28       	ld.w	r8,r10[0x8]
8000dffa:	58 08       	cp.w	r8,0
8000dffc:	c0 41       	brne	8000e004 <__sprint_r+0x10>
8000dffe:	95 18       	st.w	r10[0x4],r8
8000e000:	10 9c       	mov	r12,r8
8000e002:	d8 22       	popm	r4-r7,pc
8000e004:	e0 a0 18 b4 	rcall	8001116c <__sfvwrite_r>
8000e008:	30 08       	mov	r8,0
8000e00a:	8f 18       	st.w	r7[0x4],r8
8000e00c:	8f 28       	st.w	r7[0x8],r8
8000e00e:	d8 22       	popm	r4-r7,pc

8000e010 <_vfprintf_r>:
8000e010:	d4 31       	pushm	r0-r7,lr
8000e012:	fa cd 06 bc 	sub	sp,sp,1724
8000e016:	51 09       	stdsp	sp[0x40],r9
8000e018:	16 91       	mov	r1,r11
8000e01a:	14 97       	mov	r7,r10
8000e01c:	18 95       	mov	r5,r12
8000e01e:	e0 a0 1a 1d 	rcall	80011458 <_localeconv_r>
8000e022:	78 0c       	ld.w	r12,r12[0x0]
8000e024:	50 cc       	stdsp	sp[0x30],r12
8000e026:	58 05       	cp.w	r5,0
8000e028:	c0 70       	breq	8000e036 <_vfprintf_r+0x26>
8000e02a:	6a 68       	ld.w	r8,r5[0x18]
8000e02c:	58 08       	cp.w	r8,0
8000e02e:	c0 41       	brne	8000e036 <_vfprintf_r+0x26>
8000e030:	0a 9c       	mov	r12,r5
8000e032:	e0 a0 17 3d 	rcall	80010eac <__sinit>
8000e036:	fe c8 a4 b2 	sub	r8,pc,-23374
8000e03a:	10 31       	cp.w	r1,r8
8000e03c:	c0 31       	brne	8000e042 <_vfprintf_r+0x32>
8000e03e:	6a 01       	ld.w	r1,r5[0x0]
8000e040:	c0 c8       	rjmp	8000e058 <_vfprintf_r+0x48>
8000e042:	fe c8 a4 9e 	sub	r8,pc,-23394
8000e046:	10 31       	cp.w	r1,r8
8000e048:	c0 31       	brne	8000e04e <_vfprintf_r+0x3e>
8000e04a:	6a 11       	ld.w	r1,r5[0x4]
8000e04c:	c0 68       	rjmp	8000e058 <_vfprintf_r+0x48>
8000e04e:	fe c8 a4 8a 	sub	r8,pc,-23414
8000e052:	10 31       	cp.w	r1,r8
8000e054:	eb f1 00 02 	ld.weq	r1,r5[0x8]
8000e058:	82 68       	ld.sh	r8,r1[0xc]
8000e05a:	ed b8 00 03 	bld	r8,0x3
8000e05e:	c0 41       	brne	8000e066 <_vfprintf_r+0x56>
8000e060:	62 48       	ld.w	r8,r1[0x10]
8000e062:	58 08       	cp.w	r8,0
8000e064:	c0 71       	brne	8000e072 <_vfprintf_r+0x62>
8000e066:	02 9b       	mov	r11,r1
8000e068:	0a 9c       	mov	r12,r5
8000e06a:	e0 a0 0f 5d 	rcall	8000ff24 <__swsetup_r>
8000e06e:	e0 81 0f 54 	brne	8000ff16 <_vfprintf_r+0x1f06>
8000e072:	82 68       	ld.sh	r8,r1[0xc]
8000e074:	10 99       	mov	r9,r8
8000e076:	e2 19 00 1a 	andl	r9,0x1a,COH
8000e07a:	58 a9       	cp.w	r9,10
8000e07c:	c3 c1       	brne	8000e0f4 <_vfprintf_r+0xe4>
8000e07e:	82 79       	ld.sh	r9,r1[0xe]
8000e080:	30 0a       	mov	r10,0
8000e082:	f4 09 19 00 	cp.h	r9,r10
8000e086:	c3 75       	brlt	8000e0f4 <_vfprintf_r+0xe4>
8000e088:	a1 d8       	cbr	r8,0x1
8000e08a:	fb 58 05 d0 	st.h	sp[1488],r8
8000e08e:	62 88       	ld.w	r8,r1[0x20]
8000e090:	fb 48 05 e4 	st.w	sp[1508],r8
8000e094:	62 a8       	ld.w	r8,r1[0x28]
8000e096:	fb 48 05 ec 	st.w	sp[1516],r8
8000e09a:	fa c8 ff bc 	sub	r8,sp,-68
8000e09e:	fb 48 05 d4 	st.w	sp[1492],r8
8000e0a2:	fb 48 05 c4 	st.w	sp[1476],r8
8000e0a6:	e0 68 04 00 	mov	r8,1024
8000e0aa:	fb 48 05 d8 	st.w	sp[1496],r8
8000e0ae:	fb 48 05 cc 	st.w	sp[1484],r8
8000e0b2:	30 08       	mov	r8,0
8000e0b4:	fb 59 05 d2 	st.h	sp[1490],r9
8000e0b8:	0e 9a       	mov	r10,r7
8000e0ba:	41 09       	lddsp	r9,sp[0x40]
8000e0bc:	fa c7 fa 3c 	sub	r7,sp,-1476
8000e0c0:	fb 48 05 dc 	st.w	sp[1500],r8
8000e0c4:	0a 9c       	mov	r12,r5
8000e0c6:	0e 9b       	mov	r11,r7
8000e0c8:	ca 4f       	rcall	8000e010 <_vfprintf_r>
8000e0ca:	50 bc       	stdsp	sp[0x2c],r12
8000e0cc:	c0 95       	brlt	8000e0de <_vfprintf_r+0xce>
8000e0ce:	0e 9b       	mov	r11,r7
8000e0d0:	0a 9c       	mov	r12,r5
8000e0d2:	e0 a0 16 15 	rcall	80010cfc <_fflush_r>
8000e0d6:	40 be       	lddsp	lr,sp[0x2c]
8000e0d8:	f9 be 01 ff 	movne	lr,-1
8000e0dc:	50 be       	stdsp	sp[0x2c],lr
8000e0de:	fb 08 05 d0 	ld.sh	r8,sp[1488]
8000e0e2:	ed b8 00 06 	bld	r8,0x6
8000e0e6:	e0 81 0f 1a 	brne	8000ff1a <_vfprintf_r+0x1f0a>
8000e0ea:	82 68       	ld.sh	r8,r1[0xc]
8000e0ec:	a7 a8       	sbr	r8,0x6
8000e0ee:	a2 68       	st.h	r1[0xc],r8
8000e0f0:	e0 8f 0f 15 	bral	8000ff1a <_vfprintf_r+0x1f0a>
8000e0f4:	30 08       	mov	r8,0
8000e0f6:	fb 48 06 b4 	st.w	sp[1716],r8
8000e0fa:	fb 48 06 90 	st.w	sp[1680],r8
8000e0fe:	fb 48 06 8c 	st.w	sp[1676],r8
8000e102:	fb 48 06 b0 	st.w	sp[1712],r8
8000e106:	30 08       	mov	r8,0
8000e108:	30 09       	mov	r9,0
8000e10a:	50 a7       	stdsp	sp[0x28],r7
8000e10c:	50 78       	stdsp	sp[0x1c],r8
8000e10e:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e112:	3f f8       	mov	r8,-1
8000e114:	50 59       	stdsp	sp[0x14],r9
8000e116:	fb 43 06 88 	st.w	sp[1672],r3
8000e11a:	fb 48 05 44 	st.w	sp[1348],r8
8000e11e:	12 9c       	mov	r12,r9
8000e120:	50 69       	stdsp	sp[0x18],r9
8000e122:	50 d9       	stdsp	sp[0x34],r9
8000e124:	50 e9       	stdsp	sp[0x38],r9
8000e126:	50 b9       	stdsp	sp[0x2c],r9
8000e128:	12 97       	mov	r7,r9
8000e12a:	0a 94       	mov	r4,r5
8000e12c:	40 a2       	lddsp	r2,sp[0x28]
8000e12e:	32 5a       	mov	r10,37
8000e130:	30 08       	mov	r8,0
8000e132:	c0 28       	rjmp	8000e136 <_vfprintf_r+0x126>
8000e134:	2f f2       	sub	r2,-1
8000e136:	05 89       	ld.ub	r9,r2[0x0]
8000e138:	f0 09 18 00 	cp.b	r9,r8
8000e13c:	5f 1b       	srne	r11
8000e13e:	f4 09 18 00 	cp.b	r9,r10
8000e142:	5f 19       	srne	r9
8000e144:	f3 eb 00 0b 	and	r11,r9,r11
8000e148:	f0 0b 18 00 	cp.b	r11,r8
8000e14c:	cf 41       	brne	8000e134 <_vfprintf_r+0x124>
8000e14e:	40 ab       	lddsp	r11,sp[0x28]
8000e150:	e4 0b 01 06 	sub	r6,r2,r11
8000e154:	c1 e0       	breq	8000e190 <_vfprintf_r+0x180>
8000e156:	fa f8 06 90 	ld.w	r8,sp[1680]
8000e15a:	0c 08       	add	r8,r6
8000e15c:	87 0b       	st.w	r3[0x0],r11
8000e15e:	fb 48 06 90 	st.w	sp[1680],r8
8000e162:	87 16       	st.w	r3[0x4],r6
8000e164:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000e168:	2f f8       	sub	r8,-1
8000e16a:	fb 48 06 8c 	st.w	sp[1676],r8
8000e16e:	58 78       	cp.w	r8,7
8000e170:	e0 89 00 04 	brgt	8000e178 <_vfprintf_r+0x168>
8000e174:	2f 83       	sub	r3,-8
8000e176:	c0 a8       	rjmp	8000e18a <_vfprintf_r+0x17a>
8000e178:	fa ca f9 78 	sub	r10,sp,-1672
8000e17c:	02 9b       	mov	r11,r1
8000e17e:	08 9c       	mov	r12,r4
8000e180:	c3 af       	rcall	8000dff4 <__sprint_r>
8000e182:	e0 81 0e c6 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000e186:	fa c3 f9 e0 	sub	r3,sp,-1568
8000e18a:	40 ba       	lddsp	r10,sp[0x2c]
8000e18c:	0c 0a       	add	r10,r6
8000e18e:	50 ba       	stdsp	sp[0x2c],r10
8000e190:	05 89       	ld.ub	r9,r2[0x0]
8000e192:	30 08       	mov	r8,0
8000e194:	f0 09 18 00 	cp.b	r9,r8
8000e198:	e0 80 0e aa 	breq	8000feec <_vfprintf_r+0x1edc>
8000e19c:	30 09       	mov	r9,0
8000e19e:	fb 68 06 bb 	st.b	sp[1723],r8
8000e1a2:	0e 96       	mov	r6,r7
8000e1a4:	e4 c8 ff ff 	sub	r8,r2,-1
8000e1a8:	3f fe       	mov	lr,-1
8000e1aa:	50 93       	stdsp	sp[0x24],r3
8000e1ac:	50 41       	stdsp	sp[0x10],r1
8000e1ae:	0e 93       	mov	r3,r7
8000e1b0:	04 91       	mov	r1,r2
8000e1b2:	50 89       	stdsp	sp[0x20],r9
8000e1b4:	50 a8       	stdsp	sp[0x28],r8
8000e1b6:	50 2e       	stdsp	sp[0x8],lr
8000e1b8:	50 39       	stdsp	sp[0xc],r9
8000e1ba:	12 95       	mov	r5,r9
8000e1bc:	12 90       	mov	r0,r9
8000e1be:	10 97       	mov	r7,r8
8000e1c0:	08 92       	mov	r2,r4
8000e1c2:	c0 78       	rjmp	8000e1d0 <_vfprintf_r+0x1c0>
8000e1c4:	3f fc       	mov	r12,-1
8000e1c6:	08 97       	mov	r7,r4
8000e1c8:	50 2c       	stdsp	sp[0x8],r12
8000e1ca:	c0 38       	rjmp	8000e1d0 <_vfprintf_r+0x1c0>
8000e1cc:	30 0b       	mov	r11,0
8000e1ce:	50 3b       	stdsp	sp[0xc],r11
8000e1d0:	0f 38       	ld.ub	r8,r7++
8000e1d2:	c0 28       	rjmp	8000e1d6 <_vfprintf_r+0x1c6>
8000e1d4:	12 90       	mov	r0,r9
8000e1d6:	f0 c9 00 20 	sub	r9,r8,32
8000e1da:	e0 49 00 58 	cp.w	r9,88
8000e1de:	e0 8b 0a 30 	brhi	8000f63e <_vfprintf_r+0x162e>
8000e1e2:	fe ca aa 06 	sub	r10,pc,-22010
8000e1e6:	f4 09 03 2f 	ld.w	pc,r10[r9<<0x2]
8000e1ea:	50 a7       	stdsp	sp[0x28],r7
8000e1ec:	50 80       	stdsp	sp[0x20],r0
8000e1ee:	0c 97       	mov	r7,r6
8000e1f0:	04 94       	mov	r4,r2
8000e1f2:	06 96       	mov	r6,r3
8000e1f4:	02 92       	mov	r2,r1
8000e1f6:	fe c9 a7 de 	sub	r9,pc,-22562
8000e1fa:	40 93       	lddsp	r3,sp[0x24]
8000e1fc:	10 90       	mov	r0,r8
8000e1fe:	40 41       	lddsp	r1,sp[0x10]
8000e200:	50 d9       	stdsp	sp[0x34],r9
8000e202:	e0 8f 08 8e 	bral	8000f31e <_vfprintf_r+0x130e>
8000e206:	30 08       	mov	r8,0
8000e208:	fb 39 06 bb 	ld.ub	r9,sp[1723]
8000e20c:	f0 09 18 00 	cp.b	r9,r8
8000e210:	ce 01       	brne	8000e1d0 <_vfprintf_r+0x1c0>
8000e212:	32 08       	mov	r8,32
8000e214:	c6 e8       	rjmp	8000e2f0 <_vfprintf_r+0x2e0>
8000e216:	a1 a5       	sbr	r5,0x0
8000e218:	cd cb       	rjmp	8000e1d0 <_vfprintf_r+0x1c0>
8000e21a:	0f 89       	ld.ub	r9,r7[0x0]
8000e21c:	f2 c8 00 30 	sub	r8,r9,48
8000e220:	58 98       	cp.w	r8,9
8000e222:	e0 8b 00 1d 	brhi	8000e25c <_vfprintf_r+0x24c>
8000e226:	ee c8 ff ff 	sub	r8,r7,-1
8000e22a:	30 0b       	mov	r11,0
8000e22c:	23 09       	sub	r9,48
8000e22e:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000e232:	f2 0b 00 1b 	add	r11,r9,r11<<0x1
8000e236:	11 39       	ld.ub	r9,r8++
8000e238:	f2 ca 00 30 	sub	r10,r9,48
8000e23c:	58 9a       	cp.w	r10,9
8000e23e:	fe 98 ff f7 	brls	8000e22c <_vfprintf_r+0x21c>
8000e242:	e0 49 00 24 	cp.w	r9,36
8000e246:	cc 31       	brne	8000e1cc <_vfprintf_r+0x1bc>
8000e248:	e0 4b 00 20 	cp.w	r11,32
8000e24c:	e0 89 0e 60 	brgt	8000ff0c <_vfprintf_r+0x1efc>
8000e250:	20 1b       	sub	r11,1
8000e252:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000e256:	12 3b       	cp.w	r11,r9
8000e258:	c0 95       	brlt	8000e26a <_vfprintf_r+0x25a>
8000e25a:	c1 08       	rjmp	8000e27a <_vfprintf_r+0x26a>
8000e25c:	fa f9 06 b4 	ld.w	r9,sp[1716]
8000e260:	ec ca ff ff 	sub	r10,r6,-1
8000e264:	12 36       	cp.w	r6,r9
8000e266:	c1 f5       	brlt	8000e2a4 <_vfprintf_r+0x294>
8000e268:	c2 68       	rjmp	8000e2b4 <_vfprintf_r+0x2a4>
8000e26a:	fa ce f9 44 	sub	lr,sp,-1724
8000e26e:	10 97       	mov	r7,r8
8000e270:	fc 0b 00 3b 	add	r11,lr,r11<<0x3
8000e274:	f6 f0 fd 88 	ld.w	r0,r11[-632]
8000e278:	c3 58       	rjmp	8000e2e2 <_vfprintf_r+0x2d2>
8000e27a:	10 97       	mov	r7,r8
8000e27c:	fa c8 f9 50 	sub	r8,sp,-1712
8000e280:	1a d8       	st.w	--sp,r8
8000e282:	fa c8 fa b8 	sub	r8,sp,-1352
8000e286:	1a d8       	st.w	--sp,r8
8000e288:	fa c8 fb b4 	sub	r8,sp,-1100
8000e28c:	02 9a       	mov	r10,r1
8000e28e:	1a d8       	st.w	--sp,r8
8000e290:	04 9c       	mov	r12,r2
8000e292:	fa c8 f9 40 	sub	r8,sp,-1728
8000e296:	fa c9 ff b4 	sub	r9,sp,-76
8000e29a:	fe b0 fd 23 	rcall	8000dce0 <get_arg>
8000e29e:	2f dd       	sub	sp,-12
8000e2a0:	78 00       	ld.w	r0,r12[0x0]
8000e2a2:	c2 08       	rjmp	8000e2e2 <_vfprintf_r+0x2d2>
8000e2a4:	fa cc f9 44 	sub	r12,sp,-1724
8000e2a8:	14 96       	mov	r6,r10
8000e2aa:	f8 03 00 38 	add	r8,r12,r3<<0x3
8000e2ae:	f0 f0 fd 88 	ld.w	r0,r8[-632]
8000e2b2:	c1 88       	rjmp	8000e2e2 <_vfprintf_r+0x2d2>
8000e2b4:	41 08       	lddsp	r8,sp[0x40]
8000e2b6:	59 f9       	cp.w	r9,31
8000e2b8:	e0 89 00 11 	brgt	8000e2da <_vfprintf_r+0x2ca>
8000e2bc:	f0 cb ff fc 	sub	r11,r8,-4
8000e2c0:	51 0b       	stdsp	sp[0x40],r11
8000e2c2:	70 00       	ld.w	r0,r8[0x0]
8000e2c4:	fa cb f9 44 	sub	r11,sp,-1724
8000e2c8:	f6 09 00 38 	add	r8,r11,r9<<0x3
8000e2cc:	f1 40 fd 88 	st.w	r8[-632],r0
8000e2d0:	2f f9       	sub	r9,-1
8000e2d2:	14 96       	mov	r6,r10
8000e2d4:	fb 49 06 b4 	st.w	sp[1716],r9
8000e2d8:	c0 58       	rjmp	8000e2e2 <_vfprintf_r+0x2d2>
8000e2da:	70 00       	ld.w	r0,r8[0x0]
8000e2dc:	14 96       	mov	r6,r10
8000e2de:	2f c8       	sub	r8,-4
8000e2e0:	51 08       	stdsp	sp[0x40],r8
8000e2e2:	58 00       	cp.w	r0,0
8000e2e4:	fe 94 ff 76 	brge	8000e1d0 <_vfprintf_r+0x1c0>
8000e2e8:	5c 30       	neg	r0
8000e2ea:	a3 a5       	sbr	r5,0x2
8000e2ec:	c7 2b       	rjmp	8000e1d0 <_vfprintf_r+0x1c0>
8000e2ee:	32 b8       	mov	r8,43
8000e2f0:	fb 68 06 bb 	st.b	sp[1723],r8
8000e2f4:	c6 eb       	rjmp	8000e1d0 <_vfprintf_r+0x1c0>
8000e2f6:	0f 38       	ld.ub	r8,r7++
8000e2f8:	e0 48 00 2a 	cp.w	r8,42
8000e2fc:	c0 30       	breq	8000e302 <_vfprintf_r+0x2f2>
8000e2fe:	30 09       	mov	r9,0
8000e300:	c7 98       	rjmp	8000e3f2 <_vfprintf_r+0x3e2>
8000e302:	0f 88       	ld.ub	r8,r7[0x0]
8000e304:	f0 c9 00 30 	sub	r9,r8,48
8000e308:	58 99       	cp.w	r9,9
8000e30a:	e0 8b 00 1f 	brhi	8000e348 <_vfprintf_r+0x338>
8000e30e:	ee c4 ff ff 	sub	r4,r7,-1
8000e312:	30 0b       	mov	r11,0
8000e314:	23 08       	sub	r8,48
8000e316:	f6 0b 00 2b 	add	r11,r11,r11<<0x2
8000e31a:	f0 0b 00 1b 	add	r11,r8,r11<<0x1
8000e31e:	09 38       	ld.ub	r8,r4++
8000e320:	f0 c9 00 30 	sub	r9,r8,48
8000e324:	58 99       	cp.w	r9,9
8000e326:	fe 98 ff f7 	brls	8000e314 <_vfprintf_r+0x304>
8000e32a:	e0 48 00 24 	cp.w	r8,36
8000e32e:	fe 91 ff 4f 	brne	8000e1cc <_vfprintf_r+0x1bc>
8000e332:	e0 4b 00 20 	cp.w	r11,32
8000e336:	e0 89 0d eb 	brgt	8000ff0c <_vfprintf_r+0x1efc>
8000e33a:	20 1b       	sub	r11,1
8000e33c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e340:	10 3b       	cp.w	r11,r8
8000e342:	c0 a5       	brlt	8000e356 <_vfprintf_r+0x346>
8000e344:	c1 18       	rjmp	8000e366 <_vfprintf_r+0x356>
8000e346:	d7 03       	nop
8000e348:	fa fa 06 b4 	ld.w	r10,sp[1716]
8000e34c:	ec c9 ff ff 	sub	r9,r6,-1
8000e350:	14 36       	cp.w	r6,r10
8000e352:	c1 f5       	brlt	8000e390 <_vfprintf_r+0x380>
8000e354:	c2 88       	rjmp	8000e3a4 <_vfprintf_r+0x394>
8000e356:	fa ca f9 44 	sub	r10,sp,-1724
8000e35a:	f4 0b 00 3b 	add	r11,r10,r11<<0x3
8000e35e:	f6 fb fd 88 	ld.w	r11,r11[-632]
8000e362:	50 2b       	stdsp	sp[0x8],r11
8000e364:	c3 c8       	rjmp	8000e3dc <_vfprintf_r+0x3cc>
8000e366:	fa c8 f9 50 	sub	r8,sp,-1712
8000e36a:	1a d8       	st.w	--sp,r8
8000e36c:	fa c8 fa b8 	sub	r8,sp,-1352
8000e370:	1a d8       	st.w	--sp,r8
8000e372:	fa c8 fb b4 	sub	r8,sp,-1100
8000e376:	02 9a       	mov	r10,r1
8000e378:	1a d8       	st.w	--sp,r8
8000e37a:	04 9c       	mov	r12,r2
8000e37c:	fa c8 f9 40 	sub	r8,sp,-1728
8000e380:	fa c9 ff b4 	sub	r9,sp,-76
8000e384:	fe b0 fc ae 	rcall	8000dce0 <get_arg>
8000e388:	2f dd       	sub	sp,-12
8000e38a:	78 0c       	ld.w	r12,r12[0x0]
8000e38c:	50 2c       	stdsp	sp[0x8],r12
8000e38e:	c2 78       	rjmp	8000e3dc <_vfprintf_r+0x3cc>
8000e390:	12 96       	mov	r6,r9
8000e392:	0e 94       	mov	r4,r7
8000e394:	fa c9 f9 44 	sub	r9,sp,-1724
8000e398:	f2 03 00 38 	add	r8,r9,r3<<0x3
8000e39c:	f0 f8 fd 88 	ld.w	r8,r8[-632]
8000e3a0:	50 28       	stdsp	sp[0x8],r8
8000e3a2:	c1 d8       	rjmp	8000e3dc <_vfprintf_r+0x3cc>
8000e3a4:	41 08       	lddsp	r8,sp[0x40]
8000e3a6:	59 fa       	cp.w	r10,31
8000e3a8:	e0 89 00 14 	brgt	8000e3d0 <_vfprintf_r+0x3c0>
8000e3ac:	f0 cb ff fc 	sub	r11,r8,-4
8000e3b0:	70 08       	ld.w	r8,r8[0x0]
8000e3b2:	51 0b       	stdsp	sp[0x40],r11
8000e3b4:	50 28       	stdsp	sp[0x8],r8
8000e3b6:	fa c6 f9 44 	sub	r6,sp,-1724
8000e3ba:	40 2e       	lddsp	lr,sp[0x8]
8000e3bc:	ec 0a 00 38 	add	r8,r6,r10<<0x3
8000e3c0:	f1 4e fd 88 	st.w	r8[-632],lr
8000e3c4:	2f fa       	sub	r10,-1
8000e3c6:	0e 94       	mov	r4,r7
8000e3c8:	fb 4a 06 b4 	st.w	sp[1716],r10
8000e3cc:	12 96       	mov	r6,r9
8000e3ce:	c0 78       	rjmp	8000e3dc <_vfprintf_r+0x3cc>
8000e3d0:	70 0c       	ld.w	r12,r8[0x0]
8000e3d2:	0e 94       	mov	r4,r7
8000e3d4:	2f c8       	sub	r8,-4
8000e3d6:	50 2c       	stdsp	sp[0x8],r12
8000e3d8:	12 96       	mov	r6,r9
8000e3da:	51 08       	stdsp	sp[0x40],r8
8000e3dc:	40 2b       	lddsp	r11,sp[0x8]
8000e3de:	58 0b       	cp.w	r11,0
8000e3e0:	fe 95 fe f2 	brlt	8000e1c4 <_vfprintf_r+0x1b4>
8000e3e4:	08 97       	mov	r7,r4
8000e3e6:	cf 5a       	rjmp	8000e1d0 <_vfprintf_r+0x1c0>
8000e3e8:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000e3ec:	0f 38       	ld.ub	r8,r7++
8000e3ee:	f4 09 00 19 	add	r9,r10,r9<<0x1
8000e3f2:	f0 ca 00 30 	sub	r10,r8,48
8000e3f6:	58 9a       	cp.w	r10,9
8000e3f8:	fe 98 ff f8 	brls	8000e3e8 <_vfprintf_r+0x3d8>
8000e3fc:	3f fa       	mov	r10,-1
8000e3fe:	f2 0a 0c 49 	max	r9,r9,r10
8000e402:	50 29       	stdsp	sp[0x8],r9
8000e404:	ce 9a       	rjmp	8000e1d6 <_vfprintf_r+0x1c6>
8000e406:	a7 b5       	sbr	r5,0x7
8000e408:	ce 4a       	rjmp	8000e1d0 <_vfprintf_r+0x1c0>
8000e40a:	30 09       	mov	r9,0
8000e40c:	23 08       	sub	r8,48
8000e40e:	f2 09 00 29 	add	r9,r9,r9<<0x2
8000e412:	f0 09 00 19 	add	r9,r8,r9<<0x1
8000e416:	0f 38       	ld.ub	r8,r7++
8000e418:	f0 ca 00 30 	sub	r10,r8,48
8000e41c:	58 9a       	cp.w	r10,9
8000e41e:	fe 98 ff f7 	brls	8000e40c <_vfprintf_r+0x3fc>
8000e422:	e0 48 00 24 	cp.w	r8,36
8000e426:	fe 91 fe d7 	brne	8000e1d4 <_vfprintf_r+0x1c4>
8000e42a:	e0 49 00 20 	cp.w	r9,32
8000e42e:	e0 89 0d 6f 	brgt	8000ff0c <_vfprintf_r+0x1efc>
8000e432:	f2 c3 00 01 	sub	r3,r9,1
8000e436:	30 19       	mov	r9,1
8000e438:	50 39       	stdsp	sp[0xc],r9
8000e43a:	cc ba       	rjmp	8000e1d0 <_vfprintf_r+0x1c0>
8000e43c:	a3 b5       	sbr	r5,0x3
8000e43e:	cc 9a       	rjmp	8000e1d0 <_vfprintf_r+0x1c0>
8000e440:	a7 a5       	sbr	r5,0x6
8000e442:	cc 7a       	rjmp	8000e1d0 <_vfprintf_r+0x1c0>
8000e444:	0a 98       	mov	r8,r5
8000e446:	a5 b5       	sbr	r5,0x5
8000e448:	a5 a8       	sbr	r8,0x4
8000e44a:	0f 89       	ld.ub	r9,r7[0x0]
8000e44c:	36 ce       	mov	lr,108
8000e44e:	fc 09 18 00 	cp.b	r9,lr
8000e452:	f7 b7 00 ff 	subeq	r7,-1
8000e456:	f0 05 17 10 	movne	r5,r8
8000e45a:	cb ba       	rjmp	8000e1d0 <_vfprintf_r+0x1c0>
8000e45c:	a5 b5       	sbr	r5,0x5
8000e45e:	cb 9a       	rjmp	8000e1d0 <_vfprintf_r+0x1c0>
8000e460:	50 a7       	stdsp	sp[0x28],r7
8000e462:	50 80       	stdsp	sp[0x20],r0
8000e464:	0c 97       	mov	r7,r6
8000e466:	10 90       	mov	r0,r8
8000e468:	06 96       	mov	r6,r3
8000e46a:	04 94       	mov	r4,r2
8000e46c:	40 93       	lddsp	r3,sp[0x24]
8000e46e:	02 92       	mov	r2,r1
8000e470:	0e 99       	mov	r9,r7
8000e472:	40 41       	lddsp	r1,sp[0x10]
8000e474:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e478:	40 3c       	lddsp	r12,sp[0xc]
8000e47a:	58 0c       	cp.w	r12,0
8000e47c:	c1 d0       	breq	8000e4b6 <_vfprintf_r+0x4a6>
8000e47e:	10 36       	cp.w	r6,r8
8000e480:	c0 64       	brge	8000e48c <_vfprintf_r+0x47c>
8000e482:	fa cb f9 44 	sub	r11,sp,-1724
8000e486:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e48a:	c1 d8       	rjmp	8000e4c4 <_vfprintf_r+0x4b4>
8000e48c:	fa c8 f9 50 	sub	r8,sp,-1712
8000e490:	1a d8       	st.w	--sp,r8
8000e492:	fa c8 fa b8 	sub	r8,sp,-1352
8000e496:	1a d8       	st.w	--sp,r8
8000e498:	fa c8 fb b4 	sub	r8,sp,-1100
8000e49c:	1a d8       	st.w	--sp,r8
8000e49e:	fa c8 f9 40 	sub	r8,sp,-1728
8000e4a2:	fa c9 ff b4 	sub	r9,sp,-76
8000e4a6:	04 9a       	mov	r10,r2
8000e4a8:	0c 9b       	mov	r11,r6
8000e4aa:	08 9c       	mov	r12,r4
8000e4ac:	fe b0 fc 1a 	rcall	8000dce0 <get_arg>
8000e4b0:	2f dd       	sub	sp,-12
8000e4b2:	19 b8       	ld.ub	r8,r12[0x3]
8000e4b4:	c2 28       	rjmp	8000e4f8 <_vfprintf_r+0x4e8>
8000e4b6:	2f f7       	sub	r7,-1
8000e4b8:	10 39       	cp.w	r9,r8
8000e4ba:	c0 84       	brge	8000e4ca <_vfprintf_r+0x4ba>
8000e4bc:	fa ca f9 44 	sub	r10,sp,-1724
8000e4c0:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000e4c4:	ed 38 fd 8b 	ld.ub	r8,r6[-629]
8000e4c8:	c1 88       	rjmp	8000e4f8 <_vfprintf_r+0x4e8>
8000e4ca:	41 09       	lddsp	r9,sp[0x40]
8000e4cc:	59 f8       	cp.w	r8,31
8000e4ce:	e0 89 00 12 	brgt	8000e4f2 <_vfprintf_r+0x4e2>
8000e4d2:	f2 ca ff fc 	sub	r10,r9,-4
8000e4d6:	51 0a       	stdsp	sp[0x40],r10
8000e4d8:	72 09       	ld.w	r9,r9[0x0]
8000e4da:	fa c6 f9 44 	sub	r6,sp,-1724
8000e4de:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000e4e2:	2f f8       	sub	r8,-1
8000e4e4:	f5 49 fd 88 	st.w	r10[-632],r9
8000e4e8:	fb 48 06 b4 	st.w	sp[1716],r8
8000e4ec:	f1 d9 c0 08 	bfextu	r8,r9,0x0,0x8
8000e4f0:	c0 48       	rjmp	8000e4f8 <_vfprintf_r+0x4e8>
8000e4f2:	13 b8       	ld.ub	r8,r9[0x3]
8000e4f4:	2f c9       	sub	r9,-4
8000e4f6:	51 09       	stdsp	sp[0x40],r9
8000e4f8:	fb 68 06 60 	st.b	sp[1632],r8
8000e4fc:	30 0e       	mov	lr,0
8000e4fe:	30 08       	mov	r8,0
8000e500:	30 12       	mov	r2,1
8000e502:	fb 68 06 bb 	st.b	sp[1723],r8
8000e506:	50 2e       	stdsp	sp[0x8],lr
8000e508:	e0 8f 08 ad 	bral	8000f662 <_vfprintf_r+0x1652>
8000e50c:	50 a7       	stdsp	sp[0x28],r7
8000e50e:	50 80       	stdsp	sp[0x20],r0
8000e510:	0c 97       	mov	r7,r6
8000e512:	04 94       	mov	r4,r2
8000e514:	06 96       	mov	r6,r3
8000e516:	02 92       	mov	r2,r1
8000e518:	40 93       	lddsp	r3,sp[0x24]
8000e51a:	10 90       	mov	r0,r8
8000e51c:	40 41       	lddsp	r1,sp[0x10]
8000e51e:	a5 a5       	sbr	r5,0x4
8000e520:	c0 a8       	rjmp	8000e534 <_vfprintf_r+0x524>
8000e522:	50 a7       	stdsp	sp[0x28],r7
8000e524:	50 80       	stdsp	sp[0x20],r0
8000e526:	0c 97       	mov	r7,r6
8000e528:	04 94       	mov	r4,r2
8000e52a:	06 96       	mov	r6,r3
8000e52c:	02 92       	mov	r2,r1
8000e52e:	40 93       	lddsp	r3,sp[0x24]
8000e530:	10 90       	mov	r0,r8
8000e532:	40 41       	lddsp	r1,sp[0x10]
8000e534:	ed b5 00 05 	bld	r5,0x5
8000e538:	c5 11       	brne	8000e5da <_vfprintf_r+0x5ca>
8000e53a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e53e:	40 3c       	lddsp	r12,sp[0xc]
8000e540:	58 0c       	cp.w	r12,0
8000e542:	c1 e0       	breq	8000e57e <_vfprintf_r+0x56e>
8000e544:	10 36       	cp.w	r6,r8
8000e546:	c0 64       	brge	8000e552 <_vfprintf_r+0x542>
8000e548:	fa cb f9 44 	sub	r11,sp,-1724
8000e54c:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e550:	c2 08       	rjmp	8000e590 <_vfprintf_r+0x580>
8000e552:	fa c8 f9 50 	sub	r8,sp,-1712
8000e556:	1a d8       	st.w	--sp,r8
8000e558:	fa c8 fa b8 	sub	r8,sp,-1352
8000e55c:	0c 9b       	mov	r11,r6
8000e55e:	1a d8       	st.w	--sp,r8
8000e560:	fa c8 fb b4 	sub	r8,sp,-1100
8000e564:	1a d8       	st.w	--sp,r8
8000e566:	fa c9 ff b4 	sub	r9,sp,-76
8000e56a:	fa c8 f9 40 	sub	r8,sp,-1728
8000e56e:	04 9a       	mov	r10,r2
8000e570:	08 9c       	mov	r12,r4
8000e572:	fe b0 fb b7 	rcall	8000dce0 <get_arg>
8000e576:	2f dd       	sub	sp,-12
8000e578:	78 1b       	ld.w	r11,r12[0x4]
8000e57a:	78 09       	ld.w	r9,r12[0x0]
8000e57c:	c2 b8       	rjmp	8000e5d2 <_vfprintf_r+0x5c2>
8000e57e:	ee ca ff ff 	sub	r10,r7,-1
8000e582:	10 37       	cp.w	r7,r8
8000e584:	c0 b4       	brge	8000e59a <_vfprintf_r+0x58a>
8000e586:	fa c9 f9 44 	sub	r9,sp,-1724
8000e58a:	14 97       	mov	r7,r10
8000e58c:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e590:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000e594:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000e598:	c1 d8       	rjmp	8000e5d2 <_vfprintf_r+0x5c2>
8000e59a:	41 09       	lddsp	r9,sp[0x40]
8000e59c:	59 f8       	cp.w	r8,31
8000e59e:	e0 89 00 14 	brgt	8000e5c6 <_vfprintf_r+0x5b6>
8000e5a2:	f2 cb ff f8 	sub	r11,r9,-8
8000e5a6:	51 0b       	stdsp	sp[0x40],r11
8000e5a8:	fa c6 f9 44 	sub	r6,sp,-1724
8000e5ac:	72 1b       	ld.w	r11,r9[0x4]
8000e5ae:	ec 08 00 3c 	add	r12,r6,r8<<0x3
8000e5b2:	72 09       	ld.w	r9,r9[0x0]
8000e5b4:	f9 4b fd 8c 	st.w	r12[-628],r11
8000e5b8:	f9 49 fd 88 	st.w	r12[-632],r9
8000e5bc:	2f f8       	sub	r8,-1
8000e5be:	14 97       	mov	r7,r10
8000e5c0:	fb 48 06 b4 	st.w	sp[1716],r8
8000e5c4:	c0 78       	rjmp	8000e5d2 <_vfprintf_r+0x5c2>
8000e5c6:	f2 c8 ff f8 	sub	r8,r9,-8
8000e5ca:	72 1b       	ld.w	r11,r9[0x4]
8000e5cc:	14 97       	mov	r7,r10
8000e5ce:	51 08       	stdsp	sp[0x40],r8
8000e5d0:	72 09       	ld.w	r9,r9[0x0]
8000e5d2:	16 98       	mov	r8,r11
8000e5d4:	fa e9 00 00 	st.d	sp[0],r8
8000e5d8:	ca e8       	rjmp	8000e734 <_vfprintf_r+0x724>
8000e5da:	ed b5 00 04 	bld	r5,0x4
8000e5de:	c1 71       	brne	8000e60c <_vfprintf_r+0x5fc>
8000e5e0:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e5e4:	40 3e       	lddsp	lr,sp[0xc]
8000e5e6:	58 0e       	cp.w	lr,0
8000e5e8:	c0 80       	breq	8000e5f8 <_vfprintf_r+0x5e8>
8000e5ea:	10 36       	cp.w	r6,r8
8000e5ec:	c6 94       	brge	8000e6be <_vfprintf_r+0x6ae>
8000e5ee:	fa cc f9 44 	sub	r12,sp,-1724
8000e5f2:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000e5f6:	c8 28       	rjmp	8000e6fa <_vfprintf_r+0x6ea>
8000e5f8:	ee ca ff ff 	sub	r10,r7,-1
8000e5fc:	10 37       	cp.w	r7,r8
8000e5fe:	e0 84 00 81 	brge	8000e700 <_vfprintf_r+0x6f0>
8000e602:	fa cb f9 44 	sub	r11,sp,-1724
8000e606:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e60a:	c7 78       	rjmp	8000e6f8 <_vfprintf_r+0x6e8>
8000e60c:	ed b5 00 06 	bld	r5,0x6
8000e610:	c4 b1       	brne	8000e6a6 <_vfprintf_r+0x696>
8000e612:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e616:	40 3c       	lddsp	r12,sp[0xc]
8000e618:	58 0c       	cp.w	r12,0
8000e61a:	c1 d0       	breq	8000e654 <_vfprintf_r+0x644>
8000e61c:	10 36       	cp.w	r6,r8
8000e61e:	c0 64       	brge	8000e62a <_vfprintf_r+0x61a>
8000e620:	fa cb f9 44 	sub	r11,sp,-1724
8000e624:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e628:	c1 f8       	rjmp	8000e666 <_vfprintf_r+0x656>
8000e62a:	fa c8 f9 50 	sub	r8,sp,-1712
8000e62e:	1a d8       	st.w	--sp,r8
8000e630:	fa c8 fa b8 	sub	r8,sp,-1352
8000e634:	1a d8       	st.w	--sp,r8
8000e636:	fa c8 fb b4 	sub	r8,sp,-1100
8000e63a:	1a d8       	st.w	--sp,r8
8000e63c:	fa c8 f9 40 	sub	r8,sp,-1728
8000e640:	fa c9 ff b4 	sub	r9,sp,-76
8000e644:	04 9a       	mov	r10,r2
8000e646:	0c 9b       	mov	r11,r6
8000e648:	08 9c       	mov	r12,r4
8000e64a:	fe b0 fb 4b 	rcall	8000dce0 <get_arg>
8000e64e:	2f dd       	sub	sp,-12
8000e650:	98 18       	ld.sh	r8,r12[0x2]
8000e652:	c2 68       	rjmp	8000e69e <_vfprintf_r+0x68e>
8000e654:	ee ca ff ff 	sub	r10,r7,-1
8000e658:	10 37       	cp.w	r7,r8
8000e65a:	c0 94       	brge	8000e66c <_vfprintf_r+0x65c>
8000e65c:	fa c9 f9 44 	sub	r9,sp,-1724
8000e660:	14 97       	mov	r7,r10
8000e662:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e666:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000e66a:	c1 a8       	rjmp	8000e69e <_vfprintf_r+0x68e>
8000e66c:	41 09       	lddsp	r9,sp[0x40]
8000e66e:	59 f8       	cp.w	r8,31
8000e670:	e0 89 00 13 	brgt	8000e696 <_vfprintf_r+0x686>
8000e674:	f2 cb ff fc 	sub	r11,r9,-4
8000e678:	51 0b       	stdsp	sp[0x40],r11
8000e67a:	72 09       	ld.w	r9,r9[0x0]
8000e67c:	fa c6 f9 44 	sub	r6,sp,-1724
8000e680:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000e684:	2f f8       	sub	r8,-1
8000e686:	f7 49 fd 88 	st.w	r11[-632],r9
8000e68a:	fb 48 06 b4 	st.w	sp[1716],r8
8000e68e:	14 97       	mov	r7,r10
8000e690:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000e694:	c0 58       	rjmp	8000e69e <_vfprintf_r+0x68e>
8000e696:	92 18       	ld.sh	r8,r9[0x2]
8000e698:	14 97       	mov	r7,r10
8000e69a:	2f c9       	sub	r9,-4
8000e69c:	51 09       	stdsp	sp[0x40],r9
8000e69e:	50 18       	stdsp	sp[0x4],r8
8000e6a0:	bf 58       	asr	r8,0x1f
8000e6a2:	50 08       	stdsp	sp[0x0],r8
8000e6a4:	c4 88       	rjmp	8000e734 <_vfprintf_r+0x724>
8000e6a6:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e6aa:	40 3c       	lddsp	r12,sp[0xc]
8000e6ac:	58 0c       	cp.w	r12,0
8000e6ae:	c1 d0       	breq	8000e6e8 <_vfprintf_r+0x6d8>
8000e6b0:	10 36       	cp.w	r6,r8
8000e6b2:	c0 64       	brge	8000e6be <_vfprintf_r+0x6ae>
8000e6b4:	fa cb f9 44 	sub	r11,sp,-1724
8000e6b8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000e6bc:	c1 f8       	rjmp	8000e6fa <_vfprintf_r+0x6ea>
8000e6be:	fa c8 f9 50 	sub	r8,sp,-1712
8000e6c2:	1a d8       	st.w	--sp,r8
8000e6c4:	fa c8 fa b8 	sub	r8,sp,-1352
8000e6c8:	0c 9b       	mov	r11,r6
8000e6ca:	1a d8       	st.w	--sp,r8
8000e6cc:	fa c8 fb b4 	sub	r8,sp,-1100
8000e6d0:	04 9a       	mov	r10,r2
8000e6d2:	1a d8       	st.w	--sp,r8
8000e6d4:	08 9c       	mov	r12,r4
8000e6d6:	fa c8 f9 40 	sub	r8,sp,-1728
8000e6da:	fa c9 ff b4 	sub	r9,sp,-76
8000e6de:	fe b0 fb 01 	rcall	8000dce0 <get_arg>
8000e6e2:	2f dd       	sub	sp,-12
8000e6e4:	78 0b       	ld.w	r11,r12[0x0]
8000e6e6:	c2 48       	rjmp	8000e72e <_vfprintf_r+0x71e>
8000e6e8:	ee ca ff ff 	sub	r10,r7,-1
8000e6ec:	10 37       	cp.w	r7,r8
8000e6ee:	c0 94       	brge	8000e700 <_vfprintf_r+0x6f0>
8000e6f0:	fa c9 f9 44 	sub	r9,sp,-1724
8000e6f4:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e6f8:	14 97       	mov	r7,r10
8000e6fa:	ec fb fd 88 	ld.w	r11,r6[-632]
8000e6fe:	c1 88       	rjmp	8000e72e <_vfprintf_r+0x71e>
8000e700:	41 09       	lddsp	r9,sp[0x40]
8000e702:	59 f8       	cp.w	r8,31
8000e704:	e0 89 00 11 	brgt	8000e726 <_vfprintf_r+0x716>
8000e708:	f2 cb ff fc 	sub	r11,r9,-4
8000e70c:	51 0b       	stdsp	sp[0x40],r11
8000e70e:	fa c6 f9 44 	sub	r6,sp,-1724
8000e712:	72 0b       	ld.w	r11,r9[0x0]
8000e714:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000e718:	f3 4b fd 88 	st.w	r9[-632],r11
8000e71c:	2f f8       	sub	r8,-1
8000e71e:	14 97       	mov	r7,r10
8000e720:	fb 48 06 b4 	st.w	sp[1716],r8
8000e724:	c0 58       	rjmp	8000e72e <_vfprintf_r+0x71e>
8000e726:	72 0b       	ld.w	r11,r9[0x0]
8000e728:	14 97       	mov	r7,r10
8000e72a:	2f c9       	sub	r9,-4
8000e72c:	51 09       	stdsp	sp[0x40],r9
8000e72e:	50 1b       	stdsp	sp[0x4],r11
8000e730:	bf 5b       	asr	r11,0x1f
8000e732:	50 0b       	stdsp	sp[0x0],r11
8000e734:	fa ea 00 00 	ld.d	r10,sp[0]
8000e738:	58 0a       	cp.w	r10,0
8000e73a:	5c 2b       	cpc	r11
8000e73c:	c0 e4       	brge	8000e758 <_vfprintf_r+0x748>
8000e73e:	30 08       	mov	r8,0
8000e740:	fa ea 00 00 	ld.d	r10,sp[0]
8000e744:	30 09       	mov	r9,0
8000e746:	f0 0a 01 0a 	sub	r10,r8,r10
8000e74a:	f2 0b 01 4b 	sbc	r11,r9,r11
8000e74e:	32 d8       	mov	r8,45
8000e750:	fa eb 00 00 	st.d	sp[0],r10
8000e754:	fb 68 06 bb 	st.b	sp[1723],r8
8000e758:	30 18       	mov	r8,1
8000e75a:	e0 8f 06 fa 	bral	8000f54e <_vfprintf_r+0x153e>
8000e75e:	50 a7       	stdsp	sp[0x28],r7
8000e760:	50 80       	stdsp	sp[0x20],r0
8000e762:	0c 97       	mov	r7,r6
8000e764:	04 94       	mov	r4,r2
8000e766:	06 96       	mov	r6,r3
8000e768:	02 92       	mov	r2,r1
8000e76a:	40 93       	lddsp	r3,sp[0x24]
8000e76c:	10 90       	mov	r0,r8
8000e76e:	40 41       	lddsp	r1,sp[0x10]
8000e770:	0e 99       	mov	r9,r7
8000e772:	ed b5 00 03 	bld	r5,0x3
8000e776:	c4 11       	brne	8000e7f8 <_vfprintf_r+0x7e8>
8000e778:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e77c:	40 3a       	lddsp	r10,sp[0xc]
8000e77e:	58 0a       	cp.w	r10,0
8000e780:	c1 90       	breq	8000e7b2 <_vfprintf_r+0x7a2>
8000e782:	10 36       	cp.w	r6,r8
8000e784:	c6 45       	brlt	8000e84c <_vfprintf_r+0x83c>
8000e786:	fa c8 f9 50 	sub	r8,sp,-1712
8000e78a:	1a d8       	st.w	--sp,r8
8000e78c:	fa c8 fa b8 	sub	r8,sp,-1352
8000e790:	1a d8       	st.w	--sp,r8
8000e792:	fa c8 fb b4 	sub	r8,sp,-1100
8000e796:	0c 9b       	mov	r11,r6
8000e798:	1a d8       	st.w	--sp,r8
8000e79a:	04 9a       	mov	r10,r2
8000e79c:	fa c8 f9 40 	sub	r8,sp,-1728
8000e7a0:	fa c9 ff b4 	sub	r9,sp,-76
8000e7a4:	08 9c       	mov	r12,r4
8000e7a6:	fe b0 fa 9d 	rcall	8000dce0 <get_arg>
8000e7aa:	2f dd       	sub	sp,-12
8000e7ac:	78 16       	ld.w	r6,r12[0x4]
8000e7ae:	50 76       	stdsp	sp[0x1c],r6
8000e7b0:	c4 88       	rjmp	8000e840 <_vfprintf_r+0x830>
8000e7b2:	2f f7       	sub	r7,-1
8000e7b4:	10 39       	cp.w	r9,r8
8000e7b6:	c0 c4       	brge	8000e7ce <_vfprintf_r+0x7be>
8000e7b8:	fa ce f9 44 	sub	lr,sp,-1724
8000e7bc:	fc 06 00 36 	add	r6,lr,r6<<0x3
8000e7c0:	ec fc fd 8c 	ld.w	r12,r6[-628]
8000e7c4:	50 7c       	stdsp	sp[0x1c],r12
8000e7c6:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000e7ca:	50 56       	stdsp	sp[0x14],r6
8000e7cc:	c6 68       	rjmp	8000e898 <_vfprintf_r+0x888>
8000e7ce:	41 09       	lddsp	r9,sp[0x40]
8000e7d0:	59 f8       	cp.w	r8,31
8000e7d2:	e0 89 00 10 	brgt	8000e7f2 <_vfprintf_r+0x7e2>
8000e7d6:	f2 ca ff f8 	sub	r10,r9,-8
8000e7da:	72 1b       	ld.w	r11,r9[0x4]
8000e7dc:	51 0a       	stdsp	sp[0x40],r10
8000e7de:	72 09       	ld.w	r9,r9[0x0]
8000e7e0:	fa ca f9 44 	sub	r10,sp,-1724
8000e7e4:	50 7b       	stdsp	sp[0x1c],r11
8000e7e6:	50 59       	stdsp	sp[0x14],r9
8000e7e8:	f4 08 00 39 	add	r9,r10,r8<<0x3
8000e7ec:	40 5b       	lddsp	r11,sp[0x14]
8000e7ee:	40 7a       	lddsp	r10,sp[0x1c]
8000e7f0:	c4 78       	rjmp	8000e87e <_vfprintf_r+0x86e>
8000e7f2:	72 18       	ld.w	r8,r9[0x4]
8000e7f4:	50 78       	stdsp	sp[0x1c],r8
8000e7f6:	c4 c8       	rjmp	8000e88e <_vfprintf_r+0x87e>
8000e7f8:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000e7fc:	40 3e       	lddsp	lr,sp[0xc]
8000e7fe:	58 0e       	cp.w	lr,0
8000e800:	c2 30       	breq	8000e846 <_vfprintf_r+0x836>
8000e802:	10 36       	cp.w	r6,r8
8000e804:	c0 94       	brge	8000e816 <_vfprintf_r+0x806>
8000e806:	fa cc f9 44 	sub	r12,sp,-1724
8000e80a:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000e80e:	ec fb fd 8c 	ld.w	r11,r6[-628]
8000e812:	50 7b       	stdsp	sp[0x1c],r11
8000e814:	cd 9b       	rjmp	8000e7c6 <_vfprintf_r+0x7b6>
8000e816:	fa c8 f9 50 	sub	r8,sp,-1712
8000e81a:	1a d8       	st.w	--sp,r8
8000e81c:	fa c8 fa b8 	sub	r8,sp,-1352
8000e820:	04 9a       	mov	r10,r2
8000e822:	1a d8       	st.w	--sp,r8
8000e824:	fa c8 fb b4 	sub	r8,sp,-1100
8000e828:	0c 9b       	mov	r11,r6
8000e82a:	1a d8       	st.w	--sp,r8
8000e82c:	08 9c       	mov	r12,r4
8000e82e:	fa c8 f9 40 	sub	r8,sp,-1728
8000e832:	fa c9 ff b4 	sub	r9,sp,-76
8000e836:	fe b0 fa 55 	rcall	8000dce0 <get_arg>
8000e83a:	2f dd       	sub	sp,-12
8000e83c:	78 1a       	ld.w	r10,r12[0x4]
8000e83e:	50 7a       	stdsp	sp[0x1c],r10
8000e840:	78 0c       	ld.w	r12,r12[0x0]
8000e842:	50 5c       	stdsp	sp[0x14],r12
8000e844:	c2 a8       	rjmp	8000e898 <_vfprintf_r+0x888>
8000e846:	2f f7       	sub	r7,-1
8000e848:	10 39       	cp.w	r9,r8
8000e84a:	c0 94       	brge	8000e85c <_vfprintf_r+0x84c>
8000e84c:	fa c9 f9 44 	sub	r9,sp,-1724
8000e850:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000e854:	ec f8 fd 8c 	ld.w	r8,r6[-628]
8000e858:	50 78       	stdsp	sp[0x1c],r8
8000e85a:	cb 6b       	rjmp	8000e7c6 <_vfprintf_r+0x7b6>
8000e85c:	41 09       	lddsp	r9,sp[0x40]
8000e85e:	59 f8       	cp.w	r8,31
8000e860:	e0 89 00 15 	brgt	8000e88a <_vfprintf_r+0x87a>
8000e864:	f2 ca ff f8 	sub	r10,r9,-8
8000e868:	72 16       	ld.w	r6,r9[0x4]
8000e86a:	72 09       	ld.w	r9,r9[0x0]
8000e86c:	51 0a       	stdsp	sp[0x40],r10
8000e86e:	50 59       	stdsp	sp[0x14],r9
8000e870:	fa ce f9 44 	sub	lr,sp,-1724
8000e874:	50 76       	stdsp	sp[0x1c],r6
8000e876:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000e87a:	40 5b       	lddsp	r11,sp[0x14]
8000e87c:	0c 9a       	mov	r10,r6
8000e87e:	f2 eb fd 88 	st.d	r9[-632],r10
8000e882:	2f f8       	sub	r8,-1
8000e884:	fb 48 06 b4 	st.w	sp[1716],r8
8000e888:	c0 88       	rjmp	8000e898 <_vfprintf_r+0x888>
8000e88a:	72 1c       	ld.w	r12,r9[0x4]
8000e88c:	50 7c       	stdsp	sp[0x1c],r12
8000e88e:	f2 c8 ff f8 	sub	r8,r9,-8
8000e892:	51 08       	stdsp	sp[0x40],r8
8000e894:	72 09       	ld.w	r9,r9[0x0]
8000e896:	50 59       	stdsp	sp[0x14],r9
8000e898:	40 5b       	lddsp	r11,sp[0x14]
8000e89a:	40 7a       	lddsp	r10,sp[0x1c]
8000e89c:	e0 a0 1d 14 	rcall	800122c4 <__isinfd>
8000e8a0:	18 96       	mov	r6,r12
8000e8a2:	c1 70       	breq	8000e8d0 <_vfprintf_r+0x8c0>
8000e8a4:	30 08       	mov	r8,0
8000e8a6:	30 09       	mov	r9,0
8000e8a8:	40 5b       	lddsp	r11,sp[0x14]
8000e8aa:	40 7a       	lddsp	r10,sp[0x1c]
8000e8ac:	e0 a0 22 3a 	rcall	80012d20 <__avr32_f64_cmp_lt>
8000e8b0:	c0 40       	breq	8000e8b8 <_vfprintf_r+0x8a8>
8000e8b2:	32 d8       	mov	r8,45
8000e8b4:	fb 68 06 bb 	st.b	sp[1723],r8
8000e8b8:	fe c8 ae 8c 	sub	r8,pc,-20852
8000e8bc:	fe c6 ae 8c 	sub	r6,pc,-20852
8000e8c0:	a7 d5       	cbr	r5,0x7
8000e8c2:	e0 40 00 47 	cp.w	r0,71
8000e8c6:	f0 06 17 a0 	movle	r6,r8
8000e8ca:	30 32       	mov	r2,3
8000e8cc:	e0 8f 06 ce 	bral	8000f668 <_vfprintf_r+0x1658>
8000e8d0:	40 5b       	lddsp	r11,sp[0x14]
8000e8d2:	40 7a       	lddsp	r10,sp[0x1c]
8000e8d4:	e0 a0 1d 0d 	rcall	800122ee <__isnand>
8000e8d8:	c0 e0       	breq	8000e8f4 <_vfprintf_r+0x8e4>
8000e8da:	50 26       	stdsp	sp[0x8],r6
8000e8dc:	fe c8 ae a8 	sub	r8,pc,-20824
8000e8e0:	fe c6 ae a8 	sub	r6,pc,-20824
8000e8e4:	a7 d5       	cbr	r5,0x7
8000e8e6:	e0 40 00 47 	cp.w	r0,71
8000e8ea:	f0 06 17 a0 	movle	r6,r8
8000e8ee:	30 32       	mov	r2,3
8000e8f0:	e0 8f 06 c2 	bral	8000f674 <_vfprintf_r+0x1664>
8000e8f4:	40 2a       	lddsp	r10,sp[0x8]
8000e8f6:	5b fa       	cp.w	r10,-1
8000e8f8:	c0 41       	brne	8000e900 <_vfprintf_r+0x8f0>
8000e8fa:	30 69       	mov	r9,6
8000e8fc:	50 29       	stdsp	sp[0x8],r9
8000e8fe:	c1 18       	rjmp	8000e920 <_vfprintf_r+0x910>
8000e900:	e0 40 00 47 	cp.w	r0,71
8000e904:	5f 09       	sreq	r9
8000e906:	e0 40 00 67 	cp.w	r0,103
8000e90a:	5f 08       	sreq	r8
8000e90c:	f3 e8 10 08 	or	r8,r9,r8
8000e910:	f8 08 18 00 	cp.b	r8,r12
8000e914:	c0 60       	breq	8000e920 <_vfprintf_r+0x910>
8000e916:	40 28       	lddsp	r8,sp[0x8]
8000e918:	58 08       	cp.w	r8,0
8000e91a:	f9 b8 00 01 	moveq	r8,1
8000e91e:	50 28       	stdsp	sp[0x8],r8
8000e920:	40 78       	lddsp	r8,sp[0x1c]
8000e922:	40 59       	lddsp	r9,sp[0x14]
8000e924:	fa e9 06 94 	st.d	sp[1684],r8
8000e928:	a9 a5       	sbr	r5,0x8
8000e92a:	fa f8 06 94 	ld.w	r8,sp[1684]
8000e92e:	58 08       	cp.w	r8,0
8000e930:	c0 65       	brlt	8000e93c <_vfprintf_r+0x92c>
8000e932:	40 5e       	lddsp	lr,sp[0x14]
8000e934:	30 0c       	mov	r12,0
8000e936:	50 6e       	stdsp	sp[0x18],lr
8000e938:	50 9c       	stdsp	sp[0x24],r12
8000e93a:	c0 78       	rjmp	8000e948 <_vfprintf_r+0x938>
8000e93c:	40 5b       	lddsp	r11,sp[0x14]
8000e93e:	32 da       	mov	r10,45
8000e940:	ee 1b 80 00 	eorh	r11,0x8000
8000e944:	50 9a       	stdsp	sp[0x24],r10
8000e946:	50 6b       	stdsp	sp[0x18],r11
8000e948:	e0 40 00 46 	cp.w	r0,70
8000e94c:	5f 09       	sreq	r9
8000e94e:	e0 40 00 66 	cp.w	r0,102
8000e952:	5f 08       	sreq	r8
8000e954:	f3 e8 10 08 	or	r8,r9,r8
8000e958:	50 48       	stdsp	sp[0x10],r8
8000e95a:	c0 40       	breq	8000e962 <_vfprintf_r+0x952>
8000e95c:	40 22       	lddsp	r2,sp[0x8]
8000e95e:	30 39       	mov	r9,3
8000e960:	c1 08       	rjmp	8000e980 <_vfprintf_r+0x970>
8000e962:	e0 40 00 45 	cp.w	r0,69
8000e966:	5f 09       	sreq	r9
8000e968:	e0 40 00 65 	cp.w	r0,101
8000e96c:	5f 08       	sreq	r8
8000e96e:	40 22       	lddsp	r2,sp[0x8]
8000e970:	10 49       	or	r9,r8
8000e972:	2f f2       	sub	r2,-1
8000e974:	40 46       	lddsp	r6,sp[0x10]
8000e976:	ec 09 18 00 	cp.b	r9,r6
8000e97a:	fb f2 00 02 	ld.weq	r2,sp[0x8]
8000e97e:	30 29       	mov	r9,2
8000e980:	fa c8 f9 5c 	sub	r8,sp,-1700
8000e984:	1a d8       	st.w	--sp,r8
8000e986:	fa c8 f9 54 	sub	r8,sp,-1708
8000e98a:	1a d8       	st.w	--sp,r8
8000e98c:	fa c8 f9 4c 	sub	r8,sp,-1716
8000e990:	08 9c       	mov	r12,r4
8000e992:	1a d8       	st.w	--sp,r8
8000e994:	04 98       	mov	r8,r2
8000e996:	40 9b       	lddsp	r11,sp[0x24]
8000e998:	40 aa       	lddsp	r10,sp[0x28]
8000e99a:	e0 a0 0b c3 	rcall	80010120 <_dtoa_r>
8000e99e:	e0 40 00 47 	cp.w	r0,71
8000e9a2:	5f 19       	srne	r9
8000e9a4:	e0 40 00 67 	cp.w	r0,103
8000e9a8:	5f 18       	srne	r8
8000e9aa:	18 96       	mov	r6,r12
8000e9ac:	2f dd       	sub	sp,-12
8000e9ae:	f3 e8 00 08 	and	r8,r9,r8
8000e9b2:	c0 41       	brne	8000e9ba <_vfprintf_r+0x9aa>
8000e9b4:	ed b5 00 00 	bld	r5,0x0
8000e9b8:	c3 01       	brne	8000ea18 <_vfprintf_r+0xa08>
8000e9ba:	ec 02 00 0e 	add	lr,r6,r2
8000e9be:	50 3e       	stdsp	sp[0xc],lr
8000e9c0:	40 4c       	lddsp	r12,sp[0x10]
8000e9c2:	58 0c       	cp.w	r12,0
8000e9c4:	c1 50       	breq	8000e9ee <_vfprintf_r+0x9de>
8000e9c6:	0d 89       	ld.ub	r9,r6[0x0]
8000e9c8:	33 08       	mov	r8,48
8000e9ca:	f0 09 18 00 	cp.b	r9,r8
8000e9ce:	c0 b1       	brne	8000e9e4 <_vfprintf_r+0x9d4>
8000e9d0:	30 08       	mov	r8,0
8000e9d2:	30 09       	mov	r9,0
8000e9d4:	40 6b       	lddsp	r11,sp[0x18]
8000e9d6:	40 7a       	lddsp	r10,sp[0x1c]
8000e9d8:	e0 a0 21 5d 	rcall	80012c92 <__avr32_f64_cmp_eq>
8000e9dc:	fb b2 00 01 	rsubeq	r2,1
8000e9e0:	fb f2 0b ab 	st.weq	sp[0x6ac],r2
8000e9e4:	40 3b       	lddsp	r11,sp[0xc]
8000e9e6:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000e9ea:	10 0b       	add	r11,r8
8000e9ec:	50 3b       	stdsp	sp[0xc],r11
8000e9ee:	40 6b       	lddsp	r11,sp[0x18]
8000e9f0:	30 08       	mov	r8,0
8000e9f2:	30 09       	mov	r9,0
8000e9f4:	40 7a       	lddsp	r10,sp[0x1c]
8000e9f6:	e0 a0 21 4e 	rcall	80012c92 <__avr32_f64_cmp_eq>
8000e9fa:	c0 90       	breq	8000ea0c <_vfprintf_r+0x9fc>
8000e9fc:	40 3a       	lddsp	r10,sp[0xc]
8000e9fe:	fb 4a 06 a4 	st.w	sp[1700],r10
8000ea02:	c0 58       	rjmp	8000ea0c <_vfprintf_r+0x9fc>
8000ea04:	10 c9       	st.b	r8++,r9
8000ea06:	fb 48 06 a4 	st.w	sp[1700],r8
8000ea0a:	c0 28       	rjmp	8000ea0e <_vfprintf_r+0x9fe>
8000ea0c:	33 09       	mov	r9,48
8000ea0e:	fa f8 06 a4 	ld.w	r8,sp[1700]
8000ea12:	40 3e       	lddsp	lr,sp[0xc]
8000ea14:	1c 38       	cp.w	r8,lr
8000ea16:	cf 73       	brcs	8000ea04 <_vfprintf_r+0x9f4>
8000ea18:	e0 40 00 47 	cp.w	r0,71
8000ea1c:	5f 09       	sreq	r9
8000ea1e:	e0 40 00 67 	cp.w	r0,103
8000ea22:	5f 08       	sreq	r8
8000ea24:	f3 e8 10 08 	or	r8,r9,r8
8000ea28:	fa f9 06 a4 	ld.w	r9,sp[1700]
8000ea2c:	0c 19       	sub	r9,r6
8000ea2e:	50 69       	stdsp	sp[0x18],r9
8000ea30:	58 08       	cp.w	r8,0
8000ea32:	c0 b0       	breq	8000ea48 <_vfprintf_r+0xa38>
8000ea34:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000ea38:	5b d8       	cp.w	r8,-3
8000ea3a:	c0 55       	brlt	8000ea44 <_vfprintf_r+0xa34>
8000ea3c:	40 2c       	lddsp	r12,sp[0x8]
8000ea3e:	18 38       	cp.w	r8,r12
8000ea40:	e0 8a 00 6a 	brle	8000eb14 <_vfprintf_r+0xb04>
8000ea44:	20 20       	sub	r0,2
8000ea46:	c0 58       	rjmp	8000ea50 <_vfprintf_r+0xa40>
8000ea48:	e0 40 00 65 	cp.w	r0,101
8000ea4c:	e0 89 00 46 	brgt	8000ead8 <_vfprintf_r+0xac8>
8000ea50:	fa fb 06 ac 	ld.w	r11,sp[1708]
8000ea54:	fb 60 06 9c 	st.b	sp[1692],r0
8000ea58:	20 1b       	sub	r11,1
8000ea5a:	fb 4b 06 ac 	st.w	sp[1708],r11
8000ea5e:	c0 47       	brpl	8000ea66 <_vfprintf_r+0xa56>
8000ea60:	5c 3b       	neg	r11
8000ea62:	32 d8       	mov	r8,45
8000ea64:	c0 28       	rjmp	8000ea68 <_vfprintf_r+0xa58>
8000ea66:	32 b8       	mov	r8,43
8000ea68:	fb 68 06 9d 	st.b	sp[1693],r8
8000ea6c:	58 9b       	cp.w	r11,9
8000ea6e:	e0 8a 00 1d 	brle	8000eaa8 <_vfprintf_r+0xa98>
8000ea72:	fa c9 fa 35 	sub	r9,sp,-1483
8000ea76:	30 aa       	mov	r10,10
8000ea78:	12 98       	mov	r8,r9
8000ea7a:	0e 9c       	mov	r12,r7
8000ea7c:	0c 92       	mov	r2,r6
8000ea7e:	f6 0a 0c 06 	divs	r6,r11,r10
8000ea82:	0e 9b       	mov	r11,r7
8000ea84:	2d 0b       	sub	r11,-48
8000ea86:	10 fb       	st.b	--r8,r11
8000ea88:	0c 9b       	mov	r11,r6
8000ea8a:	58 96       	cp.w	r6,9
8000ea8c:	fe 99 ff f9 	brgt	8000ea7e <_vfprintf_r+0xa6e>
8000ea90:	2d 0b       	sub	r11,-48
8000ea92:	18 97       	mov	r7,r12
8000ea94:	04 96       	mov	r6,r2
8000ea96:	10 fb       	st.b	--r8,r11
8000ea98:	fa ca f9 62 	sub	r10,sp,-1694
8000ea9c:	c0 38       	rjmp	8000eaa2 <_vfprintf_r+0xa92>
8000ea9e:	11 3b       	ld.ub	r11,r8++
8000eaa0:	14 cb       	st.b	r10++,r11
8000eaa2:	12 38       	cp.w	r8,r9
8000eaa4:	cf d3       	brcs	8000ea9e <_vfprintf_r+0xa8e>
8000eaa6:	c0 98       	rjmp	8000eab8 <_vfprintf_r+0xaa8>
8000eaa8:	2d 0b       	sub	r11,-48
8000eaaa:	33 08       	mov	r8,48
8000eaac:	fb 6b 06 9f 	st.b	sp[1695],r11
8000eab0:	fb 68 06 9e 	st.b	sp[1694],r8
8000eab4:	fa ca f9 60 	sub	r10,sp,-1696
8000eab8:	fa c8 f9 64 	sub	r8,sp,-1692
8000eabc:	f4 08 01 08 	sub	r8,r10,r8
8000eac0:	50 e8       	stdsp	sp[0x38],r8
8000eac2:	10 92       	mov	r2,r8
8000eac4:	40 6b       	lddsp	r11,sp[0x18]
8000eac6:	16 02       	add	r2,r11
8000eac8:	58 1b       	cp.w	r11,1
8000eaca:	e0 89 00 05 	brgt	8000ead4 <_vfprintf_r+0xac4>
8000eace:	ed b5 00 00 	bld	r5,0x0
8000ead2:	c3 51       	brne	8000eb3c <_vfprintf_r+0xb2c>
8000ead4:	2f f2       	sub	r2,-1
8000ead6:	c3 38       	rjmp	8000eb3c <_vfprintf_r+0xb2c>
8000ead8:	e0 40 00 66 	cp.w	r0,102
8000eadc:	c1 c1       	brne	8000eb14 <_vfprintf_r+0xb04>
8000eade:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000eae2:	58 02       	cp.w	r2,0
8000eae4:	e0 8a 00 0c 	brle	8000eafc <_vfprintf_r+0xaec>
8000eae8:	40 2a       	lddsp	r10,sp[0x8]
8000eaea:	58 0a       	cp.w	r10,0
8000eaec:	c0 41       	brne	8000eaf4 <_vfprintf_r+0xae4>
8000eaee:	ed b5 00 00 	bld	r5,0x0
8000eaf2:	c2 51       	brne	8000eb3c <_vfprintf_r+0xb2c>
8000eaf4:	2f f2       	sub	r2,-1
8000eaf6:	40 29       	lddsp	r9,sp[0x8]
8000eaf8:	12 02       	add	r2,r9
8000eafa:	c0 b8       	rjmp	8000eb10 <_vfprintf_r+0xb00>
8000eafc:	40 28       	lddsp	r8,sp[0x8]
8000eafe:	58 08       	cp.w	r8,0
8000eb00:	c0 61       	brne	8000eb0c <_vfprintf_r+0xafc>
8000eb02:	ed b5 00 00 	bld	r5,0x0
8000eb06:	c0 30       	breq	8000eb0c <_vfprintf_r+0xafc>
8000eb08:	30 12       	mov	r2,1
8000eb0a:	c1 98       	rjmp	8000eb3c <_vfprintf_r+0xb2c>
8000eb0c:	40 22       	lddsp	r2,sp[0x8]
8000eb0e:	2f e2       	sub	r2,-2
8000eb10:	36 60       	mov	r0,102
8000eb12:	c1 58       	rjmp	8000eb3c <_vfprintf_r+0xb2c>
8000eb14:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000eb18:	40 6e       	lddsp	lr,sp[0x18]
8000eb1a:	1c 32       	cp.w	r2,lr
8000eb1c:	c0 65       	brlt	8000eb28 <_vfprintf_r+0xb18>
8000eb1e:	ed b5 00 00 	bld	r5,0x0
8000eb22:	f7 b2 00 ff 	subeq	r2,-1
8000eb26:	c0 a8       	rjmp	8000eb3a <_vfprintf_r+0xb2a>
8000eb28:	e4 08 11 02 	rsub	r8,r2,2
8000eb2c:	40 6c       	lddsp	r12,sp[0x18]
8000eb2e:	58 02       	cp.w	r2,0
8000eb30:	f0 02 17 a0 	movle	r2,r8
8000eb34:	f9 b2 09 01 	movgt	r2,1
8000eb38:	18 02       	add	r2,r12
8000eb3a:	36 70       	mov	r0,103
8000eb3c:	40 9b       	lddsp	r11,sp[0x24]
8000eb3e:	58 0b       	cp.w	r11,0
8000eb40:	e0 80 05 94 	breq	8000f668 <_vfprintf_r+0x1658>
8000eb44:	32 d8       	mov	r8,45
8000eb46:	fb 68 06 bb 	st.b	sp[1723],r8
8000eb4a:	e0 8f 05 93 	bral	8000f670 <_vfprintf_r+0x1660>
8000eb4e:	50 a7       	stdsp	sp[0x28],r7
8000eb50:	04 94       	mov	r4,r2
8000eb52:	0c 97       	mov	r7,r6
8000eb54:	02 92       	mov	r2,r1
8000eb56:	06 96       	mov	r6,r3
8000eb58:	40 41       	lddsp	r1,sp[0x10]
8000eb5a:	40 93       	lddsp	r3,sp[0x24]
8000eb5c:	0e 99       	mov	r9,r7
8000eb5e:	ed b5 00 05 	bld	r5,0x5
8000eb62:	c4 81       	brne	8000ebf2 <_vfprintf_r+0xbe2>
8000eb64:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000eb68:	40 3e       	lddsp	lr,sp[0xc]
8000eb6a:	58 0e       	cp.w	lr,0
8000eb6c:	c1 d0       	breq	8000eba6 <_vfprintf_r+0xb96>
8000eb6e:	10 36       	cp.w	r6,r8
8000eb70:	c0 64       	brge	8000eb7c <_vfprintf_r+0xb6c>
8000eb72:	fa cc f9 44 	sub	r12,sp,-1724
8000eb76:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000eb7a:	c1 d8       	rjmp	8000ebb4 <_vfprintf_r+0xba4>
8000eb7c:	fa c8 f9 50 	sub	r8,sp,-1712
8000eb80:	1a d8       	st.w	--sp,r8
8000eb82:	fa c8 fa b8 	sub	r8,sp,-1352
8000eb86:	04 9a       	mov	r10,r2
8000eb88:	1a d8       	st.w	--sp,r8
8000eb8a:	fa c8 fb b4 	sub	r8,sp,-1100
8000eb8e:	0c 9b       	mov	r11,r6
8000eb90:	1a d8       	st.w	--sp,r8
8000eb92:	08 9c       	mov	r12,r4
8000eb94:	fa c8 f9 40 	sub	r8,sp,-1728
8000eb98:	fa c9 ff b4 	sub	r9,sp,-76
8000eb9c:	fe b0 f8 a2 	rcall	8000dce0 <get_arg>
8000eba0:	2f dd       	sub	sp,-12
8000eba2:	78 0a       	ld.w	r10,r12[0x0]
8000eba4:	c2 08       	rjmp	8000ebe4 <_vfprintf_r+0xbd4>
8000eba6:	2f f7       	sub	r7,-1
8000eba8:	10 39       	cp.w	r9,r8
8000ebaa:	c0 84       	brge	8000ebba <_vfprintf_r+0xbaa>
8000ebac:	fa cb f9 44 	sub	r11,sp,-1724
8000ebb0:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ebb4:	ec fa fd 88 	ld.w	r10,r6[-632]
8000ebb8:	c1 68       	rjmp	8000ebe4 <_vfprintf_r+0xbd4>
8000ebba:	41 09       	lddsp	r9,sp[0x40]
8000ebbc:	59 f8       	cp.w	r8,31
8000ebbe:	e0 89 00 10 	brgt	8000ebde <_vfprintf_r+0xbce>
8000ebc2:	f2 ca ff fc 	sub	r10,r9,-4
8000ebc6:	51 0a       	stdsp	sp[0x40],r10
8000ebc8:	fa c6 f9 44 	sub	r6,sp,-1724
8000ebcc:	72 0a       	ld.w	r10,r9[0x0]
8000ebce:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000ebd2:	f3 4a fd 88 	st.w	r9[-632],r10
8000ebd6:	2f f8       	sub	r8,-1
8000ebd8:	fb 48 06 b4 	st.w	sp[1716],r8
8000ebdc:	c0 48       	rjmp	8000ebe4 <_vfprintf_r+0xbd4>
8000ebde:	72 0a       	ld.w	r10,r9[0x0]
8000ebe0:	2f c9       	sub	r9,-4
8000ebe2:	51 09       	stdsp	sp[0x40],r9
8000ebe4:	40 be       	lddsp	lr,sp[0x2c]
8000ebe6:	1c 98       	mov	r8,lr
8000ebe8:	95 1e       	st.w	r10[0x4],lr
8000ebea:	bf 58       	asr	r8,0x1f
8000ebec:	95 08       	st.w	r10[0x0],r8
8000ebee:	fe 9f fa 9f 	bral	8000e12c <_vfprintf_r+0x11c>
8000ebf2:	ed b5 00 04 	bld	r5,0x4
8000ebf6:	c4 80       	breq	8000ec86 <_vfprintf_r+0xc76>
8000ebf8:	e2 15 00 40 	andl	r5,0x40,COH
8000ebfc:	c4 50       	breq	8000ec86 <_vfprintf_r+0xc76>
8000ebfe:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ec02:	40 3c       	lddsp	r12,sp[0xc]
8000ec04:	58 0c       	cp.w	r12,0
8000ec06:	c1 d0       	breq	8000ec40 <_vfprintf_r+0xc30>
8000ec08:	10 36       	cp.w	r6,r8
8000ec0a:	c0 64       	brge	8000ec16 <_vfprintf_r+0xc06>
8000ec0c:	fa cb f9 44 	sub	r11,sp,-1724
8000ec10:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ec14:	c1 d8       	rjmp	8000ec4e <_vfprintf_r+0xc3e>
8000ec16:	fa c8 f9 50 	sub	r8,sp,-1712
8000ec1a:	1a d8       	st.w	--sp,r8
8000ec1c:	fa c8 fa b8 	sub	r8,sp,-1352
8000ec20:	04 9a       	mov	r10,r2
8000ec22:	1a d8       	st.w	--sp,r8
8000ec24:	fa c8 fb b4 	sub	r8,sp,-1100
8000ec28:	0c 9b       	mov	r11,r6
8000ec2a:	1a d8       	st.w	--sp,r8
8000ec2c:	08 9c       	mov	r12,r4
8000ec2e:	fa c8 f9 40 	sub	r8,sp,-1728
8000ec32:	fa c9 ff b4 	sub	r9,sp,-76
8000ec36:	fe b0 f8 55 	rcall	8000dce0 <get_arg>
8000ec3a:	2f dd       	sub	sp,-12
8000ec3c:	78 0a       	ld.w	r10,r12[0x0]
8000ec3e:	c2 08       	rjmp	8000ec7e <_vfprintf_r+0xc6e>
8000ec40:	2f f7       	sub	r7,-1
8000ec42:	10 39       	cp.w	r9,r8
8000ec44:	c0 84       	brge	8000ec54 <_vfprintf_r+0xc44>
8000ec46:	fa ca f9 44 	sub	r10,sp,-1724
8000ec4a:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000ec4e:	ec fa fd 88 	ld.w	r10,r6[-632]
8000ec52:	c1 68       	rjmp	8000ec7e <_vfprintf_r+0xc6e>
8000ec54:	41 09       	lddsp	r9,sp[0x40]
8000ec56:	59 f8       	cp.w	r8,31
8000ec58:	e0 89 00 10 	brgt	8000ec78 <_vfprintf_r+0xc68>
8000ec5c:	f2 ca ff fc 	sub	r10,r9,-4
8000ec60:	51 0a       	stdsp	sp[0x40],r10
8000ec62:	fa c6 f9 44 	sub	r6,sp,-1724
8000ec66:	72 0a       	ld.w	r10,r9[0x0]
8000ec68:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000ec6c:	f3 4a fd 88 	st.w	r9[-632],r10
8000ec70:	2f f8       	sub	r8,-1
8000ec72:	fb 48 06 b4 	st.w	sp[1716],r8
8000ec76:	c0 48       	rjmp	8000ec7e <_vfprintf_r+0xc6e>
8000ec78:	72 0a       	ld.w	r10,r9[0x0]
8000ec7a:	2f c9       	sub	r9,-4
8000ec7c:	51 09       	stdsp	sp[0x40],r9
8000ec7e:	40 be       	lddsp	lr,sp[0x2c]
8000ec80:	b4 0e       	st.h	r10[0x0],lr
8000ec82:	fe 9f fa 55 	bral	8000e12c <_vfprintf_r+0x11c>
8000ec86:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ec8a:	40 3c       	lddsp	r12,sp[0xc]
8000ec8c:	58 0c       	cp.w	r12,0
8000ec8e:	c1 d0       	breq	8000ecc8 <_vfprintf_r+0xcb8>
8000ec90:	10 36       	cp.w	r6,r8
8000ec92:	c0 64       	brge	8000ec9e <_vfprintf_r+0xc8e>
8000ec94:	fa cb f9 44 	sub	r11,sp,-1724
8000ec98:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ec9c:	c1 d8       	rjmp	8000ecd6 <_vfprintf_r+0xcc6>
8000ec9e:	fa c8 f9 50 	sub	r8,sp,-1712
8000eca2:	1a d8       	st.w	--sp,r8
8000eca4:	fa c8 fa b8 	sub	r8,sp,-1352
8000eca8:	04 9a       	mov	r10,r2
8000ecaa:	1a d8       	st.w	--sp,r8
8000ecac:	fa c8 fb b4 	sub	r8,sp,-1100
8000ecb0:	0c 9b       	mov	r11,r6
8000ecb2:	1a d8       	st.w	--sp,r8
8000ecb4:	08 9c       	mov	r12,r4
8000ecb6:	fa c8 f9 40 	sub	r8,sp,-1728
8000ecba:	fa c9 ff b4 	sub	r9,sp,-76
8000ecbe:	fe b0 f8 11 	rcall	8000dce0 <get_arg>
8000ecc2:	2f dd       	sub	sp,-12
8000ecc4:	78 0a       	ld.w	r10,r12[0x0]
8000ecc6:	c2 08       	rjmp	8000ed06 <_vfprintf_r+0xcf6>
8000ecc8:	2f f7       	sub	r7,-1
8000ecca:	10 39       	cp.w	r9,r8
8000eccc:	c0 84       	brge	8000ecdc <_vfprintf_r+0xccc>
8000ecce:	fa ca f9 44 	sub	r10,sp,-1724
8000ecd2:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000ecd6:	ec fa fd 88 	ld.w	r10,r6[-632]
8000ecda:	c1 68       	rjmp	8000ed06 <_vfprintf_r+0xcf6>
8000ecdc:	41 09       	lddsp	r9,sp[0x40]
8000ecde:	59 f8       	cp.w	r8,31
8000ece0:	e0 89 00 10 	brgt	8000ed00 <_vfprintf_r+0xcf0>
8000ece4:	f2 ca ff fc 	sub	r10,r9,-4
8000ece8:	51 0a       	stdsp	sp[0x40],r10
8000ecea:	fa c6 f9 44 	sub	r6,sp,-1724
8000ecee:	72 0a       	ld.w	r10,r9[0x0]
8000ecf0:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000ecf4:	f3 4a fd 88 	st.w	r9[-632],r10
8000ecf8:	2f f8       	sub	r8,-1
8000ecfa:	fb 48 06 b4 	st.w	sp[1716],r8
8000ecfe:	c0 48       	rjmp	8000ed06 <_vfprintf_r+0xcf6>
8000ed00:	72 0a       	ld.w	r10,r9[0x0]
8000ed02:	2f c9       	sub	r9,-4
8000ed04:	51 09       	stdsp	sp[0x40],r9
8000ed06:	40 be       	lddsp	lr,sp[0x2c]
8000ed08:	95 0e       	st.w	r10[0x0],lr
8000ed0a:	fe 9f fa 11 	bral	8000e12c <_vfprintf_r+0x11c>
8000ed0e:	50 a7       	stdsp	sp[0x28],r7
8000ed10:	50 80       	stdsp	sp[0x20],r0
8000ed12:	0c 97       	mov	r7,r6
8000ed14:	04 94       	mov	r4,r2
8000ed16:	06 96       	mov	r6,r3
8000ed18:	02 92       	mov	r2,r1
8000ed1a:	40 93       	lddsp	r3,sp[0x24]
8000ed1c:	10 90       	mov	r0,r8
8000ed1e:	40 41       	lddsp	r1,sp[0x10]
8000ed20:	a5 a5       	sbr	r5,0x4
8000ed22:	c0 a8       	rjmp	8000ed36 <_vfprintf_r+0xd26>
8000ed24:	50 a7       	stdsp	sp[0x28],r7
8000ed26:	50 80       	stdsp	sp[0x20],r0
8000ed28:	0c 97       	mov	r7,r6
8000ed2a:	04 94       	mov	r4,r2
8000ed2c:	06 96       	mov	r6,r3
8000ed2e:	02 92       	mov	r2,r1
8000ed30:	40 93       	lddsp	r3,sp[0x24]
8000ed32:	10 90       	mov	r0,r8
8000ed34:	40 41       	lddsp	r1,sp[0x10]
8000ed36:	ed b5 00 05 	bld	r5,0x5
8000ed3a:	c5 d1       	brne	8000edf4 <_vfprintf_r+0xde4>
8000ed3c:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ed40:	40 3c       	lddsp	r12,sp[0xc]
8000ed42:	58 0c       	cp.w	r12,0
8000ed44:	c2 60       	breq	8000ed90 <_vfprintf_r+0xd80>
8000ed46:	10 36       	cp.w	r6,r8
8000ed48:	c0 a4       	brge	8000ed5c <_vfprintf_r+0xd4c>
8000ed4a:	fa cb f9 44 	sub	r11,sp,-1724
8000ed4e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ed52:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000ed56:	fa e9 00 00 	st.d	sp[0],r8
8000ed5a:	c1 88       	rjmp	8000ed8a <_vfprintf_r+0xd7a>
8000ed5c:	fa c8 f9 50 	sub	r8,sp,-1712
8000ed60:	1a d8       	st.w	--sp,r8
8000ed62:	fa c8 fa b8 	sub	r8,sp,-1352
8000ed66:	04 9a       	mov	r10,r2
8000ed68:	1a d8       	st.w	--sp,r8
8000ed6a:	0c 9b       	mov	r11,r6
8000ed6c:	fa c8 fb b4 	sub	r8,sp,-1100
8000ed70:	08 9c       	mov	r12,r4
8000ed72:	1a d8       	st.w	--sp,r8
8000ed74:	fa c8 f9 40 	sub	r8,sp,-1728
8000ed78:	fa c9 ff b4 	sub	r9,sp,-76
8000ed7c:	fe b0 f7 b2 	rcall	8000dce0 <get_arg>
8000ed80:	2f dd       	sub	sp,-12
8000ed82:	f8 ea 00 00 	ld.d	r10,r12[0]
8000ed86:	fa eb 00 00 	st.d	sp[0],r10
8000ed8a:	30 08       	mov	r8,0
8000ed8c:	e0 8f 03 de 	bral	8000f548 <_vfprintf_r+0x1538>
8000ed90:	ee ca ff ff 	sub	r10,r7,-1
8000ed94:	10 37       	cp.w	r7,r8
8000ed96:	c0 b4       	brge	8000edac <_vfprintf_r+0xd9c>
8000ed98:	fa c9 f9 44 	sub	r9,sp,-1724
8000ed9c:	14 97       	mov	r7,r10
8000ed9e:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000eda2:	ec ea fd 88 	ld.d	r10,r6[-632]
8000eda6:	fa eb 00 00 	st.d	sp[0],r10
8000edaa:	c1 88       	rjmp	8000edda <_vfprintf_r+0xdca>
8000edac:	41 09       	lddsp	r9,sp[0x40]
8000edae:	59 f8       	cp.w	r8,31
8000edb0:	e0 89 00 18 	brgt	8000ede0 <_vfprintf_r+0xdd0>
8000edb4:	f2 e6 00 00 	ld.d	r6,r9[0]
8000edb8:	f2 cb ff f8 	sub	r11,r9,-8
8000edbc:	fa e7 00 00 	st.d	sp[0],r6
8000edc0:	51 0b       	stdsp	sp[0x40],r11
8000edc2:	fa c6 f9 44 	sub	r6,sp,-1724
8000edc6:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000edca:	fa e6 00 00 	ld.d	r6,sp[0]
8000edce:	f2 e7 fd 88 	st.d	r9[-632],r6
8000edd2:	2f f8       	sub	r8,-1
8000edd4:	14 97       	mov	r7,r10
8000edd6:	fb 48 06 b4 	st.w	sp[1716],r8
8000edda:	40 38       	lddsp	r8,sp[0xc]
8000eddc:	e0 8f 03 b6 	bral	8000f548 <_vfprintf_r+0x1538>
8000ede0:	f2 e6 00 00 	ld.d	r6,r9[0]
8000ede4:	40 38       	lddsp	r8,sp[0xc]
8000ede6:	fa e7 00 00 	st.d	sp[0],r6
8000edea:	2f 89       	sub	r9,-8
8000edec:	14 97       	mov	r7,r10
8000edee:	51 09       	stdsp	sp[0x40],r9
8000edf0:	e0 8f 03 ac 	bral	8000f548 <_vfprintf_r+0x1538>
8000edf4:	ed b5 00 04 	bld	r5,0x4
8000edf8:	c1 61       	brne	8000ee24 <_vfprintf_r+0xe14>
8000edfa:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000edfe:	40 3e       	lddsp	lr,sp[0xc]
8000ee00:	58 0e       	cp.w	lr,0
8000ee02:	c0 80       	breq	8000ee12 <_vfprintf_r+0xe02>
8000ee04:	10 36       	cp.w	r6,r8
8000ee06:	c6 74       	brge	8000eed4 <_vfprintf_r+0xec4>
8000ee08:	fa cc f9 44 	sub	r12,sp,-1724
8000ee0c:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000ee10:	c8 08       	rjmp	8000ef10 <_vfprintf_r+0xf00>
8000ee12:	ee ca ff ff 	sub	r10,r7,-1
8000ee16:	10 37       	cp.w	r7,r8
8000ee18:	c7 f4       	brge	8000ef16 <_vfprintf_r+0xf06>
8000ee1a:	fa cb f9 44 	sub	r11,sp,-1724
8000ee1e:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ee22:	c7 68       	rjmp	8000ef0e <_vfprintf_r+0xefe>
8000ee24:	ed b5 00 06 	bld	r5,0x6
8000ee28:	c4 a1       	brne	8000eebc <_vfprintf_r+0xeac>
8000ee2a:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ee2e:	40 3c       	lddsp	r12,sp[0xc]
8000ee30:	58 0c       	cp.w	r12,0
8000ee32:	c1 d0       	breq	8000ee6c <_vfprintf_r+0xe5c>
8000ee34:	10 36       	cp.w	r6,r8
8000ee36:	c0 64       	brge	8000ee42 <_vfprintf_r+0xe32>
8000ee38:	fa cb f9 44 	sub	r11,sp,-1724
8000ee3c:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ee40:	c1 f8       	rjmp	8000ee7e <_vfprintf_r+0xe6e>
8000ee42:	fa c8 f9 50 	sub	r8,sp,-1712
8000ee46:	1a d8       	st.w	--sp,r8
8000ee48:	fa c8 fa b8 	sub	r8,sp,-1352
8000ee4c:	1a d8       	st.w	--sp,r8
8000ee4e:	fa c8 fb b4 	sub	r8,sp,-1100
8000ee52:	1a d8       	st.w	--sp,r8
8000ee54:	fa c8 f9 40 	sub	r8,sp,-1728
8000ee58:	fa c9 ff b4 	sub	r9,sp,-76
8000ee5c:	04 9a       	mov	r10,r2
8000ee5e:	0c 9b       	mov	r11,r6
8000ee60:	08 9c       	mov	r12,r4
8000ee62:	fe b0 f7 3f 	rcall	8000dce0 <get_arg>
8000ee66:	2f dd       	sub	sp,-12
8000ee68:	98 18       	ld.sh	r8,r12[0x2]
8000ee6a:	c2 68       	rjmp	8000eeb6 <_vfprintf_r+0xea6>
8000ee6c:	ee ca ff ff 	sub	r10,r7,-1
8000ee70:	10 37       	cp.w	r7,r8
8000ee72:	c0 94       	brge	8000ee84 <_vfprintf_r+0xe74>
8000ee74:	fa c9 f9 44 	sub	r9,sp,-1724
8000ee78:	14 97       	mov	r7,r10
8000ee7a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000ee7e:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000ee82:	c1 a8       	rjmp	8000eeb6 <_vfprintf_r+0xea6>
8000ee84:	41 09       	lddsp	r9,sp[0x40]
8000ee86:	59 f8       	cp.w	r8,31
8000ee88:	e0 89 00 13 	brgt	8000eeae <_vfprintf_r+0xe9e>
8000ee8c:	f2 cb ff fc 	sub	r11,r9,-4
8000ee90:	51 0b       	stdsp	sp[0x40],r11
8000ee92:	72 09       	ld.w	r9,r9[0x0]
8000ee94:	fa c6 f9 44 	sub	r6,sp,-1724
8000ee98:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000ee9c:	2f f8       	sub	r8,-1
8000ee9e:	f7 49 fd 88 	st.w	r11[-632],r9
8000eea2:	fb 48 06 b4 	st.w	sp[1716],r8
8000eea6:	14 97       	mov	r7,r10
8000eea8:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000eeac:	c0 58       	rjmp	8000eeb6 <_vfprintf_r+0xea6>
8000eeae:	92 18       	ld.sh	r8,r9[0x2]
8000eeb0:	14 97       	mov	r7,r10
8000eeb2:	2f c9       	sub	r9,-4
8000eeb4:	51 09       	stdsp	sp[0x40],r9
8000eeb6:	5c 78       	castu.h	r8
8000eeb8:	50 18       	stdsp	sp[0x4],r8
8000eeba:	c4 68       	rjmp	8000ef46 <_vfprintf_r+0xf36>
8000eebc:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000eec0:	40 3c       	lddsp	r12,sp[0xc]
8000eec2:	58 0c       	cp.w	r12,0
8000eec4:	c1 d0       	breq	8000eefe <_vfprintf_r+0xeee>
8000eec6:	10 36       	cp.w	r6,r8
8000eec8:	c0 64       	brge	8000eed4 <_vfprintf_r+0xec4>
8000eeca:	fa cb f9 44 	sub	r11,sp,-1724
8000eece:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000eed2:	c1 f8       	rjmp	8000ef10 <_vfprintf_r+0xf00>
8000eed4:	fa c8 f9 50 	sub	r8,sp,-1712
8000eed8:	1a d8       	st.w	--sp,r8
8000eeda:	fa c8 fa b8 	sub	r8,sp,-1352
8000eede:	0c 9b       	mov	r11,r6
8000eee0:	1a d8       	st.w	--sp,r8
8000eee2:	fa c8 fb b4 	sub	r8,sp,-1100
8000eee6:	04 9a       	mov	r10,r2
8000eee8:	1a d8       	st.w	--sp,r8
8000eeea:	08 9c       	mov	r12,r4
8000eeec:	fa c8 f9 40 	sub	r8,sp,-1728
8000eef0:	fa c9 ff b4 	sub	r9,sp,-76
8000eef4:	fe b0 f6 f6 	rcall	8000dce0 <get_arg>
8000eef8:	2f dd       	sub	sp,-12
8000eefa:	78 0b       	ld.w	r11,r12[0x0]
8000eefc:	c2 48       	rjmp	8000ef44 <_vfprintf_r+0xf34>
8000eefe:	ee ca ff ff 	sub	r10,r7,-1
8000ef02:	10 37       	cp.w	r7,r8
8000ef04:	c0 94       	brge	8000ef16 <_vfprintf_r+0xf06>
8000ef06:	fa c9 f9 44 	sub	r9,sp,-1724
8000ef0a:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000ef0e:	14 97       	mov	r7,r10
8000ef10:	ec fb fd 88 	ld.w	r11,r6[-632]
8000ef14:	c1 88       	rjmp	8000ef44 <_vfprintf_r+0xf34>
8000ef16:	41 09       	lddsp	r9,sp[0x40]
8000ef18:	59 f8       	cp.w	r8,31
8000ef1a:	e0 89 00 11 	brgt	8000ef3c <_vfprintf_r+0xf2c>
8000ef1e:	f2 cb ff fc 	sub	r11,r9,-4
8000ef22:	51 0b       	stdsp	sp[0x40],r11
8000ef24:	fa c6 f9 44 	sub	r6,sp,-1724
8000ef28:	72 0b       	ld.w	r11,r9[0x0]
8000ef2a:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000ef2e:	f3 4b fd 88 	st.w	r9[-632],r11
8000ef32:	2f f8       	sub	r8,-1
8000ef34:	14 97       	mov	r7,r10
8000ef36:	fb 48 06 b4 	st.w	sp[1716],r8
8000ef3a:	c0 58       	rjmp	8000ef44 <_vfprintf_r+0xf34>
8000ef3c:	72 0b       	ld.w	r11,r9[0x0]
8000ef3e:	14 97       	mov	r7,r10
8000ef40:	2f c9       	sub	r9,-4
8000ef42:	51 09       	stdsp	sp[0x40],r9
8000ef44:	50 1b       	stdsp	sp[0x4],r11
8000ef46:	30 0e       	mov	lr,0
8000ef48:	50 0e       	stdsp	sp[0x0],lr
8000ef4a:	1c 98       	mov	r8,lr
8000ef4c:	e0 8f 02 fe 	bral	8000f548 <_vfprintf_r+0x1538>
8000ef50:	50 a7       	stdsp	sp[0x28],r7
8000ef52:	50 80       	stdsp	sp[0x20],r0
8000ef54:	0c 97       	mov	r7,r6
8000ef56:	04 94       	mov	r4,r2
8000ef58:	06 96       	mov	r6,r3
8000ef5a:	02 92       	mov	r2,r1
8000ef5c:	40 93       	lddsp	r3,sp[0x24]
8000ef5e:	40 41       	lddsp	r1,sp[0x10]
8000ef60:	0e 99       	mov	r9,r7
8000ef62:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000ef66:	40 3c       	lddsp	r12,sp[0xc]
8000ef68:	58 0c       	cp.w	r12,0
8000ef6a:	c1 d0       	breq	8000efa4 <_vfprintf_r+0xf94>
8000ef6c:	10 36       	cp.w	r6,r8
8000ef6e:	c0 64       	brge	8000ef7a <_vfprintf_r+0xf6a>
8000ef70:	fa cb f9 44 	sub	r11,sp,-1724
8000ef74:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000ef78:	c1 d8       	rjmp	8000efb2 <_vfprintf_r+0xfa2>
8000ef7a:	fa c8 f9 50 	sub	r8,sp,-1712
8000ef7e:	1a d8       	st.w	--sp,r8
8000ef80:	fa c8 fa b8 	sub	r8,sp,-1352
8000ef84:	1a d8       	st.w	--sp,r8
8000ef86:	fa c8 fb b4 	sub	r8,sp,-1100
8000ef8a:	1a d8       	st.w	--sp,r8
8000ef8c:	fa c9 ff b4 	sub	r9,sp,-76
8000ef90:	fa c8 f9 40 	sub	r8,sp,-1728
8000ef94:	04 9a       	mov	r10,r2
8000ef96:	0c 9b       	mov	r11,r6
8000ef98:	08 9c       	mov	r12,r4
8000ef9a:	fe b0 f6 a3 	rcall	8000dce0 <get_arg>
8000ef9e:	2f dd       	sub	sp,-12
8000efa0:	78 09       	ld.w	r9,r12[0x0]
8000efa2:	c2 18       	rjmp	8000efe4 <_vfprintf_r+0xfd4>
8000efa4:	2f f7       	sub	r7,-1
8000efa6:	10 39       	cp.w	r9,r8
8000efa8:	c0 84       	brge	8000efb8 <_vfprintf_r+0xfa8>
8000efaa:	fa ca f9 44 	sub	r10,sp,-1724
8000efae:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000efb2:	ec f9 fd 88 	ld.w	r9,r6[-632]
8000efb6:	c1 78       	rjmp	8000efe4 <_vfprintf_r+0xfd4>
8000efb8:	41 09       	lddsp	r9,sp[0x40]
8000efba:	59 f8       	cp.w	r8,31
8000efbc:	e0 89 00 10 	brgt	8000efdc <_vfprintf_r+0xfcc>
8000efc0:	f2 ca ff fc 	sub	r10,r9,-4
8000efc4:	51 0a       	stdsp	sp[0x40],r10
8000efc6:	fa c6 f9 44 	sub	r6,sp,-1724
8000efca:	72 09       	ld.w	r9,r9[0x0]
8000efcc:	ec 08 00 3a 	add	r10,r6,r8<<0x3
8000efd0:	f5 49 fd 88 	st.w	r10[-632],r9
8000efd4:	2f f8       	sub	r8,-1
8000efd6:	fb 48 06 b4 	st.w	sp[1716],r8
8000efda:	c0 58       	rjmp	8000efe4 <_vfprintf_r+0xfd4>
8000efdc:	f2 c8 ff fc 	sub	r8,r9,-4
8000efe0:	51 08       	stdsp	sp[0x40],r8
8000efe2:	72 09       	ld.w	r9,r9[0x0]
8000efe4:	33 08       	mov	r8,48
8000efe6:	fb 68 06 b8 	st.b	sp[1720],r8
8000efea:	37 88       	mov	r8,120
8000efec:	30 0e       	mov	lr,0
8000efee:	fb 68 06 b9 	st.b	sp[1721],r8
8000eff2:	fe cc b5 b6 	sub	r12,pc,-19018
8000eff6:	50 19       	stdsp	sp[0x4],r9
8000eff8:	a1 b5       	sbr	r5,0x1
8000effa:	50 0e       	stdsp	sp[0x0],lr
8000effc:	50 dc       	stdsp	sp[0x34],r12
8000effe:	30 28       	mov	r8,2
8000f000:	37 80       	mov	r0,120
8000f002:	e0 8f 02 a3 	bral	8000f548 <_vfprintf_r+0x1538>
8000f006:	50 a7       	stdsp	sp[0x28],r7
8000f008:	50 80       	stdsp	sp[0x20],r0
8000f00a:	10 90       	mov	r0,r8
8000f00c:	30 08       	mov	r8,0
8000f00e:	fb 68 06 bb 	st.b	sp[1723],r8
8000f012:	0c 97       	mov	r7,r6
8000f014:	04 94       	mov	r4,r2
8000f016:	06 96       	mov	r6,r3
8000f018:	02 92       	mov	r2,r1
8000f01a:	40 93       	lddsp	r3,sp[0x24]
8000f01c:	40 41       	lddsp	r1,sp[0x10]
8000f01e:	0e 99       	mov	r9,r7
8000f020:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000f024:	40 3b       	lddsp	r11,sp[0xc]
8000f026:	58 0b       	cp.w	r11,0
8000f028:	c1 d0       	breq	8000f062 <_vfprintf_r+0x1052>
8000f02a:	10 36       	cp.w	r6,r8
8000f02c:	c0 64       	brge	8000f038 <_vfprintf_r+0x1028>
8000f02e:	fa ca f9 44 	sub	r10,sp,-1724
8000f032:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000f036:	c1 d8       	rjmp	8000f070 <_vfprintf_r+0x1060>
8000f038:	fa c8 f9 50 	sub	r8,sp,-1712
8000f03c:	1a d8       	st.w	--sp,r8
8000f03e:	fa c8 fa b8 	sub	r8,sp,-1352
8000f042:	1a d8       	st.w	--sp,r8
8000f044:	fa c8 fb b4 	sub	r8,sp,-1100
8000f048:	0c 9b       	mov	r11,r6
8000f04a:	1a d8       	st.w	--sp,r8
8000f04c:	04 9a       	mov	r10,r2
8000f04e:	fa c8 f9 40 	sub	r8,sp,-1728
8000f052:	fa c9 ff b4 	sub	r9,sp,-76
8000f056:	08 9c       	mov	r12,r4
8000f058:	fe b0 f6 44 	rcall	8000dce0 <get_arg>
8000f05c:	2f dd       	sub	sp,-12
8000f05e:	78 06       	ld.w	r6,r12[0x0]
8000f060:	c2 08       	rjmp	8000f0a0 <_vfprintf_r+0x1090>
8000f062:	2f f7       	sub	r7,-1
8000f064:	10 39       	cp.w	r9,r8
8000f066:	c0 84       	brge	8000f076 <_vfprintf_r+0x1066>
8000f068:	fa c9 f9 44 	sub	r9,sp,-1724
8000f06c:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000f070:	ec f6 fd 88 	ld.w	r6,r6[-632]
8000f074:	c1 68       	rjmp	8000f0a0 <_vfprintf_r+0x1090>
8000f076:	41 09       	lddsp	r9,sp[0x40]
8000f078:	59 f8       	cp.w	r8,31
8000f07a:	e0 89 00 10 	brgt	8000f09a <_vfprintf_r+0x108a>
8000f07e:	f2 ca ff fc 	sub	r10,r9,-4
8000f082:	51 0a       	stdsp	sp[0x40],r10
8000f084:	72 06       	ld.w	r6,r9[0x0]
8000f086:	fa ce f9 44 	sub	lr,sp,-1724
8000f08a:	fc 08 00 39 	add	r9,lr,r8<<0x3
8000f08e:	f3 46 fd 88 	st.w	r9[-632],r6
8000f092:	2f f8       	sub	r8,-1
8000f094:	fb 48 06 b4 	st.w	sp[1716],r8
8000f098:	c0 48       	rjmp	8000f0a0 <_vfprintf_r+0x1090>
8000f09a:	72 06       	ld.w	r6,r9[0x0]
8000f09c:	2f c9       	sub	r9,-4
8000f09e:	51 09       	stdsp	sp[0x40],r9
8000f0a0:	40 2c       	lddsp	r12,sp[0x8]
8000f0a2:	58 0c       	cp.w	r12,0
8000f0a4:	c1 05       	brlt	8000f0c4 <_vfprintf_r+0x10b4>
8000f0a6:	18 9a       	mov	r10,r12
8000f0a8:	30 0b       	mov	r11,0
8000f0aa:	0c 9c       	mov	r12,r6
8000f0ac:	e0 a0 14 58 	rcall	8001195c <memchr>
8000f0b0:	e0 80 02 df 	breq	8000f66e <_vfprintf_r+0x165e>
8000f0b4:	f8 06 01 02 	sub	r2,r12,r6
8000f0b8:	40 2b       	lddsp	r11,sp[0x8]
8000f0ba:	16 32       	cp.w	r2,r11
8000f0bc:	e0 89 02 d9 	brgt	8000f66e <_vfprintf_r+0x165e>
8000f0c0:	e0 8f 02 d4 	bral	8000f668 <_vfprintf_r+0x1658>
8000f0c4:	30 0a       	mov	r10,0
8000f0c6:	0c 9c       	mov	r12,r6
8000f0c8:	50 2a       	stdsp	sp[0x8],r10
8000f0ca:	fe b0 f5 ff 	rcall	8000dcc8 <strlen>
8000f0ce:	18 92       	mov	r2,r12
8000f0d0:	e0 8f 02 d2 	bral	8000f674 <_vfprintf_r+0x1664>
8000f0d4:	50 a7       	stdsp	sp[0x28],r7
8000f0d6:	50 80       	stdsp	sp[0x20],r0
8000f0d8:	0c 97       	mov	r7,r6
8000f0da:	04 94       	mov	r4,r2
8000f0dc:	06 96       	mov	r6,r3
8000f0de:	02 92       	mov	r2,r1
8000f0e0:	40 93       	lddsp	r3,sp[0x24]
8000f0e2:	10 90       	mov	r0,r8
8000f0e4:	40 41       	lddsp	r1,sp[0x10]
8000f0e6:	a5 a5       	sbr	r5,0x4
8000f0e8:	c0 a8       	rjmp	8000f0fc <_vfprintf_r+0x10ec>
8000f0ea:	50 a7       	stdsp	sp[0x28],r7
8000f0ec:	50 80       	stdsp	sp[0x20],r0
8000f0ee:	0c 97       	mov	r7,r6
8000f0f0:	04 94       	mov	r4,r2
8000f0f2:	06 96       	mov	r6,r3
8000f0f4:	02 92       	mov	r2,r1
8000f0f6:	40 93       	lddsp	r3,sp[0x24]
8000f0f8:	10 90       	mov	r0,r8
8000f0fa:	40 41       	lddsp	r1,sp[0x10]
8000f0fc:	ed b5 00 05 	bld	r5,0x5
8000f100:	c5 61       	brne	8000f1ac <_vfprintf_r+0x119c>
8000f102:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000f106:	40 39       	lddsp	r9,sp[0xc]
8000f108:	58 09       	cp.w	r9,0
8000f10a:	c2 10       	breq	8000f14c <_vfprintf_r+0x113c>
8000f10c:	10 36       	cp.w	r6,r8
8000f10e:	c0 74       	brge	8000f11c <_vfprintf_r+0x110c>
8000f110:	fa c8 f9 44 	sub	r8,sp,-1724
8000f114:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000f118:	c2 38       	rjmp	8000f15e <_vfprintf_r+0x114e>
8000f11a:	d7 03       	nop
8000f11c:	fa c8 f9 50 	sub	r8,sp,-1712
8000f120:	1a d8       	st.w	--sp,r8
8000f122:	fa c8 fa b8 	sub	r8,sp,-1352
8000f126:	1a d8       	st.w	--sp,r8
8000f128:	fa c8 fb b4 	sub	r8,sp,-1100
8000f12c:	1a d8       	st.w	--sp,r8
8000f12e:	fa c8 f9 40 	sub	r8,sp,-1728
8000f132:	fa c9 ff b4 	sub	r9,sp,-76
8000f136:	04 9a       	mov	r10,r2
8000f138:	0c 9b       	mov	r11,r6
8000f13a:	08 9c       	mov	r12,r4
8000f13c:	fe b0 f5 d2 	rcall	8000dce0 <get_arg>
8000f140:	2f dd       	sub	sp,-12
8000f142:	f8 e8 00 00 	ld.d	r8,r12[0]
8000f146:	fa e9 00 00 	st.d	sp[0],r8
8000f14a:	c2 e8       	rjmp	8000f1a6 <_vfprintf_r+0x1196>
8000f14c:	ee ca ff ff 	sub	r10,r7,-1
8000f150:	10 37       	cp.w	r7,r8
8000f152:	c0 b4       	brge	8000f168 <_vfprintf_r+0x1158>
8000f154:	fa c8 f9 44 	sub	r8,sp,-1724
8000f158:	14 97       	mov	r7,r10
8000f15a:	f0 06 00 36 	add	r6,r8,r6<<0x3
8000f15e:	ec ea fd 88 	ld.d	r10,r6[-632]
8000f162:	fa eb 00 00 	st.d	sp[0],r10
8000f166:	c2 08       	rjmp	8000f1a6 <_vfprintf_r+0x1196>
8000f168:	41 09       	lddsp	r9,sp[0x40]
8000f16a:	59 f8       	cp.w	r8,31
8000f16c:	e0 89 00 16 	brgt	8000f198 <_vfprintf_r+0x1188>
8000f170:	f2 e6 00 00 	ld.d	r6,r9[0]
8000f174:	f2 cb ff f8 	sub	r11,r9,-8
8000f178:	fa e7 00 00 	st.d	sp[0],r6
8000f17c:	51 0b       	stdsp	sp[0x40],r11
8000f17e:	fa c6 f9 44 	sub	r6,sp,-1724
8000f182:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000f186:	fa e6 00 00 	ld.d	r6,sp[0]
8000f18a:	f2 e7 fd 88 	st.d	r9[-632],r6
8000f18e:	2f f8       	sub	r8,-1
8000f190:	14 97       	mov	r7,r10
8000f192:	fb 48 06 b4 	st.w	sp[1716],r8
8000f196:	c0 88       	rjmp	8000f1a6 <_vfprintf_r+0x1196>
8000f198:	f2 e6 00 00 	ld.d	r6,r9[0]
8000f19c:	2f 89       	sub	r9,-8
8000f19e:	fa e7 00 00 	st.d	sp[0],r6
8000f1a2:	51 09       	stdsp	sp[0x40],r9
8000f1a4:	14 97       	mov	r7,r10
8000f1a6:	30 18       	mov	r8,1
8000f1a8:	e0 8f 01 d0 	bral	8000f548 <_vfprintf_r+0x1538>
8000f1ac:	ed b5 00 04 	bld	r5,0x4
8000f1b0:	c1 61       	brne	8000f1dc <_vfprintf_r+0x11cc>
8000f1b2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000f1b6:	40 3e       	lddsp	lr,sp[0xc]
8000f1b8:	58 0e       	cp.w	lr,0
8000f1ba:	c0 80       	breq	8000f1ca <_vfprintf_r+0x11ba>
8000f1bc:	10 36       	cp.w	r6,r8
8000f1be:	c6 74       	brge	8000f28c <_vfprintf_r+0x127c>
8000f1c0:	fa cc f9 44 	sub	r12,sp,-1724
8000f1c4:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000f1c8:	c8 08       	rjmp	8000f2c8 <_vfprintf_r+0x12b8>
8000f1ca:	ee ca ff ff 	sub	r10,r7,-1
8000f1ce:	10 37       	cp.w	r7,r8
8000f1d0:	c7 f4       	brge	8000f2ce <_vfprintf_r+0x12be>
8000f1d2:	fa cb f9 44 	sub	r11,sp,-1724
8000f1d6:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000f1da:	c7 68       	rjmp	8000f2c6 <_vfprintf_r+0x12b6>
8000f1dc:	ed b5 00 06 	bld	r5,0x6
8000f1e0:	c4 a1       	brne	8000f274 <_vfprintf_r+0x1264>
8000f1e2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000f1e6:	40 3c       	lddsp	r12,sp[0xc]
8000f1e8:	58 0c       	cp.w	r12,0
8000f1ea:	c1 d0       	breq	8000f224 <_vfprintf_r+0x1214>
8000f1ec:	10 36       	cp.w	r6,r8
8000f1ee:	c0 64       	brge	8000f1fa <_vfprintf_r+0x11ea>
8000f1f0:	fa cb f9 44 	sub	r11,sp,-1724
8000f1f4:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000f1f8:	c1 f8       	rjmp	8000f236 <_vfprintf_r+0x1226>
8000f1fa:	fa c8 f9 50 	sub	r8,sp,-1712
8000f1fe:	1a d8       	st.w	--sp,r8
8000f200:	fa c8 fa b8 	sub	r8,sp,-1352
8000f204:	1a d8       	st.w	--sp,r8
8000f206:	fa c8 fb b4 	sub	r8,sp,-1100
8000f20a:	1a d8       	st.w	--sp,r8
8000f20c:	fa c8 f9 40 	sub	r8,sp,-1728
8000f210:	fa c9 ff b4 	sub	r9,sp,-76
8000f214:	04 9a       	mov	r10,r2
8000f216:	0c 9b       	mov	r11,r6
8000f218:	08 9c       	mov	r12,r4
8000f21a:	fe b0 f5 63 	rcall	8000dce0 <get_arg>
8000f21e:	2f dd       	sub	sp,-12
8000f220:	98 18       	ld.sh	r8,r12[0x2]
8000f222:	c2 68       	rjmp	8000f26e <_vfprintf_r+0x125e>
8000f224:	ee ca ff ff 	sub	r10,r7,-1
8000f228:	10 37       	cp.w	r7,r8
8000f22a:	c0 94       	brge	8000f23c <_vfprintf_r+0x122c>
8000f22c:	fa c9 f9 44 	sub	r9,sp,-1724
8000f230:	14 97       	mov	r7,r10
8000f232:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000f236:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000f23a:	c1 a8       	rjmp	8000f26e <_vfprintf_r+0x125e>
8000f23c:	41 09       	lddsp	r9,sp[0x40]
8000f23e:	59 f8       	cp.w	r8,31
8000f240:	e0 89 00 13 	brgt	8000f266 <_vfprintf_r+0x1256>
8000f244:	f2 cb ff fc 	sub	r11,r9,-4
8000f248:	51 0b       	stdsp	sp[0x40],r11
8000f24a:	72 09       	ld.w	r9,r9[0x0]
8000f24c:	fa c6 f9 44 	sub	r6,sp,-1724
8000f250:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000f254:	2f f8       	sub	r8,-1
8000f256:	f7 49 fd 88 	st.w	r11[-632],r9
8000f25a:	fb 48 06 b4 	st.w	sp[1716],r8
8000f25e:	14 97       	mov	r7,r10
8000f260:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000f264:	c0 58       	rjmp	8000f26e <_vfprintf_r+0x125e>
8000f266:	92 18       	ld.sh	r8,r9[0x2]
8000f268:	14 97       	mov	r7,r10
8000f26a:	2f c9       	sub	r9,-4
8000f26c:	51 09       	stdsp	sp[0x40],r9
8000f26e:	5c 78       	castu.h	r8
8000f270:	50 18       	stdsp	sp[0x4],r8
8000f272:	c4 68       	rjmp	8000f2fe <_vfprintf_r+0x12ee>
8000f274:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000f278:	40 3c       	lddsp	r12,sp[0xc]
8000f27a:	58 0c       	cp.w	r12,0
8000f27c:	c1 d0       	breq	8000f2b6 <_vfprintf_r+0x12a6>
8000f27e:	10 36       	cp.w	r6,r8
8000f280:	c0 64       	brge	8000f28c <_vfprintf_r+0x127c>
8000f282:	fa cb f9 44 	sub	r11,sp,-1724
8000f286:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000f28a:	c1 f8       	rjmp	8000f2c8 <_vfprintf_r+0x12b8>
8000f28c:	fa c8 f9 50 	sub	r8,sp,-1712
8000f290:	1a d8       	st.w	--sp,r8
8000f292:	fa c8 fa b8 	sub	r8,sp,-1352
8000f296:	0c 9b       	mov	r11,r6
8000f298:	1a d8       	st.w	--sp,r8
8000f29a:	fa c8 fb b4 	sub	r8,sp,-1100
8000f29e:	04 9a       	mov	r10,r2
8000f2a0:	1a d8       	st.w	--sp,r8
8000f2a2:	08 9c       	mov	r12,r4
8000f2a4:	fa c8 f9 40 	sub	r8,sp,-1728
8000f2a8:	fa c9 ff b4 	sub	r9,sp,-76
8000f2ac:	fe b0 f5 1a 	rcall	8000dce0 <get_arg>
8000f2b0:	2f dd       	sub	sp,-12
8000f2b2:	78 0b       	ld.w	r11,r12[0x0]
8000f2b4:	c2 48       	rjmp	8000f2fc <_vfprintf_r+0x12ec>
8000f2b6:	ee ca ff ff 	sub	r10,r7,-1
8000f2ba:	10 37       	cp.w	r7,r8
8000f2bc:	c0 94       	brge	8000f2ce <_vfprintf_r+0x12be>
8000f2be:	fa c9 f9 44 	sub	r9,sp,-1724
8000f2c2:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000f2c6:	14 97       	mov	r7,r10
8000f2c8:	ec fb fd 88 	ld.w	r11,r6[-632]
8000f2cc:	c1 88       	rjmp	8000f2fc <_vfprintf_r+0x12ec>
8000f2ce:	41 09       	lddsp	r9,sp[0x40]
8000f2d0:	59 f8       	cp.w	r8,31
8000f2d2:	e0 89 00 11 	brgt	8000f2f4 <_vfprintf_r+0x12e4>
8000f2d6:	f2 cb ff fc 	sub	r11,r9,-4
8000f2da:	51 0b       	stdsp	sp[0x40],r11
8000f2dc:	fa c6 f9 44 	sub	r6,sp,-1724
8000f2e0:	72 0b       	ld.w	r11,r9[0x0]
8000f2e2:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000f2e6:	f3 4b fd 88 	st.w	r9[-632],r11
8000f2ea:	2f f8       	sub	r8,-1
8000f2ec:	14 97       	mov	r7,r10
8000f2ee:	fb 48 06 b4 	st.w	sp[1716],r8
8000f2f2:	c0 58       	rjmp	8000f2fc <_vfprintf_r+0x12ec>
8000f2f4:	72 0b       	ld.w	r11,r9[0x0]
8000f2f6:	14 97       	mov	r7,r10
8000f2f8:	2f c9       	sub	r9,-4
8000f2fa:	51 09       	stdsp	sp[0x40],r9
8000f2fc:	50 1b       	stdsp	sp[0x4],r11
8000f2fe:	30 0e       	mov	lr,0
8000f300:	30 18       	mov	r8,1
8000f302:	50 0e       	stdsp	sp[0x0],lr
8000f304:	c2 29       	rjmp	8000f548 <_vfprintf_r+0x1538>
8000f306:	50 a7       	stdsp	sp[0x28],r7
8000f308:	50 80       	stdsp	sp[0x20],r0
8000f30a:	0c 97       	mov	r7,r6
8000f30c:	04 94       	mov	r4,r2
8000f30e:	06 96       	mov	r6,r3
8000f310:	02 92       	mov	r2,r1
8000f312:	fe cc b8 d6 	sub	r12,pc,-18218
8000f316:	40 93       	lddsp	r3,sp[0x24]
8000f318:	10 90       	mov	r0,r8
8000f31a:	40 41       	lddsp	r1,sp[0x10]
8000f31c:	50 dc       	stdsp	sp[0x34],r12
8000f31e:	ed b5 00 05 	bld	r5,0x5
8000f322:	c5 51       	brne	8000f3cc <_vfprintf_r+0x13bc>
8000f324:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000f328:	40 3b       	lddsp	r11,sp[0xc]
8000f32a:	58 0b       	cp.w	r11,0
8000f32c:	c2 20       	breq	8000f370 <_vfprintf_r+0x1360>
8000f32e:	10 36       	cp.w	r6,r8
8000f330:	c0 a4       	brge	8000f344 <_vfprintf_r+0x1334>
8000f332:	fa ca f9 44 	sub	r10,sp,-1724
8000f336:	f4 06 00 36 	add	r6,r10,r6<<0x3
8000f33a:	ec e8 fd 88 	ld.d	r8,r6[-632]
8000f33e:	fa e9 00 00 	st.d	sp[0],r8
8000f342:	cf 28       	rjmp	8000f526 <_vfprintf_r+0x1516>
8000f344:	fa c8 f9 50 	sub	r8,sp,-1712
8000f348:	1a d8       	st.w	--sp,r8
8000f34a:	fa c8 fa b8 	sub	r8,sp,-1352
8000f34e:	04 9a       	mov	r10,r2
8000f350:	1a d8       	st.w	--sp,r8
8000f352:	0c 9b       	mov	r11,r6
8000f354:	fa c8 fb b4 	sub	r8,sp,-1100
8000f358:	08 9c       	mov	r12,r4
8000f35a:	1a d8       	st.w	--sp,r8
8000f35c:	fa c8 f9 40 	sub	r8,sp,-1728
8000f360:	fa c9 ff b4 	sub	r9,sp,-76
8000f364:	fe b0 f4 be 	rcall	8000dce0 <get_arg>
8000f368:	2f dd       	sub	sp,-12
8000f36a:	f8 ea 00 00 	ld.d	r10,r12[0]
8000f36e:	c0 c8       	rjmp	8000f386 <_vfprintf_r+0x1376>
8000f370:	ee ca ff ff 	sub	r10,r7,-1
8000f374:	10 37       	cp.w	r7,r8
8000f376:	c0 b4       	brge	8000f38c <_vfprintf_r+0x137c>
8000f378:	fa c9 f9 44 	sub	r9,sp,-1724
8000f37c:	14 97       	mov	r7,r10
8000f37e:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000f382:	ec ea fd 88 	ld.d	r10,r6[-632]
8000f386:	fa eb 00 00 	st.d	sp[0],r10
8000f38a:	cc e8       	rjmp	8000f526 <_vfprintf_r+0x1516>
8000f38c:	41 09       	lddsp	r9,sp[0x40]
8000f38e:	59 f8       	cp.w	r8,31
8000f390:	e0 89 00 16 	brgt	8000f3bc <_vfprintf_r+0x13ac>
8000f394:	f2 e6 00 00 	ld.d	r6,r9[0]
8000f398:	f2 cb ff f8 	sub	r11,r9,-8
8000f39c:	fa e7 00 00 	st.d	sp[0],r6
8000f3a0:	51 0b       	stdsp	sp[0x40],r11
8000f3a2:	fa c6 f9 44 	sub	r6,sp,-1724
8000f3a6:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000f3aa:	fa e6 00 00 	ld.d	r6,sp[0]
8000f3ae:	f2 e7 fd 88 	st.d	r9[-632],r6
8000f3b2:	2f f8       	sub	r8,-1
8000f3b4:	14 97       	mov	r7,r10
8000f3b6:	fb 48 06 b4 	st.w	sp[1716],r8
8000f3ba:	cb 68       	rjmp	8000f526 <_vfprintf_r+0x1516>
8000f3bc:	f2 e6 00 00 	ld.d	r6,r9[0]
8000f3c0:	2f 89       	sub	r9,-8
8000f3c2:	fa e7 00 00 	st.d	sp[0],r6
8000f3c6:	51 09       	stdsp	sp[0x40],r9
8000f3c8:	14 97       	mov	r7,r10
8000f3ca:	ca e8       	rjmp	8000f526 <_vfprintf_r+0x1516>
8000f3cc:	ed b5 00 04 	bld	r5,0x4
8000f3d0:	c1 71       	brne	8000f3fe <_vfprintf_r+0x13ee>
8000f3d2:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000f3d6:	40 3e       	lddsp	lr,sp[0xc]
8000f3d8:	58 0e       	cp.w	lr,0
8000f3da:	c0 80       	breq	8000f3ea <_vfprintf_r+0x13da>
8000f3dc:	10 36       	cp.w	r6,r8
8000f3de:	c6 94       	brge	8000f4b0 <_vfprintf_r+0x14a0>
8000f3e0:	fa cc f9 44 	sub	r12,sp,-1724
8000f3e4:	f8 06 00 36 	add	r6,r12,r6<<0x3
8000f3e8:	c8 28       	rjmp	8000f4ec <_vfprintf_r+0x14dc>
8000f3ea:	ee ca ff ff 	sub	r10,r7,-1
8000f3ee:	10 37       	cp.w	r7,r8
8000f3f0:	e0 84 00 81 	brge	8000f4f2 <_vfprintf_r+0x14e2>
8000f3f4:	fa cb f9 44 	sub	r11,sp,-1724
8000f3f8:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000f3fc:	c7 78       	rjmp	8000f4ea <_vfprintf_r+0x14da>
8000f3fe:	ed b5 00 06 	bld	r5,0x6
8000f402:	c4 b1       	brne	8000f498 <_vfprintf_r+0x1488>
8000f404:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000f408:	40 3c       	lddsp	r12,sp[0xc]
8000f40a:	58 0c       	cp.w	r12,0
8000f40c:	c1 d0       	breq	8000f446 <_vfprintf_r+0x1436>
8000f40e:	10 36       	cp.w	r6,r8
8000f410:	c0 64       	brge	8000f41c <_vfprintf_r+0x140c>
8000f412:	fa cb f9 44 	sub	r11,sp,-1724
8000f416:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000f41a:	c1 f8       	rjmp	8000f458 <_vfprintf_r+0x1448>
8000f41c:	fa c8 f9 50 	sub	r8,sp,-1712
8000f420:	1a d8       	st.w	--sp,r8
8000f422:	fa c8 fa b8 	sub	r8,sp,-1352
8000f426:	1a d8       	st.w	--sp,r8
8000f428:	fa c8 fb b4 	sub	r8,sp,-1100
8000f42c:	1a d8       	st.w	--sp,r8
8000f42e:	fa c8 f9 40 	sub	r8,sp,-1728
8000f432:	fa c9 ff b4 	sub	r9,sp,-76
8000f436:	04 9a       	mov	r10,r2
8000f438:	0c 9b       	mov	r11,r6
8000f43a:	08 9c       	mov	r12,r4
8000f43c:	fe b0 f4 52 	rcall	8000dce0 <get_arg>
8000f440:	2f dd       	sub	sp,-12
8000f442:	98 18       	ld.sh	r8,r12[0x2]
8000f444:	c2 78       	rjmp	8000f492 <_vfprintf_r+0x1482>
8000f446:	ee ca ff ff 	sub	r10,r7,-1
8000f44a:	10 37       	cp.w	r7,r8
8000f44c:	c0 a4       	brge	8000f460 <_vfprintf_r+0x1450>
8000f44e:	fa c9 f9 44 	sub	r9,sp,-1724
8000f452:	14 97       	mov	r7,r10
8000f454:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000f458:	ed 08 fd 8a 	ld.sh	r8,r6[-630]
8000f45c:	c1 b8       	rjmp	8000f492 <_vfprintf_r+0x1482>
8000f45e:	d7 03       	nop
8000f460:	41 09       	lddsp	r9,sp[0x40]
8000f462:	59 f8       	cp.w	r8,31
8000f464:	e0 89 00 13 	brgt	8000f48a <_vfprintf_r+0x147a>
8000f468:	f2 cb ff fc 	sub	r11,r9,-4
8000f46c:	51 0b       	stdsp	sp[0x40],r11
8000f46e:	72 09       	ld.w	r9,r9[0x0]
8000f470:	fa c6 f9 44 	sub	r6,sp,-1724
8000f474:	ec 08 00 3b 	add	r11,r6,r8<<0x3
8000f478:	2f f8       	sub	r8,-1
8000f47a:	f7 49 fd 88 	st.w	r11[-632],r9
8000f47e:	fb 48 06 b4 	st.w	sp[1716],r8
8000f482:	14 97       	mov	r7,r10
8000f484:	f1 d9 b0 10 	bfexts	r8,r9,0x0,0x10
8000f488:	c0 58       	rjmp	8000f492 <_vfprintf_r+0x1482>
8000f48a:	92 18       	ld.sh	r8,r9[0x2]
8000f48c:	14 97       	mov	r7,r10
8000f48e:	2f c9       	sub	r9,-4
8000f490:	51 09       	stdsp	sp[0x40],r9
8000f492:	5c 78       	castu.h	r8
8000f494:	50 18       	stdsp	sp[0x4],r8
8000f496:	c4 68       	rjmp	8000f522 <_vfprintf_r+0x1512>
8000f498:	fa f8 06 b4 	ld.w	r8,sp[1716]
8000f49c:	40 3c       	lddsp	r12,sp[0xc]
8000f49e:	58 0c       	cp.w	r12,0
8000f4a0:	c1 d0       	breq	8000f4da <_vfprintf_r+0x14ca>
8000f4a2:	10 36       	cp.w	r6,r8
8000f4a4:	c0 64       	brge	8000f4b0 <_vfprintf_r+0x14a0>
8000f4a6:	fa cb f9 44 	sub	r11,sp,-1724
8000f4aa:	f6 06 00 36 	add	r6,r11,r6<<0x3
8000f4ae:	c1 f8       	rjmp	8000f4ec <_vfprintf_r+0x14dc>
8000f4b0:	fa c8 f9 50 	sub	r8,sp,-1712
8000f4b4:	1a d8       	st.w	--sp,r8
8000f4b6:	fa c8 fa b8 	sub	r8,sp,-1352
8000f4ba:	0c 9b       	mov	r11,r6
8000f4bc:	1a d8       	st.w	--sp,r8
8000f4be:	fa c8 fb b4 	sub	r8,sp,-1100
8000f4c2:	04 9a       	mov	r10,r2
8000f4c4:	1a d8       	st.w	--sp,r8
8000f4c6:	08 9c       	mov	r12,r4
8000f4c8:	fa c8 f9 40 	sub	r8,sp,-1728
8000f4cc:	fa c9 ff b4 	sub	r9,sp,-76
8000f4d0:	fe b0 f4 08 	rcall	8000dce0 <get_arg>
8000f4d4:	2f dd       	sub	sp,-12
8000f4d6:	78 0b       	ld.w	r11,r12[0x0]
8000f4d8:	c2 48       	rjmp	8000f520 <_vfprintf_r+0x1510>
8000f4da:	ee ca ff ff 	sub	r10,r7,-1
8000f4de:	10 37       	cp.w	r7,r8
8000f4e0:	c0 94       	brge	8000f4f2 <_vfprintf_r+0x14e2>
8000f4e2:	fa c9 f9 44 	sub	r9,sp,-1724
8000f4e6:	f2 06 00 36 	add	r6,r9,r6<<0x3
8000f4ea:	14 97       	mov	r7,r10
8000f4ec:	ec fb fd 88 	ld.w	r11,r6[-632]
8000f4f0:	c1 88       	rjmp	8000f520 <_vfprintf_r+0x1510>
8000f4f2:	41 09       	lddsp	r9,sp[0x40]
8000f4f4:	59 f8       	cp.w	r8,31
8000f4f6:	e0 89 00 11 	brgt	8000f518 <_vfprintf_r+0x1508>
8000f4fa:	f2 cb ff fc 	sub	r11,r9,-4
8000f4fe:	51 0b       	stdsp	sp[0x40],r11
8000f500:	fa c6 f9 44 	sub	r6,sp,-1724
8000f504:	72 0b       	ld.w	r11,r9[0x0]
8000f506:	ec 08 00 39 	add	r9,r6,r8<<0x3
8000f50a:	f3 4b fd 88 	st.w	r9[-632],r11
8000f50e:	2f f8       	sub	r8,-1
8000f510:	14 97       	mov	r7,r10
8000f512:	fb 48 06 b4 	st.w	sp[1716],r8
8000f516:	c0 58       	rjmp	8000f520 <_vfprintf_r+0x1510>
8000f518:	72 0b       	ld.w	r11,r9[0x0]
8000f51a:	14 97       	mov	r7,r10
8000f51c:	2f c9       	sub	r9,-4
8000f51e:	51 09       	stdsp	sp[0x40],r9
8000f520:	50 1b       	stdsp	sp[0x4],r11
8000f522:	30 0e       	mov	lr,0
8000f524:	50 0e       	stdsp	sp[0x0],lr
8000f526:	40 08       	lddsp	r8,sp[0x0]
8000f528:	40 1c       	lddsp	r12,sp[0x4]
8000f52a:	18 48       	or	r8,r12
8000f52c:	5f 19       	srne	r9
8000f52e:	0a 98       	mov	r8,r5
8000f530:	eb e9 00 09 	and	r9,r5,r9
8000f534:	a1 b8       	sbr	r8,0x1
8000f536:	58 09       	cp.w	r9,0
8000f538:	c0 70       	breq	8000f546 <_vfprintf_r+0x1536>
8000f53a:	10 95       	mov	r5,r8
8000f53c:	fb 60 06 b9 	st.b	sp[1721],r0
8000f540:	33 08       	mov	r8,48
8000f542:	fb 68 06 b8 	st.b	sp[1720],r8
8000f546:	30 28       	mov	r8,2
8000f548:	30 09       	mov	r9,0
8000f54a:	fb 69 06 bb 	st.b	sp[1723],r9
8000f54e:	0a 99       	mov	r9,r5
8000f550:	a7 d9       	cbr	r9,0x7
8000f552:	40 2b       	lddsp	r11,sp[0x8]
8000f554:	40 16       	lddsp	r6,sp[0x4]
8000f556:	58 0b       	cp.w	r11,0
8000f558:	5f 1a       	srne	r10
8000f55a:	f2 05 17 40 	movge	r5,r9
8000f55e:	fa c2 f9 78 	sub	r2,sp,-1672
8000f562:	40 09       	lddsp	r9,sp[0x0]
8000f564:	0c 49       	or	r9,r6
8000f566:	5f 19       	srne	r9
8000f568:	f5 e9 10 09 	or	r9,r10,r9
8000f56c:	c5 c0       	breq	8000f624 <_vfprintf_r+0x1614>
8000f56e:	30 19       	mov	r9,1
8000f570:	f2 08 18 00 	cp.b	r8,r9
8000f574:	c0 60       	breq	8000f580 <_vfprintf_r+0x1570>
8000f576:	30 29       	mov	r9,2
8000f578:	f2 08 18 00 	cp.b	r8,r9
8000f57c:	c0 41       	brne	8000f584 <_vfprintf_r+0x1574>
8000f57e:	c3 c8       	rjmp	8000f5f6 <_vfprintf_r+0x15e6>
8000f580:	04 96       	mov	r6,r2
8000f582:	c3 08       	rjmp	8000f5e2 <_vfprintf_r+0x15d2>
8000f584:	04 96       	mov	r6,r2
8000f586:	fa e8 00 00 	ld.d	r8,sp[0]
8000f58a:	f5 d8 c0 03 	bfextu	r10,r8,0x0,0x3
8000f58e:	2d 0a       	sub	r10,-48
8000f590:	0c fa       	st.b	--r6,r10
8000f592:	f0 0b 16 03 	lsr	r11,r8,0x3
8000f596:	f2 0c 16 03 	lsr	r12,r9,0x3
8000f59a:	f7 e9 11 db 	or	r11,r11,r9<<0x1d
8000f59e:	18 99       	mov	r9,r12
8000f5a0:	16 98       	mov	r8,r11
8000f5a2:	58 08       	cp.w	r8,0
8000f5a4:	5c 29       	cpc	r9
8000f5a6:	cf 21       	brne	8000f58a <_vfprintf_r+0x157a>
8000f5a8:	fa e9 00 00 	st.d	sp[0],r8
8000f5ac:	ed b5 00 00 	bld	r5,0x0
8000f5b0:	c4 51       	brne	8000f63a <_vfprintf_r+0x162a>
8000f5b2:	33 09       	mov	r9,48
8000f5b4:	f2 0a 18 00 	cp.b	r10,r9
8000f5b8:	c4 10       	breq	8000f63a <_vfprintf_r+0x162a>
8000f5ba:	0c f9       	st.b	--r6,r9
8000f5bc:	c3 f8       	rjmp	8000f63a <_vfprintf_r+0x162a>
8000f5be:	fa ea 00 00 	ld.d	r10,sp[0]
8000f5c2:	30 a8       	mov	r8,10
8000f5c4:	30 09       	mov	r9,0
8000f5c6:	e0 a0 1d 6d 	rcall	800130a0 <__avr32_umod64>
8000f5ca:	30 a8       	mov	r8,10
8000f5cc:	2d 0a       	sub	r10,-48
8000f5ce:	30 09       	mov	r9,0
8000f5d0:	ac 8a       	st.b	r6[0x0],r10
8000f5d2:	fa ea 00 00 	ld.d	r10,sp[0]
8000f5d6:	fe b0 f0 29 	rcall	8000d628 <__avr32_udiv64>
8000f5da:	16 99       	mov	r9,r11
8000f5dc:	14 98       	mov	r8,r10
8000f5de:	fa e9 00 00 	st.d	sp[0],r8
8000f5e2:	20 16       	sub	r6,1
8000f5e4:	fa ea 00 00 	ld.d	r10,sp[0]
8000f5e8:	58 9a       	cp.w	r10,9
8000f5ea:	5c 2b       	cpc	r11
8000f5ec:	fe 9b ff e9 	brhi	8000f5be <_vfprintf_r+0x15ae>
8000f5f0:	1b f8       	ld.ub	r8,sp[0x7]
8000f5f2:	2d 08       	sub	r8,-48
8000f5f4:	c2 08       	rjmp	8000f634 <_vfprintf_r+0x1624>
8000f5f6:	04 96       	mov	r6,r2
8000f5f8:	fa e8 00 00 	ld.d	r8,sp[0]
8000f5fc:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
8000f600:	40 de       	lddsp	lr,sp[0x34]
8000f602:	fc 0a 07 0a 	ld.ub	r10,lr[r10]
8000f606:	0c fa       	st.b	--r6,r10
8000f608:	f2 0b 16 04 	lsr	r11,r9,0x4
8000f60c:	f0 0a 16 04 	lsr	r10,r8,0x4
8000f610:	f5 e9 11 ca 	or	r10,r10,r9<<0x1c
8000f614:	16 99       	mov	r9,r11
8000f616:	14 98       	mov	r8,r10
8000f618:	58 08       	cp.w	r8,0
8000f61a:	5c 29       	cpc	r9
8000f61c:	cf 01       	brne	8000f5fc <_vfprintf_r+0x15ec>
8000f61e:	fa e9 00 00 	st.d	sp[0],r8
8000f622:	c0 c8       	rjmp	8000f63a <_vfprintf_r+0x162a>
8000f624:	58 08       	cp.w	r8,0
8000f626:	c0 91       	brne	8000f638 <_vfprintf_r+0x1628>
8000f628:	ed b5 00 00 	bld	r5,0x0
8000f62c:	c0 61       	brne	8000f638 <_vfprintf_r+0x1628>
8000f62e:	fa c6 f9 79 	sub	r6,sp,-1671
8000f632:	33 08       	mov	r8,48
8000f634:	ac 88       	st.b	r6[0x0],r8
8000f636:	c0 28       	rjmp	8000f63a <_vfprintf_r+0x162a>
8000f638:	04 96       	mov	r6,r2
8000f63a:	0c 12       	sub	r2,r6
8000f63c:	c1 c8       	rjmp	8000f674 <_vfprintf_r+0x1664>
8000f63e:	50 a7       	stdsp	sp[0x28],r7
8000f640:	50 80       	stdsp	sp[0x20],r0
8000f642:	40 93       	lddsp	r3,sp[0x24]
8000f644:	0c 97       	mov	r7,r6
8000f646:	10 90       	mov	r0,r8
8000f648:	04 94       	mov	r4,r2
8000f64a:	40 41       	lddsp	r1,sp[0x10]
8000f64c:	58 08       	cp.w	r8,0
8000f64e:	e0 80 04 4f 	breq	8000feec <_vfprintf_r+0x1edc>
8000f652:	fb 68 06 60 	st.b	sp[1632],r8
8000f656:	30 0c       	mov	r12,0
8000f658:	30 08       	mov	r8,0
8000f65a:	30 12       	mov	r2,1
8000f65c:	fb 68 06 bb 	st.b	sp[1723],r8
8000f660:	50 2c       	stdsp	sp[0x8],r12
8000f662:	fa c6 f9 a0 	sub	r6,sp,-1632
8000f666:	c0 78       	rjmp	8000f674 <_vfprintf_r+0x1664>
8000f668:	30 0b       	mov	r11,0
8000f66a:	50 2b       	stdsp	sp[0x8],r11
8000f66c:	c0 48       	rjmp	8000f674 <_vfprintf_r+0x1664>
8000f66e:	40 22       	lddsp	r2,sp[0x8]
8000f670:	30 0a       	mov	r10,0
8000f672:	50 2a       	stdsp	sp[0x8],r10
8000f674:	40 29       	lddsp	r9,sp[0x8]
8000f676:	e4 09 0c 49 	max	r9,r2,r9
8000f67a:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000f67e:	50 39       	stdsp	sp[0xc],r9
8000f680:	0a 9e       	mov	lr,r5
8000f682:	30 09       	mov	r9,0
8000f684:	e2 1e 00 02 	andl	lr,0x2,COH
8000f688:	f2 08 18 00 	cp.b	r8,r9
8000f68c:	fb f8 10 03 	ld.wne	r8,sp[0xc]
8000f690:	f7 b8 01 ff 	subne	r8,-1
8000f694:	fb f8 1a 03 	st.wne	sp[0xc],r8
8000f698:	0a 9b       	mov	r11,r5
8000f69a:	58 0e       	cp.w	lr,0
8000f69c:	fb fc 10 03 	ld.wne	r12,sp[0xc]
8000f6a0:	f7 bc 01 fe 	subne	r12,-2
8000f6a4:	fb fc 1a 03 	st.wne	sp[0xc],r12
8000f6a8:	e2 1b 00 84 	andl	r11,0x84,COH
8000f6ac:	50 fe       	stdsp	sp[0x3c],lr
8000f6ae:	50 9b       	stdsp	sp[0x24],r11
8000f6b0:	c4 71       	brne	8000f73e <_vfprintf_r+0x172e>
8000f6b2:	40 8a       	lddsp	r10,sp[0x20]
8000f6b4:	40 39       	lddsp	r9,sp[0xc]
8000f6b6:	12 1a       	sub	r10,r9
8000f6b8:	50 4a       	stdsp	sp[0x10],r10
8000f6ba:	58 0a       	cp.w	r10,0
8000f6bc:	e0 89 00 20 	brgt	8000f6fc <_vfprintf_r+0x16ec>
8000f6c0:	c3 f8       	rjmp	8000f73e <_vfprintf_r+0x172e>
8000f6c2:	2f 09       	sub	r9,-16
8000f6c4:	2f f8       	sub	r8,-1
8000f6c6:	fe ce bc 72 	sub	lr,pc,-17294
8000f6ca:	31 0c       	mov	r12,16
8000f6cc:	fb 49 06 90 	st.w	sp[1680],r9
8000f6d0:	87 0e       	st.w	r3[0x0],lr
8000f6d2:	87 1c       	st.w	r3[0x4],r12
8000f6d4:	fb 48 06 8c 	st.w	sp[1676],r8
8000f6d8:	58 78       	cp.w	r8,7
8000f6da:	e0 89 00 04 	brgt	8000f6e2 <_vfprintf_r+0x16d2>
8000f6de:	2f 83       	sub	r3,-8
8000f6e0:	c0 b8       	rjmp	8000f6f6 <_vfprintf_r+0x16e6>
8000f6e2:	fa ca f9 78 	sub	r10,sp,-1672
8000f6e6:	02 9b       	mov	r11,r1
8000f6e8:	08 9c       	mov	r12,r4
8000f6ea:	fe b0 f4 85 	rcall	8000dff4 <__sprint_r>
8000f6ee:	e0 81 04 10 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000f6f2:	fa c3 f9 e0 	sub	r3,sp,-1568
8000f6f6:	40 4b       	lddsp	r11,sp[0x10]
8000f6f8:	21 0b       	sub	r11,16
8000f6fa:	50 4b       	stdsp	sp[0x10],r11
8000f6fc:	fa f9 06 90 	ld.w	r9,sp[1680]
8000f700:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000f704:	fe ca bc b0 	sub	r10,pc,-17232
8000f708:	40 4e       	lddsp	lr,sp[0x10]
8000f70a:	59 0e       	cp.w	lr,16
8000f70c:	fe 99 ff db 	brgt	8000f6c2 <_vfprintf_r+0x16b2>
8000f710:	1c 09       	add	r9,lr
8000f712:	2f f8       	sub	r8,-1
8000f714:	87 0a       	st.w	r3[0x0],r10
8000f716:	fb 49 06 90 	st.w	sp[1680],r9
8000f71a:	87 1e       	st.w	r3[0x4],lr
8000f71c:	fb 48 06 8c 	st.w	sp[1676],r8
8000f720:	58 78       	cp.w	r8,7
8000f722:	e0 89 00 04 	brgt	8000f72a <_vfprintf_r+0x171a>
8000f726:	2f 83       	sub	r3,-8
8000f728:	c0 b8       	rjmp	8000f73e <_vfprintf_r+0x172e>
8000f72a:	fa ca f9 78 	sub	r10,sp,-1672
8000f72e:	02 9b       	mov	r11,r1
8000f730:	08 9c       	mov	r12,r4
8000f732:	fe b0 f4 61 	rcall	8000dff4 <__sprint_r>
8000f736:	e0 81 03 ec 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000f73a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000f73e:	30 09       	mov	r9,0
8000f740:	fb 38 06 bb 	ld.ub	r8,sp[1723]
8000f744:	f2 08 18 00 	cp.b	r8,r9
8000f748:	c1 f0       	breq	8000f786 <_vfprintf_r+0x1776>
8000f74a:	fa f8 06 90 	ld.w	r8,sp[1680]
8000f74e:	fa c9 f9 45 	sub	r9,sp,-1723
8000f752:	2f f8       	sub	r8,-1
8000f754:	87 09       	st.w	r3[0x0],r9
8000f756:	fb 48 06 90 	st.w	sp[1680],r8
8000f75a:	30 19       	mov	r9,1
8000f75c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000f760:	87 19       	st.w	r3[0x4],r9
8000f762:	2f f8       	sub	r8,-1
8000f764:	fb 48 06 8c 	st.w	sp[1676],r8
8000f768:	58 78       	cp.w	r8,7
8000f76a:	e0 89 00 04 	brgt	8000f772 <_vfprintf_r+0x1762>
8000f76e:	2f 83       	sub	r3,-8
8000f770:	c0 b8       	rjmp	8000f786 <_vfprintf_r+0x1776>
8000f772:	fa ca f9 78 	sub	r10,sp,-1672
8000f776:	02 9b       	mov	r11,r1
8000f778:	08 9c       	mov	r12,r4
8000f77a:	fe b0 f4 3d 	rcall	8000dff4 <__sprint_r>
8000f77e:	e0 81 03 c8 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000f782:	fa c3 f9 e0 	sub	r3,sp,-1568
8000f786:	40 fc       	lddsp	r12,sp[0x3c]
8000f788:	58 0c       	cp.w	r12,0
8000f78a:	c1 f0       	breq	8000f7c8 <_vfprintf_r+0x17b8>
8000f78c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000f790:	fa c9 f9 48 	sub	r9,sp,-1720
8000f794:	2f e8       	sub	r8,-2
8000f796:	87 09       	st.w	r3[0x0],r9
8000f798:	fb 48 06 90 	st.w	sp[1680],r8
8000f79c:	30 29       	mov	r9,2
8000f79e:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000f7a2:	87 19       	st.w	r3[0x4],r9
8000f7a4:	2f f8       	sub	r8,-1
8000f7a6:	fb 48 06 8c 	st.w	sp[1676],r8
8000f7aa:	58 78       	cp.w	r8,7
8000f7ac:	e0 89 00 04 	brgt	8000f7b4 <_vfprintf_r+0x17a4>
8000f7b0:	2f 83       	sub	r3,-8
8000f7b2:	c0 b8       	rjmp	8000f7c8 <_vfprintf_r+0x17b8>
8000f7b4:	fa ca f9 78 	sub	r10,sp,-1672
8000f7b8:	02 9b       	mov	r11,r1
8000f7ba:	08 9c       	mov	r12,r4
8000f7bc:	fe b0 f4 1c 	rcall	8000dff4 <__sprint_r>
8000f7c0:	e0 81 03 a7 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000f7c4:	fa c3 f9 e0 	sub	r3,sp,-1568
8000f7c8:	40 9b       	lddsp	r11,sp[0x24]
8000f7ca:	e0 4b 00 80 	cp.w	r11,128
8000f7ce:	c4 71       	brne	8000f85c <_vfprintf_r+0x184c>
8000f7d0:	40 8a       	lddsp	r10,sp[0x20]
8000f7d2:	40 39       	lddsp	r9,sp[0xc]
8000f7d4:	12 1a       	sub	r10,r9
8000f7d6:	50 4a       	stdsp	sp[0x10],r10
8000f7d8:	58 0a       	cp.w	r10,0
8000f7da:	e0 89 00 20 	brgt	8000f81a <_vfprintf_r+0x180a>
8000f7de:	c3 f8       	rjmp	8000f85c <_vfprintf_r+0x184c>
8000f7e0:	2f 09       	sub	r9,-16
8000f7e2:	2f f8       	sub	r8,-1
8000f7e4:	fe ce bd 80 	sub	lr,pc,-17024
8000f7e8:	31 0c       	mov	r12,16
8000f7ea:	fb 49 06 90 	st.w	sp[1680],r9
8000f7ee:	87 0e       	st.w	r3[0x0],lr
8000f7f0:	87 1c       	st.w	r3[0x4],r12
8000f7f2:	fb 48 06 8c 	st.w	sp[1676],r8
8000f7f6:	58 78       	cp.w	r8,7
8000f7f8:	e0 89 00 04 	brgt	8000f800 <_vfprintf_r+0x17f0>
8000f7fc:	2f 83       	sub	r3,-8
8000f7fe:	c0 b8       	rjmp	8000f814 <_vfprintf_r+0x1804>
8000f800:	fa ca f9 78 	sub	r10,sp,-1672
8000f804:	02 9b       	mov	r11,r1
8000f806:	08 9c       	mov	r12,r4
8000f808:	fe b0 f3 f6 	rcall	8000dff4 <__sprint_r>
8000f80c:	e0 81 03 81 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000f810:	fa c3 f9 e0 	sub	r3,sp,-1568
8000f814:	40 4b       	lddsp	r11,sp[0x10]
8000f816:	21 0b       	sub	r11,16
8000f818:	50 4b       	stdsp	sp[0x10],r11
8000f81a:	fa f9 06 90 	ld.w	r9,sp[1680]
8000f81e:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000f822:	fe ca bd be 	sub	r10,pc,-16962
8000f826:	40 4e       	lddsp	lr,sp[0x10]
8000f828:	59 0e       	cp.w	lr,16
8000f82a:	fe 99 ff db 	brgt	8000f7e0 <_vfprintf_r+0x17d0>
8000f82e:	1c 09       	add	r9,lr
8000f830:	2f f8       	sub	r8,-1
8000f832:	87 0a       	st.w	r3[0x0],r10
8000f834:	fb 49 06 90 	st.w	sp[1680],r9
8000f838:	87 1e       	st.w	r3[0x4],lr
8000f83a:	fb 48 06 8c 	st.w	sp[1676],r8
8000f83e:	58 78       	cp.w	r8,7
8000f840:	e0 89 00 04 	brgt	8000f848 <_vfprintf_r+0x1838>
8000f844:	2f 83       	sub	r3,-8
8000f846:	c0 b8       	rjmp	8000f85c <_vfprintf_r+0x184c>
8000f848:	fa ca f9 78 	sub	r10,sp,-1672
8000f84c:	02 9b       	mov	r11,r1
8000f84e:	08 9c       	mov	r12,r4
8000f850:	fe b0 f3 d2 	rcall	8000dff4 <__sprint_r>
8000f854:	e0 81 03 5d 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000f858:	fa c3 f9 e0 	sub	r3,sp,-1568
8000f85c:	40 2c       	lddsp	r12,sp[0x8]
8000f85e:	04 1c       	sub	r12,r2
8000f860:	50 2c       	stdsp	sp[0x8],r12
8000f862:	58 0c       	cp.w	r12,0
8000f864:	e0 89 00 20 	brgt	8000f8a4 <_vfprintf_r+0x1894>
8000f868:	c3 f8       	rjmp	8000f8e6 <_vfprintf_r+0x18d6>
8000f86a:	2f 09       	sub	r9,-16
8000f86c:	2f f8       	sub	r8,-1
8000f86e:	fe cb be 0a 	sub	r11,pc,-16886
8000f872:	31 0a       	mov	r10,16
8000f874:	fb 49 06 90 	st.w	sp[1680],r9
8000f878:	87 0b       	st.w	r3[0x0],r11
8000f87a:	87 1a       	st.w	r3[0x4],r10
8000f87c:	fb 48 06 8c 	st.w	sp[1676],r8
8000f880:	58 78       	cp.w	r8,7
8000f882:	e0 89 00 04 	brgt	8000f88a <_vfprintf_r+0x187a>
8000f886:	2f 83       	sub	r3,-8
8000f888:	c0 b8       	rjmp	8000f89e <_vfprintf_r+0x188e>
8000f88a:	fa ca f9 78 	sub	r10,sp,-1672
8000f88e:	02 9b       	mov	r11,r1
8000f890:	08 9c       	mov	r12,r4
8000f892:	fe b0 f3 b1 	rcall	8000dff4 <__sprint_r>
8000f896:	e0 81 03 3c 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000f89a:	fa c3 f9 e0 	sub	r3,sp,-1568
8000f89e:	40 29       	lddsp	r9,sp[0x8]
8000f8a0:	21 09       	sub	r9,16
8000f8a2:	50 29       	stdsp	sp[0x8],r9
8000f8a4:	fa f9 06 90 	ld.w	r9,sp[1680]
8000f8a8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000f8ac:	fe ca be 48 	sub	r10,pc,-16824
8000f8b0:	40 2e       	lddsp	lr,sp[0x8]
8000f8b2:	59 0e       	cp.w	lr,16
8000f8b4:	fe 99 ff db 	brgt	8000f86a <_vfprintf_r+0x185a>
8000f8b8:	1c 09       	add	r9,lr
8000f8ba:	2f f8       	sub	r8,-1
8000f8bc:	87 0a       	st.w	r3[0x0],r10
8000f8be:	fb 49 06 90 	st.w	sp[1680],r9
8000f8c2:	87 1e       	st.w	r3[0x4],lr
8000f8c4:	fb 48 06 8c 	st.w	sp[1676],r8
8000f8c8:	58 78       	cp.w	r8,7
8000f8ca:	e0 89 00 04 	brgt	8000f8d2 <_vfprintf_r+0x18c2>
8000f8ce:	2f 83       	sub	r3,-8
8000f8d0:	c0 b8       	rjmp	8000f8e6 <_vfprintf_r+0x18d6>
8000f8d2:	fa ca f9 78 	sub	r10,sp,-1672
8000f8d6:	02 9b       	mov	r11,r1
8000f8d8:	08 9c       	mov	r12,r4
8000f8da:	fe b0 f3 8d 	rcall	8000dff4 <__sprint_r>
8000f8de:	e0 81 03 18 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000f8e2:	fa c3 f9 e0 	sub	r3,sp,-1568
8000f8e6:	ed b5 00 08 	bld	r5,0x8
8000f8ea:	c0 b0       	breq	8000f900 <_vfprintf_r+0x18f0>
8000f8ec:	fa f8 06 90 	ld.w	r8,sp[1680]
8000f8f0:	87 12       	st.w	r3[0x4],r2
8000f8f2:	87 06       	st.w	r3[0x0],r6
8000f8f4:	f0 02 00 02 	add	r2,r8,r2
8000f8f8:	fb 42 06 90 	st.w	sp[1680],r2
8000f8fc:	e0 8f 01 d4 	bral	8000fca4 <_vfprintf_r+0x1c94>
8000f900:	e0 40 00 65 	cp.w	r0,101
8000f904:	e0 8a 01 d6 	brle	8000fcb0 <_vfprintf_r+0x1ca0>
8000f908:	30 08       	mov	r8,0
8000f90a:	30 09       	mov	r9,0
8000f90c:	40 5b       	lddsp	r11,sp[0x14]
8000f90e:	40 7a       	lddsp	r10,sp[0x1c]
8000f910:	e0 a0 19 c1 	rcall	80012c92 <__avr32_f64_cmp_eq>
8000f914:	c7 90       	breq	8000fa06 <_vfprintf_r+0x19f6>
8000f916:	fa f8 06 90 	ld.w	r8,sp[1680]
8000f91a:	fe c9 be ca 	sub	r9,pc,-16694
8000f91e:	2f f8       	sub	r8,-1
8000f920:	87 09       	st.w	r3[0x0],r9
8000f922:	fb 48 06 90 	st.w	sp[1680],r8
8000f926:	30 19       	mov	r9,1
8000f928:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000f92c:	87 19       	st.w	r3[0x4],r9
8000f92e:	2f f8       	sub	r8,-1
8000f930:	fb 48 06 8c 	st.w	sp[1676],r8
8000f934:	58 78       	cp.w	r8,7
8000f936:	e0 89 00 05 	brgt	8000f940 <_vfprintf_r+0x1930>
8000f93a:	2f 83       	sub	r3,-8
8000f93c:	c0 c8       	rjmp	8000f954 <_vfprintf_r+0x1944>
8000f93e:	d7 03       	nop
8000f940:	fa ca f9 78 	sub	r10,sp,-1672
8000f944:	02 9b       	mov	r11,r1
8000f946:	08 9c       	mov	r12,r4
8000f948:	fe b0 f3 56 	rcall	8000dff4 <__sprint_r>
8000f94c:	e0 81 02 e1 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000f950:	fa c3 f9 e0 	sub	r3,sp,-1568
8000f954:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000f958:	40 6c       	lddsp	r12,sp[0x18]
8000f95a:	18 38       	cp.w	r8,r12
8000f95c:	c0 55       	brlt	8000f966 <_vfprintf_r+0x1956>
8000f95e:	ed b5 00 00 	bld	r5,0x0
8000f962:	e0 81 02 6b 	brne	8000fe38 <_vfprintf_r+0x1e28>
8000f966:	fa f8 06 90 	ld.w	r8,sp[1680]
8000f96a:	2f f8       	sub	r8,-1
8000f96c:	40 cb       	lddsp	r11,sp[0x30]
8000f96e:	fb 48 06 90 	st.w	sp[1680],r8
8000f972:	30 19       	mov	r9,1
8000f974:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000f978:	87 0b       	st.w	r3[0x0],r11
8000f97a:	2f f8       	sub	r8,-1
8000f97c:	87 19       	st.w	r3[0x4],r9
8000f97e:	fb 48 06 8c 	st.w	sp[1676],r8
8000f982:	58 78       	cp.w	r8,7
8000f984:	e0 89 00 04 	brgt	8000f98c <_vfprintf_r+0x197c>
8000f988:	2f 83       	sub	r3,-8
8000f98a:	c0 b8       	rjmp	8000f9a0 <_vfprintf_r+0x1990>
8000f98c:	fa ca f9 78 	sub	r10,sp,-1672
8000f990:	02 9b       	mov	r11,r1
8000f992:	08 9c       	mov	r12,r4
8000f994:	fe b0 f3 30 	rcall	8000dff4 <__sprint_r>
8000f998:	e0 81 02 bb 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000f99c:	fa c3 f9 e0 	sub	r3,sp,-1568
8000f9a0:	40 66       	lddsp	r6,sp[0x18]
8000f9a2:	20 16       	sub	r6,1
8000f9a4:	58 06       	cp.w	r6,0
8000f9a6:	e0 89 00 1d 	brgt	8000f9e0 <_vfprintf_r+0x19d0>
8000f9aa:	e0 8f 02 47 	bral	8000fe38 <_vfprintf_r+0x1e28>
8000f9ae:	2f 09       	sub	r9,-16
8000f9b0:	2f f8       	sub	r8,-1
8000f9b2:	fb 49 06 90 	st.w	sp[1680],r9
8000f9b6:	87 02       	st.w	r3[0x0],r2
8000f9b8:	87 10       	st.w	r3[0x4],r0
8000f9ba:	fb 48 06 8c 	st.w	sp[1676],r8
8000f9be:	58 78       	cp.w	r8,7
8000f9c0:	e0 89 00 04 	brgt	8000f9c8 <_vfprintf_r+0x19b8>
8000f9c4:	2f 83       	sub	r3,-8
8000f9c6:	c0 b8       	rjmp	8000f9dc <_vfprintf_r+0x19cc>
8000f9c8:	fa ca f9 78 	sub	r10,sp,-1672
8000f9cc:	02 9b       	mov	r11,r1
8000f9ce:	08 9c       	mov	r12,r4
8000f9d0:	fe b0 f3 12 	rcall	8000dff4 <__sprint_r>
8000f9d4:	e0 81 02 9d 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000f9d8:	fa c3 f9 e0 	sub	r3,sp,-1568
8000f9dc:	21 06       	sub	r6,16
8000f9de:	c0 48       	rjmp	8000f9e6 <_vfprintf_r+0x19d6>
8000f9e0:	fe c2 bf 7c 	sub	r2,pc,-16516
8000f9e4:	31 00       	mov	r0,16
8000f9e6:	fa f9 06 90 	ld.w	r9,sp[1680]
8000f9ea:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000f9ee:	fe ca bf 8a 	sub	r10,pc,-16502
8000f9f2:	59 06       	cp.w	r6,16
8000f9f4:	fe 99 ff dd 	brgt	8000f9ae <_vfprintf_r+0x199e>
8000f9f8:	0c 09       	add	r9,r6
8000f9fa:	87 0a       	st.w	r3[0x0],r10
8000f9fc:	fb 49 06 90 	st.w	sp[1680],r9
8000fa00:	2f f8       	sub	r8,-1
8000fa02:	87 16       	st.w	r3[0x4],r6
8000fa04:	c5 39       	rjmp	8000fcaa <_vfprintf_r+0x1c9a>
8000fa06:	fa fa 06 ac 	ld.w	r10,sp[1708]
8000fa0a:	58 0a       	cp.w	r10,0
8000fa0c:	e0 89 00 92 	brgt	8000fb30 <_vfprintf_r+0x1b20>
8000fa10:	fa f8 06 90 	ld.w	r8,sp[1680]
8000fa14:	fe c9 bf c4 	sub	r9,pc,-16444
8000fa18:	2f f8       	sub	r8,-1
8000fa1a:	87 09       	st.w	r3[0x0],r9
8000fa1c:	fb 48 06 90 	st.w	sp[1680],r8
8000fa20:	30 19       	mov	r9,1
8000fa22:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000fa26:	87 19       	st.w	r3[0x4],r9
8000fa28:	2f f8       	sub	r8,-1
8000fa2a:	fb 48 06 8c 	st.w	sp[1676],r8
8000fa2e:	58 78       	cp.w	r8,7
8000fa30:	e0 89 00 04 	brgt	8000fa38 <_vfprintf_r+0x1a28>
8000fa34:	2f 83       	sub	r3,-8
8000fa36:	c0 b8       	rjmp	8000fa4c <_vfprintf_r+0x1a3c>
8000fa38:	fa ca f9 78 	sub	r10,sp,-1672
8000fa3c:	02 9b       	mov	r11,r1
8000fa3e:	08 9c       	mov	r12,r4
8000fa40:	fe b0 f2 da 	rcall	8000dff4 <__sprint_r>
8000fa44:	e0 81 02 65 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fa48:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fa4c:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000fa50:	58 08       	cp.w	r8,0
8000fa52:	c0 81       	brne	8000fa62 <_vfprintf_r+0x1a52>
8000fa54:	40 6a       	lddsp	r10,sp[0x18]
8000fa56:	58 0a       	cp.w	r10,0
8000fa58:	c0 51       	brne	8000fa62 <_vfprintf_r+0x1a52>
8000fa5a:	ed b5 00 00 	bld	r5,0x0
8000fa5e:	e0 81 01 ed 	brne	8000fe38 <_vfprintf_r+0x1e28>
8000fa62:	40 c9       	lddsp	r9,sp[0x30]
8000fa64:	fa f8 06 90 	ld.w	r8,sp[1680]
8000fa68:	2f f8       	sub	r8,-1
8000fa6a:	87 09       	st.w	r3[0x0],r9
8000fa6c:	fb 48 06 90 	st.w	sp[1680],r8
8000fa70:	30 19       	mov	r9,1
8000fa72:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000fa76:	87 19       	st.w	r3[0x4],r9
8000fa78:	2f f8       	sub	r8,-1
8000fa7a:	fb 48 06 8c 	st.w	sp[1676],r8
8000fa7e:	58 78       	cp.w	r8,7
8000fa80:	e0 89 00 04 	brgt	8000fa88 <_vfprintf_r+0x1a78>
8000fa84:	2f 83       	sub	r3,-8
8000fa86:	c0 b8       	rjmp	8000fa9c <_vfprintf_r+0x1a8c>
8000fa88:	fa ca f9 78 	sub	r10,sp,-1672
8000fa8c:	02 9b       	mov	r11,r1
8000fa8e:	08 9c       	mov	r12,r4
8000fa90:	fe b0 f2 b2 	rcall	8000dff4 <__sprint_r>
8000fa94:	e0 81 02 3d 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fa98:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fa9c:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000faa0:	5c 32       	neg	r2
8000faa2:	58 02       	cp.w	r2,0
8000faa4:	e0 89 00 1d 	brgt	8000fade <_vfprintf_r+0x1ace>
8000faa8:	c3 d8       	rjmp	8000fb22 <_vfprintf_r+0x1b12>
8000faaa:	2f 09       	sub	r9,-16
8000faac:	2f f8       	sub	r8,-1
8000faae:	31 0e       	mov	lr,16
8000fab0:	fb 49 06 90 	st.w	sp[1680],r9
8000fab4:	87 00       	st.w	r3[0x0],r0
8000fab6:	87 1e       	st.w	r3[0x4],lr
8000fab8:	fb 48 06 8c 	st.w	sp[1676],r8
8000fabc:	58 78       	cp.w	r8,7
8000fabe:	e0 89 00 04 	brgt	8000fac6 <_vfprintf_r+0x1ab6>
8000fac2:	2f 83       	sub	r3,-8
8000fac4:	c0 b8       	rjmp	8000fada <_vfprintf_r+0x1aca>
8000fac6:	fa ca f9 78 	sub	r10,sp,-1672
8000faca:	02 9b       	mov	r11,r1
8000facc:	08 9c       	mov	r12,r4
8000face:	fe b0 f2 93 	rcall	8000dff4 <__sprint_r>
8000fad2:	e0 81 02 1e 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fad6:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fada:	21 02       	sub	r2,16
8000fadc:	c0 38       	rjmp	8000fae2 <_vfprintf_r+0x1ad2>
8000fade:	fe c0 c0 7a 	sub	r0,pc,-16262
8000fae2:	fa f9 06 90 	ld.w	r9,sp[1680]
8000fae6:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000faea:	fe ca c0 86 	sub	r10,pc,-16250
8000faee:	59 02       	cp.w	r2,16
8000faf0:	fe 99 ff dd 	brgt	8000faaa <_vfprintf_r+0x1a9a>
8000faf4:	04 09       	add	r9,r2
8000faf6:	2f f8       	sub	r8,-1
8000faf8:	87 0a       	st.w	r3[0x0],r10
8000fafa:	fb 49 06 90 	st.w	sp[1680],r9
8000fafe:	87 12       	st.w	r3[0x4],r2
8000fb00:	fb 48 06 8c 	st.w	sp[1676],r8
8000fb04:	58 78       	cp.w	r8,7
8000fb06:	e0 89 00 04 	brgt	8000fb0e <_vfprintf_r+0x1afe>
8000fb0a:	2f 83       	sub	r3,-8
8000fb0c:	c0 b8       	rjmp	8000fb22 <_vfprintf_r+0x1b12>
8000fb0e:	fa ca f9 78 	sub	r10,sp,-1672
8000fb12:	02 9b       	mov	r11,r1
8000fb14:	08 9c       	mov	r12,r4
8000fb16:	fe b0 f2 6f 	rcall	8000dff4 <__sprint_r>
8000fb1a:	e0 81 01 fa 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fb1e:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fb22:	40 6c       	lddsp	r12,sp[0x18]
8000fb24:	fa f8 06 90 	ld.w	r8,sp[1680]
8000fb28:	87 06       	st.w	r3[0x0],r6
8000fb2a:	87 1c       	st.w	r3[0x4],r12
8000fb2c:	18 08       	add	r8,r12
8000fb2e:	cb 98       	rjmp	8000fca0 <_vfprintf_r+0x1c90>
8000fb30:	fa f9 06 90 	ld.w	r9,sp[1680]
8000fb34:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000fb38:	40 6b       	lddsp	r11,sp[0x18]
8000fb3a:	16 3a       	cp.w	r10,r11
8000fb3c:	c6 f5       	brlt	8000fc1a <_vfprintf_r+0x1c0a>
8000fb3e:	16 09       	add	r9,r11
8000fb40:	2f f8       	sub	r8,-1
8000fb42:	87 06       	st.w	r3[0x0],r6
8000fb44:	fb 49 06 90 	st.w	sp[1680],r9
8000fb48:	87 1b       	st.w	r3[0x4],r11
8000fb4a:	fb 48 06 8c 	st.w	sp[1676],r8
8000fb4e:	58 78       	cp.w	r8,7
8000fb50:	e0 89 00 04 	brgt	8000fb58 <_vfprintf_r+0x1b48>
8000fb54:	2f 83       	sub	r3,-8
8000fb56:	c0 b8       	rjmp	8000fb6c <_vfprintf_r+0x1b5c>
8000fb58:	fa ca f9 78 	sub	r10,sp,-1672
8000fb5c:	02 9b       	mov	r11,r1
8000fb5e:	08 9c       	mov	r12,r4
8000fb60:	fe b0 f2 4a 	rcall	8000dff4 <__sprint_r>
8000fb64:	e0 81 01 d5 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fb68:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fb6c:	fa f6 06 ac 	ld.w	r6,sp[1708]
8000fb70:	40 6a       	lddsp	r10,sp[0x18]
8000fb72:	14 16       	sub	r6,r10
8000fb74:	58 06       	cp.w	r6,0
8000fb76:	e0 89 00 1c 	brgt	8000fbae <_vfprintf_r+0x1b9e>
8000fb7a:	c3 d8       	rjmp	8000fbf4 <_vfprintf_r+0x1be4>
8000fb7c:	2f 09       	sub	r9,-16
8000fb7e:	2f f8       	sub	r8,-1
8000fb80:	fb 49 06 90 	st.w	sp[1680],r9
8000fb84:	87 02       	st.w	r3[0x0],r2
8000fb86:	87 10       	st.w	r3[0x4],r0
8000fb88:	fb 48 06 8c 	st.w	sp[1676],r8
8000fb8c:	58 78       	cp.w	r8,7
8000fb8e:	e0 89 00 04 	brgt	8000fb96 <_vfprintf_r+0x1b86>
8000fb92:	2f 83       	sub	r3,-8
8000fb94:	c0 b8       	rjmp	8000fbaa <_vfprintf_r+0x1b9a>
8000fb96:	fa ca f9 78 	sub	r10,sp,-1672
8000fb9a:	02 9b       	mov	r11,r1
8000fb9c:	08 9c       	mov	r12,r4
8000fb9e:	fe b0 f2 2b 	rcall	8000dff4 <__sprint_r>
8000fba2:	e0 81 01 b6 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fba6:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fbaa:	21 06       	sub	r6,16
8000fbac:	c0 48       	rjmp	8000fbb4 <_vfprintf_r+0x1ba4>
8000fbae:	fe c2 c1 4a 	sub	r2,pc,-16054
8000fbb2:	31 00       	mov	r0,16
8000fbb4:	fa f9 06 90 	ld.w	r9,sp[1680]
8000fbb8:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000fbbc:	fe ca c1 58 	sub	r10,pc,-16040
8000fbc0:	59 06       	cp.w	r6,16
8000fbc2:	fe 99 ff dd 	brgt	8000fb7c <_vfprintf_r+0x1b6c>
8000fbc6:	0c 09       	add	r9,r6
8000fbc8:	2f f8       	sub	r8,-1
8000fbca:	87 0a       	st.w	r3[0x0],r10
8000fbcc:	fb 49 06 90 	st.w	sp[1680],r9
8000fbd0:	87 16       	st.w	r3[0x4],r6
8000fbd2:	fb 48 06 8c 	st.w	sp[1676],r8
8000fbd6:	58 78       	cp.w	r8,7
8000fbd8:	e0 89 00 04 	brgt	8000fbe0 <_vfprintf_r+0x1bd0>
8000fbdc:	2f 83       	sub	r3,-8
8000fbde:	c0 b8       	rjmp	8000fbf4 <_vfprintf_r+0x1be4>
8000fbe0:	fa ca f9 78 	sub	r10,sp,-1672
8000fbe4:	02 9b       	mov	r11,r1
8000fbe6:	08 9c       	mov	r12,r4
8000fbe8:	fe b0 f2 06 	rcall	8000dff4 <__sprint_r>
8000fbec:	e0 81 01 91 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fbf0:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fbf4:	ed b5 00 00 	bld	r5,0x0
8000fbf8:	e0 81 01 20 	brne	8000fe38 <_vfprintf_r+0x1e28>
8000fbfc:	40 c9       	lddsp	r9,sp[0x30]
8000fbfe:	fa f8 06 90 	ld.w	r8,sp[1680]
8000fc02:	2f f8       	sub	r8,-1
8000fc04:	87 09       	st.w	r3[0x0],r9
8000fc06:	fb 48 06 90 	st.w	sp[1680],r8
8000fc0a:	30 19       	mov	r9,1
8000fc0c:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000fc10:	87 19       	st.w	r3[0x4],r9
8000fc12:	2f f8       	sub	r8,-1
8000fc14:	fb 48 06 8c 	st.w	sp[1676],r8
8000fc18:	c0 29       	rjmp	8000fe1c <_vfprintf_r+0x1e0c>
8000fc1a:	14 09       	add	r9,r10
8000fc1c:	2f f8       	sub	r8,-1
8000fc1e:	fb 49 06 90 	st.w	sp[1680],r9
8000fc22:	87 06       	st.w	r3[0x0],r6
8000fc24:	87 1a       	st.w	r3[0x4],r10
8000fc26:	fb 48 06 8c 	st.w	sp[1676],r8
8000fc2a:	58 78       	cp.w	r8,7
8000fc2c:	e0 89 00 04 	brgt	8000fc34 <_vfprintf_r+0x1c24>
8000fc30:	2f 83       	sub	r3,-8
8000fc32:	c0 b8       	rjmp	8000fc48 <_vfprintf_r+0x1c38>
8000fc34:	fa ca f9 78 	sub	r10,sp,-1672
8000fc38:	02 9b       	mov	r11,r1
8000fc3a:	08 9c       	mov	r12,r4
8000fc3c:	fe b0 f1 dc 	rcall	8000dff4 <__sprint_r>
8000fc40:	e0 81 01 67 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fc44:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fc48:	40 c8       	lddsp	r8,sp[0x30]
8000fc4a:	87 08       	st.w	r3[0x0],r8
8000fc4c:	fa f8 06 90 	ld.w	r8,sp[1680]
8000fc50:	2f f8       	sub	r8,-1
8000fc52:	30 19       	mov	r9,1
8000fc54:	fb 48 06 90 	st.w	sp[1680],r8
8000fc58:	87 19       	st.w	r3[0x4],r9
8000fc5a:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000fc5e:	2f f8       	sub	r8,-1
8000fc60:	fb 48 06 8c 	st.w	sp[1676],r8
8000fc64:	fa f2 06 ac 	ld.w	r2,sp[1708]
8000fc68:	58 78       	cp.w	r8,7
8000fc6a:	e0 89 00 04 	brgt	8000fc72 <_vfprintf_r+0x1c62>
8000fc6e:	2f 83       	sub	r3,-8
8000fc70:	c0 b8       	rjmp	8000fc86 <_vfprintf_r+0x1c76>
8000fc72:	fa ca f9 78 	sub	r10,sp,-1672
8000fc76:	02 9b       	mov	r11,r1
8000fc78:	08 9c       	mov	r12,r4
8000fc7a:	fe b0 f1 bd 	rcall	8000dff4 <__sprint_r>
8000fc7e:	e0 81 01 48 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fc82:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fc86:	04 06       	add	r6,r2
8000fc88:	fa f8 06 ac 	ld.w	r8,sp[1708]
8000fc8c:	87 06       	st.w	r3[0x0],r6
8000fc8e:	fa f9 06 90 	ld.w	r9,sp[1680]
8000fc92:	40 66       	lddsp	r6,sp[0x18]
8000fc94:	40 6e       	lddsp	lr,sp[0x18]
8000fc96:	10 16       	sub	r6,r8
8000fc98:	f2 08 01 08 	sub	r8,r9,r8
8000fc9c:	87 16       	st.w	r3[0x4],r6
8000fc9e:	1c 08       	add	r8,lr
8000fca0:	fb 48 06 90 	st.w	sp[1680],r8
8000fca4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000fca8:	2f f8       	sub	r8,-1
8000fcaa:	fb 48 06 8c 	st.w	sp[1676],r8
8000fcae:	cb 78       	rjmp	8000fe1c <_vfprintf_r+0x1e0c>
8000fcb0:	40 6c       	lddsp	r12,sp[0x18]
8000fcb2:	58 1c       	cp.w	r12,1
8000fcb4:	e0 89 00 06 	brgt	8000fcc0 <_vfprintf_r+0x1cb0>
8000fcb8:	ed b5 00 00 	bld	r5,0x0
8000fcbc:	e0 81 00 85 	brne	8000fdc6 <_vfprintf_r+0x1db6>
8000fcc0:	fa f8 06 90 	ld.w	r8,sp[1680]
8000fcc4:	2f f8       	sub	r8,-1
8000fcc6:	30 19       	mov	r9,1
8000fcc8:	fb 48 06 90 	st.w	sp[1680],r8
8000fccc:	87 06       	st.w	r3[0x0],r6
8000fcce:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000fcd2:	87 19       	st.w	r3[0x4],r9
8000fcd4:	2f f8       	sub	r8,-1
8000fcd6:	fb 48 06 8c 	st.w	sp[1676],r8
8000fcda:	58 78       	cp.w	r8,7
8000fcdc:	e0 89 00 04 	brgt	8000fce4 <_vfprintf_r+0x1cd4>
8000fce0:	2f 83       	sub	r3,-8
8000fce2:	c0 b8       	rjmp	8000fcf8 <_vfprintf_r+0x1ce8>
8000fce4:	fa ca f9 78 	sub	r10,sp,-1672
8000fce8:	02 9b       	mov	r11,r1
8000fcea:	08 9c       	mov	r12,r4
8000fcec:	fe b0 f1 84 	rcall	8000dff4 <__sprint_r>
8000fcf0:	e0 81 01 0f 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fcf4:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fcf8:	fa f8 06 90 	ld.w	r8,sp[1680]
8000fcfc:	2f f8       	sub	r8,-1
8000fcfe:	40 cb       	lddsp	r11,sp[0x30]
8000fd00:	fb 48 06 90 	st.w	sp[1680],r8
8000fd04:	30 19       	mov	r9,1
8000fd06:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000fd0a:	87 0b       	st.w	r3[0x0],r11
8000fd0c:	2f f8       	sub	r8,-1
8000fd0e:	87 19       	st.w	r3[0x4],r9
8000fd10:	fb 48 06 8c 	st.w	sp[1676],r8
8000fd14:	58 78       	cp.w	r8,7
8000fd16:	e0 89 00 05 	brgt	8000fd20 <_vfprintf_r+0x1d10>
8000fd1a:	2f 83       	sub	r3,-8
8000fd1c:	c0 c8       	rjmp	8000fd34 <_vfprintf_r+0x1d24>
8000fd1e:	d7 03       	nop
8000fd20:	fa ca f9 78 	sub	r10,sp,-1672
8000fd24:	02 9b       	mov	r11,r1
8000fd26:	08 9c       	mov	r12,r4
8000fd28:	fe b0 f1 66 	rcall	8000dff4 <__sprint_r>
8000fd2c:	e0 81 00 f1 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fd30:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fd34:	30 08       	mov	r8,0
8000fd36:	30 09       	mov	r9,0
8000fd38:	40 5b       	lddsp	r11,sp[0x14]
8000fd3a:	40 7a       	lddsp	r10,sp[0x1c]
8000fd3c:	e0 a0 17 ab 	rcall	80012c92 <__avr32_f64_cmp_eq>
8000fd40:	40 68       	lddsp	r8,sp[0x18]
8000fd42:	20 18       	sub	r8,1
8000fd44:	58 0c       	cp.w	r12,0
8000fd46:	c0 d1       	brne	8000fd60 <_vfprintf_r+0x1d50>
8000fd48:	2f f6       	sub	r6,-1
8000fd4a:	87 18       	st.w	r3[0x4],r8
8000fd4c:	87 06       	st.w	r3[0x0],r6
8000fd4e:	fa f6 06 90 	ld.w	r6,sp[1680]
8000fd52:	10 06       	add	r6,r8
8000fd54:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000fd58:	fb 46 06 90 	st.w	sp[1680],r6
8000fd5c:	2f f8       	sub	r8,-1
8000fd5e:	c3 18       	rjmp	8000fdc0 <_vfprintf_r+0x1db0>
8000fd60:	10 96       	mov	r6,r8
8000fd62:	58 08       	cp.w	r8,0
8000fd64:	e0 89 00 1c 	brgt	8000fd9c <_vfprintf_r+0x1d8c>
8000fd68:	c4 b8       	rjmp	8000fdfe <_vfprintf_r+0x1dee>
8000fd6a:	2f 09       	sub	r9,-16
8000fd6c:	2f f8       	sub	r8,-1
8000fd6e:	fb 49 06 90 	st.w	sp[1680],r9
8000fd72:	87 02       	st.w	r3[0x0],r2
8000fd74:	87 10       	st.w	r3[0x4],r0
8000fd76:	fb 48 06 8c 	st.w	sp[1676],r8
8000fd7a:	58 78       	cp.w	r8,7
8000fd7c:	e0 89 00 04 	brgt	8000fd84 <_vfprintf_r+0x1d74>
8000fd80:	2f 83       	sub	r3,-8
8000fd82:	c0 b8       	rjmp	8000fd98 <_vfprintf_r+0x1d88>
8000fd84:	fa ca f9 78 	sub	r10,sp,-1672
8000fd88:	02 9b       	mov	r11,r1
8000fd8a:	08 9c       	mov	r12,r4
8000fd8c:	fe b0 f1 34 	rcall	8000dff4 <__sprint_r>
8000fd90:	e0 81 00 bf 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fd94:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fd98:	21 06       	sub	r6,16
8000fd9a:	c0 48       	rjmp	8000fda2 <_vfprintf_r+0x1d92>
8000fd9c:	fe c2 c3 38 	sub	r2,pc,-15560
8000fda0:	31 00       	mov	r0,16
8000fda2:	fa f9 06 90 	ld.w	r9,sp[1680]
8000fda6:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000fdaa:	fe ca c3 46 	sub	r10,pc,-15546
8000fdae:	59 06       	cp.w	r6,16
8000fdb0:	fe 99 ff dd 	brgt	8000fd6a <_vfprintf_r+0x1d5a>
8000fdb4:	0c 09       	add	r9,r6
8000fdb6:	87 0a       	st.w	r3[0x0],r10
8000fdb8:	fb 49 06 90 	st.w	sp[1680],r9
8000fdbc:	2f f8       	sub	r8,-1
8000fdbe:	87 16       	st.w	r3[0x4],r6
8000fdc0:	fb 48 06 8c 	st.w	sp[1676],r8
8000fdc4:	c0 e8       	rjmp	8000fde0 <_vfprintf_r+0x1dd0>
8000fdc6:	fa f8 06 90 	ld.w	r8,sp[1680]
8000fdca:	2f f8       	sub	r8,-1
8000fdcc:	30 19       	mov	r9,1
8000fdce:	fb 48 06 90 	st.w	sp[1680],r8
8000fdd2:	87 06       	st.w	r3[0x0],r6
8000fdd4:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000fdd8:	87 19       	st.w	r3[0x4],r9
8000fdda:	2f f8       	sub	r8,-1
8000fddc:	fb 48 06 8c 	st.w	sp[1676],r8
8000fde0:	58 78       	cp.w	r8,7
8000fde2:	e0 89 00 04 	brgt	8000fdea <_vfprintf_r+0x1dda>
8000fde6:	2f 83       	sub	r3,-8
8000fde8:	c0 b8       	rjmp	8000fdfe <_vfprintf_r+0x1dee>
8000fdea:	fa ca f9 78 	sub	r10,sp,-1672
8000fdee:	02 9b       	mov	r11,r1
8000fdf0:	08 9c       	mov	r12,r4
8000fdf2:	fe b0 f1 01 	rcall	8000dff4 <__sprint_r>
8000fdf6:	e0 81 00 8c 	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fdfa:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fdfe:	40 ea       	lddsp	r10,sp[0x38]
8000fe00:	fa f8 06 90 	ld.w	r8,sp[1680]
8000fe04:	14 08       	add	r8,r10
8000fe06:	fa c9 f9 64 	sub	r9,sp,-1692
8000fe0a:	fb 48 06 90 	st.w	sp[1680],r8
8000fe0e:	87 1a       	st.w	r3[0x4],r10
8000fe10:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000fe14:	87 09       	st.w	r3[0x0],r9
8000fe16:	2f f8       	sub	r8,-1
8000fe18:	fb 48 06 8c 	st.w	sp[1676],r8
8000fe1c:	58 78       	cp.w	r8,7
8000fe1e:	e0 89 00 04 	brgt	8000fe26 <_vfprintf_r+0x1e16>
8000fe22:	2f 83       	sub	r3,-8
8000fe24:	c0 a8       	rjmp	8000fe38 <_vfprintf_r+0x1e28>
8000fe26:	fa ca f9 78 	sub	r10,sp,-1672
8000fe2a:	02 9b       	mov	r11,r1
8000fe2c:	08 9c       	mov	r12,r4
8000fe2e:	fe b0 f0 e3 	rcall	8000dff4 <__sprint_r>
8000fe32:	c6 e1       	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fe34:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fe38:	e2 15 00 04 	andl	r5,0x4,COH
8000fe3c:	c3 f0       	breq	8000feba <_vfprintf_r+0x1eaa>
8000fe3e:	40 86       	lddsp	r6,sp[0x20]
8000fe40:	40 39       	lddsp	r9,sp[0xc]
8000fe42:	12 16       	sub	r6,r9
8000fe44:	58 06       	cp.w	r6,0
8000fe46:	e0 89 00 1a 	brgt	8000fe7a <_vfprintf_r+0x1e6a>
8000fe4a:	c3 88       	rjmp	8000feba <_vfprintf_r+0x1eaa>
8000fe4c:	2f 09       	sub	r9,-16
8000fe4e:	2f f8       	sub	r8,-1
8000fe50:	fb 49 06 90 	st.w	sp[1680],r9
8000fe54:	87 05       	st.w	r3[0x0],r5
8000fe56:	87 12       	st.w	r3[0x4],r2
8000fe58:	fb 48 06 8c 	st.w	sp[1676],r8
8000fe5c:	58 78       	cp.w	r8,7
8000fe5e:	e0 89 00 04 	brgt	8000fe66 <_vfprintf_r+0x1e56>
8000fe62:	2f 83       	sub	r3,-8
8000fe64:	c0 98       	rjmp	8000fe76 <_vfprintf_r+0x1e66>
8000fe66:	00 9a       	mov	r10,r0
8000fe68:	02 9b       	mov	r11,r1
8000fe6a:	08 9c       	mov	r12,r4
8000fe6c:	fe b0 f0 c4 	rcall	8000dff4 <__sprint_r>
8000fe70:	c4 f1       	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fe72:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fe76:	21 06       	sub	r6,16
8000fe78:	c0 68       	rjmp	8000fe84 <_vfprintf_r+0x1e74>
8000fe7a:	fe c5 c4 26 	sub	r5,pc,-15322
8000fe7e:	31 02       	mov	r2,16
8000fe80:	fa c0 f9 78 	sub	r0,sp,-1672
8000fe84:	fa f9 06 90 	ld.w	r9,sp[1680]
8000fe88:	fa f8 06 8c 	ld.w	r8,sp[1676]
8000fe8c:	fe ca c4 38 	sub	r10,pc,-15304
8000fe90:	59 06       	cp.w	r6,16
8000fe92:	fe 99 ff dd 	brgt	8000fe4c <_vfprintf_r+0x1e3c>
8000fe96:	0c 09       	add	r9,r6
8000fe98:	2f f8       	sub	r8,-1
8000fe9a:	87 0a       	st.w	r3[0x0],r10
8000fe9c:	87 16       	st.w	r3[0x4],r6
8000fe9e:	fb 49 06 90 	st.w	sp[1680],r9
8000fea2:	fb 48 06 8c 	st.w	sp[1676],r8
8000fea6:	58 78       	cp.w	r8,7
8000fea8:	e0 8a 00 09 	brle	8000feba <_vfprintf_r+0x1eaa>
8000feac:	fa ca f9 78 	sub	r10,sp,-1672
8000feb0:	02 9b       	mov	r11,r1
8000feb2:	08 9c       	mov	r12,r4
8000feb4:	fe b0 f0 a0 	rcall	8000dff4 <__sprint_r>
8000feb8:	c2 b1       	brne	8000ff0e <_vfprintf_r+0x1efe>
8000feba:	40 bc       	lddsp	r12,sp[0x2c]
8000febc:	40 36       	lddsp	r6,sp[0xc]
8000febe:	40 8e       	lddsp	lr,sp[0x20]
8000fec0:	ec 0e 0c 48 	max	r8,r6,lr
8000fec4:	10 0c       	add	r12,r8
8000fec6:	50 bc       	stdsp	sp[0x2c],r12
8000fec8:	fa f8 06 90 	ld.w	r8,sp[1680]
8000fecc:	58 08       	cp.w	r8,0
8000fece:	c0 80       	breq	8000fede <_vfprintf_r+0x1ece>
8000fed0:	fa ca f9 78 	sub	r10,sp,-1672
8000fed4:	02 9b       	mov	r11,r1
8000fed6:	08 9c       	mov	r12,r4
8000fed8:	fe b0 f0 8e 	rcall	8000dff4 <__sprint_r>
8000fedc:	c1 91       	brne	8000ff0e <_vfprintf_r+0x1efe>
8000fede:	30 0b       	mov	r11,0
8000fee0:	fa c3 f9 e0 	sub	r3,sp,-1568
8000fee4:	fb 4b 06 8c 	st.w	sp[1676],r11
8000fee8:	fe 9f f1 22 	bral	8000e12c <_vfprintf_r+0x11c>
8000feec:	08 95       	mov	r5,r4
8000feee:	fa f8 06 90 	ld.w	r8,sp[1680]
8000fef2:	58 08       	cp.w	r8,0
8000fef4:	c0 80       	breq	8000ff04 <_vfprintf_r+0x1ef4>
8000fef6:	08 9c       	mov	r12,r4
8000fef8:	fa ca f9 78 	sub	r10,sp,-1672
8000fefc:	02 9b       	mov	r11,r1
8000fefe:	fe b0 f0 7b 	rcall	8000dff4 <__sprint_r>
8000ff02:	c0 61       	brne	8000ff0e <_vfprintf_r+0x1efe>
8000ff04:	30 08       	mov	r8,0
8000ff06:	fb 48 06 8c 	st.w	sp[1676],r8
8000ff0a:	c0 28       	rjmp	8000ff0e <_vfprintf_r+0x1efe>
8000ff0c:	40 41       	lddsp	r1,sp[0x10]
8000ff0e:	82 68       	ld.sh	r8,r1[0xc]
8000ff10:	ed b8 00 06 	bld	r8,0x6
8000ff14:	c0 31       	brne	8000ff1a <_vfprintf_r+0x1f0a>
8000ff16:	3f fa       	mov	r10,-1
8000ff18:	50 ba       	stdsp	sp[0x2c],r10
8000ff1a:	40 bc       	lddsp	r12,sp[0x2c]
8000ff1c:	fe 3d f9 44 	sub	sp,-1724
8000ff20:	d8 32       	popm	r0-r7,pc
8000ff22:	d7 03       	nop

8000ff24 <__swsetup_r>:
8000ff24:	d4 21       	pushm	r4-r7,lr
8000ff26:	e0 68 01 c8 	mov	r8,456
8000ff2a:	18 96       	mov	r6,r12
8000ff2c:	16 97       	mov	r7,r11
8000ff2e:	70 0c       	ld.w	r12,r8[0x0]
8000ff30:	58 0c       	cp.w	r12,0
8000ff32:	c0 60       	breq	8000ff3e <__swsetup_r+0x1a>
8000ff34:	78 68       	ld.w	r8,r12[0x18]
8000ff36:	58 08       	cp.w	r8,0
8000ff38:	c0 31       	brne	8000ff3e <__swsetup_r+0x1a>
8000ff3a:	e0 a0 07 b9 	rcall	80010eac <__sinit>
8000ff3e:	fe c8 c3 ba 	sub	r8,pc,-15430
8000ff42:	10 37       	cp.w	r7,r8
8000ff44:	c0 61       	brne	8000ff50 <__swsetup_r+0x2c>
8000ff46:	e0 68 01 c8 	mov	r8,456
8000ff4a:	70 08       	ld.w	r8,r8[0x0]
8000ff4c:	70 07       	ld.w	r7,r8[0x0]
8000ff4e:	c1 28       	rjmp	8000ff72 <__swsetup_r+0x4e>
8000ff50:	fe c8 c3 ac 	sub	r8,pc,-15444
8000ff54:	10 37       	cp.w	r7,r8
8000ff56:	c0 61       	brne	8000ff62 <__swsetup_r+0x3e>
8000ff58:	e0 68 01 c8 	mov	r8,456
8000ff5c:	70 08       	ld.w	r8,r8[0x0]
8000ff5e:	70 17       	ld.w	r7,r8[0x4]
8000ff60:	c0 98       	rjmp	8000ff72 <__swsetup_r+0x4e>
8000ff62:	fe c8 c3 9e 	sub	r8,pc,-15458
8000ff66:	10 37       	cp.w	r7,r8
8000ff68:	c0 51       	brne	8000ff72 <__swsetup_r+0x4e>
8000ff6a:	e0 68 01 c8 	mov	r8,456
8000ff6e:	70 08       	ld.w	r8,r8[0x0]
8000ff70:	70 27       	ld.w	r7,r8[0x8]
8000ff72:	8e 68       	ld.sh	r8,r7[0xc]
8000ff74:	ed b8 00 03 	bld	r8,0x3
8000ff78:	c1 e0       	breq	8000ffb4 <__swsetup_r+0x90>
8000ff7a:	ed b8 00 04 	bld	r8,0x4
8000ff7e:	c3 e1       	brne	8000fffa <__swsetup_r+0xd6>
8000ff80:	ed b8 00 02 	bld	r8,0x2
8000ff84:	c1 51       	brne	8000ffae <__swsetup_r+0x8a>
8000ff86:	6e db       	ld.w	r11,r7[0x34]
8000ff88:	58 0b       	cp.w	r11,0
8000ff8a:	c0 a0       	breq	8000ff9e <__swsetup_r+0x7a>
8000ff8c:	ee c8 ff bc 	sub	r8,r7,-68
8000ff90:	10 3b       	cp.w	r11,r8
8000ff92:	c0 40       	breq	8000ff9a <__swsetup_r+0x76>
8000ff94:	0c 9c       	mov	r12,r6
8000ff96:	e0 a0 08 25 	rcall	80010fe0 <_free_r>
8000ff9a:	30 08       	mov	r8,0
8000ff9c:	8f d8       	st.w	r7[0x34],r8
8000ff9e:	8e 68       	ld.sh	r8,r7[0xc]
8000ffa0:	e0 18 ff db 	andl	r8,0xffdb
8000ffa4:	ae 68       	st.h	r7[0xc],r8
8000ffa6:	30 08       	mov	r8,0
8000ffa8:	8f 18       	st.w	r7[0x4],r8
8000ffaa:	6e 48       	ld.w	r8,r7[0x10]
8000ffac:	8f 08       	st.w	r7[0x0],r8
8000ffae:	8e 68       	ld.sh	r8,r7[0xc]
8000ffb0:	a3 b8       	sbr	r8,0x3
8000ffb2:	ae 68       	st.h	r7[0xc],r8
8000ffb4:	6e 48       	ld.w	r8,r7[0x10]
8000ffb6:	58 08       	cp.w	r8,0
8000ffb8:	c0 b1       	brne	8000ffce <__swsetup_r+0xaa>
8000ffba:	8e 68       	ld.sh	r8,r7[0xc]
8000ffbc:	e2 18 02 80 	andl	r8,0x280,COH
8000ffc0:	e0 48 02 00 	cp.w	r8,512
8000ffc4:	c0 50       	breq	8000ffce <__swsetup_r+0xaa>
8000ffc6:	0c 9c       	mov	r12,r6
8000ffc8:	0e 9b       	mov	r11,r7
8000ffca:	e0 a0 0a 4b 	rcall	80011460 <__smakebuf_r>
8000ffce:	8e 69       	ld.sh	r9,r7[0xc]
8000ffd0:	f1 d9 c0 01 	bfextu	r8,r9,0x0,0x1
8000ffd4:	c0 70       	breq	8000ffe2 <__swsetup_r+0xbe>
8000ffd6:	30 08       	mov	r8,0
8000ffd8:	8f 28       	st.w	r7[0x8],r8
8000ffda:	6e 58       	ld.w	r8,r7[0x14]
8000ffdc:	5c 38       	neg	r8
8000ffde:	8f 68       	st.w	r7[0x18],r8
8000ffe0:	c0 68       	rjmp	8000ffec <__swsetup_r+0xc8>
8000ffe2:	ed b9 00 01 	bld	r9,0x1
8000ffe6:	ef f8 10 05 	ld.wne	r8,r7[0x14]
8000ffea:	8f 28       	st.w	r7[0x8],r8
8000ffec:	6e 48       	ld.w	r8,r7[0x10]
8000ffee:	58 08       	cp.w	r8,0
8000fff0:	c0 61       	brne	8000fffc <__swsetup_r+0xd8>
8000fff2:	8e 68       	ld.sh	r8,r7[0xc]
8000fff4:	ed b8 00 07 	bld	r8,0x7
8000fff8:	c0 21       	brne	8000fffc <__swsetup_r+0xd8>
8000fffa:	dc 2a       	popm	r4-r7,pc,r12=-1
8000fffc:	d8 2a       	popm	r4-r7,pc,r12=0
8000fffe:	d7 03       	nop

80010000 <quorem>:
80010000:	d4 31       	pushm	r0-r7,lr
80010002:	20 2d       	sub	sp,8
80010004:	18 97       	mov	r7,r12
80010006:	78 48       	ld.w	r8,r12[0x10]
80010008:	76 46       	ld.w	r6,r11[0x10]
8001000a:	0c 38       	cp.w	r8,r6
8001000c:	c0 34       	brge	80010012 <quorem+0x12>
8001000e:	30 0c       	mov	r12,0
80010010:	c8 58       	rjmp	8001011a <quorem+0x11a>
80010012:	ec c2 ff fc 	sub	r2,r6,-4
80010016:	f6 c3 ff ec 	sub	r3,r11,-20
8001001a:	f6 02 03 29 	ld.w	r9,r11[r2<<0x2]
8001001e:	f8 02 03 2c 	ld.w	r12,r12[r2<<0x2]
80010022:	2f f9       	sub	r9,-1
80010024:	20 16       	sub	r6,1
80010026:	f8 09 0d 08 	divu	r8,r12,r9
8001002a:	f6 02 00 22 	add	r2,r11,r2<<0x2
8001002e:	ee c4 ff ec 	sub	r4,r7,-20
80010032:	10 95       	mov	r5,r8
80010034:	58 08       	cp.w	r8,0
80010036:	c4 10       	breq	800100b8 <quorem+0xb8>
80010038:	30 09       	mov	r9,0
8001003a:	06 9a       	mov	r10,r3
8001003c:	08 98       	mov	r8,r4
8001003e:	12 91       	mov	r1,r9
80010040:	50 0b       	stdsp	sp[0x0],r11
80010042:	70 0e       	ld.w	lr,r8[0x0]
80010044:	b1 8e       	lsr	lr,0x10
80010046:	50 1e       	stdsp	sp[0x4],lr
80010048:	15 0e       	ld.w	lr,r10++
8001004a:	fc 00 16 10 	lsr	r0,lr,0x10
8001004e:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80010052:	ea 0e 03 41 	mac	r1,r5,lr
80010056:	fd d1 c0 10 	bfextu	lr,r1,0x0,0x10
8001005a:	b1 81       	lsr	r1,0x10
8001005c:	40 1b       	lddsp	r11,sp[0x4]
8001005e:	ea 00 02 40 	mul	r0,r5,r0
80010062:	e2 00 00 00 	add	r0,r1,r0
80010066:	e3 d0 c0 10 	bfextu	r1,r0,0x0,0x10
8001006a:	02 1b       	sub	r11,r1
8001006c:	50 1b       	stdsp	sp[0x4],r11
8001006e:	70 0b       	ld.w	r11,r8[0x0]
80010070:	e3 db c0 10 	bfextu	r1,r11,0x0,0x10
80010074:	02 09       	add	r9,r1
80010076:	f2 0e 01 0e 	sub	lr,r9,lr
8001007a:	b0 1e       	st.h	r8[0x2],lr
8001007c:	fc 09 14 10 	asr	r9,lr,0x10
80010080:	40 1e       	lddsp	lr,sp[0x4]
80010082:	fc 09 00 09 	add	r9,lr,r9
80010086:	b0 09       	st.h	r8[0x0],r9
80010088:	e0 01 16 10 	lsr	r1,r0,0x10
8001008c:	2f c8       	sub	r8,-4
8001008e:	b1 49       	asr	r9,0x10
80010090:	04 3a       	cp.w	r10,r2
80010092:	fe 98 ff d8 	brls	80010042 <quorem+0x42>
80010096:	40 0b       	lddsp	r11,sp[0x0]
80010098:	58 0c       	cp.w	r12,0
8001009a:	c0 f1       	brne	800100b8 <quorem+0xb8>
8001009c:	ec c8 ff fb 	sub	r8,r6,-5
800100a0:	ee 08 00 28 	add	r8,r7,r8<<0x2
800100a4:	c0 28       	rjmp	800100a8 <quorem+0xa8>
800100a6:	20 16       	sub	r6,1
800100a8:	20 48       	sub	r8,4
800100aa:	08 38       	cp.w	r8,r4
800100ac:	e0 88 00 05 	brls	800100b6 <quorem+0xb6>
800100b0:	70 09       	ld.w	r9,r8[0x0]
800100b2:	58 09       	cp.w	r9,0
800100b4:	cf 90       	breq	800100a6 <quorem+0xa6>
800100b6:	8f 46       	st.w	r7[0x10],r6
800100b8:	0e 9c       	mov	r12,r7
800100ba:	e0 a0 0c f4 	rcall	80011aa2 <__mcmp>
800100be:	c2 d5       	brlt	80010118 <quorem+0x118>
800100c0:	2f f5       	sub	r5,-1
800100c2:	08 98       	mov	r8,r4
800100c4:	30 09       	mov	r9,0
800100c6:	07 0b       	ld.w	r11,r3++
800100c8:	f6 0a 16 10 	lsr	r10,r11,0x10
800100cc:	70 0c       	ld.w	r12,r8[0x0]
800100ce:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
800100d2:	f8 0e 16 10 	lsr	lr,r12,0x10
800100d6:	14 1e       	sub	lr,r10
800100d8:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
800100dc:	16 1a       	sub	r10,r11
800100de:	12 0a       	add	r10,r9
800100e0:	b0 1a       	st.h	r8[0x2],r10
800100e2:	b1 4a       	asr	r10,0x10
800100e4:	fc 0a 00 09 	add	r9,lr,r10
800100e8:	b0 09       	st.h	r8[0x0],r9
800100ea:	2f c8       	sub	r8,-4
800100ec:	b1 49       	asr	r9,0x10
800100ee:	04 33       	cp.w	r3,r2
800100f0:	fe 98 ff eb 	brls	800100c6 <quorem+0xc6>
800100f4:	ec c8 ff fb 	sub	r8,r6,-5
800100f8:	ee 08 03 29 	ld.w	r9,r7[r8<<0x2]
800100fc:	58 09       	cp.w	r9,0
800100fe:	c0 d1       	brne	80010118 <quorem+0x118>
80010100:	ee 08 00 28 	add	r8,r7,r8<<0x2
80010104:	c0 28       	rjmp	80010108 <quorem+0x108>
80010106:	20 16       	sub	r6,1
80010108:	20 48       	sub	r8,4
8001010a:	08 38       	cp.w	r8,r4
8001010c:	e0 88 00 05 	brls	80010116 <quorem+0x116>
80010110:	70 09       	ld.w	r9,r8[0x0]
80010112:	58 09       	cp.w	r9,0
80010114:	cf 90       	breq	80010106 <quorem+0x106>
80010116:	8f 46       	st.w	r7[0x10],r6
80010118:	0a 9c       	mov	r12,r5
8001011a:	2f ed       	sub	sp,-8
8001011c:	d8 32       	popm	r0-r7,pc
8001011e:	d7 03       	nop

80010120 <_dtoa_r>:
80010120:	d4 31       	pushm	r0-r7,lr
80010122:	21 ad       	sub	sp,104
80010124:	fa c4 ff 74 	sub	r4,sp,-140
80010128:	18 97       	mov	r7,r12
8001012a:	16 95       	mov	r5,r11
8001012c:	68 2c       	ld.w	r12,r4[0x8]
8001012e:	50 c9       	stdsp	sp[0x30],r9
80010130:	68 16       	ld.w	r6,r4[0x4]
80010132:	68 09       	ld.w	r9,r4[0x0]
80010134:	50 e8       	stdsp	sp[0x38],r8
80010136:	14 94       	mov	r4,r10
80010138:	51 2c       	stdsp	sp[0x48],r12
8001013a:	fa e5 00 08 	st.d	sp[8],r4
8001013e:	51 59       	stdsp	sp[0x54],r9
80010140:	6e 95       	ld.w	r5,r7[0x24]
80010142:	58 05       	cp.w	r5,0
80010144:	c0 91       	brne	80010156 <_dtoa_r+0x36>
80010146:	31 0c       	mov	r12,16
80010148:	e0 a0 09 ea 	rcall	8001151c <malloc>
8001014c:	99 35       	st.w	r12[0xc],r5
8001014e:	8f 9c       	st.w	r7[0x24],r12
80010150:	99 15       	st.w	r12[0x4],r5
80010152:	99 25       	st.w	r12[0x8],r5
80010154:	99 05       	st.w	r12[0x0],r5
80010156:	6e 99       	ld.w	r9,r7[0x24]
80010158:	72 08       	ld.w	r8,r9[0x0]
8001015a:	58 08       	cp.w	r8,0
8001015c:	c0 f0       	breq	8001017a <_dtoa_r+0x5a>
8001015e:	72 1a       	ld.w	r10,r9[0x4]
80010160:	91 1a       	st.w	r8[0x4],r10
80010162:	30 1a       	mov	r10,1
80010164:	72 19       	ld.w	r9,r9[0x4]
80010166:	f4 09 09 49 	lsl	r9,r10,r9
8001016a:	10 9b       	mov	r11,r8
8001016c:	91 29       	st.w	r8[0x8],r9
8001016e:	0e 9c       	mov	r12,r7
80010170:	e0 a0 0c b2 	rcall	80011ad4 <_Bfree>
80010174:	6e 98       	ld.w	r8,r7[0x24]
80010176:	30 09       	mov	r9,0
80010178:	91 09       	st.w	r8[0x0],r9
8001017a:	40 28       	lddsp	r8,sp[0x8]
8001017c:	10 94       	mov	r4,r8
8001017e:	58 08       	cp.w	r8,0
80010180:	c0 64       	brge	8001018c <_dtoa_r+0x6c>
80010182:	f1 d8 c0 1f 	bfextu	r8,r8,0x0,0x1f
80010186:	50 28       	stdsp	sp[0x8],r8
80010188:	30 18       	mov	r8,1
8001018a:	c0 28       	rjmp	8001018e <_dtoa_r+0x6e>
8001018c:	30 08       	mov	r8,0
8001018e:	8d 08       	st.w	r6[0x0],r8
80010190:	fc 1c 7f f0 	movh	r12,0x7ff0
80010194:	40 26       	lddsp	r6,sp[0x8]
80010196:	0c 98       	mov	r8,r6
80010198:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8001019c:	18 38       	cp.w	r8,r12
8001019e:	c2 01       	brne	800101de <_dtoa_r+0xbe>
800101a0:	e0 68 27 0f 	mov	r8,9999
800101a4:	41 5b       	lddsp	r11,sp[0x54]
800101a6:	97 08       	st.w	r11[0x0],r8
800101a8:	40 3a       	lddsp	r10,sp[0xc]
800101aa:	58 0a       	cp.w	r10,0
800101ac:	c0 71       	brne	800101ba <_dtoa_r+0x9a>
800101ae:	ed d6 c0 14 	bfextu	r6,r6,0x0,0x14
800101b2:	c0 41       	brne	800101ba <_dtoa_r+0x9a>
800101b4:	fe cc c6 40 	sub	r12,pc,-14784
800101b8:	c0 38       	rjmp	800101be <_dtoa_r+0x9e>
800101ba:	fe cc c6 3a 	sub	r12,pc,-14790
800101be:	41 29       	lddsp	r9,sp[0x48]
800101c0:	58 09       	cp.w	r9,0
800101c2:	e0 80 05 9a 	breq	80010cf6 <_dtoa_r+0xbd6>
800101c6:	f8 c8 ff fd 	sub	r8,r12,-3
800101ca:	f8 c9 ff f8 	sub	r9,r12,-8
800101ce:	11 8b       	ld.ub	r11,r8[0x0]
800101d0:	30 0a       	mov	r10,0
800101d2:	41 25       	lddsp	r5,sp[0x48]
800101d4:	f4 0b 18 00 	cp.b	r11,r10
800101d8:	f2 08 17 10 	movne	r8,r9
800101dc:	c1 68       	rjmp	80010208 <_dtoa_r+0xe8>
800101de:	fa ea 00 08 	ld.d	r10,sp[8]
800101e2:	30 08       	mov	r8,0
800101e4:	fa eb 00 3c 	st.d	sp[60],r10
800101e8:	30 09       	mov	r9,0
800101ea:	e0 a0 15 54 	rcall	80012c92 <__avr32_f64_cmp_eq>
800101ee:	c1 00       	breq	8001020e <_dtoa_r+0xee>
800101f0:	30 18       	mov	r8,1
800101f2:	41 5a       	lddsp	r10,sp[0x54]
800101f4:	95 08       	st.w	r10[0x0],r8
800101f6:	fe cc c7 a6 	sub	r12,pc,-14426
800101fa:	41 29       	lddsp	r9,sp[0x48]
800101fc:	f8 08 00 08 	add	r8,r12,r8
80010200:	58 09       	cp.w	r9,0
80010202:	e0 80 05 7a 	breq	80010cf6 <_dtoa_r+0xbd6>
80010206:	12 95       	mov	r5,r9
80010208:	8b 08       	st.w	r5[0x0],r8
8001020a:	e0 8f 05 76 	bral	80010cf6 <_dtoa_r+0xbd6>
8001020e:	fa c8 ff 9c 	sub	r8,sp,-100
80010212:	fa c9 ff a0 	sub	r9,sp,-96
80010216:	fa ea 00 3c 	ld.d	r10,sp[60]
8001021a:	0e 9c       	mov	r12,r7
8001021c:	eb d6 c2 8b 	bfextu	r5,r6,0x14,0xb
80010220:	e0 a0 0c ac 	rcall	80011b78 <__d2b>
80010224:	18 93       	mov	r3,r12
80010226:	58 05       	cp.w	r5,0
80010228:	c0 d0       	breq	80010242 <_dtoa_r+0x122>
8001022a:	fa ea 00 3c 	ld.d	r10,sp[60]
8001022e:	30 04       	mov	r4,0
80010230:	f1 db c0 14 	bfextu	r8,r11,0x0,0x14
80010234:	ea c5 03 ff 	sub	r5,r5,1023
80010238:	10 9b       	mov	r11,r8
8001023a:	51 74       	stdsp	sp[0x5c],r4
8001023c:	ea 1b 3f f0 	orh	r11,0x3ff0
80010240:	c2 58       	rjmp	8001028a <_dtoa_r+0x16a>
80010242:	41 88       	lddsp	r8,sp[0x60]
80010244:	41 9c       	lddsp	r12,sp[0x64]
80010246:	10 0c       	add	r12,r8
80010248:	f8 c5 fb ce 	sub	r5,r12,-1074
8001024c:	e0 45 00 20 	cp.w	r5,32
80010250:	e0 8a 00 0e 	brle	8001026c <_dtoa_r+0x14c>
80010254:	f8 cc fb ee 	sub	r12,r12,-1042
80010258:	40 3b       	lddsp	r11,sp[0xc]
8001025a:	ea 08 11 40 	rsub	r8,r5,64
8001025e:	f6 0c 0a 4c 	lsr	r12,r11,r12
80010262:	ec 08 09 46 	lsl	r6,r6,r8
80010266:	0c 4c       	or	r12,r6
80010268:	c0 78       	rjmp	80010276 <_dtoa_r+0x156>
8001026a:	d7 03       	nop
8001026c:	ea 0c 11 20 	rsub	r12,r5,32
80010270:	40 3a       	lddsp	r10,sp[0xc]
80010272:	f4 0c 09 4c 	lsl	r12,r10,r12
80010276:	e0 a0 14 9a 	rcall	80012baa <__avr32_u32_to_f64>
8001027a:	fc 18 fe 10 	movh	r8,0xfe10
8001027e:	30 19       	mov	r9,1
80010280:	ea c5 04 33 	sub	r5,r5,1075
80010284:	f0 0b 00 0b 	add	r11,r8,r11
80010288:	51 79       	stdsp	sp[0x5c],r9
8001028a:	30 08       	mov	r8,0
8001028c:	fc 19 3f f8 	movh	r9,0x3ff8
80010290:	e0 a0 13 22 	rcall	800128d4 <__avr32_f64_sub>
80010294:	e0 68 43 61 	mov	r8,17249
80010298:	ea 18 63 6f 	orh	r8,0x636f
8001029c:	e0 69 87 a7 	mov	r9,34727
800102a0:	ea 19 3f d2 	orh	r9,0x3fd2
800102a4:	e0 a0 12 2c 	rcall	800126fc <__avr32_f64_mul>
800102a8:	e0 68 c8 b3 	mov	r8,51379
800102ac:	ea 18 8b 60 	orh	r8,0x8b60
800102b0:	e0 69 8a 28 	mov	r9,35368
800102b4:	ea 19 3f c6 	orh	r9,0x3fc6
800102b8:	e0 a0 13 dc 	rcall	80012a70 <__avr32_f64_add>
800102bc:	0a 9c       	mov	r12,r5
800102be:	14 90       	mov	r0,r10
800102c0:	16 91       	mov	r1,r11
800102c2:	e0 a0 14 78 	rcall	80012bb2 <__avr32_s32_to_f64>
800102c6:	e0 68 79 fb 	mov	r8,31227
800102ca:	ea 18 50 9f 	orh	r8,0x509f
800102ce:	e0 69 44 13 	mov	r9,17427
800102d2:	ea 19 3f d3 	orh	r9,0x3fd3
800102d6:	e0 a0 12 13 	rcall	800126fc <__avr32_f64_mul>
800102da:	14 98       	mov	r8,r10
800102dc:	16 99       	mov	r9,r11
800102de:	00 9a       	mov	r10,r0
800102e0:	02 9b       	mov	r11,r1
800102e2:	e0 a0 13 c7 	rcall	80012a70 <__avr32_f64_add>
800102e6:	14 90       	mov	r0,r10
800102e8:	16 91       	mov	r1,r11
800102ea:	e0 a0 14 4d 	rcall	80012b84 <__avr32_f64_to_s32>
800102ee:	30 08       	mov	r8,0
800102f0:	18 96       	mov	r6,r12
800102f2:	30 09       	mov	r9,0
800102f4:	00 9a       	mov	r10,r0
800102f6:	02 9b       	mov	r11,r1
800102f8:	e0 a0 15 14 	rcall	80012d20 <__avr32_f64_cmp_lt>
800102fc:	c0 c0       	breq	80010314 <_dtoa_r+0x1f4>
800102fe:	0c 9c       	mov	r12,r6
80010300:	e0 a0 14 59 	rcall	80012bb2 <__avr32_s32_to_f64>
80010304:	14 98       	mov	r8,r10
80010306:	16 99       	mov	r9,r11
80010308:	00 9a       	mov	r10,r0
8001030a:	02 9b       	mov	r11,r1
8001030c:	e0 a0 14 c3 	rcall	80012c92 <__avr32_f64_cmp_eq>
80010310:	f7 b6 00 01 	subeq	r6,1
80010314:	59 66       	cp.w	r6,22
80010316:	e0 88 00 05 	brls	80010320 <_dtoa_r+0x200>
8001031a:	30 18       	mov	r8,1
8001031c:	51 48       	stdsp	sp[0x50],r8
8001031e:	c1 38       	rjmp	80010344 <_dtoa_r+0x224>
80010320:	fe c8 c6 f0 	sub	r8,pc,-14608
80010324:	fa ea 00 3c 	ld.d	r10,sp[60]
80010328:	f0 06 02 38 	ld.d	r8,r8[r6<<0x3]
8001032c:	e0 a0 14 fa 	rcall	80012d20 <__avr32_f64_cmp_lt>
80010330:	f9 b4 00 00 	moveq	r4,0
80010334:	fb f4 0a 14 	st.weq	sp[0x50],r4
80010338:	f7 b6 01 01 	subne	r6,1
8001033c:	f9 bc 01 00 	movne	r12,0
80010340:	fb fc 1a 14 	st.wne	sp[0x50],r12
80010344:	41 90       	lddsp	r0,sp[0x64]
80010346:	20 10       	sub	r0,1
80010348:	0a 10       	sub	r0,r5
8001034a:	c0 46       	brmi	80010352 <_dtoa_r+0x232>
8001034c:	50 40       	stdsp	sp[0x10],r0
8001034e:	30 00       	mov	r0,0
80010350:	c0 48       	rjmp	80010358 <_dtoa_r+0x238>
80010352:	30 0b       	mov	r11,0
80010354:	5c 30       	neg	r0
80010356:	50 4b       	stdsp	sp[0x10],r11
80010358:	ec 02 11 00 	rsub	r2,r6,0
8001035c:	58 06       	cp.w	r6,0
8001035e:	fb fa 40 04 	ld.wge	r10,sp[0x10]
80010362:	f5 d6 e4 0a 	addge	r10,r10,r6
80010366:	fb fa 4a 04 	st.wge	sp[0x10],r10
8001036a:	fb f6 4a 11 	st.wge	sp[0x44],r6
8001036e:	f9 b2 04 00 	movge	r2,0
80010372:	e1 d6 e5 10 	sublt	r0,r0,r6
80010376:	f9 b9 05 00 	movlt	r9,0
8001037a:	fb f9 5a 11 	st.wlt	sp[0x44],r9
8001037e:	40 c8       	lddsp	r8,sp[0x30]
80010380:	58 98       	cp.w	r8,9
80010382:	e0 8b 00 20 	brhi	800103c2 <_dtoa_r+0x2a2>
80010386:	58 58       	cp.w	r8,5
80010388:	f9 b4 0a 01 	movle	r4,1
8001038c:	fb f5 90 0c 	ld.wgt	r5,sp[0x30]
80010390:	f7 b5 09 04 	subgt	r5,4
80010394:	fb f5 9a 0c 	st.wgt	sp[0x30],r5
80010398:	f9 b4 09 00 	movgt	r4,0
8001039c:	40 cc       	lddsp	r12,sp[0x30]
8001039e:	58 3c       	cp.w	r12,3
800103a0:	c2 d0       	breq	800103fa <_dtoa_r+0x2da>
800103a2:	e0 89 00 05 	brgt	800103ac <_dtoa_r+0x28c>
800103a6:	58 2c       	cp.w	r12,2
800103a8:	c1 01       	brne	800103c8 <_dtoa_r+0x2a8>
800103aa:	c1 88       	rjmp	800103da <_dtoa_r+0x2ba>
800103ac:	40 cb       	lddsp	r11,sp[0x30]
800103ae:	58 4b       	cp.w	r11,4
800103b0:	c0 60       	breq	800103bc <_dtoa_r+0x29c>
800103b2:	58 5b       	cp.w	r11,5
800103b4:	c0 a1       	brne	800103c8 <_dtoa_r+0x2a8>
800103b6:	30 1a       	mov	r10,1
800103b8:	50 da       	stdsp	sp[0x34],r10
800103ba:	c2 28       	rjmp	800103fe <_dtoa_r+0x2de>
800103bc:	30 19       	mov	r9,1
800103be:	50 d9       	stdsp	sp[0x34],r9
800103c0:	c0 f8       	rjmp	800103de <_dtoa_r+0x2be>
800103c2:	30 08       	mov	r8,0
800103c4:	30 14       	mov	r4,1
800103c6:	50 c8       	stdsp	sp[0x30],r8
800103c8:	3f f5       	mov	r5,-1
800103ca:	30 1c       	mov	r12,1
800103cc:	30 0b       	mov	r11,0
800103ce:	50 95       	stdsp	sp[0x24],r5
800103d0:	50 dc       	stdsp	sp[0x34],r12
800103d2:	0a 91       	mov	r1,r5
800103d4:	31 28       	mov	r8,18
800103d6:	50 eb       	stdsp	sp[0x38],r11
800103d8:	c2 08       	rjmp	80010418 <_dtoa_r+0x2f8>
800103da:	30 0a       	mov	r10,0
800103dc:	50 da       	stdsp	sp[0x34],r10
800103de:	40 e9       	lddsp	r9,sp[0x38]
800103e0:	58 09       	cp.w	r9,0
800103e2:	e0 89 00 07 	brgt	800103f0 <_dtoa_r+0x2d0>
800103e6:	30 18       	mov	r8,1
800103e8:	50 98       	stdsp	sp[0x24],r8
800103ea:	10 91       	mov	r1,r8
800103ec:	50 e8       	stdsp	sp[0x38],r8
800103ee:	c1 58       	rjmp	80010418 <_dtoa_r+0x2f8>
800103f0:	40 e5       	lddsp	r5,sp[0x38]
800103f2:	50 95       	stdsp	sp[0x24],r5
800103f4:	0a 91       	mov	r1,r5
800103f6:	0a 98       	mov	r8,r5
800103f8:	c1 08       	rjmp	80010418 <_dtoa_r+0x2f8>
800103fa:	30 0c       	mov	r12,0
800103fc:	50 dc       	stdsp	sp[0x34],r12
800103fe:	40 eb       	lddsp	r11,sp[0x38]
80010400:	ec 0b 00 0b 	add	r11,r6,r11
80010404:	50 9b       	stdsp	sp[0x24],r11
80010406:	16 98       	mov	r8,r11
80010408:	2f f8       	sub	r8,-1
8001040a:	58 08       	cp.w	r8,0
8001040c:	e0 89 00 05 	brgt	80010416 <_dtoa_r+0x2f6>
80010410:	10 91       	mov	r1,r8
80010412:	30 18       	mov	r8,1
80010414:	c0 28       	rjmp	80010418 <_dtoa_r+0x2f8>
80010416:	10 91       	mov	r1,r8
80010418:	30 09       	mov	r9,0
8001041a:	6e 9a       	ld.w	r10,r7[0x24]
8001041c:	95 19       	st.w	r10[0x4],r9
8001041e:	30 49       	mov	r9,4
80010420:	c0 68       	rjmp	8001042c <_dtoa_r+0x30c>
80010422:	d7 03       	nop
80010424:	6a 1a       	ld.w	r10,r5[0x4]
80010426:	a1 79       	lsl	r9,0x1
80010428:	2f fa       	sub	r10,-1
8001042a:	8b 1a       	st.w	r5[0x4],r10
8001042c:	6e 95       	ld.w	r5,r7[0x24]
8001042e:	f2 ca ff ec 	sub	r10,r9,-20
80010432:	10 3a       	cp.w	r10,r8
80010434:	fe 98 ff f8 	brls	80010424 <_dtoa_r+0x304>
80010438:	6a 1b       	ld.w	r11,r5[0x4]
8001043a:	0e 9c       	mov	r12,r7
8001043c:	e0 a0 0b 66 	rcall	80011b08 <_Balloc>
80010440:	58 e1       	cp.w	r1,14
80010442:	5f 88       	srls	r8
80010444:	8b 0c       	st.w	r5[0x0],r12
80010446:	f1 e4 00 04 	and	r4,r8,r4
8001044a:	6e 98       	ld.w	r8,r7[0x24]
8001044c:	70 08       	ld.w	r8,r8[0x0]
8001044e:	50 88       	stdsp	sp[0x20],r8
80010450:	e0 80 01 82 	breq	80010754 <_dtoa_r+0x634>
80010454:	58 06       	cp.w	r6,0
80010456:	e0 8a 00 43 	brle	800104dc <_dtoa_r+0x3bc>
8001045a:	f3 d6 c0 04 	bfextu	r9,r6,0x0,0x4
8001045e:	fe c8 c8 2e 	sub	r8,pc,-14290
80010462:	f0 09 02 34 	ld.d	r4,r8[r9<<0x3]
80010466:	fa e5 00 18 	st.d	sp[24],r4
8001046a:	ec 04 14 04 	asr	r4,r6,0x4
8001046e:	ed b4 00 04 	bld	r4,0x4
80010472:	c0 30       	breq	80010478 <_dtoa_r+0x358>
80010474:	30 25       	mov	r5,2
80010476:	c1 08       	rjmp	80010496 <_dtoa_r+0x376>
80010478:	fe c8 c7 80 	sub	r8,pc,-14464
8001047c:	f0 e8 00 20 	ld.d	r8,r8[32]
80010480:	fa ea 00 3c 	ld.d	r10,sp[60]
80010484:	e9 d4 c0 04 	bfextu	r4,r4,0x0,0x4
80010488:	e0 a0 14 80 	rcall	80012d88 <__avr32_f64_div>
8001048c:	30 35       	mov	r5,3
8001048e:	14 98       	mov	r8,r10
80010490:	16 99       	mov	r9,r11
80010492:	fa e9 00 08 	st.d	sp[8],r8
80010496:	fe cc c7 9e 	sub	r12,pc,-14434
8001049a:	50 a3       	stdsp	sp[0x28],r3
8001049c:	0c 93       	mov	r3,r6
8001049e:	18 96       	mov	r6,r12
800104a0:	c0 f8       	rjmp	800104be <_dtoa_r+0x39e>
800104a2:	fa ea 00 18 	ld.d	r10,sp[24]
800104a6:	ed b4 00 00 	bld	r4,0x0
800104aa:	c0 81       	brne	800104ba <_dtoa_r+0x39a>
800104ac:	ec e8 00 00 	ld.d	r8,r6[0]
800104b0:	2f f5       	sub	r5,-1
800104b2:	e0 a0 11 25 	rcall	800126fc <__avr32_f64_mul>
800104b6:	fa eb 00 18 	st.d	sp[24],r10
800104ba:	a1 54       	asr	r4,0x1
800104bc:	2f 86       	sub	r6,-8
800104be:	58 04       	cp.w	r4,0
800104c0:	cf 11       	brne	800104a2 <_dtoa_r+0x382>
800104c2:	fa e8 00 18 	ld.d	r8,sp[24]
800104c6:	fa ea 00 08 	ld.d	r10,sp[8]
800104ca:	06 96       	mov	r6,r3
800104cc:	e0 a0 14 5e 	rcall	80012d88 <__avr32_f64_div>
800104d0:	40 a3       	lddsp	r3,sp[0x28]
800104d2:	14 98       	mov	r8,r10
800104d4:	16 99       	mov	r9,r11
800104d6:	fa e9 00 08 	st.d	sp[8],r8
800104da:	c2 f8       	rjmp	80010538 <_dtoa_r+0x418>
800104dc:	ec 08 11 00 	rsub	r8,r6,0
800104e0:	c0 31       	brne	800104e6 <_dtoa_r+0x3c6>
800104e2:	30 25       	mov	r5,2
800104e4:	c2 a8       	rjmp	80010538 <_dtoa_r+0x418>
800104e6:	fe cc c7 ee 	sub	r12,pc,-14354
800104ea:	f0 04 14 04 	asr	r4,r8,0x4
800104ee:	50 1c       	stdsp	sp[0x4],r12
800104f0:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
800104f4:	fe c9 c8 c4 	sub	r9,pc,-14140
800104f8:	fa ea 00 3c 	ld.d	r10,sp[60]
800104fc:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80010500:	e0 a0 10 fe 	rcall	800126fc <__avr32_f64_mul>
80010504:	40 1c       	lddsp	r12,sp[0x4]
80010506:	50 63       	stdsp	sp[0x18],r3
80010508:	30 25       	mov	r5,2
8001050a:	0c 93       	mov	r3,r6
8001050c:	fa eb 00 08 	st.d	sp[8],r10
80010510:	18 96       	mov	r6,r12
80010512:	c0 f8       	rjmp	80010530 <_dtoa_r+0x410>
80010514:	fa ea 00 08 	ld.d	r10,sp[8]
80010518:	ed b4 00 00 	bld	r4,0x0
8001051c:	c0 81       	brne	8001052c <_dtoa_r+0x40c>
8001051e:	ec e8 00 00 	ld.d	r8,r6[0]
80010522:	2f f5       	sub	r5,-1
80010524:	e0 a0 10 ec 	rcall	800126fc <__avr32_f64_mul>
80010528:	fa eb 00 08 	st.d	sp[8],r10
8001052c:	a1 54       	asr	r4,0x1
8001052e:	2f 86       	sub	r6,-8
80010530:	58 04       	cp.w	r4,0
80010532:	cf 11       	brne	80010514 <_dtoa_r+0x3f4>
80010534:	06 96       	mov	r6,r3
80010536:	40 63       	lddsp	r3,sp[0x18]
80010538:	41 4a       	lddsp	r10,sp[0x50]
8001053a:	58 0a       	cp.w	r10,0
8001053c:	c2 a0       	breq	80010590 <_dtoa_r+0x470>
8001053e:	fa e8 00 08 	ld.d	r8,sp[8]
80010542:	58 01       	cp.w	r1,0
80010544:	5f 94       	srgt	r4
80010546:	fa e9 00 18 	st.d	sp[24],r8
8001054a:	30 08       	mov	r8,0
8001054c:	fc 19 3f f0 	movh	r9,0x3ff0
80010550:	fa ea 00 18 	ld.d	r10,sp[24]
80010554:	e0 a0 13 e6 	rcall	80012d20 <__avr32_f64_cmp_lt>
80010558:	f9 bc 00 00 	moveq	r12,0
8001055c:	f9 bc 01 01 	movne	r12,1
80010560:	e9 ec 00 0c 	and	r12,r4,r12
80010564:	c1 60       	breq	80010590 <_dtoa_r+0x470>
80010566:	40 98       	lddsp	r8,sp[0x24]
80010568:	58 08       	cp.w	r8,0
8001056a:	e0 8a 00 f1 	brle	8001074c <_dtoa_r+0x62c>
8001056e:	30 08       	mov	r8,0
80010570:	fc 19 40 24 	movh	r9,0x4024
80010574:	ec c4 00 01 	sub	r4,r6,1
80010578:	fa ea 00 18 	ld.d	r10,sp[24]
8001057c:	2f f5       	sub	r5,-1
8001057e:	50 64       	stdsp	sp[0x18],r4
80010580:	e0 a0 10 be 	rcall	800126fc <__avr32_f64_mul>
80010584:	40 94       	lddsp	r4,sp[0x24]
80010586:	14 98       	mov	r8,r10
80010588:	16 99       	mov	r9,r11
8001058a:	fa e9 00 08 	st.d	sp[8],r8
8001058e:	c0 38       	rjmp	80010594 <_dtoa_r+0x474>
80010590:	50 66       	stdsp	sp[0x18],r6
80010592:	02 94       	mov	r4,r1
80010594:	0a 9c       	mov	r12,r5
80010596:	e0 a0 13 0e 	rcall	80012bb2 <__avr32_s32_to_f64>
8001059a:	fa e8 00 08 	ld.d	r8,sp[8]
8001059e:	e0 a0 10 af 	rcall	800126fc <__avr32_f64_mul>
800105a2:	30 08       	mov	r8,0
800105a4:	fc 19 40 1c 	movh	r9,0x401c
800105a8:	e0 a0 12 64 	rcall	80012a70 <__avr32_f64_add>
800105ac:	14 98       	mov	r8,r10
800105ae:	16 99       	mov	r9,r11
800105b0:	fa e9 00 28 	st.d	sp[40],r8
800105b4:	fc 18 fc c0 	movh	r8,0xfcc0
800105b8:	40 a5       	lddsp	r5,sp[0x28]
800105ba:	10 05       	add	r5,r8
800105bc:	50 a5       	stdsp	sp[0x28],r5
800105be:	58 04       	cp.w	r4,0
800105c0:	c2 11       	brne	80010602 <_dtoa_r+0x4e2>
800105c2:	fa ea 00 08 	ld.d	r10,sp[8]
800105c6:	30 08       	mov	r8,0
800105c8:	fc 19 40 14 	movh	r9,0x4014
800105cc:	e0 a0 11 84 	rcall	800128d4 <__avr32_f64_sub>
800105d0:	40 bc       	lddsp	r12,sp[0x2c]
800105d2:	fa eb 00 08 	st.d	sp[8],r10
800105d6:	14 98       	mov	r8,r10
800105d8:	16 99       	mov	r9,r11
800105da:	18 9a       	mov	r10,r12
800105dc:	0a 9b       	mov	r11,r5
800105de:	e0 a0 13 a1 	rcall	80012d20 <__avr32_f64_cmp_lt>
800105e2:	e0 81 02 54 	brne	80010a8a <_dtoa_r+0x96a>
800105e6:	0a 98       	mov	r8,r5
800105e8:	40 b9       	lddsp	r9,sp[0x2c]
800105ea:	ee 18 80 00 	eorh	r8,0x8000
800105ee:	fa ea 00 08 	ld.d	r10,sp[8]
800105f2:	10 95       	mov	r5,r8
800105f4:	12 98       	mov	r8,r9
800105f6:	0a 99       	mov	r9,r5
800105f8:	e0 a0 13 94 	rcall	80012d20 <__avr32_f64_cmp_lt>
800105fc:	e0 81 02 3e 	brne	80010a78 <_dtoa_r+0x958>
80010600:	ca 68       	rjmp	8001074c <_dtoa_r+0x62c>
80010602:	fe c9 c9 d2 	sub	r9,pc,-13870
80010606:	e8 c8 00 01 	sub	r8,r4,1
8001060a:	40 d5       	lddsp	r5,sp[0x34]
8001060c:	58 05       	cp.w	r5,0
8001060e:	c4 f0       	breq	800106ac <_dtoa_r+0x58c>
80010610:	30 0c       	mov	r12,0
80010612:	f2 08 02 38 	ld.d	r8,r9[r8<<0x3]
80010616:	51 3c       	stdsp	sp[0x4c],r12
80010618:	30 0a       	mov	r10,0
8001061a:	fc 1b 3f e0 	movh	r11,0x3fe0
8001061e:	e0 a0 13 b5 	rcall	80012d88 <__avr32_f64_div>
80010622:	fa e8 00 28 	ld.d	r8,sp[40]
80010626:	40 85       	lddsp	r5,sp[0x20]
80010628:	e0 a0 11 56 	rcall	800128d4 <__avr32_f64_sub>
8001062c:	fa eb 00 28 	st.d	sp[40],r10
80010630:	fa ea 00 08 	ld.d	r10,sp[8]
80010634:	e0 a0 12 a8 	rcall	80012b84 <__avr32_f64_to_s32>
80010638:	51 6c       	stdsp	sp[0x58],r12
8001063a:	e0 a0 12 bc 	rcall	80012bb2 <__avr32_s32_to_f64>
8001063e:	14 98       	mov	r8,r10
80010640:	16 99       	mov	r9,r11
80010642:	fa ea 00 08 	ld.d	r10,sp[8]
80010646:	e0 a0 11 47 	rcall	800128d4 <__avr32_f64_sub>
8001064a:	fa eb 00 08 	st.d	sp[8],r10
8001064e:	41 68       	lddsp	r8,sp[0x58]
80010650:	2d 08       	sub	r8,-48
80010652:	0a c8       	st.b	r5++,r8
80010654:	41 39       	lddsp	r9,sp[0x4c]
80010656:	2f f9       	sub	r9,-1
80010658:	51 39       	stdsp	sp[0x4c],r9
8001065a:	fa e8 00 28 	ld.d	r8,sp[40]
8001065e:	e0 a0 13 61 	rcall	80012d20 <__avr32_f64_cmp_lt>
80010662:	e0 81 03 39 	brne	80010cd4 <_dtoa_r+0xbb4>
80010666:	fa e8 00 08 	ld.d	r8,sp[8]
8001066a:	30 0a       	mov	r10,0
8001066c:	fc 1b 3f f0 	movh	r11,0x3ff0
80010670:	e0 a0 11 32 	rcall	800128d4 <__avr32_f64_sub>
80010674:	fa e8 00 28 	ld.d	r8,sp[40]
80010678:	e0 a0 13 54 	rcall	80012d20 <__avr32_f64_cmp_lt>
8001067c:	fa ea 00 28 	ld.d	r10,sp[40]
80010680:	30 08       	mov	r8,0
80010682:	fc 19 40 24 	movh	r9,0x4024
80010686:	e0 81 00 da 	brne	8001083a <_dtoa_r+0x71a>
8001068a:	41 3c       	lddsp	r12,sp[0x4c]
8001068c:	08 3c       	cp.w	r12,r4
8001068e:	c5 f4       	brge	8001074c <_dtoa_r+0x62c>
80010690:	e0 a0 10 36 	rcall	800126fc <__avr32_f64_mul>
80010694:	30 08       	mov	r8,0
80010696:	fa eb 00 28 	st.d	sp[40],r10
8001069a:	fc 19 40 24 	movh	r9,0x4024
8001069e:	fa ea 00 08 	ld.d	r10,sp[8]
800106a2:	e0 a0 10 2d 	rcall	800126fc <__avr32_f64_mul>
800106a6:	fa eb 00 08 	st.d	sp[8],r10
800106aa:	cc 3b       	rjmp	80010630 <_dtoa_r+0x510>
800106ac:	40 85       	lddsp	r5,sp[0x20]
800106ae:	08 05       	add	r5,r4
800106b0:	f2 08 02 3a 	ld.d	r10,r9[r8<<0x3]
800106b4:	51 35       	stdsp	sp[0x4c],r5
800106b6:	fa e8 00 28 	ld.d	r8,sp[40]
800106ba:	40 85       	lddsp	r5,sp[0x20]
800106bc:	e0 a0 10 20 	rcall	800126fc <__avr32_f64_mul>
800106c0:	fa eb 00 28 	st.d	sp[40],r10
800106c4:	fa ea 00 08 	ld.d	r10,sp[8]
800106c8:	e0 a0 12 5e 	rcall	80012b84 <__avr32_f64_to_s32>
800106cc:	51 6c       	stdsp	sp[0x58],r12
800106ce:	e0 a0 12 72 	rcall	80012bb2 <__avr32_s32_to_f64>
800106d2:	14 98       	mov	r8,r10
800106d4:	16 99       	mov	r9,r11
800106d6:	fa ea 00 08 	ld.d	r10,sp[8]
800106da:	e0 a0 10 fd 	rcall	800128d4 <__avr32_f64_sub>
800106de:	fa eb 00 08 	st.d	sp[8],r10
800106e2:	41 68       	lddsp	r8,sp[0x58]
800106e4:	2d 08       	sub	r8,-48
800106e6:	0a c8       	st.b	r5++,r8
800106e8:	41 3c       	lddsp	r12,sp[0x4c]
800106ea:	18 35       	cp.w	r5,r12
800106ec:	c2 81       	brne	8001073c <_dtoa_r+0x61c>
800106ee:	30 08       	mov	r8,0
800106f0:	fc 19 3f e0 	movh	r9,0x3fe0
800106f4:	fa ea 00 28 	ld.d	r10,sp[40]
800106f8:	e0 a0 11 bc 	rcall	80012a70 <__avr32_f64_add>
800106fc:	40 85       	lddsp	r5,sp[0x20]
800106fe:	fa e8 00 08 	ld.d	r8,sp[8]
80010702:	08 05       	add	r5,r4
80010704:	e0 a0 13 0e 	rcall	80012d20 <__avr32_f64_cmp_lt>
80010708:	e0 81 00 99 	brne	8001083a <_dtoa_r+0x71a>
8001070c:	fa e8 00 28 	ld.d	r8,sp[40]
80010710:	30 0a       	mov	r10,0
80010712:	fc 1b 3f e0 	movh	r11,0x3fe0
80010716:	e0 a0 10 df 	rcall	800128d4 <__avr32_f64_sub>
8001071a:	14 98       	mov	r8,r10
8001071c:	16 99       	mov	r9,r11
8001071e:	fa ea 00 08 	ld.d	r10,sp[8]
80010722:	e0 a0 12 ff 	rcall	80012d20 <__avr32_f64_cmp_lt>
80010726:	c1 30       	breq	8001074c <_dtoa_r+0x62c>
80010728:	33 09       	mov	r9,48
8001072a:	0a 98       	mov	r8,r5
8001072c:	11 7a       	ld.ub	r10,--r8
8001072e:	f2 0a 18 00 	cp.b	r10,r9
80010732:	e0 81 02 d1 	brne	80010cd4 <_dtoa_r+0xbb4>
80010736:	10 95       	mov	r5,r8
80010738:	cf 9b       	rjmp	8001072a <_dtoa_r+0x60a>
8001073a:	d7 03       	nop
8001073c:	30 08       	mov	r8,0
8001073e:	fc 19 40 24 	movh	r9,0x4024
80010742:	e0 a0 0f dd 	rcall	800126fc <__avr32_f64_mul>
80010746:	fa eb 00 08 	st.d	sp[8],r10
8001074a:	cb db       	rjmp	800106c4 <_dtoa_r+0x5a4>
8001074c:	fa ea 00 3c 	ld.d	r10,sp[60]
80010750:	fa eb 00 08 	st.d	sp[8],r10
80010754:	58 e6       	cp.w	r6,14
80010756:	5f ab       	srle	r11
80010758:	41 8a       	lddsp	r10,sp[0x60]
8001075a:	30 08       	mov	r8,0
8001075c:	f4 09 11 ff 	rsub	r9,r10,-1
80010760:	f7 e9 03 f9 	and	r9,r11,r9>>0x1f
80010764:	f0 09 18 00 	cp.b	r9,r8
80010768:	e0 80 00 82 	breq	8001086c <_dtoa_r+0x74c>
8001076c:	40 ea       	lddsp	r10,sp[0x38]
8001076e:	58 01       	cp.w	r1,0
80010770:	5f a9       	srle	r9
80010772:	f3 ea 03 f9 	and	r9,r9,r10>>0x1f
80010776:	fe ca cb 46 	sub	r10,pc,-13498
8001077a:	f4 06 02 34 	ld.d	r4,r10[r6<<0x3]
8001077e:	fa e5 00 10 	st.d	sp[16],r4
80010782:	f0 09 18 00 	cp.b	r9,r8
80010786:	c1 40       	breq	800107ae <_dtoa_r+0x68e>
80010788:	58 01       	cp.w	r1,0
8001078a:	e0 81 01 77 	brne	80010a78 <_dtoa_r+0x958>
8001078e:	30 08       	mov	r8,0
80010790:	fc 19 40 14 	movh	r9,0x4014
80010794:	08 9a       	mov	r10,r4
80010796:	0a 9b       	mov	r11,r5
80010798:	e0 a0 0f b2 	rcall	800126fc <__avr32_f64_mul>
8001079c:	fa e8 00 08 	ld.d	r8,sp[8]
800107a0:	e0 a0 12 8c 	rcall	80012cb8 <__avr32_f64_cmp_ge>
800107a4:	e0 81 01 6a 	brne	80010a78 <_dtoa_r+0x958>
800107a8:	02 92       	mov	r2,r1
800107aa:	e0 8f 01 72 	bral	80010a8e <_dtoa_r+0x96e>
800107ae:	40 85       	lddsp	r5,sp[0x20]
800107b0:	30 14       	mov	r4,1
800107b2:	fa e8 00 10 	ld.d	r8,sp[16]
800107b6:	fa ea 00 08 	ld.d	r10,sp[8]
800107ba:	e0 a0 12 e7 	rcall	80012d88 <__avr32_f64_div>
800107be:	e0 a0 11 e3 	rcall	80012b84 <__avr32_f64_to_s32>
800107c2:	18 92       	mov	r2,r12
800107c4:	e0 a0 11 f7 	rcall	80012bb2 <__avr32_s32_to_f64>
800107c8:	fa e8 00 10 	ld.d	r8,sp[16]
800107cc:	e0 a0 0f 98 	rcall	800126fc <__avr32_f64_mul>
800107d0:	14 98       	mov	r8,r10
800107d2:	16 99       	mov	r9,r11
800107d4:	fa ea 00 08 	ld.d	r10,sp[8]
800107d8:	e0 a0 10 7e 	rcall	800128d4 <__avr32_f64_sub>
800107dc:	fa eb 00 08 	st.d	sp[8],r10
800107e0:	e4 c8 ff d0 	sub	r8,r2,-48
800107e4:	0a c8       	st.b	r5++,r8
800107e6:	fc 19 40 24 	movh	r9,0x4024
800107ea:	30 08       	mov	r8,0
800107ec:	02 34       	cp.w	r4,r1
800107ee:	c3 31       	brne	80010854 <_dtoa_r+0x734>
800107f0:	fa e8 00 08 	ld.d	r8,sp[8]
800107f4:	e0 a0 11 3e 	rcall	80012a70 <__avr32_f64_add>
800107f8:	16 91       	mov	r1,r11
800107fa:	14 90       	mov	r0,r10
800107fc:	14 98       	mov	r8,r10
800107fe:	02 99       	mov	r9,r1
80010800:	fa ea 00 10 	ld.d	r10,sp[16]
80010804:	e0 a0 12 8e 	rcall	80012d20 <__avr32_f64_cmp_lt>
80010808:	c1 a1       	brne	8001083c <_dtoa_r+0x71c>
8001080a:	fa e8 00 10 	ld.d	r8,sp[16]
8001080e:	00 9a       	mov	r10,r0
80010810:	02 9b       	mov	r11,r1
80010812:	e0 a0 12 40 	rcall	80012c92 <__avr32_f64_cmp_eq>
80010816:	e0 80 02 5e 	breq	80010cd2 <_dtoa_r+0xbb2>
8001081a:	e5 d2 c0 01 	bfextu	r2,r2,0x0,0x1
8001081e:	c0 f1       	brne	8001083c <_dtoa_r+0x71c>
80010820:	e0 8f 02 59 	bral	80010cd2 <_dtoa_r+0xbb2>
80010824:	40 8a       	lddsp	r10,sp[0x20]
80010826:	14 38       	cp.w	r8,r10
80010828:	c0 30       	breq	8001082e <_dtoa_r+0x70e>
8001082a:	10 95       	mov	r5,r8
8001082c:	c0 98       	rjmp	8001083e <_dtoa_r+0x71e>
8001082e:	33 08       	mov	r8,48
80010830:	40 89       	lddsp	r9,sp[0x20]
80010832:	2f f6       	sub	r6,-1
80010834:	b2 88       	st.b	r9[0x0],r8
80010836:	40 88       	lddsp	r8,sp[0x20]
80010838:	c0 88       	rjmp	80010848 <_dtoa_r+0x728>
8001083a:	40 66       	lddsp	r6,sp[0x18]
8001083c:	33 99       	mov	r9,57
8001083e:	0a 98       	mov	r8,r5
80010840:	11 7a       	ld.ub	r10,--r8
80010842:	f2 0a 18 00 	cp.b	r10,r9
80010846:	ce f0       	breq	80010824 <_dtoa_r+0x704>
80010848:	50 66       	stdsp	sp[0x18],r6
8001084a:	11 89       	ld.ub	r9,r8[0x0]
8001084c:	2f f9       	sub	r9,-1
8001084e:	b0 89       	st.b	r8[0x0],r9
80010850:	e0 8f 02 42 	bral	80010cd4 <_dtoa_r+0xbb4>
80010854:	e0 a0 0f 54 	rcall	800126fc <__avr32_f64_mul>
80010858:	2f f4       	sub	r4,-1
8001085a:	fa eb 00 08 	st.d	sp[8],r10
8001085e:	30 08       	mov	r8,0
80010860:	30 09       	mov	r9,0
80010862:	e0 a0 12 18 	rcall	80012c92 <__avr32_f64_cmp_eq>
80010866:	ca 60       	breq	800107b2 <_dtoa_r+0x692>
80010868:	e0 8f 02 35 	bral	80010cd2 <_dtoa_r+0xbb2>
8001086c:	40 d8       	lddsp	r8,sp[0x34]
8001086e:	58 08       	cp.w	r8,0
80010870:	c0 51       	brne	8001087a <_dtoa_r+0x75a>
80010872:	04 98       	mov	r8,r2
80010874:	00 95       	mov	r5,r0
80010876:	40 d4       	lddsp	r4,sp[0x34]
80010878:	c3 78       	rjmp	800108e6 <_dtoa_r+0x7c6>
8001087a:	40 c5       	lddsp	r5,sp[0x30]
8001087c:	58 15       	cp.w	r5,1
8001087e:	e0 89 00 0f 	brgt	8001089c <_dtoa_r+0x77c>
80010882:	41 74       	lddsp	r4,sp[0x5c]
80010884:	58 04       	cp.w	r4,0
80010886:	c0 40       	breq	8001088e <_dtoa_r+0x76e>
80010888:	f4 c9 fb cd 	sub	r9,r10,-1075
8001088c:	c0 48       	rjmp	80010894 <_dtoa_r+0x774>
8001088e:	41 99       	lddsp	r9,sp[0x64]
80010890:	f2 09 11 36 	rsub	r9,r9,54
80010894:	04 98       	mov	r8,r2
80010896:	00 95       	mov	r5,r0
80010898:	c1 c8       	rjmp	800108d0 <_dtoa_r+0x7b0>
8001089a:	d7 03       	nop
8001089c:	e2 c8 00 01 	sub	r8,r1,1
800108a0:	58 01       	cp.w	r1,0
800108a2:	e0 05 17 40 	movge	r5,r0
800108a6:	e2 09 17 40 	movge	r9,r1
800108aa:	e1 d1 e5 15 	sublt	r5,r0,r1
800108ae:	f9 b9 05 00 	movlt	r9,0
800108b2:	10 32       	cp.w	r2,r8
800108b4:	e5 d8 e4 18 	subge	r8,r2,r8
800108b8:	f1 d2 e5 18 	sublt	r8,r8,r2
800108bc:	e5 d8 e5 02 	addlt	r2,r2,r8
800108c0:	fb fc 50 11 	ld.wlt	r12,sp[0x44]
800108c4:	f9 d8 e5 0c 	addlt	r12,r12,r8
800108c8:	fb fc 5a 11 	st.wlt	sp[0x44],r12
800108cc:	f9 b8 05 00 	movlt	r8,0
800108d0:	40 4b       	lddsp	r11,sp[0x10]
800108d2:	12 0b       	add	r11,r9
800108d4:	50 08       	stdsp	sp[0x0],r8
800108d6:	50 4b       	stdsp	sp[0x10],r11
800108d8:	12 00       	add	r0,r9
800108da:	30 1b       	mov	r11,1
800108dc:	0e 9c       	mov	r12,r7
800108de:	e0 a0 0a c9 	rcall	80011e70 <__i2b>
800108e2:	40 08       	lddsp	r8,sp[0x0]
800108e4:	18 94       	mov	r4,r12
800108e6:	40 4a       	lddsp	r10,sp[0x10]
800108e8:	58 05       	cp.w	r5,0
800108ea:	5f 99       	srgt	r9
800108ec:	58 0a       	cp.w	r10,0
800108ee:	5f 9a       	srgt	r10
800108f0:	f5 e9 00 09 	and	r9,r10,r9
800108f4:	c0 80       	breq	80010904 <_dtoa_r+0x7e4>
800108f6:	40 4c       	lddsp	r12,sp[0x10]
800108f8:	f8 05 0d 49 	min	r9,r12,r5
800108fc:	12 1c       	sub	r12,r9
800108fe:	12 10       	sub	r0,r9
80010900:	50 4c       	stdsp	sp[0x10],r12
80010902:	12 15       	sub	r5,r9
80010904:	58 02       	cp.w	r2,0
80010906:	e0 8a 00 27 	brle	80010954 <_dtoa_r+0x834>
8001090a:	40 db       	lddsp	r11,sp[0x34]
8001090c:	58 0b       	cp.w	r11,0
8001090e:	c1 d0       	breq	80010948 <_dtoa_r+0x828>
80010910:	58 08       	cp.w	r8,0
80010912:	e0 8a 00 17 	brle	80010940 <_dtoa_r+0x820>
80010916:	10 9a       	mov	r10,r8
80010918:	50 08       	stdsp	sp[0x0],r8
8001091a:	08 9b       	mov	r11,r4
8001091c:	0e 9c       	mov	r12,r7
8001091e:	e0 a0 0a ef 	rcall	80011efc <__pow5mult>
80010922:	06 9a       	mov	r10,r3
80010924:	18 9b       	mov	r11,r12
80010926:	18 94       	mov	r4,r12
80010928:	0e 9c       	mov	r12,r7
8001092a:	e0 a0 0a 23 	rcall	80011d70 <__multiply>
8001092e:	18 99       	mov	r9,r12
80010930:	06 9b       	mov	r11,r3
80010932:	50 19       	stdsp	sp[0x4],r9
80010934:	0e 9c       	mov	r12,r7
80010936:	e0 a0 08 cf 	rcall	80011ad4 <_Bfree>
8001093a:	40 19       	lddsp	r9,sp[0x4]
8001093c:	40 08       	lddsp	r8,sp[0x0]
8001093e:	12 93       	mov	r3,r9
80010940:	e4 08 01 0a 	sub	r10,r2,r8
80010944:	c0 80       	breq	80010954 <_dtoa_r+0x834>
80010946:	c0 28       	rjmp	8001094a <_dtoa_r+0x82a>
80010948:	04 9a       	mov	r10,r2
8001094a:	06 9b       	mov	r11,r3
8001094c:	0e 9c       	mov	r12,r7
8001094e:	e0 a0 0a d7 	rcall	80011efc <__pow5mult>
80010952:	18 93       	mov	r3,r12
80010954:	30 1b       	mov	r11,1
80010956:	0e 9c       	mov	r12,r7
80010958:	e0 a0 0a 8c 	rcall	80011e70 <__i2b>
8001095c:	41 1a       	lddsp	r10,sp[0x44]
8001095e:	18 92       	mov	r2,r12
80010960:	58 0a       	cp.w	r10,0
80010962:	e0 8a 00 07 	brle	80010970 <_dtoa_r+0x850>
80010966:	18 9b       	mov	r11,r12
80010968:	0e 9c       	mov	r12,r7
8001096a:	e0 a0 0a c9 	rcall	80011efc <__pow5mult>
8001096e:	18 92       	mov	r2,r12
80010970:	40 c9       	lddsp	r9,sp[0x30]
80010972:	58 19       	cp.w	r9,1
80010974:	e0 89 00 14 	brgt	8001099c <_dtoa_r+0x87c>
80010978:	40 38       	lddsp	r8,sp[0xc]
8001097a:	58 08       	cp.w	r8,0
8001097c:	c1 01       	brne	8001099c <_dtoa_r+0x87c>
8001097e:	40 29       	lddsp	r9,sp[0x8]
80010980:	f1 d9 c0 14 	bfextu	r8,r9,0x0,0x14
80010984:	c0 c1       	brne	8001099c <_dtoa_r+0x87c>
80010986:	12 98       	mov	r8,r9
80010988:	e6 18 7f f0 	andh	r8,0x7ff0,COH
8001098c:	c0 80       	breq	8001099c <_dtoa_r+0x87c>
8001098e:	40 4c       	lddsp	r12,sp[0x10]
80010990:	30 1b       	mov	r11,1
80010992:	2f fc       	sub	r12,-1
80010994:	2f f0       	sub	r0,-1
80010996:	50 4c       	stdsp	sp[0x10],r12
80010998:	50 6b       	stdsp	sp[0x18],r11
8001099a:	c0 38       	rjmp	800109a0 <_dtoa_r+0x880>
8001099c:	30 0a       	mov	r10,0
8001099e:	50 6a       	stdsp	sp[0x18],r10
800109a0:	41 19       	lddsp	r9,sp[0x44]
800109a2:	58 09       	cp.w	r9,0
800109a4:	c0 31       	brne	800109aa <_dtoa_r+0x88a>
800109a6:	30 1c       	mov	r12,1
800109a8:	c0 98       	rjmp	800109ba <_dtoa_r+0x89a>
800109aa:	64 48       	ld.w	r8,r2[0x10]
800109ac:	2f c8       	sub	r8,-4
800109ae:	e4 08 03 2c 	ld.w	r12,r2[r8<<0x2]
800109b2:	e0 a0 08 01 	rcall	800119b4 <__hi0bits>
800109b6:	f8 0c 11 20 	rsub	r12,r12,32
800109ba:	40 4b       	lddsp	r11,sp[0x10]
800109bc:	f8 0b 00 08 	add	r8,r12,r11
800109c0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800109c4:	c0 c0       	breq	800109dc <_dtoa_r+0x8bc>
800109c6:	f0 08 11 20 	rsub	r8,r8,32
800109ca:	58 48       	cp.w	r8,4
800109cc:	e0 8a 00 06 	brle	800109d8 <_dtoa_r+0x8b8>
800109d0:	20 48       	sub	r8,4
800109d2:	10 0b       	add	r11,r8
800109d4:	50 4b       	stdsp	sp[0x10],r11
800109d6:	c0 78       	rjmp	800109e4 <_dtoa_r+0x8c4>
800109d8:	58 48       	cp.w	r8,4
800109da:	c0 70       	breq	800109e8 <_dtoa_r+0x8c8>
800109dc:	40 4a       	lddsp	r10,sp[0x10]
800109de:	2e 48       	sub	r8,-28
800109e0:	10 0a       	add	r10,r8
800109e2:	50 4a       	stdsp	sp[0x10],r10
800109e4:	10 00       	add	r0,r8
800109e6:	10 05       	add	r5,r8
800109e8:	58 00       	cp.w	r0,0
800109ea:	e0 8a 00 08 	brle	800109fa <_dtoa_r+0x8da>
800109ee:	06 9b       	mov	r11,r3
800109f0:	00 9a       	mov	r10,r0
800109f2:	0e 9c       	mov	r12,r7
800109f4:	e0 a0 09 7a 	rcall	80011ce8 <__lshift>
800109f8:	18 93       	mov	r3,r12
800109fa:	40 49       	lddsp	r9,sp[0x10]
800109fc:	58 09       	cp.w	r9,0
800109fe:	e0 8a 00 08 	brle	80010a0e <_dtoa_r+0x8ee>
80010a02:	04 9b       	mov	r11,r2
80010a04:	12 9a       	mov	r10,r9
80010a06:	0e 9c       	mov	r12,r7
80010a08:	e0 a0 09 70 	rcall	80011ce8 <__lshift>
80010a0c:	18 92       	mov	r2,r12
80010a0e:	41 48       	lddsp	r8,sp[0x50]
80010a10:	58 08       	cp.w	r8,0
80010a12:	c1 b0       	breq	80010a48 <_dtoa_r+0x928>
80010a14:	04 9b       	mov	r11,r2
80010a16:	06 9c       	mov	r12,r3
80010a18:	e0 a0 08 45 	rcall	80011aa2 <__mcmp>
80010a1c:	c1 64       	brge	80010a48 <_dtoa_r+0x928>
80010a1e:	06 9b       	mov	r11,r3
80010a20:	30 09       	mov	r9,0
80010a22:	30 aa       	mov	r10,10
80010a24:	0e 9c       	mov	r12,r7
80010a26:	e0 a0 0a 2d 	rcall	80011e80 <__multadd>
80010a2a:	20 16       	sub	r6,1
80010a2c:	18 93       	mov	r3,r12
80010a2e:	40 dc       	lddsp	r12,sp[0x34]
80010a30:	58 0c       	cp.w	r12,0
80010a32:	c0 31       	brne	80010a38 <_dtoa_r+0x918>
80010a34:	40 91       	lddsp	r1,sp[0x24]
80010a36:	c0 98       	rjmp	80010a48 <_dtoa_r+0x928>
80010a38:	08 9b       	mov	r11,r4
80010a3a:	40 91       	lddsp	r1,sp[0x24]
80010a3c:	30 09       	mov	r9,0
80010a3e:	30 aa       	mov	r10,10
80010a40:	0e 9c       	mov	r12,r7
80010a42:	e0 a0 0a 1f 	rcall	80011e80 <__multadd>
80010a46:	18 94       	mov	r4,r12
80010a48:	58 01       	cp.w	r1,0
80010a4a:	5f a9       	srle	r9
80010a4c:	40 cb       	lddsp	r11,sp[0x30]
80010a4e:	58 2b       	cp.w	r11,2
80010a50:	5f 98       	srgt	r8
80010a52:	f3 e8 00 08 	and	r8,r9,r8
80010a56:	c2 50       	breq	80010aa0 <_dtoa_r+0x980>
80010a58:	58 01       	cp.w	r1,0
80010a5a:	c1 11       	brne	80010a7c <_dtoa_r+0x95c>
80010a5c:	04 9b       	mov	r11,r2
80010a5e:	02 99       	mov	r9,r1
80010a60:	30 5a       	mov	r10,5
80010a62:	0e 9c       	mov	r12,r7
80010a64:	e0 a0 0a 0e 	rcall	80011e80 <__multadd>
80010a68:	18 92       	mov	r2,r12
80010a6a:	18 9b       	mov	r11,r12
80010a6c:	06 9c       	mov	r12,r3
80010a6e:	e0 a0 08 1a 	rcall	80011aa2 <__mcmp>
80010a72:	e0 89 00 0f 	brgt	80010a90 <_dtoa_r+0x970>
80010a76:	c0 38       	rjmp	80010a7c <_dtoa_r+0x95c>
80010a78:	30 02       	mov	r2,0
80010a7a:	04 94       	mov	r4,r2
80010a7c:	40 ea       	lddsp	r10,sp[0x38]
80010a7e:	30 09       	mov	r9,0
80010a80:	5c da       	com	r10
80010a82:	40 85       	lddsp	r5,sp[0x20]
80010a84:	50 6a       	stdsp	sp[0x18],r10
80010a86:	50 49       	stdsp	sp[0x10],r9
80010a88:	c0 f9       	rjmp	80010ca6 <_dtoa_r+0xb86>
80010a8a:	08 92       	mov	r2,r4
80010a8c:	40 66       	lddsp	r6,sp[0x18]
80010a8e:	04 94       	mov	r4,r2
80010a90:	2f f6       	sub	r6,-1
80010a92:	50 66       	stdsp	sp[0x18],r6
80010a94:	33 18       	mov	r8,49
80010a96:	40 85       	lddsp	r5,sp[0x20]
80010a98:	0a c8       	st.b	r5++,r8
80010a9a:	30 08       	mov	r8,0
80010a9c:	50 48       	stdsp	sp[0x10],r8
80010a9e:	c0 49       	rjmp	80010ca6 <_dtoa_r+0xb86>
80010aa0:	40 dc       	lddsp	r12,sp[0x34]
80010aa2:	58 0c       	cp.w	r12,0
80010aa4:	e0 80 00 b5 	breq	80010c0e <_dtoa_r+0xaee>
80010aa8:	58 05       	cp.w	r5,0
80010aaa:	e0 8a 00 08 	brle	80010aba <_dtoa_r+0x99a>
80010aae:	08 9b       	mov	r11,r4
80010ab0:	0a 9a       	mov	r10,r5
80010ab2:	0e 9c       	mov	r12,r7
80010ab4:	e0 a0 09 1a 	rcall	80011ce8 <__lshift>
80010ab8:	18 94       	mov	r4,r12
80010aba:	40 6b       	lddsp	r11,sp[0x18]
80010abc:	58 0b       	cp.w	r11,0
80010abe:	c0 31       	brne	80010ac4 <_dtoa_r+0x9a4>
80010ac0:	08 9c       	mov	r12,r4
80010ac2:	c1 38       	rjmp	80010ae8 <_dtoa_r+0x9c8>
80010ac4:	68 1b       	ld.w	r11,r4[0x4]
80010ac6:	0e 9c       	mov	r12,r7
80010ac8:	e0 a0 08 20 	rcall	80011b08 <_Balloc>
80010acc:	68 4a       	ld.w	r10,r4[0x10]
80010ace:	18 95       	mov	r5,r12
80010ad0:	e8 cb ff f4 	sub	r11,r4,-12
80010ad4:	2f ea       	sub	r10,-2
80010ad6:	2f 4c       	sub	r12,-12
80010ad8:	a3 6a       	lsl	r10,0x2
80010ada:	fe b0 e6 ec 	rcall	8000d8b2 <memcpy>
80010ade:	0a 9b       	mov	r11,r5
80010ae0:	30 1a       	mov	r10,1
80010ae2:	0e 9c       	mov	r12,r7
80010ae4:	e0 a0 09 02 	rcall	80011ce8 <__lshift>
80010ae8:	50 44       	stdsp	sp[0x10],r4
80010aea:	40 3a       	lddsp	r10,sp[0xc]
80010aec:	30 19       	mov	r9,1
80010aee:	f5 da c0 01 	bfextu	r10,r10,0x0,0x1
80010af2:	18 94       	mov	r4,r12
80010af4:	50 da       	stdsp	sp[0x34],r10
80010af6:	40 85       	lddsp	r5,sp[0x20]
80010af8:	50 99       	stdsp	sp[0x24],r9
80010afa:	50 26       	stdsp	sp[0x8],r6
80010afc:	50 e1       	stdsp	sp[0x38],r1
80010afe:	04 9b       	mov	r11,r2
80010b00:	06 9c       	mov	r12,r3
80010b02:	fe b0 fa 7f 	rcall	80010000 <quorem>
80010b06:	40 4b       	lddsp	r11,sp[0x10]
80010b08:	f8 c0 ff d0 	sub	r0,r12,-48
80010b0c:	06 9c       	mov	r12,r3
80010b0e:	e0 a0 07 ca 	rcall	80011aa2 <__mcmp>
80010b12:	08 9a       	mov	r10,r4
80010b14:	50 6c       	stdsp	sp[0x18],r12
80010b16:	04 9b       	mov	r11,r2
80010b18:	0e 9c       	mov	r12,r7
80010b1a:	e0 a0 08 7f 	rcall	80011c18 <__mdiff>
80010b1e:	18 91       	mov	r1,r12
80010b20:	78 38       	ld.w	r8,r12[0xc]
80010b22:	58 08       	cp.w	r8,0
80010b24:	c0 30       	breq	80010b2a <_dtoa_r+0xa0a>
80010b26:	30 16       	mov	r6,1
80010b28:	c0 68       	rjmp	80010b34 <_dtoa_r+0xa14>
80010b2a:	18 9b       	mov	r11,r12
80010b2c:	06 9c       	mov	r12,r3
80010b2e:	e0 a0 07 ba 	rcall	80011aa2 <__mcmp>
80010b32:	18 96       	mov	r6,r12
80010b34:	0e 9c       	mov	r12,r7
80010b36:	02 9b       	mov	r11,r1
80010b38:	e0 a0 07 ce 	rcall	80011ad4 <_Bfree>
80010b3c:	40 cc       	lddsp	r12,sp[0x30]
80010b3e:	ed ec 10 08 	or	r8,r6,r12
80010b42:	c0 d1       	brne	80010b5c <_dtoa_r+0xa3c>
80010b44:	40 db       	lddsp	r11,sp[0x34]
80010b46:	58 0b       	cp.w	r11,0
80010b48:	c0 a1       	brne	80010b5c <_dtoa_r+0xa3c>
80010b4a:	40 26       	lddsp	r6,sp[0x8]
80010b4c:	e0 40 00 39 	cp.w	r0,57
80010b50:	c3 00       	breq	80010bb0 <_dtoa_r+0xa90>
80010b52:	40 6a       	lddsp	r10,sp[0x18]
80010b54:	58 0a       	cp.w	r10,0
80010b56:	e0 89 00 24 	brgt	80010b9e <_dtoa_r+0xa7e>
80010b5a:	c2 f8       	rjmp	80010bb8 <_dtoa_r+0xa98>
80010b5c:	40 69       	lddsp	r9,sp[0x18]
80010b5e:	58 09       	cp.w	r9,0
80010b60:	c0 85       	brlt	80010b70 <_dtoa_r+0xa50>
80010b62:	12 98       	mov	r8,r9
80010b64:	40 cc       	lddsp	r12,sp[0x30]
80010b66:	18 48       	or	r8,r12
80010b68:	c1 d1       	brne	80010ba2 <_dtoa_r+0xa82>
80010b6a:	40 db       	lddsp	r11,sp[0x34]
80010b6c:	58 0b       	cp.w	r11,0
80010b6e:	c1 a1       	brne	80010ba2 <_dtoa_r+0xa82>
80010b70:	0c 99       	mov	r9,r6
80010b72:	40 26       	lddsp	r6,sp[0x8]
80010b74:	58 09       	cp.w	r9,0
80010b76:	e0 8a 00 21 	brle	80010bb8 <_dtoa_r+0xa98>
80010b7a:	06 9b       	mov	r11,r3
80010b7c:	30 1a       	mov	r10,1
80010b7e:	0e 9c       	mov	r12,r7
80010b80:	e0 a0 08 b4 	rcall	80011ce8 <__lshift>
80010b84:	04 9b       	mov	r11,r2
80010b86:	18 93       	mov	r3,r12
80010b88:	e0 a0 07 8d 	rcall	80011aa2 <__mcmp>
80010b8c:	e0 89 00 06 	brgt	80010b98 <_dtoa_r+0xa78>
80010b90:	c1 41       	brne	80010bb8 <_dtoa_r+0xa98>
80010b92:	ed b0 00 00 	bld	r0,0x0
80010b96:	c1 11       	brne	80010bb8 <_dtoa_r+0xa98>
80010b98:	e0 40 00 39 	cp.w	r0,57
80010b9c:	c0 a0       	breq	80010bb0 <_dtoa_r+0xa90>
80010b9e:	2f f0       	sub	r0,-1
80010ba0:	c0 c8       	rjmp	80010bb8 <_dtoa_r+0xa98>
80010ba2:	58 06       	cp.w	r6,0
80010ba4:	e0 8a 00 0c 	brle	80010bbc <_dtoa_r+0xa9c>
80010ba8:	40 26       	lddsp	r6,sp[0x8]
80010baa:	e0 40 00 39 	cp.w	r0,57
80010bae:	c0 41       	brne	80010bb6 <_dtoa_r+0xa96>
80010bb0:	33 98       	mov	r8,57
80010bb2:	0a c8       	st.b	r5++,r8
80010bb4:	c6 78       	rjmp	80010c82 <_dtoa_r+0xb62>
80010bb6:	2f f0       	sub	r0,-1
80010bb8:	0a c0       	st.b	r5++,r0
80010bba:	c7 58       	rjmp	80010ca4 <_dtoa_r+0xb84>
80010bbc:	0a c0       	st.b	r5++,r0
80010bbe:	40 9a       	lddsp	r10,sp[0x24]
80010bc0:	40 e9       	lddsp	r9,sp[0x38]
80010bc2:	12 3a       	cp.w	r10,r9
80010bc4:	c4 30       	breq	80010c4a <_dtoa_r+0xb2a>
80010bc6:	06 9b       	mov	r11,r3
80010bc8:	30 09       	mov	r9,0
80010bca:	30 aa       	mov	r10,10
80010bcc:	0e 9c       	mov	r12,r7
80010bce:	e0 a0 09 59 	rcall	80011e80 <__multadd>
80010bd2:	40 48       	lddsp	r8,sp[0x10]
80010bd4:	18 93       	mov	r3,r12
80010bd6:	08 38       	cp.w	r8,r4
80010bd8:	c0 91       	brne	80010bea <_dtoa_r+0xaca>
80010bda:	10 9b       	mov	r11,r8
80010bdc:	30 09       	mov	r9,0
80010bde:	30 aa       	mov	r10,10
80010be0:	0e 9c       	mov	r12,r7
80010be2:	e0 a0 09 4f 	rcall	80011e80 <__multadd>
80010be6:	50 4c       	stdsp	sp[0x10],r12
80010be8:	c0 e8       	rjmp	80010c04 <_dtoa_r+0xae4>
80010bea:	40 4b       	lddsp	r11,sp[0x10]
80010bec:	30 09       	mov	r9,0
80010bee:	30 aa       	mov	r10,10
80010bf0:	0e 9c       	mov	r12,r7
80010bf2:	e0 a0 09 47 	rcall	80011e80 <__multadd>
80010bf6:	08 9b       	mov	r11,r4
80010bf8:	50 4c       	stdsp	sp[0x10],r12
80010bfa:	30 09       	mov	r9,0
80010bfc:	30 aa       	mov	r10,10
80010bfe:	0e 9c       	mov	r12,r7
80010c00:	e0 a0 09 40 	rcall	80011e80 <__multadd>
80010c04:	18 94       	mov	r4,r12
80010c06:	40 9c       	lddsp	r12,sp[0x24]
80010c08:	2f fc       	sub	r12,-1
80010c0a:	50 9c       	stdsp	sp[0x24],r12
80010c0c:	c7 9b       	rjmp	80010afe <_dtoa_r+0x9de>
80010c0e:	30 18       	mov	r8,1
80010c10:	06 90       	mov	r0,r3
80010c12:	40 85       	lddsp	r5,sp[0x20]
80010c14:	08 93       	mov	r3,r4
80010c16:	0c 94       	mov	r4,r6
80010c18:	10 96       	mov	r6,r8
80010c1a:	04 9b       	mov	r11,r2
80010c1c:	00 9c       	mov	r12,r0
80010c1e:	fe b0 f9 f1 	rcall	80010000 <quorem>
80010c22:	2d 0c       	sub	r12,-48
80010c24:	0a cc       	st.b	r5++,r12
80010c26:	02 36       	cp.w	r6,r1
80010c28:	c0 a4       	brge	80010c3c <_dtoa_r+0xb1c>
80010c2a:	00 9b       	mov	r11,r0
80010c2c:	30 09       	mov	r9,0
80010c2e:	30 aa       	mov	r10,10
80010c30:	0e 9c       	mov	r12,r7
80010c32:	2f f6       	sub	r6,-1
80010c34:	e0 a0 09 26 	rcall	80011e80 <__multadd>
80010c38:	18 90       	mov	r0,r12
80010c3a:	cf 0b       	rjmp	80010c1a <_dtoa_r+0xafa>
80010c3c:	08 96       	mov	r6,r4
80010c3e:	30 0b       	mov	r11,0
80010c40:	06 94       	mov	r4,r3
80010c42:	50 4b       	stdsp	sp[0x10],r11
80010c44:	00 93       	mov	r3,r0
80010c46:	18 90       	mov	r0,r12
80010c48:	c0 28       	rjmp	80010c4c <_dtoa_r+0xb2c>
80010c4a:	40 26       	lddsp	r6,sp[0x8]
80010c4c:	06 9b       	mov	r11,r3
80010c4e:	30 1a       	mov	r10,1
80010c50:	0e 9c       	mov	r12,r7
80010c52:	e0 a0 08 4b 	rcall	80011ce8 <__lshift>
80010c56:	04 9b       	mov	r11,r2
80010c58:	18 93       	mov	r3,r12
80010c5a:	e0 a0 07 24 	rcall	80011aa2 <__mcmp>
80010c5e:	e0 89 00 12 	brgt	80010c82 <_dtoa_r+0xb62>
80010c62:	c1 b1       	brne	80010c98 <_dtoa_r+0xb78>
80010c64:	e1 d0 c0 01 	bfextu	r0,r0,0x0,0x1
80010c68:	c0 d1       	brne	80010c82 <_dtoa_r+0xb62>
80010c6a:	c1 78       	rjmp	80010c98 <_dtoa_r+0xb78>
80010c6c:	40 89       	lddsp	r9,sp[0x20]
80010c6e:	12 38       	cp.w	r8,r9
80010c70:	c0 30       	breq	80010c76 <_dtoa_r+0xb56>
80010c72:	10 95       	mov	r5,r8
80010c74:	c0 88       	rjmp	80010c84 <_dtoa_r+0xb64>
80010c76:	2f f6       	sub	r6,-1
80010c78:	50 66       	stdsp	sp[0x18],r6
80010c7a:	33 18       	mov	r8,49
80010c7c:	40 8c       	lddsp	r12,sp[0x20]
80010c7e:	b8 88       	st.b	r12[0x0],r8
80010c80:	c1 38       	rjmp	80010ca6 <_dtoa_r+0xb86>
80010c82:	33 9a       	mov	r10,57
80010c84:	0a 98       	mov	r8,r5
80010c86:	11 79       	ld.ub	r9,--r8
80010c88:	f4 09 18 00 	cp.b	r9,r10
80010c8c:	cf 00       	breq	80010c6c <_dtoa_r+0xb4c>
80010c8e:	2f f9       	sub	r9,-1
80010c90:	b0 89       	st.b	r8[0x0],r9
80010c92:	c0 98       	rjmp	80010ca4 <_dtoa_r+0xb84>
80010c94:	10 95       	mov	r5,r8
80010c96:	c0 28       	rjmp	80010c9a <_dtoa_r+0xb7a>
80010c98:	33 09       	mov	r9,48
80010c9a:	0a 98       	mov	r8,r5
80010c9c:	11 7a       	ld.ub	r10,--r8
80010c9e:	f2 0a 18 00 	cp.b	r10,r9
80010ca2:	cf 90       	breq	80010c94 <_dtoa_r+0xb74>
80010ca4:	50 66       	stdsp	sp[0x18],r6
80010ca6:	04 9b       	mov	r11,r2
80010ca8:	0e 9c       	mov	r12,r7
80010caa:	e0 a0 07 15 	rcall	80011ad4 <_Bfree>
80010cae:	58 04       	cp.w	r4,0
80010cb0:	c1 20       	breq	80010cd4 <_dtoa_r+0xbb4>
80010cb2:	40 4b       	lddsp	r11,sp[0x10]
80010cb4:	08 3b       	cp.w	r11,r4
80010cb6:	5f 19       	srne	r9
80010cb8:	58 0b       	cp.w	r11,0
80010cba:	5f 18       	srne	r8
80010cbc:	f3 e8 00 08 	and	r8,r9,r8
80010cc0:	c0 40       	breq	80010cc8 <_dtoa_r+0xba8>
80010cc2:	0e 9c       	mov	r12,r7
80010cc4:	e0 a0 07 08 	rcall	80011ad4 <_Bfree>
80010cc8:	08 9b       	mov	r11,r4
80010cca:	0e 9c       	mov	r12,r7
80010ccc:	e0 a0 07 04 	rcall	80011ad4 <_Bfree>
80010cd0:	c0 28       	rjmp	80010cd4 <_dtoa_r+0xbb4>
80010cd2:	50 66       	stdsp	sp[0x18],r6
80010cd4:	0e 9c       	mov	r12,r7
80010cd6:	06 9b       	mov	r11,r3
80010cd8:	e0 a0 06 fe 	rcall	80011ad4 <_Bfree>
80010cdc:	30 08       	mov	r8,0
80010cde:	aa 88       	st.b	r5[0x0],r8
80010ce0:	40 68       	lddsp	r8,sp[0x18]
80010ce2:	41 5a       	lddsp	r10,sp[0x54]
80010ce4:	2f f8       	sub	r8,-1
80010ce6:	41 29       	lddsp	r9,sp[0x48]
80010ce8:	95 08       	st.w	r10[0x0],r8
80010cea:	40 8c       	lddsp	r12,sp[0x20]
80010cec:	58 09       	cp.w	r9,0
80010cee:	fb f8 10 12 	ld.wne	r8,sp[0x48]
80010cf2:	f1 f5 1a 00 	st.wne	r8[0x0],r5
80010cf6:	2e 6d       	sub	sp,-104
80010cf8:	d8 32       	popm	r0-r7,pc
80010cfa:	d7 03       	nop

80010cfc <_fflush_r>:
80010cfc:	d4 21       	pushm	r4-r7,lr
80010cfe:	16 97       	mov	r7,r11
80010d00:	18 96       	mov	r6,r12
80010d02:	76 48       	ld.w	r8,r11[0x10]
80010d04:	58 08       	cp.w	r8,0
80010d06:	c7 f0       	breq	80010e04 <_fflush_r+0x108>
80010d08:	58 0c       	cp.w	r12,0
80010d0a:	c0 50       	breq	80010d14 <_fflush_r+0x18>
80010d0c:	78 68       	ld.w	r8,r12[0x18]
80010d0e:	58 08       	cp.w	r8,0
80010d10:	c0 21       	brne	80010d14 <_fflush_r+0x18>
80010d12:	cc dc       	rcall	80010eac <__sinit>
80010d14:	fe c8 d1 90 	sub	r8,pc,-11888
80010d18:	10 37       	cp.w	r7,r8
80010d1a:	c0 31       	brne	80010d20 <_fflush_r+0x24>
80010d1c:	6c 07       	ld.w	r7,r6[0x0]
80010d1e:	c0 c8       	rjmp	80010d36 <_fflush_r+0x3a>
80010d20:	fe c8 d1 7c 	sub	r8,pc,-11908
80010d24:	10 37       	cp.w	r7,r8
80010d26:	c0 31       	brne	80010d2c <_fflush_r+0x30>
80010d28:	6c 17       	ld.w	r7,r6[0x4]
80010d2a:	c0 68       	rjmp	80010d36 <_fflush_r+0x3a>
80010d2c:	fe c8 d1 68 	sub	r8,pc,-11928
80010d30:	10 37       	cp.w	r7,r8
80010d32:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80010d36:	8e 6a       	ld.sh	r10,r7[0xc]
80010d38:	14 98       	mov	r8,r10
80010d3a:	ed ba 00 03 	bld	r10,0x3
80010d3e:	c4 20       	breq	80010dc2 <_fflush_r+0xc6>
80010d40:	ab ba       	sbr	r10,0xb
80010d42:	ae 6a       	st.h	r7[0xc],r10
80010d44:	6e 18       	ld.w	r8,r7[0x4]
80010d46:	58 08       	cp.w	r8,0
80010d48:	e0 89 00 06 	brgt	80010d54 <_fflush_r+0x58>
80010d4c:	6f 08       	ld.w	r8,r7[0x40]
80010d4e:	58 08       	cp.w	r8,0
80010d50:	e0 8a 00 5a 	brle	80010e04 <_fflush_r+0x108>
80010d54:	6e b8       	ld.w	r8,r7[0x2c]
80010d56:	58 08       	cp.w	r8,0
80010d58:	c5 60       	breq	80010e04 <_fflush_r+0x108>
80010d5a:	e2 1a 10 00 	andl	r10,0x1000,COH
80010d5e:	c0 30       	breq	80010d64 <_fflush_r+0x68>
80010d60:	6f 55       	ld.w	r5,r7[0x54]
80010d62:	c0 f8       	rjmp	80010d80 <_fflush_r+0x84>
80010d64:	30 19       	mov	r9,1
80010d66:	6e 8b       	ld.w	r11,r7[0x20]
80010d68:	0c 9c       	mov	r12,r6
80010d6a:	5d 18       	icall	r8
80010d6c:	18 95       	mov	r5,r12
80010d6e:	5b fc       	cp.w	r12,-1
80010d70:	c0 81       	brne	80010d80 <_fflush_r+0x84>
80010d72:	6c 38       	ld.w	r8,r6[0xc]
80010d74:	59 d8       	cp.w	r8,29
80010d76:	c4 70       	breq	80010e04 <_fflush_r+0x108>
80010d78:	8e 68       	ld.sh	r8,r7[0xc]
80010d7a:	a7 a8       	sbr	r8,0x6
80010d7c:	ae 68       	st.h	r7[0xc],r8
80010d7e:	d8 22       	popm	r4-r7,pc
80010d80:	8e 68       	ld.sh	r8,r7[0xc]
80010d82:	ed b8 00 02 	bld	r8,0x2
80010d86:	c0 91       	brne	80010d98 <_fflush_r+0x9c>
80010d88:	6e 18       	ld.w	r8,r7[0x4]
80010d8a:	10 15       	sub	r5,r8
80010d8c:	6e d8       	ld.w	r8,r7[0x34]
80010d8e:	58 08       	cp.w	r8,0
80010d90:	ef f8 10 10 	ld.wne	r8,r7[0x40]
80010d94:	eb d8 e1 15 	subne	r5,r5,r8
80010d98:	6e b8       	ld.w	r8,r7[0x2c]
80010d9a:	0c 9c       	mov	r12,r6
80010d9c:	30 09       	mov	r9,0
80010d9e:	0a 9a       	mov	r10,r5
80010da0:	6e 8b       	ld.w	r11,r7[0x20]
80010da2:	5d 18       	icall	r8
80010da4:	8e 68       	ld.sh	r8,r7[0xc]
80010da6:	0a 3c       	cp.w	r12,r5
80010da8:	c2 61       	brne	80010df4 <_fflush_r+0xf8>
80010daa:	ab d8       	cbr	r8,0xb
80010dac:	30 0c       	mov	r12,0
80010dae:	6e 49       	ld.w	r9,r7[0x10]
80010db0:	ae 68       	st.h	r7[0xc],r8
80010db2:	8f 1c       	st.w	r7[0x4],r12
80010db4:	8f 09       	st.w	r7[0x0],r9
80010db6:	ed b8 00 0c 	bld	r8,0xc
80010dba:	c2 51       	brne	80010e04 <_fflush_r+0x108>
80010dbc:	ef 45 00 54 	st.w	r7[84],r5
80010dc0:	d8 22       	popm	r4-r7,pc
80010dc2:	6e 45       	ld.w	r5,r7[0x10]
80010dc4:	58 05       	cp.w	r5,0
80010dc6:	c1 f0       	breq	80010e04 <_fflush_r+0x108>
80010dc8:	6e 04       	ld.w	r4,r7[0x0]
80010dca:	f5 da c0 02 	bfextu	r10,r10,0x0,0x2
80010dce:	8f 05       	st.w	r7[0x0],r5
80010dd0:	f9 b8 01 00 	movne	r8,0
80010dd4:	ef f8 00 05 	ld.weq	r8,r7[0x14]
80010dd8:	0a 14       	sub	r4,r5
80010dda:	8f 28       	st.w	r7[0x8],r8
80010ddc:	c1 18       	rjmp	80010dfe <_fflush_r+0x102>
80010dde:	08 99       	mov	r9,r4
80010de0:	0a 9a       	mov	r10,r5
80010de2:	6e a8       	ld.w	r8,r7[0x28]
80010de4:	6e 8b       	ld.w	r11,r7[0x20]
80010de6:	0c 9c       	mov	r12,r6
80010de8:	5d 18       	icall	r8
80010dea:	18 14       	sub	r4,r12
80010dec:	58 0c       	cp.w	r12,0
80010dee:	e0 89 00 07 	brgt	80010dfc <_fflush_r+0x100>
80010df2:	8e 68       	ld.sh	r8,r7[0xc]
80010df4:	a7 a8       	sbr	r8,0x6
80010df6:	3f fc       	mov	r12,-1
80010df8:	ae 68       	st.h	r7[0xc],r8
80010dfa:	d8 22       	popm	r4-r7,pc
80010dfc:	18 05       	add	r5,r12
80010dfe:	58 04       	cp.w	r4,0
80010e00:	fe 99 ff ef 	brgt	80010dde <_fflush_r+0xe2>
80010e04:	d8 2a       	popm	r4-r7,pc,r12=0
80010e06:	d7 03       	nop

80010e08 <__sfp_lock_acquire>:
80010e08:	5e fc       	retal	r12

80010e0a <__sfp_lock_release>:
80010e0a:	5e fc       	retal	r12

80010e0c <_cleanup_r>:
80010e0c:	d4 01       	pushm	lr
80010e0e:	fe cb e7 92 	sub	r11,pc,-6254
80010e12:	e0 a0 02 fd 	rcall	8001140c <_fwalk>
80010e16:	d8 02       	popm	pc

80010e18 <__sfmoreglue>:
80010e18:	d4 21       	pushm	r4-r7,lr
80010e1a:	16 95       	mov	r5,r11
80010e1c:	f6 06 10 5c 	mul	r6,r11,92
80010e20:	ec cb ff f4 	sub	r11,r6,-12
80010e24:	e0 a0 03 84 	rcall	8001152c <_malloc_r>
80010e28:	18 97       	mov	r7,r12
80010e2a:	c0 90       	breq	80010e3c <__sfmoreglue+0x24>
80010e2c:	99 15       	st.w	r12[0x4],r5
80010e2e:	30 0b       	mov	r11,0
80010e30:	2f 4c       	sub	r12,-12
80010e32:	0c 9a       	mov	r10,r6
80010e34:	8f 2c       	st.w	r7[0x8],r12
80010e36:	8f 0b       	st.w	r7[0x0],r11
80010e38:	fe b0 e5 e1 	rcall	8000d9fa <memset>
80010e3c:	0e 9c       	mov	r12,r7
80010e3e:	d8 22       	popm	r4-r7,pc

80010e40 <__sfp>:
80010e40:	d4 21       	pushm	r4-r7,lr
80010e42:	fe c8 d6 aa 	sub	r8,pc,-10582
80010e46:	18 96       	mov	r6,r12
80010e48:	70 07       	ld.w	r7,r8[0x0]
80010e4a:	6e 68       	ld.w	r8,r7[0x18]
80010e4c:	58 08       	cp.w	r8,0
80010e4e:	c0 31       	brne	80010e54 <__sfp+0x14>
80010e50:	0e 9c       	mov	r12,r7
80010e52:	c2 dc       	rcall	80010eac <__sinit>
80010e54:	ee c7 ff 28 	sub	r7,r7,-216
80010e58:	30 05       	mov	r5,0
80010e5a:	6e 2c       	ld.w	r12,r7[0x8]
80010e5c:	6e 18       	ld.w	r8,r7[0x4]
80010e5e:	c0 68       	rjmp	80010e6a <__sfp+0x2a>
80010e60:	98 69       	ld.sh	r9,r12[0xc]
80010e62:	ea 09 19 00 	cp.h	r9,r5
80010e66:	c1 10       	breq	80010e88 <__sfp+0x48>
80010e68:	2a 4c       	sub	r12,-92
80010e6a:	20 18       	sub	r8,1
80010e6c:	cf a7       	brpl	80010e60 <__sfp+0x20>
80010e6e:	6e 08       	ld.w	r8,r7[0x0]
80010e70:	58 08       	cp.w	r8,0
80010e72:	c0 61       	brne	80010e7e <__sfp+0x3e>
80010e74:	30 4b       	mov	r11,4
80010e76:	0c 9c       	mov	r12,r6
80010e78:	cd 0f       	rcall	80010e18 <__sfmoreglue>
80010e7a:	8f 0c       	st.w	r7[0x0],r12
80010e7c:	c0 30       	breq	80010e82 <__sfp+0x42>
80010e7e:	6e 07       	ld.w	r7,r7[0x0]
80010e80:	ce db       	rjmp	80010e5a <__sfp+0x1a>
80010e82:	30 c8       	mov	r8,12
80010e84:	8d 38       	st.w	r6[0xc],r8
80010e86:	d8 22       	popm	r4-r7,pc
80010e88:	30 08       	mov	r8,0
80010e8a:	f9 48 00 4c 	st.w	r12[76],r8
80010e8e:	99 08       	st.w	r12[0x0],r8
80010e90:	99 28       	st.w	r12[0x8],r8
80010e92:	99 18       	st.w	r12[0x4],r8
80010e94:	99 48       	st.w	r12[0x10],r8
80010e96:	99 58       	st.w	r12[0x14],r8
80010e98:	99 68       	st.w	r12[0x18],r8
80010e9a:	99 d8       	st.w	r12[0x34],r8
80010e9c:	99 e8       	st.w	r12[0x38],r8
80010e9e:	f9 48 00 48 	st.w	r12[72],r8
80010ea2:	3f f8       	mov	r8,-1
80010ea4:	b8 78       	st.h	r12[0xe],r8
80010ea6:	30 18       	mov	r8,1
80010ea8:	b8 68       	st.h	r12[0xc],r8
80010eaa:	d8 22       	popm	r4-r7,pc

80010eac <__sinit>:
80010eac:	d4 21       	pushm	r4-r7,lr
80010eae:	18 96       	mov	r6,r12
80010eb0:	78 67       	ld.w	r7,r12[0x18]
80010eb2:	58 07       	cp.w	r7,0
80010eb4:	c4 91       	brne	80010f46 <__sinit+0x9a>
80010eb6:	fe c8 00 aa 	sub	r8,pc,170
80010eba:	30 15       	mov	r5,1
80010ebc:	99 a8       	st.w	r12[0x28],r8
80010ebe:	f9 47 00 d8 	st.w	r12[216],r7
80010ec2:	f9 47 00 dc 	st.w	r12[220],r7
80010ec6:	f9 47 00 e0 	st.w	r12[224],r7
80010eca:	99 65       	st.w	r12[0x18],r5
80010ecc:	cb af       	rcall	80010e40 <__sfp>
80010ece:	8d 0c       	st.w	r6[0x0],r12
80010ed0:	0c 9c       	mov	r12,r6
80010ed2:	cb 7f       	rcall	80010e40 <__sfp>
80010ed4:	8d 1c       	st.w	r6[0x4],r12
80010ed6:	0c 9c       	mov	r12,r6
80010ed8:	cb 4f       	rcall	80010e40 <__sfp>
80010eda:	6c 09       	ld.w	r9,r6[0x0]
80010edc:	30 48       	mov	r8,4
80010ede:	93 07       	st.w	r9[0x0],r7
80010ee0:	b2 68       	st.h	r9[0xc],r8
80010ee2:	93 17       	st.w	r9[0x4],r7
80010ee4:	93 27       	st.w	r9[0x8],r7
80010ee6:	6c 18       	ld.w	r8,r6[0x4]
80010ee8:	b2 77       	st.h	r9[0xe],r7
80010eea:	93 47       	st.w	r9[0x10],r7
80010eec:	93 57       	st.w	r9[0x14],r7
80010eee:	93 67       	st.w	r9[0x18],r7
80010ef0:	93 89       	st.w	r9[0x20],r9
80010ef2:	91 07       	st.w	r8[0x0],r7
80010ef4:	91 17       	st.w	r8[0x4],r7
80010ef6:	91 27       	st.w	r8[0x8],r7
80010ef8:	fe ce eb 78 	sub	lr,pc,-5256
80010efc:	fe cb eb a8 	sub	r11,pc,-5208
80010f00:	93 9e       	st.w	r9[0x24],lr
80010f02:	93 ab       	st.w	r9[0x28],r11
80010f04:	fe ca eb d0 	sub	r10,pc,-5168
80010f08:	fe c4 eb dc 	sub	r4,pc,-5156
80010f0c:	93 ba       	st.w	r9[0x2c],r10
80010f0e:	93 c4       	st.w	r9[0x30],r4
80010f10:	30 99       	mov	r9,9
80010f12:	b0 69       	st.h	r8[0xc],r9
80010f14:	b0 75       	st.h	r8[0xe],r5
80010f16:	91 c4       	st.w	r8[0x30],r4
80010f18:	91 47       	st.w	r8[0x10],r7
80010f1a:	91 57       	st.w	r8[0x14],r7
80010f1c:	91 67       	st.w	r8[0x18],r7
80010f1e:	91 88       	st.w	r8[0x20],r8
80010f20:	91 9e       	st.w	r8[0x24],lr
80010f22:	91 ab       	st.w	r8[0x28],r11
80010f24:	91 ba       	st.w	r8[0x2c],r10
80010f26:	8d 2c       	st.w	r6[0x8],r12
80010f28:	31 28       	mov	r8,18
80010f2a:	99 07       	st.w	r12[0x0],r7
80010f2c:	b8 68       	st.h	r12[0xc],r8
80010f2e:	99 17       	st.w	r12[0x4],r7
80010f30:	99 27       	st.w	r12[0x8],r7
80010f32:	30 28       	mov	r8,2
80010f34:	b8 78       	st.h	r12[0xe],r8
80010f36:	99 c4       	st.w	r12[0x30],r4
80010f38:	99 67       	st.w	r12[0x18],r7
80010f3a:	99 9e       	st.w	r12[0x24],lr
80010f3c:	99 ab       	st.w	r12[0x28],r11
80010f3e:	99 ba       	st.w	r12[0x2c],r10
80010f40:	99 47       	st.w	r12[0x10],r7
80010f42:	99 57       	st.w	r12[0x14],r7
80010f44:	99 8c       	st.w	r12[0x20],r12
80010f46:	d8 22       	popm	r4-r7,pc

80010f48 <_malloc_trim_r>:
80010f48:	d4 21       	pushm	r4-r7,lr
80010f4a:	16 95       	mov	r5,r11
80010f4c:	18 97       	mov	r7,r12
80010f4e:	e0 a0 05 31 	rcall	800119b0 <__malloc_lock>
80010f52:	e0 64 01 cc 	mov	r4,460
80010f56:	68 28       	ld.w	r8,r4[0x8]
80010f58:	70 16       	ld.w	r6,r8[0x4]
80010f5a:	e0 16 ff fc 	andl	r6,0xfffc
80010f5e:	ec c8 ff 91 	sub	r8,r6,-111
80010f62:	f0 05 01 05 	sub	r5,r8,r5
80010f66:	e0 15 ff 80 	andl	r5,0xff80
80010f6a:	ea c5 00 80 	sub	r5,r5,128
80010f6e:	e0 45 00 7f 	cp.w	r5,127
80010f72:	e0 8a 00 25 	brle	80010fbc <_malloc_trim_r+0x74>
80010f76:	30 0b       	mov	r11,0
80010f78:	0e 9c       	mov	r12,r7
80010f7a:	e0 a0 09 c9 	rcall	8001230c <_sbrk_r>
80010f7e:	68 28       	ld.w	r8,r4[0x8]
80010f80:	0c 08       	add	r8,r6
80010f82:	10 3c       	cp.w	r12,r8
80010f84:	c1 c1       	brne	80010fbc <_malloc_trim_r+0x74>
80010f86:	ea 0b 11 00 	rsub	r11,r5,0
80010f8a:	0e 9c       	mov	r12,r7
80010f8c:	e0 a0 09 c0 	rcall	8001230c <_sbrk_r>
80010f90:	5b fc       	cp.w	r12,-1
80010f92:	c1 91       	brne	80010fc4 <_malloc_trim_r+0x7c>
80010f94:	30 0b       	mov	r11,0
80010f96:	0e 9c       	mov	r12,r7
80010f98:	e0 a0 09 ba 	rcall	8001230c <_sbrk_r>
80010f9c:	68 28       	ld.w	r8,r4[0x8]
80010f9e:	f8 08 01 09 	sub	r9,r12,r8
80010fa2:	58 f9       	cp.w	r9,15
80010fa4:	e0 8a 00 0c 	brle	80010fbc <_malloc_trim_r+0x74>
80010fa8:	a1 a9       	sbr	r9,0x0
80010faa:	91 19       	st.w	r8[0x4],r9
80010fac:	e0 68 05 d8 	mov	r8,1496
80010fb0:	70 09       	ld.w	r9,r8[0x0]
80010fb2:	e0 68 0c b4 	mov	r8,3252
80010fb6:	f8 09 01 09 	sub	r9,r12,r9
80010fba:	91 09       	st.w	r8[0x0],r9
80010fbc:	0e 9c       	mov	r12,r7
80010fbe:	e0 a0 04 fa 	rcall	800119b2 <__malloc_unlock>
80010fc2:	d8 2a       	popm	r4-r7,pc,r12=0
80010fc4:	68 28       	ld.w	r8,r4[0x8]
80010fc6:	0a 16       	sub	r6,r5
80010fc8:	a1 a6       	sbr	r6,0x0
80010fca:	91 16       	st.w	r8[0x4],r6
80010fcc:	e0 68 0c b4 	mov	r8,3252
80010fd0:	70 09       	ld.w	r9,r8[0x0]
80010fd2:	0a 19       	sub	r9,r5
80010fd4:	0e 9c       	mov	r12,r7
80010fd6:	91 09       	st.w	r8[0x0],r9
80010fd8:	e0 a0 04 ed 	rcall	800119b2 <__malloc_unlock>
80010fdc:	da 2a       	popm	r4-r7,pc,r12=1
80010fde:	d7 03       	nop

80010fe0 <_free_r>:
80010fe0:	d4 21       	pushm	r4-r7,lr
80010fe2:	16 96       	mov	r6,r11
80010fe4:	18 97       	mov	r7,r12
80010fe6:	58 0b       	cp.w	r11,0
80010fe8:	e0 80 00 c0 	breq	80011168 <_free_r+0x188>
80010fec:	e0 a0 04 e2 	rcall	800119b0 <__malloc_lock>
80010ff0:	20 86       	sub	r6,8
80010ff2:	e0 6a 01 cc 	mov	r10,460
80010ff6:	6c 18       	ld.w	r8,r6[0x4]
80010ff8:	74 2e       	ld.w	lr,r10[0x8]
80010ffa:	f9 d8 c0 01 	bfextu	r12,r8,0x0,0x1
80010ffe:	a1 c8       	cbr	r8,0x0
80011000:	ec 08 00 09 	add	r9,r6,r8
80011004:	72 1b       	ld.w	r11,r9[0x4]
80011006:	e0 1b ff fc 	andl	r11,0xfffc
8001100a:	1c 39       	cp.w	r9,lr
8001100c:	c1 e1       	brne	80011048 <_free_r+0x68>
8001100e:	f6 08 00 08 	add	r8,r11,r8
80011012:	58 0c       	cp.w	r12,0
80011014:	c0 81       	brne	80011024 <_free_r+0x44>
80011016:	6c 09       	ld.w	r9,r6[0x0]
80011018:	12 16       	sub	r6,r9
8001101a:	12 08       	add	r8,r9
8001101c:	6c 3b       	ld.w	r11,r6[0xc]
8001101e:	6c 29       	ld.w	r9,r6[0x8]
80011020:	97 29       	st.w	r11[0x8],r9
80011022:	93 3b       	st.w	r9[0xc],r11
80011024:	10 99       	mov	r9,r8
80011026:	95 26       	st.w	r10[0x8],r6
80011028:	a1 a9       	sbr	r9,0x0
8001102a:	8d 19       	st.w	r6[0x4],r9
8001102c:	e0 69 05 d4 	mov	r9,1492
80011030:	72 09       	ld.w	r9,r9[0x0]
80011032:	12 38       	cp.w	r8,r9
80011034:	c0 63       	brcs	80011040 <_free_r+0x60>
80011036:	e0 68 0c b0 	mov	r8,3248
8001103a:	0e 9c       	mov	r12,r7
8001103c:	70 0b       	ld.w	r11,r8[0x0]
8001103e:	c8 5f       	rcall	80010f48 <_malloc_trim_r>
80011040:	0e 9c       	mov	r12,r7
80011042:	e0 a0 04 b8 	rcall	800119b2 <__malloc_unlock>
80011046:	d8 22       	popm	r4-r7,pc
80011048:	93 1b       	st.w	r9[0x4],r11
8001104a:	58 0c       	cp.w	r12,0
8001104c:	c0 30       	breq	80011052 <_free_r+0x72>
8001104e:	30 0c       	mov	r12,0
80011050:	c1 08       	rjmp	80011070 <_free_r+0x90>
80011052:	6c 0e       	ld.w	lr,r6[0x0]
80011054:	f4 c5 ff f8 	sub	r5,r10,-8
80011058:	1c 16       	sub	r6,lr
8001105a:	1c 08       	add	r8,lr
8001105c:	6c 2e       	ld.w	lr,r6[0x8]
8001105e:	0a 3e       	cp.w	lr,r5
80011060:	f9 bc 00 01 	moveq	r12,1
80011064:	ed f5 10 03 	ld.wne	r5,r6[0xc]
80011068:	eb fe 1a 02 	st.wne	r5[0x8],lr
8001106c:	fd f5 1a 03 	st.wne	lr[0xc],r5
80011070:	f2 0b 00 0e 	add	lr,r9,r11
80011074:	7c 1e       	ld.w	lr,lr[0x4]
80011076:	ed be 00 00 	bld	lr,0x0
8001107a:	c1 40       	breq	800110a2 <_free_r+0xc2>
8001107c:	16 08       	add	r8,r11
8001107e:	58 0c       	cp.w	r12,0
80011080:	c0 d1       	brne	8001109a <_free_r+0xba>
80011082:	e0 6e 01 cc 	mov	lr,460
80011086:	72 2b       	ld.w	r11,r9[0x8]
80011088:	2f 8e       	sub	lr,-8
8001108a:	1c 3b       	cp.w	r11,lr
8001108c:	c0 71       	brne	8001109a <_free_r+0xba>
8001108e:	97 36       	st.w	r11[0xc],r6
80011090:	97 26       	st.w	r11[0x8],r6
80011092:	8d 2b       	st.w	r6[0x8],r11
80011094:	8d 3b       	st.w	r6[0xc],r11
80011096:	30 1c       	mov	r12,1
80011098:	c0 58       	rjmp	800110a2 <_free_r+0xc2>
8001109a:	72 2b       	ld.w	r11,r9[0x8]
8001109c:	72 39       	ld.w	r9,r9[0xc]
8001109e:	93 2b       	st.w	r9[0x8],r11
800110a0:	97 39       	st.w	r11[0xc],r9
800110a2:	10 99       	mov	r9,r8
800110a4:	ec 08 09 08 	st.w	r6[r8],r8
800110a8:	a1 a9       	sbr	r9,0x0
800110aa:	8d 19       	st.w	r6[0x4],r9
800110ac:	58 0c       	cp.w	r12,0
800110ae:	c5 a1       	brne	80011162 <_free_r+0x182>
800110b0:	e0 48 01 ff 	cp.w	r8,511
800110b4:	e0 8b 00 13 	brhi	800110da <_free_r+0xfa>
800110b8:	a3 98       	lsr	r8,0x3
800110ba:	f4 08 00 39 	add	r9,r10,r8<<0x3
800110be:	72 2b       	ld.w	r11,r9[0x8]
800110c0:	8d 39       	st.w	r6[0xc],r9
800110c2:	8d 2b       	st.w	r6[0x8],r11
800110c4:	97 36       	st.w	r11[0xc],r6
800110c6:	93 26       	st.w	r9[0x8],r6
800110c8:	a3 48       	asr	r8,0x2
800110ca:	74 19       	ld.w	r9,r10[0x4]
800110cc:	30 1b       	mov	r11,1
800110ce:	f6 08 09 48 	lsl	r8,r11,r8
800110d2:	f3 e8 10 08 	or	r8,r9,r8
800110d6:	95 18       	st.w	r10[0x4],r8
800110d8:	c4 58       	rjmp	80011162 <_free_r+0x182>
800110da:	f0 0b 16 09 	lsr	r11,r8,0x9
800110de:	58 4b       	cp.w	r11,4
800110e0:	e0 8b 00 06 	brhi	800110ec <_free_r+0x10c>
800110e4:	f0 0b 16 06 	lsr	r11,r8,0x6
800110e8:	2c 8b       	sub	r11,-56
800110ea:	c2 08       	rjmp	8001112a <_free_r+0x14a>
800110ec:	59 4b       	cp.w	r11,20
800110ee:	e0 8b 00 04 	brhi	800110f6 <_free_r+0x116>
800110f2:	2a 5b       	sub	r11,-91
800110f4:	c1 b8       	rjmp	8001112a <_free_r+0x14a>
800110f6:	e0 4b 00 54 	cp.w	r11,84
800110fa:	e0 8b 00 06 	brhi	80011106 <_free_r+0x126>
800110fe:	f0 0b 16 0c 	lsr	r11,r8,0xc
80011102:	29 2b       	sub	r11,-110
80011104:	c1 38       	rjmp	8001112a <_free_r+0x14a>
80011106:	e0 4b 01 54 	cp.w	r11,340
8001110a:	e0 8b 00 06 	brhi	80011116 <_free_r+0x136>
8001110e:	f0 0b 16 0f 	lsr	r11,r8,0xf
80011112:	28 9b       	sub	r11,-119
80011114:	c0 b8       	rjmp	8001112a <_free_r+0x14a>
80011116:	e0 4b 05 54 	cp.w	r11,1364
8001111a:	e0 88 00 05 	brls	80011124 <_free_r+0x144>
8001111e:	37 eb       	mov	r11,126
80011120:	c0 58       	rjmp	8001112a <_free_r+0x14a>
80011122:	d7 03       	nop
80011124:	f0 0b 16 12 	lsr	r11,r8,0x12
80011128:	28 4b       	sub	r11,-124
8001112a:	f4 0b 00 3c 	add	r12,r10,r11<<0x3
8001112e:	78 29       	ld.w	r9,r12[0x8]
80011130:	18 39       	cp.w	r9,r12
80011132:	c0 e1       	brne	8001114e <_free_r+0x16e>
80011134:	74 18       	ld.w	r8,r10[0x4]
80011136:	a3 4b       	asr	r11,0x2
80011138:	30 1c       	mov	r12,1
8001113a:	f8 0b 09 4b 	lsl	r11,r12,r11
8001113e:	f1 eb 10 0b 	or	r11,r8,r11
80011142:	12 98       	mov	r8,r9
80011144:	95 1b       	st.w	r10[0x4],r11
80011146:	c0 a8       	rjmp	8001115a <_free_r+0x17a>
80011148:	72 29       	ld.w	r9,r9[0x8]
8001114a:	18 39       	cp.w	r9,r12
8001114c:	c0 60       	breq	80011158 <_free_r+0x178>
8001114e:	72 1a       	ld.w	r10,r9[0x4]
80011150:	e0 1a ff fc 	andl	r10,0xfffc
80011154:	14 38       	cp.w	r8,r10
80011156:	cf 93       	brcs	80011148 <_free_r+0x168>
80011158:	72 38       	ld.w	r8,r9[0xc]
8001115a:	8d 38       	st.w	r6[0xc],r8
8001115c:	8d 29       	st.w	r6[0x8],r9
8001115e:	93 36       	st.w	r9[0xc],r6
80011160:	91 26       	st.w	r8[0x8],r6
80011162:	0e 9c       	mov	r12,r7
80011164:	e0 a0 04 27 	rcall	800119b2 <__malloc_unlock>
80011168:	d8 22       	popm	r4-r7,pc
8001116a:	d7 03       	nop

8001116c <__sfvwrite_r>:
8001116c:	d4 31       	pushm	r0-r7,lr
8001116e:	20 3d       	sub	sp,12
80011170:	14 94       	mov	r4,r10
80011172:	18 95       	mov	r5,r12
80011174:	16 97       	mov	r7,r11
80011176:	74 28       	ld.w	r8,r10[0x8]
80011178:	58 08       	cp.w	r8,0
8001117a:	e0 80 01 45 	breq	80011404 <__sfvwrite_r+0x298>
8001117e:	96 68       	ld.sh	r8,r11[0xc]
80011180:	ed b8 00 03 	bld	r8,0x3
80011184:	c0 41       	brne	8001118c <__sfvwrite_r+0x20>
80011186:	76 48       	ld.w	r8,r11[0x10]
80011188:	58 08       	cp.w	r8,0
8001118a:	c0 c1       	brne	800111a2 <__sfvwrite_r+0x36>
8001118c:	0e 9b       	mov	r11,r7
8001118e:	0a 9c       	mov	r12,r5
80011190:	fe b0 f6 ca 	rcall	8000ff24 <__swsetup_r>
80011194:	c0 70       	breq	800111a2 <__sfvwrite_r+0x36>
80011196:	8e 68       	ld.sh	r8,r7[0xc]
80011198:	a7 a8       	sbr	r8,0x6
8001119a:	ae 68       	st.h	r7[0xc],r8
8001119c:	30 98       	mov	r8,9
8001119e:	8b 38       	st.w	r5[0xc],r8
800111a0:	c3 09       	rjmp	80011400 <__sfvwrite_r+0x294>
800111a2:	8e 63       	ld.sh	r3,r7[0xc]
800111a4:	68 00       	ld.w	r0,r4[0x0]
800111a6:	06 96       	mov	r6,r3
800111a8:	e2 16 00 02 	andl	r6,0x2,COH
800111ac:	c2 10       	breq	800111ee <__sfvwrite_r+0x82>
800111ae:	30 03       	mov	r3,0
800111b0:	e0 62 04 00 	mov	r2,1024
800111b4:	06 96       	mov	r6,r3
800111b6:	c0 48       	rjmp	800111be <__sfvwrite_r+0x52>
800111b8:	60 03       	ld.w	r3,r0[0x0]
800111ba:	60 16       	ld.w	r6,r0[0x4]
800111bc:	2f 80       	sub	r0,-8
800111be:	58 06       	cp.w	r6,0
800111c0:	cf c0       	breq	800111b8 <__sfvwrite_r+0x4c>
800111c2:	e0 46 04 00 	cp.w	r6,1024
800111c6:	ec 09 17 80 	movls	r9,r6
800111ca:	e4 09 17 b0 	movhi	r9,r2
800111ce:	06 9a       	mov	r10,r3
800111d0:	6e a8       	ld.w	r8,r7[0x28]
800111d2:	6e 8b       	ld.w	r11,r7[0x20]
800111d4:	0a 9c       	mov	r12,r5
800111d6:	5d 18       	icall	r8
800111d8:	18 16       	sub	r6,r12
800111da:	58 0c       	cp.w	r12,0
800111dc:	e0 8a 01 0f 	brle	800113fa <__sfvwrite_r+0x28e>
800111e0:	68 28       	ld.w	r8,r4[0x8]
800111e2:	18 18       	sub	r8,r12
800111e4:	89 28       	st.w	r4[0x8],r8
800111e6:	e0 80 01 0f 	breq	80011404 <__sfvwrite_r+0x298>
800111ea:	18 03       	add	r3,r12
800111ec:	ce 9b       	rjmp	800111be <__sfvwrite_r+0x52>
800111ee:	e7 d3 c0 01 	bfextu	r3,r3,0x0,0x1
800111f2:	c0 70       	breq	80011200 <__sfvwrite_r+0x94>
800111f4:	50 06       	stdsp	sp[0x0],r6
800111f6:	0c 93       	mov	r3,r6
800111f8:	0c 91       	mov	r1,r6
800111fa:	50 15       	stdsp	sp[0x4],r5
800111fc:	08 92       	mov	r2,r4
800111fe:	c9 e8       	rjmp	8001133a <__sfvwrite_r+0x1ce>
80011200:	06 96       	mov	r6,r3
80011202:	08 91       	mov	r1,r4
80011204:	c0 48       	rjmp	8001120c <__sfvwrite_r+0xa0>
80011206:	60 03       	ld.w	r3,r0[0x0]
80011208:	60 16       	ld.w	r6,r0[0x4]
8001120a:	2f 80       	sub	r0,-8
8001120c:	58 06       	cp.w	r6,0
8001120e:	cf c0       	breq	80011206 <__sfvwrite_r+0x9a>
80011210:	8e 68       	ld.sh	r8,r7[0xc]
80011212:	6e 24       	ld.w	r4,r7[0x8]
80011214:	10 99       	mov	r9,r8
80011216:	e2 19 02 00 	andl	r9,0x200,COH
8001121a:	c5 50       	breq	800112c4 <__sfvwrite_r+0x158>
8001121c:	08 36       	cp.w	r6,r4
8001121e:	c4 33       	brcs	800112a4 <__sfvwrite_r+0x138>
80011220:	10 99       	mov	r9,r8
80011222:	e2 19 04 80 	andl	r9,0x480,COH
80011226:	c3 f0       	breq	800112a4 <__sfvwrite_r+0x138>
80011228:	6e 4b       	ld.w	r11,r7[0x10]
8001122a:	6e 09       	ld.w	r9,r7[0x0]
8001122c:	16 19       	sub	r9,r11
8001122e:	50 09       	stdsp	sp[0x0],r9
80011230:	6e 59       	ld.w	r9,r7[0x14]
80011232:	10 9c       	mov	r12,r8
80011234:	f2 09 00 1a 	add	r10,r9,r9<<0x1
80011238:	30 28       	mov	r8,2
8001123a:	f4 08 0c 08 	divs	r8,r10,r8
8001123e:	fa e9 00 04 	st.d	sp[4],r8
80011242:	10 94       	mov	r4,r8
80011244:	40 09       	lddsp	r9,sp[0x0]
80011246:	e2 1c 04 00 	andl	r12,0x400,COH
8001124a:	2f f9       	sub	r9,-1
8001124c:	0c 09       	add	r9,r6
8001124e:	12 38       	cp.w	r8,r9
80011250:	f2 04 17 30 	movlo	r4,r9
80011254:	58 0c       	cp.w	r12,0
80011256:	c1 00       	breq	80011276 <__sfvwrite_r+0x10a>
80011258:	08 9b       	mov	r11,r4
8001125a:	0a 9c       	mov	r12,r5
8001125c:	c6 8d       	rcall	8001152c <_malloc_r>
8001125e:	18 92       	mov	r2,r12
80011260:	c1 40       	breq	80011288 <__sfvwrite_r+0x11c>
80011262:	40 0a       	lddsp	r10,sp[0x0]
80011264:	6e 4b       	ld.w	r11,r7[0x10]
80011266:	fe b0 e3 26 	rcall	8000d8b2 <memcpy>
8001126a:	8e 68       	ld.sh	r8,r7[0xc]
8001126c:	e0 18 fb 7f 	andl	r8,0xfb7f
80011270:	a7 b8       	sbr	r8,0x7
80011272:	ae 68       	st.h	r7[0xc],r8
80011274:	c0 d8       	rjmp	8001128e <__sfvwrite_r+0x122>
80011276:	08 9a       	mov	r10,r4
80011278:	0a 9c       	mov	r12,r5
8001127a:	e0 a0 06 c5 	rcall	80012004 <_realloc_r>
8001127e:	18 92       	mov	r2,r12
80011280:	c0 71       	brne	8001128e <__sfvwrite_r+0x122>
80011282:	6e 4b       	ld.w	r11,r7[0x10]
80011284:	0a 9c       	mov	r12,r5
80011286:	ca de       	rcall	80010fe0 <_free_r>
80011288:	30 c8       	mov	r8,12
8001128a:	8b 38       	st.w	r5[0xc],r8
8001128c:	cb 78       	rjmp	800113fa <__sfvwrite_r+0x28e>
8001128e:	40 0a       	lddsp	r10,sp[0x0]
80011290:	40 09       	lddsp	r9,sp[0x0]
80011292:	e8 0a 01 0a 	sub	r10,r4,r10
80011296:	e4 09 00 08 	add	r8,r2,r9
8001129a:	8f 54       	st.w	r7[0x14],r4
8001129c:	8f 2a       	st.w	r7[0x8],r10
8001129e:	8f 08       	st.w	r7[0x0],r8
800112a0:	8f 42       	st.w	r7[0x10],r2
800112a2:	0c 94       	mov	r4,r6
800112a4:	08 36       	cp.w	r6,r4
800112a6:	ec 04 17 30 	movlo	r4,r6
800112aa:	06 9b       	mov	r11,r3
800112ac:	08 9a       	mov	r10,r4
800112ae:	6e 0c       	ld.w	r12,r7[0x0]
800112b0:	e0 a0 03 61 	rcall	80011972 <memmove>
800112b4:	6e 08       	ld.w	r8,r7[0x0]
800112b6:	08 08       	add	r8,r4
800112b8:	8f 08       	st.w	r7[0x0],r8
800112ba:	6e 28       	ld.w	r8,r7[0x8]
800112bc:	08 18       	sub	r8,r4
800112be:	0c 94       	mov	r4,r6
800112c0:	8f 28       	st.w	r7[0x8],r8
800112c2:	c3 08       	rjmp	80011322 <__sfvwrite_r+0x1b6>
800112c4:	08 36       	cp.w	r6,r4
800112c6:	5f ba       	srhi	r10
800112c8:	6e 0c       	ld.w	r12,r7[0x0]
800112ca:	6e 48       	ld.w	r8,r7[0x10]
800112cc:	10 3c       	cp.w	r12,r8
800112ce:	5f b8       	srhi	r8
800112d0:	f5 e8 00 08 	and	r8,r10,r8
800112d4:	f2 08 18 00 	cp.b	r8,r9
800112d8:	c0 e0       	breq	800112f4 <__sfvwrite_r+0x188>
800112da:	06 9b       	mov	r11,r3
800112dc:	08 9a       	mov	r10,r4
800112de:	e0 a0 03 4a 	rcall	80011972 <memmove>
800112e2:	6e 08       	ld.w	r8,r7[0x0]
800112e4:	08 08       	add	r8,r4
800112e6:	0e 9b       	mov	r11,r7
800112e8:	8f 08       	st.w	r7[0x0],r8
800112ea:	0a 9c       	mov	r12,r5
800112ec:	fe b0 fd 08 	rcall	80010cfc <_fflush_r>
800112f0:	c1 90       	breq	80011322 <__sfvwrite_r+0x1b6>
800112f2:	c8 48       	rjmp	800113fa <__sfvwrite_r+0x28e>
800112f4:	6e 59       	ld.w	r9,r7[0x14]
800112f6:	12 36       	cp.w	r6,r9
800112f8:	c0 a3       	brcs	8001130c <__sfvwrite_r+0x1a0>
800112fa:	6e a8       	ld.w	r8,r7[0x28]
800112fc:	06 9a       	mov	r10,r3
800112fe:	6e 8b       	ld.w	r11,r7[0x20]
80011300:	0a 9c       	mov	r12,r5
80011302:	5d 18       	icall	r8
80011304:	18 94       	mov	r4,r12
80011306:	e0 89 00 0e 	brgt	80011322 <__sfvwrite_r+0x1b6>
8001130a:	c7 88       	rjmp	800113fa <__sfvwrite_r+0x28e>
8001130c:	0c 9a       	mov	r10,r6
8001130e:	06 9b       	mov	r11,r3
80011310:	e0 a0 03 31 	rcall	80011972 <memmove>
80011314:	6e 08       	ld.w	r8,r7[0x0]
80011316:	0c 08       	add	r8,r6
80011318:	0c 94       	mov	r4,r6
8001131a:	8f 08       	st.w	r7[0x0],r8
8001131c:	6e 28       	ld.w	r8,r7[0x8]
8001131e:	0c 18       	sub	r8,r6
80011320:	8f 28       	st.w	r7[0x8],r8
80011322:	62 28       	ld.w	r8,r1[0x8]
80011324:	08 18       	sub	r8,r4
80011326:	83 28       	st.w	r1[0x8],r8
80011328:	c6 e0       	breq	80011404 <__sfvwrite_r+0x298>
8001132a:	08 16       	sub	r6,r4
8001132c:	08 03       	add	r3,r4
8001132e:	c6 fb       	rjmp	8001120c <__sfvwrite_r+0xa0>
80011330:	60 03       	ld.w	r3,r0[0x0]
80011332:	60 11       	ld.w	r1,r0[0x4]
80011334:	30 08       	mov	r8,0
80011336:	2f 80       	sub	r0,-8
80011338:	50 08       	stdsp	sp[0x0],r8
8001133a:	58 01       	cp.w	r1,0
8001133c:	cf a0       	breq	80011330 <__sfvwrite_r+0x1c4>
8001133e:	40 0a       	lddsp	r10,sp[0x0]
80011340:	58 0a       	cp.w	r10,0
80011342:	c1 51       	brne	8001136c <__sfvwrite_r+0x200>
80011344:	e2 c6 ff ff 	sub	r6,r1,-1
80011348:	02 9a       	mov	r10,r1
8001134a:	30 ab       	mov	r11,10
8001134c:	06 9c       	mov	r12,r3
8001134e:	e0 a0 03 07 	rcall	8001195c <memchr>
80011352:	f8 c8 ff ff 	sub	r8,r12,-1
80011356:	58 0c       	cp.w	r12,0
80011358:	f1 d3 e1 16 	subne	r6,r8,r3
8001135c:	f9 b9 01 01 	movne	r9,1
80011360:	fb f9 1a 00 	st.wne	sp[0x0],r9
80011364:	f9 b8 00 01 	moveq	r8,1
80011368:	fb f8 0a 00 	st.weq	sp[0x0],r8
8001136c:	02 36       	cp.w	r6,r1
8001136e:	ec 04 17 80 	movls	r4,r6
80011372:	e2 04 17 b0 	movhi	r4,r1
80011376:	6e 59       	ld.w	r9,r7[0x14]
80011378:	6e 25       	ld.w	r5,r7[0x8]
8001137a:	f2 05 00 05 	add	r5,r9,r5
8001137e:	0a 34       	cp.w	r4,r5
80011380:	5f 9a       	srgt	r10
80011382:	6e 0c       	ld.w	r12,r7[0x0]
80011384:	6e 48       	ld.w	r8,r7[0x10]
80011386:	10 3c       	cp.w	r12,r8
80011388:	5f b8       	srhi	r8
8001138a:	f5 e8 00 08 	and	r8,r10,r8
8001138e:	30 0a       	mov	r10,0
80011390:	f4 08 18 00 	cp.b	r8,r10
80011394:	c0 e0       	breq	800113b0 <__sfvwrite_r+0x244>
80011396:	06 9b       	mov	r11,r3
80011398:	0a 9a       	mov	r10,r5
8001139a:	e0 a0 02 ec 	rcall	80011972 <memmove>
8001139e:	6e 08       	ld.w	r8,r7[0x0]
800113a0:	0a 08       	add	r8,r5
800113a2:	0e 9b       	mov	r11,r7
800113a4:	8f 08       	st.w	r7[0x0],r8
800113a6:	40 1c       	lddsp	r12,sp[0x4]
800113a8:	fe b0 fc aa 	rcall	80010cfc <_fflush_r>
800113ac:	c1 80       	breq	800113dc <__sfvwrite_r+0x270>
800113ae:	c2 68       	rjmp	800113fa <__sfvwrite_r+0x28e>
800113b0:	12 34       	cp.w	r4,r9
800113b2:	c0 a5       	brlt	800113c6 <__sfvwrite_r+0x25a>
800113b4:	6e a8       	ld.w	r8,r7[0x28]
800113b6:	06 9a       	mov	r10,r3
800113b8:	6e 8b       	ld.w	r11,r7[0x20]
800113ba:	40 1c       	lddsp	r12,sp[0x4]
800113bc:	5d 18       	icall	r8
800113be:	18 95       	mov	r5,r12
800113c0:	e0 89 00 0e 	brgt	800113dc <__sfvwrite_r+0x270>
800113c4:	c1 b8       	rjmp	800113fa <__sfvwrite_r+0x28e>
800113c6:	08 9a       	mov	r10,r4
800113c8:	06 9b       	mov	r11,r3
800113ca:	e0 a0 02 d4 	rcall	80011972 <memmove>
800113ce:	6e 08       	ld.w	r8,r7[0x0]
800113d0:	08 08       	add	r8,r4
800113d2:	08 95       	mov	r5,r4
800113d4:	8f 08       	st.w	r7[0x0],r8
800113d6:	6e 28       	ld.w	r8,r7[0x8]
800113d8:	08 18       	sub	r8,r4
800113da:	8f 28       	st.w	r7[0x8],r8
800113dc:	0a 16       	sub	r6,r5
800113de:	c0 71       	brne	800113ec <__sfvwrite_r+0x280>
800113e0:	0e 9b       	mov	r11,r7
800113e2:	40 1c       	lddsp	r12,sp[0x4]
800113e4:	fe b0 fc 8c 	rcall	80010cfc <_fflush_r>
800113e8:	c0 91       	brne	800113fa <__sfvwrite_r+0x28e>
800113ea:	50 06       	stdsp	sp[0x0],r6
800113ec:	64 28       	ld.w	r8,r2[0x8]
800113ee:	0a 18       	sub	r8,r5
800113f0:	85 28       	st.w	r2[0x8],r8
800113f2:	c0 90       	breq	80011404 <__sfvwrite_r+0x298>
800113f4:	0a 11       	sub	r1,r5
800113f6:	0a 03       	add	r3,r5
800113f8:	ca 1b       	rjmp	8001133a <__sfvwrite_r+0x1ce>
800113fa:	8e 68       	ld.sh	r8,r7[0xc]
800113fc:	a7 a8       	sbr	r8,0x6
800113fe:	ae 68       	st.h	r7[0xc],r8
80011400:	3f fc       	mov	r12,-1
80011402:	c0 28       	rjmp	80011406 <__sfvwrite_r+0x29a>
80011404:	30 0c       	mov	r12,0
80011406:	2f dd       	sub	sp,-12
80011408:	d8 32       	popm	r0-r7,pc
8001140a:	d7 03       	nop

8001140c <_fwalk>:
8001140c:	d4 31       	pushm	r0-r7,lr
8001140e:	30 05       	mov	r5,0
80011410:	16 91       	mov	r1,r11
80011412:	f8 c7 ff 28 	sub	r7,r12,-216
80011416:	0a 92       	mov	r2,r5
80011418:	fe b0 fc f8 	rcall	80010e08 <__sfp_lock_acquire>
8001141c:	3f f3       	mov	r3,-1
8001141e:	c1 68       	rjmp	8001144a <_fwalk+0x3e>
80011420:	6e 26       	ld.w	r6,r7[0x8]
80011422:	6e 14       	ld.w	r4,r7[0x4]
80011424:	2f 46       	sub	r6,-12
80011426:	c0 c8       	rjmp	8001143e <_fwalk+0x32>
80011428:	8c 08       	ld.sh	r8,r6[0x0]
8001142a:	e4 08 19 00 	cp.h	r8,r2
8001142e:	c0 70       	breq	8001143c <_fwalk+0x30>
80011430:	8c 18       	ld.sh	r8,r6[0x2]
80011432:	e6 08 19 00 	cp.h	r8,r3
80011436:	c0 30       	breq	8001143c <_fwalk+0x30>
80011438:	5d 11       	icall	r1
8001143a:	18 45       	or	r5,r12
8001143c:	2a 46       	sub	r6,-92
8001143e:	20 14       	sub	r4,1
80011440:	ec cc 00 0c 	sub	r12,r6,12
80011444:	58 04       	cp.w	r4,0
80011446:	cf 14       	brge	80011428 <_fwalk+0x1c>
80011448:	6e 07       	ld.w	r7,r7[0x0]
8001144a:	58 07       	cp.w	r7,0
8001144c:	ce a1       	brne	80011420 <_fwalk+0x14>
8001144e:	fe b0 fc de 	rcall	80010e0a <__sfp_lock_release>
80011452:	0a 9c       	mov	r12,r5
80011454:	d8 32       	popm	r0-r7,pc
80011456:	d7 03       	nop

80011458 <_localeconv_r>:
80011458:	fe cc d8 74 	sub	r12,pc,-10124
8001145c:	5e fc       	retal	r12
8001145e:	d7 03       	nop

80011460 <__smakebuf_r>:
80011460:	d4 21       	pushm	r4-r7,lr
80011462:	20 fd       	sub	sp,60
80011464:	96 68       	ld.sh	r8,r11[0xc]
80011466:	16 97       	mov	r7,r11
80011468:	18 96       	mov	r6,r12
8001146a:	e2 18 00 02 	andl	r8,0x2,COH
8001146e:	c3 c1       	brne	800114e6 <__smakebuf_r+0x86>
80011470:	96 7b       	ld.sh	r11,r11[0xe]
80011472:	f0 0b 19 00 	cp.h	r11,r8
80011476:	c0 55       	brlt	80011480 <__smakebuf_r+0x20>
80011478:	1a 9a       	mov	r10,sp
8001147a:	e0 a0 09 09 	rcall	8001268c <_fstat_r>
8001147e:	c0 f4       	brge	8001149c <__smakebuf_r+0x3c>
80011480:	8e 65       	ld.sh	r5,r7[0xc]
80011482:	0a 98       	mov	r8,r5
80011484:	ab b8       	sbr	r8,0xb
80011486:	e2 15 00 80 	andl	r5,0x80,COH
8001148a:	ae 68       	st.h	r7[0xc],r8
8001148c:	30 04       	mov	r4,0
8001148e:	e0 68 04 00 	mov	r8,1024
80011492:	f9 b5 01 40 	movne	r5,64
80011496:	f0 05 17 00 	moveq	r5,r8
8001149a:	c1 c8       	rjmp	800114d2 <__smakebuf_r+0x72>
8001149c:	40 18       	lddsp	r8,sp[0x4]
8001149e:	e2 18 f0 00 	andl	r8,0xf000,COH
800114a2:	e0 48 20 00 	cp.w	r8,8192
800114a6:	5f 04       	sreq	r4
800114a8:	e0 48 80 00 	cp.w	r8,32768
800114ac:	c0 e1       	brne	800114c8 <__smakebuf_r+0x68>
800114ae:	6e b9       	ld.w	r9,r7[0x2c]
800114b0:	fe c8 f1 7c 	sub	r8,pc,-3716
800114b4:	10 39       	cp.w	r9,r8
800114b6:	c0 91       	brne	800114c8 <__smakebuf_r+0x68>
800114b8:	8e 68       	ld.sh	r8,r7[0xc]
800114ba:	e0 65 04 00 	mov	r5,1024
800114be:	ab a8       	sbr	r8,0xa
800114c0:	ef 45 00 50 	st.w	r7[80],r5
800114c4:	ae 68       	st.h	r7[0xc],r8
800114c6:	c0 68       	rjmp	800114d2 <__smakebuf_r+0x72>
800114c8:	8e 68       	ld.sh	r8,r7[0xc]
800114ca:	e0 65 04 00 	mov	r5,1024
800114ce:	ab b8       	sbr	r8,0xb
800114d0:	ae 68       	st.h	r7[0xc],r8
800114d2:	0a 9b       	mov	r11,r5
800114d4:	0c 9c       	mov	r12,r6
800114d6:	c2 bc       	rcall	8001152c <_malloc_r>
800114d8:	8e 68       	ld.sh	r8,r7[0xc]
800114da:	c0 d1       	brne	800114f4 <__smakebuf_r+0x94>
800114dc:	ed b8 00 09 	bld	r8,0x9
800114e0:	c1 b0       	breq	80011516 <__smakebuf_r+0xb6>
800114e2:	a1 b8       	sbr	r8,0x1
800114e4:	ae 68       	st.h	r7[0xc],r8
800114e6:	ee c8 ff b9 	sub	r8,r7,-71
800114ea:	8f 48       	st.w	r7[0x10],r8
800114ec:	8f 08       	st.w	r7[0x0],r8
800114ee:	30 18       	mov	r8,1
800114f0:	8f 58       	st.w	r7[0x14],r8
800114f2:	c1 28       	rjmp	80011516 <__smakebuf_r+0xb6>
800114f4:	a7 b8       	sbr	r8,0x7
800114f6:	8f 4c       	st.w	r7[0x10],r12
800114f8:	ae 68       	st.h	r7[0xc],r8
800114fa:	8f 55       	st.w	r7[0x14],r5
800114fc:	fe c8 06 f0 	sub	r8,pc,1776
80011500:	8f 0c       	st.w	r7[0x0],r12
80011502:	8d a8       	st.w	r6[0x28],r8
80011504:	58 04       	cp.w	r4,0
80011506:	c0 80       	breq	80011516 <__smakebuf_r+0xb6>
80011508:	8e 7c       	ld.sh	r12,r7[0xe]
8001150a:	e0 a0 07 5d 	rcall	800123c4 <isatty>
8001150e:	c0 40       	breq	80011516 <__smakebuf_r+0xb6>
80011510:	8e 68       	ld.sh	r8,r7[0xc]
80011512:	a1 a8       	sbr	r8,0x0
80011514:	ae 68       	st.h	r7[0xc],r8
80011516:	2f 1d       	sub	sp,-60
80011518:	d8 22       	popm	r4-r7,pc
8001151a:	d7 03       	nop

8001151c <malloc>:
8001151c:	d4 01       	pushm	lr
8001151e:	e0 68 01 c8 	mov	r8,456
80011522:	18 9b       	mov	r11,r12
80011524:	70 0c       	ld.w	r12,r8[0x0]
80011526:	c0 3c       	rcall	8001152c <_malloc_r>
80011528:	d8 02       	popm	pc
8001152a:	d7 03       	nop

8001152c <_malloc_r>:
8001152c:	d4 31       	pushm	r0-r7,lr
8001152e:	f6 c8 ff f5 	sub	r8,r11,-11
80011532:	18 95       	mov	r5,r12
80011534:	10 97       	mov	r7,r8
80011536:	e0 17 ff f8 	andl	r7,0xfff8
8001153a:	59 68       	cp.w	r8,22
8001153c:	f9 b7 08 10 	movls	r7,16
80011540:	16 37       	cp.w	r7,r11
80011542:	5f 38       	srlo	r8
80011544:	f1 e7 13 f8 	or	r8,r8,r7>>0x1f
80011548:	c0 50       	breq	80011552 <_malloc_r+0x26>
8001154a:	30 c8       	mov	r8,12
8001154c:	99 38       	st.w	r12[0xc],r8
8001154e:	e0 8f 01 f7 	bral	8001193c <_malloc_r+0x410>
80011552:	e0 a0 02 2f 	rcall	800119b0 <__malloc_lock>
80011556:	e0 47 01 f7 	cp.w	r7,503
8001155a:	e0 8b 00 1d 	brhi	80011594 <_malloc_r+0x68>
8001155e:	ee 03 16 03 	lsr	r3,r7,0x3
80011562:	e0 68 01 cc 	mov	r8,460
80011566:	f0 03 00 38 	add	r8,r8,r3<<0x3
8001156a:	70 36       	ld.w	r6,r8[0xc]
8001156c:	10 36       	cp.w	r6,r8
8001156e:	c0 61       	brne	8001157a <_malloc_r+0x4e>
80011570:	ec c8 ff f8 	sub	r8,r6,-8
80011574:	70 36       	ld.w	r6,r8[0xc]
80011576:	10 36       	cp.w	r6,r8
80011578:	c0 c0       	breq	80011590 <_malloc_r+0x64>
8001157a:	6c 18       	ld.w	r8,r6[0x4]
8001157c:	e0 18 ff fc 	andl	r8,0xfffc
80011580:	6c 3a       	ld.w	r10,r6[0xc]
80011582:	ec 08 00 09 	add	r9,r6,r8
80011586:	0a 9c       	mov	r12,r5
80011588:	6c 28       	ld.w	r8,r6[0x8]
8001158a:	95 28       	st.w	r10[0x8],r8
8001158c:	91 3a       	st.w	r8[0xc],r10
8001158e:	c4 78       	rjmp	8001161c <_malloc_r+0xf0>
80011590:	2f e3       	sub	r3,-2
80011592:	c4 d8       	rjmp	8001162c <_malloc_r+0x100>
80011594:	ee 03 16 09 	lsr	r3,r7,0x9
80011598:	c0 41       	brne	800115a0 <_malloc_r+0x74>
8001159a:	ee 03 16 03 	lsr	r3,r7,0x3
8001159e:	c2 68       	rjmp	800115ea <_malloc_r+0xbe>
800115a0:	58 43       	cp.w	r3,4
800115a2:	e0 8b 00 06 	brhi	800115ae <_malloc_r+0x82>
800115a6:	ee 03 16 06 	lsr	r3,r7,0x6
800115aa:	2c 83       	sub	r3,-56
800115ac:	c1 f8       	rjmp	800115ea <_malloc_r+0xbe>
800115ae:	59 43       	cp.w	r3,20
800115b0:	e0 8b 00 04 	brhi	800115b8 <_malloc_r+0x8c>
800115b4:	2a 53       	sub	r3,-91
800115b6:	c1 a8       	rjmp	800115ea <_malloc_r+0xbe>
800115b8:	e0 43 00 54 	cp.w	r3,84
800115bc:	e0 8b 00 06 	brhi	800115c8 <_malloc_r+0x9c>
800115c0:	ee 03 16 0c 	lsr	r3,r7,0xc
800115c4:	29 23       	sub	r3,-110
800115c6:	c1 28       	rjmp	800115ea <_malloc_r+0xbe>
800115c8:	e0 43 01 54 	cp.w	r3,340
800115cc:	e0 8b 00 06 	brhi	800115d8 <_malloc_r+0xac>
800115d0:	ee 03 16 0f 	lsr	r3,r7,0xf
800115d4:	28 93       	sub	r3,-119
800115d6:	c0 a8       	rjmp	800115ea <_malloc_r+0xbe>
800115d8:	e0 43 05 54 	cp.w	r3,1364
800115dc:	e0 88 00 04 	brls	800115e4 <_malloc_r+0xb8>
800115e0:	37 e3       	mov	r3,126
800115e2:	c0 48       	rjmp	800115ea <_malloc_r+0xbe>
800115e4:	ee 03 16 12 	lsr	r3,r7,0x12
800115e8:	28 43       	sub	r3,-124
800115ea:	e0 6a 01 cc 	mov	r10,460
800115ee:	f4 03 00 3a 	add	r10,r10,r3<<0x3
800115f2:	74 36       	ld.w	r6,r10[0xc]
800115f4:	c1 98       	rjmp	80011626 <_malloc_r+0xfa>
800115f6:	6c 19       	ld.w	r9,r6[0x4]
800115f8:	e0 19 ff fc 	andl	r9,0xfffc
800115fc:	f2 07 01 0b 	sub	r11,r9,r7
80011600:	58 fb       	cp.w	r11,15
80011602:	e0 8a 00 04 	brle	8001160a <_malloc_r+0xde>
80011606:	20 13       	sub	r3,1
80011608:	c1 18       	rjmp	8001162a <_malloc_r+0xfe>
8001160a:	6c 38       	ld.w	r8,r6[0xc]
8001160c:	58 0b       	cp.w	r11,0
8001160e:	c0 b5       	brlt	80011624 <_malloc_r+0xf8>
80011610:	6c 2a       	ld.w	r10,r6[0x8]
80011612:	ec 09 00 09 	add	r9,r6,r9
80011616:	0a 9c       	mov	r12,r5
80011618:	91 2a       	st.w	r8[0x8],r10
8001161a:	95 38       	st.w	r10[0xc],r8
8001161c:	72 18       	ld.w	r8,r9[0x4]
8001161e:	a1 a8       	sbr	r8,0x0
80011620:	93 18       	st.w	r9[0x4],r8
80011622:	cb c8       	rjmp	8001179a <_malloc_r+0x26e>
80011624:	10 96       	mov	r6,r8
80011626:	14 36       	cp.w	r6,r10
80011628:	ce 71       	brne	800115f6 <_malloc_r+0xca>
8001162a:	2f f3       	sub	r3,-1
8001162c:	e0 6a 01 cc 	mov	r10,460
80011630:	f4 cc ff f8 	sub	r12,r10,-8
80011634:	78 26       	ld.w	r6,r12[0x8]
80011636:	18 36       	cp.w	r6,r12
80011638:	c6 c0       	breq	80011710 <_malloc_r+0x1e4>
8001163a:	6c 19       	ld.w	r9,r6[0x4]
8001163c:	e0 19 ff fc 	andl	r9,0xfffc
80011640:	f2 07 01 08 	sub	r8,r9,r7
80011644:	58 f8       	cp.w	r8,15
80011646:	e0 89 00 8f 	brgt	80011764 <_malloc_r+0x238>
8001164a:	99 3c       	st.w	r12[0xc],r12
8001164c:	99 2c       	st.w	r12[0x8],r12
8001164e:	58 08       	cp.w	r8,0
80011650:	c0 55       	brlt	8001165a <_malloc_r+0x12e>
80011652:	ec 09 00 09 	add	r9,r6,r9
80011656:	0a 9c       	mov	r12,r5
80011658:	ce 2b       	rjmp	8001161c <_malloc_r+0xf0>
8001165a:	e0 49 01 ff 	cp.w	r9,511
8001165e:	e0 8b 00 13 	brhi	80011684 <_malloc_r+0x158>
80011662:	a3 99       	lsr	r9,0x3
80011664:	f4 09 00 38 	add	r8,r10,r9<<0x3
80011668:	70 2b       	ld.w	r11,r8[0x8]
8001166a:	8d 38       	st.w	r6[0xc],r8
8001166c:	8d 2b       	st.w	r6[0x8],r11
8001166e:	97 36       	st.w	r11[0xc],r6
80011670:	91 26       	st.w	r8[0x8],r6
80011672:	a3 49       	asr	r9,0x2
80011674:	74 18       	ld.w	r8,r10[0x4]
80011676:	30 1b       	mov	r11,1
80011678:	f6 09 09 49 	lsl	r9,r11,r9
8001167c:	f1 e9 10 09 	or	r9,r8,r9
80011680:	95 19       	st.w	r10[0x4],r9
80011682:	c4 78       	rjmp	80011710 <_malloc_r+0x1e4>
80011684:	f2 0a 16 09 	lsr	r10,r9,0x9
80011688:	58 4a       	cp.w	r10,4
8001168a:	e0 8b 00 07 	brhi	80011698 <_malloc_r+0x16c>
8001168e:	f2 0a 16 06 	lsr	r10,r9,0x6
80011692:	2c 8a       	sub	r10,-56
80011694:	c2 08       	rjmp	800116d4 <_malloc_r+0x1a8>
80011696:	d7 03       	nop
80011698:	59 4a       	cp.w	r10,20
8001169a:	e0 8b 00 04 	brhi	800116a2 <_malloc_r+0x176>
8001169e:	2a 5a       	sub	r10,-91
800116a0:	c1 a8       	rjmp	800116d4 <_malloc_r+0x1a8>
800116a2:	e0 4a 00 54 	cp.w	r10,84
800116a6:	e0 8b 00 06 	brhi	800116b2 <_malloc_r+0x186>
800116aa:	f2 0a 16 0c 	lsr	r10,r9,0xc
800116ae:	29 2a       	sub	r10,-110
800116b0:	c1 28       	rjmp	800116d4 <_malloc_r+0x1a8>
800116b2:	e0 4a 01 54 	cp.w	r10,340
800116b6:	e0 8b 00 06 	brhi	800116c2 <_malloc_r+0x196>
800116ba:	f2 0a 16 0f 	lsr	r10,r9,0xf
800116be:	28 9a       	sub	r10,-119
800116c0:	c0 a8       	rjmp	800116d4 <_malloc_r+0x1a8>
800116c2:	e0 4a 05 54 	cp.w	r10,1364
800116c6:	e0 88 00 04 	brls	800116ce <_malloc_r+0x1a2>
800116ca:	37 ea       	mov	r10,126
800116cc:	c0 48       	rjmp	800116d4 <_malloc_r+0x1a8>
800116ce:	f2 0a 16 12 	lsr	r10,r9,0x12
800116d2:	28 4a       	sub	r10,-124
800116d4:	e0 6b 01 cc 	mov	r11,460
800116d8:	f6 0a 00 34 	add	r4,r11,r10<<0x3
800116dc:	68 28       	ld.w	r8,r4[0x8]
800116de:	08 38       	cp.w	r8,r4
800116e0:	c0 e1       	brne	800116fc <_malloc_r+0x1d0>
800116e2:	76 19       	ld.w	r9,r11[0x4]
800116e4:	a3 4a       	asr	r10,0x2
800116e6:	30 1e       	mov	lr,1
800116e8:	fc 0a 09 4a 	lsl	r10,lr,r10
800116ec:	f3 ea 10 0a 	or	r10,r9,r10
800116f0:	10 99       	mov	r9,r8
800116f2:	97 1a       	st.w	r11[0x4],r10
800116f4:	c0 a8       	rjmp	80011708 <_malloc_r+0x1dc>
800116f6:	70 28       	ld.w	r8,r8[0x8]
800116f8:	08 38       	cp.w	r8,r4
800116fa:	c0 60       	breq	80011706 <_malloc_r+0x1da>
800116fc:	70 1a       	ld.w	r10,r8[0x4]
800116fe:	e0 1a ff fc 	andl	r10,0xfffc
80011702:	14 39       	cp.w	r9,r10
80011704:	cf 93       	brcs	800116f6 <_malloc_r+0x1ca>
80011706:	70 39       	ld.w	r9,r8[0xc]
80011708:	8d 39       	st.w	r6[0xc],r9
8001170a:	8d 28       	st.w	r6[0x8],r8
8001170c:	91 36       	st.w	r8[0xc],r6
8001170e:	93 26       	st.w	r9[0x8],r6
80011710:	e6 08 14 02 	asr	r8,r3,0x2
80011714:	30 1b       	mov	r11,1
80011716:	e0 64 01 cc 	mov	r4,460
8001171a:	f6 08 09 4b 	lsl	r11,r11,r8
8001171e:	68 18       	ld.w	r8,r4[0x4]
80011720:	10 3b       	cp.w	r11,r8
80011722:	e0 8b 00 69 	brhi	800117f4 <_malloc_r+0x2c8>
80011726:	f7 e8 00 09 	and	r9,r11,r8
8001172a:	c0 b1       	brne	80011740 <_malloc_r+0x214>
8001172c:	e0 13 ff fc 	andl	r3,0xfffc
80011730:	a1 7b       	lsl	r11,0x1
80011732:	2f c3       	sub	r3,-4
80011734:	c0 38       	rjmp	8001173a <_malloc_r+0x20e>
80011736:	2f c3       	sub	r3,-4
80011738:	a1 7b       	lsl	r11,0x1
8001173a:	f7 e8 00 09 	and	r9,r11,r8
8001173e:	cf c0       	breq	80011736 <_malloc_r+0x20a>
80011740:	e8 03 00 3e 	add	lr,r4,r3<<0x3
80011744:	06 92       	mov	r2,r3
80011746:	1c 91       	mov	r1,lr
80011748:	62 36       	ld.w	r6,r1[0xc]
8001174a:	c2 d8       	rjmp	800117a4 <_malloc_r+0x278>
8001174c:	6c 1a       	ld.w	r10,r6[0x4]
8001174e:	e0 1a ff fc 	andl	r10,0xfffc
80011752:	f4 07 01 08 	sub	r8,r10,r7
80011756:	58 f8       	cp.w	r8,15
80011758:	e0 8a 00 15 	brle	80011782 <_malloc_r+0x256>
8001175c:	6c 3a       	ld.w	r10,r6[0xc]
8001175e:	6c 29       	ld.w	r9,r6[0x8]
80011760:	95 29       	st.w	r10[0x8],r9
80011762:	93 3a       	st.w	r9[0xc],r10
80011764:	0e 99       	mov	r9,r7
80011766:	ec 07 00 07 	add	r7,r6,r7
8001176a:	a1 a9       	sbr	r9,0x0
8001176c:	99 37       	st.w	r12[0xc],r7
8001176e:	99 27       	st.w	r12[0x8],r7
80011770:	8d 19       	st.w	r6[0x4],r9
80011772:	ee 08 09 08 	st.w	r7[r8],r8
80011776:	8f 2c       	st.w	r7[0x8],r12
80011778:	8f 3c       	st.w	r7[0xc],r12
8001177a:	a1 a8       	sbr	r8,0x0
8001177c:	0a 9c       	mov	r12,r5
8001177e:	8f 18       	st.w	r7[0x4],r8
80011780:	c0 d8       	rjmp	8001179a <_malloc_r+0x26e>
80011782:	6c 39       	ld.w	r9,r6[0xc]
80011784:	58 08       	cp.w	r8,0
80011786:	c0 e5       	brlt	800117a2 <_malloc_r+0x276>
80011788:	ec 0a 00 0a 	add	r10,r6,r10
8001178c:	74 18       	ld.w	r8,r10[0x4]
8001178e:	a1 a8       	sbr	r8,0x0
80011790:	0a 9c       	mov	r12,r5
80011792:	95 18       	st.w	r10[0x4],r8
80011794:	6c 28       	ld.w	r8,r6[0x8]
80011796:	93 28       	st.w	r9[0x8],r8
80011798:	91 39       	st.w	r8[0xc],r9
8001179a:	c0 cd       	rcall	800119b2 <__malloc_unlock>
8001179c:	ec cc ff f8 	sub	r12,r6,-8
800117a0:	d8 32       	popm	r0-r7,pc
800117a2:	12 96       	mov	r6,r9
800117a4:	02 36       	cp.w	r6,r1
800117a6:	cd 31       	brne	8001174c <_malloc_r+0x220>
800117a8:	2f f2       	sub	r2,-1
800117aa:	f1 d2 c0 02 	bfextu	r8,r2,0x0,0x2
800117ae:	c0 30       	breq	800117b4 <_malloc_r+0x288>
800117b0:	2f 81       	sub	r1,-8
800117b2:	cc bb       	rjmp	80011748 <_malloc_r+0x21c>
800117b4:	1c 98       	mov	r8,lr
800117b6:	f3 d3 c0 02 	bfextu	r9,r3,0x0,0x2
800117ba:	c0 81       	brne	800117ca <_malloc_r+0x29e>
800117bc:	68 19       	ld.w	r9,r4[0x4]
800117be:	f6 08 11 ff 	rsub	r8,r11,-1
800117c2:	f3 e8 00 08 	and	r8,r9,r8
800117c6:	89 18       	st.w	r4[0x4],r8
800117c8:	c0 78       	rjmp	800117d6 <_malloc_r+0x2aa>
800117ca:	f0 c9 00 08 	sub	r9,r8,8
800117ce:	20 13       	sub	r3,1
800117d0:	70 08       	ld.w	r8,r8[0x0]
800117d2:	12 38       	cp.w	r8,r9
800117d4:	cf 10       	breq	800117b6 <_malloc_r+0x28a>
800117d6:	a1 7b       	lsl	r11,0x1
800117d8:	68 18       	ld.w	r8,r4[0x4]
800117da:	10 3b       	cp.w	r11,r8
800117dc:	e0 8b 00 0c 	brhi	800117f4 <_malloc_r+0x2c8>
800117e0:	58 0b       	cp.w	r11,0
800117e2:	c0 90       	breq	800117f4 <_malloc_r+0x2c8>
800117e4:	04 93       	mov	r3,r2
800117e6:	c0 38       	rjmp	800117ec <_malloc_r+0x2c0>
800117e8:	2f c3       	sub	r3,-4
800117ea:	a1 7b       	lsl	r11,0x1
800117ec:	f7 e8 00 09 	and	r9,r11,r8
800117f0:	ca 81       	brne	80011740 <_malloc_r+0x214>
800117f2:	cf bb       	rjmp	800117e8 <_malloc_r+0x2bc>
800117f4:	68 23       	ld.w	r3,r4[0x8]
800117f6:	66 12       	ld.w	r2,r3[0x4]
800117f8:	e0 12 ff fc 	andl	r2,0xfffc
800117fc:	0e 32       	cp.w	r2,r7
800117fe:	5f 39       	srlo	r9
80011800:	e4 07 01 08 	sub	r8,r2,r7
80011804:	58 f8       	cp.w	r8,15
80011806:	5f aa       	srle	r10
80011808:	f5 e9 10 09 	or	r9,r10,r9
8001180c:	e0 80 00 9a 	breq	80011940 <_malloc_r+0x414>
80011810:	e0 68 0c b0 	mov	r8,3248
80011814:	70 01       	ld.w	r1,r8[0x0]
80011816:	e0 68 05 d8 	mov	r8,1496
8001181a:	2f 01       	sub	r1,-16
8001181c:	70 08       	ld.w	r8,r8[0x0]
8001181e:	0e 01       	add	r1,r7
80011820:	5b f8       	cp.w	r8,-1
80011822:	c0 40       	breq	8001182a <_malloc_r+0x2fe>
80011824:	28 11       	sub	r1,-127
80011826:	e0 11 ff 80 	andl	r1,0xff80
8001182a:	02 9b       	mov	r11,r1
8001182c:	0a 9c       	mov	r12,r5
8001182e:	e0 a0 05 6f 	rcall	8001230c <_sbrk_r>
80011832:	18 96       	mov	r6,r12
80011834:	5b fc       	cp.w	r12,-1
80011836:	c7 50       	breq	80011920 <_malloc_r+0x3f4>
80011838:	e6 02 00 08 	add	r8,r3,r2
8001183c:	10 3c       	cp.w	r12,r8
8001183e:	c0 32       	brcc	80011844 <_malloc_r+0x318>
80011840:	08 33       	cp.w	r3,r4
80011842:	c6 f1       	brne	80011920 <_malloc_r+0x3f4>
80011844:	e0 6a 0c b4 	mov	r10,3252
80011848:	74 09       	ld.w	r9,r10[0x0]
8001184a:	e2 09 00 09 	add	r9,r1,r9
8001184e:	95 09       	st.w	r10[0x0],r9
80011850:	10 36       	cp.w	r6,r8
80011852:	c0 a1       	brne	80011866 <_malloc_r+0x33a>
80011854:	f5 d6 c0 07 	bfextu	r10,r6,0x0,0x7
80011858:	c0 71       	brne	80011866 <_malloc_r+0x33a>
8001185a:	e2 02 00 02 	add	r2,r1,r2
8001185e:	68 28       	ld.w	r8,r4[0x8]
80011860:	a1 a2       	sbr	r2,0x0
80011862:	91 12       	st.w	r8[0x4],r2
80011864:	c4 f8       	rjmp	80011902 <_malloc_r+0x3d6>
80011866:	e0 6a 05 d8 	mov	r10,1496
8001186a:	74 0b       	ld.w	r11,r10[0x0]
8001186c:	5b fb       	cp.w	r11,-1
8001186e:	c0 31       	brne	80011874 <_malloc_r+0x348>
80011870:	95 06       	st.w	r10[0x0],r6
80011872:	c0 78       	rjmp	80011880 <_malloc_r+0x354>
80011874:	ec 09 00 09 	add	r9,r6,r9
80011878:	e0 6a 0c b4 	mov	r10,3252
8001187c:	10 19       	sub	r9,r8
8001187e:	95 09       	st.w	r10[0x0],r9
80011880:	f1 d6 c0 03 	bfextu	r8,r6,0x0,0x3
80011884:	f0 09 11 08 	rsub	r9,r8,8
80011888:	58 08       	cp.w	r8,0
8001188a:	f2 08 17 10 	movne	r8,r9
8001188e:	ed d8 e1 06 	addne	r6,r6,r8
80011892:	28 08       	sub	r8,-128
80011894:	ec 01 00 01 	add	r1,r6,r1
80011898:	0a 9c       	mov	r12,r5
8001189a:	e3 d1 c0 07 	bfextu	r1,r1,0x0,0x7
8001189e:	f0 01 01 01 	sub	r1,r8,r1
800118a2:	02 9b       	mov	r11,r1
800118a4:	e0 a0 05 34 	rcall	8001230c <_sbrk_r>
800118a8:	e0 68 0c b4 	mov	r8,3252
800118ac:	5b fc       	cp.w	r12,-1
800118ae:	ec 0c 17 00 	moveq	r12,r6
800118b2:	f9 b1 00 00 	moveq	r1,0
800118b6:	70 09       	ld.w	r9,r8[0x0]
800118b8:	0c 1c       	sub	r12,r6
800118ba:	89 26       	st.w	r4[0x8],r6
800118bc:	02 0c       	add	r12,r1
800118be:	12 01       	add	r1,r9
800118c0:	a1 ac       	sbr	r12,0x0
800118c2:	91 01       	st.w	r8[0x0],r1
800118c4:	8d 1c       	st.w	r6[0x4],r12
800118c6:	08 33       	cp.w	r3,r4
800118c8:	c1 d0       	breq	80011902 <_malloc_r+0x3d6>
800118ca:	58 f2       	cp.w	r2,15
800118cc:	e0 8b 00 05 	brhi	800118d6 <_malloc_r+0x3aa>
800118d0:	30 18       	mov	r8,1
800118d2:	8d 18       	st.w	r6[0x4],r8
800118d4:	c2 68       	rjmp	80011920 <_malloc_r+0x3f4>
800118d6:	30 59       	mov	r9,5
800118d8:	20 c2       	sub	r2,12
800118da:	e0 12 ff f8 	andl	r2,0xfff8
800118de:	e6 02 00 08 	add	r8,r3,r2
800118e2:	91 29       	st.w	r8[0x8],r9
800118e4:	91 19       	st.w	r8[0x4],r9
800118e6:	66 18       	ld.w	r8,r3[0x4]
800118e8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800118ec:	e5 e8 10 08 	or	r8,r2,r8
800118f0:	87 18       	st.w	r3[0x4],r8
800118f2:	58 f2       	cp.w	r2,15
800118f4:	e0 88 00 07 	brls	80011902 <_malloc_r+0x3d6>
800118f8:	e6 cb ff f8 	sub	r11,r3,-8
800118fc:	0a 9c       	mov	r12,r5
800118fe:	fe b0 fb 71 	rcall	80010fe0 <_free_r>
80011902:	e0 69 0c ac 	mov	r9,3244
80011906:	72 0a       	ld.w	r10,r9[0x0]
80011908:	e0 68 0c b4 	mov	r8,3252
8001190c:	70 08       	ld.w	r8,r8[0x0]
8001190e:	14 38       	cp.w	r8,r10
80011910:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80011914:	e0 69 0c a8 	mov	r9,3240
80011918:	72 0a       	ld.w	r10,r9[0x0]
8001191a:	14 38       	cp.w	r8,r10
8001191c:	f3 f8 ba 00 	st.whi	r9[0x0],r8
80011920:	68 28       	ld.w	r8,r4[0x8]
80011922:	70 18       	ld.w	r8,r8[0x4]
80011924:	e0 18 ff fc 	andl	r8,0xfffc
80011928:	0e 38       	cp.w	r8,r7
8001192a:	5f 39       	srlo	r9
8001192c:	0e 18       	sub	r8,r7
8001192e:	58 f8       	cp.w	r8,15
80011930:	5f aa       	srle	r10
80011932:	f5 e9 10 09 	or	r9,r10,r9
80011936:	c0 50       	breq	80011940 <_malloc_r+0x414>
80011938:	0a 9c       	mov	r12,r5
8001193a:	c3 cc       	rcall	800119b2 <__malloc_unlock>
8001193c:	d8 3a       	popm	r0-r7,pc,r12=0
8001193e:	d7 03       	nop
80011940:	68 26       	ld.w	r6,r4[0x8]
80011942:	a1 a8       	sbr	r8,0x0
80011944:	0e 99       	mov	r9,r7
80011946:	a1 a9       	sbr	r9,0x0
80011948:	8d 19       	st.w	r6[0x4],r9
8001194a:	ec 07 00 07 	add	r7,r6,r7
8001194e:	0a 9c       	mov	r12,r5
80011950:	89 27       	st.w	r4[0x8],r7
80011952:	8f 18       	st.w	r7[0x4],r8
80011954:	c2 fc       	rcall	800119b2 <__malloc_unlock>
80011956:	ec cc ff f8 	sub	r12,r6,-8
8001195a:	d8 32       	popm	r0-r7,pc

8001195c <memchr>:
8001195c:	f7 db c0 08 	bfextu	r11,r11,0x0,0x8
80011960:	c0 68       	rjmp	8001196c <memchr+0x10>
80011962:	20 1a       	sub	r10,1
80011964:	19 88       	ld.ub	r8,r12[0x0]
80011966:	16 38       	cp.w	r8,r11
80011968:	5e 0c       	reteq	r12
8001196a:	2f fc       	sub	r12,-1
8001196c:	58 0a       	cp.w	r10,0
8001196e:	cf a1       	brne	80011962 <memchr+0x6>
80011970:	5e fa       	retal	r10

80011972 <memmove>:
80011972:	d4 01       	pushm	lr
80011974:	18 3b       	cp.w	r11,r12
80011976:	c1 92       	brcc	800119a8 <memmove+0x36>
80011978:	f6 0a 00 09 	add	r9,r11,r10
8001197c:	12 3c       	cp.w	r12,r9
8001197e:	c1 52       	brcc	800119a8 <memmove+0x36>
80011980:	f8 0a 00 0b 	add	r11,r12,r10
80011984:	30 08       	mov	r8,0
80011986:	c0 68       	rjmp	80011992 <memmove+0x20>
80011988:	f2 08 07 0e 	ld.ub	lr,r9[r8]
8001198c:	20 1a       	sub	r10,1
8001198e:	f6 08 0b 0e 	st.b	r11[r8],lr
80011992:	20 18       	sub	r8,1
80011994:	58 0a       	cp.w	r10,0
80011996:	cf 91       	brne	80011988 <memmove+0x16>
80011998:	d8 02       	popm	pc
8001199a:	f6 08 07 09 	ld.ub	r9,r11[r8]
8001199e:	20 1a       	sub	r10,1
800119a0:	f8 08 0b 09 	st.b	r12[r8],r9
800119a4:	2f f8       	sub	r8,-1
800119a6:	c0 28       	rjmp	800119aa <memmove+0x38>
800119a8:	30 08       	mov	r8,0
800119aa:	58 0a       	cp.w	r10,0
800119ac:	cf 71       	brne	8001199a <memmove+0x28>
800119ae:	d8 02       	popm	pc

800119b0 <__malloc_lock>:
800119b0:	5e fc       	retal	r12

800119b2 <__malloc_unlock>:
800119b2:	5e fc       	retal	r12

800119b4 <__hi0bits>:
800119b4:	18 98       	mov	r8,r12
800119b6:	e0 1c 00 00 	andl	r12,0x0
800119ba:	f0 09 15 10 	lsl	r9,r8,0x10
800119be:	58 0c       	cp.w	r12,0
800119c0:	f2 08 17 00 	moveq	r8,r9
800119c4:	f9 bc 00 10 	moveq	r12,16
800119c8:	f9 bc 01 00 	movne	r12,0
800119cc:	10 9a       	mov	r10,r8
800119ce:	f0 09 15 08 	lsl	r9,r8,0x8
800119d2:	e6 1a ff 00 	andh	r10,0xff00,COH
800119d6:	f7 bc 00 f8 	subeq	r12,-8
800119da:	f2 08 17 00 	moveq	r8,r9
800119de:	10 9a       	mov	r10,r8
800119e0:	f0 09 15 04 	lsl	r9,r8,0x4
800119e4:	e6 1a f0 00 	andh	r10,0xf000,COH
800119e8:	f7 bc 00 fc 	subeq	r12,-4
800119ec:	f2 08 17 00 	moveq	r8,r9
800119f0:	10 9a       	mov	r10,r8
800119f2:	f0 09 15 02 	lsl	r9,r8,0x2
800119f6:	e6 1a c0 00 	andh	r10,0xc000,COH
800119fa:	f7 bc 00 fe 	subeq	r12,-2
800119fe:	f2 08 17 00 	moveq	r8,r9
80011a02:	58 08       	cp.w	r8,0
80011a04:	5e 5c       	retlt	r12
80011a06:	ed b8 00 1e 	bld	r8,0x1e
80011a0a:	f9 bc 01 20 	movne	r12,32
80011a0e:	f7 bc 00 ff 	subeq	r12,-1
80011a12:	5e fc       	retal	r12

80011a14 <__lo0bits>:
80011a14:	18 99       	mov	r9,r12
80011a16:	78 08       	ld.w	r8,r12[0x0]
80011a18:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
80011a1c:	c1 50       	breq	80011a46 <__lo0bits+0x32>
80011a1e:	ed b8 00 00 	bld	r8,0x0
80011a22:	c0 21       	brne	80011a26 <__lo0bits+0x12>
80011a24:	5e fd       	retal	0
80011a26:	10 9b       	mov	r11,r8
80011a28:	f0 0a 16 01 	lsr	r10,r8,0x1
80011a2c:	e2 1b 00 02 	andl	r11,0x2,COH
80011a30:	a3 88       	lsr	r8,0x2
80011a32:	58 0b       	cp.w	r11,0
80011a34:	f3 fa 1a 00 	st.wne	r9[0x0],r10
80011a38:	f9 bc 01 01 	movne	r12,1
80011a3c:	f3 f8 0a 00 	st.weq	r9[0x0],r8
80011a40:	f9 bc 00 02 	moveq	r12,2
80011a44:	5e fc       	retal	r12
80011a46:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80011a4a:	f0 0b 16 10 	lsr	r11,r8,0x10
80011a4e:	58 0a       	cp.w	r10,0
80011a50:	f6 08 17 00 	moveq	r8,r11
80011a54:	f9 bc 00 10 	moveq	r12,16
80011a58:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80011a5c:	f0 0a 16 08 	lsr	r10,r8,0x8
80011a60:	58 0b       	cp.w	r11,0
80011a62:	f7 bc 00 f8 	subeq	r12,-8
80011a66:	f4 08 17 00 	moveq	r8,r10
80011a6a:	f7 d8 c0 04 	bfextu	r11,r8,0x0,0x4
80011a6e:	f0 0a 16 04 	lsr	r10,r8,0x4
80011a72:	58 0b       	cp.w	r11,0
80011a74:	f7 bc 00 fc 	subeq	r12,-4
80011a78:	f4 08 17 00 	moveq	r8,r10
80011a7c:	f7 d8 c0 02 	bfextu	r11,r8,0x0,0x2
80011a80:	f0 0a 16 02 	lsr	r10,r8,0x2
80011a84:	58 0b       	cp.w	r11,0
80011a86:	f7 bc 00 fe 	subeq	r12,-2
80011a8a:	f4 08 17 00 	moveq	r8,r10
80011a8e:	ed b8 00 00 	bld	r8,0x0
80011a92:	c0 60       	breq	80011a9e <__lo0bits+0x8a>
80011a94:	a1 98       	lsr	r8,0x1
80011a96:	c0 31       	brne	80011a9c <__lo0bits+0x88>
80011a98:	32 0c       	mov	r12,32
80011a9a:	5e fc       	retal	r12
80011a9c:	2f fc       	sub	r12,-1
80011a9e:	93 08       	st.w	r9[0x0],r8
80011aa0:	5e fc       	retal	r12

80011aa2 <__mcmp>:
80011aa2:	d4 01       	pushm	lr
80011aa4:	18 98       	mov	r8,r12
80011aa6:	76 49       	ld.w	r9,r11[0x10]
80011aa8:	78 4c       	ld.w	r12,r12[0x10]
80011aaa:	12 1c       	sub	r12,r9
80011aac:	c1 31       	brne	80011ad2 <__mcmp+0x30>
80011aae:	2f b9       	sub	r9,-5
80011ab0:	a3 69       	lsl	r9,0x2
80011ab2:	12 0b       	add	r11,r9
80011ab4:	f0 09 00 09 	add	r9,r8,r9
80011ab8:	2e c8       	sub	r8,-20
80011aba:	13 4e       	ld.w	lr,--r9
80011abc:	17 4a       	ld.w	r10,--r11
80011abe:	14 3e       	cp.w	lr,r10
80011ac0:	c0 60       	breq	80011acc <__mcmp+0x2a>
80011ac2:	f9 bc 03 ff 	movlo	r12,-1
80011ac6:	f9 bc 02 01 	movhs	r12,1
80011aca:	d8 02       	popm	pc
80011acc:	10 39       	cp.w	r9,r8
80011ace:	fe 9b ff f6 	brhi	80011aba <__mcmp+0x18>
80011ad2:	d8 02       	popm	pc

80011ad4 <_Bfree>:
80011ad4:	d4 21       	pushm	r4-r7,lr
80011ad6:	18 97       	mov	r7,r12
80011ad8:	16 95       	mov	r5,r11
80011ada:	78 96       	ld.w	r6,r12[0x24]
80011adc:	58 06       	cp.w	r6,0
80011ade:	c0 91       	brne	80011af0 <_Bfree+0x1c>
80011ae0:	31 0c       	mov	r12,16
80011ae2:	fe b0 fd 1d 	rcall	8001151c <malloc>
80011ae6:	99 36       	st.w	r12[0xc],r6
80011ae8:	8f 9c       	st.w	r7[0x24],r12
80011aea:	99 16       	st.w	r12[0x4],r6
80011aec:	99 26       	st.w	r12[0x8],r6
80011aee:	99 06       	st.w	r12[0x0],r6
80011af0:	58 05       	cp.w	r5,0
80011af2:	c0 90       	breq	80011b04 <_Bfree+0x30>
80011af4:	6a 19       	ld.w	r9,r5[0x4]
80011af6:	6e 98       	ld.w	r8,r7[0x24]
80011af8:	70 38       	ld.w	r8,r8[0xc]
80011afa:	f0 09 03 2a 	ld.w	r10,r8[r9<<0x2]
80011afe:	8b 0a       	st.w	r5[0x0],r10
80011b00:	f0 09 09 25 	st.w	r8[r9<<0x2],r5
80011b04:	d8 22       	popm	r4-r7,pc
80011b06:	d7 03       	nop

80011b08 <_Balloc>:
80011b08:	d4 21       	pushm	r4-r7,lr
80011b0a:	18 97       	mov	r7,r12
80011b0c:	16 96       	mov	r6,r11
80011b0e:	78 95       	ld.w	r5,r12[0x24]
80011b10:	58 05       	cp.w	r5,0
80011b12:	c0 91       	brne	80011b24 <_Balloc+0x1c>
80011b14:	31 0c       	mov	r12,16
80011b16:	fe b0 fd 03 	rcall	8001151c <malloc>
80011b1a:	99 35       	st.w	r12[0xc],r5
80011b1c:	8f 9c       	st.w	r7[0x24],r12
80011b1e:	99 15       	st.w	r12[0x4],r5
80011b20:	99 25       	st.w	r12[0x8],r5
80011b22:	99 05       	st.w	r12[0x0],r5
80011b24:	6e 95       	ld.w	r5,r7[0x24]
80011b26:	6a 38       	ld.w	r8,r5[0xc]
80011b28:	58 08       	cp.w	r8,0
80011b2a:	c0 b1       	brne	80011b40 <_Balloc+0x38>
80011b2c:	31 0a       	mov	r10,16
80011b2e:	30 4b       	mov	r11,4
80011b30:	0e 9c       	mov	r12,r7
80011b32:	e0 a0 05 07 	rcall	80012540 <_calloc_r>
80011b36:	8b 3c       	st.w	r5[0xc],r12
80011b38:	6e 98       	ld.w	r8,r7[0x24]
80011b3a:	70 3c       	ld.w	r12,r8[0xc]
80011b3c:	58 0c       	cp.w	r12,0
80011b3e:	c1 b0       	breq	80011b74 <_Balloc+0x6c>
80011b40:	6e 98       	ld.w	r8,r7[0x24]
80011b42:	70 38       	ld.w	r8,r8[0xc]
80011b44:	f0 06 00 28 	add	r8,r8,r6<<0x2
80011b48:	70 0c       	ld.w	r12,r8[0x0]
80011b4a:	58 0c       	cp.w	r12,0
80011b4c:	c0 40       	breq	80011b54 <_Balloc+0x4c>
80011b4e:	78 09       	ld.w	r9,r12[0x0]
80011b50:	91 09       	st.w	r8[0x0],r9
80011b52:	c0 e8       	rjmp	80011b6e <_Balloc+0x66>
80011b54:	0e 9c       	mov	r12,r7
80011b56:	30 17       	mov	r7,1
80011b58:	0e 9b       	mov	r11,r7
80011b5a:	ee 06 09 47 	lsl	r7,r7,r6
80011b5e:	ee ca ff fb 	sub	r10,r7,-5
80011b62:	a3 6a       	lsl	r10,0x2
80011b64:	e0 a0 04 ee 	rcall	80012540 <_calloc_r>
80011b68:	c0 60       	breq	80011b74 <_Balloc+0x6c>
80011b6a:	99 16       	st.w	r12[0x4],r6
80011b6c:	99 27       	st.w	r12[0x8],r7
80011b6e:	30 08       	mov	r8,0
80011b70:	99 38       	st.w	r12[0xc],r8
80011b72:	99 48       	st.w	r12[0x10],r8
80011b74:	d8 22       	popm	r4-r7,pc
80011b76:	d7 03       	nop

80011b78 <__d2b>:
80011b78:	d4 31       	pushm	r0-r7,lr
80011b7a:	20 2d       	sub	sp,8
80011b7c:	16 93       	mov	r3,r11
80011b7e:	12 96       	mov	r6,r9
80011b80:	10 95       	mov	r5,r8
80011b82:	14 92       	mov	r2,r10
80011b84:	30 1b       	mov	r11,1
80011b86:	cc 1f       	rcall	80011b08 <_Balloc>
80011b88:	f3 d3 c0 14 	bfextu	r9,r3,0x0,0x14
80011b8c:	50 09       	stdsp	sp[0x0],r9
80011b8e:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
80011b92:	b5 a9       	sbr	r9,0x14
80011b94:	f0 01 16 14 	lsr	r1,r8,0x14
80011b98:	fb f9 1a 00 	st.wne	sp[0x0],r9
80011b9c:	18 94       	mov	r4,r12
80011b9e:	58 02       	cp.w	r2,0
80011ba0:	c1 d0       	breq	80011bda <__d2b+0x62>
80011ba2:	fa cc ff f8 	sub	r12,sp,-8
80011ba6:	18 d2       	st.w	--r12,r2
80011ba8:	c3 6f       	rcall	80011a14 <__lo0bits>
80011baa:	40 18       	lddsp	r8,sp[0x4]
80011bac:	c0 d0       	breq	80011bc6 <__d2b+0x4e>
80011bae:	40 09       	lddsp	r9,sp[0x0]
80011bb0:	f8 0a 11 20 	rsub	r10,r12,32
80011bb4:	f2 0a 09 4a 	lsl	r10,r9,r10
80011bb8:	f5 e8 10 08 	or	r8,r10,r8
80011bbc:	89 58       	st.w	r4[0x14],r8
80011bbe:	f2 0c 0a 49 	lsr	r9,r9,r12
80011bc2:	50 09       	stdsp	sp[0x0],r9
80011bc4:	c0 28       	rjmp	80011bc8 <__d2b+0x50>
80011bc6:	89 58       	st.w	r4[0x14],r8
80011bc8:	40 08       	lddsp	r8,sp[0x0]
80011bca:	58 08       	cp.w	r8,0
80011bcc:	f9 b3 01 02 	movne	r3,2
80011bd0:	f9 b3 00 01 	moveq	r3,1
80011bd4:	89 68       	st.w	r4[0x18],r8
80011bd6:	89 43       	st.w	r4[0x10],r3
80011bd8:	c0 88       	rjmp	80011be8 <__d2b+0x70>
80011bda:	1a 9c       	mov	r12,sp
80011bdc:	c1 cf       	rcall	80011a14 <__lo0bits>
80011bde:	30 13       	mov	r3,1
80011be0:	40 08       	lddsp	r8,sp[0x0]
80011be2:	2e 0c       	sub	r12,-32
80011be4:	89 43       	st.w	r4[0x10],r3
80011be6:	89 58       	st.w	r4[0x14],r8
80011be8:	58 01       	cp.w	r1,0
80011bea:	c0 90       	breq	80011bfc <__d2b+0x84>
80011bec:	e2 c1 04 33 	sub	r1,r1,1075
80011bf0:	18 01       	add	r1,r12
80011bf2:	8d 01       	st.w	r6[0x0],r1
80011bf4:	f8 0c 11 35 	rsub	r12,r12,53
80011bf8:	8b 0c       	st.w	r5[0x0],r12
80011bfa:	c0 c8       	rjmp	80011c12 <__d2b+0x9a>
80011bfc:	e6 c8 ff fc 	sub	r8,r3,-4
80011c00:	f8 cc 04 32 	sub	r12,r12,1074
80011c04:	a5 73       	lsl	r3,0x5
80011c06:	8d 0c       	st.w	r6[0x0],r12
80011c08:	e8 08 03 2c 	ld.w	r12,r4[r8<<0x2]
80011c0c:	cd 4e       	rcall	800119b4 <__hi0bits>
80011c0e:	18 13       	sub	r3,r12
80011c10:	8b 03       	st.w	r5[0x0],r3
80011c12:	08 9c       	mov	r12,r4
80011c14:	2f ed       	sub	sp,-8
80011c16:	d8 32       	popm	r0-r7,pc

80011c18 <__mdiff>:
80011c18:	d4 31       	pushm	r0-r7,lr
80011c1a:	74 48       	ld.w	r8,r10[0x10]
80011c1c:	76 45       	ld.w	r5,r11[0x10]
80011c1e:	16 97       	mov	r7,r11
80011c20:	14 96       	mov	r6,r10
80011c22:	10 15       	sub	r5,r8
80011c24:	c1 31       	brne	80011c4a <__mdiff+0x32>
80011c26:	2f b8       	sub	r8,-5
80011c28:	ee ce ff ec 	sub	lr,r7,-20
80011c2c:	a3 68       	lsl	r8,0x2
80011c2e:	f4 08 00 0b 	add	r11,r10,r8
80011c32:	ee 08 00 08 	add	r8,r7,r8
80011c36:	11 4a       	ld.w	r10,--r8
80011c38:	17 49       	ld.w	r9,--r11
80011c3a:	12 3a       	cp.w	r10,r9
80011c3c:	c0 30       	breq	80011c42 <__mdiff+0x2a>
80011c3e:	c0 e2       	brcc	80011c5a <__mdiff+0x42>
80011c40:	c0 78       	rjmp	80011c4e <__mdiff+0x36>
80011c42:	1c 38       	cp.w	r8,lr
80011c44:	fe 9b ff f9 	brhi	80011c36 <__mdiff+0x1e>
80011c48:	c4 98       	rjmp	80011cda <__mdiff+0xc2>
80011c4a:	58 05       	cp.w	r5,0
80011c4c:	c0 64       	brge	80011c58 <__mdiff+0x40>
80011c4e:	0e 98       	mov	r8,r7
80011c50:	30 15       	mov	r5,1
80011c52:	0c 97       	mov	r7,r6
80011c54:	10 96       	mov	r6,r8
80011c56:	c0 28       	rjmp	80011c5a <__mdiff+0x42>
80011c58:	30 05       	mov	r5,0
80011c5a:	6e 1b       	ld.w	r11,r7[0x4]
80011c5c:	c5 6f       	rcall	80011b08 <_Balloc>
80011c5e:	6e 49       	ld.w	r9,r7[0x10]
80011c60:	6c 44       	ld.w	r4,r6[0x10]
80011c62:	99 35       	st.w	r12[0xc],r5
80011c64:	2f b4       	sub	r4,-5
80011c66:	f2 c5 ff fb 	sub	r5,r9,-5
80011c6a:	ec 04 00 24 	add	r4,r6,r4<<0x2
80011c6e:	ee 05 00 25 	add	r5,r7,r5<<0x2
80011c72:	2e c6       	sub	r6,-20
80011c74:	2e c7       	sub	r7,-20
80011c76:	f8 c8 ff ec 	sub	r8,r12,-20
80011c7a:	30 0a       	mov	r10,0
80011c7c:	0f 0e       	ld.w	lr,r7++
80011c7e:	0d 0b       	ld.w	r11,r6++
80011c80:	fc 02 16 10 	lsr	r2,lr,0x10
80011c84:	f6 03 16 10 	lsr	r3,r11,0x10
80011c88:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
80011c8c:	e4 03 01 03 	sub	r3,r2,r3
80011c90:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80011c94:	fc 0b 01 0b 	sub	r11,lr,r11
80011c98:	f6 0a 00 0a 	add	r10,r11,r10
80011c9c:	b0 1a       	st.h	r8[0x2],r10
80011c9e:	b1 4a       	asr	r10,0x10
80011ca0:	e6 0a 00 0a 	add	r10,r3,r10
80011ca4:	b0 0a       	st.h	r8[0x0],r10
80011ca6:	2f c8       	sub	r8,-4
80011ca8:	b1 4a       	asr	r10,0x10
80011caa:	08 36       	cp.w	r6,r4
80011cac:	ce 83       	brcs	80011c7c <__mdiff+0x64>
80011cae:	c0 d8       	rjmp	80011cc8 <__mdiff+0xb0>
80011cb0:	0f 0b       	ld.w	r11,r7++
80011cb2:	f6 0e 16 10 	lsr	lr,r11,0x10
80011cb6:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80011cba:	16 0a       	add	r10,r11
80011cbc:	b0 1a       	st.h	r8[0x2],r10
80011cbe:	b1 4a       	asr	r10,0x10
80011cc0:	1c 0a       	add	r10,lr
80011cc2:	b0 0a       	st.h	r8[0x0],r10
80011cc4:	2f c8       	sub	r8,-4
80011cc6:	b1 4a       	asr	r10,0x10
80011cc8:	0a 37       	cp.w	r7,r5
80011cca:	cf 33       	brcs	80011cb0 <__mdiff+0x98>
80011ccc:	c0 28       	rjmp	80011cd0 <__mdiff+0xb8>
80011cce:	20 19       	sub	r9,1
80011cd0:	11 4a       	ld.w	r10,--r8
80011cd2:	58 0a       	cp.w	r10,0
80011cd4:	cf d0       	breq	80011cce <__mdiff+0xb6>
80011cd6:	99 49       	st.w	r12[0x10],r9
80011cd8:	d8 32       	popm	r0-r7,pc
80011cda:	30 0b       	mov	r11,0
80011cdc:	c1 6f       	rcall	80011b08 <_Balloc>
80011cde:	30 18       	mov	r8,1
80011ce0:	99 48       	st.w	r12[0x10],r8
80011ce2:	30 08       	mov	r8,0
80011ce4:	99 58       	st.w	r12[0x14],r8
80011ce6:	d8 32       	popm	r0-r7,pc

80011ce8 <__lshift>:
80011ce8:	d4 31       	pushm	r0-r7,lr
80011cea:	16 97       	mov	r7,r11
80011cec:	76 46       	ld.w	r6,r11[0x10]
80011cee:	f4 02 14 05 	asr	r2,r10,0x5
80011cf2:	2f f6       	sub	r6,-1
80011cf4:	14 93       	mov	r3,r10
80011cf6:	18 94       	mov	r4,r12
80011cf8:	04 06       	add	r6,r2
80011cfa:	76 1b       	ld.w	r11,r11[0x4]
80011cfc:	6e 28       	ld.w	r8,r7[0x8]
80011cfe:	c0 38       	rjmp	80011d04 <__lshift+0x1c>
80011d00:	2f fb       	sub	r11,-1
80011d02:	a1 78       	lsl	r8,0x1
80011d04:	10 36       	cp.w	r6,r8
80011d06:	fe 99 ff fd 	brgt	80011d00 <__lshift+0x18>
80011d0a:	08 9c       	mov	r12,r4
80011d0c:	cf ee       	rcall	80011b08 <_Balloc>
80011d0e:	30 09       	mov	r9,0
80011d10:	18 95       	mov	r5,r12
80011d12:	f8 c8 ff ec 	sub	r8,r12,-20
80011d16:	12 9a       	mov	r10,r9
80011d18:	c0 38       	rjmp	80011d1e <__lshift+0x36>
80011d1a:	10 aa       	st.w	r8++,r10
80011d1c:	2f f9       	sub	r9,-1
80011d1e:	04 39       	cp.w	r9,r2
80011d20:	cf d5       	brlt	80011d1a <__lshift+0x32>
80011d22:	6e 4b       	ld.w	r11,r7[0x10]
80011d24:	e7 d3 c0 05 	bfextu	r3,r3,0x0,0x5
80011d28:	2f bb       	sub	r11,-5
80011d2a:	ee c9 ff ec 	sub	r9,r7,-20
80011d2e:	ee 0b 00 2b 	add	r11,r7,r11<<0x2
80011d32:	58 03       	cp.w	r3,0
80011d34:	c1 30       	breq	80011d5a <__lshift+0x72>
80011d36:	e6 0c 11 20 	rsub	r12,r3,32
80011d3a:	30 0a       	mov	r10,0
80011d3c:	72 02       	ld.w	r2,r9[0x0]
80011d3e:	e4 03 09 42 	lsl	r2,r2,r3
80011d42:	04 4a       	or	r10,r2
80011d44:	10 aa       	st.w	r8++,r10
80011d46:	13 0a       	ld.w	r10,r9++
80011d48:	f4 0c 0a 4a 	lsr	r10,r10,r12
80011d4c:	16 39       	cp.w	r9,r11
80011d4e:	cf 73       	brcs	80011d3c <__lshift+0x54>
80011d50:	91 0a       	st.w	r8[0x0],r10
80011d52:	58 0a       	cp.w	r10,0
80011d54:	c0 70       	breq	80011d62 <__lshift+0x7a>
80011d56:	2f f6       	sub	r6,-1
80011d58:	c0 58       	rjmp	80011d62 <__lshift+0x7a>
80011d5a:	13 0a       	ld.w	r10,r9++
80011d5c:	10 aa       	st.w	r8++,r10
80011d5e:	16 39       	cp.w	r9,r11
80011d60:	cf d3       	brcs	80011d5a <__lshift+0x72>
80011d62:	08 9c       	mov	r12,r4
80011d64:	20 16       	sub	r6,1
80011d66:	0e 9b       	mov	r11,r7
80011d68:	8b 46       	st.w	r5[0x10],r6
80011d6a:	cb 5e       	rcall	80011ad4 <_Bfree>
80011d6c:	0a 9c       	mov	r12,r5
80011d6e:	d8 32       	popm	r0-r7,pc

80011d70 <__multiply>:
80011d70:	d4 31       	pushm	r0-r7,lr
80011d72:	20 2d       	sub	sp,8
80011d74:	76 49       	ld.w	r9,r11[0x10]
80011d76:	74 48       	ld.w	r8,r10[0x10]
80011d78:	16 96       	mov	r6,r11
80011d7a:	14 95       	mov	r5,r10
80011d7c:	10 39       	cp.w	r9,r8
80011d7e:	ec 08 17 50 	movlt	r8,r6
80011d82:	ea 06 17 50 	movlt	r6,r5
80011d86:	f0 05 17 50 	movlt	r5,r8
80011d8a:	6c 28       	ld.w	r8,r6[0x8]
80011d8c:	76 43       	ld.w	r3,r11[0x10]
80011d8e:	74 42       	ld.w	r2,r10[0x10]
80011d90:	76 1b       	ld.w	r11,r11[0x4]
80011d92:	e4 03 00 07 	add	r7,r2,r3
80011d96:	10 37       	cp.w	r7,r8
80011d98:	f7 bb 09 ff 	subgt	r11,-1
80011d9c:	cb 6e       	rcall	80011b08 <_Balloc>
80011d9e:	ee c4 ff fb 	sub	r4,r7,-5
80011da2:	f8 c9 ff ec 	sub	r9,r12,-20
80011da6:	f8 04 00 24 	add	r4,r12,r4<<0x2
80011daa:	30 0a       	mov	r10,0
80011dac:	12 98       	mov	r8,r9
80011dae:	c0 28       	rjmp	80011db2 <__multiply+0x42>
80011db0:	10 aa       	st.w	r8++,r10
80011db2:	08 38       	cp.w	r8,r4
80011db4:	cf e3       	brcs	80011db0 <__multiply+0x40>
80011db6:	2f b3       	sub	r3,-5
80011db8:	2f b2       	sub	r2,-5
80011dba:	ec 03 00 23 	add	r3,r6,r3<<0x2
80011dbe:	ea 02 00 22 	add	r2,r5,r2<<0x2
80011dc2:	ec cb ff ec 	sub	r11,r6,-20
80011dc6:	50 12       	stdsp	sp[0x4],r2
80011dc8:	ea ca ff ec 	sub	r10,r5,-20
80011dcc:	c4 48       	rjmp	80011e54 <__multiply+0xe4>
80011dce:	94 95       	ld.uh	r5,r10[0x2]
80011dd0:	58 05       	cp.w	r5,0
80011dd2:	c2 00       	breq	80011e12 <__multiply+0xa2>
80011dd4:	12 98       	mov	r8,r9
80011dd6:	16 96       	mov	r6,r11
80011dd8:	30 0e       	mov	lr,0
80011dda:	50 09       	stdsp	sp[0x0],r9
80011ddc:	0d 02       	ld.w	r2,r6++
80011dde:	e4 00 16 10 	lsr	r0,r2,0x10
80011de2:	70 01       	ld.w	r1,r8[0x0]
80011de4:	70 09       	ld.w	r9,r8[0x0]
80011de6:	b1 81       	lsr	r1,0x10
80011de8:	e5 d2 c0 10 	bfextu	r2,r2,0x0,0x10
80011dec:	e0 05 03 41 	mac	r1,r0,r5
80011df0:	ab 32       	mul	r2,r5
80011df2:	e1 d9 c0 10 	bfextu	r0,r9,0x0,0x10
80011df6:	00 02       	add	r2,r0
80011df8:	e4 0e 00 0e 	add	lr,r2,lr
80011dfc:	b0 1e       	st.h	r8[0x2],lr
80011dfe:	b1 8e       	lsr	lr,0x10
80011e00:	1c 01       	add	r1,lr
80011e02:	b0 01       	st.h	r8[0x0],r1
80011e04:	e2 0e 16 10 	lsr	lr,r1,0x10
80011e08:	2f c8       	sub	r8,-4
80011e0a:	06 36       	cp.w	r6,r3
80011e0c:	ce 83       	brcs	80011ddc <__multiply+0x6c>
80011e0e:	40 09       	lddsp	r9,sp[0x0]
80011e10:	91 0e       	st.w	r8[0x0],lr
80011e12:	94 86       	ld.uh	r6,r10[0x0]
80011e14:	58 06       	cp.w	r6,0
80011e16:	c1 d0       	breq	80011e50 <__multiply+0xe0>
80011e18:	72 02       	ld.w	r2,r9[0x0]
80011e1a:	12 98       	mov	r8,r9
80011e1c:	16 9e       	mov	lr,r11
80011e1e:	30 05       	mov	r5,0
80011e20:	b0 12       	st.h	r8[0x2],r2
80011e22:	1d 01       	ld.w	r1,lr++
80011e24:	90 82       	ld.uh	r2,r8[0x0]
80011e26:	e1 d1 c0 10 	bfextu	r0,r1,0x0,0x10
80011e2a:	ad 30       	mul	r0,r6
80011e2c:	e0 02 00 02 	add	r2,r0,r2
80011e30:	e4 05 00 05 	add	r5,r2,r5
80011e34:	b0 05       	st.h	r8[0x0],r5
80011e36:	b1 85       	lsr	r5,0x10
80011e38:	b1 81       	lsr	r1,0x10
80011e3a:	2f c8       	sub	r8,-4
80011e3c:	ad 31       	mul	r1,r6
80011e3e:	90 92       	ld.uh	r2,r8[0x2]
80011e40:	e2 02 00 02 	add	r2,r1,r2
80011e44:	0a 02       	add	r2,r5
80011e46:	e4 05 16 10 	lsr	r5,r2,0x10
80011e4a:	06 3e       	cp.w	lr,r3
80011e4c:	ce a3       	brcs	80011e20 <__multiply+0xb0>
80011e4e:	91 02       	st.w	r8[0x0],r2
80011e50:	2f ca       	sub	r10,-4
80011e52:	2f c9       	sub	r9,-4
80011e54:	40 18       	lddsp	r8,sp[0x4]
80011e56:	10 3a       	cp.w	r10,r8
80011e58:	cb b3       	brcs	80011dce <__multiply+0x5e>
80011e5a:	c0 28       	rjmp	80011e5e <__multiply+0xee>
80011e5c:	20 17       	sub	r7,1
80011e5e:	58 07       	cp.w	r7,0
80011e60:	e0 8a 00 05 	brle	80011e6a <__multiply+0xfa>
80011e64:	09 48       	ld.w	r8,--r4
80011e66:	58 08       	cp.w	r8,0
80011e68:	cf a0       	breq	80011e5c <__multiply+0xec>
80011e6a:	99 47       	st.w	r12[0x10],r7
80011e6c:	2f ed       	sub	sp,-8
80011e6e:	d8 32       	popm	r0-r7,pc

80011e70 <__i2b>:
80011e70:	d4 21       	pushm	r4-r7,lr
80011e72:	16 97       	mov	r7,r11
80011e74:	30 1b       	mov	r11,1
80011e76:	c4 9e       	rcall	80011b08 <_Balloc>
80011e78:	30 19       	mov	r9,1
80011e7a:	99 57       	st.w	r12[0x14],r7
80011e7c:	99 49       	st.w	r12[0x10],r9
80011e7e:	d8 22       	popm	r4-r7,pc

80011e80 <__multadd>:
80011e80:	d4 31       	pushm	r0-r7,lr
80011e82:	30 08       	mov	r8,0
80011e84:	12 95       	mov	r5,r9
80011e86:	16 97       	mov	r7,r11
80011e88:	18 96       	mov	r6,r12
80011e8a:	76 44       	ld.w	r4,r11[0x10]
80011e8c:	f6 c9 ff ec 	sub	r9,r11,-20
80011e90:	72 0b       	ld.w	r11,r9[0x0]
80011e92:	f6 0c 16 10 	lsr	r12,r11,0x10
80011e96:	f7 db c0 10 	bfextu	r11,r11,0x0,0x10
80011e9a:	f4 0c 02 4c 	mul	r12,r10,r12
80011e9e:	f4 0b 03 45 	mac	r5,r10,r11
80011ea2:	f7 d5 c0 10 	bfextu	r11,r5,0x0,0x10
80011ea6:	b1 85       	lsr	r5,0x10
80011ea8:	18 05       	add	r5,r12
80011eaa:	ea 0c 15 10 	lsl	r12,r5,0x10
80011eae:	f8 0b 00 0b 	add	r11,r12,r11
80011eb2:	12 ab       	st.w	r9++,r11
80011eb4:	2f f8       	sub	r8,-1
80011eb6:	b1 85       	lsr	r5,0x10
80011eb8:	08 38       	cp.w	r8,r4
80011eba:	ce b5       	brlt	80011e90 <__multadd+0x10>
80011ebc:	58 05       	cp.w	r5,0
80011ebe:	c1 c0       	breq	80011ef6 <__multadd+0x76>
80011ec0:	6e 28       	ld.w	r8,r7[0x8]
80011ec2:	10 34       	cp.w	r4,r8
80011ec4:	c1 35       	brlt	80011eea <__multadd+0x6a>
80011ec6:	6e 1b       	ld.w	r11,r7[0x4]
80011ec8:	0c 9c       	mov	r12,r6
80011eca:	2f fb       	sub	r11,-1
80011ecc:	c1 ee       	rcall	80011b08 <_Balloc>
80011ece:	6e 4a       	ld.w	r10,r7[0x10]
80011ed0:	ee cb ff f4 	sub	r11,r7,-12
80011ed4:	18 93       	mov	r3,r12
80011ed6:	2f ea       	sub	r10,-2
80011ed8:	2f 4c       	sub	r12,-12
80011eda:	a3 6a       	lsl	r10,0x2
80011edc:	fe b0 dc eb 	rcall	8000d8b2 <memcpy>
80011ee0:	0e 9b       	mov	r11,r7
80011ee2:	0c 9c       	mov	r12,r6
80011ee4:	fe b0 fd f8 	rcall	80011ad4 <_Bfree>
80011ee8:	06 97       	mov	r7,r3
80011eea:	e8 c8 ff ff 	sub	r8,r4,-1
80011eee:	2f b4       	sub	r4,-5
80011ef0:	8f 48       	st.w	r7[0x10],r8
80011ef2:	ee 04 09 25 	st.w	r7[r4<<0x2],r5
80011ef6:	0e 9c       	mov	r12,r7
80011ef8:	d8 32       	popm	r0-r7,pc
80011efa:	d7 03       	nop

80011efc <__pow5mult>:
80011efc:	d4 31       	pushm	r0-r7,lr
80011efe:	14 96       	mov	r6,r10
80011f00:	18 97       	mov	r7,r12
80011f02:	16 94       	mov	r4,r11
80011f04:	f1 da c0 02 	bfextu	r8,r10,0x0,0x2
80011f08:	c0 90       	breq	80011f1a <__pow5mult+0x1e>
80011f0a:	20 18       	sub	r8,1
80011f0c:	fe c9 e2 e8 	sub	r9,pc,-7448
80011f10:	f2 08 03 2a 	ld.w	r10,r9[r8<<0x2]
80011f14:	30 09       	mov	r9,0
80011f16:	cb 5f       	rcall	80011e80 <__multadd>
80011f18:	18 94       	mov	r4,r12
80011f1a:	a3 46       	asr	r6,0x2
80011f1c:	c3 40       	breq	80011f84 <__pow5mult+0x88>
80011f1e:	6e 95       	ld.w	r5,r7[0x24]
80011f20:	58 05       	cp.w	r5,0
80011f22:	c0 91       	brne	80011f34 <__pow5mult+0x38>
80011f24:	31 0c       	mov	r12,16
80011f26:	fe b0 fa fb 	rcall	8001151c <malloc>
80011f2a:	99 35       	st.w	r12[0xc],r5
80011f2c:	8f 9c       	st.w	r7[0x24],r12
80011f2e:	99 15       	st.w	r12[0x4],r5
80011f30:	99 25       	st.w	r12[0x8],r5
80011f32:	99 05       	st.w	r12[0x0],r5
80011f34:	6e 93       	ld.w	r3,r7[0x24]
80011f36:	66 25       	ld.w	r5,r3[0x8]
80011f38:	58 05       	cp.w	r5,0
80011f3a:	c0 c1       	brne	80011f52 <__pow5mult+0x56>
80011f3c:	e0 6b 02 71 	mov	r11,625
80011f40:	0e 9c       	mov	r12,r7
80011f42:	c9 7f       	rcall	80011e70 <__i2b>
80011f44:	87 2c       	st.w	r3[0x8],r12
80011f46:	30 08       	mov	r8,0
80011f48:	18 95       	mov	r5,r12
80011f4a:	99 08       	st.w	r12[0x0],r8
80011f4c:	c0 38       	rjmp	80011f52 <__pow5mult+0x56>
80011f4e:	06 9c       	mov	r12,r3
80011f50:	18 95       	mov	r5,r12
80011f52:	ed b6 00 00 	bld	r6,0x0
80011f56:	c0 b1       	brne	80011f6c <__pow5mult+0x70>
80011f58:	08 9b       	mov	r11,r4
80011f5a:	0a 9a       	mov	r10,r5
80011f5c:	0e 9c       	mov	r12,r7
80011f5e:	c0 9f       	rcall	80011d70 <__multiply>
80011f60:	08 9b       	mov	r11,r4
80011f62:	18 93       	mov	r3,r12
80011f64:	0e 9c       	mov	r12,r7
80011f66:	06 94       	mov	r4,r3
80011f68:	fe b0 fd b6 	rcall	80011ad4 <_Bfree>
80011f6c:	a1 56       	asr	r6,0x1
80011f6e:	c0 b0       	breq	80011f84 <__pow5mult+0x88>
80011f70:	6a 03       	ld.w	r3,r5[0x0]
80011f72:	58 03       	cp.w	r3,0
80011f74:	ce d1       	brne	80011f4e <__pow5mult+0x52>
80011f76:	0a 9a       	mov	r10,r5
80011f78:	0a 9b       	mov	r11,r5
80011f7a:	0e 9c       	mov	r12,r7
80011f7c:	cf ae       	rcall	80011d70 <__multiply>
80011f7e:	8b 0c       	st.w	r5[0x0],r12
80011f80:	99 03       	st.w	r12[0x0],r3
80011f82:	ce 7b       	rjmp	80011f50 <__pow5mult+0x54>
80011f84:	08 9c       	mov	r12,r4
80011f86:	d8 32       	popm	r0-r7,pc

80011f88 <_putc_r>:
80011f88:	d4 21       	pushm	r4-r7,lr
80011f8a:	20 2d       	sub	sp,8
80011f8c:	18 97       	mov	r7,r12
80011f8e:	58 0c       	cp.w	r12,0
80011f90:	c0 a0       	breq	80011fa4 <_putc_r+0x1c>
80011f92:	78 68       	ld.w	r8,r12[0x18]
80011f94:	58 08       	cp.w	r8,0
80011f96:	c0 71       	brne	80011fa4 <_putc_r+0x1c>
80011f98:	50 1b       	stdsp	sp[0x4],r11
80011f9a:	50 0a       	stdsp	sp[0x0],r10
80011f9c:	fe b0 f7 88 	rcall	80010eac <__sinit>
80011fa0:	40 0a       	lddsp	r10,sp[0x0]
80011fa2:	40 1b       	lddsp	r11,sp[0x4]
80011fa4:	fe c8 e4 20 	sub	r8,pc,-7136
80011fa8:	10 3a       	cp.w	r10,r8
80011faa:	c0 31       	brne	80011fb0 <_putc_r+0x28>
80011fac:	6e 0a       	ld.w	r10,r7[0x0]
80011fae:	c0 c8       	rjmp	80011fc6 <_putc_r+0x3e>
80011fb0:	fe c8 e4 0c 	sub	r8,pc,-7156
80011fb4:	10 3a       	cp.w	r10,r8
80011fb6:	c0 31       	brne	80011fbc <_putc_r+0x34>
80011fb8:	6e 1a       	ld.w	r10,r7[0x4]
80011fba:	c0 68       	rjmp	80011fc6 <_putc_r+0x3e>
80011fbc:	fe c8 e3 f8 	sub	r8,pc,-7176
80011fc0:	10 3a       	cp.w	r10,r8
80011fc2:	ef fa 00 02 	ld.weq	r10,r7[0x8]
80011fc6:	74 28       	ld.w	r8,r10[0x8]
80011fc8:	20 18       	sub	r8,1
80011fca:	95 28       	st.w	r10[0x8],r8
80011fcc:	c1 57       	brpl	80011ff6 <_putc_r+0x6e>
80011fce:	74 69       	ld.w	r9,r10[0x18]
80011fd0:	12 38       	cp.w	r8,r9
80011fd2:	c0 e5       	brlt	80011fee <_putc_r+0x66>
80011fd4:	74 08       	ld.w	r8,r10[0x0]
80011fd6:	b0 8b       	st.b	r8[0x0],r11
80011fd8:	30 a9       	mov	r9,10
80011fda:	74 08       	ld.w	r8,r10[0x0]
80011fdc:	11 8c       	ld.ub	r12,r8[0x0]
80011fde:	f2 0c 18 00 	cp.b	r12,r9
80011fe2:	c0 30       	breq	80011fe8 <_putc_r+0x60>
80011fe4:	2f f8       	sub	r8,-1
80011fe6:	c0 c8       	rjmp	80011ffe <_putc_r+0x76>
80011fe8:	0e 9c       	mov	r12,r7
80011fea:	30 ab       	mov	r11,10
80011fec:	c0 28       	rjmp	80011ff0 <_putc_r+0x68>
80011fee:	0e 9c       	mov	r12,r7
80011ff0:	e0 a0 02 40 	rcall	80012470 <__swbuf_r>
80011ff4:	c0 68       	rjmp	80012000 <_putc_r+0x78>
80011ff6:	74 08       	ld.w	r8,r10[0x0]
80011ff8:	b0 8b       	st.b	r8[0x0],r11
80011ffa:	74 08       	ld.w	r8,r10[0x0]
80011ffc:	11 3c       	ld.ub	r12,r8++
80011ffe:	95 08       	st.w	r10[0x0],r8
80012000:	2f ed       	sub	sp,-8
80012002:	d8 22       	popm	r4-r7,pc

80012004 <_realloc_r>:
80012004:	d4 31       	pushm	r0-r7,lr
80012006:	20 1d       	sub	sp,4
80012008:	16 94       	mov	r4,r11
8001200a:	18 92       	mov	r2,r12
8001200c:	14 9b       	mov	r11,r10
8001200e:	58 04       	cp.w	r4,0
80012010:	c0 51       	brne	8001201a <_realloc_r+0x16>
80012012:	fe b0 fa 8d 	rcall	8001152c <_malloc_r>
80012016:	18 95       	mov	r5,r12
80012018:	c5 39       	rjmp	800122be <_realloc_r+0x2ba>
8001201a:	50 0a       	stdsp	sp[0x0],r10
8001201c:	fe b0 fc ca 	rcall	800119b0 <__malloc_lock>
80012020:	40 0b       	lddsp	r11,sp[0x0]
80012022:	f6 c8 ff f5 	sub	r8,r11,-11
80012026:	e8 c1 00 08 	sub	r1,r4,8
8001202a:	10 96       	mov	r6,r8
8001202c:	62 1c       	ld.w	r12,r1[0x4]
8001202e:	e0 16 ff f8 	andl	r6,0xfff8
80012032:	59 68       	cp.w	r8,22
80012034:	f9 b6 08 10 	movls	r6,16
80012038:	16 36       	cp.w	r6,r11
8001203a:	5f 38       	srlo	r8
8001203c:	f1 e6 13 f8 	or	r8,r8,r6>>0x1f
80012040:	c0 50       	breq	8001204a <_realloc_r+0x46>
80012042:	30 c8       	mov	r8,12
80012044:	30 05       	mov	r5,0
80012046:	85 38       	st.w	r2[0xc],r8
80012048:	c3 b9       	rjmp	800122be <_realloc_r+0x2ba>
8001204a:	18 90       	mov	r0,r12
8001204c:	e0 10 ff fc 	andl	r0,0xfffc
80012050:	0c 30       	cp.w	r0,r6
80012052:	e0 84 01 0b 	brge	80012268 <_realloc_r+0x264>
80012056:	e0 68 01 cc 	mov	r8,460
8001205a:	e2 00 00 09 	add	r9,r1,r0
8001205e:	70 25       	ld.w	r5,r8[0x8]
80012060:	0a 39       	cp.w	r9,r5
80012062:	c0 90       	breq	80012074 <_realloc_r+0x70>
80012064:	72 1a       	ld.w	r10,r9[0x4]
80012066:	a1 ca       	cbr	r10,0x0
80012068:	f2 0a 00 0a 	add	r10,r9,r10
8001206c:	74 1a       	ld.w	r10,r10[0x4]
8001206e:	ed ba 00 00 	bld	r10,0x0
80012072:	c2 20       	breq	800120b6 <_realloc_r+0xb2>
80012074:	72 1a       	ld.w	r10,r9[0x4]
80012076:	e0 1a ff fc 	andl	r10,0xfffc
8001207a:	f4 00 00 03 	add	r3,r10,r0
8001207e:	0a 39       	cp.w	r9,r5
80012080:	c1 31       	brne	800120a6 <_realloc_r+0xa2>
80012082:	ec c7 ff f0 	sub	r7,r6,-16
80012086:	0e 33       	cp.w	r3,r7
80012088:	c1 95       	brlt	800120ba <_realloc_r+0xb6>
8001208a:	e2 06 00 09 	add	r9,r1,r6
8001208e:	0c 13       	sub	r3,r6
80012090:	a1 a3       	sbr	r3,0x0
80012092:	93 13       	st.w	r9[0x4],r3
80012094:	91 29       	st.w	r8[0x8],r9
80012096:	04 9c       	mov	r12,r2
80012098:	62 18       	ld.w	r8,r1[0x4]
8001209a:	08 95       	mov	r5,r4
8001209c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800120a0:	10 46       	or	r6,r8
800120a2:	83 16       	st.w	r1[0x4],r6
800120a4:	c0 b9       	rjmp	800122ba <_realloc_r+0x2b6>
800120a6:	0c 33       	cp.w	r3,r6
800120a8:	c0 95       	brlt	800120ba <_realloc_r+0xb6>
800120aa:	72 28       	ld.w	r8,r9[0x8]
800120ac:	02 97       	mov	r7,r1
800120ae:	72 39       	ld.w	r9,r9[0xc]
800120b0:	93 28       	st.w	r9[0x8],r8
800120b2:	91 39       	st.w	r8[0xc],r9
800120b4:	cd c8       	rjmp	8001226c <_realloc_r+0x268>
800120b6:	30 0a       	mov	r10,0
800120b8:	14 99       	mov	r9,r10
800120ba:	ed bc 00 00 	bld	r12,0x0
800120be:	e0 80 00 95 	breq	800121e8 <_realloc_r+0x1e4>
800120c2:	62 07       	ld.w	r7,r1[0x0]
800120c4:	e2 07 01 07 	sub	r7,r1,r7
800120c8:	6e 1c       	ld.w	r12,r7[0x4]
800120ca:	e0 1c ff fc 	andl	r12,0xfffc
800120ce:	58 09       	cp.w	r9,0
800120d0:	c5 60       	breq	8001217c <_realloc_r+0x178>
800120d2:	f8 00 00 03 	add	r3,r12,r0
800120d6:	0a 39       	cp.w	r9,r5
800120d8:	c4 81       	brne	80012168 <_realloc_r+0x164>
800120da:	14 03       	add	r3,r10
800120dc:	ec c9 ff f0 	sub	r9,r6,-16
800120e0:	12 33       	cp.w	r3,r9
800120e2:	c4 d5       	brlt	8001217c <_realloc_r+0x178>
800120e4:	6e 3a       	ld.w	r10,r7[0xc]
800120e6:	6e 29       	ld.w	r9,r7[0x8]
800120e8:	95 29       	st.w	r10[0x8],r9
800120ea:	93 3a       	st.w	r9[0xc],r10
800120ec:	ee c5 ff f8 	sub	r5,r7,-8
800120f0:	e0 ca 00 04 	sub	r10,r0,4
800120f4:	e0 4a 00 24 	cp.w	r10,36
800120f8:	e0 8b 00 25 	brhi	80012142 <_realloc_r+0x13e>
800120fc:	0a 99       	mov	r9,r5
800120fe:	59 3a       	cp.w	r10,19
80012100:	e0 88 00 1a 	brls	80012134 <_realloc_r+0x130>
80012104:	09 09       	ld.w	r9,r4++
80012106:	8b 09       	st.w	r5[0x0],r9
80012108:	09 09       	ld.w	r9,r4++
8001210a:	8f 39       	st.w	r7[0xc],r9
8001210c:	ee c9 ff f0 	sub	r9,r7,-16
80012110:	59 ba       	cp.w	r10,27
80012112:	e0 88 00 11 	brls	80012134 <_realloc_r+0x130>
80012116:	09 0b       	ld.w	r11,r4++
80012118:	93 0b       	st.w	r9[0x0],r11
8001211a:	09 09       	ld.w	r9,r4++
8001211c:	8f 59       	st.w	r7[0x14],r9
8001211e:	ee c9 ff e8 	sub	r9,r7,-24
80012122:	e0 4a 00 24 	cp.w	r10,36
80012126:	c0 71       	brne	80012134 <_realloc_r+0x130>
80012128:	09 0a       	ld.w	r10,r4++
8001212a:	93 0a       	st.w	r9[0x0],r10
8001212c:	ee c9 ff e0 	sub	r9,r7,-32
80012130:	09 0a       	ld.w	r10,r4++
80012132:	8f 7a       	st.w	r7[0x1c],r10
80012134:	09 0a       	ld.w	r10,r4++
80012136:	12 aa       	st.w	r9++,r10
80012138:	68 0a       	ld.w	r10,r4[0x0]
8001213a:	93 0a       	st.w	r9[0x0],r10
8001213c:	68 1a       	ld.w	r10,r4[0x4]
8001213e:	93 1a       	st.w	r9[0x4],r10
80012140:	c0 78       	rjmp	8001214e <_realloc_r+0x14a>
80012142:	50 08       	stdsp	sp[0x0],r8
80012144:	08 9b       	mov	r11,r4
80012146:	0a 9c       	mov	r12,r5
80012148:	fe b0 fc 15 	rcall	80011972 <memmove>
8001214c:	40 08       	lddsp	r8,sp[0x0]
8001214e:	ee 06 00 09 	add	r9,r7,r6
80012152:	0c 13       	sub	r3,r6
80012154:	a1 a3       	sbr	r3,0x0
80012156:	93 13       	st.w	r9[0x4],r3
80012158:	91 29       	st.w	r8[0x8],r9
8001215a:	04 9c       	mov	r12,r2
8001215c:	6e 18       	ld.w	r8,r7[0x4]
8001215e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80012162:	10 46       	or	r6,r8
80012164:	8f 16       	st.w	r7[0x4],r6
80012166:	ca a8       	rjmp	800122ba <_realloc_r+0x2b6>
80012168:	14 03       	add	r3,r10
8001216a:	0c 33       	cp.w	r3,r6
8001216c:	c0 85       	brlt	8001217c <_realloc_r+0x178>
8001216e:	72 28       	ld.w	r8,r9[0x8]
80012170:	72 39       	ld.w	r9,r9[0xc]
80012172:	93 28       	st.w	r9[0x8],r8
80012174:	91 39       	st.w	r8[0xc],r9
80012176:	6e 28       	ld.w	r8,r7[0x8]
80012178:	6e 39       	ld.w	r9,r7[0xc]
8001217a:	c0 78       	rjmp	80012188 <_realloc_r+0x184>
8001217c:	f8 00 00 03 	add	r3,r12,r0
80012180:	0c 33       	cp.w	r3,r6
80012182:	c3 35       	brlt	800121e8 <_realloc_r+0x1e4>
80012184:	6e 39       	ld.w	r9,r7[0xc]
80012186:	6e 28       	ld.w	r8,r7[0x8]
80012188:	93 28       	st.w	r9[0x8],r8
8001218a:	91 39       	st.w	r8[0xc],r9
8001218c:	e0 ca 00 04 	sub	r10,r0,4
80012190:	ee cc ff f8 	sub	r12,r7,-8
80012194:	e0 4a 00 24 	cp.w	r10,36
80012198:	e0 8b 00 24 	brhi	800121e0 <_realloc_r+0x1dc>
8001219c:	59 3a       	cp.w	r10,19
8001219e:	e0 88 00 1a 	brls	800121d2 <_realloc_r+0x1ce>
800121a2:	09 08       	ld.w	r8,r4++
800121a4:	99 08       	st.w	r12[0x0],r8
800121a6:	09 08       	ld.w	r8,r4++
800121a8:	8f 38       	st.w	r7[0xc],r8
800121aa:	ee cc ff f0 	sub	r12,r7,-16
800121ae:	59 ba       	cp.w	r10,27
800121b0:	e0 88 00 11 	brls	800121d2 <_realloc_r+0x1ce>
800121b4:	09 08       	ld.w	r8,r4++
800121b6:	99 08       	st.w	r12[0x0],r8
800121b8:	09 08       	ld.w	r8,r4++
800121ba:	8f 58       	st.w	r7[0x14],r8
800121bc:	ee cc ff e8 	sub	r12,r7,-24
800121c0:	e0 4a 00 24 	cp.w	r10,36
800121c4:	c0 71       	brne	800121d2 <_realloc_r+0x1ce>
800121c6:	09 08       	ld.w	r8,r4++
800121c8:	99 08       	st.w	r12[0x0],r8
800121ca:	ee cc ff e0 	sub	r12,r7,-32
800121ce:	09 08       	ld.w	r8,r4++
800121d0:	8f 78       	st.w	r7[0x1c],r8
800121d2:	09 08       	ld.w	r8,r4++
800121d4:	18 a8       	st.w	r12++,r8
800121d6:	68 08       	ld.w	r8,r4[0x0]
800121d8:	99 08       	st.w	r12[0x0],r8
800121da:	68 18       	ld.w	r8,r4[0x4]
800121dc:	99 18       	st.w	r12[0x4],r8
800121de:	c4 78       	rjmp	8001226c <_realloc_r+0x268>
800121e0:	08 9b       	mov	r11,r4
800121e2:	fe b0 fb c8 	rcall	80011972 <memmove>
800121e6:	c4 38       	rjmp	8001226c <_realloc_r+0x268>
800121e8:	04 9c       	mov	r12,r2
800121ea:	fe b0 f9 a1 	rcall	8001152c <_malloc_r>
800121ee:	18 95       	mov	r5,r12
800121f0:	c3 a0       	breq	80012264 <_realloc_r+0x260>
800121f2:	62 18       	ld.w	r8,r1[0x4]
800121f4:	f8 c9 00 08 	sub	r9,r12,8
800121f8:	a1 c8       	cbr	r8,0x0
800121fa:	e2 08 00 08 	add	r8,r1,r8
800121fe:	10 39       	cp.w	r9,r8
80012200:	c0 71       	brne	8001220e <_realloc_r+0x20a>
80012202:	72 13       	ld.w	r3,r9[0x4]
80012204:	02 97       	mov	r7,r1
80012206:	e0 13 ff fc 	andl	r3,0xfffc
8001220a:	00 03       	add	r3,r0
8001220c:	c3 08       	rjmp	8001226c <_realloc_r+0x268>
8001220e:	e0 ca 00 04 	sub	r10,r0,4
80012212:	e0 4a 00 24 	cp.w	r10,36
80012216:	e0 8b 00 20 	brhi	80012256 <_realloc_r+0x252>
8001221a:	08 99       	mov	r9,r4
8001221c:	18 98       	mov	r8,r12
8001221e:	59 3a       	cp.w	r10,19
80012220:	e0 88 00 14 	brls	80012248 <_realloc_r+0x244>
80012224:	13 0b       	ld.w	r11,r9++
80012226:	10 ab       	st.w	r8++,r11
80012228:	13 0b       	ld.w	r11,r9++
8001222a:	10 ab       	st.w	r8++,r11
8001222c:	59 ba       	cp.w	r10,27
8001222e:	e0 88 00 0d 	brls	80012248 <_realloc_r+0x244>
80012232:	13 0b       	ld.w	r11,r9++
80012234:	10 ab       	st.w	r8++,r11
80012236:	13 0b       	ld.w	r11,r9++
80012238:	10 ab       	st.w	r8++,r11
8001223a:	e0 4a 00 24 	cp.w	r10,36
8001223e:	c0 51       	brne	80012248 <_realloc_r+0x244>
80012240:	13 0a       	ld.w	r10,r9++
80012242:	10 aa       	st.w	r8++,r10
80012244:	13 0a       	ld.w	r10,r9++
80012246:	10 aa       	st.w	r8++,r10
80012248:	13 0a       	ld.w	r10,r9++
8001224a:	10 aa       	st.w	r8++,r10
8001224c:	72 0a       	ld.w	r10,r9[0x0]
8001224e:	91 0a       	st.w	r8[0x0],r10
80012250:	72 19       	ld.w	r9,r9[0x4]
80012252:	91 19       	st.w	r8[0x4],r9
80012254:	c0 48       	rjmp	8001225c <_realloc_r+0x258>
80012256:	08 9b       	mov	r11,r4
80012258:	fe b0 fb 8d 	rcall	80011972 <memmove>
8001225c:	08 9b       	mov	r11,r4
8001225e:	04 9c       	mov	r12,r2
80012260:	fe b0 f6 c0 	rcall	80010fe0 <_free_r>
80012264:	04 9c       	mov	r12,r2
80012266:	c2 a8       	rjmp	800122ba <_realloc_r+0x2b6>
80012268:	00 93       	mov	r3,r0
8001226a:	02 97       	mov	r7,r1
8001226c:	e6 06 01 09 	sub	r9,r3,r6
80012270:	6e 18       	ld.w	r8,r7[0x4]
80012272:	58 f9       	cp.w	r9,15
80012274:	e0 88 00 16 	brls	800122a0 <_realloc_r+0x29c>
80012278:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001227c:	ed e8 10 08 	or	r8,r6,r8
80012280:	8f 18       	st.w	r7[0x4],r8
80012282:	12 98       	mov	r8,r9
80012284:	a1 a8       	sbr	r8,0x0
80012286:	ee 06 00 0b 	add	r11,r7,r6
8001228a:	f6 09 00 09 	add	r9,r11,r9
8001228e:	97 18       	st.w	r11[0x4],r8
80012290:	72 18       	ld.w	r8,r9[0x4]
80012292:	a1 a8       	sbr	r8,0x0
80012294:	2f 8b       	sub	r11,-8
80012296:	93 18       	st.w	r9[0x4],r8
80012298:	04 9c       	mov	r12,r2
8001229a:	fe b0 f6 a3 	rcall	80010fe0 <_free_r>
8001229e:	c0 b8       	rjmp	800122b4 <_realloc_r+0x2b0>
800122a0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800122a4:	e7 e8 10 08 	or	r8,r3,r8
800122a8:	8f 18       	st.w	r7[0x4],r8
800122aa:	ee 03 00 03 	add	r3,r7,r3
800122ae:	66 18       	ld.w	r8,r3[0x4]
800122b0:	a1 a8       	sbr	r8,0x0
800122b2:	87 18       	st.w	r3[0x4],r8
800122b4:	04 9c       	mov	r12,r2
800122b6:	ee c5 ff f8 	sub	r5,r7,-8
800122ba:	fe b0 fb 7c 	rcall	800119b2 <__malloc_unlock>
800122be:	0a 9c       	mov	r12,r5
800122c0:	2f fd       	sub	sp,-4
800122c2:	d8 32       	popm	r0-r7,pc

800122c4 <__isinfd>:
800122c4:	14 98       	mov	r8,r10
800122c6:	fc 19 7f f0 	movh	r9,0x7ff0
800122ca:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800122ce:	f0 0b 11 00 	rsub	r11,r8,0
800122d2:	f7 e8 10 08 	or	r8,r11,r8
800122d6:	f5 e8 13 f8 	or	r8,r10,r8>>0x1f
800122da:	f2 08 01 08 	sub	r8,r9,r8
800122de:	f0 0c 11 00 	rsub	r12,r8,0
800122e2:	f9 e8 10 08 	or	r8,r12,r8
800122e6:	f0 0c 14 1f 	asr	r12,r8,0x1f
800122ea:	2f fc       	sub	r12,-1
800122ec:	5e fc       	retal	r12

800122ee <__isnand>:
800122ee:	14 98       	mov	r8,r10
800122f0:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
800122f4:	f0 0c 11 00 	rsub	r12,r8,0
800122f8:	10 4c       	or	r12,r8
800122fa:	fc 18 7f f0 	movh	r8,0x7ff0
800122fe:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
80012302:	f0 0c 01 0c 	sub	r12,r8,r12
80012306:	bf 9c       	lsr	r12,0x1f
80012308:	5e fc       	retal	r12
8001230a:	d7 03       	nop

8001230c <_sbrk_r>:
8001230c:	d4 21       	pushm	r4-r7,lr
8001230e:	30 08       	mov	r8,0
80012310:	18 97       	mov	r7,r12
80012312:	e0 66 12 54 	mov	r6,4692
80012316:	16 9c       	mov	r12,r11
80012318:	8d 08       	st.w	r6[0x0],r8
8001231a:	c8 fc       	rcall	80012438 <_sbrk>
8001231c:	5b fc       	cp.w	r12,-1
8001231e:	c0 51       	brne	80012328 <_sbrk_r+0x1c>
80012320:	6c 08       	ld.w	r8,r6[0x0]
80012322:	58 08       	cp.w	r8,0
80012324:	ef f8 1a 03 	st.wne	r7[0xc],r8
80012328:	d8 22       	popm	r4-r7,pc
8001232a:	d7 03       	nop

8001232c <__sclose>:
8001232c:	d4 01       	pushm	lr
8001232e:	96 7b       	ld.sh	r11,r11[0xe]
80012330:	c3 4d       	rcall	80012598 <_close_r>
80012332:	d8 02       	popm	pc

80012334 <__sseek>:
80012334:	d4 21       	pushm	r4-r7,lr
80012336:	16 97       	mov	r7,r11
80012338:	96 7b       	ld.sh	r11,r11[0xe]
8001233a:	cb bd       	rcall	800126b0 <_lseek_r>
8001233c:	8e 68       	ld.sh	r8,r7[0xc]
8001233e:	10 99       	mov	r9,r8
80012340:	ad c8       	cbr	r8,0xc
80012342:	ad a9       	sbr	r9,0xc
80012344:	5b fc       	cp.w	r12,-1
80012346:	ef f8 0c 06 	st.heq	r7[0xc],r8
8001234a:	ef f9 1c 06 	st.hne	r7[0xc],r9
8001234e:	ef fc 1a 15 	st.wne	r7[0x54],r12
80012352:	d8 22       	popm	r4-r7,pc

80012354 <__swrite>:
80012354:	d4 21       	pushm	r4-r7,lr
80012356:	96 68       	ld.sh	r8,r11[0xc]
80012358:	16 97       	mov	r7,r11
8001235a:	14 95       	mov	r5,r10
8001235c:	12 94       	mov	r4,r9
8001235e:	e2 18 01 00 	andl	r8,0x100,COH
80012362:	18 96       	mov	r6,r12
80012364:	c0 50       	breq	8001236e <__swrite+0x1a>
80012366:	30 29       	mov	r9,2
80012368:	30 0a       	mov	r10,0
8001236a:	96 7b       	ld.sh	r11,r11[0xe]
8001236c:	ca 2d       	rcall	800126b0 <_lseek_r>
8001236e:	8e 68       	ld.sh	r8,r7[0xc]
80012370:	ad c8       	cbr	r8,0xc
80012372:	08 99       	mov	r9,r4
80012374:	0a 9a       	mov	r10,r5
80012376:	8e 7b       	ld.sh	r11,r7[0xe]
80012378:	0c 9c       	mov	r12,r6
8001237a:	ae 68       	st.h	r7[0xc],r8
8001237c:	cc ec       	rcall	80012518 <_write_r>
8001237e:	d8 22       	popm	r4-r7,pc

80012380 <__sread>:
80012380:	d4 21       	pushm	r4-r7,lr
80012382:	16 97       	mov	r7,r11
80012384:	96 7b       	ld.sh	r11,r11[0xe]
80012386:	ca 7d       	rcall	800126d4 <_read_r>
80012388:	c0 65       	brlt	80012394 <__sread+0x14>
8001238a:	6f 58       	ld.w	r8,r7[0x54]
8001238c:	18 08       	add	r8,r12
8001238e:	ef 48 00 54 	st.w	r7[84],r8
80012392:	d8 22       	popm	r4-r7,pc
80012394:	8e 68       	ld.sh	r8,r7[0xc]
80012396:	ad c8       	cbr	r8,0xc
80012398:	ae 68       	st.h	r7[0xc],r8
8001239a:	d8 22       	popm	r4-r7,pc

8001239c <_close>:
8001239c:	30 28       	mov	r8,2
8001239e:	d6 73       	breakpoint
800123a0:	3f fc       	mov	r12,-1
800123a2:	35 8b       	mov	r11,88
800123a4:	58 0c       	cp.w	r12,0
800123a6:	5e 4c       	retge	r12
800123a8:	e0 6a 12 54 	mov	r10,4692
800123ac:	95 0b       	st.w	r10[0x0],r11
800123ae:	5e fc       	retal	r12

800123b0 <_lseek>:
800123b0:	30 58       	mov	r8,5
800123b2:	d6 73       	breakpoint
800123b4:	3f fc       	mov	r12,-1
800123b6:	35 8b       	mov	r11,88
800123b8:	58 0c       	cp.w	r12,0
800123ba:	5e 4c       	retge	r12
800123bc:	e0 6a 12 54 	mov	r10,4692
800123c0:	95 0b       	st.w	r10[0x0],r11
800123c2:	5e fc       	retal	r12

800123c4 <isatty>:
800123c4:	30 b8       	mov	r8,11
800123c6:	d6 73       	breakpoint
800123c8:	3f fc       	mov	r12,-1
800123ca:	35 8b       	mov	r11,88
800123cc:	58 0c       	cp.w	r12,0
800123ce:	5e 4c       	retge	r12
800123d0:	e0 6a 12 54 	mov	r10,4692
800123d4:	95 0b       	st.w	r10[0x0],r11
800123d6:	5e fc       	retal	r12

800123d8 <_fstat_host>:
800123d8:	30 98       	mov	r8,9
800123da:	d6 73       	breakpoint
800123dc:	3f fc       	mov	r12,-1
800123de:	35 8b       	mov	r11,88
800123e0:	58 0c       	cp.w	r12,0
800123e2:	5e 4c       	retge	r12
800123e4:	e0 6a 12 54 	mov	r10,4692
800123e8:	95 0b       	st.w	r10[0x0],r11
800123ea:	5e fc       	retal	r12

800123ec <_fstat>:
800123ec:	d4 21       	pushm	r4-r7,lr
800123ee:	21 0d       	sub	sp,64
800123f0:	16 97       	mov	r7,r11
800123f2:	1a 9b       	mov	r11,sp
800123f4:	cf 2f       	rcall	800123d8 <_fstat_host>
800123f6:	c0 34       	brge	800123fc <_fstat+0x10>
800123f8:	3f fc       	mov	r12,-1
800123fa:	c1 c8       	rjmp	80012432 <_fstat+0x46>
800123fc:	40 08       	lddsp	r8,sp[0x0]
800123fe:	ae 08       	st.h	r7[0x0],r8
80012400:	40 18       	lddsp	r8,sp[0x4]
80012402:	ae 18       	st.h	r7[0x2],r8
80012404:	40 28       	lddsp	r8,sp[0x8]
80012406:	8f 18       	st.w	r7[0x4],r8
80012408:	40 38       	lddsp	r8,sp[0xc]
8001240a:	ae 48       	st.h	r7[0x8],r8
8001240c:	40 48       	lddsp	r8,sp[0x10]
8001240e:	ae 58       	st.h	r7[0xa],r8
80012410:	40 58       	lddsp	r8,sp[0x14]
80012412:	ae 68       	st.h	r7[0xc],r8
80012414:	40 68       	lddsp	r8,sp[0x18]
80012416:	ae 78       	st.h	r7[0xe],r8
80012418:	40 88       	lddsp	r8,sp[0x20]
8001241a:	8f 48       	st.w	r7[0x10],r8
8001241c:	40 a8       	lddsp	r8,sp[0x28]
8001241e:	8f b8       	st.w	r7[0x2c],r8
80012420:	40 c8       	lddsp	r8,sp[0x30]
80012422:	8f c8       	st.w	r7[0x30],r8
80012424:	40 d8       	lddsp	r8,sp[0x34]
80012426:	8f 58       	st.w	r7[0x14],r8
80012428:	40 e8       	lddsp	r8,sp[0x38]
8001242a:	30 0c       	mov	r12,0
8001242c:	8f 78       	st.w	r7[0x1c],r8
8001242e:	40 f8       	lddsp	r8,sp[0x3c]
80012430:	8f 98       	st.w	r7[0x24],r8
80012432:	2f 0d       	sub	sp,-64
80012434:	d8 22       	popm	r4-r7,pc
80012436:	d7 03       	nop

80012438 <_sbrk>:
80012438:	d4 01       	pushm	lr
8001243a:	e0 68 0c dc 	mov	r8,3292
8001243e:	70 09       	ld.w	r9,r8[0x0]
80012440:	58 09       	cp.w	r9,0
80012442:	c0 41       	brne	8001244a <_sbrk+0x12>
80012444:	e0 69 12 58 	mov	r9,4696
80012448:	91 09       	st.w	r8[0x0],r9
8001244a:	e0 69 0c dc 	mov	r9,3292
8001244e:	e0 6a f0 00 	mov	r10,61440
80012452:	72 08       	ld.w	r8,r9[0x0]
80012454:	f0 0c 00 0c 	add	r12,r8,r12
80012458:	14 3c       	cp.w	r12,r10
8001245a:	e0 8b 00 04 	brhi	80012462 <_sbrk+0x2a>
8001245e:	93 0c       	st.w	r9[0x0],r12
80012460:	c0 58       	rjmp	8001246a <_sbrk+0x32>
80012462:	ca bc       	rcall	800125b8 <__errno>
80012464:	30 c8       	mov	r8,12
80012466:	99 08       	st.w	r12[0x0],r8
80012468:	3f f8       	mov	r8,-1
8001246a:	10 9c       	mov	r12,r8
8001246c:	d8 02       	popm	pc
8001246e:	d7 03       	nop

80012470 <__swbuf_r>:
80012470:	d4 21       	pushm	r4-r7,lr
80012472:	16 97       	mov	r7,r11
80012474:	14 96       	mov	r6,r10
80012476:	18 95       	mov	r5,r12
80012478:	58 0c       	cp.w	r12,0
8001247a:	c0 60       	breq	80012486 <__swbuf_r+0x16>
8001247c:	78 68       	ld.w	r8,r12[0x18]
8001247e:	58 08       	cp.w	r8,0
80012480:	c0 31       	brne	80012486 <__swbuf_r+0x16>
80012482:	fe b0 f5 15 	rcall	80010eac <__sinit>
80012486:	fe c8 e9 02 	sub	r8,pc,-5886
8001248a:	10 36       	cp.w	r6,r8
8001248c:	c0 31       	brne	80012492 <__swbuf_r+0x22>
8001248e:	6a 06       	ld.w	r6,r5[0x0]
80012490:	c0 c8       	rjmp	800124a8 <__swbuf_r+0x38>
80012492:	fe c8 e8 ee 	sub	r8,pc,-5906
80012496:	10 36       	cp.w	r6,r8
80012498:	c0 31       	brne	8001249e <__swbuf_r+0x2e>
8001249a:	6a 16       	ld.w	r6,r5[0x4]
8001249c:	c0 68       	rjmp	800124a8 <__swbuf_r+0x38>
8001249e:	fe c8 e8 da 	sub	r8,pc,-5926
800124a2:	10 36       	cp.w	r6,r8
800124a4:	eb f6 00 02 	ld.weq	r6,r5[0x8]
800124a8:	6c 68       	ld.w	r8,r6[0x18]
800124aa:	8d 28       	st.w	r6[0x8],r8
800124ac:	8c 68       	ld.sh	r8,r6[0xc]
800124ae:	ed b8 00 03 	bld	r8,0x3
800124b2:	c0 41       	brne	800124ba <__swbuf_r+0x4a>
800124b4:	6c 48       	ld.w	r8,r6[0x10]
800124b6:	58 08       	cp.w	r8,0
800124b8:	c0 c1       	brne	800124d0 <__swbuf_r+0x60>
800124ba:	0c 9b       	mov	r11,r6
800124bc:	0a 9c       	mov	r12,r5
800124be:	fe b0 ed 33 	rcall	8000ff24 <__swsetup_r>
800124c2:	c0 70       	breq	800124d0 <__swbuf_r+0x60>
800124c4:	8c 68       	ld.sh	r8,r6[0xc]
800124c6:	a7 a8       	sbr	r8,0x6
800124c8:	ac 68       	st.h	r6[0xc],r8
800124ca:	30 98       	mov	r8,9
800124cc:	8b 38       	st.w	r5[0xc],r8
800124ce:	c2 28       	rjmp	80012512 <__swbuf_r+0xa2>
800124d0:	6c 48       	ld.w	r8,r6[0x10]
800124d2:	6c 0c       	ld.w	r12,r6[0x0]
800124d4:	10 1c       	sub	r12,r8
800124d6:	6c 58       	ld.w	r8,r6[0x14]
800124d8:	10 3c       	cp.w	r12,r8
800124da:	c0 65       	brlt	800124e6 <__swbuf_r+0x76>
800124dc:	0c 9b       	mov	r11,r6
800124de:	0a 9c       	mov	r12,r5
800124e0:	fe b0 f4 0e 	rcall	80010cfc <_fflush_r>
800124e4:	c1 71       	brne	80012512 <__swbuf_r+0xa2>
800124e6:	6c 28       	ld.w	r8,r6[0x8]
800124e8:	20 18       	sub	r8,1
800124ea:	8d 28       	st.w	r6[0x8],r8
800124ec:	5c 57       	castu.b	r7
800124ee:	6c 08       	ld.w	r8,r6[0x0]
800124f0:	10 c7       	st.b	r8++,r7
800124f2:	8d 08       	st.w	r6[0x0],r8
800124f4:	2f fc       	sub	r12,-1
800124f6:	6c 58       	ld.w	r8,r6[0x14]
800124f8:	10 3c       	cp.w	r12,r8
800124fa:	c0 70       	breq	80012508 <__swbuf_r+0x98>
800124fc:	58 a7       	cp.w	r7,10
800124fe:	5f 08       	sreq	r8
80012500:	8c 69       	ld.sh	r9,r6[0xc]
80012502:	f3 e8 00 08 	and	r8,r9,r8
80012506:	c0 70       	breq	80012514 <__swbuf_r+0xa4>
80012508:	0c 9b       	mov	r11,r6
8001250a:	0a 9c       	mov	r12,r5
8001250c:	fe b0 f3 f8 	rcall	80010cfc <_fflush_r>
80012510:	c0 20       	breq	80012514 <__swbuf_r+0xa4>
80012512:	3f f7       	mov	r7,-1
80012514:	0e 9c       	mov	r12,r7
80012516:	d8 22       	popm	r4-r7,pc

80012518 <_write_r>:
80012518:	d4 21       	pushm	r4-r7,lr
8001251a:	16 98       	mov	r8,r11
8001251c:	18 97       	mov	r7,r12
8001251e:	10 9c       	mov	r12,r8
80012520:	30 08       	mov	r8,0
80012522:	14 9b       	mov	r11,r10
80012524:	e0 66 12 54 	mov	r6,4692
80012528:	12 9a       	mov	r10,r9
8001252a:	8d 08       	st.w	r6[0x0],r8
8001252c:	fe b0 d2 50 	rcall	8000c9cc <_write>
80012530:	5b fc       	cp.w	r12,-1
80012532:	c0 51       	brne	8001253c <_write_r+0x24>
80012534:	6c 08       	ld.w	r8,r6[0x0]
80012536:	58 08       	cp.w	r8,0
80012538:	ef f8 1a 03 	st.wne	r7[0xc],r8
8001253c:	d8 22       	popm	r4-r7,pc
8001253e:	d7 03       	nop

80012540 <_calloc_r>:
80012540:	d4 21       	pushm	r4-r7,lr
80012542:	f4 0b 02 4b 	mul	r11,r10,r11
80012546:	fe b0 f7 f3 	rcall	8001152c <_malloc_r>
8001254a:	18 97       	mov	r7,r12
8001254c:	c2 30       	breq	80012592 <_calloc_r+0x52>
8001254e:	f8 fa ff fc 	ld.w	r10,r12[-4]
80012552:	e0 1a ff fc 	andl	r10,0xfffc
80012556:	20 4a       	sub	r10,4
80012558:	e0 4a 00 24 	cp.w	r10,36
8001255c:	e0 8b 00 18 	brhi	8001258c <_calloc_r+0x4c>
80012560:	18 98       	mov	r8,r12
80012562:	59 3a       	cp.w	r10,19
80012564:	e0 88 00 0f 	brls	80012582 <_calloc_r+0x42>
80012568:	30 09       	mov	r9,0
8001256a:	10 a9       	st.w	r8++,r9
8001256c:	10 a9       	st.w	r8++,r9
8001256e:	59 ba       	cp.w	r10,27
80012570:	e0 88 00 09 	brls	80012582 <_calloc_r+0x42>
80012574:	10 a9       	st.w	r8++,r9
80012576:	10 a9       	st.w	r8++,r9
80012578:	e0 4a 00 24 	cp.w	r10,36
8001257c:	c0 31       	brne	80012582 <_calloc_r+0x42>
8001257e:	10 a9       	st.w	r8++,r9
80012580:	10 a9       	st.w	r8++,r9
80012582:	30 09       	mov	r9,0
80012584:	10 a9       	st.w	r8++,r9
80012586:	91 19       	st.w	r8[0x4],r9
80012588:	91 09       	st.w	r8[0x0],r9
8001258a:	c0 48       	rjmp	80012592 <_calloc_r+0x52>
8001258c:	30 0b       	mov	r11,0
8001258e:	fe b0 da 36 	rcall	8000d9fa <memset>
80012592:	0e 9c       	mov	r12,r7
80012594:	d8 22       	popm	r4-r7,pc
80012596:	d7 03       	nop

80012598 <_close_r>:
80012598:	d4 21       	pushm	r4-r7,lr
8001259a:	30 08       	mov	r8,0
8001259c:	18 97       	mov	r7,r12
8001259e:	e0 66 12 54 	mov	r6,4692
800125a2:	16 9c       	mov	r12,r11
800125a4:	8d 08       	st.w	r6[0x0],r8
800125a6:	cf be       	rcall	8001239c <_close>
800125a8:	5b fc       	cp.w	r12,-1
800125aa:	c0 51       	brne	800125b4 <_close_r+0x1c>
800125ac:	6c 08       	ld.w	r8,r6[0x0]
800125ae:	58 08       	cp.w	r8,0
800125b0:	ef f8 1a 03 	st.wne	r7[0xc],r8
800125b4:	d8 22       	popm	r4-r7,pc
800125b6:	d7 03       	nop

800125b8 <__errno>:
800125b8:	e0 68 01 c8 	mov	r8,456
800125bc:	70 0c       	ld.w	r12,r8[0x0]
800125be:	2f 4c       	sub	r12,-12
800125c0:	5e fc       	retal	r12
800125c2:	d7 03       	nop

800125c4 <_fclose_r>:
800125c4:	d4 21       	pushm	r4-r7,lr
800125c6:	18 96       	mov	r6,r12
800125c8:	16 97       	mov	r7,r11
800125ca:	58 0b       	cp.w	r11,0
800125cc:	c0 31       	brne	800125d2 <_fclose_r+0xe>
800125ce:	16 95       	mov	r5,r11
800125d0:	c5 38       	rjmp	80012676 <_fclose_r+0xb2>
800125d2:	fe b0 f4 1b 	rcall	80010e08 <__sfp_lock_acquire>
800125d6:	58 06       	cp.w	r6,0
800125d8:	c0 70       	breq	800125e6 <_fclose_r+0x22>
800125da:	6c 68       	ld.w	r8,r6[0x18]
800125dc:	58 08       	cp.w	r8,0
800125de:	c0 41       	brne	800125e6 <_fclose_r+0x22>
800125e0:	0c 9c       	mov	r12,r6
800125e2:	fe b0 f4 65 	rcall	80010eac <__sinit>
800125e6:	fe c8 ea 62 	sub	r8,pc,-5534
800125ea:	10 37       	cp.w	r7,r8
800125ec:	c0 31       	brne	800125f2 <_fclose_r+0x2e>
800125ee:	6c 07       	ld.w	r7,r6[0x0]
800125f0:	c0 c8       	rjmp	80012608 <_fclose_r+0x44>
800125f2:	fe c8 ea 4e 	sub	r8,pc,-5554
800125f6:	10 37       	cp.w	r7,r8
800125f8:	c0 31       	brne	800125fe <_fclose_r+0x3a>
800125fa:	6c 17       	ld.w	r7,r6[0x4]
800125fc:	c0 68       	rjmp	80012608 <_fclose_r+0x44>
800125fe:	fe c8 ea 3a 	sub	r8,pc,-5574
80012602:	10 37       	cp.w	r7,r8
80012604:	ed f7 00 02 	ld.weq	r7,r6[0x8]
80012608:	8e 69       	ld.sh	r9,r7[0xc]
8001260a:	30 08       	mov	r8,0
8001260c:	f0 09 19 00 	cp.h	r9,r8
80012610:	c0 51       	brne	8001261a <_fclose_r+0x56>
80012612:	fe b0 f3 fc 	rcall	80010e0a <__sfp_lock_release>
80012616:	30 05       	mov	r5,0
80012618:	c2 f8       	rjmp	80012676 <_fclose_r+0xb2>
8001261a:	0e 9b       	mov	r11,r7
8001261c:	0c 9c       	mov	r12,r6
8001261e:	fe b0 f3 6f 	rcall	80010cfc <_fflush_r>
80012622:	6e c8       	ld.w	r8,r7[0x30]
80012624:	18 95       	mov	r5,r12
80012626:	58 08       	cp.w	r8,0
80012628:	c0 60       	breq	80012634 <_fclose_r+0x70>
8001262a:	6e 8b       	ld.w	r11,r7[0x20]
8001262c:	0c 9c       	mov	r12,r6
8001262e:	5d 18       	icall	r8
80012630:	f9 b5 05 ff 	movlt	r5,-1
80012634:	8e 68       	ld.sh	r8,r7[0xc]
80012636:	ed b8 00 07 	bld	r8,0x7
8001263a:	c0 51       	brne	80012644 <_fclose_r+0x80>
8001263c:	6e 4b       	ld.w	r11,r7[0x10]
8001263e:	0c 9c       	mov	r12,r6
80012640:	fe b0 f4 d0 	rcall	80010fe0 <_free_r>
80012644:	6e db       	ld.w	r11,r7[0x34]
80012646:	58 0b       	cp.w	r11,0
80012648:	c0 a0       	breq	8001265c <_fclose_r+0x98>
8001264a:	ee c8 ff bc 	sub	r8,r7,-68
8001264e:	10 3b       	cp.w	r11,r8
80012650:	c0 40       	breq	80012658 <_fclose_r+0x94>
80012652:	0c 9c       	mov	r12,r6
80012654:	fe b0 f4 c6 	rcall	80010fe0 <_free_r>
80012658:	30 08       	mov	r8,0
8001265a:	8f d8       	st.w	r7[0x34],r8
8001265c:	6f 2b       	ld.w	r11,r7[0x48]
8001265e:	58 0b       	cp.w	r11,0
80012660:	c0 70       	breq	8001266e <_fclose_r+0xaa>
80012662:	0c 9c       	mov	r12,r6
80012664:	fe b0 f4 be 	rcall	80010fe0 <_free_r>
80012668:	30 08       	mov	r8,0
8001266a:	ef 48 00 48 	st.w	r7[72],r8
8001266e:	30 08       	mov	r8,0
80012670:	ae 68       	st.h	r7[0xc],r8
80012672:	fe b0 f3 cc 	rcall	80010e0a <__sfp_lock_release>
80012676:	0a 9c       	mov	r12,r5
80012678:	d8 22       	popm	r4-r7,pc
8001267a:	d7 03       	nop

8001267c <fclose>:
8001267c:	d4 01       	pushm	lr
8001267e:	e0 68 01 c8 	mov	r8,456
80012682:	18 9b       	mov	r11,r12
80012684:	70 0c       	ld.w	r12,r8[0x0]
80012686:	c9 ff       	rcall	800125c4 <_fclose_r>
80012688:	d8 02       	popm	pc
8001268a:	d7 03       	nop

8001268c <_fstat_r>:
8001268c:	d4 21       	pushm	r4-r7,lr
8001268e:	16 98       	mov	r8,r11
80012690:	18 97       	mov	r7,r12
80012692:	10 9c       	mov	r12,r8
80012694:	30 08       	mov	r8,0
80012696:	e0 66 12 54 	mov	r6,4692
8001269a:	14 9b       	mov	r11,r10
8001269c:	8d 08       	st.w	r6[0x0],r8
8001269e:	ca 7e       	rcall	800123ec <_fstat>
800126a0:	5b fc       	cp.w	r12,-1
800126a2:	c0 51       	brne	800126ac <_fstat_r+0x20>
800126a4:	6c 08       	ld.w	r8,r6[0x0]
800126a6:	58 08       	cp.w	r8,0
800126a8:	ef f8 1a 03 	st.wne	r7[0xc],r8
800126ac:	d8 22       	popm	r4-r7,pc
800126ae:	d7 03       	nop

800126b0 <_lseek_r>:
800126b0:	d4 21       	pushm	r4-r7,lr
800126b2:	16 98       	mov	r8,r11
800126b4:	18 97       	mov	r7,r12
800126b6:	10 9c       	mov	r12,r8
800126b8:	30 08       	mov	r8,0
800126ba:	14 9b       	mov	r11,r10
800126bc:	e0 66 12 54 	mov	r6,4692
800126c0:	12 9a       	mov	r10,r9
800126c2:	8d 08       	st.w	r6[0x0],r8
800126c4:	c7 6e       	rcall	800123b0 <_lseek>
800126c6:	5b fc       	cp.w	r12,-1
800126c8:	c0 51       	brne	800126d2 <_lseek_r+0x22>
800126ca:	6c 08       	ld.w	r8,r6[0x0]
800126cc:	58 08       	cp.w	r8,0
800126ce:	ef f8 1a 03 	st.wne	r7[0xc],r8
800126d2:	d8 22       	popm	r4-r7,pc

800126d4 <_read_r>:
800126d4:	d4 21       	pushm	r4-r7,lr
800126d6:	16 98       	mov	r8,r11
800126d8:	18 97       	mov	r7,r12
800126da:	10 9c       	mov	r12,r8
800126dc:	30 08       	mov	r8,0
800126de:	14 9b       	mov	r11,r10
800126e0:	e0 66 12 54 	mov	r6,4692
800126e4:	12 9a       	mov	r10,r9
800126e6:	8d 08       	st.w	r6[0x0],r8
800126e8:	fe b0 d0 ae 	rcall	8000c844 <_read>
800126ec:	5b fc       	cp.w	r12,-1
800126ee:	c0 51       	brne	800126f8 <_read_r+0x24>
800126f0:	6c 08       	ld.w	r8,r6[0x0]
800126f2:	58 08       	cp.w	r8,0
800126f4:	ef f8 1a 03 	st.wne	r7[0xc],r8
800126f8:	d8 22       	popm	r4-r7,pc
800126fa:	d7 03       	nop

800126fc <__avr32_f64_mul>:
800126fc:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
80012700:	e0 80 00 dc 	breq	800128b8 <__avr32_f64_mul_op1_zero>
80012704:	d4 21       	pushm	r4-r7,lr
80012706:	f7 e9 20 0e 	eor	lr,r11,r9
8001270a:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8001270e:	30 15       	mov	r5,1
80012710:	c4 30       	breq	80012796 <__avr32_f64_mul_op1_subnormal>
80012712:	ab 6b       	lsl	r11,0xa
80012714:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80012718:	ab 6a       	lsl	r10,0xa
8001271a:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8001271e:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80012722:	c5 c0       	breq	800127da <__avr32_f64_mul_op2_subnormal>
80012724:	a1 78       	lsl	r8,0x1
80012726:	5c f9       	rol	r9
80012728:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
8001272c:	e0 47 07 ff 	cp.w	r7,2047
80012730:	c7 70       	breq	8001281e <__avr32_f64_mul_op_nan_or_inf>
80012732:	e0 46 07 ff 	cp.w	r6,2047
80012736:	c7 40       	breq	8001281e <__avr32_f64_mul_op_nan_or_inf>
80012738:	ee 06 00 0c 	add	r12,r7,r6
8001273c:	e0 2c 03 fe 	sub	r12,1022
80012740:	f6 08 06 44 	mulu.d	r4,r11,r8
80012744:	f4 09 07 44 	macu.d	r4,r10,r9
80012748:	f4 08 06 46 	mulu.d	r6,r10,r8
8001274c:	f6 09 06 4a 	mulu.d	r10,r11,r9
80012750:	08 07       	add	r7,r4
80012752:	f4 05 00 4a 	adc	r10,r10,r5
80012756:	5c 0b       	acr	r11
80012758:	ed bb 00 14 	bld	r11,0x14
8001275c:	c0 50       	breq	80012766 <__avr32_f64_mul+0x6a>
8001275e:	a1 77       	lsl	r7,0x1
80012760:	5c fa       	rol	r10
80012762:	5c fb       	rol	r11
80012764:	20 1c       	sub	r12,1
80012766:	58 0c       	cp.w	r12,0
80012768:	e0 8a 00 6f 	brle	80012846 <__avr32_f64_mul_res_subnormal>
8001276c:	e0 4c 07 ff 	cp.w	r12,2047
80012770:	e0 84 00 9c 	brge	800128a8 <__avr32_f64_mul_res_inf>
80012774:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80012778:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
8001277c:	ef e6 12 17 	or	r7,r7,r6>>0x1
80012780:	ee 17 80 00 	eorh	r7,0x8000
80012784:	f1 b7 04 20 	satu	r7,0x1
80012788:	0e 0a       	add	r10,r7
8001278a:	5c 0b       	acr	r11
8001278c:	ed be 00 1f 	bld	lr,0x1f
80012790:	ef bb 00 1f 	bst	r11,0x1f
80012794:	d8 22       	popm	r4-r7,pc

80012796 <__avr32_f64_mul_op1_subnormal>:
80012796:	e4 1b 00 0f 	andh	r11,0xf
8001279a:	f4 0c 12 00 	clz	r12,r10
8001279e:	f6 06 12 00 	clz	r6,r11
800127a2:	f7 bc 03 e1 	sublo	r12,-31
800127a6:	f8 06 17 30 	movlo	r6,r12
800127aa:	f7 b6 02 01 	subhs	r6,1
800127ae:	e0 46 00 20 	cp.w	r6,32
800127b2:	c0 d4       	brge	800127cc <__avr32_f64_mul_op1_subnormal+0x36>
800127b4:	ec 0c 11 20 	rsub	r12,r6,32
800127b8:	f6 06 09 4b 	lsl	r11,r11,r6
800127bc:	f4 0c 0a 4c 	lsr	r12,r10,r12
800127c0:	18 4b       	or	r11,r12
800127c2:	f4 06 09 4a 	lsl	r10,r10,r6
800127c6:	20 b6       	sub	r6,11
800127c8:	0c 17       	sub	r7,r6
800127ca:	ca ab       	rjmp	8001271e <__avr32_f64_mul+0x22>
800127cc:	f4 06 09 4b 	lsl	r11,r10,r6
800127d0:	c6 40       	breq	80012898 <__avr32_f64_mul_res_zero>
800127d2:	30 0a       	mov	r10,0
800127d4:	20 b6       	sub	r6,11
800127d6:	0c 17       	sub	r7,r6
800127d8:	ca 3b       	rjmp	8001271e <__avr32_f64_mul+0x22>

800127da <__avr32_f64_mul_op2_subnormal>:
800127da:	e4 19 00 0f 	andh	r9,0xf
800127de:	f0 0c 12 00 	clz	r12,r8
800127e2:	f2 05 12 00 	clz	r5,r9
800127e6:	f7 bc 03 ea 	sublo	r12,-22
800127ea:	f8 05 17 30 	movlo	r5,r12
800127ee:	f7 b5 02 0a 	subhs	r5,10
800127f2:	e0 45 00 20 	cp.w	r5,32
800127f6:	c0 d4       	brge	80012810 <__avr32_f64_mul_op2_subnormal+0x36>
800127f8:	ea 0c 11 20 	rsub	r12,r5,32
800127fc:	f2 05 09 49 	lsl	r9,r9,r5
80012800:	f0 0c 0a 4c 	lsr	r12,r8,r12
80012804:	18 49       	or	r9,r12
80012806:	f0 05 09 48 	lsl	r8,r8,r5
8001280a:	20 25       	sub	r5,2
8001280c:	0a 16       	sub	r6,r5
8001280e:	c8 fb       	rjmp	8001272c <__avr32_f64_mul+0x30>
80012810:	f0 05 09 49 	lsl	r9,r8,r5
80012814:	c4 20       	breq	80012898 <__avr32_f64_mul_res_zero>
80012816:	30 08       	mov	r8,0
80012818:	20 25       	sub	r5,2
8001281a:	0a 16       	sub	r6,r5
8001281c:	c8 8b       	rjmp	8001272c <__avr32_f64_mul+0x30>

8001281e <__avr32_f64_mul_op_nan_or_inf>:
8001281e:	e4 19 00 0f 	andh	r9,0xf
80012822:	e4 1b 00 0f 	andh	r11,0xf
80012826:	14 4b       	or	r11,r10
80012828:	10 49       	or	r9,r8
8001282a:	e0 47 07 ff 	cp.w	r7,2047
8001282e:	c0 91       	brne	80012840 <__avr32_f64_mul_op1_not_naninf>
80012830:	58 0b       	cp.w	r11,0
80012832:	c3 81       	brne	800128a2 <__avr32_f64_mul_res_nan>
80012834:	e0 46 07 ff 	cp.w	r6,2047
80012838:	c3 81       	brne	800128a8 <__avr32_f64_mul_res_inf>
8001283a:	58 09       	cp.w	r9,0
8001283c:	c3 60       	breq	800128a8 <__avr32_f64_mul_res_inf>
8001283e:	c3 28       	rjmp	800128a2 <__avr32_f64_mul_res_nan>

80012840 <__avr32_f64_mul_op1_not_naninf>:
80012840:	58 09       	cp.w	r9,0
80012842:	c3 30       	breq	800128a8 <__avr32_f64_mul_res_inf>
80012844:	c2 f8       	rjmp	800128a2 <__avr32_f64_mul_res_nan>

80012846 <__avr32_f64_mul_res_subnormal>:
80012846:	5c 3c       	neg	r12
80012848:	2f fc       	sub	r12,-1
8001284a:	f1 bc 04 c0 	satu	r12,0x6
8001284e:	e0 4c 00 20 	cp.w	r12,32
80012852:	c1 14       	brge	80012874 <__avr32_f64_mul_res_subnormal+0x2e>
80012854:	f8 08 11 20 	rsub	r8,r12,32
80012858:	0e 46       	or	r6,r7
8001285a:	ee 0c 0a 47 	lsr	r7,r7,r12
8001285e:	f4 08 09 49 	lsl	r9,r10,r8
80012862:	12 47       	or	r7,r9
80012864:	f4 0c 0a 4a 	lsr	r10,r10,r12
80012868:	f6 08 09 49 	lsl	r9,r11,r8
8001286c:	12 4a       	or	r10,r9
8001286e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80012872:	c8 3b       	rjmp	80012778 <__avr32_f64_mul+0x7c>
80012874:	f8 08 11 20 	rsub	r8,r12,32
80012878:	f9 b9 00 00 	moveq	r9,0
8001287c:	c0 30       	breq	80012882 <__avr32_f64_mul_res_subnormal+0x3c>
8001287e:	f6 08 09 49 	lsl	r9,r11,r8
80012882:	0e 46       	or	r6,r7
80012884:	ed ea 10 16 	or	r6,r6,r10<<0x1
80012888:	f4 0c 0a 4a 	lsr	r10,r10,r12
8001288c:	f3 ea 10 07 	or	r7,r9,r10
80012890:	f6 0c 0a 4a 	lsr	r10,r11,r12
80012894:	30 0b       	mov	r11,0
80012896:	c7 1b       	rjmp	80012778 <__avr32_f64_mul+0x7c>

80012898 <__avr32_f64_mul_res_zero>:
80012898:	1c 9b       	mov	r11,lr
8001289a:	e6 1b 80 00 	andh	r11,0x8000,COH
8001289e:	30 0a       	mov	r10,0
800128a0:	d8 22       	popm	r4-r7,pc

800128a2 <__avr32_f64_mul_res_nan>:
800128a2:	3f fb       	mov	r11,-1
800128a4:	3f fa       	mov	r10,-1
800128a6:	d8 22       	popm	r4-r7,pc

800128a8 <__avr32_f64_mul_res_inf>:
800128a8:	f0 6b 00 00 	mov	r11,-1048576
800128ac:	ed be 00 1f 	bld	lr,0x1f
800128b0:	ef bb 00 1f 	bst	r11,0x1f
800128b4:	30 0a       	mov	r10,0
800128b6:	d8 22       	popm	r4-r7,pc

800128b8 <__avr32_f64_mul_op1_zero>:
800128b8:	f7 e9 20 0b 	eor	r11,r11,r9
800128bc:	e6 1b 80 00 	andh	r11,0x8000,COH
800128c0:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800128c4:	e0 4c 07 ff 	cp.w	r12,2047
800128c8:	5e 1c       	retne	r12
800128ca:	3f fa       	mov	r10,-1
800128cc:	3f fb       	mov	r11,-1
800128ce:	5e fc       	retal	r12

800128d0 <__avr32_f64_sub_from_add>:
800128d0:	ee 19 80 00 	eorh	r9,0x8000

800128d4 <__avr32_f64_sub>:
800128d4:	f7 e9 20 0c 	eor	r12,r11,r9
800128d8:	e0 86 00 ca 	brmi	80012a6c <__avr32_f64_add_from_sub>
800128dc:	eb cd 40 e0 	pushm	r5-r7,lr
800128e0:	16 9c       	mov	r12,r11
800128e2:	e6 1c 80 00 	andh	r12,0x8000,COH
800128e6:	bf db       	cbr	r11,0x1f
800128e8:	bf d9       	cbr	r9,0x1f
800128ea:	10 3a       	cp.w	r10,r8
800128ec:	f2 0b 13 00 	cpc	r11,r9
800128f0:	c0 92       	brcc	80012902 <__avr32_f64_sub+0x2e>
800128f2:	16 97       	mov	r7,r11
800128f4:	12 9b       	mov	r11,r9
800128f6:	0e 99       	mov	r9,r7
800128f8:	14 97       	mov	r7,r10
800128fa:	10 9a       	mov	r10,r8
800128fc:	0e 98       	mov	r8,r7
800128fe:	ee 1c 80 00 	eorh	r12,0x8000
80012902:	f6 07 16 14 	lsr	r7,r11,0x14
80012906:	ab 7b       	lsl	r11,0xb
80012908:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
8001290c:	ab 7a       	lsl	r10,0xb
8001290e:	bf bb       	sbr	r11,0x1f
80012910:	f2 06 16 14 	lsr	r6,r9,0x14
80012914:	c4 40       	breq	8001299c <__avr32_f64_sub_opL_subnormal>
80012916:	ab 79       	lsl	r9,0xb
80012918:	f3 e8 13 59 	or	r9,r9,r8>>0x15
8001291c:	ab 78       	lsl	r8,0xb
8001291e:	bf b9       	sbr	r9,0x1f

80012920 <__avr32_f64_sub_opL_subnormal_done>:
80012920:	e0 47 07 ff 	cp.w	r7,2047
80012924:	c4 f0       	breq	800129c2 <__avr32_f64_sub_opH_nan_or_inf>
80012926:	0e 26       	rsub	r6,r7
80012928:	c1 20       	breq	8001294c <__avr32_f64_sub_shift_done>
8001292a:	ec 05 11 20 	rsub	r5,r6,32
8001292e:	e0 46 00 20 	cp.w	r6,32
80012932:	c7 c2       	brcc	80012a2a <__avr32_f64_sub_longshift>
80012934:	f0 05 09 4e 	lsl	lr,r8,r5
80012938:	f2 05 09 45 	lsl	r5,r9,r5
8001293c:	f0 06 0a 48 	lsr	r8,r8,r6
80012940:	f2 06 0a 49 	lsr	r9,r9,r6
80012944:	0a 48       	or	r8,r5
80012946:	58 0e       	cp.w	lr,0
80012948:	5f 1e       	srne	lr
8001294a:	1c 48       	or	r8,lr

8001294c <__avr32_f64_sub_shift_done>:
8001294c:	10 1a       	sub	r10,r8
8001294e:	f6 09 01 4b 	sbc	r11,r11,r9
80012952:	f6 06 12 00 	clz	r6,r11
80012956:	c0 e0       	breq	80012972 <__avr32_f64_sub_longnormalize_done>
80012958:	c7 83       	brcs	80012a48 <__avr32_f64_sub_longnormalize>
8001295a:	ec 0e 11 20 	rsub	lr,r6,32
8001295e:	f6 06 09 4b 	lsl	r11,r11,r6
80012962:	f4 0e 0a 4e 	lsr	lr,r10,lr
80012966:	1c 4b       	or	r11,lr
80012968:	f4 06 09 4a 	lsl	r10,r10,r6
8001296c:	0c 17       	sub	r7,r6
8001296e:	e0 8a 00 39 	brle	800129e0 <__avr32_f64_sub_subnormal_result>

80012972 <__avr32_f64_sub_longnormalize_done>:
80012972:	f4 09 15 15 	lsl	r9,r10,0x15
80012976:	ab 9a       	lsr	r10,0xb
80012978:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
8001297c:	ab 9b       	lsr	r11,0xb
8001297e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80012982:	18 4b       	or	r11,r12

80012984 <__avr32_f64_sub_round>:
80012984:	fc 17 80 00 	movh	r7,0x8000
80012988:	ed ba 00 00 	bld	r10,0x0
8001298c:	f7 b7 01 ff 	subne	r7,-1
80012990:	0e 39       	cp.w	r9,r7
80012992:	5f 29       	srhs	r9
80012994:	12 0a       	add	r10,r9
80012996:	5c 0b       	acr	r11
80012998:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8001299c <__avr32_f64_sub_opL_subnormal>:
8001299c:	ab 79       	lsl	r9,0xb
8001299e:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800129a2:	ab 78       	lsl	r8,0xb
800129a4:	f3 e8 10 0e 	or	lr,r9,r8
800129a8:	f9 b6 01 01 	movne	r6,1
800129ac:	ee 0e 11 00 	rsub	lr,r7,0
800129b0:	f9 b7 00 01 	moveq	r7,1
800129b4:	ef bb 00 1f 	bst	r11,0x1f
800129b8:	f7 ea 10 0e 	or	lr,r11,r10
800129bc:	f9 b7 00 00 	moveq	r7,0
800129c0:	cb 0b       	rjmp	80012920 <__avr32_f64_sub_opL_subnormal_done>

800129c2 <__avr32_f64_sub_opH_nan_or_inf>:
800129c2:	bf db       	cbr	r11,0x1f
800129c4:	f7 ea 10 0e 	or	lr,r11,r10
800129c8:	c0 81       	brne	800129d8 <__avr32_f64_sub_return_nan>
800129ca:	e0 46 07 ff 	cp.w	r6,2047
800129ce:	c0 50       	breq	800129d8 <__avr32_f64_sub_return_nan>
800129d0:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800129d4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800129d8 <__avr32_f64_sub_return_nan>:
800129d8:	3f fa       	mov	r10,-1
800129da:	3f fb       	mov	r11,-1
800129dc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800129e0 <__avr32_f64_sub_subnormal_result>:
800129e0:	5c 37       	neg	r7
800129e2:	2f f7       	sub	r7,-1
800129e4:	f1 b7 04 c0 	satu	r7,0x6
800129e8:	e0 47 00 20 	cp.w	r7,32
800129ec:	c1 14       	brge	80012a0e <__avr32_f64_sub_subnormal_result+0x2e>
800129ee:	ee 08 11 20 	rsub	r8,r7,32
800129f2:	f4 08 09 49 	lsl	r9,r10,r8
800129f6:	5f 16       	srne	r6
800129f8:	f4 07 0a 4a 	lsr	r10,r10,r7
800129fc:	0c 4a       	or	r10,r6
800129fe:	f6 08 09 49 	lsl	r9,r11,r8
80012a02:	f5 e9 10 0a 	or	r10,r10,r9
80012a06:	f4 07 0a 4b 	lsr	r11,r10,r7
80012a0a:	30 07       	mov	r7,0
80012a0c:	cb 3b       	rjmp	80012972 <__avr32_f64_sub_longnormalize_done>
80012a0e:	ee 08 11 40 	rsub	r8,r7,64
80012a12:	f6 08 09 49 	lsl	r9,r11,r8
80012a16:	14 49       	or	r9,r10
80012a18:	5f 16       	srne	r6
80012a1a:	f6 07 0a 4a 	lsr	r10,r11,r7
80012a1e:	0c 4a       	or	r10,r6
80012a20:	30 0b       	mov	r11,0
80012a22:	30 07       	mov	r7,0
80012a24:	ca 7b       	rjmp	80012972 <__avr32_f64_sub_longnormalize_done>
80012a26:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80012a2a <__avr32_f64_sub_longshift>:
80012a2a:	f1 b6 04 c0 	satu	r6,0x6
80012a2e:	f0 0e 17 00 	moveq	lr,r8
80012a32:	c0 40       	breq	80012a3a <__avr32_f64_sub_longshift+0x10>
80012a34:	f2 05 09 4e 	lsl	lr,r9,r5
80012a38:	10 4e       	or	lr,r8
80012a3a:	f2 06 0a 48 	lsr	r8,r9,r6
80012a3e:	30 09       	mov	r9,0
80012a40:	58 0e       	cp.w	lr,0
80012a42:	5f 1e       	srne	lr
80012a44:	1c 48       	or	r8,lr
80012a46:	c8 3b       	rjmp	8001294c <__avr32_f64_sub_shift_done>

80012a48 <__avr32_f64_sub_longnormalize>:
80012a48:	f4 06 12 00 	clz	r6,r10
80012a4c:	f9 b7 03 00 	movlo	r7,0
80012a50:	f9 b6 03 00 	movlo	r6,0
80012a54:	f9 bc 03 00 	movlo	r12,0
80012a58:	f7 b6 02 e0 	subhs	r6,-32
80012a5c:	f4 06 09 4b 	lsl	r11,r10,r6
80012a60:	30 0a       	mov	r10,0
80012a62:	0c 17       	sub	r7,r6
80012a64:	fe 9a ff be 	brle	800129e0 <__avr32_f64_sub_subnormal_result>
80012a68:	c8 5b       	rjmp	80012972 <__avr32_f64_sub_longnormalize_done>
80012a6a:	d7 03       	nop

80012a6c <__avr32_f64_add_from_sub>:
80012a6c:	ee 19 80 00 	eorh	r9,0x8000

80012a70 <__avr32_f64_add>:
80012a70:	f7 e9 20 0c 	eor	r12,r11,r9
80012a74:	fe 96 ff 2e 	brmi	800128d0 <__avr32_f64_sub_from_add>
80012a78:	eb cd 40 e0 	pushm	r5-r7,lr
80012a7c:	16 9c       	mov	r12,r11
80012a7e:	e6 1c 80 00 	andh	r12,0x8000,COH
80012a82:	bf db       	cbr	r11,0x1f
80012a84:	bf d9       	cbr	r9,0x1f
80012a86:	12 3b       	cp.w	r11,r9
80012a88:	c0 72       	brcc	80012a96 <__avr32_f64_add+0x26>
80012a8a:	16 97       	mov	r7,r11
80012a8c:	12 9b       	mov	r11,r9
80012a8e:	0e 99       	mov	r9,r7
80012a90:	14 97       	mov	r7,r10
80012a92:	10 9a       	mov	r10,r8
80012a94:	0e 98       	mov	r8,r7
80012a96:	30 0e       	mov	lr,0
80012a98:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
80012a9c:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
80012aa0:	b5 ab       	sbr	r11,0x14
80012aa2:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
80012aa6:	c6 20       	breq	80012b6a <__avr32_f64_add_op2_subnormal>
80012aa8:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
80012aac:	b5 a9       	sbr	r9,0x14
80012aae:	e0 47 07 ff 	cp.w	r7,2047
80012ab2:	c2 80       	breq	80012b02 <__avr32_f64_add_opH_nan_or_inf>
80012ab4:	0e 26       	rsub	r6,r7
80012ab6:	c1 20       	breq	80012ada <__avr32_f64_add_shift_done>
80012ab8:	e0 46 00 36 	cp.w	r6,54
80012abc:	c1 52       	brcc	80012ae6 <__avr32_f64_add_res_of_done>
80012abe:	ec 05 11 20 	rsub	r5,r6,32
80012ac2:	e0 46 00 20 	cp.w	r6,32
80012ac6:	c3 52       	brcc	80012b30 <__avr32_f64_add_longshift>
80012ac8:	f0 05 09 4e 	lsl	lr,r8,r5
80012acc:	f2 05 09 45 	lsl	r5,r9,r5
80012ad0:	f0 06 0a 48 	lsr	r8,r8,r6
80012ad4:	f2 06 0a 49 	lsr	r9,r9,r6
80012ad8:	0a 48       	or	r8,r5

80012ada <__avr32_f64_add_shift_done>:
80012ada:	10 0a       	add	r10,r8
80012adc:	f6 09 00 4b 	adc	r11,r11,r9
80012ae0:	ed bb 00 15 	bld	r11,0x15
80012ae4:	c3 40       	breq	80012b4c <__avr32_f64_add_res_of>

80012ae6 <__avr32_f64_add_res_of_done>:
80012ae6:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80012aea:	18 4b       	or	r11,r12

80012aec <__avr32_f64_add_round>:
80012aec:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
80012af0:	18 4e       	or	lr,r12
80012af2:	ee 1e 80 00 	eorh	lr,0x8000
80012af6:	f1 be 04 20 	satu	lr,0x1
80012afa:	1c 0a       	add	r10,lr
80012afc:	5c 0b       	acr	r11
80012afe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80012b02 <__avr32_f64_add_opH_nan_or_inf>:
80012b02:	b5 cb       	cbr	r11,0x14
80012b04:	f7 ea 10 0e 	or	lr,r11,r10
80012b08:	c1 01       	brne	80012b28 <__avr32_f64_add_return_nan>
80012b0a:	e0 46 07 ff 	cp.w	r6,2047
80012b0e:	c0 30       	breq	80012b14 <__avr32_f64_add_opL_nan_or_inf>
80012b10:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80012b14 <__avr32_f64_add_opL_nan_or_inf>:
80012b14:	b5 c9       	cbr	r9,0x14
80012b16:	f3 e8 10 0e 	or	lr,r9,r8
80012b1a:	c0 71       	brne	80012b28 <__avr32_f64_add_return_nan>
80012b1c:	30 0a       	mov	r10,0
80012b1e:	fc 1b 7f f0 	movh	r11,0x7ff0
80012b22:	18 4b       	or	r11,r12
80012b24:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80012b28 <__avr32_f64_add_return_nan>:
80012b28:	3f fa       	mov	r10,-1
80012b2a:	3f fb       	mov	r11,-1
80012b2c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80012b30 <__avr32_f64_add_longshift>:
80012b30:	f1 b6 04 c0 	satu	r6,0x6
80012b34:	f0 0e 17 00 	moveq	lr,r8
80012b38:	c0 60       	breq	80012b44 <__avr32_f64_add_longshift+0x14>
80012b3a:	f2 05 09 4e 	lsl	lr,r9,r5
80012b3e:	58 08       	cp.w	r8,0
80012b40:	5f 18       	srne	r8
80012b42:	10 4e       	or	lr,r8
80012b44:	f2 06 0a 48 	lsr	r8,r9,r6
80012b48:	30 09       	mov	r9,0
80012b4a:	cc 8b       	rjmp	80012ada <__avr32_f64_add_shift_done>

80012b4c <__avr32_f64_add_res_of>:
80012b4c:	fd ee 10 1e 	or	lr,lr,lr<<0x1
80012b50:	a1 9b       	lsr	r11,0x1
80012b52:	5d 0a       	ror	r10
80012b54:	5d 0e       	ror	lr
80012b56:	2f f7       	sub	r7,-1
80012b58:	e0 47 07 ff 	cp.w	r7,2047
80012b5c:	f9 ba 00 00 	moveq	r10,0
80012b60:	f9 bb 00 00 	moveq	r11,0
80012b64:	f9 be 00 00 	moveq	lr,0
80012b68:	cb fb       	rjmp	80012ae6 <__avr32_f64_add_res_of_done>

80012b6a <__avr32_f64_add_op2_subnormal>:
80012b6a:	30 16       	mov	r6,1
80012b6c:	58 07       	cp.w	r7,0
80012b6e:	ca 01       	brne	80012aae <__avr32_f64_add+0x3e>
80012b70:	b5 cb       	cbr	r11,0x14
80012b72:	10 0a       	add	r10,r8
80012b74:	f6 09 00 4b 	adc	r11,r11,r9
80012b78:	18 4b       	or	r11,r12
80012b7a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80012b7e:	d7 03       	nop

80012b80 <__avr32_f64_to_u32>:
80012b80:	58 0b       	cp.w	r11,0
80012b82:	5e 6d       	retmi	0

80012b84 <__avr32_f64_to_s32>:
80012b84:	f6 0c 15 01 	lsl	r12,r11,0x1
80012b88:	b5 9c       	lsr	r12,0x15
80012b8a:	e0 2c 03 ff 	sub	r12,1023
80012b8e:	5e 3d       	retlo	0
80012b90:	f8 0c 11 1f 	rsub	r12,r12,31
80012b94:	16 99       	mov	r9,r11
80012b96:	ab 7b       	lsl	r11,0xb
80012b98:	bf bb       	sbr	r11,0x1f
80012b9a:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80012b9e:	f6 0c 0a 4b 	lsr	r11,r11,r12
80012ba2:	a1 79       	lsl	r9,0x1
80012ba4:	5e 2b       	reths	r11
80012ba6:	5c 3b       	neg	r11
80012ba8:	5e fb       	retal	r11

80012baa <__avr32_u32_to_f64>:
80012baa:	f8 cb 00 00 	sub	r11,r12,0
80012bae:	30 0c       	mov	r12,0
80012bb0:	c0 38       	rjmp	80012bb6 <__avr32_s32_to_f64+0x4>

80012bb2 <__avr32_s32_to_f64>:
80012bb2:	18 9b       	mov	r11,r12
80012bb4:	5c 4b       	abs	r11
80012bb6:	30 0a       	mov	r10,0
80012bb8:	5e 0b       	reteq	r11
80012bba:	d4 01       	pushm	lr
80012bbc:	e0 69 04 1e 	mov	r9,1054
80012bc0:	f6 08 12 00 	clz	r8,r11
80012bc4:	c1 70       	breq	80012bf2 <__avr32_s32_to_f64+0x40>
80012bc6:	c0 c3       	brcs	80012bde <__avr32_s32_to_f64+0x2c>
80012bc8:	f0 0e 11 20 	rsub	lr,r8,32
80012bcc:	f6 08 09 4b 	lsl	r11,r11,r8
80012bd0:	f4 0e 0a 4e 	lsr	lr,r10,lr
80012bd4:	1c 4b       	or	r11,lr
80012bd6:	f4 08 09 4a 	lsl	r10,r10,r8
80012bda:	10 19       	sub	r9,r8
80012bdc:	c0 b8       	rjmp	80012bf2 <__avr32_s32_to_f64+0x40>
80012bde:	f4 08 12 00 	clz	r8,r10
80012be2:	f9 b8 03 00 	movlo	r8,0
80012be6:	f7 b8 02 e0 	subhs	r8,-32
80012bea:	f4 08 09 4b 	lsl	r11,r10,r8
80012bee:	30 0a       	mov	r10,0
80012bf0:	10 19       	sub	r9,r8
80012bf2:	58 09       	cp.w	r9,0
80012bf4:	e0 89 00 30 	brgt	80012c54 <__avr32_s32_to_f64+0xa2>
80012bf8:	5c 39       	neg	r9
80012bfa:	2f f9       	sub	r9,-1
80012bfc:	e0 49 00 36 	cp.w	r9,54
80012c00:	c0 43       	brcs	80012c08 <__avr32_s32_to_f64+0x56>
80012c02:	30 0b       	mov	r11,0
80012c04:	30 0a       	mov	r10,0
80012c06:	c2 68       	rjmp	80012c52 <__avr32_s32_to_f64+0xa0>
80012c08:	2f 69       	sub	r9,-10
80012c0a:	f2 08 11 20 	rsub	r8,r9,32
80012c0e:	e0 49 00 20 	cp.w	r9,32
80012c12:	c0 b2       	brcc	80012c28 <__avr32_s32_to_f64+0x76>
80012c14:	f4 08 09 4e 	lsl	lr,r10,r8
80012c18:	f6 08 09 48 	lsl	r8,r11,r8
80012c1c:	f4 09 0a 4a 	lsr	r10,r10,r9
80012c20:	f6 09 0a 4b 	lsr	r11,r11,r9
80012c24:	10 4b       	or	r11,r8
80012c26:	c0 88       	rjmp	80012c36 <__avr32_s32_to_f64+0x84>
80012c28:	f6 08 09 4e 	lsl	lr,r11,r8
80012c2c:	14 4e       	or	lr,r10
80012c2e:	16 9a       	mov	r10,r11
80012c30:	30 0b       	mov	r11,0
80012c32:	f4 09 0a 4a 	lsr	r10,r10,r9
80012c36:	ed ba 00 00 	bld	r10,0x0
80012c3a:	c0 92       	brcc	80012c4c <__avr32_s32_to_f64+0x9a>
80012c3c:	1c 7e       	tst	lr,lr
80012c3e:	c0 41       	brne	80012c46 <__avr32_s32_to_f64+0x94>
80012c40:	ed ba 00 01 	bld	r10,0x1
80012c44:	c0 42       	brcc	80012c4c <__avr32_s32_to_f64+0x9a>
80012c46:	2f fa       	sub	r10,-1
80012c48:	f7 bb 02 ff 	subhs	r11,-1
80012c4c:	5c fc       	rol	r12
80012c4e:	5d 0b       	ror	r11
80012c50:	5d 0a       	ror	r10
80012c52:	d8 02       	popm	pc
80012c54:	e0 68 03 ff 	mov	r8,1023
80012c58:	ed ba 00 0b 	bld	r10,0xb
80012c5c:	f7 b8 00 ff 	subeq	r8,-1
80012c60:	10 0a       	add	r10,r8
80012c62:	5c 0b       	acr	r11
80012c64:	f7 b9 03 fe 	sublo	r9,-2
80012c68:	e0 49 07 ff 	cp.w	r9,2047
80012c6c:	c0 55       	brlt	80012c76 <__avr32_s32_to_f64+0xc4>
80012c6e:	30 0a       	mov	r10,0
80012c70:	fc 1b ff e0 	movh	r11,0xffe0
80012c74:	c0 c8       	rjmp	80012c8c <__floatsidf_return_op1>
80012c76:	ed bb 00 1f 	bld	r11,0x1f
80012c7a:	f7 b9 01 01 	subne	r9,1
80012c7e:	ab 9a       	lsr	r10,0xb
80012c80:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80012c84:	a1 7b       	lsl	r11,0x1
80012c86:	ab 9b       	lsr	r11,0xb
80012c88:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80012c8c <__floatsidf_return_op1>:
80012c8c:	a1 7c       	lsl	r12,0x1
80012c8e:	5d 0b       	ror	r11
80012c90:	d8 02       	popm	pc

80012c92 <__avr32_f64_cmp_eq>:
80012c92:	10 3a       	cp.w	r10,r8
80012c94:	f2 0b 13 00 	cpc	r11,r9
80012c98:	c0 80       	breq	80012ca8 <__avr32_f64_cmp_eq+0x16>
80012c9a:	a1 7b       	lsl	r11,0x1
80012c9c:	a1 79       	lsl	r9,0x1
80012c9e:	14 4b       	or	r11,r10
80012ca0:	12 4b       	or	r11,r9
80012ca2:	10 4b       	or	r11,r8
80012ca4:	5e 0f       	reteq	1
80012ca6:	5e fd       	retal	0
80012ca8:	a1 7b       	lsl	r11,0x1
80012caa:	fc 1c ff e0 	movh	r12,0xffe0
80012cae:	58 0a       	cp.w	r10,0
80012cb0:	f8 0b 13 00 	cpc	r11,r12
80012cb4:	5e 8f       	retls	1
80012cb6:	5e fd       	retal	0

80012cb8 <__avr32_f64_cmp_ge>:
80012cb8:	1a de       	st.w	--sp,lr
80012cba:	1a d7       	st.w	--sp,r7
80012cbc:	a1 7b       	lsl	r11,0x1
80012cbe:	5f 3c       	srlo	r12
80012cc0:	a1 79       	lsl	r9,0x1
80012cc2:	5f 37       	srlo	r7
80012cc4:	5c fc       	rol	r12
80012cc6:	fc 1e ff e0 	movh	lr,0xffe0
80012cca:	58 0a       	cp.w	r10,0
80012ccc:	fc 0b 13 00 	cpc	r11,lr
80012cd0:	e0 8b 00 1d 	brhi	80012d0a <__avr32_f64_cmp_ge+0x52>
80012cd4:	58 08       	cp.w	r8,0
80012cd6:	fc 09 13 00 	cpc	r9,lr
80012cda:	e0 8b 00 18 	brhi	80012d0a <__avr32_f64_cmp_ge+0x52>
80012cde:	58 0b       	cp.w	r11,0
80012ce0:	f5 ba 00 00 	subfeq	r10,0
80012ce4:	c1 50       	breq	80012d0e <__avr32_f64_cmp_ge+0x56>
80012ce6:	1b 07       	ld.w	r7,sp++
80012ce8:	1b 0e       	ld.w	lr,sp++
80012cea:	58 3c       	cp.w	r12,3
80012cec:	c0 a0       	breq	80012d00 <__avr32_f64_cmp_ge+0x48>
80012cee:	58 1c       	cp.w	r12,1
80012cf0:	c0 33       	brcs	80012cf6 <__avr32_f64_cmp_ge+0x3e>
80012cf2:	5e 0f       	reteq	1
80012cf4:	5e 1d       	retne	0
80012cf6:	10 3a       	cp.w	r10,r8
80012cf8:	f2 0b 13 00 	cpc	r11,r9
80012cfc:	5e 2f       	reths	1
80012cfe:	5e 3d       	retlo	0
80012d00:	14 38       	cp.w	r8,r10
80012d02:	f6 09 13 00 	cpc	r9,r11
80012d06:	5e 2f       	reths	1
80012d08:	5e 3d       	retlo	0
80012d0a:	1b 07       	ld.w	r7,sp++
80012d0c:	d8 0a       	popm	pc,r12=0
80012d0e:	58 17       	cp.w	r7,1
80012d10:	5f 0c       	sreq	r12
80012d12:	58 09       	cp.w	r9,0
80012d14:	f5 b8 00 00 	subfeq	r8,0
80012d18:	1b 07       	ld.w	r7,sp++
80012d1a:	1b 0e       	ld.w	lr,sp++
80012d1c:	5e 0f       	reteq	1
80012d1e:	5e fc       	retal	r12

80012d20 <__avr32_f64_cmp_lt>:
80012d20:	1a de       	st.w	--sp,lr
80012d22:	1a d7       	st.w	--sp,r7
80012d24:	a1 7b       	lsl	r11,0x1
80012d26:	5f 3c       	srlo	r12
80012d28:	a1 79       	lsl	r9,0x1
80012d2a:	5f 37       	srlo	r7
80012d2c:	5c fc       	rol	r12
80012d2e:	fc 1e ff e0 	movh	lr,0xffe0
80012d32:	58 0a       	cp.w	r10,0
80012d34:	fc 0b 13 00 	cpc	r11,lr
80012d38:	e0 8b 00 1d 	brhi	80012d72 <__avr32_f64_cmp_lt+0x52>
80012d3c:	58 08       	cp.w	r8,0
80012d3e:	fc 09 13 00 	cpc	r9,lr
80012d42:	e0 8b 00 18 	brhi	80012d72 <__avr32_f64_cmp_lt+0x52>
80012d46:	58 0b       	cp.w	r11,0
80012d48:	f5 ba 00 00 	subfeq	r10,0
80012d4c:	c1 50       	breq	80012d76 <__avr32_f64_cmp_lt+0x56>
80012d4e:	1b 07       	ld.w	r7,sp++
80012d50:	1b 0e       	ld.w	lr,sp++
80012d52:	58 3c       	cp.w	r12,3
80012d54:	c0 a0       	breq	80012d68 <__avr32_f64_cmp_lt+0x48>
80012d56:	58 1c       	cp.w	r12,1
80012d58:	c0 33       	brcs	80012d5e <__avr32_f64_cmp_lt+0x3e>
80012d5a:	5e 0d       	reteq	0
80012d5c:	5e 1f       	retne	1
80012d5e:	10 3a       	cp.w	r10,r8
80012d60:	f2 0b 13 00 	cpc	r11,r9
80012d64:	5e 2d       	reths	0
80012d66:	5e 3f       	retlo	1
80012d68:	14 38       	cp.w	r8,r10
80012d6a:	f6 09 13 00 	cpc	r9,r11
80012d6e:	5e 2d       	reths	0
80012d70:	5e 3f       	retlo	1
80012d72:	1b 07       	ld.w	r7,sp++
80012d74:	d8 0a       	popm	pc,r12=0
80012d76:	58 17       	cp.w	r7,1
80012d78:	5f 1c       	srne	r12
80012d7a:	58 09       	cp.w	r9,0
80012d7c:	f5 b8 00 00 	subfeq	r8,0
80012d80:	1b 07       	ld.w	r7,sp++
80012d82:	1b 0e       	ld.w	lr,sp++
80012d84:	5e 0d       	reteq	0
80012d86:	5e fc       	retal	r12

80012d88 <__avr32_f64_div>:
80012d88:	eb cd 40 ff 	pushm	r0-r7,lr
80012d8c:	f7 e9 20 0e 	eor	lr,r11,r9
80012d90:	f6 07 16 14 	lsr	r7,r11,0x14
80012d94:	a9 7b       	lsl	r11,0x9
80012d96:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
80012d9a:	a9 7a       	lsl	r10,0x9
80012d9c:	bd bb       	sbr	r11,0x1d
80012d9e:	e4 1b 3f ff 	andh	r11,0x3fff
80012da2:	ab d7       	cbr	r7,0xb
80012da4:	e0 80 00 cc 	breq	80012f3c <__avr32_f64_div_round_subnormal+0x54>
80012da8:	e0 47 07 ff 	cp.w	r7,2047
80012dac:	e0 84 00 b5 	brge	80012f16 <__avr32_f64_div_round_subnormal+0x2e>
80012db0:	f2 06 16 14 	lsr	r6,r9,0x14
80012db4:	a9 79       	lsl	r9,0x9
80012db6:	f3 e8 13 79 	or	r9,r9,r8>>0x17
80012dba:	a9 78       	lsl	r8,0x9
80012dbc:	bd b9       	sbr	r9,0x1d
80012dbe:	e4 19 3f ff 	andh	r9,0x3fff
80012dc2:	ab d6       	cbr	r6,0xb
80012dc4:	e0 80 00 e2 	breq	80012f88 <__avr32_f64_div_round_subnormal+0xa0>
80012dc8:	e0 46 07 ff 	cp.w	r6,2047
80012dcc:	e0 84 00 b2 	brge	80012f30 <__avr32_f64_div_round_subnormal+0x48>
80012dd0:	0c 17       	sub	r7,r6
80012dd2:	fe 37 fc 01 	sub	r7,-1023
80012dd6:	fc 1c 80 00 	movh	r12,0x8000
80012dda:	f8 03 16 01 	lsr	r3,r12,0x1
80012dde:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
80012de2:	5c d4       	com	r4
80012de4:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80012de8:	e6 09 06 44 	mulu.d	r4,r3,r9
80012dec:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80012df0:	e6 05 06 44 	mulu.d	r4,r3,r5
80012df4:	ea 03 15 02 	lsl	r3,r5,0x2
80012df8:	e6 09 06 44 	mulu.d	r4,r3,r9
80012dfc:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80012e00:	e6 05 06 44 	mulu.d	r4,r3,r5
80012e04:	ea 03 15 02 	lsl	r3,r5,0x2
80012e08:	e6 09 06 44 	mulu.d	r4,r3,r9
80012e0c:	f8 05 01 25 	sub	r5,r12,r5<<0x2
80012e10:	e6 05 06 44 	mulu.d	r4,r3,r5
80012e14:	ea 03 15 02 	lsl	r3,r5,0x2
80012e18:	e6 08 06 40 	mulu.d	r0,r3,r8
80012e1c:	e4 09 07 40 	macu.d	r0,r2,r9
80012e20:	e6 09 06 44 	mulu.d	r4,r3,r9
80012e24:	02 04       	add	r4,r1
80012e26:	5c 05       	acr	r5
80012e28:	a3 65       	lsl	r5,0x2
80012e2a:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80012e2e:	a3 64       	lsl	r4,0x2
80012e30:	5c 34       	neg	r4
80012e32:	f8 05 01 45 	sbc	r5,r12,r5
80012e36:	e6 04 06 40 	mulu.d	r0,r3,r4
80012e3a:	e4 05 07 40 	macu.d	r0,r2,r5
80012e3e:	e6 05 06 44 	mulu.d	r4,r3,r5
80012e42:	02 04       	add	r4,r1
80012e44:	5c 05       	acr	r5
80012e46:	ea 03 15 02 	lsl	r3,r5,0x2
80012e4a:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80012e4e:	e8 02 15 02 	lsl	r2,r4,0x2
80012e52:	e6 08 06 40 	mulu.d	r0,r3,r8
80012e56:	e4 09 07 40 	macu.d	r0,r2,r9
80012e5a:	e6 09 06 44 	mulu.d	r4,r3,r9
80012e5e:	02 04       	add	r4,r1
80012e60:	5c 05       	acr	r5
80012e62:	a3 65       	lsl	r5,0x2
80012e64:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80012e68:	a3 64       	lsl	r4,0x2
80012e6a:	5c 34       	neg	r4
80012e6c:	f8 05 01 45 	sbc	r5,r12,r5
80012e70:	e6 04 06 40 	mulu.d	r0,r3,r4
80012e74:	e4 05 07 40 	macu.d	r0,r2,r5
80012e78:	e6 05 06 44 	mulu.d	r4,r3,r5
80012e7c:	02 04       	add	r4,r1
80012e7e:	5c 05       	acr	r5
80012e80:	ea 03 15 02 	lsl	r3,r5,0x2
80012e84:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
80012e88:	e8 02 15 02 	lsl	r2,r4,0x2
80012e8c:	e6 0a 06 40 	mulu.d	r0,r3,r10
80012e90:	e4 0b 07 40 	macu.d	r0,r2,r11
80012e94:	e6 0b 06 42 	mulu.d	r2,r3,r11
80012e98:	02 02       	add	r2,r1
80012e9a:	5c 03       	acr	r3
80012e9c:	ed b3 00 1c 	bld	r3,0x1c
80012ea0:	c0 90       	breq	80012eb2 <__avr32_f64_div+0x12a>
80012ea2:	a1 72       	lsl	r2,0x1
80012ea4:	5c f3       	rol	r3
80012ea6:	20 17       	sub	r7,1
80012ea8:	a3 9a       	lsr	r10,0x3
80012eaa:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
80012eae:	a3 9b       	lsr	r11,0x3
80012eb0:	c0 58       	rjmp	80012eba <__avr32_f64_div+0x132>
80012eb2:	a5 8a       	lsr	r10,0x4
80012eb4:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
80012eb8:	a5 8b       	lsr	r11,0x4
80012eba:	58 07       	cp.w	r7,0
80012ebc:	e0 8a 00 8b 	brle	80012fd2 <__avr32_f64_div_res_subnormal>
80012ec0:	e0 12 ff 00 	andl	r2,0xff00
80012ec4:	e8 12 00 80 	orl	r2,0x80
80012ec8:	e6 08 06 40 	mulu.d	r0,r3,r8
80012ecc:	e4 09 07 40 	macu.d	r0,r2,r9
80012ed0:	e4 08 06 44 	mulu.d	r4,r2,r8
80012ed4:	e6 09 06 48 	mulu.d	r8,r3,r9
80012ed8:	00 05       	add	r5,r0
80012eda:	f0 01 00 48 	adc	r8,r8,r1
80012ede:	5c 09       	acr	r9
80012ee0:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80012ee4:	58 04       	cp.w	r4,0
80012ee6:	5c 25       	cpc	r5

80012ee8 <__avr32_f64_div_round_subnormal>:
80012ee8:	f4 08 13 00 	cpc	r8,r10
80012eec:	f6 09 13 00 	cpc	r9,r11
80012ef0:	5f 36       	srlo	r6
80012ef2:	f8 06 17 00 	moveq	r6,r12
80012ef6:	e4 0a 16 08 	lsr	r10,r2,0x8
80012efa:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
80012efe:	e6 0b 16 08 	lsr	r11,r3,0x8
80012f02:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80012f06:	ed be 00 1f 	bld	lr,0x1f
80012f0a:	ef bb 00 1f 	bst	r11,0x1f
80012f0e:	0c 0a       	add	r10,r6
80012f10:	5c 0b       	acr	r11
80012f12:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80012f16:	e4 1b 00 0f 	andh	r11,0xf
80012f1a:	14 4b       	or	r11,r10
80012f1c:	e0 81 00 a7 	brne	8001306a <__avr32_f64_div_res_subnormal+0x98>
80012f20:	f2 06 16 14 	lsr	r6,r9,0x14
80012f24:	ab d6       	cbr	r6,0xb
80012f26:	e0 46 07 ff 	cp.w	r6,2047
80012f2a:	e0 81 00 a4 	brne	80013072 <__avr32_f64_div_res_subnormal+0xa0>
80012f2e:	c9 e8       	rjmp	8001306a <__avr32_f64_div_res_subnormal+0x98>
80012f30:	e4 19 00 0f 	andh	r9,0xf
80012f34:	10 49       	or	r9,r8
80012f36:	e0 81 00 9a 	brne	8001306a <__avr32_f64_div_res_subnormal+0x98>
80012f3a:	c9 28       	rjmp	8001305e <__avr32_f64_div_res_subnormal+0x8c>
80012f3c:	a3 7b       	lsl	r11,0x3
80012f3e:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
80012f42:	a3 7a       	lsl	r10,0x3
80012f44:	f5 eb 10 04 	or	r4,r10,r11
80012f48:	e0 80 00 a0 	breq	80013088 <__avr32_f64_div_op1_zero>
80012f4c:	f6 04 12 00 	clz	r4,r11
80012f50:	c1 70       	breq	80012f7e <__avr32_f64_div_round_subnormal+0x96>
80012f52:	c0 c3       	brcs	80012f6a <__avr32_f64_div_round_subnormal+0x82>
80012f54:	e8 05 11 20 	rsub	r5,r4,32
80012f58:	f6 04 09 4b 	lsl	r11,r11,r4
80012f5c:	f4 05 0a 45 	lsr	r5,r10,r5
80012f60:	0a 4b       	or	r11,r5
80012f62:	f4 04 09 4a 	lsl	r10,r10,r4
80012f66:	08 17       	sub	r7,r4
80012f68:	c0 b8       	rjmp	80012f7e <__avr32_f64_div_round_subnormal+0x96>
80012f6a:	f4 04 12 00 	clz	r4,r10
80012f6e:	f9 b4 03 00 	movlo	r4,0
80012f72:	f7 b4 02 e0 	subhs	r4,-32
80012f76:	f4 04 09 4b 	lsl	r11,r10,r4
80012f7a:	30 0a       	mov	r10,0
80012f7c:	08 17       	sub	r7,r4
80012f7e:	a3 8a       	lsr	r10,0x2
80012f80:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
80012f84:	a3 8b       	lsr	r11,0x2
80012f86:	c1 1b       	rjmp	80012da8 <__avr32_f64_div+0x20>
80012f88:	a3 79       	lsl	r9,0x3
80012f8a:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
80012f8e:	a3 78       	lsl	r8,0x3
80012f90:	f3 e8 10 04 	or	r4,r9,r8
80012f94:	c6 f0       	breq	80013072 <__avr32_f64_div_res_subnormal+0xa0>
80012f96:	f2 04 12 00 	clz	r4,r9
80012f9a:	c1 70       	breq	80012fc8 <__avr32_f64_div_round_subnormal+0xe0>
80012f9c:	c0 c3       	brcs	80012fb4 <__avr32_f64_div_round_subnormal+0xcc>
80012f9e:	e8 05 11 20 	rsub	r5,r4,32
80012fa2:	f2 04 09 49 	lsl	r9,r9,r4
80012fa6:	f0 05 0a 45 	lsr	r5,r8,r5
80012faa:	0a 49       	or	r9,r5
80012fac:	f0 04 09 48 	lsl	r8,r8,r4
80012fb0:	08 16       	sub	r6,r4
80012fb2:	c0 b8       	rjmp	80012fc8 <__avr32_f64_div_round_subnormal+0xe0>
80012fb4:	f0 04 12 00 	clz	r4,r8
80012fb8:	f9 b4 03 00 	movlo	r4,0
80012fbc:	f7 b4 02 e0 	subhs	r4,-32
80012fc0:	f0 04 09 49 	lsl	r9,r8,r4
80012fc4:	30 08       	mov	r8,0
80012fc6:	08 16       	sub	r6,r4
80012fc8:	a3 88       	lsr	r8,0x2
80012fca:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
80012fce:	a3 89       	lsr	r9,0x2
80012fd0:	cf ca       	rjmp	80012dc8 <__avr32_f64_div+0x40>

80012fd2 <__avr32_f64_div_res_subnormal>:
80012fd2:	5c 37       	neg	r7
80012fd4:	2f f7       	sub	r7,-1
80012fd6:	f1 b7 04 c0 	satu	r7,0x6
80012fda:	e0 47 00 20 	cp.w	r7,32
80012fde:	c1 54       	brge	80013008 <__avr32_f64_div_res_subnormal+0x36>
80012fe0:	ee 06 11 20 	rsub	r6,r7,32
80012fe4:	e4 07 0a 42 	lsr	r2,r2,r7
80012fe8:	e6 06 09 4c 	lsl	r12,r3,r6
80012fec:	18 42       	or	r2,r12
80012fee:	e6 07 0a 43 	lsr	r3,r3,r7
80012ff2:	f4 06 09 41 	lsl	r1,r10,r6
80012ff6:	f4 07 0a 4a 	lsr	r10,r10,r7
80012ffa:	f6 06 09 4c 	lsl	r12,r11,r6
80012ffe:	18 4a       	or	r10,r12
80013000:	f6 07 0a 4b 	lsr	r11,r11,r7
80013004:	30 00       	mov	r0,0
80013006:	c1 58       	rjmp	80013030 <__avr32_f64_div_res_subnormal+0x5e>
80013008:	ee 06 11 20 	rsub	r6,r7,32
8001300c:	f9 b0 00 00 	moveq	r0,0
80013010:	f9 bc 00 00 	moveq	r12,0
80013014:	c0 50       	breq	8001301e <__avr32_f64_div_res_subnormal+0x4c>
80013016:	f4 06 09 40 	lsl	r0,r10,r6
8001301a:	f6 06 09 4c 	lsl	r12,r11,r6
8001301e:	e6 07 0a 42 	lsr	r2,r3,r7
80013022:	30 03       	mov	r3,0
80013024:	f4 07 0a 41 	lsr	r1,r10,r7
80013028:	18 41       	or	r1,r12
8001302a:	f6 07 0a 4a 	lsr	r10,r11,r7
8001302e:	30 0b       	mov	r11,0
80013030:	e0 12 ff 00 	andl	r2,0xff00
80013034:	e8 12 00 80 	orl	r2,0x80
80013038:	e6 08 06 46 	mulu.d	r6,r3,r8
8001303c:	e4 09 07 46 	macu.d	r6,r2,r9
80013040:	e4 08 06 44 	mulu.d	r4,r2,r8
80013044:	e6 09 06 48 	mulu.d	r8,r3,r9
80013048:	0c 05       	add	r5,r6
8001304a:	f0 07 00 48 	adc	r8,r8,r7
8001304e:	5c 09       	acr	r9
80013050:	30 07       	mov	r7,0
80013052:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80013056:	00 34       	cp.w	r4,r0
80013058:	e2 05 13 00 	cpc	r5,r1
8001305c:	c4 6b       	rjmp	80012ee8 <__avr32_f64_div_round_subnormal>
8001305e:	1c 9b       	mov	r11,lr
80013060:	e6 1b 80 00 	andh	r11,0x8000,COH
80013064:	30 0a       	mov	r10,0
80013066:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
8001306a:	3f fb       	mov	r11,-1
8001306c:	30 0a       	mov	r10,0
8001306e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80013072:	f5 eb 10 04 	or	r4,r10,r11
80013076:	c0 90       	breq	80013088 <__avr32_f64_div_op1_zero>
80013078:	1c 9b       	mov	r11,lr
8001307a:	e6 1b 80 00 	andh	r11,0x8000,COH
8001307e:	ea 1b 7f f0 	orh	r11,0x7ff0
80013082:	30 0a       	mov	r10,0
80013084:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80013088 <__avr32_f64_div_op1_zero>:
80013088:	f1 e9 10 15 	or	r5,r8,r9<<0x1
8001308c:	ce f0       	breq	8001306a <__avr32_f64_div_res_subnormal+0x98>
8001308e:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80013092:	e0 44 07 ff 	cp.w	r4,2047
80013096:	ce 41       	brne	8001305e <__avr32_f64_div_res_subnormal+0x8c>
80013098:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
8001309c:	ce 10       	breq	8001305e <__avr32_f64_div_res_subnormal+0x8c>
8001309e:	ce 6b       	rjmp	8001306a <__avr32_f64_div_res_subnormal+0x98>

800130a0 <__avr32_umod64>:
800130a0:	d4 31       	pushm	r0-r7,lr
800130a2:	1a 97       	mov	r7,sp
800130a4:	20 3d       	sub	sp,12
800130a6:	10 9c       	mov	r12,r8
800130a8:	12 95       	mov	r5,r9
800130aa:	14 9e       	mov	lr,r10
800130ac:	16 91       	mov	r1,r11
800130ae:	16 96       	mov	r6,r11
800130b0:	58 09       	cp.w	r9,0
800130b2:	e0 81 00 81 	brne	800131b4 <__avr32_umod64+0x114>
800130b6:	16 38       	cp.w	r8,r11
800130b8:	e0 88 00 12 	brls	800130dc <__avr32_umod64+0x3c>
800130bc:	f0 08 12 00 	clz	r8,r8
800130c0:	c4 e0       	breq	8001315c <__avr32_umod64+0xbc>
800130c2:	f6 08 09 46 	lsl	r6,r11,r8
800130c6:	f8 08 09 4c 	lsl	r12,r12,r8
800130ca:	f0 0b 11 20 	rsub	r11,r8,32
800130ce:	f4 08 09 4e 	lsl	lr,r10,r8
800130d2:	f4 0b 0a 4b 	lsr	r11,r10,r11
800130d6:	f7 e6 10 06 	or	r6,r11,r6
800130da:	c4 18       	rjmp	8001315c <__avr32_umod64+0xbc>
800130dc:	58 08       	cp.w	r8,0
800130de:	c0 51       	brne	800130e8 <__avr32_umod64+0x48>
800130e0:	30 19       	mov	r9,1
800130e2:	f2 08 0d 08 	divu	r8,r9,r8
800130e6:	10 9c       	mov	r12,r8
800130e8:	f8 08 12 00 	clz	r8,r12
800130ec:	c0 31       	brne	800130f2 <__avr32_umod64+0x52>
800130ee:	18 16       	sub	r6,r12
800130f0:	c3 68       	rjmp	8001315c <__avr32_umod64+0xbc>
800130f2:	f0 03 11 20 	rsub	r3,r8,32
800130f6:	f4 03 0a 4b 	lsr	r11,r10,r3
800130fa:	f8 08 09 4c 	lsl	r12,r12,r8
800130fe:	ec 08 09 49 	lsl	r9,r6,r8
80013102:	ec 03 0a 43 	lsr	r3,r6,r3
80013106:	f7 e9 10 09 	or	r9,r11,r9
8001310a:	f8 05 16 10 	lsr	r5,r12,0x10
8001310e:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80013112:	e6 05 0d 02 	divu	r2,r3,r5
80013116:	f2 0e 16 10 	lsr	lr,r9,0x10
8001311a:	ec 02 02 4b 	mul	r11,r6,r2
8001311e:	fd e3 11 0e 	or	lr,lr,r3<<0x10
80013122:	16 3e       	cp.w	lr,r11
80013124:	c0 72       	brcc	80013132 <__avr32_umod64+0x92>
80013126:	18 0e       	add	lr,r12
80013128:	18 3e       	cp.w	lr,r12
8001312a:	c0 43       	brcs	80013132 <__avr32_umod64+0x92>
8001312c:	16 3e       	cp.w	lr,r11
8001312e:	fd dc e3 0e 	addcs	lr,lr,r12
80013132:	fc 0b 01 03 	sub	r3,lr,r11
80013136:	f3 d9 c0 10 	bfextu	r9,r9,0x0,0x10
8001313a:	e6 05 0d 02 	divu	r2,r3,r5
8001313e:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80013142:	a5 36       	mul	r6,r2
80013144:	0c 39       	cp.w	r9,r6
80013146:	c0 72       	brcc	80013154 <__avr32_umod64+0xb4>
80013148:	18 09       	add	r9,r12
8001314a:	18 39       	cp.w	r9,r12
8001314c:	c0 43       	brcs	80013154 <__avr32_umod64+0xb4>
8001314e:	0c 39       	cp.w	r9,r6
80013150:	f3 dc e3 09 	addcs	r9,r9,r12
80013154:	f2 06 01 06 	sub	r6,r9,r6
80013158:	f4 08 09 4e 	lsl	lr,r10,r8
8001315c:	f8 0a 16 10 	lsr	r10,r12,0x10
80013160:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80013164:	ec 0a 0d 02 	divu	r2,r6,r10
80013168:	fc 09 16 10 	lsr	r9,lr,0x10
8001316c:	ea 02 02 4b 	mul	r11,r5,r2
80013170:	f3 e3 11 09 	or	r9,r9,r3<<0x10
80013174:	16 39       	cp.w	r9,r11
80013176:	c0 72       	brcc	80013184 <__avr32_umod64+0xe4>
80013178:	18 09       	add	r9,r12
8001317a:	18 39       	cp.w	r9,r12
8001317c:	c0 43       	brcs	80013184 <__avr32_umod64+0xe4>
8001317e:	16 39       	cp.w	r9,r11
80013180:	f3 dc e3 09 	addcs	r9,r9,r12
80013184:	f2 0b 01 0b 	sub	r11,r9,r11
80013188:	fd de c0 10 	bfextu	lr,lr,0x0,0x10
8001318c:	f6 0a 0d 0a 	divu	r10,r11,r10
80013190:	fd eb 11 0e 	or	lr,lr,r11<<0x10
80013194:	ea 0a 02 4a 	mul	r10,r5,r10
80013198:	14 3e       	cp.w	lr,r10
8001319a:	c0 72       	brcc	800131a8 <__avr32_umod64+0x108>
8001319c:	18 0e       	add	lr,r12
8001319e:	18 3e       	cp.w	lr,r12
800131a0:	c0 43       	brcs	800131a8 <__avr32_umod64+0x108>
800131a2:	14 3e       	cp.w	lr,r10
800131a4:	fd dc e3 0e 	addcs	lr,lr,r12
800131a8:	fc 0a 01 0a 	sub	r10,lr,r10
800131ac:	30 0b       	mov	r11,0
800131ae:	f4 08 0a 4a 	lsr	r10,r10,r8
800131b2:	c7 b8       	rjmp	800132a8 <__avr32_umod64+0x208>
800131b4:	16 39       	cp.w	r9,r11
800131b6:	e0 8b 00 79 	brhi	800132a8 <__avr32_umod64+0x208>
800131ba:	f2 09 12 00 	clz	r9,r9
800131be:	c1 21       	brne	800131e2 <__avr32_umod64+0x142>
800131c0:	10 3a       	cp.w	r10,r8
800131c2:	5f 2b       	srhs	r11
800131c4:	0a 31       	cp.w	r1,r5
800131c6:	5f ba       	srhi	r10
800131c8:	f7 ea 10 0a 	or	r10,r11,r10
800131cc:	f2 0a 18 00 	cp.b	r10,r9
800131d0:	c0 60       	breq	800131dc <__avr32_umod64+0x13c>
800131d2:	fc 08 01 0c 	sub	r12,lr,r8
800131d6:	e2 05 01 46 	sbc	r6,r1,r5
800131da:	18 9e       	mov	lr,r12
800131dc:	0c 9b       	mov	r11,r6
800131de:	1c 9a       	mov	r10,lr
800131e0:	c6 48       	rjmp	800132a8 <__avr32_umod64+0x208>
800131e2:	ea 09 09 4c 	lsl	r12,r5,r9
800131e6:	f2 06 11 20 	rsub	r6,r9,32
800131ea:	f6 09 09 4b 	lsl	r11,r11,r9
800131ee:	f0 09 09 42 	lsl	r2,r8,r9
800131f2:	ef 46 ff f4 	st.w	r7[-12],r6
800131f6:	f0 06 0a 48 	lsr	r8,r8,r6
800131fa:	18 48       	or	r8,r12
800131fc:	e2 06 0a 4c 	lsr	r12,r1,r6
80013200:	f4 09 09 43 	lsl	r3,r10,r9
80013204:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
80013208:	f4 06 0a 4a 	lsr	r10,r10,r6
8001320c:	16 4a       	or	r10,r11
8001320e:	f0 0b 16 10 	lsr	r11,r8,0x10
80013212:	f8 0b 0d 04 	divu	r4,r12,r11
80013216:	f4 0c 16 10 	lsr	r12,r10,0x10
8001321a:	08 91       	mov	r1,r4
8001321c:	f9 e5 11 0c 	or	r12,r12,r5<<0x10
80013220:	e8 0e 02 46 	mul	r6,r4,lr
80013224:	0c 3c       	cp.w	r12,r6
80013226:	c0 a2       	brcc	8001323a <__avr32_umod64+0x19a>
80013228:	20 11       	sub	r1,1
8001322a:	10 0c       	add	r12,r8
8001322c:	10 3c       	cp.w	r12,r8
8001322e:	c0 63       	brcs	8001323a <__avr32_umod64+0x19a>
80013230:	0c 3c       	cp.w	r12,r6
80013232:	f7 b1 03 01 	sublo	r1,1
80013236:	f9 d8 e3 0c 	addcs	r12,r12,r8
8001323a:	0c 1c       	sub	r12,r6
8001323c:	f5 da c0 10 	bfextu	r10,r10,0x0,0x10
80013240:	f8 0b 0d 04 	divu	r4,r12,r11
80013244:	f5 e5 11 0b 	or	r11,r10,r5<<0x10
80013248:	08 96       	mov	r6,r4
8001324a:	e8 0e 02 4e 	mul	lr,r4,lr
8001324e:	1c 3b       	cp.w	r11,lr
80013250:	c0 a2       	brcc	80013264 <__avr32_umod64+0x1c4>
80013252:	20 16       	sub	r6,1
80013254:	10 0b       	add	r11,r8
80013256:	10 3b       	cp.w	r11,r8
80013258:	c0 63       	brcs	80013264 <__avr32_umod64+0x1c4>
8001325a:	1c 3b       	cp.w	r11,lr
8001325c:	f7 b6 03 01 	sublo	r6,1
80013260:	f7 d8 e3 0b 	addcs	r11,r11,r8
80013264:	ed e1 11 01 	or	r1,r6,r1<<0x10
80013268:	1c 1b       	sub	r11,lr
8001326a:	e2 02 06 40 	mulu.d	r0,r1,r2
8001326e:	00 9e       	mov	lr,r0
80013270:	02 9c       	mov	r12,r1
80013272:	16 3c       	cp.w	r12,r11
80013274:	e0 8b 00 08 	brhi	80013284 <__avr32_umod64+0x1e4>
80013278:	5f 06       	sreq	r6
8001327a:	06 30       	cp.w	r0,r3
8001327c:	5f ba       	srhi	r10
8001327e:	ed ea 00 0a 	and	r10,r6,r10
80013282:	c0 60       	breq	8001328e <__avr32_umod64+0x1ee>
80013284:	fc 02 01 04 	sub	r4,lr,r2
80013288:	f8 08 01 4c 	sbc	r12,r12,r8
8001328c:	08 9e       	mov	lr,r4
8001328e:	e6 0e 01 0a 	sub	r10,r3,lr
80013292:	f6 0c 01 4c 	sbc	r12,r11,r12
80013296:	ee f1 ff f4 	ld.w	r1,r7[-12]
8001329a:	f8 09 0a 4b 	lsr	r11,r12,r9
8001329e:	f4 09 0a 4a 	lsr	r10,r10,r9
800132a2:	f8 01 09 4c 	lsl	r12,r12,r1
800132a6:	18 4a       	or	r10,r12
800132a8:	2f dd       	sub	sp,-12
800132aa:	d8 32       	popm	r0-r7,pc

Disassembly of section .exception:

80013400 <_evba>:
_evba:

	.org  0x000
	// Unrecoverable Exception.
_handle_Unrecoverable_Exception:
	rjmp $
80013400:	c0 08       	rjmp	80013400 <_evba>
	...

80013404 <_handle_TLB_Multiple_Hit>:

	.org  0x004
	// TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
	rjmp $
80013404:	c0 08       	rjmp	80013404 <_handle_TLB_Multiple_Hit>
	...

80013408 <_handle_Bus_Error_Data_Fetch>:

	.org  0x008
	// Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
	rjmp $
80013408:	c0 08       	rjmp	80013408 <_handle_Bus_Error_Data_Fetch>
	...

8001340c <_handle_Bus_Error_Instruction_Fetch>:

	.org  0x00C
	// Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
	rjmp $
8001340c:	c0 08       	rjmp	8001340c <_handle_Bus_Error_Instruction_Fetch>
	...

80013410 <_handle_NMI>:

	.org  0x010
	// NMI.
_handle_NMI:
	rjmp $
80013410:	c0 08       	rjmp	80013410 <_handle_NMI>
	...

80013414 <_handle_Instruction_Address>:

	.org  0x014
	// Instruction Address.
_handle_Instruction_Address:
	rjmp $
80013414:	c0 08       	rjmp	80013414 <_handle_Instruction_Address>
	...

80013418 <_handle_ITLB_Protection>:

	.org  0x018
	// ITLB Protection.
_handle_ITLB_Protection:
	rjmp $
80013418:	c0 08       	rjmp	80013418 <_handle_ITLB_Protection>
	...

8001341c <_handle_Breakpoint>:

	.org  0x01C
	// Breakpoint.
_handle_Breakpoint:
	rjmp $
8001341c:	c0 08       	rjmp	8001341c <_handle_Breakpoint>
	...

80013420 <_handle_Illegal_Opcode>:

	.org  0x020
	// Illegal Opcode.
_handle_Illegal_Opcode:
	rjmp $
80013420:	c0 08       	rjmp	80013420 <_handle_Illegal_Opcode>
	...

80013424 <_handle_Unimplemented_Instruction>:

	.org  0x024
	// Unimplemented Instruction.
_handle_Unimplemented_Instruction:
	rjmp $
80013424:	c0 08       	rjmp	80013424 <_handle_Unimplemented_Instruction>
	...

80013428 <_handle_Privilege_Violation>:

	.org  0x028
	// Privilege Violation.
_handle_Privilege_Violation:
	rjmp $
80013428:	c0 08       	rjmp	80013428 <_handle_Privilege_Violation>
	...

8001342c <_handle_Floating_Point>:

	.org  0x02C
	// Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
	rjmp $
8001342c:	c0 08       	rjmp	8001342c <_handle_Floating_Point>
	...

80013430 <_handle_Coprocessor_Absent>:

	.org  0x030
	// Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
	rjmp $
80013430:	c0 08       	rjmp	80013430 <_handle_Coprocessor_Absent>
	...

80013434 <_handle_Data_Address_Read>:

	.org  0x034
	// Data Address (Read).
_handle_Data_Address_Read:
	rjmp $
80013434:	c0 08       	rjmp	80013434 <_handle_Data_Address_Read>
	...

80013438 <_handle_Data_Address_Write>:

	.org  0x038
	// Data Address (Write).
_handle_Data_Address_Write:
	rjmp $
80013438:	c0 08       	rjmp	80013438 <_handle_Data_Address_Write>
	...

8001343c <_handle_DTLB_Protection_Read>:

	.org  0x03C
	// DTLB Protection (Read).
_handle_DTLB_Protection_Read:
	rjmp $
8001343c:	c0 08       	rjmp	8001343c <_handle_DTLB_Protection_Read>
	...

80013440 <_handle_DTLB_Protection_Write>:

	.org  0x040
	// DTLB Protection (Write).
_handle_DTLB_Protection_Write:
	rjmp $
80013440:	c0 08       	rjmp	80013440 <_handle_DTLB_Protection_Write>
	...

80013444 <_handle_DTLB_Modified>:

	.org  0x044
	// DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
	rjmp $
80013444:	c0 08       	rjmp	80013444 <_handle_DTLB_Modified>
	...

80013450 <_handle_ITLB_Miss>:

	.org  0x050
	// ITLB Miss.
_handle_ITLB_Miss:
	rjmp $
80013450:	c0 08       	rjmp	80013450 <_handle_ITLB_Miss>
	...

80013460 <_handle_DTLB_Miss_Read>:

	.org  0x060
	// DTLB Miss (Read).
_handle_DTLB_Miss_Read:
	rjmp $
80013460:	c0 08       	rjmp	80013460 <_handle_DTLB_Miss_Read>
	...

80013470 <_handle_DTLB_Miss_Write>:

	.org  0x070
	// DTLB Miss (Write).
_handle_DTLB_Miss_Write:
	rjmp $
80013470:	c0 08       	rjmp	80013470 <_handle_DTLB_Miss_Write>
	...

80013500 <_handle_Supervisor_Call>:

	.org  0x100
	// Supervisor Call.
_handle_Supervisor_Call:
	rjmp $
80013500:	c0 08       	rjmp	80013500 <_handle_Supervisor_Call>
80013502:	d7 03       	nop

80013504 <_int0>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80013504:	30 0c       	mov	r12,0
80013506:	fe b0 a7 af 	rcall	80008464 <_get_interrupt_handler>
8001350a:	58 0c       	cp.w	r12,0
8001350c:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
80013510:	d6 03       	rete

80013512 <_int1>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80013512:	30 1c       	mov	r12,1
80013514:	fe b0 a7 a8 	rcall	80008464 <_get_interrupt_handler>
80013518:	58 0c       	cp.w	r12,0
8001351a:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8001351e:	d6 03       	rete

80013520 <_int2>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
80013520:	30 2c       	mov	r12,2
80013522:	fe b0 a7 a1 	rcall	80008464 <_get_interrupt_handler>
80013526:	58 0c       	cp.w	r12,0
80013528:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8001352c:	d6 03       	rete

8001352e <_int3>:
	 * RSR_INTx by the CPU upon interrupt entry. No other register is saved
	 * by hardware.
	 */
	pushm   r8-r12, lr
#endif
	// Pass the int_level parameter to the _get_interrupt_handler function.
8001352e:	30 3c       	mov	r12,3
80013530:	fe b0 a7 9a 	rcall	80008464 <_get_interrupt_handler>
80013534:	58 0c       	cp.w	r12,0
80013536:	f8 0f 17 10 	movne	pc,r12
	popm    r8-r12, lr
#endif
	/*
	 * If this was a spurious interrupt (R12 == NULL), return from event
	 * handler.
	 */
8001353a:	d6 03       	rete
8001353c:	d7 03       	nop
8001353e:	d7 03       	nop
80013540:	d7 03       	nop
80013542:	d7 03       	nop
80013544:	d7 03       	nop
80013546:	d7 03       	nop
80013548:	d7 03       	nop
8001354a:	d7 03       	nop
8001354c:	d7 03       	nop
8001354e:	d7 03       	nop
80013550:	d7 03       	nop
80013552:	d7 03       	nop
80013554:	d7 03       	nop
80013556:	d7 03       	nop
80013558:	d7 03       	nop
8001355a:	d7 03       	nop
8001355c:	d7 03       	nop
8001355e:	d7 03       	nop
80013560:	d7 03       	nop
80013562:	d7 03       	nop
80013564:	d7 03       	nop
80013566:	d7 03       	nop
80013568:	d7 03       	nop
8001356a:	d7 03       	nop
8001356c:	d7 03       	nop
8001356e:	d7 03       	nop
80013570:	d7 03       	nop
80013572:	d7 03       	nop
80013574:	d7 03       	nop
80013576:	d7 03       	nop
80013578:	d7 03       	nop
8001357a:	d7 03       	nop
8001357c:	d7 03       	nop
8001357e:	d7 03       	nop
80013580:	d7 03       	nop
80013582:	d7 03       	nop
80013584:	d7 03       	nop
80013586:	d7 03       	nop
80013588:	d7 03       	nop
8001358a:	d7 03       	nop
8001358c:	d7 03       	nop
8001358e:	d7 03       	nop
80013590:	d7 03       	nop
80013592:	d7 03       	nop
80013594:	d7 03       	nop
80013596:	d7 03       	nop
80013598:	d7 03       	nop
8001359a:	d7 03       	nop
8001359c:	d7 03       	nop
8001359e:	d7 03       	nop
800135a0:	d7 03       	nop
800135a2:	d7 03       	nop
800135a4:	d7 03       	nop
800135a6:	d7 03       	nop
800135a8:	d7 03       	nop
800135aa:	d7 03       	nop
800135ac:	d7 03       	nop
800135ae:	d7 03       	nop
800135b0:	d7 03       	nop
800135b2:	d7 03       	nop
800135b4:	d7 03       	nop
800135b6:	d7 03       	nop
800135b8:	d7 03       	nop
800135ba:	d7 03       	nop
800135bc:	d7 03       	nop
800135be:	d7 03       	nop
800135c0:	d7 03       	nop
800135c2:	d7 03       	nop
800135c4:	d7 03       	nop
800135c6:	d7 03       	nop
800135c8:	d7 03       	nop
800135ca:	d7 03       	nop
800135cc:	d7 03       	nop
800135ce:	d7 03       	nop
800135d0:	d7 03       	nop
800135d2:	d7 03       	nop
800135d4:	d7 03       	nop
800135d6:	d7 03       	nop
800135d8:	d7 03       	nop
800135da:	d7 03       	nop
800135dc:	d7 03       	nop
800135de:	d7 03       	nop
800135e0:	d7 03       	nop
800135e2:	d7 03       	nop
800135e4:	d7 03       	nop
800135e6:	d7 03       	nop
800135e8:	d7 03       	nop
800135ea:	d7 03       	nop
800135ec:	d7 03       	nop
800135ee:	d7 03       	nop
800135f0:	d7 03       	nop
800135f2:	d7 03       	nop
800135f4:	d7 03       	nop
800135f6:	d7 03       	nop
800135f8:	d7 03       	nop
800135fa:	d7 03       	nop
800135fc:	d7 03       	nop
800135fe:	d7 03       	nop
